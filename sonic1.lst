00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000B10                            		even
00000B10                            
00000B10                            ; ===========================================================================
00000B10                            
00000B10                            loc_B10:				; XREF: Vectors
00000B10 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000B14 4A38 F62A                  		tst.b	($FFFFF62A).w
00000B18 6700                       		beq.s	loc_B88
00000B1A 3039 00C0 0004             		move.w	($C00004).l,d0
00000B20 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000B2A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000B32 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B38 6700                       		beq.s	loc_B42
00000B3A 303C 0700                  		move.w	#$700,d0
00000B3E                            
00000B3E                            loc_B3E:
00000B3E 51C8 FFFE                  		dbf	d0,loc_B3E
00000B42                            
00000B42                            loc_B42:
00000B42 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000B46 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000B4C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B52 0240 003E                  		andi.w	#$3E,d0
00000B56 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000B5A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000B5E                            
00000B5E                            loc_B5E:				; XREF: loc_B88
00000B5E 4EB9 0000 0000             		jsr	sub_71B4C
00000B64                            
00000B64                            loc_B64:				; XREF: loc_D50
00000B64 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B68 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B6C 4E73                       		rte	
00000B6E                            ; ===========================================================================
00000B6E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B72 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B76 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B7A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B7E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B82 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B86 0000                       		dc.w loc_E72-off_B6E
00000B88                            ; ===========================================================================
00000B88                            
00000B88                            loc_B88:				; XREF: loc_B10; off_B6E
00000B88 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B8E 6700                       		beq.s	loc_B9A
00000B90 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B96 6600 FFC6                  		bne.w	loc_B5E
00000B9A                            
00000B9A                            loc_B9A:
00000B9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000BA0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000BA4 3039 00C0 0004             		move.w	($C00004).l,d0
00000BAA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000BB0 6700                       		beq.s	loc_BBA
00000BB2 303C 0700                  		move.w	#$700,d0
00000BB6                            
00000BB6                            loc_BB6:
00000BB6 51C8 FFFE                  		dbf	d0,loc_BB6
00000BBA                            
00000BBA                            loc_BBA:
00000BBA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000BC0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000BC8                            
00000BC8                            loc_BC8:
00000BC8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000BD0 66F6                       		bne.s	loc_BC8
00000BD2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BD6 6600                       		bne.s	loc_BFE
00000BD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BDE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BE4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BEA 3ABC 977F                  		move.w	#$977F,(a5)
00000BEE 3ABC C000                  		move.w	#$C000,(a5)
00000BF2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BFC 6000                       		bra.s	loc_C22
00000BFE                            ; ===========================================================================
00000BFE                            
00000BFE                            loc_BFE:				; XREF: loc_BC8
00000BFE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C04 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C0A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C10 3ABC 977F                  		move.w	#$977F,(a5)
00000C14 3ABC C000                  		move.w	#$C000,(a5)
00000C18 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C22                            
00000C22                            loc_C22:				; XREF: loc_BC8
00000C22 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C26 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C2E 6000 FF2E                  		bra.w	loc_B5E
00000C32                            ; ===========================================================================
00000C32                            
00000C32                            loc_C32:				; XREF: off_B6E
00000C32 6100 0000                  		bsr.w	sub_106E
00000C36                            
00000C36                            loc_C36:				; XREF: off_B6E
00000C36 4A78 F614                  		tst.w	($FFFFF614).w
00000C3A 6700 0000                  		beq.w	locret_C42
00000C3E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C42                            
00000C42                            locret_C42:
00000C42 4E75                       		rts	
00000C44                            ; ===========================================================================
00000C44                            
00000C44                            loc_C44:				; XREF: off_B6E
00000C44 6100 0000                  		bsr.w	sub_106E
00000C48 6100 0000                  		bsr.w	sub_6886
00000C4C 6100 0000                  		bsr.w	sub_1642
00000C50 4A78 F614                  		tst.w	($FFFFF614).w
00000C54 6700 0000                  		beq.w	locret_C5C
00000C58 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C5C                            
00000C5C                            locret_C5C:
00000C5C 4E75                       		rts	
00000C5E                            ; ===========================================================================
00000C5E                            
00000C5E                            loc_C5E:				; XREF: off_B6E
00000C5E 6100 0000                  		bsr.w	sub_106E
00000C62 4E75                       		rts	
00000C64                            ; ===========================================================================
00000C64                            
00000C64                            loc_C64:				; XREF: off_B6E
00000C64 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C6A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C6E                            
00000C6E                            loc_C6E:				; XREF: off_B6E
00000C6E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C76                            
00000C76                            loc_C76:
00000C76 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C7E 66F6                       		bne.s	loc_C76		; if not, branch
00000C80 6100 0000                  		bsr.w	ReadJoypads
00000C84 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C88 6600                       		bne.s	loc_CB0
00000C8A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C90 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C96 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C9C 3ABC 977F                  		move.w	#$977F,(a5)
00000CA0 3ABC C000                  		move.w	#$C000,(a5)
00000CA4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CAA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CAE 6000                       		bra.s	loc_CD4
00000CB0                            ; ===========================================================================
00000CB0                            
00000CB0                            loc_CB0:				; XREF: loc_C76
00000CB0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CB6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CBC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CC2 3ABC 977F                  		move.w	#$977F,(a5)
00000CC6 3ABC C000                  		move.w	#$C000,(a5)
00000CCA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CD0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CD4                            
00000CD4                            loc_CD4:				; XREF: loc_C76
00000CD4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CDE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CE4 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CEA 3ABC 977F                  		move.w	#$977F,(a5)
00000CEE 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CF2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D02 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D08 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D0E 3ABC 977F                  		move.w	#$977F,(a5)
00000D12 3ABC 7800                  		move.w	#$7800,(a5)
00000D16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D20 4A38 F767                  		tst.b	($FFFFF767).w
00000D24 6700                       		beq.s	loc_D50
00000D26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D2C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000D32 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000D38 3ABC 977F                  		move.w	#$977F,(a5)
00000D3C 3ABC 7000                  		move.w	#$7000,(a5)
00000D40 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D46 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D4A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000D50                            
00000D50                            loc_D50:
00000D50 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000D58 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D5E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D64 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D6A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D70 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D76 6400                       		bcc.s	Demo_Time
00000D78 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D7E 588F                       		addq.l	#4,sp
00000D80 6000 FDE2                  		bra.w	loc_B64
00000D84                            
00000D84                            ; ---------------------------------------------------------------------------
00000D84                            ; Subroutine to	run a demo for an amount of time
00000D84                            ; ---------------------------------------------------------------------------
00000D84                            
00000D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D84                            
00000D84                            
00000D84                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D84 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D88 4EB9 0000 0000             		jsr	AniArt_Load
00000D8E 4EB9 0000 0000             		jsr	HudUpdate
00000D94 6100 0000                  		bsr.w	sub_165E
00000D98 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D9C 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000DA0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000DA4                            
00000DA4                            Demo_TimeEnd:
00000DA4 4E75                       		rts	
00000DA6                            ; End of function Demo_Time
00000DA6                            
00000DA6                            ; ===========================================================================
00000DA6                            
00000DA6                            loc_DA6:				; XREF: off_B6E
00000DA6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DAE                            
00000DAE                            loc_DAE:
00000DAE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000DB6 66F6                       		bne.s	loc_DAE		; if not, branch
00000DB8 6100 0000                  		bsr.w	ReadJoypads
00000DBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DCE 3ABC 977F                  		move.w	#$977F,(a5)
00000DD2 3ABC C000                  		move.w	#$C000,(a5)
00000DD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DF2 3ABC 977F                  		move.w	#$977F,(a5)
00000DF6 3ABC 7800                  		move.w	#$7800,(a5)
00000DFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E00 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E04 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E10 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E16 3ABC 977F                  		move.w	#$977F,(a5)
00000E1A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E1E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E24 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E28 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E30 6100 0000                  		bsr.w	PalCycle_SS
00000E34 4A38 F767                  		tst.b	($FFFFF767).w
00000E38 6700                       		beq.s	loc_E64
00000E3A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E40 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E46 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E4C 3ABC 977F                  		move.w	#$977F,(a5)
00000E50 3ABC 7000                  		move.w	#$7000,(a5)
00000E54 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E5A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E5E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E64                            
00000E64                            loc_E64:
00000E64 4A78 F614                  		tst.w	($FFFFF614).w
00000E68 6700 0000                  		beq.w	locret_E70
00000E6C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E70                            
00000E70                            locret_E70:
00000E70 4E75                       		rts	
00000E72                            ; ===========================================================================
00000E72                            
00000E72                            loc_E72:				; XREF: off_B6E
00000E72 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E7A                            
00000E7A                            loc_E7A:
00000E7A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E82 66F6                       		bne.s	loc_E7A		; if not, branch
00000E84 6100 0000                  		bsr.w	ReadJoypads
00000E88 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E8C 6600                       		bne.s	loc_EB4
00000E8E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E94 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E9A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EA0 3ABC 977F                  		move.w	#$977F,(a5)
00000EA4 3ABC C000                  		move.w	#$C000,(a5)
00000EA8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EAE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EB2 6000                       		bra.s	loc_ED8
00000EB4                            ; ===========================================================================
00000EB4                            
00000EB4                            loc_EB4:				; XREF: loc_E7A
00000EB4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EBA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EC0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EC6 3ABC 977F                  		move.w	#$977F,(a5)
00000ECA 3ABC C000                  		move.w	#$C000,(a5)
00000ECE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ED4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED8                            
00000ED8                            loc_ED8:				; XREF: loc_E7A
00000ED8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EE8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EEE                            
00000EEE                            loc_EEE:
00000EEE 3ABC 977F                  		move.w	#$977F,(a5)
00000EF2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EF6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F00 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F06 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F0C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F12 3ABC 977F                  		move.w	#$977F,(a5)
00000F16 3ABC 7800                  		move.w	#$7800,(a5)
00000F1A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F20 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F24 4A38 F767                  		tst.b	($FFFFF767).w
00000F28 6700                       		beq.s	loc_F54
00000F2A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F30 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F36 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F3C 3ABC 977F                  		move.w	#$977F,(a5)
00000F40 3ABC 7000                  		move.w	#$7000,(a5)
00000F44 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F4E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F54                            
00000F54                            loc_F54:
00000F54 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F5C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F62 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F68 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F6E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F74 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F78 4EB9 0000 0000             		jsr	AniArt_Load
00000F7E 4EB9 0000 0000             		jsr	HudUpdate
00000F84 6100 0000                  		bsr.w	sub_1642
00000F88 4E75                       		rts	
00000F8A                            ; ===========================================================================
00000F8A                            
00000F8A                            loc_F8A:				; XREF: off_B6E
00000F8A 6100 0000                  		bsr.w	sub_106E
00000F8E 5238 F628                  		addq.b	#1,($FFFFF628).w
00000F92 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000F98 4E75                       		rts	
00000F9A                            ; ===========================================================================
00000F9A                            
00000F9A                            loc_F9A:				; XREF: off_B6E
00000F9A 6100 0000                  		bsr.w	sub_106E
00000F9E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000FA2 6000 0000                  		bra.w	sub_1642
00000FA6                            ; ===========================================================================
00000FA6                            
00000FA6                            loc_FA6:				; XREF: off_B6E
00000FA6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FAE                            
00000FAE                            loc_FAE:
00000FAE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FB6 66F6                       		bne.s	loc_FAE		; if not, branch
00000FB8 6100 0000                  		bsr.w	ReadJoypads
00000FBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FCE 3ABC 977F                  		move.w	#$977F,(a5)
00000FD2 3ABC C000                  		move.w	#$C000,(a5)
00000FD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC 7800                  		move.w	#$7800,(a5)
00000FFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001010 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001030 4A38 F767                  		tst.b	($FFFFF767).w
00001034 6700                       		beq.s	loc_1060
00001036 4BF9 00C0 0004             		lea	($C00004).l,a5
0000103C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001042 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001048 3ABC 977F                  		move.w	#$977F,(a5)
0000104C 3ABC 7000                  		move.w	#$7000,(a5)
00001050 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001056 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000105A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001060                            
00001060                            loc_1060:
00001060 4A78 F614                  		tst.w	($FFFFF614).w
00001064 6700 0000                  		beq.w	locret_106C
00001068 5378 F614                  		subq.w	#1,($FFFFF614).w
0000106C                            
0000106C                            locret_106C:
0000106C 4E75                       		rts	
0000106E                            
0000106E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000106E                            
0000106E                            
0000106E                            sub_106E:				; XREF: loc_C32; et al
0000106E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001076                            
00001076                            loc_1076:
00001076 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000107E 66F6                       		bne.s	loc_1076	; if not, branch
00001080 6100 0000                  		bsr.w	ReadJoypads
00001084 4A38 F64E                  		tst.b	($FFFFF64E).w
00001088 6600                       		bne.s	loc_10B0
0000108A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001090 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001096 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000109C 3ABC 977F                  		move.w	#$977F,(a5)
000010A0 3ABC C000                  		move.w	#$C000,(a5)
000010A4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010AA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010AE 6000                       		bra.s	loc_10D4
000010B0                            ; ===========================================================================
000010B0                            
000010B0                            loc_10B0:				; XREF: sub_106E
000010B0 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010C2 3ABC 977F                  		move.w	#$977F,(a5)
000010C6 3ABC C000                  		move.w	#$C000,(a5)
000010CA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D4                            
000010D4                            loc_10D4:				; XREF: sub_106E
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9401 9340             		move.l	#$94019340,(a5)
000010E0 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC 7800                  		move.w	#$7800,(a5)
000010EE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010FE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001104 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110A 3ABC 977F                  		move.w	#$977F,(a5)
0000110E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001112 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001118 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000111C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001124 4E75                       		rts	
00001126                            ; End of function sub_106E
00001126                            
00001126                            ; ---------------------------------------------------------------------------
00001126                            ; Subroutine to	move pallets from the RAM to CRAM
00001126                            ; ---------------------------------------------------------------------------
00001126                            
00001126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001126                            
00001126                            
00001126                            PalToCRAM:
00001126 46FC 2700                  		move	#$2700,sr
0000112A 4A78 F644                  		tst.w	($FFFFF644).w
0000112E 6700                       		beq.s	locret_119C
00001130 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001136 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000113A 43F9 00C0 0000             		lea	($C00000).l,a1
00001140 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001144 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000114C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000114E 2298                       		move.l	(a0)+,(a1)
00001150 2298                       		move.l	(a0)+,(a1)
00001152 2298                       		move.l	(a0)+,(a1)
00001154 2298                       		move.l	(a0)+,(a1)
00001156 2298                       		move.l	(a0)+,(a1)
00001158 2298                       		move.l	(a0)+,(a1)
0000115A 2298                       		move.l	(a0)+,(a1)
0000115C 2298                       		move.l	(a0)+,(a1)
0000115E 2298                       		move.l	(a0)+,(a1)
00001160 2298                       		move.l	(a0)+,(a1)
00001162 2298                       		move.l	(a0)+,(a1)
00001164 2298                       		move.l	(a0)+,(a1)
00001166 2298                       		move.l	(a0)+,(a1)
00001168 2298                       		move.l	(a0)+,(a1)
0000116A 2298                       		move.l	(a0)+,(a1)
0000116C 2298                       		move.l	(a0)+,(a1)
0000116E 2298                       		move.l	(a0)+,(a1)
00001170 2298                       		move.l	(a0)+,(a1)
00001172 2298                       		move.l	(a0)+,(a1)
00001174 2298                       		move.l	(a0)+,(a1)
00001176 2298                       		move.l	(a0)+,(a1)
00001178 2298                       		move.l	(a0)+,(a1)
0000117A 2298                       		move.l	(a0)+,(a1)
0000117C 2298                       		move.l	(a0)+,(a1)
0000117E 2298                       		move.l	(a0)+,(a1)
00001180 2298                       		move.l	(a0)+,(a1)
00001182 2298                       		move.l	(a0)+,(a1)
00001184 2298                       		move.l	(a0)+,(a1)
00001186 2298                       		move.l	(a0)+,(a1)
00001188 2298                       		move.l	(a0)+,(a1)
0000118A 2298                       		move.l	(a0)+,(a1)
0000118C 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001192 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001196 4A38 F64F                  		tst.b	($FFFFF64F).w
0000119A 6600                       		bne.s	loc_119E
0000119C                            
0000119C                            locret_119C:
0000119C 4E73                       		rte	
0000119E                            ; ===========================================================================
0000119E                            
0000119E                            loc_119E:				; XREF: PalToCRAM
0000119E 4238 F64F                  		clr.b	($FFFFF64F).w
000011A2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000011A6 6100 FBDC                  		bsr.w	Demo_Time
000011AA 4EB9 0000 0000             		jsr	sub_71B4C
000011B0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000011B4 4E73                       		rte	
000011B6                            ; End of function PalToCRAM
000011B6                            
000011B6                            ; ---------------------------------------------------------------------------
000011B6                            ; Subroutine to	initialise joypads
000011B6                            ; ---------------------------------------------------------------------------
000011B6                            
000011B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011B6                            
000011B6                            
000011B6                            JoypadInit:				; XREF: GameClrRAM
000011B6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011BE                            
000011BE                            Joypad_WaitZ80:
000011BE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000011C6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000011C8 7040                       		moveq	#$40,d0
000011CA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000011D0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000011D6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000011DC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000011E4 4E75                       		rts	
000011E6                            ; End of function JoypadInit
000011E6                            
000011E6                            ; ---------------------------------------------------------------------------
000011E6                            ; Subroutine to	read joypad input, and send it to the RAM
000011E6                            ; ---------------------------------------------------------------------------
000011E6                            
000011E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011E6                            
000011E6                            
000011E6                            ReadJoypads:
000011E6 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000011EA 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000011F0 6100                       		bsr.s	Joypad_Read	; do the first joypad
000011F2 5449                       		addq.w	#2,a1		; do the second	joypad
000011F4                            
000011F4                            Joypad_Read:
000011F4 12BC 0000                  		move.b	#0,(a1)
000011F8 4E71                       		nop	
000011FA 4E71                       		nop	
000011FC 1011                       		move.b	(a1),d0
000011FE E508                       		lsl.b	#2,d0
00001200 0200 00C0                  		andi.b	#$C0,d0
00001204 12BC 0040                  		move.b	#$40,(a1)
00001208 4E71                       		nop	
0000120A 4E71                       		nop	
0000120C 1211                       		move.b	(a1),d1
0000120E 0201 003F                  		andi.b	#$3F,d1
00001212 8001                       		or.b	d1,d0
00001214 4600                       		not.b	d0
00001216 1210                       		move.b	(a0),d1
00001218 B101                       		eor.b	d0,d1
0000121A 10C0                       		move.b	d0,(a0)+
0000121C C200                       		and.b	d0,d1
0000121E 10C1                       		move.b	d1,(a0)+
00001220 4E75                       		rts	
00001222                            ; End of function ReadJoypads
00001222                            
00001222                            
00001222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001222                            
00001222                            
00001222                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001222 41F9 00C0 0004             		lea	($C00004).l,a0
00001228 43F9 00C0 0000             		lea	($C00000).l,a1
0000122E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001234 7E12                       		moveq	#$12,d7
00001236                            
00001236                            VDP_Loop:
00001236 309A                       		move.w	(a2)+,(a0)
00001238 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000123C                            
0000123C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001242 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001246 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000124C 7000                       		moveq	#0,d0
0000124E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001258 3E3C 003F                  		move.w	#$3F,d7
0000125C                            
0000125C                            VDP_ClrCRAM:
0000125C 3280                       		move.w	d0,(a1)
0000125E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001262                            
00001262 42B8 F616                  		clr.l	($FFFFF616).w
00001266 42B8 F61A                  		clr.l	($FFFFF61A).w
0000126A 2F01                       		move.l	d1,-(sp)
0000126C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001272 3ABC 8F01                  		move.w	#$8F01,(a5)
00001276 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000127C 3ABC 9780                  		move.w	#$9780,(a5)
00001280 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001286 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000128E                            
0000128E                            loc_128E:
0000128E 3215                       		move.w	(a5),d1
00001290 0801 0001                  		btst	#1,d1
00001294 66F8                       		bne.s	loc_128E
00001296                            
00001296 3ABC 8F02                  		move.w	#$8F02,(a5)
0000129A 221F                       		move.l	(sp)+,d1
0000129C 4E75                       		rts	
0000129E                            ; End of function VDPSetupGame
0000129E                            
0000129E                            ; ===========================================================================
0000129E 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000012A6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000012AE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000012B6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000012BE 9001 9100 9200             		dc.w $9001, $9100, $9200
000012C4                            
000012C4                            ; ---------------------------------------------------------------------------
000012C4                            ; Subroutine to	clear the screen
000012C4                            ; ---------------------------------------------------------------------------
000012C4                            
000012C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C4                            
000012C4                            
000012C4                            ClearScreen:
000012C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012CA 3ABC 8F01                  		move.w	#$8F01,(a5)
000012CE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000012D4 3ABC 9780                  		move.w	#$9780,(a5)
000012D8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000012DE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000012E6                            
000012E6                            loc_12E6:
000012E6 3215                       		move.w	(a5),d1
000012E8 0801 0001                  		btst	#1,d1
000012EC 66F8                       		bne.s	loc_12E6
000012EE                            
000012EE 3ABC 8F02                  		move.w	#$8F02,(a5)
000012F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000012F8 3ABC 8F01                  		move.w	#$8F01,(a5)
000012FC 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001302 3ABC 9780                  		move.w	#$9780,(a5)
00001306 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000130C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001314                            
00001314                            loc_1314:
00001314 3215                       		move.w	(a5),d1
00001316 0801 0001                  		btst	#1,d1
0000131A 66F8                       		bne.s	loc_1314
0000131C                            
0000131C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001320 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001328 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001330 43F8 F800                  		lea	($FFFFF800).w,a1
00001334 7000                       		moveq	#0,d0
00001336 323C 00A0                  		move.w	#$A0,d1
0000133A                            
0000133A                            loc_133A:
0000133A 22C0                       		move.l	d0,(a1)+
0000133C 51C9 FFFC                  		dbf	d1,loc_133A
00001340                            
00001340 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001344 7000                       		moveq	#0,d0
00001346 323C 0100                  		move.w	#$100,d1
0000134A                            
0000134A                            loc_134A:
0000134A 22C0                       		move.l	d0,(a1)+
0000134C 51C9 FFFC                  		dbf	d1,loc_134A
00001350 4E75                       		rts	
00001352                            ; End of function ClearScreen
00001352                            
00001352                            ; ---------------------------------------------------------------------------
00001352                            ; Subroutine to	load the sound driver
00001352                            ; ---------------------------------------------------------------------------
00001352                            
00001352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001352                            
00001352                            
00001352                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001352 4E71                       		nop	
00001354 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000135C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001364 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000136A 43F9 00A0 0000             		lea	($A00000).l,a1
00001370 6100 0000                  		bsr.w	KosDec		; decompress
00001374 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000137C 4E71                       		nop	
0000137E 4E71                       		nop	
00001380 4E71                       		nop	
00001382 4E71                       		nop	
00001384 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000138C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001394 4E75                       		rts	
00001396                            ; End of function SoundDriverLoad
00001396                            
00001396                            ; ---------------------------------------------------------------------------
00001396                            ; Subroutine to	play a sound or	music track
00001396                            ; ---------------------------------------------------------------------------
00001396                            
00001396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001396                            
00001396                            
00001396                            PlaySound:
00001396 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000139A 4E75                       		rts	
0000139C                            ; End of function PlaySound
0000139C                            
0000139C                            ; ---------------------------------------------------------------------------
0000139C                            ; Subroutine to	play a special sound/music (E0-E4)
0000139C                            ;
0000139C                            ; E0 - Fade out
0000139C                            ; E1 - Sega
0000139C                            ; E2 - Speed up
0000139C                            ; E3 - Normal speed
0000139C                            ; E4 - Stop
0000139C                            ; ---------------------------------------------------------------------------
0000139C                            
0000139C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000139C                            
0000139C                            
0000139C                            PlaySound_Special:
0000139C 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000013A0 4E75                       		rts	
000013A2                            ; End of function PlaySound_Special
000013A2                            
000013A2                            ; ===========================================================================
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            ; Unused sound/music subroutine
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            
000013A2                            PlaySound_Unk:
000013A2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000013A6 4E75                       		rts	
000013A8                            
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            ; Subroutine to	pause the game
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            
000013A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013A8                            
000013A8                            
000013A8                            PauseGame:				; XREF: Level_MainLoop; et al
000013A8 4E71                       		nop	
000013AA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000013AE 6700                       		beq.s	Unpause		; if not, branch
000013B0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000013B4 6600                       		bne.s	loc_13BE	; if yes, branch
000013B6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000013BC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000013BE                            
000013BE                            loc_13BE:
000013BE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000013C4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000013CA                            
000013CA                            loc_13CA:
000013CA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000013D0 6100 0000                  		bsr.w	DelayProgram
000013D4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000013D8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000013DA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000013E0 6700                       		beq.s	Pause_ChkBC	; if not, branch
000013E2 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000013E8 4E71                       		nop	
000013EA 6000                       		bra.s	loc_1404
000013EC                            ; ===========================================================================
000013EC                            
000013EC                            Pause_ChkBC:				; XREF: PauseGame
000013EC 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000013F2 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013F4 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000013FA 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013FC                            
000013FC                            Pause_ChkStart:				; XREF: PauseGame
000013FC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001402 67C6                       		beq.s	loc_13CA	; if not, branch
00001404                            
00001404                            loc_1404:				; XREF: PauseGame
00001404 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000140A                            
0000140A                            Unpause:				; XREF: PauseGame
0000140A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001410                            
00001410                            Pause_DoNothing:			; XREF: PauseGame
00001410 4E75                       		rts	
00001412                            ; ===========================================================================
00001412                            
00001412                            Pause_SlowMo:				; XREF: PauseGame
00001412 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001418 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000141E 4E75                       		rts	
00001420                            ; End of function PauseGame
00001420                            
00001420                            ; ---------------------------------------------------------------------------
00001420                            ; Subroutine to	display	patterns via the VDP
00001420                            ; ---------------------------------------------------------------------------
00001420                            
00001420                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001420                            
00001420                            
00001420                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001420 4DF9 00C0 0000             		lea	($C00000).l,a6
00001426 283C 0080 0000             		move.l	#$800000,d4
0000142C                            
0000142C                            loc_142C:
0000142C 2D40 0004                  		move.l	d0,4(a6)
00001430 3601                       		move.w	d1,d3
00001432                            
00001432                            loc_1432:
00001432 3C99                       		move.w	(a1)+,(a6)
00001434 51CB FFFC                  		dbf	d3,loc_1432
00001438 D084                       		add.l	d4,d0
0000143A 51CA FFF0                  		dbf	d2,loc_142C
0000143E 4E75                       		rts	
00001440                            ; End of function ShowVDPGraphics
00001440                            
00001440                            ; ---------------------------------------------------------------------------
00001440                            ; Nemesis decompression	algorithm
00001440                            ; ---------------------------------------------------------------------------
00001440                            
00001440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001440                            
00001440                            
00001440                            NemDec:
00001440 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001444 47F9 0000 0000             		lea	(loc_1502).l,a3
0000144A 49F9 00C0 0000             		lea	($C00000).l,a4
00001450 6000                       		bra.s	loc_145C
00001452                            ; ===========================================================================
00001452 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001456 47F9 0000 0000             		lea	(loc_1518).l,a3
0000145C                            
0000145C                            loc_145C:				; XREF: NemDec
0000145C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001460 3418                       		move.w	(a0)+,d2
00001462 E34A                       		lsl.w	#1,d2
00001464 6400                       		bcc.s	loc_146A
00001466 D6FC 000A                  		adda.w	#$A,a3
0000146A                            
0000146A                            loc_146A:
0000146A E54A                       		lsl.w	#2,d2
0000146C 3A42                       		movea.w	d2,a5
0000146E 7608                       		moveq	#8,d3
00001470 7400                       		moveq	#0,d2
00001472 7800                       		moveq	#0,d4
00001474 6100 0000                  		bsr.w	NemDec4
00001478 1A18                       		move.b	(a0)+,d5
0000147A E145                       		asl.w	#8,d5
0000147C 1A18                       		move.b	(a0)+,d5
0000147E 3C3C 0010                  		move.w	#$10,d6
00001482 6100                       		bsr.s	NemDec2
00001484 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001488 4E75                       		rts	
0000148A                            ; End of function NemDec
0000148A                            
0000148A                            
0000148A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000148A                            
0000148A                            
0000148A                            NemDec2:				; XREF: NemDec
0000148A 3E06                       		move.w	d6,d7
0000148C 5147                       		subq.w	#8,d7
0000148E 3205                       		move.w	d5,d1
00001490 EE69                       		lsr.w	d7,d1
00001492 0C01 00FC                  		cmpi.b	#-4,d1
00001496 6400                       		bcc.s	loc_14D6
00001498 0241 00FF                  		andi.w	#$FF,d1
0000149C D241                       		add.w	d1,d1
0000149E 1031 1000                  		move.b	(a1,d1.w),d0
000014A2 4880                       		ext.w	d0
000014A4 9C40                       		sub.w	d0,d6
000014A6 0C46 0009                  		cmpi.w	#9,d6
000014AA 6400                       		bcc.s	loc_14B2
000014AC 5046                       		addq.w	#8,d6
000014AE E145                       		asl.w	#8,d5
000014B0 1A18                       		move.b	(a0)+,d5
000014B2                            
000014B2                            loc_14B2:
000014B2 1231 1001                  		move.b	1(a1,d1.w),d1
000014B6 3001                       		move.w	d1,d0
000014B8 0241 000F                  		andi.w	#$F,d1
000014BC 0240 00F0                  		andi.w	#$F0,d0
000014C0                            
000014C0                            loc_14C0:				; XREF: NemDec3
000014C0 E848                       		lsr.w	#4,d0
000014C2                            
000014C2                            loc_14C2:				; XREF: NemDec3
000014C2 E98C                       		lsl.l	#4,d4
000014C4 8801                       		or.b	d1,d4
000014C6 5343                       		subq.w	#1,d3
000014C8 6600                       		bne.s	loc_14D0
000014CA 4ED3                       		jmp	(a3)
000014CC                            ; End of function NemDec2
000014CC                            
000014CC                            
000014CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014CC                            
000014CC                            
000014CC                            NemDec3:				; XREF: loc_1502
000014CC 7800                       		moveq	#0,d4
000014CE 7608                       		moveq	#8,d3
000014D0                            
000014D0                            loc_14D0:				; XREF: NemDec2
000014D0 51C8 FFF0                  		dbf	d0,loc_14C2
000014D4 60B4                       		bra.s	NemDec2
000014D6                            ; ===========================================================================
000014D6                            
000014D6                            loc_14D6:				; XREF: NemDec2
000014D6 5D46                       		subq.w	#6,d6
000014D8 0C46 0009                  		cmpi.w	#9,d6
000014DC 6400                       		bcc.s	loc_14E4
000014DE 5046                       		addq.w	#8,d6
000014E0 E145                       		asl.w	#8,d5
000014E2 1A18                       		move.b	(a0)+,d5
000014E4                            
000014E4                            loc_14E4:				; XREF: NemDec3
000014E4 5F46                       		subq.w	#7,d6
000014E6 3205                       		move.w	d5,d1
000014E8 EC69                       		lsr.w	d6,d1
000014EA 3001                       		move.w	d1,d0
000014EC 0241 000F                  		andi.w	#$F,d1
000014F0 0240 0070                  		andi.w	#$70,d0
000014F4 0C46 0009                  		cmpi.w	#9,d6
000014F8 64C6                       		bcc.s	loc_14C0
000014FA 5046                       		addq.w	#8,d6
000014FC E145                       		asl.w	#8,d5
000014FE 1A18                       		move.b	(a0)+,d5
00001500 60BE                       		bra.s	loc_14C0
00001502                            ; End of function NemDec3
00001502                            
00001502                            ; ===========================================================================
00001502                            
00001502                            loc_1502:				; XREF: NemDec
00001502 2884                       		move.l	d4,(a4)
00001504 534D                       		subq.w	#1,a5
00001506 380D                       		move.w	a5,d4
00001508 66C2                       		bne.s	NemDec3
0000150A 4E75                       		rts	
0000150C                            ; ===========================================================================
0000150C B982                       		eor.l	d4,d2
0000150E 2882                       		move.l	d2,(a4)
00001510 534D                       		subq.w	#1,a5
00001512 380D                       		move.w	a5,d4
00001514 66B6                       		bne.s	NemDec3
00001516 4E75                       		rts	
00001518                            ; ===========================================================================
00001518                            
00001518                            loc_1518:				; XREF: NemDec
00001518 28C4                       		move.l	d4,(a4)+
0000151A 534D                       		subq.w	#1,a5
0000151C 380D                       		move.w	a5,d4
0000151E 66AC                       		bne.s	NemDec3
00001520 4E75                       		rts	
00001522                            ; ===========================================================================
00001522 B982                       		eor.l	d4,d2
00001524 28C2                       		move.l	d2,(a4)+
00001526 534D                       		subq.w	#1,a5
00001528 380D                       		move.w	a5,d4
0000152A 66A0                       		bne.s	NemDec3
0000152C 4E75                       		rts	
0000152E                            
0000152E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000152E                            
0000152E                            
0000152E                            NemDec4:				; XREF: NemDec
0000152E 1018                       		move.b	(a0)+,d0
00001530                            
00001530                            loc_1530:
00001530 0C00 00FF                  		cmpi.b	#-1,d0
00001534 6600                       		bne.s	loc_1538
00001536 4E75                       		rts	
00001538                            ; ===========================================================================
00001538                            
00001538                            loc_1538:				; XREF: NemDec4
00001538 3E00                       		move.w	d0,d7
0000153A                            
0000153A                            loc_153A:
0000153A 1018                       		move.b	(a0)+,d0
0000153C 0C00 0080                  		cmpi.b	#$80,d0
00001540 64EE                       		bcc.s	loc_1530
00001542 1200                       		move.b	d0,d1
00001544 0247 000F                  		andi.w	#$F,d7
00001548 0241 0070                  		andi.w	#$70,d1
0000154C 8E41                       		or.w	d1,d7
0000154E 0240 000F                  		andi.w	#$F,d0
00001552 1200                       		move.b	d0,d1
00001554 E149                       		lsl.w	#8,d1
00001556 8E41                       		or.w	d1,d7
00001558 7208                       		moveq	#8,d1
0000155A 9240                       		sub.w	d0,d1
0000155C 6600                       		bne.s	loc_1568
0000155E 1018                       		move.b	(a0)+,d0
00001560 D040                       		add.w	d0,d0
00001562 3387 0000                  		move.w	d7,(a1,d0.w)
00001566 60D2                       		bra.s	loc_153A
00001568                            ; ===========================================================================
00001568                            
00001568                            loc_1568:				; XREF: NemDec4
00001568 1018                       		move.b	(a0)+,d0
0000156A E368                       		lsl.w	d1,d0
0000156C D040                       		add.w	d0,d0
0000156E 7A01                       		moveq	#1,d5
00001570 E36D                       		lsl.w	d1,d5
00001572 5345                       		subq.w	#1,d5
00001574                            
00001574                            loc_1574:
00001574 3387 0000                  		move.w	d7,(a1,d0.w)
00001578 5440                       		addq.w	#2,d0
0000157A 51CD FFF8                  		dbf	d5,loc_1574
0000157E 60BA                       		bra.s	loc_153A
00001580                            ; End of function NemDec4
00001580                            
00001580                            ; ---------------------------------------------------------------------------
00001580                            ; Subroutine to	load pattern load cues
00001580                            ; ---------------------------------------------------------------------------
00001580                            
00001580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001580                            
00001580                            
00001580                            LoadPLC:
00001580 48E7 0060                  		movem.l	a1-a2,-(sp)
00001584 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000158A D040                       		add.w	d0,d0
0000158C 3031 0000                  		move.w	(a1,d0.w),d0
00001590 43F1 0000                  		lea	(a1,d0.w),a1
00001594 45F8 F680                  		lea	($FFFFF680).w,a2
00001598                            
00001598                            loc_1598:
00001598 4A92                       		tst.l	(a2)
0000159A 6700                       		beq.s	loc_15A0
0000159C 5C4A                       		addq.w	#6,a2
0000159E 60F8                       		bra.s	loc_1598
000015A0                            ; ===========================================================================
000015A0                            
000015A0                            loc_15A0:				; XREF: LoadPLC
000015A0 3019                       		move.w	(a1)+,d0
000015A2 6B00                       		bmi.s	loc_15AC
000015A4                            
000015A4                            loc_15A4:
000015A4 24D9                       		move.l	(a1)+,(a2)+
000015A6 34D9                       		move.w	(a1)+,(a2)+
000015A8 51C8 FFFA                  		dbf	d0,loc_15A4
000015AC                            
000015AC                            loc_15AC:
000015AC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015B0 4E75                       		rts	
000015B2                            ; End of function LoadPLC
000015B2                            
000015B2                            
000015B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B2                            
000015B2                            
000015B2                            LoadPLC2:
000015B2 48E7 0060                  		movem.l	a1-a2,-(sp)
000015B6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000015BC D040                       		add.w	d0,d0
000015BE 3031 0000                  		move.w	(a1,d0.w),d0
000015C2 43F1 0000                  		lea	(a1,d0.w),a1
000015C6 6100                       		bsr.s	ClearPLC
000015C8 45F8 F680                  		lea	($FFFFF680).w,a2
000015CC 3019                       		move.w	(a1)+,d0
000015CE 6B00                       		bmi.s	loc_15D8
000015D0                            
000015D0                            loc_15D0:
000015D0 24D9                       		move.l	(a1)+,(a2)+
000015D2 34D9                       		move.w	(a1)+,(a2)+
000015D4 51C8 FFFA                  		dbf	d0,loc_15D0
000015D8                            
000015D8                            loc_15D8:
000015D8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015DC 4E75                       		rts	
000015DE                            ; End of function LoadPLC2
000015DE                            
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            ; Subroutine to	clear the pattern load cues
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            
000015DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015DE                            
000015DE                            
000015DE                            ClearPLC:				; XREF: LoadPLC2
000015DE 45F8 F680                  		lea	($FFFFF680).w,a2
000015E2 701F                       		moveq	#$1F,d0
000015E4                            
000015E4                            ClearPLC_Loop:
000015E4 429A                       		clr.l	(a2)+
000015E6 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000015EA 4E75                       		rts	
000015EC                            ; End of function ClearPLC
000015EC                            
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            ; Subroutine to	use graphics listed in a pattern load cue
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            
000015EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015EC                            
000015EC                            
000015EC                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015EC 4AB8 F680                  		tst.l	($FFFFF680).w
000015F0 6700                       		beq.s	locret_1640
000015F2 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015F6 6600                       		bne.s	locret_1640
000015F8 2078 F680                  		movea.l	($FFFFF680).w,a0
000015FC 47F9 0000 1502             		lea	(loc_1502).l,a3
00001602 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001606 3418                       		move.w	(a0)+,d2
00001608 6A00                       		bpl.s	loc_160E
0000160A D6FC 000A                  		adda.w	#$A,a3
0000160E                            
0000160E                            loc_160E:
0000160E 0242 7FFF                  		andi.w	#$7FFF,d2
00001612 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001616 6100 FF16                  		bsr.w	NemDec4
0000161A 1A18                       		move.b	(a0)+,d5
0000161C E145                       		asl.w	#8,d5
0000161E 1A18                       		move.b	(a0)+,d5
00001620 7C10                       		moveq	#$10,d6
00001622 7000                       		moveq	#0,d0
00001624 21C8 F680                  		move.l	a0,($FFFFF680).w
00001628 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000162C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001630 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001634 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001638 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000163C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001640                            
00001640                            locret_1640:
00001640 4E75                       		rts	
00001642                            ; End of function RunPLC_RAM
00001642                            
00001642                            
00001642                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001642                            
00001642                            
00001642                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001642 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001646 6700 0000                  		beq.w	locret_16DA
0000164A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001650 7000                       		moveq	#0,d0
00001652 3038 F684                  		move.w	($FFFFF684).w,d0
00001656 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000165C 6000                       		bra.s	loc_1676
0000165E                            ; End of function sub_1642
0000165E                            
0000165E                            
0000165E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000165E                            
0000165E                            
0000165E                            sub_165E:				; XREF: Demo_Time
0000165E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001662 6700                       		beq.s	locret_16DA
00001664 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000166A 7000                       		moveq	#0,d0
0000166C 3038 F684                  		move.w	($FFFFF684).w,d0
00001670 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001676                            
00001676                            loc_1676:				; XREF: sub_1642
00001676 49F9 00C0 0004             		lea	($C00004).l,a4
0000167C E588                       		lsl.l	#2,d0
0000167E E448                       		lsr.w	#2,d0
00001680 0040 4000                  		ori.w	#$4000,d0
00001684 4840                       		swap	d0
00001686 2880                       		move.l	d0,(a4)
00001688 594C                       		subq.w	#4,a4
0000168A 2078 F680                  		movea.l	($FFFFF680).w,a0
0000168E 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001692 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001696 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000169A 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000169E 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000016A2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000016A6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000016AA                            
000016AA                            loc_16AA:				; XREF: sub_165E
000016AA 3A7C 0008                  		movea.w	#8,a5
000016AE 6100 FE1C                  		bsr.w	NemDec3
000016B2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000016B6 6700                       		beq.s	loc_16DC
000016B8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000016BC 66EC                       		bne.s	loc_16AA
000016BE 21C8 F680                  		move.l	a0,($FFFFF680).w
000016C2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000016C6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000016CA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000016CE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000016D2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000016D6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000016DA                            
000016DA                            locret_16DA:				; XREF: sub_1642
000016DA 4E75                       		rts	
000016DC                            ; ===========================================================================
000016DC                            
000016DC                            loc_16DC:				; XREF: sub_165E
000016DC 41F8 F680                  		lea	($FFFFF680).w,a0
000016E0 7015                       		moveq	#$15,d0
000016E2                            
000016E2                            loc_16E2:				; XREF: sub_165E
000016E2 20E8 0006                  		move.l	6(a0),(a0)+
000016E6 51C8 FFFA                  		dbf	d0,loc_16E2
000016EA 4E75                       		rts	
000016EC                            ; End of function sub_165E
000016EC                            
000016EC                            ; ---------------------------------------------------------------------------
000016EC                            ; Subroutine to	execute	the pattern load cue
000016EC                            ; ---------------------------------------------------------------------------
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            RunPLC_ROM:
000016EC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016F2 D040                       		add.w	d0,d0
000016F4 3031 0000                  		move.w	(a1,d0.w),d0
000016F8 43F1 0000                  		lea	(a1,d0.w),a1
000016FC 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000016FE                            
000016FE                            RunPLC_Loop:
000016FE 2059                       		movea.l	(a1)+,a0	; get art pointer
00001700 7000                       		moveq	#0,d0
00001702 3019                       		move.w	(a1)+,d0	; get VRAM address
00001704 E588                       		lsl.l	#2,d0		; divide address by $20
00001706 E448                       		lsr.w	#2,d0
00001708 0040 4000                  		ori.w	#$4000,d0
0000170C 4840                       		swap	d0
0000170E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001714 6100 FD2A                  		bsr.w	NemDec		; decompress
00001718 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000171C 4E75                       		rts	
0000171E                            ; End of function RunPLC_ROM
0000171E                            
0000171E                            ; ---------------------------------------------------------------------------
0000171E                            ; Enigma decompression algorithm
0000171E                            ; ---------------------------------------------------------------------------
0000171E                            
0000171E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171E                            
0000171E                            
0000171E                            EniDec:
0000171E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001722 3640                       		movea.w	d0,a3
00001724 1018                       		move.b	(a0)+,d0
00001726 4880                       		ext.w	d0
00001728 3A40                       		movea.w	d0,a5
0000172A 1818                       		move.b	(a0)+,d4
0000172C E70C                       		lsl.b	#3,d4
0000172E 3458                       		movea.w	(a0)+,a2
00001730 D4CB                       		adda.w	a3,a2
00001732 3858                       		movea.w	(a0)+,a4
00001734 D8CB                       		adda.w	a3,a4
00001736 1A18                       		move.b	(a0)+,d5
00001738 E145                       		asl.w	#8,d5
0000173A 1A18                       		move.b	(a0)+,d5
0000173C 7C10                       		moveq	#$10,d6
0000173E                            
0000173E                            loc_173E:				; XREF: loc_1768
0000173E 7007                       		moveq	#7,d0
00001740 3E06                       		move.w	d6,d7
00001742 9E40                       		sub.w	d0,d7
00001744 3205                       		move.w	d5,d1
00001746 EE69                       		lsr.w	d7,d1
00001748 0241 007F                  		andi.w	#$7F,d1
0000174C 3401                       		move.w	d1,d2
0000174E 0C41 0040                  		cmpi.w	#$40,d1
00001752 6400                       		bcc.s	loc_1758
00001754 7006                       		moveq	#6,d0
00001756 E24A                       		lsr.w	#1,d2
00001758                            
00001758                            loc_1758:
00001758 6100 0000                  		bsr.w	sub_188C
0000175C 0242 000F                  		andi.w	#$F,d2
00001760 E849                       		lsr.w	#4,d1
00001762 D241                       		add.w	d1,d1
00001764 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001768                            ; End of function EniDec
00001768                            
00001768                            ; ===========================================================================
00001768                            
00001768                            loc_1768:				; XREF: loc_17B4
00001768 32CA                       		move.w	a2,(a1)+
0000176A 524A                       		addq.w	#1,a2
0000176C 51CA FFFA                  		dbf	d2,loc_1768
00001770 60CC                       		bra.s	loc_173E
00001772                            ; ===========================================================================
00001772                            
00001772                            loc_1772:				; XREF: loc_17B4
00001772 32CC                       		move.w	a4,(a1)+
00001774 51CA FFFC                  		dbf	d2,loc_1772
00001778 60C4                       		bra.s	loc_173E
0000177A                            ; ===========================================================================
0000177A                            
0000177A                            loc_177A:				; XREF: loc_17B4
0000177A 6100 0000                  		bsr.w	loc_17DC
0000177E                            
0000177E                            loc_177E:
0000177E 32C1                       		move.w	d1,(a1)+
00001780 51CA FFFC                  		dbf	d2,loc_177E
00001784 60B8                       		bra.s	loc_173E
00001786                            ; ===========================================================================
00001786                            
00001786                            loc_1786:				; XREF: loc_17B4
00001786 6100 0000                  		bsr.w	loc_17DC
0000178A                            
0000178A                            loc_178A:
0000178A 32C1                       		move.w	d1,(a1)+
0000178C 5241                       		addq.w	#1,d1
0000178E 51CA FFFA                  		dbf	d2,loc_178A
00001792 60AA                       		bra.s	loc_173E
00001794                            ; ===========================================================================
00001794                            
00001794                            loc_1794:				; XREF: loc_17B4
00001794 6100 0000                  		bsr.w	loc_17DC
00001798                            
00001798                            loc_1798:
00001798 32C1                       		move.w	d1,(a1)+
0000179A 5341                       		subq.w	#1,d1
0000179C 51CA FFFA                  		dbf	d2,loc_1798
000017A0 609C                       		bra.s	loc_173E
000017A2                            ; ===========================================================================
000017A2                            
000017A2                            loc_17A2:				; XREF: loc_17B4
000017A2 0C42 000F                  		cmpi.w	#$F,d2
000017A6 6700                       		beq.s	loc_17C4
000017A8                            
000017A8                            loc_17A8:
000017A8 6100 0000                  		bsr.w	loc_17DC
000017AC 32C1                       		move.w	d1,(a1)+
000017AE 51CA FFF8                  		dbf	d2,loc_17A8
000017B2 608A                       		bra.s	loc_173E
000017B4                            ; ===========================================================================
000017B4                            
000017B4                            loc_17B4:				; XREF: EniDec
000017B4 60B2                       		bra.s	loc_1768
000017B6                            ; ===========================================================================
000017B6 60B0                       		bra.s	loc_1768
000017B8                            ; ===========================================================================
000017B8 60B8                       		bra.s	loc_1772
000017BA                            ; ===========================================================================
000017BA 60B6                       		bra.s	loc_1772
000017BC                            ; ===========================================================================
000017BC 60BC                       		bra.s	loc_177A
000017BE                            ; ===========================================================================
000017BE 60C6                       		bra.s	loc_1786
000017C0                            ; ===========================================================================
000017C0 60D2                       		bra.s	loc_1794
000017C2                            ; ===========================================================================
000017C2 60DE                       		bra.s	loc_17A2
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_17C4:				; XREF: loc_17A2
000017C4 5348                       		subq.w	#1,a0
000017C6 0C46 0010                  		cmpi.w	#$10,d6
000017CA 6600                       		bne.s	loc_17CE
000017CC 5348                       		subq.w	#1,a0
000017CE                            
000017CE                            loc_17CE:
000017CE 3008                       		move.w	a0,d0
000017D0 E248                       		lsr.w	#1,d0
000017D2 6400                       		bcc.s	loc_17D6
000017D4 5248                       		addq.w	#1,a0
000017D6                            
000017D6                            loc_17D6:
000017D6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000017DA 4E75                       		rts	
000017DC                            ; ===========================================================================
000017DC                            
000017DC                            loc_17DC:				; XREF: loc_17A2
000017DC 360B                       		move.w	a3,d3
000017DE 1204                       		move.b	d4,d1
000017E0 D201                       		add.b	d1,d1
000017E2 6400                       		bcc.s	loc_17EE
000017E4 5346                       		subq.w	#1,d6
000017E6 0D05                       		btst	d6,d5
000017E8 6700                       		beq.s	loc_17EE
000017EA 0043 8000                  		ori.w	#-$8000,d3
000017EE                            
000017EE                            loc_17EE:
000017EE D201                       		add.b	d1,d1
000017F0 6400                       		bcc.s	loc_17FC
000017F2 5346                       		subq.w	#1,d6
000017F4 0D05                       		btst	d6,d5
000017F6 6700                       		beq.s	loc_17FC
000017F8 0643 4000                  		addi.w	#$4000,d3
000017FC                            
000017FC                            loc_17FC:
000017FC D201                       		add.b	d1,d1
000017FE 6400                       		bcc.s	loc_180A
00001800 5346                       		subq.w	#1,d6
00001802 0D05                       		btst	d6,d5
00001804 6700                       		beq.s	loc_180A
00001806 0643 2000                  		addi.w	#$2000,d3
0000180A                            
0000180A                            loc_180A:
0000180A D201                       		add.b	d1,d1
0000180C 6400                       		bcc.s	loc_1818
0000180E 5346                       		subq.w	#1,d6
00001810 0D05                       		btst	d6,d5
00001812 6700                       		beq.s	loc_1818
00001814 0043 1000                  		ori.w	#$1000,d3
00001818                            
00001818                            loc_1818:
00001818 D201                       		add.b	d1,d1
0000181A 6400                       		bcc.s	loc_1826
0000181C 5346                       		subq.w	#1,d6
0000181E 0D05                       		btst	d6,d5
00001820 6700                       		beq.s	loc_1826
00001822 0043 0800                  		ori.w	#$800,d3
00001826                            
00001826                            loc_1826:
00001826 3205                       		move.w	d5,d1
00001828 3E06                       		move.w	d6,d7
0000182A 9E4D                       		sub.w	a5,d7
0000182C 6400                       		bcc.s	loc_1856
0000182E 3C07                       		move.w	d7,d6
00001830 0646 0010                  		addi.w	#$10,d6
00001834 4447                       		neg.w	d7
00001836 EF69                       		lsl.w	d7,d1
00001838 1A10                       		move.b	(a0),d5
0000183A EF3D                       		rol.b	d7,d5
0000183C DE47                       		add.w	d7,d7
0000183E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001842 D245                       		add.w	d5,d1
00001844                            
00001844                            loc_1844:				; XREF: loc_1868
00001844 300D                       		move.w	a5,d0
00001846 D040                       		add.w	d0,d0
00001848 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000184C D243                       		add.w	d3,d1
0000184E 1A18                       		move.b	(a0)+,d5
00001850 E14D                       		lsl.w	#8,d5
00001852 1A18                       		move.b	(a0)+,d5
00001854 4E75                       		rts	
00001856                            ; ===========================================================================
00001856                            
00001856                            loc_1856:				; XREF: loc_1826
00001856 6700                       		beq.s	loc_1868
00001858 EE69                       		lsr.w	d7,d1
0000185A 300D                       		move.w	a5,d0
0000185C D040                       		add.w	d0,d0
0000185E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001862 D243                       		add.w	d3,d1
00001864 300D                       		move.w	a5,d0
00001866 6000                       		bra.s	sub_188C
00001868                            ; ===========================================================================
00001868                            
00001868                            loc_1868:				; XREF: loc_1856
00001868 7C10                       		moveq	#$10,d6
0000186A                            
0000186A                            loc_186A:
0000186A 60D8                       		bra.s	loc_1844
0000186C                            ; ===========================================================================
0000186C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001882 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000188C                            
0000188C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000188C                            
0000188C                            
0000188C                            sub_188C:				; XREF: EniDec
0000188C 9C40                       		sub.w	d0,d6
0000188E 0C46 0009                  		cmpi.w	#9,d6
00001892 6400                       		bcc.s	locret_189A
00001894 5046                       		addq.w	#8,d6
00001896 E145                       		asl.w	#8,d5
00001898 1A18                       		move.b	(a0)+,d5
0000189A                            
0000189A                            locret_189A:
0000189A 4E75                       		rts	
0000189C                            ; End of function sub_188C
0000189C                            
0000189C                            ; ---------------------------------------------------------------------------
0000189C                            ; Kosinski decompression algorithm
0000189C                            ; ---------------------------------------------------------------------------
0000189C                            
0000189C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000189C                            
0000189C                            
0000189C                            KosDec:
0000189C                            
0000189C =FFFFFFFE                  var_2		= -2
0000189C =FFFFFFFF                  var_1		= -1
0000189C                            
0000189C 558F                       		subq.l	#2,sp
0000189E 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018A2 1E98                       		move.b	(a0)+,(sp)
000018A4 3A17                       		move.w	(sp),d5
000018A6 780F                       		moveq	#$F,d4
000018A8                            
000018A8                            loc_18A8:
000018A8 E24D                       		lsr.w	#1,d5
000018AA 40C6                       		move	sr,d6
000018AC 51CC 0000                  		dbf	d4,loc_18BA
000018B0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018B4 1E98                       		move.b	(a0)+,(sp)
000018B6 3A17                       		move.w	(sp),d5
000018B8 780F                       		moveq	#$F,d4
000018BA                            
000018BA                            loc_18BA:
000018BA 44C6                       		move	d6,ccr
000018BC 6400                       		bcc.s	loc_18C2
000018BE 12D8                       		move.b	(a0)+,(a1)+
000018C0 60E6                       		bra.s	loc_18A8
000018C2                            ; ===========================================================================
000018C2                            
000018C2                            loc_18C2:				; XREF: KosDec
000018C2 7600                       		moveq	#0,d3
000018C4 E24D                       		lsr.w	#1,d5
000018C6 40C6                       		move	sr,d6
000018C8 51CC 0000                  		dbf	d4,loc_18D6
000018CC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018D0 1E98                       		move.b	(a0)+,(sp)
000018D2 3A17                       		move.w	(sp),d5
000018D4 780F                       		moveq	#$F,d4
000018D6                            
000018D6                            loc_18D6:
000018D6 44C6                       		move	d6,ccr
000018D8 6500                       		bcs.s	loc_1906
000018DA E24D                       		lsr.w	#1,d5
000018DC 51CC 0000                  		dbf	d4,loc_18EA
000018E0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018E4 1E98                       		move.b	(a0)+,(sp)
000018E6 3A17                       		move.w	(sp),d5
000018E8 780F                       		moveq	#$F,d4
000018EA                            
000018EA                            loc_18EA:
000018EA E353                       		roxl.w	#1,d3
000018EC E24D                       		lsr.w	#1,d5
000018EE 51CC 0000                  		dbf	d4,loc_18FC
000018F2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018F6 1E98                       		move.b	(a0)+,(sp)
000018F8 3A17                       		move.w	(sp),d5
000018FA 780F                       		moveq	#$F,d4
000018FC                            
000018FC                            loc_18FC:
000018FC E353                       		roxl.w	#1,d3
000018FE 5243                       		addq.w	#1,d3
00001900 74FF                       		moveq	#-1,d2
00001902 1418                       		move.b	(a0)+,d2
00001904 6000                       		bra.s	loc_191C
00001906                            ; ===========================================================================
00001906                            
00001906                            loc_1906:				; XREF: loc_18C2
00001906 1018                       		move.b	(a0)+,d0
00001908 1218                       		move.b	(a0)+,d1
0000190A 74FF                       		moveq	#-1,d2
0000190C 1401                       		move.b	d1,d2
0000190E EB4A                       		lsl.w	#5,d2
00001910 1400                       		move.b	d0,d2
00001912 0241 0007                  		andi.w	#7,d1
00001916 6700                       		beq.s	loc_1928
00001918 1601                       		move.b	d1,d3
0000191A 5243                       		addq.w	#1,d3
0000191C                            
0000191C                            loc_191C:
0000191C 1031 2000                  		move.b	(a1,d2.w),d0
00001920 12C0                       		move.b	d0,(a1)+
00001922 51CB FFF8                  		dbf	d3,loc_191C
00001926 6080                       		bra.s	loc_18A8
00001928                            ; ===========================================================================
00001928                            
00001928                            loc_1928:				; XREF: loc_1906
00001928 1218                       		move.b	(a0)+,d1
0000192A 6700                       		beq.s	loc_1938
0000192C 0C01 0001                  		cmpi.b	#1,d1
00001930 6700 FF76                  		beq.w	loc_18A8
00001934 1601                       		move.b	d1,d3
00001936 60E4                       		bra.s	loc_191C
00001938                            ; ===========================================================================
00001938                            
00001938                            loc_1938:				; XREF: loc_1928
00001938 548F                       		addq.l	#2,sp
0000193A 4E75                       		rts	
0000193C                            ; End of function KosDec
0000193C                            
0000193C                            ; ---------------------------------------------------------------------------
0000193C                            ; Pallet cycling routine loading subroutine
0000193C                            ; ---------------------------------------------------------------------------
0000193C                            
0000193C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193C                            
0000193C                            
0000193C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000193C 7400                       		moveq	#0,d2
0000193E 7000                       		moveq	#0,d0
00001940 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001944 D040                       		add.w	d0,d0		; multiply by 2
00001946 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
0000194A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
0000194E                            ; End of function PalCycle_Load
0000194E                            
0000194E                            ; ===========================================================================
0000194E                            ; ---------------------------------------------------------------------------
0000194E                            ; Pallet cycling routines
0000194E                            ; ---------------------------------------------------------------------------
0000194E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001950 0000                       		dc.w PalCycle_LZ-PalCycle
00001952 0000                       		dc.w PalCycle_MZ-PalCycle
00001954 0000                       		dc.w PalCycle_SLZ-PalCycle
00001956 0000                       		dc.w PalCycle_SYZ-PalCycle
00001958 0000                       		dc.w PalCycle_SBZ-PalCycle
0000195A 0000                       		dc.w PalCycle_GHZ-PalCycle
0000195C                            
0000195C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000195C                            
0000195C                            
0000195C                            PalCycle_Title:				; XREF: TitleScreen
0000195C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001962 6000                       		bra.s	loc_196A
00001964                            ; ===========================================================================
00001964                            
00001964                            PalCycle_GHZ:				; XREF: PalCycle
00001964 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000196A                            
0000196A                            loc_196A:				; XREF: PalCycle_Title
0000196A 5378 F634                  		subq.w	#1,($FFFFF634).w
0000196E 6A00                       		bpl.s	locret_1990
00001970 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001976 3038 F632                  		move.w	($FFFFF632).w,d0
0000197A 5278 F632                  		addq.w	#1,($FFFFF632).w
0000197E 0240 0003                  		andi.w	#3,d0
00001982 E748                       		lsl.w	#3,d0
00001984 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001988 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000198C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001990                            
00001990                            locret_1990:
00001990 4E75                       		rts	
00001992                            ; End of function PalCycle_Title
00001992                            
00001992                            
00001992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001992                            
00001992                            
00001992                            PalCycle_LZ:				; XREF: PalCycle
00001992 5378 F634                  		subq.w	#1,($FFFFF634).w
00001996 6A00                       		bpl.s	loc_19D8
00001998 31FC 0002 F634             		move.w	#2,($FFFFF634).w
0000199E 3038 F632                  		move.w	($FFFFF632).w,d0
000019A2 5278 F632                  		addq.w	#1,($FFFFF632).w
000019A6 0240 0003                  		andi.w	#3,d0
000019AA E748                       		lsl.w	#3,d0
000019AC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000019B2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000019B8 6600                       		bne.s	loc_19C0
000019BA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000019C0                            
000019C0                            loc_19C0:
000019C0 43F8 FB56                  		lea	($FFFFFB56).w,a1
000019C4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019C8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019CC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000019D0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019D4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019D8                            
000019D8                            loc_19D8:
000019D8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000019DC 0240 0007                  		andi.w	#7,d0
000019E0 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000019E4 6700                       		beq.s	locret_1A3A
000019E6 7201                       		moveq	#1,d1
000019E8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000019EC 6700                       		beq.s	loc_19F0
000019EE 4441                       		neg.w	d1
000019F0                            
000019F0                            loc_19F0:
000019F0 3038 F650                  		move.w	($FFFFF650).w,d0
000019F4 0240 0003                  		andi.w	#3,d0
000019F8 D041                       		add.w	d1,d0
000019FA 0C40 0003                  		cmpi.w	#3,d0
000019FE 6500                       		bcs.s	loc_1A0A
00001A00 3200                       		move.w	d0,d1
00001A02 7000                       		moveq	#0,d0
00001A04 4A41                       		tst.w	d1
00001A06 6A00                       		bpl.s	loc_1A0A
00001A08 7002                       		moveq	#2,d0
00001A0A                            
00001A0A                            loc_1A0A:
00001A0A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A0E D040                       		add.w	d0,d0
00001A10 3200                       		move.w	d0,d1
00001A12 D040                       		add.w	d0,d0
00001A14 D041                       		add.w	d1,d0
00001A16 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A1C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001A20 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A24 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A28 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A2E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001A32 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A36 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A3A                            
00001A3A                            locret_1A3A:
00001A3A 4E75                       		rts	
00001A3C                            ; End of function PalCycle_LZ
00001A3C                            
00001A3C                            ; ===========================================================================
00001A3C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A44                            ; ===========================================================================
00001A44                            
00001A44                            PalCycle_MZ:				; XREF: PalCycle
00001A44 4E75                       		rts	
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            
00001A46                            PalCycle_SLZ:				; XREF: PalCycle
00001A46 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A4A 6A00                       		bpl.s	locret_1A80
00001A4C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A52 3038 F632                  		move.w	($FFFFF632).w,d0
00001A56 5240                       		addq.w	#1,d0
00001A58 0C40 0006                  		cmpi.w	#6,d0
00001A5C 6500                       		bcs.s	loc_1A60
00001A5E 7000                       		moveq	#0,d0
00001A60                            
00001A60                            loc_1A60:
00001A60 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A64 3200                       		move.w	d0,d1
00001A66 D241                       		add.w	d1,d1
00001A68 D041                       		add.w	d1,d0
00001A6A D040                       		add.w	d0,d0
00001A6C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001A72 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001A76 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001A7A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001A80                            
00001A80                            locret_1A80:
00001A80 4E75                       		rts	
00001A82                            ; End of function PalCycle_SLZ
00001A82                            
00001A82                            
00001A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A82                            
00001A82                            
00001A82                            PalCycle_SYZ:				; XREF: PalCycle
00001A82 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A86 6A00                       		bpl.s	locret_1AC6
00001A88 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001A8E 3038 F632                  		move.w	($FFFFF632).w,d0
00001A92 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A96 0240 0003                  		andi.w	#3,d0
00001A9A E548                       		lsl.w	#2,d0
00001A9C 3200                       		move.w	d0,d1
00001A9E D040                       		add.w	d0,d0
00001AA0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001AA6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001AAA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AAE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AB2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001AB8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001ABC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001AC0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001AC6                            
00001AC6                            locret_1AC6:
00001AC6 4E75                       		rts	
00001AC8                            ; End of function PalCycle_SYZ
00001AC8                            
00001AC8                            
00001AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC8                            
00001AC8                            
00001AC8                            PalCycle_SBZ:				; XREF: PalCycle
00001AC8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001ACE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001AD2 6700                       		beq.s	loc_1ADA
00001AD4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001ADA                            
00001ADA                            loc_1ADA:
00001ADA 43F8 F650                  		lea	($FFFFF650).w,a1
00001ADE 321A                       		move.w	(a2)+,d1
00001AE0                            
00001AE0                            loc_1AE0:
00001AE0 5311                       		subq.b	#1,(a1)
00001AE2 6B00                       		bmi.s	loc_1AEA
00001AE4 5489                       		addq.l	#2,a1
00001AE6 5C8A                       		addq.l	#6,a2
00001AE8 6000                       		bra.s	loc_1B06
00001AEA                            ; ===========================================================================
00001AEA                            
00001AEA                            loc_1AEA:				; XREF: PalCycle_SBZ
00001AEA 12DA                       		move.b	(a2)+,(a1)+
00001AEC 1011                       		move.b	(a1),d0
00001AEE 5200                       		addq.b	#1,d0
00001AF0 B01A                       		cmp.b	(a2)+,d0
00001AF2 6500                       		bcs.s	loc_1AF6
00001AF4 7000                       		moveq	#0,d0
00001AF6                            
00001AF6                            loc_1AF6:
00001AF6 12C0                       		move.b	d0,(a1)+
00001AF8 0240 000F                  		andi.w	#$F,d0
00001AFC D040                       		add.w	d0,d0
00001AFE 305A                       		movea.w	(a2)+,a0
00001B00 365A                       		movea.w	(a2)+,a3
00001B02 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001B06                            
00001B06                            loc_1B06:				; XREF: PalCycle_SBZ
00001B06 51C9 FFD8                  		dbf	d1,loc_1AE0
00001B0A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B0E 6A00                       		bpl.s	locret_1B64
00001B10 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B16 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001B1C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B20 6700                       		beq.s	loc_1B2E
00001B22 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B28 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B2E                            
00001B2E                            loc_1B2E:
00001B2E 72FF                       		moveq	#-1,d1
00001B30 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B34 6700                       		beq.s	loc_1B38
00001B36 4441                       		neg.w	d1
00001B38                            
00001B38                            loc_1B38:
00001B38 3038 F632                  		move.w	($FFFFF632).w,d0
00001B3C 0240 0003                  		andi.w	#3,d0
00001B40 D041                       		add.w	d1,d0
00001B42 0C40 0003                  		cmpi.w	#3,d0
00001B46 6500                       		bcs.s	loc_1B52
00001B48 3200                       		move.w	d0,d1
00001B4A 7000                       		moveq	#0,d0
00001B4C 4A41                       		tst.w	d1
00001B4E 6A00                       		bpl.s	loc_1B52
00001B50 7002                       		moveq	#2,d0
00001B52                            
00001B52                            loc_1B52:
00001B52 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B56 D040                       		add.w	d0,d0
00001B58 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B5C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B60 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B64                            
00001B64                            locret_1B64:
00001B64 4E75                       		rts	
00001B66                            ; End of function PalCycle_SBZ
00001B66                            
00001B66                            ; ===========================================================================
00001B66                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001B86                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001BA6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001BC6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001BD8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001BEA                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C52                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001C76                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001C96                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001CA6                            
00001CA6                            Pal_SBZCycList:
00001CA6                            	include "_inc\SBZ pallet script 1.asm"
00001CA6                            ; ---------------------------------------------------------------------------
00001CA6                            ; Scrap Brain Zone 1 pallet cycling script
00001CA6                            ; ---------------------------------------------------------------------------
00001CA6 0008                       	dc.w 8			; number of entries - 1
00001CA8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001CAA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001CAC FB50                       	dc.w $FB50		; RAM address
00001CAE 0D08                       	dc.b $D, 8
00001CB0 0000                       	dc.w Pal_SBZCyc2
00001CB2 FB52                       	dc.w $FB52
00001CB4 0E08                       	dc.b $E, 8
00001CB6 0000                       	dc.w Pal_SBZCyc3
00001CB8 FB6E                       	dc.w $FB6E
00001CBA 0B08                       	dc.b $B, 8
00001CBC 0000                       	dc.w Pal_SBZCyc5
00001CBE FB70                       	dc.w $FB70
00001CC0 0708                       	dc.b 7,	8
00001CC2 0000                       	dc.w Pal_SBZCyc6
00001CC4 FB72                       	dc.w $FB72
00001CC6 1C10                       	dc.b $1C, $10
00001CC8 0000                       	dc.w Pal_SBZCyc7
00001CCA FB7E                       	dc.w $FB7E
00001CCC 0303                       	dc.b 3,	3
00001CCE 0000                       	dc.w Pal_SBZCyc8
00001CD0 FB78                       	dc.w $FB78
00001CD2 0303                       	dc.b 3,	3
00001CD4 0000                       	dc.w Pal_SBZCyc8+2
00001CD6 FB7A                       	dc.w $FB7A
00001CD8 0303                       	dc.b 3,	3
00001CDA 0000                       	dc.w Pal_SBZCyc8+4
00001CDC FB7C                       	dc.w $FB7C
00001CDE                            	even
00001CDE                            	even
00001CDE                            
00001CDE                            Pal_SBZCycList2:
00001CDE                            	include "_inc\SBZ pallet script 2.asm"
00001CDE                            ; ---------------------------------------------------------------------------
00001CDE                            ; Scrap Brain Zone 2 pallet cycling script
00001CDE                            ; ---------------------------------------------------------------------------
00001CDE 0006                       	dc.w 6
00001CE0 0708                       	dc.b 7,	8
00001CE2 0000                       	dc.w Pal_SBZCyc1
00001CE4 FB50                       	dc.w $FB50
00001CE6 0D08                       	dc.b $D, 8
00001CE8 0000                       	dc.w Pal_SBZCyc2
00001CEA FB52                       	dc.w $FB52
00001CEC 0908                       	dc.b 9,	8
00001CEE 0000                       	dc.w Pal_SBZCyc9
00001CF0 FB70                       	dc.w $FB70
00001CF2 0708                       	dc.b 7,	8
00001CF4 0000                       	dc.w Pal_SBZCyc6
00001CF6 FB72                       	dc.w $FB72
00001CF8 0303                       	dc.b 3,	3
00001CFA 0000                       	dc.w Pal_SBZCyc8
00001CFC FB78                       	dc.w $FB78
00001CFE 0303                       	dc.b 3,	3
00001D00 0000                       	dc.w Pal_SBZCyc8+2
00001D02 FB7A                       	dc.w $FB7A
00001D04 0303                       	dc.b 3,	3
00001D06 0000                       	dc.w Pal_SBZCyc8+4
00001D08 FB7C                       	dc.w $FB7C
00001D0A                            	even
00001D0A                            	even
00001D0A                            
00001D0A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001D1A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D2A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D3A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D46                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D56                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D66                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001D86                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001D90                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001DA0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001DAC                            ; ---------------------------------------------------------------------------
00001DAC                            ; Subroutine to	fade out and fade in
00001DAC                            ; ---------------------------------------------------------------------------
00001DAC                            
00001DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DAC                            
00001DAC                            
00001DAC                            Pal_FadeTo:
00001DAC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001DB2                            
00001DB2                            Pal_FadeTo2:
00001DB2 7000                       		moveq	#0,d0
00001DB4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001DBC D0C0                       		adda.w	d0,a0
00001DBE 7200                       		moveq	#0,d1
00001DC0 1038 F627                  		move.b	($FFFFF627).w,d0
00001DC4                            
00001DC4                            Pal_ToBlack:
00001DC4 30C1                       		move.w	d1,(a0)+
00001DC6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001DCA                            
00001DCA 383C 0015                  		move.w	#$15,d4
00001DCE                            
00001DCE                            loc_1DCE:
00001DCE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001DD4 6100 0000                  		bsr.w	DelayProgram
00001DD8 6100                       		bsr.s	Pal_FadeIn
00001DDA 6100 F810                  		bsr.w	RunPLC_RAM
00001DDE 51CC FFEE                  		dbf	d4,loc_1DCE
00001DE2 4E75                       		rts	
00001DE4                            ; End of function Pal_FadeTo
00001DE4                            
00001DE4                            ; ---------------------------------------------------------------------------
00001DE4                            ; Pallet fade-in subroutine
00001DE4                            ; ---------------------------------------------------------------------------
00001DE4                            
00001DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DE4                            
00001DE4                            
00001DE4                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001DE4 7000                       		moveq	#0,d0
00001DE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DEA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001DEE 1038 F626                  		move.b	($FFFFF626).w,d0
00001DF2 D0C0                       		adda.w	d0,a0
00001DF4 D2C0                       		adda.w	d0,a1
00001DF6 1038 F627                  		move.b	($FFFFF627).w,d0
00001DFA                            
00001DFA                            loc_1DFA:
00001DFA 6100                       		bsr.s	Pal_AddColor
00001DFC 51C8 FFFC                  		dbf	d0,loc_1DFA
00001E00 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001E06 6600                       		bne.s	locret_1E24
00001E08 7000                       		moveq	#0,d0
00001E0A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E0E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001E12 1038 F626                  		move.b	($FFFFF626).w,d0
00001E16 D0C0                       		adda.w	d0,a0
00001E18 D2C0                       		adda.w	d0,a1
00001E1A 1038 F627                  		move.b	($FFFFF627).w,d0
00001E1E                            
00001E1E                            loc_1E1E:
00001E1E 6100                       		bsr.s	Pal_AddColor
00001E20 51C8 FFFC                  		dbf	d0,loc_1E1E
00001E24                            
00001E24                            locret_1E24:
00001E24 4E75                       		rts	
00001E26                            ; End of function Pal_FadeIn
00001E26                            
00001E26                            
00001E26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E26                            
00001E26                            
00001E26                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E26 3419                       		move.w	(a1)+,d2
00001E28 3610                       		move.w	(a0),d3
00001E2A B642                       		cmp.w	d2,d3
00001E2C 6700                       		beq.s	loc_1E4E
00001E2E 3203                       		move.w	d3,d1
00001E30 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E34 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E36 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E38 30C1                       		move.w	d1,(a0)+	; update pallet
00001E3A 4E75                       		rts	
00001E3C                            ; ===========================================================================
00001E3C                            
00001E3C                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E3C 3203                       		move.w	d3,d1
00001E3E 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E42 B242                       		cmp.w	d2,d1
00001E44 6200                       		bhi.s	Pal_AddRed
00001E46 30C1                       		move.w	d1,(a0)+	; update pallet
00001E48 4E75                       		rts	
00001E4A                            ; ===========================================================================
00001E4A                            
00001E4A                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E4A 5458                       		addq.w	#2,(a0)+	; increase red value
00001E4C 4E75                       		rts	
00001E4E                            ; ===========================================================================
00001E4E                            
00001E4E                            loc_1E4E:				; XREF: Pal_AddColor
00001E4E 5448                       		addq.w	#2,a0
00001E50 4E75                       		rts	
00001E52                            ; End of function Pal_AddColor
00001E52                            
00001E52                            
00001E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E52                            
00001E52                            
00001E52                            Pal_FadeFrom:
00001E52 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E58 383C 0015                  		move.w	#$15,d4
00001E5C                            
00001E5C                            loc_1E5C:
00001E5C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E62 6100 0000                  		bsr.w	DelayProgram
00001E66 6100                       		bsr.s	Pal_FadeOut
00001E68 6100 F782                  		bsr.w	RunPLC_RAM
00001E6C 51CC FFEE                  		dbf	d4,loc_1E5C
00001E70 4E75                       		rts	
00001E72                            ; End of function Pal_FadeFrom
00001E72                            
00001E72                            ; ---------------------------------------------------------------------------
00001E72                            ; Pallet fade-out subroutine
00001E72                            ; ---------------------------------------------------------------------------
00001E72                            
00001E72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E72                            
00001E72                            
00001E72                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E72 7000                       		moveq	#0,d0
00001E74 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E78 1038 F626                  		move.b	($FFFFF626).w,d0
00001E7C D0C0                       		adda.w	d0,a0
00001E7E 1038 F627                  		move.b	($FFFFF627).w,d0
00001E82                            
00001E82                            loc_1E82:
00001E82 6100                       		bsr.s	Pal_DecColor
00001E84 51C8 FFFC                  		dbf	d0,loc_1E82
00001E88                            
00001E88 7000                       		moveq	#0,d0
00001E8A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E8E 1038 F626                  		move.b	($FFFFF626).w,d0
00001E92 D0C0                       		adda.w	d0,a0
00001E94 1038 F627                  		move.b	($FFFFF627).w,d0
00001E98                            
00001E98                            loc_1E98:
00001E98 6100                       		bsr.s	Pal_DecColor
00001E9A 51C8 FFFC                  		dbf	d0,loc_1E98
00001E9E 4E75                       		rts	
00001EA0                            ; End of function Pal_FadeOut
00001EA0                            
00001EA0                            
00001EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EA0                            
00001EA0                            
00001EA0                            Pal_DecColor:				; XREF: Pal_FadeOut
00001EA0 3410                       		move.w	(a0),d2
00001EA2 6700                       		beq.s	loc_1ECC
00001EA4 3202                       		move.w	d2,d1
00001EA6 0241 000E                  		andi.w	#$E,d1
00001EAA 6700                       		beq.s	Pal_DecGreen
00001EAC 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EAE 4E75                       		rts	
00001EB0                            ; ===========================================================================
00001EB0                            
00001EB0                            Pal_DecGreen:				; XREF: Pal_DecColor
00001EB0 3202                       		move.w	d2,d1
00001EB2 0241 00E0                  		andi.w	#$E0,d1
00001EB6 6700                       		beq.s	Pal_DecBlue
00001EB8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001EBC 4E75                       		rts	
00001EBE                            ; ===========================================================================
00001EBE                            
00001EBE                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001EBE 3202                       		move.w	d2,d1
00001EC0 0241 0E00                  		andi.w	#$E00,d1
00001EC4 6700                       		beq.s	loc_1ECC
00001EC6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001ECA 4E75                       		rts	
00001ECC                            ; ===========================================================================
00001ECC                            
00001ECC                            loc_1ECC:				; XREF: Pal_DecColor
00001ECC 5448                       		addq.w	#2,a0
00001ECE 4E75                       		rts	
00001ED0                            ; End of function Pal_DecColor
00001ED0                            
00001ED0                            ; ---------------------------------------------------------------------------
00001ED0                            ; Subroutine to	fill the pallet	with white (special stage)
00001ED0                            ; ---------------------------------------------------------------------------
00001ED0                            
00001ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED0                            
00001ED0                            
00001ED0                            Pal_MakeWhite:				; XREF: SpecialStage
00001ED0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001ED6 7000                       		moveq	#0,d0
00001ED8 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EDC 1038 F626                  		move.b	($FFFFF626).w,d0
00001EE0 D0C0                       		adda.w	d0,a0
00001EE2 323C 0EEE                  		move.w	#$EEE,d1
00001EE6 1038 F627                  		move.b	($FFFFF627).w,d0
00001EEA                            
00001EEA                            PalWhite_Loop:
00001EEA 30C1                       		move.w	d1,(a0)+
00001EEC 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001EF0 383C 0015                  		move.w	#$15,d4
00001EF4                            
00001EF4                            loc_1EF4:
00001EF4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001EFA 6100 0000                  		bsr.w	DelayProgram
00001EFE 6100                       		bsr.s	Pal_WhiteToBlack
00001F00 6100 F6EA                  		bsr.w	RunPLC_RAM
00001F04 51CC FFEE                  		dbf	d4,loc_1EF4
00001F08 4E75                       		rts	
00001F0A                            ; End of function Pal_MakeWhite
00001F0A                            
00001F0A                            
00001F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F0A                            
00001F0A                            
00001F0A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001F0A 7000                       		moveq	#0,d0
00001F0C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F10 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F14 1038 F626                  		move.b	($FFFFF626).w,d0
00001F18 D0C0                       		adda.w	d0,a0
00001F1A D2C0                       		adda.w	d0,a1
00001F1C 1038 F627                  		move.b	($FFFFF627).w,d0
00001F20                            
00001F20                            loc_1F20:
00001F20 6100                       		bsr.s	Pal_DecColor2
00001F22 51C8 FFFC                  		dbf	d0,loc_1F20
00001F26                            
00001F26 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001F2C 6600                       		bne.s	locret_1F4A
00001F2E 7000                       		moveq	#0,d0
00001F30 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F34 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001F38 1038 F626                  		move.b	($FFFFF626).w,d0
00001F3C D0C0                       		adda.w	d0,a0
00001F3E D2C0                       		adda.w	d0,a1
00001F40 1038 F627                  		move.b	($FFFFF627).w,d0
00001F44                            
00001F44                            loc_1F44:
00001F44 6100                       		bsr.s	Pal_DecColor2
00001F46 51C8 FFFC                  		dbf	d0,loc_1F44
00001F4A                            
00001F4A                            locret_1F4A:
00001F4A 4E75                       		rts	
00001F4C                            ; End of function Pal_WhiteToBlack
00001F4C                            
00001F4C                            
00001F4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F4C                            
00001F4C                            
00001F4C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F4C 3419                       		move.w	(a1)+,d2
00001F4E 3610                       		move.w	(a0),d3
00001F50 B642                       		cmp.w	d2,d3
00001F52 6700                       		beq.s	loc_1F78
00001F54 3203                       		move.w	d3,d1
00001F56 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F5A 6500                       		bcs.s	loc_1F64
00001F5C B242                       		cmp.w	d2,d1
00001F5E 6500                       		bcs.s	loc_1F64
00001F60 30C1                       		move.w	d1,(a0)+
00001F62 4E75                       		rts	
00001F64                            ; ===========================================================================
00001F64                            
00001F64                            loc_1F64:				; XREF: Pal_DecColor2
00001F64 3203                       		move.w	d3,d1
00001F66 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F6A 6500                       		bcs.s	loc_1F74
00001F6C B242                       		cmp.w	d2,d1
00001F6E 6500                       		bcs.s	loc_1F74
00001F70 30C1                       		move.w	d1,(a0)+
00001F72 4E75                       		rts	
00001F74                            ; ===========================================================================
00001F74                            
00001F74                            loc_1F74:				; XREF: loc_1F64
00001F74 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F76 4E75                       		rts	
00001F78                            ; ===========================================================================
00001F78                            
00001F78                            loc_1F78:				; XREF: Pal_DecColor2
00001F78 5448                       		addq.w	#2,a0
00001F7A 4E75                       		rts	
00001F7C                            ; End of function Pal_DecColor2
00001F7C                            
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            ; Subroutine to	make a white flash when	you enter a special stage
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            
00001F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F7C                            
00001F7C                            
00001F7C                            Pal_MakeFlash:				; XREF: SpecialStage
00001F7C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F82 383C 0015                  		move.w	#$15,d4
00001F86                            
00001F86                            loc_1F86:
00001F86 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F8C 6100 0000                  		bsr.w	DelayProgram
00001F90 6100                       		bsr.s	Pal_ToWhite
00001F92 6100 F658                  		bsr.w	RunPLC_RAM
00001F96 51CC FFEE                  		dbf	d4,loc_1F86
00001F9A 4E75                       		rts	
00001F9C                            ; End of function Pal_MakeFlash
00001F9C                            
00001F9C                            
00001F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F9C                            
00001F9C                            
00001F9C                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAC                            
00001FAC                            loc_1FAC:
00001FAC 6100                       		bsr.s	Pal_AddColor2
00001FAE 51C8 FFFC                  		dbf	d0,loc_1FAC
00001FB2 7000                       		moveq	#0,d0
00001FB4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBC D0C0                       		adda.w	d0,a0
00001FBE 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC2                            
00001FC2                            loc_1FC2:
00001FC2 6100                       		bsr.s	Pal_AddColor2
00001FC4 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FC8 4E75                       		rts	
00001FCA                            ; End of function Pal_ToWhite
00001FCA                            
00001FCA                            
00001FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCA                            
00001FCA                            
00001FCA                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FCA 3410                       		move.w	(a0),d2
00001FCC 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FD0 6700                       		beq.s	loc_2006
00001FD2 3202                       		move.w	d2,d1
00001FD4 0241 000E                  		andi.w	#$E,d1
00001FD8 0C41 000E                  		cmpi.w	#$E,d1
00001FDC 6700                       		beq.s	loc_1FE2
00001FDE 5458                       		addq.w	#2,(a0)+	; increase red value
00001FE0 4E75                       		rts	
00001FE2                            ; ===========================================================================
00001FE2                            
00001FE2                            loc_1FE2:				; XREF: Pal_AddColor2
00001FE2 3202                       		move.w	d2,d1
00001FE4 0241 00E0                  		andi.w	#$E0,d1
00001FE8 0C41 00E0                  		cmpi.w	#$E0,d1
00001FEC 6700                       		beq.s	loc_1FF4
00001FEE 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FF2 4E75                       		rts	
00001FF4                            ; ===========================================================================
00001FF4                            
00001FF4                            loc_1FF4:				; XREF: loc_1FE2
00001FF4 3202                       		move.w	d2,d1
00001FF6 0241 0E00                  		andi.w	#$E00,d1
00001FFA 0C41 0E00                  		cmpi.w	#$E00,d1
00001FFE 6700                       		beq.s	loc_2006
00002000 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002004 4E75                       		rts	
00002006                            ; ===========================================================================
00002006                            
00002006                            loc_2006:				; XREF: Pal_AddColor2
00002006 5448                       		addq.w	#2,a0
00002008 4E75                       		rts	
0000200A                            ; End of function Pal_AddColor2
0000200A                            
0000200A                            ; ---------------------------------------------------------------------------
0000200A                            ; Pallet cycling routine - Sega	logo
0000200A                            ; ---------------------------------------------------------------------------
0000200A                            
0000200A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000200A                            
0000200A                            
0000200A                            PalCycle_Sega:				; XREF: SegaScreen
0000200A 4A38 F635                  		tst.b	($FFFFF635).w
0000200E 6600                       		bne.s	loc_206A
00002010 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002014 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000201A 7205                       		moveq	#5,d1
0000201C 3038 F632                  		move.w	($FFFFF632).w,d0
00002020                            
00002020                            loc_2020:
00002020 6A00                       		bpl.s	loc_202A
00002022 5448                       		addq.w	#2,a0
00002024 5341                       		subq.w	#1,d1
00002026 5440                       		addq.w	#2,d0
00002028 60F6                       		bra.s	loc_2020
0000202A                            ; ===========================================================================
0000202A                            
0000202A                            loc_202A:				; XREF: PalCycle_Sega
0000202A 3400                       		move.w	d0,d2
0000202C 0242 001E                  		andi.w	#$1E,d2
00002030 6600                       		bne.s	loc_2034
00002032 5440                       		addq.w	#2,d0
00002034                            
00002034                            loc_2034:
00002034 0C40 0060                  		cmpi.w	#$60,d0
00002038 6400                       		bcc.s	loc_203E
0000203A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000203E                            
0000203E                            loc_203E:
0000203E 5440                       		addq.w	#2,d0
00002040 51C9 FFE8                  		dbf	d1,loc_202A
00002044 3038 F632                  		move.w	($FFFFF632).w,d0
00002048 5440                       		addq.w	#2,d0
0000204A 3400                       		move.w	d0,d2
0000204C 0242 001E                  		andi.w	#$1E,d2
00002050 6600                       		bne.s	loc_2054
00002052 5440                       		addq.w	#2,d0
00002054                            
00002054                            loc_2054:
00002054 0C40 0064                  		cmpi.w	#$64,d0
00002058 6D00                       		blt.s	loc_2062
0000205A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002060 70F4                       		moveq	#-$C,d0
00002062                            
00002062                            loc_2062:
00002062 31C0 F632                  		move.w	d0,($FFFFF632).w
00002066 7001                       		moveq	#1,d0
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            loc_206A:				; XREF: loc_202A
0000206A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000206E 6A00                       		bpl.s	loc_20BC
00002070 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002076 3038 F632                  		move.w	($FFFFF632).w,d0
0000207A 0640 000C                  		addi.w	#$C,d0
0000207E 0C40 0030                  		cmpi.w	#$30,d0
00002082 6500                       		bcs.s	loc_2088
00002084 7000                       		moveq	#0,d0
00002086 4E75                       		rts	
00002088                            ; ===========================================================================
00002088                            
00002088                            loc_2088:				; XREF: loc_206A
00002088 31C0 F632                  		move.w	d0,($FFFFF632).w
0000208C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002092 41F0 0000                  		lea	(a0,d0.w),a0
00002096 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000209A 22D8                       		move.l	(a0)+,(a1)+
0000209C 22D8                       		move.l	(a0)+,(a1)+
0000209E 3298                       		move.w	(a0)+,(a1)
000020A0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000020A4 7000                       		moveq	#0,d0
000020A6 722C                       		moveq	#$2C,d1
000020A8                            
000020A8                            loc_20A8:
000020A8 3400                       		move.w	d0,d2
000020AA 0242 001E                  		andi.w	#$1E,d2
000020AE 6600                       		bne.s	loc_20B2
000020B0 5440                       		addq.w	#2,d0
000020B2                            
000020B2                            loc_20B2:
000020B2 3390 0000                  		move.w	(a0),(a1,d0.w)
000020B6 5440                       		addq.w	#2,d0
000020B8 51C9 FFEE                  		dbf	d1,loc_20A8
000020BC                            
000020BC                            loc_20BC:
000020BC 7001                       		moveq	#1,d0
000020BE 4E75                       		rts	
000020C0                            ; End of function PalCycle_Sega
000020C0                            
000020C0                            ; ===========================================================================
000020C0                            
000020C0                            Pal_Sega1:	incbin	pallet\sega1.bin
000020CC                            Pal_Sega2:	incbin	pallet\sega2.bin
000020FC                            
000020FC                            ; ---------------------------------------------------------------------------
000020FC                            ; Subroutines to load pallets
000020FC                            ; ---------------------------------------------------------------------------
000020FC                            
000020FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020FC                            
000020FC                            
000020FC                            PalLoad1:
000020FC 43F9 0000 0000             		lea	(PalPointers).l,a1
00002102 E748                       		lsl.w	#3,d0
00002104 D2C0                       		adda.w	d0,a1
00002106 2459                       		movea.l	(a1)+,a2
00002108 3659                       		movea.w	(a1)+,a3
0000210A D6FC 0080                  		adda.w	#$80,a3
0000210E 3E19                       		move.w	(a1)+,d7
00002110                            
00002110                            loc_2110:
00002110 26DA                       		move.l	(a2)+,(a3)+
00002112 51CF FFFC                  		dbf	d7,loc_2110
00002116 4E75                       		rts	
00002118                            ; End of function PalLoad1
00002118                            
00002118                            
00002118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002118                            
00002118                            
00002118                            PalLoad2:
00002118 43F9 0000 0000             		lea	(PalPointers).l,a1
0000211E E748                       		lsl.w	#3,d0
00002120 D2C0                       		adda.w	d0,a1
00002122 2459                       		movea.l	(a1)+,a2
00002124 3659                       		movea.w	(a1)+,a3
00002126 3E19                       		move.w	(a1)+,d7
00002128                            
00002128                            loc_2128:
00002128 26DA                       		move.l	(a2)+,(a3)+
0000212A 51CF FFFC                  		dbf	d7,loc_2128
0000212E 4E75                       		rts	
00002130                            ; End of function PalLoad2
00002130                            
00002130                            ; ---------------------------------------------------------------------------
00002130                            ; Underwater pallet loading subroutine
00002130                            ; ---------------------------------------------------------------------------
00002130                            
00002130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002130                            
00002130                            
00002130                            PalLoad3_Water:
00002130 43F9 0000 0000             		lea	(PalPointers).l,a1
00002136 E748                       		lsl.w	#3,d0
00002138 D2C0                       		adda.w	d0,a1
0000213A 2459                       		movea.l	(a1)+,a2
0000213C 3659                       		movea.w	(a1)+,a3
0000213E 96FC 0080                  		suba.w	#$80,a3
00002142 3E19                       		move.w	(a1)+,d7
00002144                            
00002144                            loc_2144:
00002144 26DA                       		move.l	(a2)+,(a3)+
00002146 51CF FFFC                  		dbf	d7,loc_2144
0000214A 4E75                       		rts	
0000214C                            ; End of function PalLoad3_Water
0000214C                            
0000214C                            
0000214C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000214C                            
0000214C                            
0000214C                            PalLoad4_Water:
0000214C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002152 E748                       		lsl.w	#3,d0
00002154 D2C0                       		adda.w	d0,a1
00002156 2459                       		movea.l	(a1)+,a2
00002158 3659                       		movea.w	(a1)+,a3
0000215A 96FC 0100                  		suba.w	#$100,a3
0000215E 3E19                       		move.w	(a1)+,d7
00002160                            
00002160                            loc_2160:
00002160 26DA                       		move.l	(a2)+,(a3)+
00002162 51CF FFFC                  		dbf	d7,loc_2160
00002166 4E75                       		rts	
00002168                            ; End of function PalLoad4_Water
00002168                            
00002168                            ; ===========================================================================
00002168                            ; ---------------------------------------------------------------------------
00002168                            ; Pallet pointers
00002168                            ; ---------------------------------------------------------------------------
00002168                            PalPointers:
00002168                            	include "_inc\Pallet pointers.asm"
00002168                            ; ---------------------------------------------------------------------------
00002168                            ; Pallet pointers
00002168                            ; ---------------------------------------------------------------------------
00002168 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000216C FB00                       	dc.w $FB00		; RAM address
0000216E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002170 0000 0000                  	dc.l Pal_Title
00002174 FB00                       	dc.w $FB00
00002176 001F                       	dc.w $1F
00002178 0000 0000                  	dc.l Pal_LevelSel
0000217C FB00                       	dc.w $FB00
0000217E 001F                       	dc.w $1F
00002180 0000 0000                  	dc.l Pal_Sonic
00002184 FB00                       	dc.w $FB00
00002186 0007                       	dc.w 7
00002188 0000 0000                  	dc.l Pal_GHZ
0000218C FB20                       	dc.w $FB20
0000218E 0017                       	dc.w $17
00002190 0000 0000                  	dc.l Pal_LZ
00002194 FB20                       	dc.w $FB20
00002196 0017                       	dc.w $17
00002198 0000 0000                  	dc.l Pal_MZ
0000219C FB20                       	dc.w $FB20
0000219E 0017                       	dc.w $17
000021A0 0000 0000                  	dc.l Pal_SLZ
000021A4 FB20                       	dc.w $FB20
000021A6 0017                       	dc.w $17
000021A8 0000 0000                  	dc.l Pal_SYZ
000021AC FB20                       	dc.w $FB20
000021AE 0017                       	dc.w $17
000021B0 0000 0000                  	dc.l Pal_SBZ1
000021B4 FB20                       	dc.w $FB20
000021B6 0017                       	dc.w $17
000021B8 0000 0000                  	dc.l Pal_Special
000021BC FB00                       	dc.w $FB00
000021BE 001F                       	dc.w $1F
000021C0 0000 0000                  	dc.l Pal_LZWater
000021C4 FB00                       	dc.w $FB00
000021C6 001F                       	dc.w $1F
000021C8 0000 0000                  	dc.l Pal_SBZ3
000021CC FB20                       	dc.w $FB20
000021CE 0017                       	dc.w $17
000021D0 0000 0000                  	dc.l Pal_SBZ3Water
000021D4 FB00                       	dc.w $FB00
000021D6 001F                       	dc.w $1F
000021D8 0000 0000                  	dc.l Pal_SBZ2
000021DC FB20                       	dc.w $FB20
000021DE 0017                       	dc.w $17
000021E0 0000 0000                  	dc.l Pal_LZSonWater
000021E4 FB00                       	dc.w $FB00
000021E6 0007                       	dc.w 7
000021E8 0000 0000                  	dc.l Pal_SBZ3SonWat
000021EC FB00                       	dc.w $FB00
000021EE 0007                       	dc.w 7
000021F0 0000 0000                  	dc.l Pal_SpeResult
000021F4 FB00                       	dc.w $FB00
000021F6 001F                       	dc.w $1F
000021F8 0000 0000                  	dc.l Pal_SpeContinue
000021FC FB00                       	dc.w $FB00
000021FE 000F                       	dc.w $F
00002200 0000 0000                  	dc.l Pal_Ending
00002204 FB00                       	dc.w $FB00
00002206 001F                       	dc.w $1F
00002206 001F                       	dc.w $1F
00002208                            
00002208                            ; ---------------------------------------------------------------------------
00002208                            ; Pallet data
00002208                            ; ---------------------------------------------------------------------------
00002208                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002288                            Pal_Title:	incbin	pallet\title.bin
00002308                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002388                            Pal_Sonic:	incbin	pallet\sonic.bin
000023A8                            Pal_GHZ:	incbin	pallet\ghz.bin
00002408                            Pal_LZ:		incbin	pallet\lz.bin
00002468                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000024E8                            Pal_MZ:		incbin	pallet\mz.bin
00002548                            Pal_SLZ:	incbin	pallet\slz.bin
000025A8                            Pal_SYZ:	incbin	pallet\syz.bin
00002608                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002668                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026C8                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002748                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000027A8                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002828                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002848                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002868                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000028E8                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002928                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000029A8                            
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            
000029A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029A8                            
000029A8                            
000029A8                            DelayProgram:				; XREF: PauseGame
000029A8 46FC 2300                  		move	#$2300,sr
000029AC                            
000029AC                            loc_29AC:
000029AC 4A38 F62A                  		tst.b	($FFFFF62A).w
000029B0 66FA                       		bne.s	loc_29AC
000029B2 4E75                       		rts	
000029B4                            ; End of function DelayProgram
000029B4                            
000029B4                            ; ---------------------------------------------------------------------------
000029B4                            ; Subroutine to	generate a pseudo-random number	in d0
000029B4                            ; ---------------------------------------------------------------------------
000029B4                            
000029B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029B4                            
000029B4                            
000029B4                            RandomNumber:
000029B4 2238 F636                  		move.l	($FFFFF636).w,d1
000029B8 6600                       		bne.s	loc_29C0
000029BA 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000029C0                            
000029C0                            loc_29C0:
000029C0 2001                       		move.l	d1,d0
000029C2 E581                       		asl.l	#2,d1
000029C4 D280                       		add.l	d0,d1
000029C6 E781                       		asl.l	#3,d1
000029C8 D280                       		add.l	d0,d1
000029CA 3001                       		move.w	d1,d0
000029CC 4841                       		swap	d1
000029CE D041                       		add.w	d1,d0
000029D0 3200                       		move.w	d0,d1
000029D2 4841                       		swap	d1
000029D4 21C1 F636                  		move.l	d1,($FFFFF636).w
000029D8 4E75                       		rts	
000029DA                            ; End of function RandomNumber
000029DA                            
000029DA                            
000029DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029DA                            
000029DA                            
000029DA                            CalcSine:				; XREF: SS_BGAnimate; et al
000029DA 0240 00FF                  		andi.w	#$FF,d0
000029DE D040                       		add.w	d0,d0
000029E0 0640 0080                  		addi.w	#$80,d0
000029E4 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000029E8 0440 0080                  		subi.w	#$80,d0
000029EC 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000029F0 4E75                       		rts	
000029F2                            ; End of function CalcSine
000029F2                            
000029F2                            ; ===========================================================================
000029F2                            
000029F2                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002C72                            
00002C72                            ; ===========================================================================
00002C72 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C76 3200                       		move.w	d0,d1
00002C78 4841                       		swap	d1
00002C7A 7000                       		moveq	#0,d0
00002C7C 3200                       		move.w	d0,d1
00002C7E 7407                       		moveq	#7,d2
00002C80                            
00002C80                            loc_2C80:
00002C80 E599                       		rol.l	#2,d1
00002C82 D040                       		add.w	d0,d0
00002C84 5240                       		addq.w	#1,d0
00002C86 9240                       		sub.w	d0,d1
00002C88 6400                       		bcc.s	loc_2C9A
00002C8A D240                       		add.w	d0,d1
00002C8C 5340                       		subq.w	#1,d0
00002C8E 51CA FFF0                  		dbf	d2,loc_2C80
00002C92 E248                       		lsr.w	#1,d0
00002C94 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C98 4E75                       		rts	
00002C9A                            ; ===========================================================================
00002C9A                            
00002C9A                            loc_2C9A:
00002C9A 5240                       		addq.w	#1,d0
00002C9C 51CA FFE2                  		dbf	d2,loc_2C80
00002CA0 E248                       		lsr.w	#1,d0
00002CA2 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002CA6 4E75                       		rts	
00002CA8                            
00002CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CA8                            
00002CA8                            
00002CA8                            CalcAngle:
00002CA8 48E7 1800                  		movem.l	d3-d4,-(sp)
00002CAC 7600                       		moveq	#0,d3
00002CAE 7800                       		moveq	#0,d4
00002CB0 3601                       		move.w	d1,d3
00002CB2 3802                       		move.w	d2,d4
00002CB4 8843                       		or.w	d3,d4
00002CB6 6700                       		beq.s	loc_2D04
00002CB8 3802                       		move.w	d2,d4
00002CBA 4A43                       		tst.w	d3
00002CBC 6A00 0000                  		bpl.w	loc_2CC2
00002CC0 4443                       		neg.w	d3
00002CC2                            
00002CC2                            loc_2CC2:
00002CC2 4A44                       		tst.w	d4
00002CC4 6A00 0000                  		bpl.w	loc_2CCA
00002CC8 4444                       		neg.w	d4
00002CCA                            
00002CCA                            loc_2CCA:
00002CCA B843                       		cmp.w	d3,d4
00002CCC 6400 0000                  		bcc.w	loc_2CDC
00002CD0 E18C                       		lsl.l	#8,d4
00002CD2 88C3                       		divu.w	d3,d4
00002CD4 7000                       		moveq	#0,d0
00002CD6 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CDA 6000                       		bra.s	loc_2CE6
00002CDC                            ; ===========================================================================
00002CDC                            
00002CDC                            loc_2CDC:				; XREF: CalcAngle
00002CDC E18B                       		lsl.l	#8,d3
00002CDE 86C4                       		divu.w	d4,d3
00002CE0 7040                       		moveq	#$40,d0
00002CE2 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CE6                            
00002CE6                            loc_2CE6:
00002CE6 4A41                       		tst.w	d1
00002CE8 6A00 0000                  		bpl.w	loc_2CF2
00002CEC 4440                       		neg.w	d0
00002CEE 0640 0080                  		addi.w	#$80,d0
00002CF2                            
00002CF2                            loc_2CF2:
00002CF2 4A42                       		tst.w	d2
00002CF4 6A00 0000                  		bpl.w	loc_2CFE
00002CF8 4440                       		neg.w	d0
00002CFA 0640 0100                  		addi.w	#$100,d0
00002CFE                            
00002CFE                            loc_2CFE:
00002CFE 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D02 4E75                       		rts	
00002D04                            ; ===========================================================================
00002D04                            
00002D04                            loc_2D04:				; XREF: CalcAngle
00002D04 303C 0040                  		move.w	#$40,d0
00002D08 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D0C 4E75                       		rts	
00002D0E                            ; End of function CalcAngle
00002D0E                            
00002D0E                            ; ===========================================================================
00002D0E                            
00002D0E                            Angle_Data:	incbin	misc\angles.bin
00002E10                            
00002E10                            ; ===========================================================================
00002E10                            
00002E10                            ; ---------------------------------------------------------------------------
00002E10                            ; Sega screen
00002E10                            ; ---------------------------------------------------------------------------
00002E10                            
00002E10                            SegaScreen:				; XREF: GameModeArray
00002E10 103C 00E4                  		move.b	#$E4,d0
00002E14 6100 E586                  		bsr.w	PlaySound_Special ; stop music
00002E18 6100 E7C4                  		bsr.w	ClearPLC
00002E1C 6100 F034                  		bsr.w	Pal_FadeFrom
00002E20 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E26 3CBC 8004                  		move.w	#$8004,(a6)
00002E2A 3CBC 8230                  		move.w	#$8230,(a6)
00002E2E 3CBC 8407                  		move.w	#$8407,(a6)
00002E32 3CBC 8700                  		move.w	#$8700,(a6)
00002E36 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E3A 4238 F64E                  		clr.b	($FFFFF64E).w
00002E3E 46FC 2700                  		move	#$2700,sr
00002E42 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E46 0200 00BF                  		andi.b	#$BF,d0
00002E4A 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E50 6100 E472                  		bsr.w	ClearScreen
00002E54 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E5E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E64 6100 E5DA                  		bsr.w	NemDec
00002E68 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E6E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E74 303C 0000                  		move.w	#0,d0
00002E78 6100 E8A4                  		bsr.w	EniDec
00002E7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E82 203C 6510 0003             		move.l	#$65100003,d0
00002E88 7217                       		moveq	#$17,d1
00002E8A 7407                       		moveq	#7,d2
00002E8C 6100 E592                  		bsr.w	ShowVDPGraphics
00002E90 43F9 00FF 0180             		lea	($FF0180).l,a1
00002E96 203C 4000 0003             		move.l	#$40000003,d0
00002E9C 7227                       		moveq	#$27,d1
00002E9E 741B                       		moveq	#$1B,d2
00002EA0 6100 E57E                  		bsr.w	ShowVDPGraphics
00002EA4 7000                       		moveq	#0,d0
00002EA6 6100 F270                  		bsr.w	PalLoad2	; load Sega logo pallet
00002EAA 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002EB0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002EB6 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002EBC 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002EC2 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EC6 0000 0040                  		ori.b	#$40,d0
00002ECA 33C0 00C0 0004             		move.w	d0,($C00004).l
00002ED0                            
00002ED0                            Sega_WaitPallet:
00002ED0 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002ED6 6100 FAD0                  		bsr.w	DelayProgram
00002EDA 6100 F12E                  		bsr.w	PalCycle_Sega
00002EDE 66F0                       		bne.s	Sega_WaitPallet
00002EE0                            
00002EE0 103C 00E1                  		move.b	#$E1,d0
00002EE4 6100 E4B6                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002EE8 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002EEE 6100 FAB8                  		bsr.w	DelayProgram
00002EF2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002EF8                            
00002EF8                            Sega_WaitEnd:
00002EF8 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EFE 6100 FAA8                  		bsr.w	DelayProgram
00002F02 4A78 F614                  		tst.w	($FFFFF614).w
00002F06 6700                       		beq.s	Sega_GotoTitle
00002F08 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002F0E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002F10                            
00002F10                            Sega_GotoTitle:
00002F10 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002F16 4E75                       		rts	
00002F18                            ; ===========================================================================
00002F18                            
00002F18                            ; ---------------------------------------------------------------------------
00002F18                            ; Title	screen
00002F18                            ; ---------------------------------------------------------------------------
00002F18                            
00002F18                            TitleScreen:				; XREF: GameModeArray
00002F18 103C 00E4                  		move.b	#$E4,d0
00002F1C 6100 E47E                  		bsr.w	PlaySound_Special ; stop music
00002F20 6100 E6BC                  		bsr.w	ClearPLC
00002F24 6100 EF2C                  		bsr.w	Pal_FadeFrom
00002F28 46FC 2700                  		move	#$2700,sr
00002F2C 6100 E424                  		bsr.w	SoundDriverLoad
00002F30 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F36 3CBC 8004                  		move.w	#$8004,(a6)
00002F3A 3CBC 8230                  		move.w	#$8230,(a6)
00002F3E 3CBC 8407                  		move.w	#$8407,(a6)
00002F42 3CBC 9001                  		move.w	#$9001,(a6)
00002F46 3CBC 9200                  		move.w	#$9200,(a6)
00002F4A 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F4E 3CBC 8720                  		move.w	#$8720,(a6)
00002F52 4238 F64E                  		clr.b	($FFFFF64E).w
00002F56 6100 E36C                  		bsr.w	ClearScreen
00002F5A 43F8 D000                  		lea	($FFFFD000).w,a1
00002F5E 7000                       		moveq	#0,d0
00002F60 323C 07FF                  		move.w	#$7FF,d1
00002F64                            
00002F64                            Title_ClrObjRam:
00002F64 22C0                       		move.l	d0,(a1)+
00002F66 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002F6A                            
00002F6A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002F74 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002F7A 6100 E4C4                  		bsr.w	NemDec
00002F7E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002F88 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002F8E 6100 E4B0                  		bsr.w	NemDec
00002F92 43F9 00FF 0000             		lea	($FF0000).l,a1
00002F98 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002F9E 303C 0000                  		move.w	#0,d0
00002FA2 6100 E77A                  		bsr.w	EniDec
00002FA6 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FAC 203C 4000 0003             		move.l	#$40000003,d0
00002FB2 7227                       		moveq	#$27,d1
00002FB4 741B                       		moveq	#$1B,d2
00002FB6 6100 E468                  		bsr.w	ShowVDPGraphics
00002FBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002FBE 7000                       		moveq	#0,d0
00002FC0 323C 001F                  		move.w	#$1F,d1
00002FC4                            
00002FC4                            Title_ClrPallet:
00002FC4 22C0                       		move.l	d0,(a1)+
00002FC6 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00002FCA                            
00002FCA 7003                       		moveq	#3,d0		; load Sonic's pallet
00002FCC 6100 F12E                  		bsr.w	PalLoad1
00002FD0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00002FD6 4EB9 0000 0000             		jsr	ObjectsLoad
00002FDC 4EB9 0000 0000             		jsr	BuildSprites
00002FE2 6100 EDC8                  		bsr.w	Pal_FadeTo
00002FE6 46FC 2700                  		move	#$2700,sr
00002FEA 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00002FF4 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00002FFA 6100 E444                  		bsr.w	NemDec
00002FFE 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003008 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000300E 6100 E430                  		bsr.w	NemDec
00003012 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
0000301C 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003022 6100 E41C                  		bsr.w	NemDec
00003026 4DF9 00C0 0000             		lea	($C00000).l,a6
0000302C 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003034 4BF9 0000 05F0             		lea	(Art_Text).l,a5
0000303A 323C 028F                  		move.w	#$28F,d1
0000303E                            
0000303E                            Title_LoadText:
0000303E 3C9D                       		move.w	(a5)+,(a6)
00003040 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003044                            
00003044 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000304A 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003050 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003056 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000305C 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003062 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003068 6100 0000                  		bsr.w	LevelSizeLoad
0000306C 6100 0000                  		bsr.w	DeformBgLayer
00003070 43F8 B000                  		lea	($FFFFB000).w,a1
00003074 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000307A 303C 0000                  		move.w	#0,d0
0000307E 6100 E69E                  		bsr.w	EniDec
00003082 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003088 43F9 00FF 0000             		lea	($FF0000).l,a1
0000308E 6100 E80C                  		bsr.w	KosDec
00003092 6100 0000                  		bsr.w	LevelLayoutLoad
00003096 6100 EDBA                  		bsr.w	Pal_FadeFrom
0000309A 46FC 2700                  		move	#$2700,sr
0000309E 6100 E224                  		bsr.w	ClearScreen
000030A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000030A8 4DF9 00C0 0000             		lea	($C00000).l,a6
000030AE 47F8 F708                  		lea	($FFFFF708).w,a3
000030B2 49F8 A440                  		lea	($FFFFA440).w,a4
000030B6 343C 6000                  		move.w	#$6000,d2
000030BA 6100 0000                  		bsr.w	LoadTilesFromStart2
000030BE 43F9 00FF 0000             		lea	($FF0000).l,a1
000030C4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000030CA 303C 0000                  		move.w	#0,d0
000030CE 6100 E64E                  		bsr.w	EniDec
000030D2 43F9 00FF 0000             		lea	($FF0000).l,a1
000030D8 203C 4206 0003             		move.l	#$42060003,d0
000030DE 7221                       		moveq	#$21,d1
000030E0 7415                       		moveq	#$15,d2
000030E2 6100 E33C                  		bsr.w	ShowVDPGraphics
000030E6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030F0 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000030F6 6100 E348                  		bsr.w	NemDec
000030FA 7001                       		moveq	#1,d0		; load title screen pallet
000030FC 6100 EFFE                  		bsr.w	PalLoad1
00003100 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003104 6100 E296                  		bsr.w	PlaySound_Special
00003108 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000310E 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003114 43F8 D080                  		lea	($FFFFD080).w,a1
00003118 7000                       		moveq	#0,d0
0000311A 323C 0007                  		move.w	#7,d1
0000311E                            
0000311E                            Title_ClrObjRam2:
0000311E 22C0                       		move.l	d0,(a1)+
00003120 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003124                            
00003124 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000312A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003130 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003136 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000313C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003142 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003148 4EB9 0000 0000             		jsr	ObjectsLoad
0000314E 6100 0000                  		bsr.w	DeformBgLayer
00003152 4EB9 0000 0000             		jsr	BuildSprites
00003158 7000                       		moveq	#0,d0
0000315A 6100 E456                  		bsr.w	LoadPLC2
0000315E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003164 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000316A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000316E 0000 0040                  		ori.b	#$40,d0
00003172 33C0 00C0 0004             		move.w	d0,($C00004).l
00003178 6100 EC32                  		bsr.w	Pal_FadeTo
0000317C                            
0000317C                            loc_317C:
0000317C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003182 6100 F824                  		bsr.w	DelayProgram
00003186 4EB9 0000 0000             		jsr	ObjectsLoad
0000318C 6100 0000                  		bsr.w	DeformBgLayer
00003190 4EB9 0000 0000             		jsr	BuildSprites
00003196 6100 E7C4                  		bsr.w	PalCycle_Title
0000319A 6100 E450                  		bsr.w	RunPLC_RAM
0000319E 3038 D008                  		move.w	($FFFFD008).w,d0
000031A2 5440                       		addq.w	#2,d0
000031A4 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000031A8 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000031AC 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000031AE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000031B4 4E75                       		rts	
000031B6                            ; ===========================================================================
000031B6                            
000031B6                            Title_ChkRegion:
000031B6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000031BA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000031BC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000031C2 6000                       		bra.s	Title_EnterCheat
000031C4                            ; ===========================================================================
000031C4                            
000031C4                            Title_RegionJ:				; XREF: Title_ChkRegion
000031C4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000031CA                            
000031CA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000031CA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000031CE D0C0                       		adda.w	d0,a0
000031D0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000031D4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000031D8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000031DA 6600                       		bne.s	loc_3210	; if not, branch
000031DC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000031E0 4A00                       		tst.b	d0
000031E2 6600                       		bne.s	Title_CountC
000031E4 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000031E8 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000031EC E249                       		lsr.w	#1,d1
000031EE 0241 0003                  		andi.w	#3,d1
000031F2 6700                       		beq.s	Title_PlayRing
000031F4 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000031F8 6A00                       		bpl.s	Title_PlayRing
000031FA 7201                       		moveq	#1,d1
000031FC 1181 1001                  		move.b	d1,1(a0,d1.w)
00003200                            
00003200                            Title_PlayRing:
00003200 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003206 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000320A 6100 E190                  		bsr.w	PlaySound_Special
0000320E 6000                       		bra.s	Title_CountC
00003210                            ; ===========================================================================
00003210                            
00003210                            loc_3210:				; XREF: Title_EnterCheat
00003210 4A00                       		tst.b	d0
00003212 6700                       		beq.s	Title_CountC
00003214 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000321A 6700                       		beq.s	Title_CountC
0000321C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003222                            
00003222                            Title_CountC:
00003222 1038 F605                  		move.b	($FFFFF605).w,d0
00003226 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000322A 6700                       		beq.s	loc_3230	; if not, branch
0000322C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003230                            
00003230                            loc_3230:
00003230 4A78 F614                  		tst.w	($FFFFF614).w
00003234 6700 0000                  		beq.w	Demo
00003238 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000323E 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003242                            
00003242                            Title_ChkLevSel:
00003242 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003246 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000324A 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003250 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003254 7002                       		moveq	#2,d0
00003256 6100 EEC0                  		bsr.w	PalLoad2	; load level select pallet
0000325A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000325E 7000                       		moveq	#0,d0
00003260 323C 00DF                  		move.w	#$DF,d1
00003264                            
00003264                            Title_ClrScroll:
00003264 22C0                       		move.l	d0,(a1)+
00003266 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000326A                            
0000326A 21C0 F616                  		move.l	d0,($FFFFF616).w
0000326E 46FC 2700                  		move	#$2700,sr
00003272 4DF9 00C0 0000             		lea	($C00000).l,a6
00003278 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003282 323C 03FF                  		move.w	#$3FF,d1
00003286                            
00003286                            Title_ClrVram:
00003286 2C80                       		move.l	d0,(a6)
00003288 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000328C                            
0000328C 6100 0000                  		bsr.w	LevSelTextLoad
00003290                            
00003290                            ; ---------------------------------------------------------------------------
00003290                            ; Level	Select
00003290                            ; ---------------------------------------------------------------------------
00003290                            
00003290                            LevelSelect:
00003290 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003296 6100 F710                  		bsr.w	DelayProgram
0000329A 6100 0000                  		bsr.w	LevSelControls
0000329E 6100 E34C                  		bsr.w	RunPLC_RAM
000032A2 4AB8 F680                  		tst.l	($FFFFF680).w
000032A6 66E8                       		bne.s	LevelSelect
000032A8 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000032AE 67E0                       		beq.s	LevelSelect	; if not, branch
000032B0 3038 FF82                  		move.w	($FFFFFF82).w,d0
000032B4 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000032B8 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000032BA 3038 FF84                  		move.w	($FFFFFF84).w,d0
000032BE 0640 0080                  		addi.w	#$80,d0
000032C2 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
000032C6 6700                       		beq.s	LevSel_NoCheat	; if not, branch
000032C8 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000032CC 6700                       		beq.s	LevSel_Ending	; if yes, branch
000032CE 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000032D2 6700                       		beq.s	LevSel_Credits	; if yes, branch
000032D4                            
000032D4                            LevSel_NoCheat:
000032D4 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
000032D8 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
000032DA 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000032DE 65B0                       		bcs.s	LevelSelect	; if yes, branch
000032E0                            
000032E0                            LevSel_PlaySnd:
000032E0 6100 E0BA                  		bsr.w	PlaySound_Special
000032E4 60AA                       		bra.s	LevelSelect
000032E6                            ; ===========================================================================
000032E6                            
000032E6                            LevSel_Ending:				; XREF: LevelSelect
000032E6 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000032EC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000032F2 4E75                       		rts	
000032F4                            ; ===========================================================================
000032F4                            
000032F4                            LevSel_Credits:				; XREF: LevelSelect
000032F4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000032FA 103C 0091                  		move.b	#$91,d0
000032FE 6100 E09C                  		bsr.w	PlaySound_Special ; play credits music
00003302 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003308 4E75                       		rts	
0000330A                            ; ===========================================================================
0000330A                            
0000330A                            LevSel_Level_SS:			; XREF: LevelSelect
0000330A D040                       		add.w	d0,d0
0000330C 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003310 6B00 FF7E                  		bmi.w	LevelSelect
00003314 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003318 6600                       		bne.s	LevSel_Level	; if not, branch
0000331A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003320 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003324 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000332A 7000                       		moveq	#0,d0
0000332C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003330 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003334 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003338 4E75                       		rts	
0000333A                            ; ===========================================================================
0000333A                            
0000333A                            LevSel_Level:				; XREF: LevSel_Level_SS
0000333A 0240 3FFF                  		andi.w	#$3FFF,d0
0000333E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003342                            
00003342                            PlayLevel:				; XREF: ROM:00003246j ...
00003342 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003348 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000334E 7000                       		moveq	#0,d0
00003350 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003354 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003358 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000335C 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003360 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003364 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003368 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000336C 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003370 103C 00E0                  		move.b	#$E0,d0
00003374 6100 E026                  		bsr.w	PlaySound_Special ; fade out music
00003378 4E75                       		rts	
0000337A                            ; ===========================================================================
0000337A                            ; ---------------------------------------------------------------------------
0000337A                            ; Level	select - level pointers
0000337A                            ; ---------------------------------------------------------------------------
0000337A                            LSelectPointers:
0000337A                            		incbin	misc\ls_point.bin
000033A4                            		even
000033A4                            ; ---------------------------------------------------------------------------
000033A4                            ; Level	select codes
000033A4                            ; ---------------------------------------------------------------------------
000033A4                            LevelSelectCode_J:
000033A4                            		incbin	misc\ls_jcode.bin
000033AA                            		even
000033AA                            
000033AA                            LevelSelectCode_US:
000033AA                            		incbin	misc\ls_ucode.bin
000033B0                            		even
000033B0                            ; ===========================================================================
000033B0                            
000033B0                            ; ---------------------------------------------------------------------------
000033B0                            ; Demo mode
000033B0                            ; ---------------------------------------------------------------------------
000033B0                            
000033B0                            Demo:					; XREF: TitleScreen
000033B0 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000033B6                            
000033B6                            loc_33B6:				; XREF: loc_33E4
000033B6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033BC 6100 F5EA                  		bsr.w	DelayProgram
000033C0 6100 0000                  		bsr.w	DeformBgLayer
000033C4 6100 E576                  		bsr.w	PalCycle_Load
000033C8 6100 E222                  		bsr.w	RunPLC_RAM
000033CC 3038 D008                  		move.w	($FFFFD008).w,d0
000033D0 5440                       		addq.w	#2,d0
000033D2 31C0 D008                  		move.w	d0,($FFFFD008).w
000033D6 0C40 1C00                  		cmpi.w	#$1C00,d0
000033DA 6500                       		bcs.s	loc_33E4
000033DC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000033E2 4E75                       		rts	
000033E4                            ; ===========================================================================
000033E4                            
000033E4                            loc_33E4:				; XREF: Demo
000033E4 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000033EA 6600 FE56                  		bne.w	Title_ChkLevSel	; if yes, branch
000033EE 4A78 F614                  		tst.w	($FFFFF614).w
000033F2 6600 FFC2                  		bne.w	loc_33B6
000033F6 103C 00E0                  		move.b	#$E0,d0
000033FA 6100 DFA0                  		bsr.w	PlaySound_Special ; fade out music
000033FE 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003402 0240 0007                  		andi.w	#7,d0
00003406 D040                       		add.w	d0,d0
00003408 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000340C 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003410 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003414 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000341A 6500                       		bcs.s	loc_3422	; if yes, branch
0000341C 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003422                            
00003422                            loc_3422:
00003422 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003428 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000342E 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003432 6600                       		bne.s	Demo_Level	; if not, branch
00003434 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000343A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000343E 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003442                            
00003442                            Demo_Level:
00003442 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003448 7000                       		moveq	#0,d0
0000344A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000344E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003452 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003456 4E75                       		rts	
00003458                            ; ===========================================================================
00003458                            ; ---------------------------------------------------------------------------
00003458                            ; Levels used in demos
00003458                            ; ---------------------------------------------------------------------------
00003458                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003460                            		even
00003460                            
00003460                            ; ---------------------------------------------------------------------------
00003460                            ; Subroutine to	change what you're selecting in the level select
00003460                            ; ---------------------------------------------------------------------------
00003460                            
00003460                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003460                            
00003460                            
00003460                            LevSelControls:				; XREF: LevelSelect
00003460 1238 F605                  		move.b	($FFFFF605).w,d1
00003464 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003468 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000346A 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000346E 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003470                            
00003470                            LevSel_UpDown:
00003470 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003476 1238 F604                  		move.b	($FFFFF604).w,d1
0000347A 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000347E 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003480 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003484 0801 0000                  		btst	#0,d1		; is up	pressed?
00003488 6700                       		beq.s	LevSel_Down	; if not, branch
0000348A 5340                       		subq.w	#1,d0		; move up 1 selection
0000348C 6400                       		bcc.s	LevSel_Down
0000348E 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003490                            
00003490                            LevSel_Down:
00003490 0801 0001                  		btst	#1,d1		; is down pressed?
00003494 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003496 5240                       		addq.w	#1,d0		; move down 1 selection
00003498 0C40 0015                  		cmpi.w	#$15,d0
0000349C 6500                       		bcs.s	LevSel_Refresh
0000349E 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000034A0                            
000034A0                            LevSel_Refresh:
000034A0 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
000034A4 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034A8 4E75                       		rts	
000034AA                            ; ===========================================================================
000034AA                            
000034AA                            LevSel_SndTest:				; XREF: LevSelControls
000034AA 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
000034B0 6600                       		bne.s	LevSel_NoMove	; if not, branch
000034B2 1238 F605                  		move.b	($FFFFF605).w,d1
000034B6 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000034BA 6700                       		beq.s	LevSel_NoMove	; if not, branch
000034BC 3038 FF84                  		move.w	($FFFFFF84).w,d0
000034C0 0801 0002                  		btst	#2,d1		; is left pressed?
000034C4 6700                       		beq.s	LevSel_Right	; if not, branch
000034C6 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000034C8 6400                       		bcc.s	LevSel_Right
000034CA 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000034CC                            
000034CC                            LevSel_Right:
000034CC 0801 0003                  		btst	#3,d1		; is right pressed?
000034D0 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000034D2 5240                       		addq.w	#1,d0		; add 1	to sound test
000034D4 0C40 0050                  		cmpi.w	#$50,d0
000034D8 6500                       		bcs.s	LevSel_Refresh2
000034DA 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000034DC                            
000034DC                            LevSel_Refresh2:
000034DC 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000034E0 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034E4                            
000034E4                            LevSel_NoMove:
000034E4 4E75                       		rts	
000034E6                            ; End of function LevSelControls
000034E6                            
000034E6                            ; ---------------------------------------------------------------------------
000034E6                            ; Subroutine to load level select text
000034E6                            ; ---------------------------------------------------------------------------
000034E6                            
000034E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034E6                            
000034E6                            
000034E6                            LevSelTextLoad:				; XREF: TitleScreen
000034E6 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000034EC 4DF9 00C0 0000             		lea	($C00000).l,a6
000034F2 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000034F8 363C E680                  		move.w	#$E680,d3	; VRAM setting
000034FC 7214                       		moveq	#$14,d1		; number of lines of text
000034FE                            
000034FE                            loc_34FE:				; XREF: LevSelTextLoad+26j
000034FE 2D44 0004                  		move.l	d4,4(a6)
00003502 6100 0000                  		bsr.w	LevSel_ChgLine
00003506 0684 0080 0000             		addi.l	#$800000,d4
0000350C 51C9 FFF0                  		dbf	d1,loc_34FE
00003510 7000                       		moveq	#0,d0
00003512 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003516 3200                       		move.w	d0,d1
00003518 283C 6210 0003             		move.l	#$62100003,d4
0000351E EF48                       		lsl.w	#7,d0
00003520 4840                       		swap	d0
00003522 D880                       		add.l	d0,d4
00003524 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000352A E749                       		lsl.w	#3,d1
0000352C 3001                       		move.w	d1,d0
0000352E D241                       		add.w	d1,d1
00003530 D240                       		add.w	d0,d1
00003532 D2C1                       		adda.w	d1,a1
00003534 363C C680                  		move.w	#$C680,d3
00003538 2D44 0004                  		move.l	d4,4(a6)
0000353C 6100 0000                  		bsr.w	LevSel_ChgLine
00003540 363C E680                  		move.w	#$E680,d3
00003544 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000354A 6600                       		bne.s	loc_3550
0000354C 363C C680                  		move.w	#$C680,d3
00003550                            
00003550                            loc_3550:
00003550 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
0000355A 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000355E 0640 0080                  		addi.w	#$80,d0
00003562 1400                       		move.b	d0,d2
00003564 E808                       		lsr.b	#4,d0
00003566 6100 0000                  		bsr.w	LevSel_ChgSnd
0000356A 1002                       		move.b	d2,d0
0000356C 6100 0000                  		bsr.w	LevSel_ChgSnd
00003570 4E75                       		rts	
00003572                            ; End of function LevSelTextLoad
00003572                            
00003572                            
00003572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003572                            
00003572                            
00003572                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003572 0240 000F                  		andi.w	#$F,d0
00003576 0C00 000A                  		cmpi.b	#$A,d0
0000357A 6500                       		bcs.s	loc_3580
0000357C 5E00                       		addi.b	#7,d0
0000357E                            
0000357E                            loc_3580:
0000357E D043                       		add.w	d3,d0
00003580 3C80                       		move.w	d0,(a6)
00003582 4E75                       		rts	
00003584                            ; End of function LevSel_ChgSnd
00003584                            
00003584                            
00003584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003584                            
00003584                            
00003584                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003584 7417                       		moveq	#$17,d2		; number of characters per line
00003586                            
00003586                            loc_3588:
00003586 7000                       		moveq	#0,d0
00003588 1019                       		move.b	(a1)+,d0
0000358A 6A00                       		bpl.s	loc_3598
0000358C 3CBC 0000                  		move.w	#0,(a6)
00003590 51CA FFF4                  		dbf	d2,loc_3588
00003594 4E75                       		rts	
00003596                            ; ===========================================================================
00003596                            
00003596                            loc_3598:				; XREF: LevSel_ChgLine
00003596 D043                       		add.w	d3,d0
00003598 3C80                       		move.w	d0,(a6)
0000359A 51CA FFEA                  		dbf	d2,loc_3588
0000359E 4E75                       		rts	
000035A0                            ; End of function LevSel_ChgLine
000035A0                            
000035A0                            ; ===========================================================================
000035A0                            ; ---------------------------------------------------------------------------
000035A0                            ; Level	select menu text
000035A0                            ; ---------------------------------------------------------------------------
000035A0                            LevelMenuText:	incbin	misc\menutext.bin
00003798                            		even
00003798                            ; ---------------------------------------------------------------------------
00003798                            ; Music	playlist
00003798                            ; ---------------------------------------------------------------------------
00003798                            MusicList1:	incbin	misc\muslist1.bin
000037A0                            		even
000037A0                            MusicList2:	incbin	misc\muslist2.bin
000037A6                            		even
000037A6                            MusicList3:	incbin	misc\muslist3.bin
000037AC                            		even
000037AC                            MusicList4:	incbin	misc\muslist4.bin
000037B2                            		even
000037B2                            ; ===========================================================================
000037B2                            
000037B2                            ; ---------------------------------------------------------------------------
000037B2                            ; Level
000037B2                            ; ---------------------------------------------------------------------------
000037B2                            
000037B2                            Level:					; XREF: GameModeArray
000037B2 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000037B8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000037BC 6B00                       		bmi.s	loc_37B6
000037BE 103C 00E0                  		move.b	#$E0,d0
000037C2 6100 DBD8                  		bsr.w	PlaySound_Special ; fade out music
000037C6                            
000037C6                            loc_37B6:
000037C6 6100 DE16                  		bsr.w	ClearPLC
000037CA 6100 E686                  		bsr.w	Pal_FadeFrom
000037CE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000037D2 6B00                       		bmi.s	Level_ClrRam
000037D4 46FC 2700                  		move	#$2700,sr
000037D8 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000037E2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000037E8 6100 DC56                  		bsr.w	NemDec
000037EC 46FC 2300                  		move	#$2300,sr
000037F0 7000                       		moveq	#0,d0
000037F2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000037F6 E948                       		lsl.w	#4,d0
000037F8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000037FE 45F2 0000                  		lea	(a2,d0.w),a2
00003802 7000                       		moveq	#0,d0
00003804 1012                       		move.b	(a2),d0
00003806 6700                       		beq.s	loc_37FC
00003808 6100 DD76                  		bsr.w	LoadPLC		; load level patterns
0000380C                            
0000380C                            loc_37FC:
0000380C 7001                       		moveq	#1,d0
0000380E 6100 DD70                  		bsr.w	LoadPLC		; load standard	patterns
00003812                            
00003812                            Level_ClrRam:
00003812 43F8 D000                  		lea	($FFFFD000).w,a1
00003816 7000                       		moveq	#0,d0
00003818 323C 07FF                  		move.w	#$7FF,d1
0000381C                            
0000381C                            Level_ClrObjRam:
0000381C 22C0                       		move.l	d0,(a1)+
0000381E 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003822                            
00003822 43F8 F628                  		lea	($FFFFF628).w,a1
00003826 7000                       		moveq	#0,d0
00003828 323C 0015                  		move.w	#$15,d1
0000382C                            
0000382C                            Level_ClrVars:
0000382C 22C0                       		move.l	d0,(a1)+
0000382E 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003832                            
00003832 43F8 F700                  		lea	($FFFFF700).w,a1
00003836 7000                       		moveq	#0,d0
00003838 323C 003F                  		move.w	#$3F,d1
0000383C                            
0000383C                            Level_ClrVars2:
0000383C 22C0                       		move.l	d0,(a1)+
0000383E 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003842                            
00003842 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003846 7000                       		moveq	#0,d0
00003848 323C 0047                  		move.w	#$47,d1
0000384C                            
0000384C                            Level_ClrVars3:
0000384C 22C0                       		move.l	d0,(a1)+
0000384E 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003852                            
00003852 46FC 2700                  		move	#$2700,sr
00003856 6100 DA6C                  		bsr.w	ClearScreen
0000385A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003860 3CBC 8B03                  		move.w	#$8B03,(a6)
00003864 3CBC 8230                  		move.w	#$8230,(a6)
00003868 3CBC 8407                  		move.w	#$8407,(a6)
0000386C 3CBC 857C                  		move.w	#$857C,(a6)
00003870 3CBC 9001                  		move.w	#$9001,(a6)
00003874 3CBC 8004                  		move.w	#$8004,(a6)
00003878 3CBC 8720                  		move.w	#$8720,(a6)
0000387C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003882 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003886 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000388C 6600                       		bne.s	Level_LoadPal	; if not, branch
0000388E 3CBC 8014                  		move.w	#$8014,(a6)
00003892 7000                       		moveq	#0,d0
00003894 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003898 D040                       		add.w	d0,d0
0000389A 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000038A0 3031 0000                  		move.w	(a1,d0.w),d0
000038A4 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
000038A8 31C0 F648                  		move.w	d0,($FFFFF648).w
000038AC 31C0 F64A                  		move.w	d0,($FFFFF64A).w
000038B0 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000038B4 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000038B8 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000038BE                            
000038BE                            Level_LoadPal:
000038BE 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000038C4 46FC 2300                  		move	#$2300,sr
000038C8 7003                       		moveq	#3,d0
000038CA 6100 E84C                  		bsr.w	PalLoad2	; load Sonic's pallet line
000038CE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000038D4 6600                       		bne.s	Level_GetBgm	; if not, branch
000038D6 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000038D8 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000038DE 6600                       		bne.s	Level_WaterPal	; if not, branch
000038E0 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000038E2                            
000038E2                            Level_WaterPal:
000038E2 6100 E84C                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000038E6 4A38 FE30                  		tst.b	($FFFFFE30).w
000038EA 6700                       		beq.s	Level_GetBgm
000038EC 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000038F2                            
000038F2                            ; NineKode begins here - How to play different songs on different acts
000038F2                             
000038F2                            Level_GetBgm:
000038F2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038F6 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
000038FA 7000                       		moveq	#0,d0
000038FC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003900                             
00003900 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003906 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003908 43F9 0000 3798             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0000390E 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003910                             
00003910                            Level_GetBgm2:
00003910 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003916 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003918 43F9 0000 37A0             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0000391E 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003920                             
00003920                            Level_GetBgm3:
00003920 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003926 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003928 43F9 0000 37A6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0000392E 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003930                             
00003930                            Level_GetBgm4:
00003930 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003936 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003938 43F9 0000 37AC             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0000393E                             
0000393E                            Level_PlayBgm:
0000393E 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003942 6100 DA52                  		bsr.w	PlaySound	; play music
00003946 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
0000394C                             
0000394C                            ; NineKode ends here
0000394C                            
0000394C                            Level_TtlCard:
0000394C 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003952 6100 F054                  		bsr.w	DelayProgram
00003956 4EB9 0000 0000             		jsr	ObjectsLoad
0000395C 4EB9 0000 0000             		jsr	BuildSprites
00003962 6100 DC88                  		bsr.w	RunPLC_RAM
00003966 3038 D108                  		move.w	($FFFFD108).w,d0
0000396A B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
0000396E 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003970 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003974 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003976 4EB9 0000 0000             		jsr	Hud_Base
0000397C                            
0000397C                            loc_3946:
0000397C 7003                       		moveq	#3,d0
0000397E 6100 E77C                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003982 6100 0000                  		bsr.w	LevelSizeLoad
00003986 6100 0000                  		bsr.w	DeformBgLayer
0000398A 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003990 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003994 6100 0000                  		bsr.w	LoadTilesFromStart
00003998 4EB9 0000 0000             		jsr	FloorLog_Unk
0000399E 6100 0000                  		bsr.w	ColIndexLoad
000039A2 6100 0000                  		bsr.w	LZWaterEffects
000039A6 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000039AC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000039B0 6B00                       		bmi.s	Level_ChkDebug
000039B2 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000039B8                            
000039B8                            Level_ChkDebug:
000039B8 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000039BC 6700                       		beq.s	Level_ChkWater	; if not, branch
000039BE 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000039C4 6700                       		beq.s	Level_ChkWater	; if not, branch
000039C6 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000039CC                            
000039CC                            Level_ChkWater:
000039CC 31FC 0000 F602             		move.w	#0,($FFFFF602).w
000039D2 31FC 0000 F604             		move.w	#0,($FFFFF604).w
000039D8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000039DE 6600                       		bne.s	Level_LoadObj	; if not, branch
000039E0 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
000039E6 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
000039EC 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
000039F2 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
000039F8                            
000039F8                            Level_LoadObj:
000039F8 4EB9 0000 0000             		jsr	ObjPosLoad
000039FE 4EB9 0000 0000             		jsr	ObjectsLoad
00003A04 4EB9 0000 0000             		jsr	BuildSprites
00003A0A 7000                       		moveq	#0,d0
00003A0C 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003A10 6600                       		bne.s	loc_39E8	; if yes, branch
00003A12 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003A16 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003A1A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003A1E                            
00003A1E                            loc_39E8:
00003A1E 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003A22 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003A26 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003A2A 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003A2E                            		; move.b	d0,($FFFFFE2F).w
00003A2E 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003A34 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003A38 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003A3C 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003A40 6100 0000                  		bsr.w	OscillateNumInit
00003A44 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003A4A 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003A50 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003A56 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003A5C 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003A62 7000                       		moveq	#0,d0
00003A64 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003A68 E548                       		lsl.w	#2,d0
00003A6A 2271 0000                  		movea.l	(a1,d0.w),a1
00003A6E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003A72 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003A74 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003A7A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003A7E 5340                       		subq.w	#1,d0
00003A80 E548                       		lsl.w	#2,d0
00003A82 2271 0000                  		movea.l	(a1,d0.w),a1
00003A86                            
00003A86                            Level_Demo:
00003A86 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003A8C 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003A90 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003A96 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A9A 6A00                       		bpl.s	Level_ChkWaterPal
00003A9C 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003AA2 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003AA8 6600                       		bne.s	Level_ChkWaterPal
00003AAA 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003AB0                            
00003AB0                            Level_ChkWaterPal:
00003AB0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003AB6 6600                       		bne.s	Level_Delay	; if not, branch
00003AB8 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003ABA 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003AC0 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003AC2 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003AC4                            
00003AC4                            Level_WaterPal2:
00003AC4 6100 E686                  		bsr.w	PalLoad4_Water
00003AC8                            
00003AC8                            Level_Delay:
00003AC8 323C 0003                  		move.w	#3,d1
00003ACC                            
00003ACC                            Level_DelayLoop:
00003ACC 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003AD2 6100 EED4                  		bsr.w	DelayProgram
00003AD6 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003ADA                            
00003ADA 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003AE0 6100 E2D0                  		bsr.w	Pal_FadeTo2
00003AE4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AE8 6B00                       		bmi.s	Level_ClrCardArt
00003AEA 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003AEE 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003AF2 5838 D124                  		addq.b	#4,($FFFFD124).w
00003AF6 5838 D164                  		addq.b	#4,($FFFFD164).w
00003AFA 6000                       		bra.s	Level_StartGame
00003AFC                            ; ===========================================================================
00003AFC                            
00003AFC                            Level_ClrCardArt:
00003AFC 7002                       		moveq	#2,d0
00003AFE 4EB9 0000 1580             		jsr	(LoadPLC).l	; load explosion patterns
00003B04 7000                       		moveq	#0,d0
00003B06 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B0A 0640 0015                  		addi.w	#$15,d0
00003B0E 4EB9 0000 1580             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003B14                            
00003B14                            Level_StartGame:
00003B14 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003B1A                            
00003B1A                            ; ---------------------------------------------------------------------------
00003B1A                            ; Main level loop (when	all title card and loading sequences are finished)
00003B1A                            ; ---------------------------------------------------------------------------
00003B1A                            
00003B1A                            Level_MainLoop:
00003B1A 6100 D88C                  		bsr.w	PauseGame
00003B1E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003B24 6100 EE82                  		bsr.w	DelayProgram
00003B28 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003B2C 6100 0000                  		bsr.w	MoveSonicInDemo
00003B30 6100 0000                  		bsr.w	LZWaterEffects
00003B34 4EB9 0000 0000             		jsr	ObjectsLoad
00003B3A 4A78 FE08                  		tst.w	($FFFFFE08).w
00003B3E 6600                       		bne.s	loc_3B10
00003B40 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003B46 6400                       		bcc.s	loc_3B14
00003B48                            
00003B48                            loc_3B10:
00003B48 6100 0000                  		bsr.w	DeformBgLayer
00003B4C                            
00003B4C                            loc_3B14:
00003B4C 4EB9 0000 0000             		jsr	BuildSprites
00003B52 4EB9 0000 0000             		jsr	ObjPosLoad
00003B58 6100 DDE2                  		bsr.w	PalCycle_Load
00003B5C 6100 DA8E                  		bsr.w	RunPLC_RAM
00003B60 6100 0000                  		bsr.w	OscillateNumDo
00003B64 6100 0000                  		bsr.w	ChangeRingFrame
00003B68 6100 0000                  		bsr.w	SignpostArtLoad
00003B6C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B72 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003B74 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003B78 6600 FC38                  		bne.w	Level		; if yes, branch
00003B7C 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003B82 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003B86 4E75                       		rts	
00003B88                            ; ===========================================================================
00003B88                            
00003B88                            Level_ChkDemo:				; XREF: Level_MainLoop
00003B88 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003B8C 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003B8E 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003B92 6700                       		beq.s	Level_EndDemo	; if not, branch
00003B94 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B9A 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003B9E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003BA4 4E75                       		rts	
00003BA6                            ; ===========================================================================
00003BA6                            
00003BA6                            Level_EndDemo:				; XREF: Level_ChkDemo
00003BA6 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003BAC 6600                       		bne.s	loc_3B88	; if not, branch
00003BAE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003BB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003BB8 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003BBA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003BC0                            
00003BC0                            loc_3B88:
00003BC0 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003BC6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003BCC 4278 F794                  		clr.w	($FFFFF794).w
00003BD0                            
00003BD0                            loc_3B98:
00003BD0 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003BD6 6100 EDD0                  		bsr.w	DelayProgram
00003BDA 6100 0000                  		bsr.w	MoveSonicInDemo
00003BDE 4EB9 0000 0000             		jsr	ObjectsLoad
00003BE4 4EB9 0000 0000             		jsr	BuildSprites
00003BEA 4EB9 0000 0000             		jsr	ObjPosLoad
00003BF0 5378 F794                  		subq.w	#1,($FFFFF794).w
00003BF4 6A00                       		bpl.s	loc_3BC8
00003BF6 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003BFC 6100 E274                  		bsr.w	Pal_FadeOut
00003C00                            
00003C00                            loc_3BC8:
00003C00 4A78 F614                  		tst.w	($FFFFF614).w
00003C04 66CA                       		bne.s	loc_3B98
00003C06 4E75                       		rts	
00003C08                            ; ===========================================================================
00003C08                            ; ---------------------------------------------------------------------------
00003C08                            ; Subroutine to	do special water effects in Labyrinth Zone
00003C08                            ; ---------------------------------------------------------------------------
00003C08                            
00003C08                            LZWaterEffects:				; XREF: Level
00003C08 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003C0E 6600                       		bne.s	locret_3C28	; if not, branch
00003C10 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003C16 6400                       		bcc.s	LZMoveWater
00003C18 6100 0000                  		bsr.w	LZWindTunnels
00003C1C 6100 0000                  		bsr.w	LZWaterSlides
00003C20 6100 0000                  		bsr.w	LZDynamicWater
00003C24                            
00003C24                            LZMoveWater:
00003C24 4238 F64E                  		clr.b	($FFFFF64E).w
00003C28 7000                       		moveq	#0,d0
00003C2A 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003C2E E248                       		lsr.w	#1,d0
00003C30 D078 F648                  		add.w	($FFFFF648).w,d0
00003C34 31C0 F646                  		move.w	d0,($FFFFF646).w
00003C38 3038 F646                  		move.w	($FFFFF646).w,d0
00003C3C 9078 F704                  		sub.w	($FFFFF704).w,d0
00003C40 6400                       		bcc.s	loc_3C1A
00003C42 4A40                       		tst.w	d0
00003C44 6A00                       		bpl.s	loc_3C1A
00003C46 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003C4C 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003C52                            
00003C52                            loc_3C1A:
00003C52 0C40 00DF                  		cmpi.w	#$DF,d0
00003C56 6500                       		bcs.s	loc_3C24
00003C58 303C 00DF                  		move.w	#$DF,d0
00003C5C                            
00003C5C                            loc_3C24:
00003C5C 11C0 F625                  		move.b	d0,($FFFFF625).w
00003C60                            
00003C60                            locret_3C28:
00003C60 4E75                       		rts	
00003C62                            ; ===========================================================================
00003C62                            ; ---------------------------------------------------------------------------
00003C62                            ; Labyrinth default water heights
00003C62                            ; ---------------------------------------------------------------------------
00003C62                            WaterHeight:	incbin	misc\lz_heigh.bin
00003C6A                            		even
00003C6A                            ; ===========================================================================
00003C6A                            
00003C6A                            ; ---------------------------------------------------------------------------
00003C6A                            ; Labyrinth dynamic water routines
00003C6A                            ; ---------------------------------------------------------------------------
00003C6A                            
00003C6A                            LZDynamicWater:				; XREF: LZWaterEffects
00003C6A 7000                       		moveq	#0,d0
00003C6C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003C70 D040                       		add.w	d0,d0
00003C72 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003C76 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003C7A 7200                       		moveq	#0,d1
00003C7C 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003C80 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003C84 9078 F648                  		sub.w	($FFFFF648).w,d0
00003C88 6700                       		beq.s	locret_3C5A
00003C8A 6400                       		bcc.s	loc_3C56
00003C8C 4441                       		neg.w	d1
00003C8E                            
00003C8E                            loc_3C56:
00003C8E D378 F648                  		add.w	d1,($FFFFF648).w
00003C92                            
00003C92                            locret_3C5A:
00003C92 4E75                       		rts	
00003C94                            ; ===========================================================================
00003C94 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003C96 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003C98 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003C9A 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003C9C                            ; ===========================================================================
00003C9C                            
00003C9C                            DynWater_LZ1:				; XREF: DynWater_Index
00003C9C 3038 F700                  		move.w	($FFFFF700).w,d0
00003CA0 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003CA4 6600                       		bne.s	loc_3CD0
00003CA6 323C 00B8                  		move.w	#$B8,d1
00003CAA 0C40 0600                  		cmpi.w	#$600,d0
00003CAE 6500                       		bcs.s	loc_3CB4
00003CB0 323C 0108                  		move.w	#$108,d1
00003CB4 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003CBA 6500                       		bcs.s	loc_3CBA
00003CBC 0C40 0C00                  		cmpi.w	#$C00,d0
00003CC0 6500                       		bcs.s	loc_3CB4
00003CC2 323C 0318                  		move.w	#$318,d1
00003CC6 0C40 1080                  		cmpi.w	#$1080,d0
00003CCA 6500                       		bcs.s	loc_3CB4
00003CCC 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003CD2 323C 05C8                  		move.w	#$5C8,d1
00003CD6 0C40 1380                  		cmpi.w	#$1380,d0
00003CDA 6500                       		bcs.s	loc_3CB4
00003CDC 323C 03A8                  		move.w	#$3A8,d1
00003CE0 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003CE4 6600                       		bne.s	loc_3CB4
00003CE6 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003CEC                            
00003CEC                            loc_3CB4:
00003CEC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CF0 4E75                       		rts	
00003CF2                            ; ===========================================================================
00003CF2                            
00003CF2                            loc_3CBA:				; XREF: DynWater_LZ1
00003CF2 0C40 0C80                  		cmpi.w	#$C80,d0
00003CF6 65F4                       		bcs.s	loc_3CB4
00003CF8 323C 00E8                  		move.w	#$E8,d1
00003CFC 0C40 1500                  		cmpi.w	#$1500,d0
00003D00 65EA                       		bcs.s	loc_3CB4
00003D02 323C 0108                  		move.w	#$108,d1
00003D06 60E4                       		bra.s	loc_3CB4
00003D08                            ; ===========================================================================
00003D08                            
00003D08                            loc_3CD0:				; XREF: DynWater_LZ1
00003D08 5302                       		subq.b	#1,d2
00003D0A 6600                       		bne.s	locret_3CF4
00003D0C 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003D12 6400                       		bcc.s	locret_3CF4
00003D14 323C 03A8                  		move.w	#$3A8,d1
00003D18 0C40 1300                  		cmpi.w	#$1300,d0
00003D1C 6500                       		bcs.s	loc_3CF0
00003D1E 323C 0108                  		move.w	#$108,d1
00003D22 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003D28                            
00003D28                            loc_3CF0:
00003D28 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D2C                            
00003D2C                            locret_3CF4:
00003D2C 4E75                       		rts	
00003D2E                            ; ===========================================================================
00003D2E                            
00003D2E                            DynWater_LZ2:				; XREF: DynWater_Index
00003D2E 3038 F700                  		move.w	($FFFFF700).w,d0
00003D32 323C 0328                  		move.w	#$328,d1
00003D36 0C40 0500                  		cmpi.w	#$500,d0
00003D3A 6500                       		bcs.s	loc_3D12
00003D3C 323C 03C8                  		move.w	#$3C8,d1
00003D40 0C40 0B00                  		cmpi.w	#$B00,d0
00003D44 6500                       		bcs.s	loc_3D12
00003D46 323C 0428                  		move.w	#$428,d1
00003D4A                            
00003D4A                            loc_3D12:
00003D4A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D4E 4E75                       		rts	
00003D50                            ; ===========================================================================
00003D50                            
00003D50                            DynWater_LZ3:				; XREF: DynWater_Index
00003D50 3038 F700                  		move.w	($FFFFF700).w,d0
00003D54 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003D58 6600                       		bne.s	loc_3D5E
00003D5A 323C 0900                  		move.w	#$900,d1
00003D5E 0C40 0600                  		cmpi.w	#$600,d0
00003D62 6500                       		bcs.s	loc_3D54
00003D64 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003D6A 6500                       		bcs.s	loc_3D54
00003D6C 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D72 6400                       		bcc.s	loc_3D54
00003D74 323C 04C8                  		move.w	#$4C8,d1
00003D78 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003D7E 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003D84 303C 00B7                  		move.w	#$B7,d0
00003D88 6100 D612                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003D8C                            
00003D8C                            loc_3D54:
00003D8C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D90 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D94 4E75                       		rts	
00003D96                            ; ===========================================================================
00003D96                            
00003D96                            loc_3D5E:				; XREF: DynWater_LZ3
00003D96 5302                       		subq.b	#1,d2
00003D98 6600                       		bne.s	loc_3DA8
00003D9A 323C 04C8                  		move.w	#$4C8,d1
00003D9E 0C40 0770                  		cmpi.w	#$770,d0
00003DA2 6500                       		bcs.s	loc_3DA2
00003DA4 323C 0308                  		move.w	#$308,d1
00003DA8 0C40 1400                  		cmpi.w	#$1400,d0
00003DAC 6500                       		bcs.s	loc_3DA2
00003DAE 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003DB4 6700                       		beq.s	loc_3D8E
00003DB6 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003DBC 6400                       		bcc.s	loc_3D8E
00003DBE 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003DC4 6400                       		bcc.s	loc_3DA2
00003DC6                            
00003DC6                            loc_3D8E:
00003DC6 323C 0508                  		move.w	#$508,d1
00003DCA 31C1 F648                  		move.w	d1,($FFFFF648).w
00003DCE 0C40 1770                  		cmpi.w	#$1770,d0
00003DD2 6500                       		bcs.s	loc_3DA2
00003DD4 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003DDA                            
00003DDA                            loc_3DA2:
00003DDA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DDE 4E75                       		rts	
00003DE0                            ; ===========================================================================
00003DE0                            
00003DE0                            loc_3DA8:
00003DE0 5302                       		subq.b	#1,d2
00003DE2 6600                       		bne.s	loc_3DD2
00003DE4 323C 0508                  		move.w	#$508,d1
00003DE8 0C40 1860                  		cmpi.w	#$1860,d0
00003DEC 6500                       		bcs.s	loc_3DCC
00003DEE 323C 0188                  		move.w	#$188,d1
00003DF2 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DF6 6400                       		bcc.s	loc_3DC6
00003DF8 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003DFC 6600                       		bne.s	loc_3DCC
00003DFE                            
00003DFE                            loc_3DC6:
00003DFE 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003E04                            
00003E04                            loc_3DCC:
00003E04 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E08 4E75                       		rts	
00003E0A                            ; ===========================================================================
00003E0A                            
00003E0A                            loc_3DD2:
00003E0A 5302                       		subq.b	#1,d2
00003E0C 6600                       		bne.s	loc_3E0E
00003E0E 323C 0188                  		move.w	#$188,d1
00003E12 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003E16 6500                       		bcs.s	loc_3E04
00003E18 323C 0900                  		move.w	#$900,d1
00003E1C 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003E20 6500                       		bcs.s	loc_3E04
00003E22 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003E28 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003E2E 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003E34 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003E3A 4E75                       		rts	
00003E3C                            ; ===========================================================================
00003E3C                            
00003E3C                            loc_3E04:
00003E3C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E40 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E44 4E75                       		rts	
00003E46                            ; ===========================================================================
00003E46                            
00003E46                            loc_3E0E:
00003E46 0C40 1E00                  		cmpi.w	#$1E00,d0
00003E4A 6500                       		bcs.s	locret_3E1A
00003E4C 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003E52                            
00003E52                            locret_3E1A:
00003E52 4E75                       		rts	
00003E54                            ; ===========================================================================
00003E54                            
00003E54                            DynWater_SBZ3:				; XREF: DynWater_Index
00003E54 323C 0228                  		move.w	#$228,d1
00003E58 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003E5E 6500                       		bcs.s	loc_3E2C
00003E60 323C 04C8                  		move.w	#$4C8,d1
00003E64                            
00003E64                            loc_3E2C:
00003E64 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E68 4E75                       		rts
00003E6A                            
00003E6A                            ; ---------------------------------------------------------------------------
00003E6A                            ; Labyrinth Zone "wind tunnels"	subroutine
00003E6A                            ; ---------------------------------------------------------------------------
00003E6A                            
00003E6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E6A                            
00003E6A                            
00003E6A                            LZWindTunnels:				; XREF: LZWaterEffects
00003E6A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003E6E 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003E72 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003E78 7000                       		moveq	#0,d0
00003E7A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E7E E748                       		lsl.w	#3,d0
00003E80 D4C0                       		adda.w	d0,a2
00003E82 7200                       		moveq	#0,d1
00003E84 4A38 FE11                  		tst.b	($FFFFFE11).w
00003E88 6600                       		bne.s	loc_3E56
00003E8A 7201                       		moveq	#1,d1
00003E8C 514A                       		subq.w	#8,a2
00003E8E                            
00003E8E                            loc_3E56:
00003E8E 43F8 D000                  		lea	($FFFFD000).w,a1
00003E92                            
00003E92                            LZWind_Loop:
00003E92 3029 0008                  		move.w	8(a1),d0
00003E96 B052                       		cmp.w	(a2),d0
00003E98 6500 0000                  		bcs.w	loc_3EF4
00003E9C B06A 0004                  		cmp.w	4(a2),d0
00003EA0 6400 0000                  		bcc.w	loc_3EF4
00003EA4 3429 000C                  		move.w	$C(a1),d2
00003EA8 B46A 0002                  		cmp.w	2(a2),d2
00003EAC 6500                       		bcs.s	loc_3EF4
00003EAE B46A 0006                  		cmp.w	6(a2),d2
00003EB2 6400                       		bcc.s	loc_3EF4
00003EB4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003EB8 0200 003F                  		andi.b	#$3F,d0
00003EBC 6600                       		bne.s	loc_3E90
00003EBE 303C 00D0                  		move.w	#$D0,d0
00003EC2 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003EC8                            
00003EC8                            loc_3E90:
00003EC8 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003ECC 6600 0000                  		bne.w	locret_3F0A
00003ED0 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003ED6 6400                       		bcc.s	loc_3F06
00003ED8 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003EDE 0440 0080                  		subi.w	#$80,d0
00003EE2 B052                       		cmp.w	(a2),d0
00003EE4 6400                       		bcc.s	LZWind_Move
00003EE6 7002                       		moveq	#2,d0
00003EE8 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003EEE 6600                       		bne.s	loc_3EBA
00003EF0 4440                       		neg.w	d0
00003EF2                            
00003EF2                            loc_3EBA:
00003EF2 D169 000C                  		add.w	d0,$C(a1)
00003EF6                            
00003EF6                            LZWind_Move:
00003EF6 5869 0008                  		addq.w	#4,8(a1)
00003EFA 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003F00 337C 0000 0012             		move.w	#0,$12(a1)
00003F06 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003F0C 08E9 0001 0022             		bset	#1,$22(a1)
00003F12 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003F18 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003F1A 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003F1E                            
00003F1E                            LZWind_MoveDown:
00003F1E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00003F24 6700                       		beq.s	locret_3EF2	; if not, branch
00003F26 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00003F2A                            
00003F2A                            locret_3EF2:
00003F2A 4E75                       		rts	
00003F2C                            ; ===========================================================================
00003F2C                            
00003F2C                            loc_3EF4:				; XREF: LZWindTunnels
00003F2C 504A                       		addq.w	#8,a2
00003F2E 51C9 FF62                  		dbf	d1,LZWind_Loop
00003F32 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003F36 6700                       		beq.s	locret_3F0A
00003F38 137C 0000 001C             		move.b	#0,$1C(a1)
00003F3E                            
00003F3E                            loc_3F06:
00003F3E 4238 F7C7                  		clr.b	($FFFFF7C7).w
00003F42                            
00003F42                            locret_3F0A:
00003F42 4E75                       		rts	
00003F44                            ; End of function LZWindTunnels
00003F44                            
00003F44                            ; ===========================================================================
00003F44 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00003F4C 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00003F5E 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00003F6C                            					; XREF: LZWindTunnels
00003F6C                            		even
00003F6C                            
00003F6C                            ; ---------------------------------------------------------------------------
00003F6C                            ; Labyrinth Zone water slide subroutine
00003F6C                            ; ---------------------------------------------------------------------------
00003F6C                            
00003F6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F6C                            
00003F6C                            
00003F6C                            LZWaterSlides:				; XREF: LZWaterEffects
00003F6C 43F8 D000                  		lea	($FFFFD000).w,a1
00003F70 0829 0001 0022             		btst	#1,$22(a1)
00003F76 6600                       		bne.s	loc_3F6A
00003F78 3029 000C                  		move.w	$C(a1),d0
00003F7C E248                       		lsr.w	#1,d0
00003F7E 0240 0380                  		andi.w	#$380,d0
00003F82 1229 0008                  		move.b	8(a1),d1
00003F86 0241 007F                  		andi.w	#$7F,d1
00003F8A D041                       		add.w	d1,d0
00003F8C 45F8 A400                  		lea	($FFFFA400).w,a2
00003F90 1032 0000                  		move.b	(a2,d0.w),d0
00003F94 45FA 0000                  		lea	byte_3FCF(pc),a2
00003F98 7206                       		moveq	#6,d1
00003F9A                            
00003F9A                            loc_3F62:
00003F9A B022                       		cmp.b	-(a2),d0
00003F9C 57C9 FFFC                  		dbeq	d1,loc_3F62
00003FA0 6700                       		beq.s	LZSlide_Move
00003FA2                            
00003FA2                            loc_3F6A:
00003FA2 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00003FA6 6700                       		beq.s	locret_3F7A
00003FA8 337C 0005 003E             		move.w	#5,$3E(a1)
00003FAE 4238 F7CA                  		clr.b	($FFFFF7CA).w
00003FB2                            
00003FB2                            locret_3F7A:
00003FB2 4E75                       		rts	
00003FB4                            ; ===========================================================================
00003FB4                            
00003FB4                            LZSlide_Move:				; XREF: LZWaterSlides
00003FB4 0C41 0003                  		cmpi.w	#3,d1
00003FB8 6400                       		bcc.s	loc_3F84
00003FBA 4E71                       		nop	
00003FBC                            
00003FBC                            loc_3F84:
00003FBC 08A9 0000 0022             		bclr	#0,$22(a1)
00003FC2 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00003FC6 1340 0014                  		move.b	d0,$14(a1)
00003FCA 6A00                       		bpl.s	loc_3F9A
00003FCC 08E9 0000 0022             		bset	#0,$22(a1)
00003FD2                            
00003FD2                            loc_3F9A:
00003FD2 4229 0015                  		clr.b	$15(a1)
00003FD6 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00003FDC 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00003FE2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003FE6 0200 001F                  		andi.b	#$1F,d0
00003FEA 6600                       		bne.s	locret_3FBE
00003FEC 303C 00D0                  		move.w	#$D0,d0
00003FF0 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play water sound
00003FF6                            
00003FF6                            locret_3FBE:
00003FF6 4E75                       		rts	
00003FF8                            ; End of function LZWaterSlides
00003FF8                            
00003FF8                            ; ===========================================================================
00003FF8 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004007 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004008                            		even
00004008                            
00004008                            ; ---------------------------------------------------------------------------
00004008                            ; Subroutine to	move Sonic in demo mode
00004008                            ; ---------------------------------------------------------------------------
00004008                            
00004008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004008                            
00004008                            
00004008                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004008 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000400C 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000400E 4E75                       		rts	
00004010                            ; ===========================================================================
00004010                            
00004010                            ; This is an unused subroutine for recording a demo
00004010                            
00004010                            MoveDemo_Record:
00004010 43F9 0008 0000             		lea	($80000).l,a1
00004016 3038 F790                  		move.w	($FFFFF790).w,d0
0000401A D2C0                       		adda.w	d0,a1
0000401C 1038 F604                  		move.b	($FFFFF604).w,d0
00004020 B011                       		cmp.b	(a1),d0
00004022 6600                       		bne.s	loc_3FFA
00004024 5229 0001                  		addq.b	#1,1(a1)
00004028 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000402E 6700                       		beq.s	loc_3FFA
00004030 4E75                       		rts	
00004032                            ; ===========================================================================
00004032                            
00004032                            loc_3FFA:				; XREF: MoveDemo_Record
00004032 1340 0002                  		move.b	d0,2(a1)
00004036 137C 0000 0003             		move.b	#0,3(a1)
0000403C 5478 F790                  		addq.w	#2,($FFFFF790).w
00004040 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004046 4E75                       		rts	
00004048                            ; ===========================================================================
00004048                            
00004048                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004048 4A38 F604                  		tst.b	($FFFFF604).w
0000404C 6A00                       		bpl.s	loc_4022
0000404E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004052 6B00                       		bmi.s	loc_4022
00004054 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000405A                            
0000405A                            loc_4022:
0000405A 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004060 7000                       		moveq	#0,d0
00004062 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004066 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0000406C 6600                       		bne.s	loc_4038
0000406E 7006                       		moveq	#6,d0
00004070                            
00004070                            loc_4038:
00004070 E548                       		lsl.w	#2,d0
00004072 2271 0000                  		movea.l	(a1,d0.w),a1
00004076 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000407A 6A00                       		bpl.s	loc_4056
0000407C 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004082 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004086 5340                       		subq.w	#1,d0
00004088 E548                       		lsl.w	#2,d0
0000408A 2271 0000                  		movea.l	(a1,d0.w),a1
0000408E                            
0000408E                            loc_4056:
0000408E 3038 F790                  		move.w	($FFFFF790).w,d0
00004092 D2C0                       		adda.w	d0,a1
00004094 1011                       		move.b	(a1),d0
00004096 41F8 F604                  		lea	($FFFFF604).w,a0
0000409A 1200                       		move.b	d0,d1
0000409C 1410                       		move.b	(a0),d2
0000409E B500                       		eor.b	d2,d0
000040A0 10C1                       		move.b	d1,(a0)+
000040A2 C001                       		and.b	d1,d0
000040A4 10C0                       		move.b	d0,(a0)+
000040A6 5338 F792                  		subq.b	#1,($FFFFF792).w
000040AA 6400                       		bcc.s	locret_407E
000040AC 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000040B2 5478 F790                  		addq.w	#2,($FFFFF790).w
000040B6                            
000040B6                            locret_407E:
000040B6 4E75                       		rts	
000040B8                            ; End of function MoveSonicInDemo
000040B8                            
000040B8                            ; ===========================================================================
000040B8                            ; ---------------------------------------------------------------------------
000040B8                            ; Demo sequence	pointers
000040B8                            ; ---------------------------------------------------------------------------
000040B8                            Demo_Index:
000040B8                            	include "_inc\Demo pointers for intro.asm"
000040B8                            ; ---------------------------------------------------------------------------
000040B8                            ; Demo sequence	pointers
000040B8                            ; ---------------------------------------------------------------------------
000040B8 0000 0000                  	dc.l Demo_GHZ
000040BC 0000 0000                  	dc.l Demo_GHZ
000040C0 0000 0000                  	dc.l Demo_MZ
000040C4 0000 0000                  	dc.l Demo_MZ
000040C8 0000 0000                  	dc.l Demo_SYZ
000040CC 0000 0000                  	dc.l Demo_SYZ
000040D0 0000 0000                  	dc.l Demo_SS
000040D4 0000 0000                  	dc.l Demo_SS
000040D4 0000 0000                  	dc.l Demo_SS
000040D8                            
000040D8                            Demo_EndIndex:
000040D8                            	include "_inc\Demo pointers for ending.asm"
000040D8                            ; ---------------------------------------------------------------------------
000040D8                            ; Demo (ending) sequence pointers
000040D8                            ; ---------------------------------------------------------------------------
000040D8 0000 0000                  	dc.l Demo_EndGHZ1
000040DC 0000 0000                  	dc.l Demo_EndMZ
000040E0 0000 0000                  	dc.l Demo_EndSYZ
000040E4 0000 0000                  	dc.l Demo_EndLZ
000040E8 0000 0000                  	dc.l Demo_EndSLZ
000040EC 0000 0000                  	dc.l Demo_EndSBZ1
000040F0 0000 0000                  	dc.l Demo_EndSBZ2
000040F4 0000 0000                  	dc.l Demo_EndGHZ2
000040F4 0000 0000                  	dc.l Demo_EndGHZ2
000040F8                            
000040F8 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004108 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004118 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004128                            		even
00004128                            
00004128                            ; ---------------------------------------------------------------------------
00004128                            ; Collision index loading subroutine
00004128                            ; ---------------------------------------------------------------------------
00004128                            
00004128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004128                            
00004128                            
00004128                            ColIndexLoad:				; XREF: Level
00004128 7000                       		moveq	#0,d0
0000412A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000412E E548                       		lsl.w	#2,d0
00004130 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004136 4E75                       		rts	
00004138                            ; End of function ColIndexLoad
00004138                            
00004138                            ; ===========================================================================
00004138                            ; ---------------------------------------------------------------------------
00004138                            ; Collision index pointers
00004138                            ; ---------------------------------------------------------------------------
00004138                            ColPointers:
00004138                            	include "_inc\Collision index pointers.asm"
00004138                            ; ---------------------------------------------------------------------------
00004138                            ; Collision index pointers
00004138                            ; ---------------------------------------------------------------------------
00004138 0000 0000                  	dc.l Col_GHZ
0000413C 0000 0000                  	dc.l Col_LZ
00004140 0000 0000                  	dc.l Col_MZ
00004144 0000 0000                  	dc.l Col_SLZ
00004148 0000 0000                  	dc.l Col_SYZ
0000414C 0000 0000                  	dc.l Col_SBZ
0000414C 0000 0000                  	dc.l Col_SBZ
00004150                            
00004150                            ; ---------------------------------------------------------------------------
00004150                            ; Oscillating number subroutine
00004150                            ; ---------------------------------------------------------------------------
00004150                            
00004150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004150                            
00004150                            
00004150                            OscillateNumInit:			; XREF: Level
00004150 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004154 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000415A 7220                       		moveq	#$20,d1
0000415C                            
0000415C                            Osc_Loop:
0000415C 32DA                       		move.w	(a2)+,(a1)+
0000415E 51C9 FFFC                  		dbf	d1,Osc_Loop
00004162 4E75                       		rts	
00004164                            ; End of function OscillateNumInit
00004164                            
00004164                            ; ===========================================================================
00004164 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004168 0000 0080                  		dc.w 0,	$80
0000416C 0000 0080                  		dc.w 0,	$80
00004170 0000 0080                  		dc.w 0,	$80
00004174 0000 0080                  		dc.w 0,	$80
00004178 0000 0080                  		dc.w 0,	$80
0000417C 0000 0080                  		dc.w 0,	$80
00004180 0000 0080                  		dc.w 0,	$80
00004184 0000 0080                  		dc.w 0,	$80
00004188 0000 50F0                  		dc.w 0,	$50F0
0000418C 011E 2080                  		dc.w $11E, $2080
00004190 00B4 3080                  		dc.w $B4, $3080
00004194 010E 5080                  		dc.w $10E, $5080
00004198 01C2 7080                  		dc.w $1C2, $7080
0000419C 0276 0080                  		dc.w $276, $80
000041A0 0000 0080                  		dc.w 0,	$80
000041A4 0000                       		dc.w 0
000041A6                            		even
000041A6                            
000041A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041A6                            
000041A6                            
000041A6                            OscillateNumDo:				; XREF: Level
000041A6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000041AC 6400                       		bcc.s	locret_41C4
000041AE 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000041B2 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000041B8 3619                       		move.w	(a1)+,d3
000041BA 720F                       		moveq	#$F,d1
000041BC                            
000041BC                            loc_4184:
000041BC 341A                       		move.w	(a2)+,d2
000041BE 381A                       		move.w	(a2)+,d4
000041C0 0303                       		btst	d1,d3
000041C2 6600                       		bne.s	loc_41A4
000041C4 3029 0002                  		move.w	2(a1),d0
000041C8 D042                       		add.w	d2,d0
000041CA 3340 0002                  		move.w	d0,2(a1)
000041CE D151                       		add.w	d0,0(a1)
000041D0 B811                       		cmp.b	0(a1),d4
000041D2 6200                       		bhi.s	loc_41BA
000041D4 03C3                       		bset	d1,d3
000041D6 6000                       		bra.s	loc_41BA
000041D8                            ; ===========================================================================
000041D8                            
000041D8                            loc_41A4:				; XREF: OscillateNumDo
000041D8 3029 0002                  		move.w	2(a1),d0
000041DC 9042                       		sub.w	d2,d0
000041DE 3340 0002                  		move.w	d0,2(a1)
000041E2 D151                       		add.w	d0,0(a1)
000041E4 B811                       		cmp.b	0(a1),d4
000041E6 6300                       		bls.s	loc_41BA
000041E8 0383                       		bclr	d1,d3
000041EA                            
000041EA                            loc_41BA:
000041EA 5849                       		addq.w	#4,a1
000041EC 51C9 FFCE                  		dbf	d1,loc_4184
000041F0 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000041F4                            
000041F4                            locret_41C4:
000041F4 4E75                       		rts	
000041F6                            ; End of function OscillateNumDo
000041F6                            
000041F6                            ; ===========================================================================
000041F6 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000041FA 0002 0018                  		dc.w 2,	$18
000041FE 0002 0020                  		dc.w 2,	$20
00004202 0002 0030                  		dc.w 2,	$30
00004206 0004 0020                  		dc.w 4,	$20
0000420A 0008 0008                  		dc.w 8,	8
0000420E 0008 0040                  		dc.w 8,	$40
00004212 0004 0040                  		dc.w 4,	$40
00004216 0002 0050                  		dc.w 2,	$50
0000421A 0002 0050                  		dc.w 2,	$50
0000421E 0002 0020                  		dc.w 2,	$20
00004222 0003 0030                  		dc.w 3,	$30
00004226 0005 0050                  		dc.w 5,	$50
0000422A 0007 0070                  		dc.w 7,	$70
0000422E 0002 0010                  		dc.w 2,	$10
00004232 0002 0010                  		dc.w 2,	$10
00004236                            		even
00004236                            
00004236                            ; ---------------------------------------------------------------------------
00004236                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004236                            ; ---------------------------------------------------------------------------
00004236                            
00004236                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004236                            
00004236                            
00004236                            ChangeRingFrame:			; XREF: Level
00004236 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000423A 6A00                       		bpl.s	loc_421C
0000423C 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004242 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004246 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0000424C                            
0000424C                            loc_421C:
0000424C 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004250 6A00                       		bpl.s	loc_4232
00004252 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004258 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0000425C 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004262                            
00004262                            loc_4232:
00004262 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004266 6A00                       		bpl.s	loc_4250
00004268 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000426E 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004272 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004278 6500                       		bcs.s	loc_4250
0000427A 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004280                            
00004280                            loc_4250:
00004280 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004284 6700                       		beq.s	locret_4272
00004286 7000                       		moveq	#0,d0
00004288 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
0000428C D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004290 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004294 EF58                       		rol.w	#7,d0
00004296 0240 0003                  		andi.w	#3,d0
0000429A 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
0000429E 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000042A2                            
000042A2                            locret_4272:
000042A2 4E75                       		rts	
000042A4                            ; End of function ChangeRingFrame
000042A4                            
000042A4                            ; ---------------------------------------------------------------------------
000042A4                            ; End-of-act signpost pattern loading subroutine
000042A4                            ; ---------------------------------------------------------------------------
000042A4                            
000042A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042A4                            
000042A4                            
000042A4                            SignpostArtLoad:			; XREF: Level
000042A4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000042A8 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000042AC 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000042B2 6700                       		beq.s	Signpost_Exit	; if yes, branch
000042B4 3038 F700                  		move.w	($FFFFF700).w,d0
000042B8 3238 F72A                  		move.w	($FFFFF72A).w,d1
000042BC 0441 0100                  		subi.w	#$100,d1
000042C0 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000042C2 6D00                       		blt.s	Signpost_Exit	; if not, branch
000042C4 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000042C8 6700                       		beq.s	Signpost_Exit
000042CA B278 F728                  		cmp.w	($FFFFF728).w,d1
000042CE 6700                       		beq.s	Signpost_Exit
000042D0 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000042D4 7012                       		moveq	#$12,d0
000042D6 6000 D2DA                  		bra.w	LoadPLC2	; load signpost	patterns
000042DA                            ; ===========================================================================
000042DA                            
000042DA                            Signpost_Exit:
000042DA 4E75                       		rts	
000042DC                            ; End of function SignpostArtLoad
000042DC                            
000042DC                            ; ===========================================================================
000042DC                            Demo_GHZ:	incbin	demodata\i_ghz.bin
0000435C                            Demo_MZ:	incbin	demodata\i_mz.bin
0000448C                            Demo_SYZ:	incbin	demodata\i_syz.bin
0000450C                            Demo_SS:	incbin	demodata\i_ss.bin
0000460C                            ; ===========================================================================
0000460C                            
0000460C                            ; ---------------------------------------------------------------------------
0000460C                            ; Special Stage
0000460C                            ; ---------------------------------------------------------------------------
0000460C                            
0000460C                            SpecialStage:				; XREF: GameModeArray
0000460C 303C 00CA                  		move.w	#$CA,d0
00004610 6100 CD8A                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004614 6100 D966                  		bsr.w	Pal_MakeFlash
00004618 46FC 2700                  		move	#$2700,sr
0000461C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004622 3CBC 8B03                  		move.w	#$8B03,(a6)
00004626 3CBC 8004                  		move.w	#$8004,(a6)
0000462A 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004630 3CBC 9011                  		move.w	#$9011,(a6)
00004634 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004638 0200 00BF                  		andi.b	#$BF,d0
0000463C 33C0 00C0 0004             		move.w	d0,($C00004).l
00004642 6100 CC80                  		bsr.w	ClearScreen
00004646 46FC 2300                  		move	#$2300,sr
0000464A 4BF9 00C0 0004             		lea	($C00004).l,a5
00004650 3ABC 8F01                  		move.w	#$8F01,(a5)
00004654 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000465A 3ABC 9780                  		move.w	#$9780,(a5)
0000465E 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004664 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000466C                            
0000466C                            loc_463C:
0000466C 3215                       		move.w	(a5),d1
0000466E 0801 0001                  		btst	#1,d1
00004672 66F8                       		bne.s	loc_463C
00004674 3ABC 8F02                  		move.w	#$8F02,(a5)
00004678 6100 0000                  		bsr.w	SS_BGLoad
0000467C 7014                       		moveq	#$14,d0
0000467E 6100 D06C                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004682 43F8 D000                  		lea	($FFFFD000).w,a1
00004686 7000                       		moveq	#0,d0
00004688 323C 07FF                  		move.w	#$7FF,d1
0000468C                            
0000468C                            SS_ClrObjRam:
0000468C 22C0                       		move.l	d0,(a1)+
0000468E 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004692                            
00004692 43F8 F700                  		lea	($FFFFF700).w,a1
00004696 7000                       		moveq	#0,d0
00004698 323C 003F                  		move.w	#$3F,d1
0000469C                            
0000469C                            SS_ClrRam:
0000469C 22C0                       		move.l	d0,(a1)+
0000469E 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000046A2                            
000046A2 43F8 FE60                  		lea	($FFFFFE60).w,a1
000046A6 7000                       		moveq	#0,d0
000046A8 323C 0027                  		move.w	#$27,d1
000046AC                            
000046AC                            SS_ClrRam2:
000046AC 22C0                       		move.l	d0,(a1)+
000046AE 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000046B2                            
000046B2 43F8 AA00                  		lea	($FFFFAA00).w,a1
000046B6 7000                       		moveq	#0,d0
000046B8 323C 007F                  		move.w	#$7F,d1
000046BC                            
000046BC                            SS_ClrNemRam:
000046BC 22C0                       		move.l	d0,(a1)+
000046BE 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000046C2                            
000046C2 4238 F64E                  		clr.b	($FFFFF64E).w
000046C6 4278 FE02                  		clr.w	($FFFFFE02).w
000046CA 700A                       		moveq	#$A,d0
000046CC 6100 DA2E                  		bsr.w	PalLoad1	; load special stage pallet
000046D0 4EB9 0000 0000             		jsr	SS_Load
000046D6 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000046DE 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000046E6 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000046EC 6100 0000                  		bsr.w	PalCycle_SS
000046F0 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000046F4 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000046FA 303C 0089                  		move.w	#$89,d0
000046FE 6100 CC96                  		bsr.w	PlaySound	; play special stage BG	music
00004702 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004708 43F9 0000 40B8             		lea	(Demo_Index).l,a1
0000470E 7006                       		moveq	#6,d0
00004710 E548                       		lsl.w	#2,d0
00004712 2271 0000                  		movea.l	(a1,d0.w),a1
00004716 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
0000471C 5338 F792                  		subq.b	#1,($FFFFF792).w
00004720 4278 FE20                  		clr.w	($FFFFFE20).w
00004724 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004728 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
0000472E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004734 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004738 6700                       		beq.s	SS_NoDebug	; if not, branch
0000473A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004740 6700                       		beq.s	SS_NoDebug	; if not, branch
00004742 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004748                            
00004748                            SS_NoDebug:
00004748 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000474C 0000 0040                  		ori.b	#$40,d0
00004750 33C0 00C0 0004             		move.w	d0,($C00004).l
00004756 6100 D778                  		bsr.w	Pal_MakeWhite
0000475A                            
0000475A                            ; ---------------------------------------------------------------------------
0000475A                            ; Main Special Stage loop
0000475A                            ; ---------------------------------------------------------------------------
0000475A                            
0000475A                            SS_MainLoop:
0000475A 6100 CC4C                  		bsr.w	PauseGame
0000475E 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004764 6100 E242                  		bsr.w	DelayProgram
00004768 6100 F89E                  		bsr.w	MoveSonicInDemo
0000476C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004772 4EB9 0000 0000             		jsr	ObjectsLoad
00004778 4EB9 0000 0000             		jsr	BuildSprites
0000477E 4EB9 0000 0000             		jsr	SS_ShowLayout
00004784 6100 0000                  		bsr.w	SS_BGAnimate
00004788 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000478C 6700                       		beq.s	SS_ChkEnd	; if not, branch
0000478E 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004792 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004796                            
00004796                            SS_ChkEnd:
00004796 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
0000479C 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000047A0                            
000047A0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000047A4 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000047A8 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000047AE 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
000047B4 6500                       		bcs.s	SS_End		; if not, branch
000047B6 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000047BA                            
000047BA                            SS_End:
000047BA 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000047C0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000047C6 4278 F794                  		clr.w	($FFFFF794).w
000047CA                            
000047CA                            SS_EndLoop:
000047CA 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000047D0 6100 E1D6                  		bsr.w	DelayProgram
000047D4 6100 F832                  		bsr.w	MoveSonicInDemo
000047D8 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000047DE 4EB9 0000 0000             		jsr	ObjectsLoad
000047E4 4EB9 0000 0000             		jsr	BuildSprites
000047EA 4EB9 0000 0000             		jsr	SS_ShowLayout
000047F0 6100 0000                  		bsr.w	SS_BGAnimate
000047F4 5378 F794                  		subq.w	#1,($FFFFF794).w
000047F8 6A00                       		bpl.s	loc_47D4
000047FA 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004800 6100 D79A                  		bsr.w	Pal_ToWhite
00004804                            
00004804                            loc_47D4:
00004804 4A78 F614                  		tst.w	($FFFFF614).w
00004808 66C0                       		bne.s	SS_EndLoop
0000480A                            
0000480A 46FC 2700                  		move	#$2700,sr
0000480E 4DF9 00C0 0004             		lea	($C00004).l,a6
00004814 3CBC 8230                  		move.w	#$8230,(a6)
00004818 3CBC 8407                  		move.w	#$8407,(a6)
0000481C 3CBC 9001                  		move.w	#$9001,(a6)
00004820 6100 CAA2                  		bsr.w	ClearScreen
00004824 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000482E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004834 6100 CC0A                  		bsr.w	NemDec
00004838 4EB9 0000 0000             		jsr	Hud_Base
0000483E 46FC 2300                  		move	#$2300,sr
00004842 7011                       		moveq	#$11,d0
00004844 6100 D8D2                  		bsr.w	PalLoad2	; load results screen pallet
00004848 7000                       		moveq	#0,d0
0000484A 6100 CD66                  		bsr.w	LoadPLC2
0000484E 701B                       		moveq	#$1B,d0
00004850 6100 CD2E                  		bsr.w	LoadPLC		; load results screen patterns
00004854 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000485A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004860 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004864 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004868 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000486C 303C 008E                  		move.w	#$8E,d0
00004870 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004876 43F8 D000                  		lea	($FFFFD000).w,a1
0000487A 7000                       		moveq	#0,d0
0000487C 323C 07FF                  		move.w	#$7FF,d1
00004880                            
00004880                            SS_EndClrObjRam:
00004880 22C0                       		move.l	d0,(a1)+
00004882 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004886                            
00004886 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
0000488C                            
0000488C                            SS_NormalExit:
0000488C 6100 CB1A                  		bsr.w	PauseGame
00004890 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004896 6100 E110                  		bsr.w	DelayProgram
0000489A 4EB9 0000 0000             		jsr	ObjectsLoad
000048A0 4EB9 0000 0000             		jsr	BuildSprites
000048A6 6100 CD44                  		bsr.w	RunPLC_RAM
000048AA 4A78 FE02                  		tst.w	($FFFFFE02).w
000048AE 67DC                       		beq.s	SS_NormalExit
000048B0 4AB8 F680                  		tst.l	($FFFFF680).w
000048B4 66D6                       		bne.s	SS_NormalExit
000048B6 303C 00CA                  		move.w	#$CA,d0
000048BA 6100 CAE0                  		bsr.w	PlaySound_Special ; play special stage exit sound
000048BE 6100 D6BC                  		bsr.w	Pal_MakeFlash
000048C2 4E75                       		rts	
000048C4                            ; ===========================================================================
000048C4                            
000048C4                            SS_ToSegaScreen:
000048C4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
000048CA 4E75                       		rts
000048CC                            
000048CC                            ; ---------------------------------------------------------------------------
000048CC                            ; Special stage	background loading subroutine
000048CC                            ; ---------------------------------------------------------------------------
000048CC                            
000048CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000048CC                            
000048CC                            
000048CC                            SS_BGLoad:				; XREF: SpecialStage
000048CC 43F9 00FF 0000             		lea	($FF0000).l,a1
000048D2 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000048D8 303C 4051                  		move.w	#$4051,d0
000048DC 6100 CE40                  		bsr.w	EniDec
000048E0 263C 5000 0001             		move.l	#$50000001,d3
000048E6 45F9 00FF 0080             		lea	($FF0080).l,a2
000048EC 7E06                       		moveq	#6,d7
000048EE                            
000048EE                            loc_48BE:
000048EE 2003                       		move.l	d3,d0
000048F0 7C03                       		moveq	#3,d6
000048F2 7800                       		moveq	#0,d4
000048F4 0C47 0003                  		cmpi.w	#3,d7
000048F8 6400                       		bcc.s	loc_48CC
000048FA 7801                       		moveq	#1,d4
000048FC                            
000048FC                            loc_48CC:
000048FC 7A07                       		moveq	#7,d5
000048FE                            
000048FE                            loc_48CE:
000048FE 224A                       		movea.l	a2,a1
00004900 0A04 0001                  		eori.b	#1,d4
00004904 6600                       		bne.s	loc_48E2
00004906 0C47 0006                  		cmpi.w	#6,d7
0000490A 6600                       		bne.s	loc_48F2
0000490C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004912                            
00004912                            loc_48E2:
00004912 48E7 F800                  		movem.l	d0-d4,-(sp)
00004916 7207                       		moveq	#7,d1
00004918 7407                       		moveq	#7,d2
0000491A 6100 CB04                  		bsr.w	ShowVDPGraphics
0000491E 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004922                            
00004922                            loc_48F2:
00004922 0680 0010 0000             		addi.l	#$100000,d0
00004928 51CD FFD4                  		dbf	d5,loc_48CE
0000492C 0680 0380 0000             		addi.l	#$3800000,d0
00004932 0A04 0001                  		eori.b	#1,d4
00004936 51CE FFC4                  		dbf	d6,loc_48CC
0000493A 0683 1000 0000             		addi.l	#$10000000,d3
00004940 6A00                       		bpl.s	loc_491C
00004942 4843                       		swap	d3
00004944 0683 0000 C000             		addi.l	#$C000,d3
0000494A 4843                       		swap	d3
0000494C                            
0000494C                            loc_491C:
0000494C D4FC 0080                  		adda.w	#$80,a2
00004950 51CF FF9C                  		dbf	d7,loc_48BE
00004954 43F9 00FF 0000             		lea	($FF0000).l,a1
0000495A 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004960 303C 4000                  		move.w	#$4000,d0
00004964 6100 CDB8                  		bsr.w	EniDec
00004968 43F9 00FF 0000             		lea	($FF0000).l,a1
0000496E 203C 4000 0003             		move.l	#$40000003,d0
00004974 723F                       		moveq	#$3F,d1
00004976 741F                       		moveq	#$1F,d2
00004978 6100 CAA6                  		bsr.w	ShowVDPGraphics
0000497C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004982 203C 5000 0003             		move.l	#$50000003,d0
00004988 723F                       		moveq	#$3F,d1
0000498A 743F                       		moveq	#$3F,d2
0000498C 6100 CA92                  		bsr.w	ShowVDPGraphics
00004990 4E75                       		rts	
00004992                            ; End of function SS_BGLoad
00004992                            
00004992                            ; ---------------------------------------------------------------------------
00004992                            ; Pallet cycling routine - special stage
00004992                            ; ---------------------------------------------------------------------------
00004992                            
00004992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004992                            
00004992                            
00004992                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004992 4A78 F63A                  		tst.w	($FFFFF63A).w
00004996 6600                       		bne.s	locret_49E6
00004998 5378 F79C                  		subq.w	#1,($FFFFF79C).w
0000499C 6A00                       		bpl.s	locret_49E6
0000499E 4DF9 00C0 0004             		lea	($C00004).l,a6
000049A4 3038 F79A                  		move.w	($FFFFF79A).w,d0
000049A8 5278 F79A                  		addq.w	#1,($FFFFF79A).w
000049AC 0240 001F                  		andi.w	#$1F,d0
000049B0 E548                       		lsl.w	#2,d0
000049B2 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000049B8 D0C0                       		adda.w	d0,a0
000049BA 1018                       		move.b	(a0)+,d0
000049BC 6A00                       		bpl.s	loc_4992
000049BE 303C 01FF                  		move.w	#$1FF,d0
000049C2                            
000049C2                            loc_4992:
000049C2 31C0 F79C                  		move.w	d0,($FFFFF79C).w
000049C6 7000                       		moveq	#0,d0
000049C8 1018                       		move.b	(a0)+,d0
000049CA 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000049CE 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000049D4 43F1 0000                  		lea	(a1,d0.w),a1
000049D8 303C 8200                  		move.w	#-$7E00,d0
000049DC 1019                       		move.b	(a1)+,d0
000049DE 3C80                       		move.w	d0,(a6)
000049E0 11D1 F616                  		move.b	(a1),($FFFFF616).w
000049E4 303C 8400                  		move.w	#-$7C00,d0
000049E8 1018                       		move.b	(a0)+,d0
000049EA 3C80                       		move.w	d0,(a6)
000049EC 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000049F6 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000049FE 7000                       		moveq	#0,d0
00004A00 1018                       		move.b	(a0)+,d0
00004A02 6B00                       		bmi.s	loc_49E8
00004A04 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004A0A D2C0                       		adda.w	d0,a1
00004A0C 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004A10 24D9                       		move.l	(a1)+,(a2)+
00004A12 24D9                       		move.l	(a1)+,(a2)+
00004A14 24D9                       		move.l	(a1)+,(a2)+
00004A16                            
00004A16                            locret_49E6:
00004A16 4E75                       		rts	
00004A18                            ; ===========================================================================
00004A18                            
00004A18                            loc_49E8:				; XREF: PalCycle_SS
00004A18 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004A1C 0C40 008A                  		cmpi.w	#$8A,d0
00004A20 6500                       		bcs.s	loc_49F4
00004A22 5241                       		addq.w	#1,d1
00004A24                            
00004A24                            loc_49F4:
00004A24 C2FC 002A                  		mulu.w	#$2A,d1
00004A28 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004A2E D2C1                       		adda.w	d1,a1
00004A30 0240 007F                  		andi.w	#$7F,d0
00004A34 0880 0000                  		bclr	#0,d0
00004A38 6700                       		beq.s	loc_4A18
00004A3A 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004A3E 24D1                       		move.l	(a1),(a2)+
00004A40 24E9 0004                  		move.l	4(a1),(a2)+
00004A44 24E9 0008                  		move.l	8(a1),(a2)+
00004A48                            
00004A48                            loc_4A18:
00004A48 D2FC 000C                  		adda.w	#$C,a1
00004A4C 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004A50 0C40 000A                  		cmpi.w	#$A,d0
00004A54 6500                       		bcs.s	loc_4A2E
00004A56 0440 000A                  		subi.w	#$A,d0
00004A5A 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004A5E                            
00004A5E                            loc_4A2E:
00004A5E 3200                       		move.w	d0,d1
00004A60 D040                       		add.w	d0,d0
00004A62 D041                       		add.w	d1,d0
00004A64 D2C0                       		adda.w	d0,a1
00004A66 24D9                       		move.l	(a1)+,(a2)+
00004A68 34D9                       		move.w	(a1)+,(a2)+
00004A6A 4E75                       		rts	
00004A6C                            ; End of function PalCycle_SS
00004A6C                            
00004A6C                            ; ===========================================================================
00004A6C 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004A7C                            					; XREF: PalCycle_SS
00004A7C 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004A8C 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004A9C FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004AAC 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004ABC 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004ACC 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004ADC FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004AEC                            		even
00004AEC 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004AFA                            					; XREF: PalCycle_SS
00004AFA                            		even
00004AFA                            
00004AFA                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004B42                            		even
00004B42                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004C14                            		even
00004C14                            
00004C14                            ; ---------------------------------------------------------------------------
00004C14                            ; Subroutine to	make the special stage background animated
00004C14                            ; ---------------------------------------------------------------------------
00004C14                            
00004C14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C14                            
00004C14                            
00004C14                            SS_BGAnimate:				; XREF: SpecialStage
00004C14 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004C18 6600                       		bne.s	loc_4BF6
00004C1A 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004C20 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004C26                            
00004C26                            loc_4BF6:
00004C26 0C40 0008                  		cmpi.w	#8,d0
00004C2A 6400                       		bcc.s	loc_4C4E
00004C2C 0C40 0006                  		cmpi.w	#6,d0
00004C30 6600                       		bne.s	loc_4C10
00004C32 5278 F718                  		addq.w	#1,($FFFFF718).w
00004C36 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004C3A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004C40                            
00004C40                            loc_4C10:
00004C40 7000                       		moveq	#0,d0
00004C42 3038 F708                  		move.w	($FFFFF708).w,d0
00004C46 4440                       		neg.w	d0
00004C48 4840                       		swap	d0
00004C4A 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004C50 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C54 7609                       		moveq	#9,d3
00004C56                            
00004C56                            loc_4C26:
00004C56 302B 0002                  		move.w	2(a3),d0
00004C5A 6100 DD7E                  		bsr.w	CalcSine
00004C5E 7400                       		moveq	#0,d2
00004C60 1419                       		move.b	(a1)+,d2
00004C62 C1C2                       		muls.w	d2,d0
00004C64 E080                       		asr.l	#8,d0
00004C66 36C0                       		move.w	d0,(a3)+
00004C68 1419                       		move.b	(a1)+,d2
00004C6A 4882                       		ext.w	d2
00004C6C D55B                       		add.w	d2,(a3)+
00004C6E 51CB FFE6                  		dbf	d3,loc_4C26
00004C72 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C76 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004C7C 6000                       		bra.s	loc_4C7E
00004C7E                            ; ===========================================================================
00004C7E                            
00004C7E                            loc_4C4E:				; XREF: SS_BGAnimate
00004C7E 0C40 000C                  		cmpi.w	#$C,d0
00004C82 6600                       		bne.s	loc_4C74
00004C84 5378 F718                  		subq.w	#1,($FFFFF718).w
00004C88 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C8C 243C 0001 8000             		move.l	#$18000,d2
00004C92 7206                       		moveq	#6,d1
00004C94                            
00004C94                            loc_4C64:
00004C94 2013                       		move.l	(a3),d0
00004C96 9082                       		sub.l	d2,d0
00004C98 26C0                       		move.l	d0,(a3)+
00004C9A 0482 0000 2000             		subi.l	#$2000,d2
00004CA0 51C9 FFF2                  		dbf	d1,loc_4C64
00004CA4                            
00004CA4                            loc_4C74:
00004CA4 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004CA8 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004CAE                            
00004CAE                            loc_4C7E:
00004CAE 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004CB2 3038 F718                  		move.w	($FFFFF718).w,d0
00004CB6 4440                       		neg.w	d0
00004CB8 4840                       		swap	d0
00004CBA 7600                       		moveq	#0,d3
00004CBC 161A                       		move.b	(a2)+,d3
00004CBE 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004CC2 4442                       		neg.w	d2
00004CC4 0242 00FF                  		andi.w	#$FF,d2
00004CC8 E54A                       		lsl.w	#2,d2
00004CCA                            
00004CCA                            loc_4C9A:
00004CCA 301B                       		move.w	(a3)+,d0
00004CCC 544B                       		addq.w	#2,a3
00004CCE 7200                       		moveq	#0,d1
00004CD0 121A                       		move.b	(a2)+,d1
00004CD2 5341                       		subq.w	#1,d1
00004CD4                            
00004CD4                            loc_4CA4:
00004CD4 2380 2000                  		move.l	d0,(a1,d2.w)
00004CD8 5842                       		addq.w	#4,d2
00004CDA 0242 03FC                  		andi.w	#$3FC,d2
00004CDE 51C9 FFF4                  		dbf	d1,loc_4CA4
00004CE2 51CB FFE6                  		dbf	d3,loc_4C9A
00004CE6 4E75                       		rts	
00004CE8                            ; End of function SS_BGAnimate
00004CE8                            
00004CE8                            ; ===========================================================================
00004CE8 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004CF4                            		even
00004CF4 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004CFC                            		even
00004CFC 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004D10                            		even
00004D10                            					; XREF: SS_BGAnimate
00004D10                            ; ===========================================================================
00004D10                            
00004D10                            ; ---------------------------------------------------------------------------
00004D10                            ; Continue screen
00004D10                            ; ---------------------------------------------------------------------------
00004D10                            
00004D10                            ContinueScreen:				; XREF: GameModeArray
00004D10 6100 D140                  		bsr.w	Pal_FadeFrom
00004D14 46FC 2700                  		move	#$2700,sr
00004D18 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004D1C 0200 00BF                  		andi.b	#$BF,d0
00004D20 33C0 00C0 0004             		move.w	d0,($C00004).l
00004D26 4DF9 00C0 0004             		lea	($C00004).l,a6
00004D2C 3CBC 8004                  		move.w	#$8004,(a6)
00004D30 3CBC 8700                  		move.w	#$8700,(a6)
00004D34 6100 C58E                  		bsr.w	ClearScreen
00004D38 43F8 D000                  		lea	($FFFFD000).w,a1
00004D3C 7000                       		moveq	#0,d0
00004D3E 323C 07FF                  		move.w	#$7FF,d1
00004D42                            
00004D42                            Cont_ClrObjRam:
00004D42 22C0                       		move.l	d0,(a1)+
00004D44 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004D48                            
00004D48 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D52 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D58 6100 C6E6                  		bsr.w	NemDec
00004D5C 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004D66 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004D6C 6100 C6D2                  		bsr.w	NemDec
00004D70 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004D7A 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004D80 6100 C6BE                  		bsr.w	NemDec
00004D84 720A                       		moveq	#10,d1
00004D86 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004D8C 7012                       		moveq	#$12,d0
00004D8E 6100 D36C                  		bsr.w	PalLoad1	; load continue	screen pallet
00004D92 103C 0090                  		move.b	#$90,d0
00004D96 6100 C5FE                  		bsr.w	PlaySound	; play continue	music
00004D9A 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004DA0 42B8 F700                  		clr.l	($FFFFF700).w
00004DA4 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004DAC 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004DB2 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004DB8 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004DBE 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004DC4 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004DCA 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004DD0 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004DD6 4EB9 0000 0000             		jsr	ObjectsLoad
00004DDC 4EB9 0000 0000             		jsr	BuildSprites
00004DE2 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004DE6 0000 0040                  		ori.b	#$40,d0
00004DEA 33C0 00C0 0004             		move.w	d0,($C00004).l
00004DF0 6100 CFBA                  		bsr.w	Pal_FadeTo
00004DF4                            
00004DF4                            ; ---------------------------------------------------------------------------
00004DF4                            ; Continue screen main loop
00004DF4                            ; ---------------------------------------------------------------------------
00004DF4                            
00004DF4                            Cont_MainLoop:
00004DF4 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DFA 6100 DBAC                  		bsr.w	DelayProgram
00004DFE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004E04 6400                       		bcc.s	loc_4DF2
00004E06 46FC 2700                  		move	#$2700,sr
00004E0A 3238 F614                  		move.w	($FFFFF614).w,d1
00004E0E 82FC 003C                  		divu.w	#$3C,d1
00004E12 0281 0000 000F             		andi.l	#$F,d1
00004E18 4EB9 0000 0000             		jsr	ContScrCounter
00004E1E 46FC 2300                  		move	#$2300,sr
00004E22                            
00004E22                            loc_4DF2:
00004E22 4EB9 0000 0000             		jsr	ObjectsLoad
00004E28 4EB9 0000 0000             		jsr	BuildSprites
00004E2E 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004E34 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004E36 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004E3C 64B6                       		bcc.s	Cont_MainLoop
00004E3E 4A78 F614                  		tst.w	($FFFFF614).w
00004E42 6600 FFB0                  		bne.w	Cont_MainLoop
00004E46 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004E4C 4E75                       		rts	
00004E4E                            ; ===========================================================================
00004E4E                            
00004E4E                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00004E4E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004E54 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004E5A 7000                       		moveq	#0,d0
00004E5C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004E60 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004E64 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004E68 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00004E6C 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00004E70 4E75                       		rts	
00004E72                            ; ===========================================================================
00004E72                            
00004E72                            ; ---------------------------------------------------------------------------
00004E72                            ; Object 80 - Continue screen elements
00004E72                            ; ---------------------------------------------------------------------------
00004E72                            
00004E72                            Obj80:					; XREF: Obj_Index
00004E72 7000                       		moveq	#0,d0
00004E74 1028 0024                  		move.b	$24(a0),d0
00004E78 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00004E7C 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00004E80                            ; ===========================================================================
00004E80 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00004E82 0000                       		dc.w Obj80_Display-Obj80_Index
00004E84 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00004E86 0000                       		dc.w Obj80_ChkType-Obj80_Index
00004E88                            ; ===========================================================================
00004E88                            
00004E88                            Obj80_Main:				; XREF: Obj80_Index
00004E88 5428 0024                  		addq.b	#2,$24(a0)
00004E8C 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004E94 317C 8500 0002             		move.w	#$8500,2(a0)
00004E9A 117C 0000 0001             		move.b	#0,1(a0)
00004EA0 117C 003C 0019             		move.b	#$3C,$19(a0)
00004EA6 317C 0120 0008             		move.w	#$120,8(a0)
00004EAC 317C 00C0 000A             		move.w	#$C0,$A(a0)
00004EB2 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00004EB8                            
00004EB8                            Obj80_Display:				; XREF: Obj80_Index
00004EB8 4EF9 0000 0000             		jmp	DisplaySprite
00004EBE                            ; ===========================================================================
00004EBE                            Obj80_MiniSonicPos:
00004EBE 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00004ED0 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00004EDC                            ; ===========================================================================
00004EDC                            
00004EDC                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00004EDC 2248                       		movea.l	a0,a1
00004EDE 45F9 0000 4EBE             		lea	(Obj80_MiniSonicPos).l,a2
00004EE4 7200                       		moveq	#0,d1
00004EE6 1238 FE18                  		move.b	($FFFFFE18).w,d1
00004EEA 5501                       		subq.b	#2,d1
00004EEC 6400                       		bcc.s	loc_4EC4
00004EEE 4EF9 0000 0000             		jmp	DeleteObject
00004EF4                            ; ===========================================================================
00004EF4                            
00004EF4                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00004EF4 7601                       		moveq	#1,d3
00004EF6 0C01 000E                  		cmpi.b	#$E,d1
00004EFA 6500                       		bcs.s	loc_4ED0
00004EFC 7600                       		moveq	#0,d3
00004EFE 720E                       		moveq	#$E,d1
00004F00                            
00004F00                            loc_4ED0:
00004F00 1401                       		move.b	d1,d2
00004F02 0202 0001                  		andi.b	#1,d2
00004F06                            
00004F06                            Obj80_MiniSonLoop:
00004F06 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00004F0A 335A 0008                  		move.w	(a2)+,8(a1)
00004F0E 4A02                       		tst.b	d2
00004F10 6700                       		beq.s	loc_4EEA
00004F12 0469 000A 0008             		subi.w	#$A,8(a1)
00004F18                            
00004F18                            loc_4EEA:
00004F18 337C 00D0 000A             		move.w	#$D0,$A(a1)
00004F1E 137C 0006 001A             		move.b	#6,$1A(a1)
00004F24 137C 0006 0024             		move.b	#6,$24(a1)
00004F2A 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00004F32 337C 8551 0002             		move.w	#$8551,2(a1)
00004F38 137C 0000 0001             		move.b	#0,1(a1)
00004F3E 43E9 0040                  		lea	$40(a1),a1
00004F42 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00004F46 43E9 FFC0                  		lea	-$40(a1),a1
00004F4A 1343 0028                  		move.b	d3,$28(a1)
00004F4E                            
00004F4E                            Obj80_ChkType:				; XREF: Obj80_Index
00004F4E 4A28 0028                  		tst.b	$28(a0)
00004F52 6700                       		beq.s	loc_4F40
00004F54 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004F5A 6500                       		bcs.s	loc_4F40
00004F5C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F60 0200 0001                  		andi.b	#1,d0
00004F64 6600                       		bne.s	loc_4F40
00004F66 4A78 D010                  		tst.w	($FFFFD010).w
00004F6A 6600                       		bne.s	Obj80_Delete
00004F6C 4E75                       		rts	
00004F6E                            ; ===========================================================================
00004F6E                            
00004F6E                            loc_4F40:				; XREF: Obj80_ChkType
00004F6E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F72 0200 000F                  		andi.b	#$F,d0
00004F76 6600                       		bne.s	Obj80_Display2
00004F78 0868 0000 001A             		bchg	#0,$1A(a0)
00004F7E                            
00004F7E                            Obj80_Display2:
00004F7E 4EF9 0000 0000             		jmp	DisplaySprite
00004F84                            ; ===========================================================================
00004F84                            
00004F84                            Obj80_Delete:				; XREF: Obj80_ChkType
00004F84 4EF9 0000 0000             		jmp	DeleteObject
00004F8A                            ; ===========================================================================
00004F8A                            
00004F8A                            ; ---------------------------------------------------------------------------
00004F8A                            ; Object 81 - Sonic on the continue screen
00004F8A                            ; ---------------------------------------------------------------------------
00004F8A                            
00004F8A                            Obj81:					; XREF: Obj_Index
00004F8A 7000                       		moveq	#0,d0
00004F8C 1028 0024                  		move.b	$24(a0),d0
00004F90 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00004F94 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00004F98 4EF9 0000 0000             		jmp	DisplaySprite
00004F9E                            ; ===========================================================================
00004F9E 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00004FA0 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00004FA2 0000                       		dc.w Obj81_Animate-Obj81_Index
00004FA4 0000                       		dc.w Obj81_Run-Obj81_Index
00004FA6                            ; ===========================================================================
00004FA6                            
00004FA6                            Obj81_Main:				; XREF: Obj81_Index
00004FA6 5428 0024                  		addq.b	#2,$24(a0)
00004FAA 317C 00A0 0008             		move.w	#$A0,8(a0)
00004FB0 317C 00C0 000C             		move.w	#$C0,$C(a0)
00004FB6 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004FBE 317C 0780 0002             		move.w	#$780,2(a0)
00004FC4 117C 0004 0001             		move.b	#4,1(a0)
00004FCA 117C 0002 0018             		move.b	#2,$18(a0)
00004FD0 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00004FD6 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00004FDC                            
00004FDC                            Obj81_ChkLand:				; XREF: Obj81_Index
00004FDC 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00004FE2 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00004FE4 5428 0024                  		addq.b	#2,$24(a0)
00004FE8 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00004FEC 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004FF4 317C 8500 0002             		move.w	#$8500,2(a0)
00004FFA 117C 0000 001C             		move.b	#0,$1C(a0)
00005000 6000                       		bra.s	Obj81_Animate
00005002                            ; ===========================================================================
00005002                            
00005002                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005002 4EB9 0000 0000             		jsr	SpeedToPos
00005008 4EB9 0000 0000             		jsr	Sonic_Animate
0000500E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005014                            ; ===========================================================================
00005014                            
00005014                            Obj81_Animate:				; XREF: Obj81_Index
00005014 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005018 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000501A 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005020 4EF9 0000 0000             		jmp	AnimateSprite
00005026                            ; ===========================================================================
00005026                            
00005026                            Obj81_GetUp:				; XREF: Obj81_Animate
00005026 5428 0024                  		addq.b	#2,$24(a0)
0000502A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005032 317C 0780 0002             		move.w	#$780,2(a0)
00005038 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
0000503E 4268 0014                  		clr.w	$14(a0)
00005042 5168 000C                  		subq.w	#8,$C(a0)
00005046 103C 00E0                  		move.b	#$E0,d0
0000504A 6100 C350                  		bsr.w	PlaySound_Special ; fade out music
0000504E                            
0000504E                            Obj81_Run:				; XREF: Obj81_Index
0000504E 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005054 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005056 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
0000505C 6000                       		bra.s	Obj81_ShowRun
0000505E                            ; ===========================================================================
0000505E                            
0000505E                            Obj81_AddSpeed:				; XREF: Obj81_Run
0000505E 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005064                            
00005064                            Obj81_ShowRun:				; XREF: Obj81_Run
00005064 4EB9 0000 0000             		jsr	SpeedToPos
0000506A 4EB9 0000 0000             		jsr	Sonic_Animate
00005070 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005076                            ; ===========================================================================
00005076                            Ani_obj81:
00005076                            	include "_anim\obj81.asm"
00005076                            ; ---------------------------------------------------------------------------
00005076                            ; Animation script - Sonic on the continue screen
00005076                            ; ---------------------------------------------------------------------------
00005076 0000                       		dc.w byte_504A-Ani_obj81
00005078 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005084 00                         		even
00005084 00                         		even
00005084                            
00005084                            ; ---------------------------------------------------------------------------
00005084                            ; Sprite mappings - Continue screen
00005084                            ; ---------------------------------------------------------------------------
00005084                            Map_obj80:
00005084                            	include "_maps\obj80.asm"
00005084                            ; ---------------------------------------------------------------------------
00005084                            ; Sprite mappings - Continue screen
00005084                            ; ---------------------------------------------------------------------------
00005084 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005088 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
0000508C 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005090 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005094 0B                         byte_5066:	dc.b $B
00005095 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000509A F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
0000509F F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000050A4 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000050A9 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000050AE F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000050B3 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000050B8 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000050BD 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000050C2 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000050C7 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000050CC 03                         byte_509E:	dc.b 3
000050CD 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000050D2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050D7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050DC 03                         byte_50AE:	dc.b 3
000050DD 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000050E2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050E7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050EC 03                         byte_50BE:	dc.b 3
000050ED 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000050F2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050F7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050FC 02                         byte_50CE:	dc.b 2
000050FD 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005102 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005107 01                         byte_50D9:	dc.b 1
00005108 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
0000510D 01                         byte_50DF:	dc.b 1
0000510E 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005114 00                         		even
00005114 00                         		even
00005114                            
00005114                            ; ===========================================================================
00005114                            ; ---------------------------------------------------------------------------
00005114                            ; Ending sequence in Green Hill	Zone
00005114                            ; ---------------------------------------------------------------------------
00005114                            
00005114                            EndingSequence:				; XREF: GameModeArray
00005114 103C 00E4                  		move.b	#$E4,d0
00005118 6100 C282                  		bsr.w	PlaySound_Special ; stop music
0000511C 6100 CD34                  		bsr.w	Pal_FadeFrom
00005120 43F8 D000                  		lea	($FFFFD000).w,a1
00005124 7000                       		moveq	#0,d0
00005126 323C 07FF                  		move.w	#$7FF,d1
0000512A                            
0000512A                            End_ClrObjRam:
0000512A 22C0                       		move.l	d0,(a1)+
0000512C 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005130                            
00005130 43F8 F628                  		lea	($FFFFF628).w,a1
00005134 7000                       		moveq	#0,d0
00005136 323C 0015                  		move.w	#$15,d1
0000513A                            
0000513A                            End_ClrRam:
0000513A 22C0                       		move.l	d0,(a1)+
0000513C 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005140                            
00005140 43F8 F700                  		lea	($FFFFF700).w,a1
00005144 7000                       		moveq	#0,d0
00005146 323C 003F                  		move.w	#$3F,d1
0000514A                            
0000514A                            End_ClrRam2:
0000514A 22C0                       		move.l	d0,(a1)+
0000514C 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005150                            
00005150 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005154 7000                       		moveq	#0,d0
00005156 323C 0047                  		move.w	#$47,d1
0000515A                            
0000515A                            End_ClrRam3:
0000515A 22C0                       		move.l	d0,(a1)+
0000515C 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005160                            
00005160 46FC 2700                  		move	#$2700,sr
00005164 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005168 0200 00BF                  		andi.b	#$BF,d0
0000516C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005172 6100 C150                  		bsr.w	ClearScreen
00005176 4DF9 00C0 0004             		lea	($C00004).l,a6
0000517C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005180 3CBC 8230                  		move.w	#$8230,(a6)
00005184 3CBC 8407                  		move.w	#$8407,(a6)
00005188 3CBC 857C                  		move.w	#$857C,(a6)
0000518C 3CBC 9001                  		move.w	#$9001,(a6)
00005190 3CBC 8004                  		move.w	#$8004,(a6)
00005194 3CBC 8720                  		move.w	#$8720,(a6)
00005198 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000519E 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000051A2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000051A8 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000051AE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000051B4 6700                       		beq.s	End_LoadData	; if yes, branch
000051B6 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000051BC                            
000051BC                            End_LoadData:
000051BC 701C                       		moveq	#$1C,d0
000051BE 6100 C52C                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000051C2 4EB9 0000 0000             		jsr	Hud_Base
000051C8 6100 0000                  		bsr.w	LevelSizeLoad
000051CC 6100 0000                  		bsr.w	DeformBgLayer
000051D0 08F8 0002 F754             		bset	#2,($FFFFF754).w
000051D6 6100 0000                  		bsr.w	MainLoadBlockLoad
000051DA 6100 0000                  		bsr.w	LoadTilesFromStart
000051DE 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000051E6 46FC 2300                  		move	#$2300,sr
000051EA 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000051F0 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000051F4 6100 C6A6                  		bsr.w	KosDec
000051F8 7003                       		moveq	#3,d0
000051FA 6100 CF00                  		bsr.w	PalLoad1	; load Sonic's pallet
000051FE 303C 008B                  		move.w	#$8B,d0
00005202 6100 C192                  		bsr.w	PlaySound	; play ending sequence music
00005206 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000520C 6700                       		beq.s	End_LoadSonic	; if not, branch
0000520E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005214                            
00005214                            End_LoadSonic:
00005214 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000521A 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005220 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005226 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000522C 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005232 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005238 4EB9 0000 0000             		jsr	ObjPosLoad
0000523E 4EB9 0000 0000             		jsr	ObjectsLoad
00005244 4EB9 0000 0000             		jsr	BuildSprites
0000524A 7000                       		moveq	#0,d0
0000524C 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005250 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005254 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005258 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
0000525C 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005260 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005264 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005268 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000526C 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005270 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005274 6100 EEDA                  		bsr.w	OscillateNumInit
00005278 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000527E 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005284 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000528A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005290 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005296 6100 D710                  		bsr.w	DelayProgram
0000529A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000529E 0000 0040                  		ori.b	#$40,d0
000052A2 33C0 00C0 0004             		move.w	d0,($C00004).l
000052A8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000052AE 6100 CAFC                  		bsr.w	Pal_FadeTo
000052B2                            
000052B2                            ; ---------------------------------------------------------------------------
000052B2                            ; Main ending sequence loop
000052B2                            ; ---------------------------------------------------------------------------
000052B2                            
000052B2                            End_MainLoop:
000052B2 6100 C0F4                  		bsr.w	PauseGame
000052B6 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000052BC 6100 D6EA                  		bsr.w	DelayProgram
000052C0 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000052C4 6100 0000                  		bsr.w	End_MoveSonic
000052C8 4EB9 0000 0000             		jsr	ObjectsLoad
000052CE 6100 0000                  		bsr.w	DeformBgLayer
000052D2 4EB9 0000 0000             		jsr	BuildSprites
000052D8 4EB9 0000 0000             		jsr	ObjPosLoad
000052DE 6100 C65C                  		bsr.w	PalCycle_Load
000052E2 6100 EEC2                  		bsr.w	OscillateNumDo
000052E6 6100 EF4E                  		bsr.w	ChangeRingFrame
000052EA 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000052F0 6700                       		beq.s	loc_52DA	; if yes, branch
000052F2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000052F8 103C 0091                  		move.b	#$91,d0
000052FC 6100 C09E                  		bsr.w	PlaySound_Special ; play credits music
00005300 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005306 4E75                       		rts	
00005308                            ; ===========================================================================
00005308                            
00005308                            loc_52DA:
00005308 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000530C 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005310                            
00005310 4278 FE02                  		clr.w	($FFFFFE02).w
00005314 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000531A 4278 F794                  		clr.w	($FFFFF794).w
0000531E                            
0000531E                            End_AllEmlds:				; XREF: loc_5334
0000531E 6100 C088                  		bsr.w	PauseGame
00005322 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005328 6100 D67E                  		bsr.w	DelayProgram
0000532C 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005330 6100 0000                  		bsr.w	End_MoveSonic
00005334 4EB9 0000 0000             		jsr	ObjectsLoad
0000533A 6100 0000                  		bsr.w	DeformBgLayer
0000533E 4EB9 0000 0000             		jsr	BuildSprites
00005344 4EB9 0000 0000             		jsr	ObjPosLoad
0000534A 6100 EE5A                  		bsr.w	OscillateNumDo
0000534E 6100 EEE6                  		bsr.w	ChangeRingFrame
00005352 5378 F794                  		subq.w	#1,($FFFFF794).w
00005356 6A00                       		bpl.s	loc_5334
00005358 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000535E 6100 CC3C                  		bsr.w	Pal_ToWhite
00005362                            
00005362                            loc_5334:
00005362 4A78 FE02                  		tst.w	($FFFFFE02).w
00005366 6700 FFB6                  		beq.w	End_AllEmlds
0000536A 4278 FE02                  		clr.w	($FFFFFE02).w
0000536E 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005374 4BF9 00C0 0004             		lea	($C00004).l,a5
0000537A 4DF9 00C0 0000             		lea	($C00000).l,a6
00005380 47F8 F700                  		lea	($FFFFF700).w,a3
00005384 49F8 A400                  		lea	($FFFFA400).w,a4
00005388 343C 4000                  		move.w	#$4000,d2
0000538C 6100 0000                  		bsr.w	LoadTilesFromStart2
00005390 7013                       		moveq	#$13,d0
00005392 6100 CD68                  		bsr.w	PalLoad1	; load ending pallet
00005396 6100 CB38                  		bsr.w	Pal_MakeWhite
0000539A 6000 FF16                  		bra.w	End_MainLoop
0000539E                            
0000539E                            ; ---------------------------------------------------------------------------
0000539E                            ; Subroutine controlling Sonic on the ending sequence
0000539E                            ; ---------------------------------------------------------------------------
0000539E                            
0000539E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000539E                            
0000539E                            
0000539E                            End_MoveSonic:				; XREF: End_MainLoop
0000539E 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000053A2 6600                       		bne.s	End_MoveSonic2
000053A4 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000053AA 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000053AC 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000053B0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000053B6 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000053BC 4E75                       		rts	
000053BE                            ; ===========================================================================
000053BE                            
000053BE                            End_MoveSonic2:				; XREF: End_MoveSonic
000053BE 5500                       		subq.b	#2,d0
000053C0 6600                       		bne.s	End_MoveSonic3
000053C2 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000053C8 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000053CA 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000053CE 7000                       		moveq	#0,d0
000053D0 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000053D4 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000053D8 31C0 D014                  		move.w	d0,($FFFFD014).w
000053DC 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000053E2 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000053E8 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000053EE 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000053F4 4E75                       		rts	
000053F6                            ; ===========================================================================
000053F6                            
000053F6                            End_MoveSonic3:				; XREF: End_MoveSonic
000053F6 5500                       		subq.b	#2,d0
000053F8 6600                       		bne.s	End_MoveSonExit
000053FA 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000053FE 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005404 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000540A 4278 D024                  		clr.w	($FFFFD024).w
0000540E                            
0000540E                            End_MoveSonExit:
0000540E 4E75                       		rts	
00005410                            ; End of function End_MoveSonic
00005410                            
00005410                            ; ===========================================================================
00005410                            ; ---------------------------------------------------------------------------
00005410                            ; Object 87 - Sonic on ending sequence
00005410                            ; ---------------------------------------------------------------------------
00005410                            
00005410                            Obj87:					; XREF: Obj_Index
00005410 7000                       		moveq	#0,d0
00005412 1028 0025                  		move.b	$25(a0),d0
00005416 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000541A 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
0000541E 4EF9 0000 0000             		jmp	DisplaySprite
00005424                            ; ===========================================================================
00005424 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005428 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
0000542C 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005430 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005434 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005438                            ; ===========================================================================
00005438                            
00005438                            Obj87_Main:				; XREF: Obj87_Index
00005438 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000543E 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005440 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005446 317C 00D8 0030             		move.w	#$D8,$30(a0)
0000544C 4E75                       		rts	
0000544E                            ; ===========================================================================
0000544E                            
0000544E                            Obj87_Main2:				; XREF: Obj87_Main
0000544E 5428 0025                  		addq.b	#2,$25(a0)
00005452 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000545A 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005460 117C 0004 0001             		move.b	#4,1(a0)
00005466 4228 0022                  		clr.b	$22(a0)
0000546A 117C 0002 0018             		move.b	#2,$18(a0)
00005470 117C 0000 001A             		move.b	#0,$1A(a0)
00005476 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
0000547C                            
0000547C                            Obj87_MakeEmlds:			; XREF: Obj87_Index
0000547C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005480 6600                       		bne.s	Obj87_Wait
00005482 5428 0025                  		addq.b	#2,$25(a0)
00005486 317C 0001 001C             		move.w	#1,$1C(a0)
0000548C 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005492                            
00005492                            Obj87_Wait:
00005492 4E75                       		rts	
00005494                            ; ===========================================================================
00005494                            
00005494                            Obj87_LookUp:				; XREF: Obj87_Index
00005494 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
0000549C 6600                       		bne.s	locret_5480
0000549E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000054A4 317C 005A 0030             		move.w	#$5A,$30(a0)
000054AA 5428 0025                  		addq.b	#2,$25(a0)
000054AE                            
000054AE                            locret_5480:
000054AE 4E75                       		rts	
000054B0                            ; ===========================================================================
000054B0                            
000054B0                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000054B0 5368 0030                  		subq.w	#1,$30(a0)
000054B4 6600                       		bne.s	Obj87_Wait2
000054B6 43F8 D400                  		lea	($FFFFD400).w,a1
000054BA 323C 00FF                  		move.w	#$FF,d1
000054BE                            
000054BE                            Obj87_ClrLoop:
000054BE 4299                       		clr.l	(a1)+
000054C0 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000054C4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000054CA 5428 0025                  		addq.b	#2,$25(a0)
000054CE 117C 0001 001C             		move.b	#1,$1C(a0)
000054D4 317C 003C 0030             		move.w	#$3C,$30(a0)
000054DA                            
000054DA                            Obj87_Wait2:
000054DA 4E75                       		rts	
000054DC                            ; ===========================================================================
000054DC                            
000054DC                            Obj87_MakeLogo:				; XREF: Obj87_Index
000054DC 5368 0030                  		subq.w	#1,$30(a0)
000054E0 6600                       		bne.s	Obj87_Wait3
000054E2 5428 0025                  		addq.b	#2,$25(a0)
000054E6 317C 00B4 0030             		move.w	#$B4,$30(a0)
000054EC 117C 0002 001C             		move.b	#2,$1C(a0)
000054F2 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000054F8                            
000054F8                            Obj87_Wait3:
000054F8 4E75                       		rts	
000054FA                            ; ===========================================================================
000054FA                            
000054FA                            Obj87_Animate:				; XREF: Obj87_Index
000054FA 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005500 4EF9 0000 0000             		jmp	AnimateSprite
00005506                            ; ===========================================================================
00005506                            
00005506                            Obj87_Leap:				; XREF: Obj87_Index
00005506 5368 0030                  		subq.w	#1,$30(a0)
0000550A 6600                       		bne.s	Obj87_Wait4
0000550C 5428 0025                  		addq.b	#2,$25(a0)
00005510 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005518 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000551E 117C 0004 0001             		move.b	#4,1(a0)
00005524 4228 0022                  		clr.b	$22(a0)
00005528 117C 0002 0018             		move.b	#2,$18(a0)
0000552E 117C 0005 001A             		move.b	#5,$1A(a0)
00005534 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000553A 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005540 60B8                       		bra.s	Obj87_Animate
00005542                            ; ===========================================================================
00005542                            
00005542                            Obj87_Wait4:				; XREF: Obj87_Leap
00005542 4E75                       		rts	
00005544                            ; ===========================================================================
00005544                            Ani_obj87:
00005544                            	include "_anim\obj87.asm"
00005544                            ; ---------------------------------------------------------------------------
00005544                            ; Animation script - Sonic on the ending sequence
00005544                            ; ---------------------------------------------------------------------------
00005544 0000                       		dc.w byte_551C-Ani_obj87
00005546 0000                       		dc.w byte_552A-Ani_obj87
00005548 0000                       		dc.w byte_5534-Ani_obj87
0000554A 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005558 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005562 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000556A                            		even
0000556A                            		even
0000556A                            
0000556A                            ; ===========================================================================
0000556A                            ; ---------------------------------------------------------------------------
0000556A                            ; Object 88 - chaos emeralds on	the ending sequence
0000556A                            ; ---------------------------------------------------------------------------
0000556A                            
0000556A                            Obj88:					; XREF: Obj_Index
0000556A 7000                       		moveq	#0,d0
0000556C 1028 0024                  		move.b	$24(a0),d0
00005570 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005574 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005578 4EF9 0000 0000             		jmp	DisplaySprite
0000557E                            ; ===========================================================================
0000557E 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005580 0000                       		dc.w Obj88_Move-Obj88_Index
00005582                            ; ===========================================================================
00005582                            
00005582                            Obj88_Main:				; XREF: Obj88_Index
00005582 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005588 6700                       		beq.s	Obj88_Main2
0000558A 588F                       		addq.l	#4,sp
0000558C 4E75                       		rts	
0000558E                            ; ===========================================================================
0000558E                            
0000558E                            Obj88_Main2:				; XREF: Obj88_Main
0000558E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005594 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
0000559A 2248                       		movea.l	a0,a1
0000559C 7600                       		moveq	#0,d3
0000559E 7401                       		moveq	#1,d2
000055A0 7205                       		moveq	#5,d1
000055A2                            
000055A2                            Obj88_MainLoop:
000055A2 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000055A6 5429 0024                  		addq.b	#2,$24(a1)
000055AA 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000055B2 337C 03C5 0002             		move.w	#$3C5,2(a1)
000055B8 137C 0004 0001             		move.b	#4,1(a1)
000055BE 137C 0001 0018             		move.b	#1,$18(a1)
000055C4 3368 0008 0038             		move.w	8(a0),$38(a1)
000055CA 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000055D0 1342 001C                  		move.b	d2,$1C(a1)
000055D4 1342 001A                  		move.b	d2,$1A(a1)
000055D8 5202                       		addq.b	#1,d2
000055DA 1343 0026                  		move.b	d3,$26(a1)
000055DE 0603 002A                  		addi.b	#$2A,d3
000055E2 43E9 0040                  		lea	$40(a1),a1
000055E6 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000055EA                            
000055EA                            Obj88_Move:				; XREF: Obj88_Index
000055EA 3028 003E                  		move.w	$3E(a0),d0
000055EE D168 0026                  		add.w	d0,$26(a0)
000055F2 1028 0026                  		move.b	$26(a0),d0
000055F6 4EB9 0000 29DA             		jsr	(CalcSine).l
000055FC 7800                       		moveq	#0,d4
000055FE 1828 003C                  		move.b	$3C(a0),d4
00005602 C3C4                       		muls.w	d4,d1
00005604 E081                       		asr.l	#8,d1
00005606 C1C4                       		muls.w	d4,d0
00005608 E080                       		asr.l	#8,d0
0000560A D268 0038                  		add.w	$38(a0),d1
0000560E D068 003A                  		add.w	$3A(a0),d0
00005612 3141 0008                  		move.w	d1,8(a0)
00005616 3140 000C                  		move.w	d0,$C(a0)
0000561A 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005620 6700                       		beq.s	loc_55FA
00005622 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005628                            
00005628                            loc_55FA:
00005628 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
0000562E 6700                       		beq.s	loc_5608
00005630 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005636                            
00005636                            loc_5608:
00005636 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
0000563C 6700                       		beq.s	locret_5614
0000563E 5368 003A                  		subq.w	#1,$3A(a0)
00005642                            
00005642                            locret_5614:
00005642 4E75                       		rts	
00005644                            ; ===========================================================================
00005644                            ; ---------------------------------------------------------------------------
00005644                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005644                            ; ---------------------------------------------------------------------------
00005644                            
00005644                            Obj89:					; XREF: Obj_Index
00005644 7000                       		moveq	#0,d0
00005646 1028 0024                  		move.b	$24(a0),d0
0000564A 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
0000564E 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005652                            ; ===========================================================================
00005652 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005654 0000                       		dc.w Obj89_Move-Obj89_Index
00005656 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005658                            ; ===========================================================================
00005658                            
00005658                            Obj89_Main:				; XREF: Obj89_Index
00005658 5428 0024                  		addq.b	#2,$24(a0)
0000565C 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005662 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005668 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005670 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005676 117C 0000 0001             		move.b	#0,1(a0)
0000567C 117C 0000 0018             		move.b	#0,$18(a0)
00005682                            
00005682                            Obj89_Move:				; XREF: Obj89_Index
00005682 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005688 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000568A 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005690 4EB9 0000 0000             		jsr	DisplaySprite
00005696                            ; ===========================================================================
00005696                            
00005696                            Obj89_Delay:				; XREF: Obj89_Move
00005696 5428 0024                  		addq.b	#2,$24(a0)
0000569A 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000056A0                            
000056A0                            Obj89_GotoCredits:			; XREF: Obj89_Index
000056A0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000056A4 6A00                       		bpl.s	Obj89_Display
000056A6 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000056AC                            
000056AC                            Obj89_Display:
000056AC 4EB9 0000 0000             		jsr	DisplaySprite
000056B2                            ; ===========================================================================
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            ; Sprite mappings - Sonic on the ending	sequence
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            Map_obj87:
000056B2                            	include "_maps\obj87.asm"
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            ; Sprite mappings - Sonic on the ending	sequence
000056B2                            ; ---------------------------------------------------------------------------
000056B2 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000056B6 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000056BA 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000056BE 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000056C2 02                         byte_5690:	dc.b 2
000056C3 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000056C8 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000056CD 03                         byte_569B:	dc.b 3
000056CE FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000056D3 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000056D8 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000056DD 02                         byte_56AB:	dc.b 2
000056DE EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000056E3 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000056E8 02                         byte_56B6:	dc.b 2
000056E9 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000056EE FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000056F3 02                         byte_56C1:	dc.b 2
000056F4 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000056F9 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000056FE 03                         byte_56CC:	dc.b 3
000056FF EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005704 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005709 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000570E 07                         byte_56DC:	dc.b 7
0000570F B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005714 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005719 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000571E CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005723 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005728 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000572D EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005732 18                         byte_5700:	dc.b $18
00005733 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005738 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000573D 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005742 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005747 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000574C 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005751 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005756 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000575B B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005760 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005765 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000576A C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000576F C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005774 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005779 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
0000577E D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005783 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005788 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
0000578D E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005792 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005797 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
0000579C E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000057A1 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000057A6 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000057AC 00                         		even
000057AC 00                         		even
000057AC                            
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            ; Sprite mappings - chaos emeralds on the ending sequence
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            Map_obj88:
000057AC                            	include "_maps\obj88.asm"
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            ; Sprite mappings - chaos emeralds on the ending sequence
000057AC                            ; ---------------------------------------------------------------------------
000057AC 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000057B0 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000057B4 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000057B8 0000                       		dc.w byte_57AC-Map_obj88
000057BA 01                         byte_5788:	dc.b 1
000057BB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000057C0 01                         byte_578E:	dc.b 1
000057C1 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000057C6 01                         byte_5794:	dc.b 1
000057C7 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000057CC 01                         byte_579A:	dc.b 1
000057CD F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000057D2 01                         byte_57A0:	dc.b 1
000057D3 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000057D8 01                         byte_57A6:	dc.b 1
000057D9 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000057DE 01                         byte_57AC:	dc.b 1
000057DF F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000057E4                            		even
000057E4                            		even
000057E4                            
000057E4                            ; ---------------------------------------------------------------------------
000057E4                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057E4                            ; ---------------------------------------------------------------------------
000057E4                            Map_obj89:
000057E4                            	include "_maps\obj89.asm"
000057E4                            ; ---------------------------------------------------------------------------
000057E4                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057E4                            ; ---------------------------------------------------------------------------
000057E4 0000                       		dc.w byte_57B4-Map_obj89
000057E6 03                         byte_57B4:	dc.b 3
000057E7 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000057EC F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000057F1 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000057F6                            		even
000057F6                            		even
000057F6                            
000057F6                            ; ===========================================================================
000057F6                            ; ---------------------------------------------------------------------------
000057F6                            ; Credits ending sequence
000057F6                            ; ---------------------------------------------------------------------------
000057F6                            
000057F6                            Credits:				; XREF: GameModeArray
000057F6 6100 BDE6                  		bsr.w	ClearPLC
000057FA 6100 C656                  		bsr.w	Pal_FadeFrom
000057FE 4DF9 00C0 0004             		lea	($C00004).l,a6
00005804 3CBC 8004                  		move.w	#$8004,(a6)
00005808 3CBC 8230                  		move.w	#$8230,(a6)
0000580C 3CBC 8407                  		move.w	#$8407,(a6)
00005810 3CBC 9001                  		move.w	#$9001,(a6)
00005814 3CBC 9200                  		move.w	#$9200,(a6)
00005818 3CBC 8B03                  		move.w	#$8B03,(a6)
0000581C 3CBC 8720                  		move.w	#$8720,(a6)
00005820 4238 F64E                  		clr.b	($FFFFF64E).w
00005824 6100 BA9E                  		bsr.w	ClearScreen
00005828 43F8 D000                  		lea	($FFFFD000).w,a1
0000582C 7000                       		moveq	#0,d0
0000582E 323C 07FF                  		move.w	#$7FF,d1
00005832                            
00005832                            Cred_ClrObjRam:
00005832 22C0                       		move.l	d0,(a1)+
00005834 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005838                            
00005838 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005842 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005848 6100 BBF6                  		bsr.w	NemDec
0000584C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005850 7000                       		moveq	#0,d0
00005852 323C 001F                  		move.w	#$1F,d1
00005856                            
00005856                            Cred_ClrPallet:
00005856 22C0                       		move.l	d0,(a1)+
00005858 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
0000585C                            
0000585C 7003                       		moveq	#3,d0
0000585E 6100 C89C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005862 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005868 4EB9 0000 0000             		jsr	ObjectsLoad
0000586E 4EB9 0000 0000             		jsr	BuildSprites
00005874 6100 0000                  		bsr.w	EndingDemoLoad
00005878 7000                       		moveq	#0,d0
0000587A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000587E E948                       		lsl.w	#4,d0
00005880 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005886 45F2 0000                  		lea	(a2,d0.w),a2
0000588A 7000                       		moveq	#0,d0
0000588C 1012                       		move.b	(a2),d0
0000588E 6700                       		beq.s	loc_5862
00005890 6100 BCEE                  		bsr.w	LoadPLC		; load level patterns
00005894                            
00005894                            loc_5862:
00005894 7001                       		moveq	#1,d0
00005896 6100 BCE8                  		bsr.w	LoadPLC		; load standard	level patterns
0000589A 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
000058A0 6100 C50A                  		bsr.w	Pal_FadeTo
000058A4                            
000058A4                            Cred_WaitLoop:
000058A4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000058AA 6100 D0FC                  		bsr.w	DelayProgram
000058AE 6100 BD3C                  		bsr.w	RunPLC_RAM
000058B2 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000058B6 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000058B8 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
000058BC 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000058BE 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
000058C4 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
000058C8 4E75                       		rts	
000058CA                            
000058CA                            ; ---------------------------------------------------------------------------
000058CA                            ; Ending sequence demo loading subroutine
000058CA                            ; ---------------------------------------------------------------------------
000058CA                            
000058CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058CA                            
000058CA                            
000058CA                            EndingDemoLoad:				; XREF: Credits
000058CA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000058CE 0240 000F                  		andi.w	#$F,d0
000058D2 D040                       		add.w	d0,d0
000058D4 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000058D8 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000058DC 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000058E0 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000058E6 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000058E8 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000058EE 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
000058F4 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000058FA 7000                       		moveq	#0,d0
000058FC 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005900 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005904 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005908 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
0000590C 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005912 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005914 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
0000591A 45F8 FE30                  		lea	($FFFFFE30).w,a2
0000591E 303C 0008                  		move.w	#8,d0
00005922                            
00005922                            EndDemo_LampLoad:
00005922 24D9                       		move.l	(a1)+,(a2)+
00005924 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005928                            
00005928                            EndDemo_Exit:
00005928 4E75                       		rts	
0000592A                            ; End of function EndingDemoLoad
0000592A                            
0000592A                            ; ===========================================================================
0000592A                            ; ---------------------------------------------------------------------------
0000592A                            ; Levels used in the end sequence demos
0000592A                            ; ---------------------------------------------------------------------------
0000592A                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
0000593A                            
0000593A                            ; ---------------------------------------------------------------------------
0000593A                            ; Lamppost variables in the end sequence demo (Star Light Zone)
0000593A                            ; ---------------------------------------------------------------------------
0000593A                            EndDemo_LampVar:
0000593A 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
0000593C 0A00 062C 000D             		dc.w $A00, $62C, $D
00005942 0000 0000                  		dc.l 0
00005946 0000                       		dc.b 0,	0
00005948 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
0000595C 0101                       		dc.b 1,	1
0000595E                            ; ===========================================================================
0000595E                            ; ---------------------------------------------------------------------------
0000595E                            ; "TRY AGAIN" and "END"	screens
0000595E                            ; ---------------------------------------------------------------------------
0000595E                            
0000595E                            TryAgainEnd:				; XREF: Credits
0000595E 6100 BC7E                  		bsr.w	ClearPLC
00005962 6100 C4EE                  		bsr.w	Pal_FadeFrom
00005966 4DF9 00C0 0004             		lea	($C00004).l,a6
0000596C 3CBC 8004                  		move.w	#$8004,(a6)
00005970 3CBC 8230                  		move.w	#$8230,(a6)
00005974 3CBC 8407                  		move.w	#$8407,(a6)
00005978 3CBC 9001                  		move.w	#$9001,(a6)
0000597C 3CBC 9200                  		move.w	#$9200,(a6)
00005980 3CBC 8B03                  		move.w	#$8B03,(a6)
00005984 3CBC 8720                  		move.w	#$8720,(a6)
00005988 4238 F64E                  		clr.b	($FFFFF64E).w
0000598C 6100 B936                  		bsr.w	ClearScreen
00005990 43F8 D000                  		lea	($FFFFD000).w,a1
00005994 7000                       		moveq	#0,d0
00005996 323C 07FF                  		move.w	#$7FF,d1
0000599A                            
0000599A                            TryAg_ClrObjRam:
0000599A 22C0                       		move.l	d0,(a1)+
0000599C 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000059A0                            
000059A0 701D                       		moveq	#$1D,d0
000059A2 6100 BD48                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
000059A6 43F8 FB80                  		lea	($FFFFFB80).w,a1
000059AA 7000                       		moveq	#0,d0
000059AC 323C 001F                  		move.w	#$1F,d1
000059B0                            
000059B0                            TryAg_ClrPallet:
000059B0 22C0                       		move.l	d0,(a1)+
000059B2 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000059B6                            
000059B6 7013                       		moveq	#$13,d0
000059B8 6100 C742                  		bsr.w	PalLoad1	; load ending pallet
000059BC 4278 FBC0                  		clr.w	($FFFFFBC0).w
000059C0 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
000059C6 4EB9 0000 0000             		jsr	ObjectsLoad
000059CC 4EB9 0000 0000             		jsr	BuildSprites
000059D2 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000059D8 6100 C3D2                  		bsr.w	Pal_FadeTo
000059DC                            
000059DC                            ; ---------------------------------------------------------------------------
000059DC                            ; "TRY AGAIN" and "END"	screen main loop
000059DC                            ; ---------------------------------------------------------------------------
000059DC                            TryAg_MainLoop:
000059DC 6100 B9CA                  		bsr.w	PauseGame
000059E0 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000059E6 6100 CFC0                  		bsr.w	DelayProgram
000059EA 4EB9 0000 0000             		jsr	ObjectsLoad
000059F0 4EB9 0000 0000             		jsr	BuildSprites
000059F6 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000059FC 6600                       		bne.s	TryAg_Exit	; if yes, branch
000059FE 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005A02 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005A04 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005A0A 67D0                       		beq.s	TryAg_MainLoop
00005A0C                            
00005A0C                            TryAg_Exit:
00005A0C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005A12 4E75                       		rts	
00005A14                            
00005A14                            ; ===========================================================================
00005A14                            ; ---------------------------------------------------------------------------
00005A14                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005A14                            ; ---------------------------------------------------------------------------
00005A14                            
00005A14                            Obj8B:					; XREF: Obj_Index
00005A14 7000                       		moveq	#0,d0
00005A16 1028 0024                  		move.b	$24(a0),d0
00005A1A 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005A1E 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005A22 4EF9 0000 0000             		jmp	DisplaySprite
00005A28                            ; ===========================================================================
00005A28 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005A2A 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005A2C 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005A2E 0000                       		dc.w loc_5A8E-Obj8B_Index
00005A30                            ; ===========================================================================
00005A30                            
00005A30                            Obj8B_Main:				; XREF: Obj8B_Index
00005A30 5428 0024                  		addq.b	#2,$24(a0)
00005A34 317C 0120 0008             		move.w	#$120,8(a0)
00005A3A 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005A40 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005A48 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A4E 117C 0000 0001             		move.b	#0,1(a0)
00005A54 117C 0002 0018             		move.b	#2,$18(a0)
00005A5A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005A60 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A66 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005A68 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005A6E 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005A74 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005A7A 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005A80                            
00005A80                            Obj8B_Animate:				; XREF: Obj8B_Index
00005A80 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005A86 4EF9 0000 0000             		jmp	AnimateSprite
00005A8C                            ; ===========================================================================
00005A8C                            
00005A8C                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005A8C 5428 0024                  		addq.b	#2,$24(a0)
00005A90 7002                       		moveq	#2,d0
00005A92 0828 0000 001C             		btst	#0,$1C(a0)
00005A98 6700                       		beq.s	loc_5A6A
00005A9A 4440                       		neg.w	d0
00005A9C                            
00005A9C                            loc_5A6A:
00005A9C 43F8 D800                  		lea	($FFFFD800).w,a1
00005AA0 7205                       		moveq	#5,d1
00005AA2                            
00005AA2                            loc_5A70:
00005AA2 1340 003E                  		move.b	d0,$3E(a1)
00005AA6 3400                       		move.w	d0,d2
00005AA8 E742                       		asl.w	#3,d2
00005AAA D529 0026                  		add.b	d2,$26(a1)
00005AAE 43E9 0040                  		lea	$40(a1),a1
00005AB2 51C9 FFEE                  		dbf	d1,loc_5A70
00005AB6 5228 001A                  		addq.b	#1,$1A(a0)
00005ABA 317C 0070 0030             		move.w	#112,$30(a0)
00005AC0                            
00005AC0                            loc_5A8E:				; XREF: Obj8B_Index
00005AC0 5368 0030                  		subq.w	#1,$30(a0)
00005AC4 6A00                       		bpl.s	locret_5AA0
00005AC6 0868 0000 001C             		bchg	#0,$1C(a0)
00005ACC 117C 0002 0024             		move.b	#2,$24(a0)
00005AD2                            
00005AD2                            locret_5AA0:
00005AD2 4E75                       		rts	
00005AD4                            ; ===========================================================================
00005AD4                            Ani_obj8B:
00005AD4                            	include "_anim\obj8B.asm"
00005AD4                            ; ---------------------------------------------------------------------------
00005AD4                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005AD4                            ; ---------------------------------------------------------------------------
00005AD4 0000                       		dc.w byte_5AA8-Ani_obj8B
00005AD6 0000                       		dc.w byte_5AAC-Ani_obj8B
00005AD8 0000                       		dc.w byte_5AB0-Ani_obj8B
00005ADA 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005ADE 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005AE2 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005AF4                            		even
00005AF4                            		even
00005AF4                            
00005AF4                            ; ===========================================================================
00005AF4                            ; ---------------------------------------------------------------------------
00005AF4                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005AF4                            ; ---------------------------------------------------------------------------
00005AF4                            
00005AF4                            Obj8C:					; XREF: Obj_Index
00005AF4 7000                       		moveq	#0,d0
00005AF6 1028 0024                  		move.b	$24(a0),d0
00005AFA 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005AFE 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005B02 4EF9 0000 0000             		jmp	DisplaySprite
00005B08                            ; ===========================================================================
00005B08 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005B0A 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005B0C                            ; ===========================================================================
00005B0C                            
00005B0C                            Obj8C_Main:				; XREF: Obj8C_Index
00005B0C 2248                       		movea.l	a0,a1
00005B0E 7400                       		moveq	#0,d2
00005B10 7600                       		moveq	#0,d3
00005B12 7205                       		moveq	#5,d1
00005B14 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005B18                            
00005B18                            Obj8C_MakeEms:				; XREF: loc_5B42
00005B18 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005B1C 5429 0024                  		addq.b	#2,$24(a1)
00005B20 237C 0000 57AC 0004        		move.l	#Map_obj88,4(a1)
00005B28 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005B2E 137C 0000 0001             		move.b	#0,1(a1)
00005B34 137C 0001 0018             		move.b	#1,$18(a1)
00005B3A 337C 0104 0008             		move.w	#$104,8(a1)
00005B40 337C 0120 0038             		move.w	#$120,$38(a1)
00005B46 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005B4C 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005B52 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005B58 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005B5C                            
00005B5C                            Obj8C_ChkEms:
00005B5C 7000                       		moveq	#0,d0
00005B5E 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005B62 5340                       		subq.w	#1,d0
00005B64 6500                       		bcs.s	loc_5B42
00005B66                            
00005B66                            Obj8C_ChkEmLoop:
00005B66 B433 0000                  		cmp.b	(a3,d0.w),d2
00005B6A 6600                       		bne.s	loc_5B3E
00005B6C 5202                       		addq.b	#1,d2
00005B6E 60EC                       		bra.s	Obj8C_ChkEms
00005B70                            ; ===========================================================================
00005B70                            
00005B70                            loc_5B3E:
00005B70 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005B74                            
00005B74                            loc_5B42:
00005B74 1342 001A                  		move.b	d2,$1A(a1)
00005B78 5229 001A                  		addq.b	#1,$1A(a1)
00005B7C 5202                       		addq.b	#1,d2
00005B7E 137C 0080 0026             		move.b	#$80,$26(a1)
00005B84 1343 001E                  		move.b	d3,$1E(a1)
00005B88 1343 001F                  		move.b	d3,$1F(a1)
00005B8C 0643 000A                  		addi.w	#$A,d3
00005B90 43E9 0040                  		lea	$40(a1),a1
00005B94 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005B98                            
00005B98                            Obj8C_Move:				; XREF: Obj8C_Index
00005B98 4A68 003E                  		tst.w	$3E(a0)
00005B9C 6700                       		beq.s	locret_5BBA
00005B9E 4A28 001E                  		tst.b	$1E(a0)
00005BA2 6700                       		beq.s	loc_5B78
00005BA4 5328 001E                  		subq.b	#1,$1E(a0)
00005BA8 6600                       		bne.s	loc_5B80
00005BAA                            
00005BAA                            loc_5B78:
00005BAA 3028 003E                  		move.w	$3E(a0),d0
00005BAE D168 0026                  		add.w	d0,$26(a0)
00005BB2                            
00005BB2                            loc_5B80:
00005BB2 1028 0026                  		move.b	$26(a0),d0
00005BB6 6700                       		beq.s	loc_5B8C
00005BB8 0C00 0080                  		cmpi.b	#$80,d0
00005BBC 6600                       		bne.s	loc_5B96
00005BBE                            
00005BBE                            loc_5B8C:
00005BBE 4268 003E                  		clr.w	$3E(a0)
00005BC2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005BC8                            
00005BC8                            loc_5B96:
00005BC8 4EB9 0000 29DA             		jsr	(CalcSine).l
00005BCE 7800                       		moveq	#0,d4
00005BD0 1828 003C                  		move.b	$3C(a0),d4
00005BD4 C3C4                       		muls.w	d4,d1
00005BD6 E081                       		asr.l	#8,d1
00005BD8 C1C4                       		muls.w	d4,d0
00005BDA E080                       		asr.l	#8,d0
00005BDC D268 0038                  		add.w	$38(a0),d1
00005BE0 D068 003A                  		add.w	$3A(a0),d0
00005BE4 3141 0008                  		move.w	d1,8(a0)
00005BE8 3140 000A                  		move.w	d0,$A(a0)
00005BEC                            
00005BEC                            locret_5BBA:
00005BEC 4E75                       		rts	
00005BEE                            ; ===========================================================================
00005BEE                            ; ---------------------------------------------------------------------------
00005BEE                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005BEE                            ; ---------------------------------------------------------------------------
00005BEE                            Map_obj8B:
00005BEE                            	include "_maps\obj8B.asm"
00005BEE                            ; ---------------------------------------------------------------------------
00005BEE                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005BEE                            ; ---------------------------------------------------------------------------
00005BEE 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005BF2 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005BF6 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005BFA 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005BFE 08                         byte_5BCC:	dc.b 8
00005BFF E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005C04 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005C09 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005C0E F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005C13 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C18 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C1D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C22 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C27 08                         byte_5BF5:	dc.b 8
00005C28 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005C2D F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005C32 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005C37 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005C3C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C41 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C46 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C4B 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C50 08                         byte_5C1E:	dc.b 8
00005C51 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005C56 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005C5B E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005C60 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005C65 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C6A 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C6F 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C74 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C79 08                         byte_5C47:	dc.b 8
00005C7A E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005C7F F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005C84 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005C89 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005C8E 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C93 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C98 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C9D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005CA2 0C                         byte_5C70:	dc.b $C
00005CA3 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005CA8 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005CAD 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005CB2 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005CB7 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005CBC F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005CC1 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005CC6 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005CCB 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005CD0 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005CD5 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005CDA 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005CDF 0A                         byte_5CAD:	dc.b $A
00005CE0 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005CE5 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005CEA F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005CEF D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005CF4 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005CF9 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005CFE 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005D03 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005D08 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005D0D 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005D12 0A                         byte_5CE0:	dc.b $A
00005D13 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005D18 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005D1D EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005D22 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005D27 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005D2C EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005D31 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005D36 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005D3B 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005D40 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005D45 0C                         byte_5D13:	dc.b $C
00005D46 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005D4B FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005D50 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005D55 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005D5A F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005D5F FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005D64 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005D69 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005D6E 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005D73 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005D78 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005D7D 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005D82                            		even
00005D82                            		even
00005D82                            
00005D82                            ; ---------------------------------------------------------------------------
00005D82                            ; Ending sequence demos
00005D82                            ; ---------------------------------------------------------------------------
00005D82                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005DB0                            		even
00005DB0                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005DF0                            		even
00005DF0                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00005E20                            		even
00005E20                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00005E50                            		even
00005E50                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00005E70                            		even
00005E70                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00005E90                            		even
00005E90                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00005EC0                            		even
00005EC0                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00005EF0                            		even
00005EF0                            
00005EF0                            ; ---------------------------------------------------------------------------
00005EF0                            ; Subroutine to	load level boundaries and start	locations
00005EF0                            ; ---------------------------------------------------------------------------
00005EF0                            
00005EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005EF0                            
00005EF0                            
00005EF0                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00005EF0 7000                       		moveq	#0,d0
00005EF2 11C0 F740                  		move.b	d0,($FFFFF740).w
00005EF6 11C0 F741                  		move.b	d0,($FFFFF741).w
00005EFA 11C0 F746                  		move.b	d0,($FFFFF746).w
00005EFE 11C0 F748                  		move.b	d0,($FFFFF748).w
00005F02 11C0 F742                  		move.b	d0,($FFFFF742).w
00005F06 3038 FE10                  		move.w	($FFFFFE10).w,d0
00005F0A ED08                       		lsl.b	#6,d0
00005F0C E848                       		lsr.w	#4,d0
00005F0E 3200                       		move.w	d0,d1
00005F10 D040                       		add.w	d0,d0
00005F12 D041                       		add.w	d1,d0
00005F14 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00005F18 3018                       		move.w	(a0)+,d0
00005F1A 31C0 F730                  		move.w	d0,($FFFFF730).w
00005F1E 2018                       		move.l	(a0)+,d0
00005F20 21C0 F728                  		move.l	d0,($FFFFF728).w
00005F24 21C0 F720                  		move.l	d0,($FFFFF720).w
00005F28 2018                       		move.l	(a0)+,d0
00005F2A 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00005F2E 21C0 F724                  		move.l	d0,($FFFFF724).w
00005F32 3038 F728                  		move.w	($FFFFF728).w,d0
00005F36 0640 0240                  		addi.w	#$240,d0
00005F3A 31C0 F732                  		move.w	d0,($FFFFF732).w
00005F3E 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00005F44 3018                       		move.w	(a0)+,d0
00005F46 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00005F4A 6000 0000                  		bra.w	LevSz_ChkLamp
00005F4E                            ; ===========================================================================
00005F4E                            ; ---------------------------------------------------------------------------
00005F4E                            ; Level size array and ending start location array
00005F4E                            ; ---------------------------------------------------------------------------
00005F4E                            LevelSizeArray:	incbin	misc\lvl_size.bin
0000609E                            		even
0000609E                            
0000609E                            EndingStLocArray:
0000609E                            		incbin	misc\sloc_end.bin
000060BE                            		even
000060BE                            
000060BE                            ; ===========================================================================
000060BE                            
000060BE                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000060BE 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000060C2 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000060C4 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000060CA 3238 D008                  		move.w	($FFFFD008).w,d1
000060CE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000060D2 6000                       		bra.s	loc_60D0
000060D4                            ; ===========================================================================
000060D4                            
000060D4                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000060D4 3038 FE10                  		move.w	($FFFFFE10).w,d0
000060D8 ED08                       		lsl.b	#6,d0
000060DA E848                       		lsr.w	#4,d0
000060DC 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000060E0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000060E4 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000060E6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000060EA 5340                       		subq.w	#1,d0
000060EC E548                       		lsl.w	#2,d0
000060EE 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000060F2                            
000060F2                            LevSz_SonicPos:
000060F2 7200                       		moveq	#0,d1
000060F4 3219                       		move.w	(a1)+,d1
000060F6 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000060FA 7000                       		moveq	#0,d0
000060FC 3011                       		move.w	(a1),d0
000060FE 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006102                            
00006102                            loc_60D0:				; XREF: LevSz_ChkLamp
00006102 0441 00A0                  		subi.w	#$A0,d1
00006106 6400                       		bcc.s	loc_60D8
00006108 7200                       		moveq	#0,d1
0000610A                            
0000610A                            loc_60D8:
0000610A 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000610E B242                       		cmp.w	d2,d1
00006110 6500                       		bcs.s	loc_60E2
00006112 3202                       		move.w	d2,d1
00006114                            
00006114                            loc_60E2:
00006114 31C1 F700                  		move.w	d1,($FFFFF700).w
00006118 0440 0060                  		subi.w	#$60,d0
0000611C 6400                       		bcc.s	loc_60EE
0000611E 7000                       		moveq	#0,d0
00006120                            
00006120                            loc_60EE:
00006120 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006124 6D00                       		blt.s	loc_60F8
00006126 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000612A                            
0000612A                            loc_60F8:
0000612A 31C0 F704                  		move.w	d0,($FFFFF704).w
0000612E 6100 0000                  		bsr.w	BgScrollSpeed
00006132 7000                       		moveq	#0,d0
00006134 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006138 E508                       		lsl.b	#2,d0
0000613A 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006140 6000 0000                  		bra.w	LevSz_Unk
00006144                            ; ===========================================================================
00006144                            ; ---------------------------------------------------------------------------
00006144                            ; Sonic	start location array
00006144                            ; ---------------------------------------------------------------------------
00006144                            StartLocArray:	incbin	misc\sloc_lev.bin
000061B4                            		even
000061B4                            
000061B4                            ; ---------------------------------------------------------------------------
000061B4                            ; Which	256x256	tiles contain loops or roll-tunnels
000061B4                            ; ---------------------------------------------------------------------------
000061B4                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000061B4                            ; loop,	loop, tunnel, tunnel
000061B4                            ; ---------------------------------------------------------------------------
000061B4                            LoopTileNums:	incbin	misc\loopnums.bin
000061D0                            		even
000061D0                            
000061D0                            ; ===========================================================================
000061D0                            
000061D0                            LevSz_Unk:				; XREF: LevelSizeLoad
000061D0 7000                       		moveq	#0,d0
000061D2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000061D6 E748                       		lsl.w	#3,d0
000061D8 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000061DC 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000061E0 24D9                       		move.l	(a1)+,(a2)+
000061E2 24D9                       		move.l	(a1)+,(a2)+
000061E4 4E75                       		rts	
000061E6                            ; End of function LevelSizeLoad
000061E6                            
000061E6                            ; ===========================================================================
000061E6 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000061EE 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061F6 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061FE 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006206 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000620E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006216 0070 0100 0100 0100        		dc.l $700100, $1000100
0000621E                            
0000621E                            ; ---------------------------------------------------------------------------
0000621E                            ; Subroutine to	set scroll speed of some backgrounds
0000621E                            ; ---------------------------------------------------------------------------
0000621E                            
0000621E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000621E                            
0000621E                            
0000621E                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000621E 4A38 FE30                  		tst.b	($FFFFFE30).w
00006222 6600                       		bne.s	loc_6206
00006224 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006228 31C0 F714                  		move.w	d0,($FFFFF714).w
0000622C 31C1 F708                  		move.w	d1,($FFFFF708).w
00006230 31C1 F710                  		move.w	d1,($FFFFF710).w
00006234 31C1 F718                  		move.w	d1,($FFFFF718).w
00006238                            
00006238                            loc_6206:
00006238 7400                       		moveq	#0,d2
0000623A 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000623E D442                       		add.w	d2,d2
00006240 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006244 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006248                            ; End of function BgScrollSpeed
00006248                            
00006248                            ; ===========================================================================
00006248 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000624C 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006250 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006254 0000                       		dc.w BgScroll_End-BgScroll_Index
00006256                            ; ===========================================================================
00006256                            
00006256                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006256 6000 0000                  		bra.w	Deform_GHZ
0000625A                            ; ===========================================================================
0000625A                            
0000625A                            BgScroll_LZ:				; XREF: BgScroll_Index
0000625A E280                       		asr.l	#1,d0
0000625C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006260 4E75                       		rts	
00006262                            ; ===========================================================================
00006262                            
00006262                            BgScroll_MZ:				; XREF: BgScroll_Index
00006262 4E75                       		rts	
00006264                            ; ===========================================================================
00006264                            
00006264                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006264 E280                       		asr.l	#1,d0
00006266 0640 00C0                  		addi.w	#$C0,d0
0000626A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000626E 4E75                       		rts	
00006270                            ; ===========================================================================
00006270                            
00006270                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006270 E980                       		asl.l	#4,d0
00006272 2400                       		move.l	d0,d2
00006274 E380                       		asl.l	#1,d0
00006276 D082                       		add.l	d2,d0
00006278 E080                       		asr.l	#8,d0
0000627A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000627E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006282 4E75                       		rts	
00006284                            ; ===========================================================================
00006284                            
00006284                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006284 E980                       		asl.l	#4,d0
00006286 E380                       		asl.l	#1,d0
00006288 E080                       		asr.l	#8,d0
0000628A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000628E 4E75                       		rts	
00006290                            ; ===========================================================================
00006290                            
00006290                            BgScroll_End:				; XREF: BgScroll_Index
00006290 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006296 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000629C 4E75                       		rts	
0000629E                            ; ===========================================================================
0000629E 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000062A4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000062AA 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000062B0 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000062B6 4E75                       		rts
000062B8                            
000062B8                            ; ---------------------------------------------------------------------------
000062B8                            ; Background layer deformation subroutines
000062B8                            ; ---------------------------------------------------------------------------
000062B8                            
000062B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062B8                            
000062B8                            
000062B8                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000062B8 4A38 F744                  		tst.b	($FFFFF744).w
000062BC 6700                       		beq.s	loc_628E
000062BE 4E75                       		rts	
000062C0                            ; ===========================================================================
000062C0                            
000062C0                            loc_628E:
000062C0 4278 F754                  		clr.w	($FFFFF754).w
000062C4 4278 F756                  		clr.w	($FFFFF756).w
000062C8 4278 F758                  		clr.w	($FFFFF758).w
000062CC 4278 F75A                  		clr.w	($FFFFF75A).w
000062D0 6100 0000                  		bsr.w	ScrollHoriz
000062D4 6100 0000                  		bsr.w	ScrollVertical
000062D8 6100 0000                  		bsr.w	DynScrResizeLoad
000062DC 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000062E2 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000062E8 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000062EE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000062F4 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000062FA 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006300 7000                       		moveq	#0,d0
00006302 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006306 D040                       		add.w	d0,d0
00006308 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000630C 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006310                            ; End of function DeformBgLayer
00006310                            
00006310                            ; ===========================================================================
00006310                            ; ---------------------------------------------------------------------------
00006310                            ; Offset index for background layer deformation	code
00006310                            ; ---------------------------------------------------------------------------
00006310 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006314 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006318 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000631C 0000                       		dc.w Deform_GHZ-Deform_Index
0000631E                            ; ---------------------------------------------------------------------------
0000631E                            ; Green	Hill Zone background layer deformation code
0000631E                            ; ---------------------------------------------------------------------------
0000631E                            
0000631E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000631E                            
0000631E                            
0000631E                            Deform_GHZ:				; XREF: Deform_Index
0000631E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006322 48C4                       		ext.l	d4
00006324 EB84                       		asl.l	#5,d4
00006326 2204                       		move.l	d4,d1
00006328 E384                       		asl.l	#1,d4
0000632A D881                       		add.l	d1,d4
0000632C 7A00                       		moveq	#0,d5
0000632E 6100 0000                  		bsr.w	ScrollBlock1
00006332 6100 0000                  		bsr.w	ScrollBlock4
00006336 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000633A 3038 F704                  		move.w	($FFFFF704).w,d0
0000633E 0240 07FF                  		andi.w	#$7FF,d0
00006342 EA48                       		lsr.w	#5,d0
00006344 4440                       		neg.w	d0
00006346 0640 0026                  		addi.w	#$26,d0
0000634A 31C0 F714                  		move.w	d0,($FFFFF714).w
0000634E 3800                       		move.w	d0,d4
00006350 6100 0000                  		bsr.w	ScrollBlock3
00006354 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000635A 323C 006F                  		move.w	#$6F,d1
0000635E 9244                       		sub.w	d4,d1
00006360 3038 F700                  		move.w	($FFFFF700).w,d0
00006364 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
0000636A 6600                       		bne.s	loc_633C
0000636C 7000                       		moveq	#0,d0
0000636E                            
0000636E                            loc_633C:
0000636E 4440                       		neg.w	d0
00006370 4840                       		swap	d0
00006372 3038 F708                  		move.w	($FFFFF708).w,d0
00006376 4440                       		neg.w	d0
00006378                            
00006378                            loc_6346:
00006378 22C0                       		move.l	d0,(a1)+
0000637A 51C9 FFFC                  		dbf	d1,loc_6346
0000637E 323C 0027                  		move.w	#$27,d1
00006382 3038 F710                  		move.w	($FFFFF710).w,d0
00006386 4440                       		neg.w	d0
00006388                            
00006388                            loc_6356:
00006388 22C0                       		move.l	d0,(a1)+
0000638A 51C9 FFFC                  		dbf	d1,loc_6356
0000638E 3038 F710                  		move.w	($FFFFF710).w,d0
00006392 0640 0000                  		addi.w	#0,d0
00006396 3438 F700                  		move.w	($FFFFF700).w,d2
0000639A 0642 FE00                  		addi.w	#-$200,d2
0000639E 9440                       		sub.w	d0,d2
000063A0 48C2                       		ext.l	d2
000063A2 E182                       		asl.l	#8,d2
000063A4 85FC 0068                  		divs.w	#$68,d2
000063A8 48C2                       		ext.l	d2
000063AA E182                       		asl.l	#8,d2
000063AC 7600                       		moveq	#0,d3
000063AE 3600                       		move.w	d0,d3
000063B0 323C 0047                  		move.w	#$47,d1
000063B4 D244                       		add.w	d4,d1
000063B6                            
000063B6                            loc_6384:
000063B6 3003                       		move.w	d3,d0
000063B8 4440                       		neg.w	d0
000063BA 22C0                       		move.l	d0,(a1)+
000063BC 4843                       		swap	d3
000063BE D682                       		add.l	d2,d3
000063C0 4843                       		swap	d3
000063C2 51C9 FFF2                  		dbf	d1,loc_6384
000063C6 4E75                       		rts	
000063C8                            ; End of function Deform_GHZ
000063C8                            
000063C8                            ; ---------------------------------------------------------------------------
000063C8                            ; Labyrinth Zone background layer deformation code
000063C8                            ; ---------------------------------------------------------------------------
000063C8                            
000063C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063C8                            
000063C8                            
000063C8                            Deform_LZ:				; XREF: Deform_Index
000063C8 3838 F73A                  		move.w	($FFFFF73A).w,d4
000063CC 48C4                       		ext.l	d4
000063CE EF84                       		asl.l	#7,d4
000063D0 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000063D4 48C5                       		ext.l	d5
000063D6 EF85                       		asl.l	#7,d5
000063D8 6100 0000                  		bsr.w	ScrollBlock1
000063DC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000063E2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000063E6 323C 00DF                  		move.w	#$DF,d1
000063EA 3038 F700                  		move.w	($FFFFF700).w,d0
000063EE 4440                       		neg.w	d0
000063F0 4840                       		swap	d0
000063F2 3038 F708                  		move.w	($FFFFF708).w,d0
000063F6 4440                       		neg.w	d0
000063F8                            
000063F8                            loc_63C6:
000063F8 22C0                       		move.l	d0,(a1)+
000063FA 51C9 FFFC                  		dbf	d1,loc_63C6
000063FE 3038 F646                  		move.w	($FFFFF646).w,d0
00006402 9078 F704                  		sub.w	($FFFFF704).w,d0
00006406 4E75                       		rts	
00006408                            ; End of function Deform_LZ
00006408                            
00006408                            ; ---------------------------------------------------------------------------
00006408                            ; Marble Zone background layer deformation code
00006408                            ; ---------------------------------------------------------------------------
00006408                            
00006408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006408                            
00006408                            
00006408                            Deform_MZ:				; XREF: Deform_Index
00006408 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000640C 48C4                       		ext.l	d4
0000640E ED84                       		asl.l	#6,d4
00006410 2204                       		move.l	d4,d1
00006412 E384                       		asl.l	#1,d4
00006414 D881                       		add.l	d1,d4
00006416 7A00                       		moveq	#0,d5
00006418 6100 0000                  		bsr.w	ScrollBlock1
0000641C 303C 0200                  		move.w	#$200,d0
00006420 3238 F704                  		move.w	($FFFFF704).w,d1
00006424 0441 01C8                  		subi.w	#$1C8,d1
00006428 6500                       		bcs.s	loc_6402
0000642A 3401                       		move.w	d1,d2
0000642C D241                       		add.w	d1,d1
0000642E D242                       		add.w	d2,d1
00006430 E441                       		asr.w	#2,d1
00006432 D041                       		add.w	d1,d0
00006434                            
00006434                            loc_6402:
00006434 31C0 F714                  		move.w	d0,($FFFFF714).w
00006438 6100 0000                  		bsr.w	ScrollBlock3
0000643C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006442 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006446 323C 00DF                  		move.w	#$DF,d1
0000644A 3038 F700                  		move.w	($FFFFF700).w,d0
0000644E 4440                       		neg.w	d0
00006450 4840                       		swap	d0
00006452 3038 F708                  		move.w	($FFFFF708).w,d0
00006456 4440                       		neg.w	d0
00006458                            
00006458                            loc_6426:
00006458 22C0                       		move.l	d0,(a1)+
0000645A 51C9 FFFC                  		dbf	d1,loc_6426
0000645E 4E75                       		rts	
00006460                            ; End of function Deform_MZ
00006460                            
00006460                            ; ---------------------------------------------------------------------------
00006460                            ; Star Light Zone background layer deformation code
00006460                            ; ---------------------------------------------------------------------------
00006460                            
00006460                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006460                            
00006460                            
00006460                            Deform_SLZ:				; XREF: Deform_Index
00006460 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006464 48C4                       		ext.l	d4
00006466 EB84                       		asl.l	#5,d4
00006468 2204                       		move.l	d4,d1
0000646A E384                       		asl.l	#1,d4
0000646C D881                       		add.l	d1,d4
0000646E 7A00                       		moveq	#0,d5
00006470 6100 0000                  		bsr.w	ScrollBlock1
00006474 6100 0000                  		bsr.w	ScrollBlock3
00006478 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000647C                            	;	move.w	($FFFFF704).w,d0
0000647C                            	;	andi.w	#$7FF,d0
0000647C EA48                       		lsr.w	#5,d0
0000647E 4440                       		neg.w	d0
00006480 0640 0026                  		addi.w	#$26,d0
00006484 31C0 F714                  		move.w	d0,($FFFFF714).w
00006488 3800                       		move.w	d0,d4
0000648A                            	;	bsr.w	ScrollBlock3
0000648A 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006490 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006494                            
00006494 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006498 4440                       		neg.w	d0			; negate (positive to negative)
0000649A 4840                       		swap	d0			; send to the left side of d0
0000649C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000064A0 45F8 A800                  		lea	($FFFFA800).w,a2
000064A4 069A 0000 5000             		addi.l	#$5000,(a2)+
000064AA 069A 0000 C000             		addi.l	#$C000,(a2)+
000064B0 3038 A800                  		move.w	($FFFFA800).w,d0
000064B4 4440                       		neg.w	d0			; negate (positive to negative)
000064B6 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000064B8 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000064BC                            slz_DeformLoop_1:
000064BC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000064BE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000064C2                            
000064C2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000064C6 4440                       		neg.w	d0			; negate (positive to negative)
000064C8 4840                       		swap	d0			; send to the left side of d0
000064CA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000064CE 45F8 A800                  		lea	($FFFFA800).w,a2
000064D2 069A 0000 5000             		addi.l	#$5000,(a2)+
000064D8 069A 0000 C000             		addi.l	#$C000,(a2)+
000064DE 3038 A800                  		move.w	($FFFFA800).w,d0
000064E2 4440                       		neg.w	d0			; negate (positive to negative)
000064E4 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000064E6 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000064EA                            slz_DeformLoop_2:
000064EA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000064EC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
000064F0                            
000064F0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000064F4 4440                       		neg.w	d0			; negate (positive to negative)
000064F6 4840                       		swap	d0			; send to the left side of d0
000064F8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000064FC 45F8 A800                  		lea	($FFFFA800).w,a2
00006500 069A 0000 5000             		addi.l	#$5000,(a2)+
00006506 069A 0000 C000             		addi.l	#$C000,(a2)+
0000650C 3038 A800                  		move.w	($FFFFA800).w,d0
00006510 4440                       		neg.w	d0			; negate (positive to negative)
00006512 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006514 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006518                            slz_DeformLoop_3:
00006518 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000651A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
0000651E                            
0000651E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006522 4440                       		neg.w	d0			; negate (positive to negative)
00006524 4840                       		swap	d0			; send to the left side of d0
00006526 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000652A 45F8 A800                  		lea	($FFFFA800).w,a2
0000652E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006534 069A 0000 C000             		addi.l	#$C000,(a2)+
0000653A 3038 A800                  		move.w	($FFFFA800).w,d0
0000653E 4440                       		neg.w	d0			; negate (positive to negative)
00006540 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006542 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006546                            slz_DeformLoop_4:
00006546 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006548 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
0000654C                            
0000654C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006550 4440                       		neg.w	d0			; negate (positive to negative)
00006552 4840                       		swap	d0			; send to the left side of d0
00006554 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006558 45F8 A800                  		lea	($FFFFA800).w,a2
0000655C 069A 0000 5000             		addi.l	#$5000,(a2)+
00006562 069A 0000 C000             		addi.l	#$C000,(a2)+
00006568 3038 A800                  		move.w	($FFFFA800).w,d0
0000656C 4440                       		neg.w	d0			; negate (positive to negative)
0000656E E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006570 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006574                            slz_DeformLoop_5:
00006574 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006576 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
0000657A                            
0000657A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000657E 4440                       		neg.w	d0			; negate (positive to negative)
00006580 4840                       		swap	d0			; send to the left side of d0
00006582 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006586 4440                       		neg.w	d0			; negate (positive to negative)
00006588 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
0000658A 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000658E                            slz_DeformLoop_6:
0000658E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006590 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006594                            
00006594 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006598 4440                       		neg.w	d0			; negate (positive to negative)
0000659A 4840                       		swap	d0			; send to the left side of d0
0000659C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065A0 4440                       		neg.w	d0			; negate (positive to negative)
000065A2 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
000065A4 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065A8                            slz_DeformLoop_7:
000065A8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065AA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
000065AE                            
000065AE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065B2 4440                       		neg.w	d0			; negate (positive to negative)
000065B4 4840                       		swap	d0			; send to the left side of d0
000065B6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065BA 4440                       		neg.w	d0			; negate (positive to negative)
000065BC EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
000065BE 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065C2                            slz_DeformLoop_8:
000065C2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065C4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
000065C8                            
000065C8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065CC 4440                       		neg.w	d0			; negate (positive to negative)
000065CE 4840                       		swap	d0			; send to the left side of d0
000065D0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065D4 4440                       		neg.w	d0			; negate (positive to negative)
000065D6 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000065D8 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065DC                            slz_DeformLoop_9:
000065DC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065DE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000065E2                            
000065E2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065E6 4440                       		neg.w	d0			; negate (positive to negative)
000065E8 4840                       		swap	d0			; send to the left side of d0
000065EA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065EE 4440                       		neg.w	d0			; negate (positive to negative)
000065F0 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000065F2 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065F6                            slz_DeformLoop_10:
000065F6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065F8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
000065FC                            
000065FC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006600 4440                       		neg.w	d0			; negate (positive to negative)
00006602 4840                       		swap	d0			; send to the left side of d0
00006604 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006608 4440                       		neg.w	d0			; negate (positive to negative)
0000660A E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000660C 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006610                            slz_DeformLoop_11:
00006610 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006612 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006616                            
00006616 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000661A 4440                       		neg.w	d0			; negate (positive to negative)
0000661C 4840                       		swap	d0			; send to the left side of d0
0000661E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006622 4440                       		neg.w	d0			; negate (positive to negative)
00006624 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006626 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000662A                            slz_DeformLoop_12:
0000662A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000662C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006630                            
00006630 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006634 4440                       		neg.w	d0			; negate (positive to negative)
00006636 4840                       		swap	d0			; send to the left side of d0
00006638 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000663C 4440                       		neg.w	d0			; negate (positive to negative)
0000663E E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006640 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006644                            slz_DeformLoop_13:
00006644 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006646 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
0000664A 4E75                       		rts	
0000664C                            ; End of function Deform_SLZ
0000664C 4E75                       		rts	
0000664E                            ; End of function Deform_SLZ_2
0000664E                            
0000664E                            ; ---------------------------------------------------------------------------
0000664E                            ; Spring Yard Zone background layer deformation	code
0000664E                            ; ---------------------------------------------------------------------------
0000664E                            
0000664E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000664E                            
0000664E                            
0000664E                            Deform_SYZ:				; XREF: Deform_Index
0000664E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006652 48C4                       		ext.l	d4
00006654 ED84                       		asl.l	#6,d4
00006656 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000665A 48C5                       		ext.l	d5
0000665C E985                       		asl.l	#4,d5
0000665E 2205                       		move.l	d5,d1
00006660 E385                       		asl.l	#1,d5
00006662 DA81                       		add.l	d1,d5
00006664 6100 0000                  		bsr.w	ScrollBlock1
00006668 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000666E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006672 323C 00DF                  		move.w	#$DF,d1
00006676 3038 F700                  		move.w	($FFFFF700).w,d0
0000667A 4440                       		neg.w	d0
0000667C 4840                       		swap	d0
0000667E 3038 F708                  		move.w	($FFFFF708).w,d0
00006682 4440                       		neg.w	d0
00006684                            
00006684                            loc_653C:
00006684 22C0                       		move.l	d0,(a1)+
00006686 51C9 FFFC                  		dbf	d1,loc_653C
0000668A 4E75                       		rts	
0000668C                            ; End of function Deform_SYZ
0000668C                            
0000668C                            ; ---------------------------------------------------------------------------
0000668C                            ; Scrap	Brain Zone background layer deformation	code
0000668C                            ; ---------------------------------------------------------------------------
0000668C                            
0000668C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000668C                            
0000668C                            
0000668C                            Deform_SBZ:				; XREF: Deform_Index
0000668C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006690 48C4                       		ext.l	d4
00006692 ED84                       		asl.l	#6,d4
00006694 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006698 48C5                       		ext.l	d5
0000669A E985                       		asl.l	#4,d5
0000669C E385                       		asl.l	#1,d5
0000669E 6100 0000                  		bsr.w	ScrollBlock1
000066A2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000066A8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066AC 323C 00DF                  		move.w	#$DF,d1
000066B0 3038 F700                  		move.w	($FFFFF700).w,d0
000066B4 4440                       		neg.w	d0
000066B6 4840                       		swap	d0
000066B8 3038 F708                  		move.w	($FFFFF708).w,d0
000066BC 4440                       		neg.w	d0
000066BE                            
000066BE                            loc_6576:
000066BE 22C0                       		move.l	d0,(a1)+
000066C0 51C9 FFFC                  		dbf	d1,loc_6576
000066C4 4E75                       		rts	
000066C6                            ; End of function Deform_SBZ
000066C6                            
000066C6                            ; ---------------------------------------------------------------------------
000066C6                            ; Subroutine to	scroll the level horizontally as Sonic moves
000066C6                            ; ---------------------------------------------------------------------------
000066C6                            
000066C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066C6                            
000066C6                            
000066C6                            ScrollHoriz:				; XREF: DeformBgLayer
000066C6 3838 F700                  		move.w	($FFFFF700).w,d4
000066CA 6100                       		bsr.s	ScrollHoriz2
000066CC 3038 F700                  		move.w	($FFFFF700).w,d0
000066D0 0240 0010                  		andi.w	#$10,d0
000066D4 1238 F74A                  		move.b	($FFFFF74A).w,d1
000066D8 B300                       		eor.b	d1,d0
000066DA 6600                       		bne.s	locret_65B0
000066DC 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000066E2 3038 F700                  		move.w	($FFFFF700).w,d0
000066E6 9044                       		sub.w	d4,d0
000066E8 6A00                       		bpl.s	loc_65AA
000066EA 08F8 0002 F754             		bset	#2,($FFFFF754).w
000066F0 4E75                       		rts	
000066F2                            ; ===========================================================================
000066F2                            
000066F2                            loc_65AA:
000066F2 08F8 0003 F754             		bset	#3,($FFFFF754).w
000066F8                            
000066F8                            locret_65B0:
000066F8 4E75                       		rts	
000066FA                            ; End of function ScrollHoriz
000066FA                            
000066FA                            
000066FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066FA                            
000066FA                            
000066FA                            ScrollHoriz2:				; XREF: ScrollHoriz
000066FA 3038 D008                  		move.w	($FFFFD008).w,d0
000066FE 9078 F700                  		sub.w	($FFFFF700).w,d0
00006702 0440 0090                  		subi.w	#$90,d0
00006706 6500                       		bcs.s	loc_65F6
00006708 0440 0010                  		subi.w	#$10,d0
0000670C 6400                       		bcc.s	loc_65CC
0000670E 4278 F73A                  		clr.w	($FFFFF73A).w
00006712 4E75                       		rts	
00006714                            ; ===========================================================================
00006714                            
00006714                            loc_65CC:
00006714 0C40 0010                  		cmpi.w	#$10,d0
00006718 6500                       		bcs.s	loc_65D6
0000671A 303C 0010                  		move.w	#$10,d0
0000671E                            
0000671E                            loc_65D6:
0000671E D078 F700                  		add.w	($FFFFF700).w,d0
00006722 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006726 6D00                       		blt.s	loc_65E4
00006728 3038 F72A                  		move.w	($FFFFF72A).w,d0
0000672C                            
0000672C                            loc_65E4:
0000672C 3200                       		move.w	d0,d1
0000672E 9278 F700                  		sub.w	($FFFFF700).w,d1
00006732 E141                       		asl.w	#8,d1
00006734 31C0 F700                  		move.w	d0,($FFFFF700).w
00006738 31C1 F73A                  		move.w	d1,($FFFFF73A).w
0000673C 4E75                       		rts	
0000673E                            ; ===========================================================================
0000673E                            
0000673E                            loc_65F6:				; XREF: ScrollHoriz2
0000673E D078 F700                  		add.w	($FFFFF700).w,d0
00006742 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006746 6EE4                       		bgt.s	loc_65E4
00006748 3038 F728                  		move.w	($FFFFF728).w,d0
0000674C 60DE                       		bra.s	loc_65E4
0000674E                            ; End of function ScrollHoriz2
0000674E                            
0000674E                            ; ===========================================================================
0000674E 4A40                       		tst.w	d0
00006750 6A00                       		bpl.s	loc_6610
00006752 303C FFFE                  		move.w	#-2,d0
00006756 60E6                       		bra.s	loc_65F6
00006758                            ; ===========================================================================
00006758                            
00006758                            loc_6610:
00006758 303C 0002                  		move.w	#2,d0
0000675C 60B6                       		bra.s	loc_65CC
0000675E                            
0000675E                            ; ---------------------------------------------------------------------------
0000675E                            ; Subroutine to	scroll the level vertically as Sonic moves
0000675E                            ; ---------------------------------------------------------------------------
0000675E                            
0000675E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000675E                            
0000675E                            
0000675E                            ScrollVertical:				; XREF: DeformBgLayer
0000675E 7200                       		moveq	#0,d1
00006760 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006764 9078 F704                  		sub.w	($FFFFF704).w,d0
00006768 0838 0002 D022             		btst	#2,($FFFFD022).w
0000676E 6700                       		beq.s	loc_662A
00006770 5B40                       		subq.w	#5,d0
00006772                            
00006772                            loc_662A:
00006772 0838 0001 D022             		btst	#1,($FFFFD022).w
00006778 6700                       		beq.s	loc_664A
0000677A 0640 0020                  		addi.w	#$20,d0
0000677E 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006782 6500                       		bcs.s	loc_6696
00006784 0440 0040                  		subi.w	#$40,d0
00006788 6400                       		bcc.s	loc_6696
0000678A 4A38 F75C                  		tst.b	($FFFFF75C).w
0000678E 6600                       		bne.s	loc_66A8
00006790 6000                       		bra.s	loc_6656
00006792                            ; ===========================================================================
00006792                            
00006792                            loc_664A:
00006792 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006796 6600                       		bne.s	loc_665C
00006798 4A38 F75C                  		tst.b	($FFFFF75C).w
0000679C 6600                       		bne.s	loc_66A8
0000679E                            
0000679E                            loc_6656:
0000679E 4278 F73C                  		clr.w	($FFFFF73C).w
000067A2 4E75                       		rts	
000067A4                            ; ===========================================================================
000067A4                            
000067A4                            loc_665C:
000067A4 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
000067AA 6600                       		bne.s	loc_6684
000067AC 3238 D014                  		move.w	($FFFFD014).w,d1
000067B0 6A00                       		bpl.s	loc_666C
000067B2 4441                       		neg.w	d1
000067B4                            
000067B4                            loc_666C:
000067B4 0C41 0800                  		cmpi.w	#$800,d1
000067B8 6400                       		bcc.s	loc_6696
000067BA 323C 0600                  		move.w	#$600,d1
000067BE 0C40 0006                  		cmpi.w	#6,d0
000067C2 6E00                       		bgt.s	loc_66F6
000067C4 0C40 FFFA                  		cmpi.w	#-6,d0
000067C8 6D00                       		blt.s	loc_66C0
000067CA 6000                       		bra.s	loc_66AE
000067CC                            ; ===========================================================================
000067CC                            
000067CC                            loc_6684:
000067CC 323C 0200                  		move.w	#$200,d1
000067D0 0C40 0002                  		cmpi.w	#2,d0
000067D4 6E00                       		bgt.s	loc_66F6
000067D6 0C40 FFFE                  		cmpi.w	#-2,d0
000067DA 6D00                       		blt.s	loc_66C0
000067DC 6000                       		bra.s	loc_66AE
000067DE                            ; ===========================================================================
000067DE                            
000067DE                            loc_6696:
000067DE 323C 1000                  		move.w	#$1000,d1
000067E2 0C40 0010                  		cmpi.w	#$10,d0
000067E6 6E00                       		bgt.s	loc_66F6
000067E8 0C40 FFF0                  		cmpi.w	#-$10,d0
000067EC 6D00                       		blt.s	loc_66C0
000067EE 6000                       		bra.s	loc_66AE
000067F0                            ; ===========================================================================
000067F0                            
000067F0                            loc_66A8:
000067F0 7000                       		moveq	#0,d0
000067F2 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000067F6                            
000067F6                            loc_66AE:
000067F6 7200                       		moveq	#0,d1
000067F8 3200                       		move.w	d0,d1
000067FA D278 F704                  		add.w	($FFFFF704).w,d1
000067FE 4A40                       		tst.w	d0
00006800 6A00 0000                  		bpl.w	loc_6700
00006804 6000 0000                  		bra.w	loc_66CC
00006808                            ; ===========================================================================
00006808                            
00006808                            loc_66C0:
00006808 4441                       		neg.w	d1
0000680A 48C1                       		ext.l	d1
0000680C E181                       		asl.l	#8,d1
0000680E D2B8 F704                  		add.l	($FFFFF704).w,d1
00006812 4841                       		swap	d1
00006814                            
00006814                            loc_66CC:
00006814 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006818 6E00                       		bgt.s	loc_6724
0000681A 0C41 FF00                  		cmpi.w	#-$100,d1
0000681E 6E00                       		bgt.s	loc_66F0
00006820 0241 07FF                  		andi.w	#$7FF,d1
00006824 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0000682A 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006830 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006836 6000                       		bra.s	loc_6724
00006838                            ; ===========================================================================
00006838                            
00006838                            loc_66F0:
00006838 3238 F72C                  		move.w	($FFFFF72C).w,d1
0000683C 6000                       		bra.s	loc_6724
0000683E                            ; ===========================================================================
0000683E                            
0000683E                            loc_66F6:
0000683E 48C1                       		ext.l	d1
00006840 E181                       		asl.l	#8,d1
00006842 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006846 4841                       		swap	d1
00006848                            
00006848                            loc_6700:
00006848 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
0000684C 6D00                       		blt.s	loc_6724
0000684E 0441 0800                  		subi.w	#$800,d1
00006852 6500                       		bcs.s	loc_6720
00006854 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0000685A 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006860 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006866 6000                       		bra.s	loc_6724
00006868                            ; ===========================================================================
00006868                            
00006868                            loc_6720:
00006868 3238 F72E                  		move.w	($FFFFF72E).w,d1
0000686C                            
0000686C                            loc_6724:
0000686C 3838 F704                  		move.w	($FFFFF704).w,d4
00006870 4841                       		swap	d1
00006872 2601                       		move.l	d1,d3
00006874 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006878 E09B                       		ror.l	#8,d3
0000687A 31C3 F73C                  		move.w	d3,($FFFFF73C).w
0000687E 21C1 F704                  		move.l	d1,($FFFFF704).w
00006882 3038 F704                  		move.w	($FFFFF704).w,d0
00006886 0240 0010                  		andi.w	#$10,d0
0000688A 1238 F74B                  		move.b	($FFFFF74B).w,d1
0000688E B300                       		eor.b	d1,d0
00006890 6600                       		bne.s	locret_6766
00006892 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006898 3038 F704                  		move.w	($FFFFF704).w,d0
0000689C 9044                       		sub.w	d4,d0
0000689E 6A00                       		bpl.s	loc_6760
000068A0 08F8 0000 F754             		bset	#0,($FFFFF754).w
000068A6 4E75                       		rts	
000068A8                            ; ===========================================================================
000068A8                            
000068A8                            loc_6760:
000068A8 08F8 0001 F754             		bset	#1,($FFFFF754).w
000068AE                            
000068AE                            locret_6766:
000068AE 4E75                       		rts	
000068B0                            ; End of function ScrollVertical
000068B0                            
000068B0                            
000068B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068B0                            
000068B0                            
000068B0                            ScrollBlock1:				; XREF: Deform_GHZ; et al
000068B0 2438 F708                  		move.l	($FFFFF708).w,d2
000068B4 2002                       		move.l	d2,d0
000068B6 D084                       		add.l	d4,d0
000068B8 21C0 F708                  		move.l	d0,($FFFFF708).w
000068BC 2200                       		move.l	d0,d1
000068BE 4841                       		swap	d1
000068C0 0241 0010                  		andi.w	#$10,d1
000068C4 1638 F74C                  		move.b	($FFFFF74C).w,d3
000068C8 B701                       		eor.b	d3,d1
000068CA 6600                       		bne.s	loc_679C
000068CC 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
000068D2 9082                       		sub.l	d2,d0
000068D4 6A00                       		bpl.s	loc_6796
000068D6 08F8 0002 F756             		bset	#2,($FFFFF756).w
000068DC 6000                       		bra.s	loc_679C
000068DE                            ; ===========================================================================
000068DE                            
000068DE                            loc_6796:
000068DE 08F8 0003 F756             		bset	#3,($FFFFF756).w
000068E4                            
000068E4                            loc_679C:
000068E4 2638 F70C                  		move.l	($FFFFF70C).w,d3
000068E8 2003                       		move.l	d3,d0
000068EA D085                       		add.l	d5,d0
000068EC 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000068F0 2200                       		move.l	d0,d1
000068F2 4841                       		swap	d1
000068F4 0241 0010                  		andi.w	#$10,d1
000068F8 1438 F74D                  		move.b	($FFFFF74D).w,d2
000068FC B501                       		eor.b	d2,d1
000068FE 6600                       		bne.s	locret_67D0
00006900 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006906 9083                       		sub.l	d3,d0
00006908 6A00                       		bpl.s	loc_67CA
0000690A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006910 4E75                       		rts	
00006912                            ; ===========================================================================
00006912                            
00006912                            loc_67CA:
00006912 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006918                            
00006918                            locret_67D0:
00006918 4E75                       		rts	
0000691A                            ; End of function ScrollBlock1
0000691A                            
0000691A                            
0000691A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000691A                            
0000691A                            
0000691A                            ScrollBlock2:				; XREF: Deform_SLZ
0000691A 2438 F708                  		move.l	($FFFFF708).w,d2
0000691E 2002                       		move.l	d2,d0
00006920 D084                       		add.l	d4,d0
00006922 21C0 F708                  		move.l	d0,($FFFFF708).w
00006926 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000692A 2003                       		move.l	d3,d0
0000692C D085                       		add.l	d5,d0
0000692E 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006932 2200                       		move.l	d0,d1
00006934 4841                       		swap	d1
00006936 0241 0010                  		andi.w	#$10,d1
0000693A 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000693E B501                       		eor.b	d2,d1
00006940 6600                       		bne.s	locret_6812
00006942 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006948 9083                       		sub.l	d3,d0
0000694A 6A00                       		bpl.s	loc_680C
0000694C 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006952 4E75                       		rts	
00006954                            ; ===========================================================================
00006954                            
00006954                            loc_680C:
00006954 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000695A                            
0000695A                            locret_6812:
0000695A 4E75                       		rts	
0000695C                            ; End of function ScrollBlock2
0000695C                            
0000695C                            
0000695C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000695C                            
0000695C                            
0000695C                            ScrollBlock3:				; XREF: Deform_GHZ; et al
0000695C 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006960 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006964 3200                       		move.w	d0,d1
00006966 0241 0010                  		andi.w	#$10,d1
0000696A 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000696E B501                       		eor.b	d2,d1
00006970 6600                       		bne.s	locret_6842
00006972 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006978 9043                       		sub.w	d3,d0
0000697A 6A00                       		bpl.s	loc_683C
0000697C 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006982 4E75                       		rts	
00006984                            ; ===========================================================================
00006984                            
00006984                            loc_683C:
00006984 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000698A                            
0000698A                            locret_6842:
0000698A 4E75                       		rts	
0000698C                            ; End of function ScrollBlock3
0000698C                            
0000698C                            
0000698C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000698C                            
0000698C                            
0000698C                            ScrollBlock4:				; XREF: Deform_GHZ
0000698C 3438 F710                  		move.w	($FFFFF710).w,d2
00006990 3638 F714                  		move.w	($FFFFF714).w,d3
00006994 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006998 48C0                       		ext.l	d0
0000699A EF80                       		asl.l	#7,d0
0000699C D1B8 F710                  		add.l	d0,($FFFFF710).w
000069A0 3038 F710                  		move.w	($FFFFF710).w,d0
000069A4 0240 0010                  		andi.w	#$10,d0
000069A8 1238 F74E                  		move.b	($FFFFF74E).w,d1
000069AC B300                       		eor.b	d1,d0
000069AE 6600                       		bne.s	locret_6884
000069B0 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
000069B6 3038 F710                  		move.w	($FFFFF710).w,d0
000069BA 9042                       		sub.w	d2,d0
000069BC 6A00                       		bpl.s	loc_687E
000069BE 08F8 0002 F758             		bset	#2,($FFFFF758).w
000069C4 6000                       		bra.s	locret_6884
000069C6                            ; ===========================================================================
000069C6                            
000069C6                            loc_687E:
000069C6 08F8 0003 F758             		bset	#3,($FFFFF758).w
000069CC                            
000069CC                            locret_6884:
000069CC 4E75                       		rts	
000069CE                            ; End of function ScrollBlock4
000069CE                            
000069CE                            
000069CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069CE                            
000069CE                            
000069CE                            sub_6886:				; XREF: loc_C44
000069CE 4BF9 00C0 0004             		lea	($C00004).l,a5
000069D4 4DF9 00C0 0000             		lea	($C00000).l,a6
000069DA 45F8 F756                  		lea	($FFFFF756).w,a2
000069DE 47F8 F708                  		lea	($FFFFF708).w,a3
000069E2 49F8 A440                  		lea	($FFFFA440).w,a4
000069E6 343C 6000                  		move.w	#$6000,d2
000069EA 6100 0000                  		bsr.w	sub_6954
000069EE 45F8 F758                  		lea	($FFFFF758).w,a2
000069F2 47F8 F710                  		lea	($FFFFF710).w,a3
000069F6 6000 0000                  		bra.w	sub_69F4
000069FA                            ; End of function sub_6886
000069FA                            
000069FA                            ; ---------------------------------------------------------------------------
000069FA                            ; Subroutine to	display	correct	tiles as you move
000069FA                            ; ---------------------------------------------------------------------------
000069FA                            
000069FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069FA                            
000069FA                            
000069FA                            LoadTilesAsYouMove:			; XREF: Demo_Time
000069FA 4BF9 00C0 0004             		lea	($C00004).l,a5
00006A00 4DF9 00C0 0000             		lea	($C00000).l,a6
00006A06 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006A0A 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006A0E 49F8 A440                  		lea	($FFFFA440).w,a4
00006A12 343C 6000                  		move.w	#$6000,d2
00006A16 6100 0000                  		bsr.w	sub_6954
00006A1A 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006A1E 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006A22 6100 0000                  		bsr.w	sub_69F4
00006A26 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006A2A 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006A2E 49F8 A400                  		lea	($FFFFA400).w,a4
00006A32 343C 4000                  		move.w	#$4000,d2
00006A36 4A12                       		tst.b	(a2)
00006A38 6700                       		beq.s	locret_6952
00006A3A 0892 0000                  		bclr	#0,(a2)
00006A3E 6700                       		beq.s	loc_6908
00006A40 78F0                       		moveq	#-$10,d4
00006A42 7AF0                       		moveq	#-$10,d5
00006A44 6100 0000                  		bsr.w	sub_6C20
00006A48 78F0                       		moveq	#-$10,d4
00006A4A 7AF0                       		moveq	#-$10,d5
00006A4C 6100 0000                  		bsr.w	sub_6AD8
00006A50                            
00006A50                            loc_6908:
00006A50 0892 0001                  		bclr	#1,(a2)
00006A54 6700                       		beq.s	loc_6922
00006A56 383C 00E0                  		move.w	#$E0,d4
00006A5A 7AF0                       		moveq	#-$10,d5
00006A5C 6100 0000                  		bsr.w	sub_6C20
00006A60 383C 00E0                  		move.w	#$E0,d4
00006A64 7AF0                       		moveq	#-$10,d5
00006A66 6100 0000                  		bsr.w	sub_6AD8
00006A6A                            
00006A6A                            loc_6922:
00006A6A 0892 0002                  		bclr	#2,(a2)
00006A6E 6700                       		beq.s	loc_6938
00006A70 78F0                       		moveq	#-$10,d4
00006A72 7AF0                       		moveq	#-$10,d5
00006A74 6100 0000                  		bsr.w	sub_6C20
00006A78 78F0                       		moveq	#-$10,d4
00006A7A 7AF0                       		moveq	#-$10,d5
00006A7C 6100 0000                  		bsr.w	sub_6B04
00006A80                            
00006A80                            loc_6938:
00006A80 0892 0003                  		bclr	#3,(a2)
00006A84 6700                       		beq.s	locret_6952
00006A86 78F0                       		moveq	#-$10,d4
00006A88 3A3C 0140                  		move.w	#$140,d5
00006A8C 6100 0000                  		bsr.w	sub_6C20
00006A90 78F0                       		moveq	#-$10,d4
00006A92 3A3C 0140                  		move.w	#$140,d5
00006A96 6100 0000                  		bsr.w	sub_6B04
00006A9A                            
00006A9A                            locret_6952:
00006A9A 4E75                       		rts	
00006A9C                            ; End of function LoadTilesAsYouMove
00006A9C                            
00006A9C                            
00006A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A9C                            
00006A9C                            
00006A9C                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006A9C 4A12                       		tst.b	(a2)
00006A9E 6700 0000                  		beq.w	locret_69F2
00006AA2 0892 0000                  		bclr	#0,(a2)
00006AA6 6700                       		beq.s	loc_6972
00006AA8 78F0                       		moveq	#-$10,d4
00006AAA 7AF0                       		moveq	#-$10,d5
00006AAC 6100 0000                  		bsr.w	sub_6C20
00006AB0 78F0                       		moveq	#-$10,d4
00006AB2 7AF0                       		moveq	#-$10,d5
00006AB4 7C1F                       		moveq	#$1F,d6
00006AB6 6100 0000                  		bsr.w	sub_6ADA
00006ABA                            
00006ABA                            loc_6972:
00006ABA 0892 0001                  		bclr	#1,(a2)
00006ABE 6700                       		beq.s	loc_698E
00006AC0 383C 00E0                  		move.w	#$E0,d4
00006AC4 7AF0                       		moveq	#-$10,d5
00006AC6 6100 0000                  		bsr.w	sub_6C20
00006ACA 383C 00E0                  		move.w	#$E0,d4
00006ACE 7AF0                       		moveq	#-$10,d5
00006AD0 7C1F                       		moveq	#$1F,d6
00006AD2 6100 0000                  		bsr.w	sub_6ADA
00006AD6                            
00006AD6                            loc_698E:
00006AD6 0892 0002                  		bclr	#2,(a2)
00006ADA 6700                       		beq.s	loc_69BE
00006ADC 78F0                       		moveq	#-$10,d4
00006ADE 7AF0                       		moveq	#-$10,d5
00006AE0 6100 0000                  		bsr.w	sub_6C20
00006AE4 78F0                       		moveq	#-$10,d4
00006AE6 7AF0                       		moveq	#-$10,d5
00006AE8 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006AEC 322B 0004                  		move.w	4(a3),d1
00006AF0 0241 FFF0                  		andi.w	#-$10,d1
00006AF4 9C41                       		sub.w	d1,d6
00006AF6 6D00                       		blt.s	loc_69BE
00006AF8 E84E                       		lsr.w	#4,d6
00006AFA 0C46 000F                  		cmpi.w	#$F,d6
00006AFE 6500                       		bcs.s	loc_69BA
00006B00 7C0F                       		moveq	#$F,d6
00006B02                            
00006B02                            loc_69BA:
00006B02 6100 0000                  		bsr.w	sub_6B06
00006B06                            
00006B06                            loc_69BE:
00006B06 0892 0003                  		bclr	#3,(a2)
00006B0A 6700                       		beq.s	locret_69F2
00006B0C 78F0                       		moveq	#-$10,d4
00006B0E 3A3C 0140                  		move.w	#$140,d5
00006B12 6100 0000                  		bsr.w	sub_6C20
00006B16 78F0                       		moveq	#-$10,d4
00006B18 3A3C 0140                  		move.w	#$140,d5
00006B1C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006B20 322B 0004                  		move.w	4(a3),d1
00006B24 0241 FFF0                  		andi.w	#-$10,d1
00006B28 9C41                       		sub.w	d1,d6
00006B2A 6D00                       		blt.s	locret_69F2
00006B2C E84E                       		lsr.w	#4,d6
00006B2E 0C46 000F                  		cmpi.w	#$F,d6
00006B32 6500                       		bcs.s	loc_69EE
00006B34 7C0F                       		moveq	#$F,d6
00006B36                            
00006B36                            loc_69EE:
00006B36 6100 0000                  		bsr.w	sub_6B06
00006B3A                            
00006B3A                            locret_69F2:
00006B3A 4E75                       		rts	
00006B3C                            ; End of function sub_6954
00006B3C                            
00006B3C                            
00006B3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B3C                            
00006B3C                            
00006B3C                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006B3C 4A12                       		tst.b	(a2)
00006B3E 6700 0000                  		beq.w	locret_6A80
00006B42 0892 0002                  		bclr	#2,(a2)
00006B46 6700                       		beq.s	loc_6A3E
00006B48 0C53 0010                  		cmpi.w	#$10,(a3)
00006B4C 6500                       		bcs.s	loc_6A3E
00006B4E 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006B52 322B 0004                  		move.w	4(a3),d1
00006B56 0241 FFF0                  		andi.w	#-$10,d1
00006B5A 9841                       		sub.w	d1,d4
00006B5C 3F04                       		move.w	d4,-(sp)
00006B5E 7AF0                       		moveq	#-$10,d5
00006B60 6100 0000                  		bsr.w	sub_6C20
00006B64 381F                       		move.w	(sp)+,d4
00006B66 7AF0                       		moveq	#-$10,d5
00006B68 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006B6C 322B 0004                  		move.w	4(a3),d1
00006B70 0241 FFF0                  		andi.w	#-$10,d1
00006B74 9C41                       		sub.w	d1,d6
00006B76 6D00                       		blt.s	loc_6A3E
00006B78 E84E                       		lsr.w	#4,d6
00006B7A 0446 000E                  		subi.w	#$E,d6
00006B7E 6400                       		bcc.s	loc_6A3E
00006B80 4446                       		neg.w	d6
00006B82 6100 0000                  		bsr.w	sub_6B06
00006B86                            
00006B86                            loc_6A3E:
00006B86 0892 0003                  		bclr	#3,(a2)
00006B8A 6700                       		beq.s	locret_6A80
00006B8C 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006B90 322B 0004                  		move.w	4(a3),d1
00006B94 0241 FFF0                  		andi.w	#-$10,d1
00006B98 9841                       		sub.w	d1,d4
00006B9A 3F04                       		move.w	d4,-(sp)
00006B9C 3A3C 0140                  		move.w	#$140,d5
00006BA0 6100 0000                  		bsr.w	sub_6C20
00006BA4 381F                       		move.w	(sp)+,d4
00006BA6 3A3C 0140                  		move.w	#$140,d5
00006BAA 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006BAE 322B 0004                  		move.w	4(a3),d1
00006BB2 0241 FFF0                  		andi.w	#-$10,d1
00006BB6 9C41                       		sub.w	d1,d6
00006BB8 6D00                       		blt.s	locret_6A80
00006BBA E84E                       		lsr.w	#4,d6
00006BBC 0446 000E                  		subi.w	#$E,d6
00006BC0 6400                       		bcc.s	locret_6A80
00006BC2 4446                       		neg.w	d6
00006BC4 6100 0000                  		bsr.w	sub_6B06
00006BC8                            
00006BC8                            locret_6A80:
00006BC8 4E75                       		rts	
00006BCA                            ; End of function sub_69F4
00006BCA                            
00006BCA                            ; ===========================================================================
00006BCA 4A12                       		tst.b	(a2)
00006BCC 6700                       		beq.s	locret_6AD6
00006BCE 0892 0002                  		bclr	#2,(a2)
00006BD2 6700                       		beq.s	loc_6AAC
00006BD4 383C 00D0                  		move.w	#$D0,d4
00006BD8 322B 0004                  		move.w	4(a3),d1
00006BDC 0241 FFF0                  		andi.w	#-$10,d1
00006BE0 9841                       		sub.w	d1,d4
00006BE2 3F04                       		move.w	d4,-(sp)
00006BE4 7AF0                       		moveq	#-$10,d5
00006BE6 6100 0000                  		bsr.w	sub_6C3C
00006BEA 381F                       		move.w	(sp)+,d4
00006BEC 7AF0                       		moveq	#-$10,d5
00006BEE 7C02                       		moveq	#2,d6
00006BF0 6100 0000                  		bsr.w	sub_6B06
00006BF4                            
00006BF4                            loc_6AAC:
00006BF4 0892 0003                  		bclr	#3,(a2)
00006BF8 6700                       		beq.s	locret_6AD6
00006BFA 383C 00D0                  		move.w	#$D0,d4
00006BFE 322B 0004                  		move.w	4(a3),d1
00006C02 0241 FFF0                  		andi.w	#-$10,d1
00006C06 9841                       		sub.w	d1,d4
00006C08 3F04                       		move.w	d4,-(sp)
00006C0A 3A3C 0140                  		move.w	#$140,d5
00006C0E 6100 0000                  		bsr.w	sub_6C3C
00006C12 381F                       		move.w	(sp)+,d4
00006C14 3A3C 0140                  		move.w	#$140,d5
00006C18 7C02                       		moveq	#2,d6
00006C1A 6100 0000                  		bsr.w	sub_6B06
00006C1E                            
00006C1E                            locret_6AD6:
00006C1E 4E75                       		rts	
00006C20                            
00006C20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C20                            
00006C20                            
00006C20                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006C20 7C15                       		moveq	#$15,d6
00006C22                            ; End of function sub_6AD8
00006C22                            
00006C22                            
00006C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C22                            
00006C22                            
00006C22                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006C22 2E3C 0080 0000             		move.l	#$800000,d7
00006C28 2200                       		move.l	d0,d1
00006C2A                            
00006C2A                            loc_6AE2:
00006C2A 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006C2E 6100 0000                  		bsr.w	sub_6BD6
00006C32 2001                       		move.l	d1,d0
00006C34 6100 0000                  		bsr.w	sub_6B32
00006C38 5801                       		addq.b	#4,d1
00006C3A 0201 007F                  		andi.b	#$7F,d1
00006C3E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006C42 0645 0010                  		addi.w	#$10,d5
00006C46 51CE FFE2                  		dbf	d6,loc_6AE2
00006C4A 4E75                       		rts	
00006C4C                            ; End of function sub_6ADA
00006C4C                            
00006C4C                            
00006C4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C4C                            
00006C4C                            
00006C4C                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006C4C 7C0F                       		moveq	#$F,d6
00006C4E                            ; End of function sub_6B04
00006C4E                            
00006C4E                            
00006C4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C4E                            
00006C4E                            
00006C4E                            sub_6B06:				; XREF: sub_6954
00006C4E 2E3C 0080 0000             		move.l	#$800000,d7
00006C54 2200                       		move.l	d0,d1
00006C56                            
00006C56                            loc_6B0E:
00006C56 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006C5A 6100 0000                  		bsr.w	sub_6BD6
00006C5E 2001                       		move.l	d1,d0
00006C60 6100 0000                  		bsr.w	sub_6B32
00006C64 0641 0100                  		addi.w	#$100,d1
00006C68 0241 0FFF                  		andi.w	#$FFF,d1
00006C6C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006C70 0644 0010                  		addi.w	#$10,d4
00006C74 51CE FFE0                  		dbf	d6,loc_6B0E
00006C78 4E75                       		rts	
00006C7A                            ; End of function sub_6B06
00006C7A                            
00006C7A                            
00006C7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C7A                            
00006C7A                            
00006C7A                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006C7A 8042                       		or.w	d2,d0
00006C7C 4840                       		swap	d0
00006C7E 0810 0004                  		btst	#4,(a0)
00006C82 6600                       		bne.s	loc_6B6E
00006C84 0810 0003                  		btst	#3,(a0)
00006C88 6600                       		bne.s	loc_6B4E
00006C8A 2A80                       		move.l	d0,(a5)
00006C8C 2C99                       		move.l	(a1)+,(a6)
00006C8E D087                       		add.l	d7,d0
00006C90 2A80                       		move.l	d0,(a5)
00006C92 2C99                       		move.l	(a1)+,(a6)
00006C94 4E75                       		rts	
00006C96                            ; ===========================================================================
00006C96                            
00006C96                            loc_6B4E:
00006C96 2A80                       		move.l	d0,(a5)
00006C98 2819                       		move.l	(a1)+,d4
00006C9A 0A84 0800 0800             		eori.l	#$8000800,d4
00006CA0 4844                       		swap	d4
00006CA2 2C84                       		move.l	d4,(a6)
00006CA4 D087                       		add.l	d7,d0
00006CA6 2A80                       		move.l	d0,(a5)
00006CA8 2819                       		move.l	(a1)+,d4
00006CAA 0A84 0800 0800             		eori.l	#$8000800,d4
00006CB0 4844                       		swap	d4
00006CB2 2C84                       		move.l	d4,(a6)
00006CB4 4E75                       		rts	
00006CB6                            ; ===========================================================================
00006CB6                            
00006CB6                            loc_6B6E:
00006CB6 0810 0003                  		btst	#3,(a0)
00006CBA 6600                       		bne.s	loc_6B90
00006CBC 2A80                       		move.l	d0,(a5)
00006CBE 2A19                       		move.l	(a1)+,d5
00006CC0 2819                       		move.l	(a1)+,d4
00006CC2 0A84 1000 1000             		eori.l	#$10001000,d4
00006CC8 2C84                       		move.l	d4,(a6)
00006CCA D087                       		add.l	d7,d0
00006CCC 2A80                       		move.l	d0,(a5)
00006CCE 0A85 1000 1000             		eori.l	#$10001000,d5
00006CD4 2C85                       		move.l	d5,(a6)
00006CD6 4E75                       		rts	
00006CD8                            ; ===========================================================================
00006CD8                            
00006CD8                            loc_6B90:
00006CD8 2A80                       		move.l	d0,(a5)
00006CDA 2A19                       		move.l	(a1)+,d5
00006CDC 2819                       		move.l	(a1)+,d4
00006CDE 0A84 1800 1800             		eori.l	#$18001800,d4
00006CE4 4844                       		swap	d4
00006CE6 2C84                       		move.l	d4,(a6)
00006CE8 D087                       		add.l	d7,d0
00006CEA 2A80                       		move.l	d0,(a5)
00006CEC 0A85 1800 1800             		eori.l	#$18001800,d5
00006CF2 4845                       		swap	d5
00006CF4 2C85                       		move.l	d5,(a6)
00006CF6 4E75                       		rts	
00006CF8                            ; End of function sub_6B32
00006CF8                            
00006CF8                            ; ===========================================================================
00006CF8 4E75                       		rts	
00006CFA                            ; ===========================================================================
00006CFA 2A80                       		move.l	d0,(a5)
00006CFC 3A3C 2000                  		move.w	#$2000,d5
00006D00 3819                       		move.w	(a1)+,d4
00006D02 D845                       		add.w	d5,d4
00006D04 3C84                       		move.w	d4,(a6)
00006D06 3819                       		move.w	(a1)+,d4
00006D08 D845                       		add.w	d5,d4
00006D0A 3C84                       		move.w	d4,(a6)
00006D0C D087                       		add.l	d7,d0
00006D0E 2A80                       		move.l	d0,(a5)
00006D10 3819                       		move.w	(a1)+,d4
00006D12 D845                       		add.w	d5,d4
00006D14 3C84                       		move.w	d4,(a6)
00006D16 3819                       		move.w	(a1)+,d4
00006D18 D845                       		add.w	d5,d4
00006D1A 3C84                       		move.w	d4,(a6)
00006D1C 4E75                       		rts	
00006D1E                            
00006D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D1E                            
00006D1E                            
00006D1E                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00006D1E 43F8 B000                  		lea	($FFFFB000).w,a1
00006D22 D86B 0004                  		add.w	4(a3),d4
00006D26 DA53                       		add.w	(a3),d5
00006D28 3604                       		move.w	d4,d3
00006D2A E24B                       		lsr.w	#1,d3
00006D2C 0243 0380                  		andi.w	#$380,d3
00006D30 E64D                       		lsr.w	#3,d5
00006D32 3005                       		move.w	d5,d0
00006D34 EA48                       		lsr.w	#5,d0
00006D36 0240 007F                  		andi.w	#$7F,d0
00006D3A D043                       		add.w	d3,d0
00006D3C 76FF                       		moveq	#-1,d3
00006D3E 1634 0000                  		move.b	(a4,d0.w),d3
00006D42 6700                       		beq.s	locret_6C1E
00006D44 5303                       		subq.b	#1,d3
00006D46 0243 007F                  		andi.w	#$7F,d3
00006D4A EE5B                       		ror.w	#7,d3
00006D4C D844                       		add.w	d4,d4
00006D4E 0244 01E0                  		andi.w	#$1E0,d4
00006D52 0245 001E                  		andi.w	#$1E,d5
00006D56 D644                       		add.w	d4,d3
00006D58 D645                       		add.w	d5,d3
00006D5A 2043                       		movea.l	d3,a0
00006D5C 3610                       		move.w	(a0),d3
00006D5E 0243 03FF                  		andi.w	#$3FF,d3
00006D62 E74B                       		lsl.w	#3,d3
00006D64 D2C3                       		adda.w	d3,a1
00006D66                            
00006D66                            locret_6C1E:
00006D66 4E75                       		rts	
00006D68                            ; End of function sub_6BD6
00006D68                            
00006D68                            
00006D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D68                            
00006D68                            
00006D68                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00006D68 D86B 0004                  		add.w	4(a3),d4
00006D6C DA53                       		add.w	(a3),d5
00006D6E 0244 00F0                  		andi.w	#$F0,d4
00006D72 0245 01F0                  		andi.w	#$1F0,d5
00006D76 E94C                       		lsl.w	#4,d4
00006D78 E44D                       		lsr.w	#2,d5
00006D7A D845                       		add.w	d5,d4
00006D7C 7003                       		moveq	#3,d0
00006D7E 4840                       		swap	d0
00006D80 3004                       		move.w	d4,d0
00006D82 4E75                       		rts	
00006D84                            ; End of function sub_6C20
00006D84                            
00006D84                            
00006D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D84                            ; not used
00006D84                            
00006D84                            
00006D84                            sub_6C3C:
00006D84 D86B 0004                  		add.w	4(a3),d4
00006D88 DA53                       		add.w	(a3),d5
00006D8A 0244 00F0                  		andi.w	#$F0,d4
00006D8E 0245 01F0                  		andi.w	#$1F0,d5
00006D92 E94C                       		lsl.w	#4,d4
00006D94 E44D                       		lsr.w	#2,d5
00006D96 D845                       		add.w	d5,d4
00006D98 7002                       		moveq	#2,d0
00006D9A 4840                       		swap	d0
00006D9C 3004                       		move.w	d4,d0
00006D9E 4E75                       		rts	
00006DA0                            ; End of function sub_6C3C
00006DA0                            
00006DA0                            ; ---------------------------------------------------------------------------
00006DA0                            ; Subroutine to	load tiles as soon as the level	appears
00006DA0                            ; ---------------------------------------------------------------------------
00006DA0                            
00006DA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DA0                            
00006DA0                            
00006DA0                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00006DA0 4BF9 00C0 0004             		lea	($C00004).l,a5
00006DA6 4DF9 00C0 0000             		lea	($C00000).l,a6
00006DAC 47F8 F700                  		lea	($FFFFF700).w,a3
00006DB0 49F8 A400                  		lea	($FFFFA400).w,a4
00006DB4 343C 4000                  		move.w	#$4000,d2
00006DB8 6100                       		bsr.s	LoadTilesFromStart2
00006DBA 47F8 F708                  		lea	($FFFFF708).w,a3
00006DBE 49F8 A440                  		lea	($FFFFA440).w,a4
00006DC2 343C 6000                  		move.w	#$6000,d2
00006DC6                            ; End of function LoadTilesFromStart
00006DC6                            
00006DC6                            
00006DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DC6                            
00006DC6                            
00006DC6                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00006DC6 78F0                       		moveq	#-$10,d4
00006DC8 7C0F                       		moveq	#$F,d6
00006DCA                            
00006DCA                            loc_6C82:
00006DCA 48E7 0E00                  		movem.l	d4-d6,-(sp)
00006DCE 7A00                       		moveq	#0,d5
00006DD0 3204                       		move.w	d4,d1
00006DD2 6100 FF94                  		bsr.w	sub_6C20
00006DD6 3801                       		move.w	d1,d4
00006DD8 7A00                       		moveq	#0,d5
00006DDA 7C1F                       		moveq	#$1F,d6
00006DDC 6100 FE44                  		bsr.w	sub_6ADA
00006DE0 4CDF 0070                  		movem.l	(sp)+,d4-d6
00006DE4 0644 0010                  		addi.w	#$10,d4
00006DE8 51CE FFE0                  		dbf	d6,loc_6C82
00006DEC 4E75                       		rts	
00006DEE                            ; End of function LoadTilesFromStart2
00006DEE                            
00006DEE                            ; ---------------------------------------------------------------------------
00006DEE                            ; Main Load Block loading subroutine
00006DEE                            ; ---------------------------------------------------------------------------
00006DEE                            
00006DEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DEE                            
00006DEE                            
00006DEE                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00006DEE 7000                       		moveq	#0,d0
00006DF0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006DF4 E948                       		lsl.w	#4,d0
00006DF6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00006DFC 45F2 0000                  		lea	(a2,d0.w),a2
00006E00 2F0A                       		move.l	a2,-(sp)
00006E02 588A                       		addq.l	#4,a2
00006E04 205A                       		movea.l	(a2)+,a0
00006E06 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00006E0A 303C 0000                  		move.w	#0,d0
00006E0E 6100 A90E                  		bsr.w	EniDec
00006E12 205A                       		movea.l	(a2)+,a0
00006E14 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00006E1A 6100 AA80                  		bsr.w	KosDec
00006E1E 6100 0000                  		bsr.w	LevelLayoutLoad
00006E22 301A                       		move.w	(a2)+,d0
00006E24 3012                       		move.w	(a2),d0
00006E26 0240 00FF                  		andi.w	#$FF,d0
00006E2A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00006E30 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00006E32 700C                       		moveq	#$C,d0		; use SB3 pallet
00006E34                            
00006E34                            MLB_ChkSBZPal:
00006E34 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00006E3A 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00006E3C 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00006E42 6600                       		bne.s	MLB_NormalPal	; if not, branch
00006E44                            
00006E44                            MLB_UsePal0E:
00006E44 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00006E46                            
00006E46                            MLB_NormalPal:
00006E46 6100 B2B4                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00006E4A 245F                       		movea.l	(sp)+,a2
00006E4C 584A                       		addq.w	#4,a2
00006E4E 7000                       		moveq	#0,d0
00006E50 1012                       		move.b	(a2),d0
00006E52 6700                       		beq.s	locret_6D10
00006E54 6100 A72A                  		bsr.w	LoadPLC		; load pattern load cues
00006E58                            
00006E58                            locret_6D10:
00006E58 4E75                       		rts	
00006E5A                            ; End of function MainLoadBlockLoad
00006E5A                            
00006E5A                            ; ---------------------------------------------------------------------------
00006E5A                            ; Level	layout loading subroutine
00006E5A                            ; ---------------------------------------------------------------------------
00006E5A                            
00006E5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E5A                            
00006E5A                            
00006E5A                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00006E5A 47F8 A400                  		lea	($FFFFA400).w,a3
00006E5E 323C 01FF                  		move.w	#$1FF,d1
00006E62 7000                       		moveq	#0,d0
00006E64                            
00006E64                            LevLoad_ClrRam:
00006E64 26C0                       		move.l	d0,(a3)+
00006E66 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00006E6A                            
00006E6A 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00006E6E 7200                       		moveq	#0,d1
00006E70 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00006E74 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00006E78 7202                       		moveq	#2,d1
00006E7A                            ; End of function LevelLayoutLoad
00006E7A                            
00006E7A                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00006E7A                            
00006E7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E7A                            
00006E7A                            
00006E7A                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00006E7A 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006E7E ED08                       		lsl.b	#6,d0
00006E80 EA48                       		lsr.w	#5,d0
00006E82 3400                       		move.w	d0,d2
00006E84 D040                       		add.w	d0,d0
00006E86 D042                       		add.w	d2,d0
00006E88 D041                       		add.w	d1,d0
00006E8A 43F9 0000 0000             		lea	(Level_Index).l,a1
00006E90 3031 0000                  		move.w	(a1,d0.w),d0
00006E94 43F1 0000                  		lea	(a1,d0.w),a1
00006E98 7200                       		moveq	#0,d1
00006E9A 3401                       		move.w	d1,d2
00006E9C 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00006E9E 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00006EA0                            
00006EA0                            LevLoad_NumRows:
00006EA0 3001                       		move.w	d1,d0
00006EA2 204B                       		movea.l	a3,a0
00006EA4                            
00006EA4                            LevLoad_Row:
00006EA4 10D9                       		move.b	(a1)+,(a0)+
00006EA6 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00006EAA 47EB 0080                  		lea	$80(a3),a3	; do next row
00006EAE 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00006EB2 4E75                       		rts	
00006EB4                            ; End of function LevelLayoutLoad2
00006EB4                            
00006EB4                            ; ---------------------------------------------------------------------------
00006EB4                            ; Dynamic screen resize	loading	subroutine
00006EB4                            ; ---------------------------------------------------------------------------
00006EB4                            
00006EB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EB4                            
00006EB4                            
00006EB4                            DynScrResizeLoad:			; XREF: DeformBgLayer
00006EB4 7000                       		moveq	#0,d0
00006EB6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006EBA D040                       		add.w	d0,d0
00006EBC 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00006EC0 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00006EC4 7202                       		moveq	#2,d1
00006EC6 3038 F726                  		move.w	($FFFFF726).w,d0
00006ECA 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00006ECE 6700                       		beq.s	locret_6DAA
00006ED0 6400                       		bcc.s	loc_6DAC
00006ED2 4441                       		neg.w	d1
00006ED4 3038 F704                  		move.w	($FFFFF704).w,d0
00006ED8 B078 F726                  		cmp.w	($FFFFF726).w,d0
00006EDC 6300                       		bls.s	loc_6DA0
00006EDE 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00006EE2 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00006EE8                            
00006EE8                            loc_6DA0:
00006EE8 D378 F72E                  		add.w	d1,($FFFFF72E).w
00006EEC 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006EF2                            
00006EF2                            locret_6DAA:
00006EF2 4E75                       		rts	
00006EF4                            ; ===========================================================================
00006EF4                            
00006EF4                            loc_6DAC:				; XREF: DynScrResizeLoad
00006EF4 3038 F704                  		move.w	($FFFFF704).w,d0
00006EF8 5040                       		addq.w	#8,d0
00006EFA B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006EFE 6500                       		bcs.s	loc_6DC4
00006F00 0838 0001 D022             		btst	#1,($FFFFD022).w
00006F06 6700                       		beq.s	loc_6DC4
00006F08 D241                       		add.w	d1,d1
00006F0A D241                       		add.w	d1,d1
00006F0C                            
00006F0C                            loc_6DC4:
00006F0C D378 F72E                  		add.w	d1,($FFFFF72E).w
00006F10 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006F16 4E75                       		rts	
00006F18                            ; End of function DynScrResizeLoad
00006F18                            
00006F18                            ; ===========================================================================
00006F18                            ; ---------------------------------------------------------------------------
00006F18                            ; Offset index for dynamic screen resizing
00006F18                            ; ---------------------------------------------------------------------------
00006F18 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00006F1C 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00006F20 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00006F24 0000                       		dc.w Resize_Ending-Resize_Index
00006F26                            ; ===========================================================================
00006F26                            ; ---------------------------------------------------------------------------
00006F26                            ; Green	Hill Zone dynamic screen resizing
00006F26                            ; ---------------------------------------------------------------------------
00006F26                            
00006F26                            Resize_GHZ:				; XREF: Resize_Index
00006F26 7000                       		moveq	#0,d0
00006F28 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006F2C D040                       		add.w	d0,d0
00006F2E 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00006F32 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00006F36                            ; ===========================================================================
00006F36 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00006F38 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00006F3A 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00006F3C                            ; ===========================================================================
00006F3C                            
00006F3C                            Resize_GHZ1:
00006F3C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00006F42 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00006F48 6500                       		bcs.s	locret_6E08	; if not, branch
00006F4A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00006F50                            
00006F50                            locret_6E08:
00006F50 4E75                       		rts	
00006F52                            ; ===========================================================================
00006F52                            
00006F52                            Resize_GHZ2:
00006F52 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F58 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00006F5E 6500                       		bcs.s	locret_6E3A
00006F60 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00006F66 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00006F6C 6500                       		bcs.s	locret_6E3A
00006F6E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006F74 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00006F7A 6500                       		bcs.s	locret_6E3A
00006F7C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F82                            
00006F82                            locret_6E3A:
00006F82 4E75                       		rts	
00006F84                            ; ===========================================================================
00006F84                            
00006F84                            Resize_GHZ3:
00006F84 7000                       		moveq	#0,d0
00006F86 1038 F742                  		move.b	($FFFFF742).w,d0
00006F8A 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00006F8E 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00006F92                            ; ===========================================================================
00006F92 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00006F94 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00006F96 0000                       		dc.w Resize_GHZ3end-off_6E4A
00006F98                            ; ===========================================================================
00006F98                            
00006F98                            Resize_GHZ3main:
00006F98 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F9E 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00006FA4 6500                       		bcs.s	locret_6E96
00006FA6 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00006FAC 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006FB2 6500                       		bcs.s	locret_6E96
00006FB4 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00006FBA 6500                       		bcs.s	loc_6E98
00006FBC 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006FC2 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00006FC8 6400                       		bcc.s	loc_6E8E
00006FCA 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00006FD0 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00006FD6                            
00006FD6                            loc_6E8E:
00006FD6 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00006FDC 6400                       		bcc.s	loc_6E98
00006FDE                            
00006FDE                            locret_6E96:
00006FDE 4E75                       		rts	
00006FE0                            ; ===========================================================================
00006FE0                            
00006FE0                            loc_6E98:
00006FE0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006FE6 5438 F742                  		addq.b	#2,($FFFFF742).w
00006FEA 4E75                       		rts	
00006FEC                            ; ===========================================================================
00006FEC                            
00006FEC                            Resize_GHZ3boss:
00006FEC 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006FF2 6400                       		bcc.s	loc_6EB0
00006FF4 5538 F742                  		subq.b	#2,($FFFFF742).w
00006FF8                            
00006FF8                            loc_6EB0:
00006FF8 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00006FFE 6500                       		bcs.s	locret_6EE8
00007000 6100 0000                  		bsr.w	SingleObjLoad
00007004 6600                       		bne.s	loc_6ED0
00007006 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000700A 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007010 337C 0280 000C             		move.w	#$280,$C(a1)
00007016                            
00007016                            loc_6ED0:
00007016 303C 008C                  		move.w	#$8C,d0
0000701A 6100 A37A                  		bsr.w	PlaySound	; play boss music
0000701E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007024 5438 F742                  		addq.b	#2,($FFFFF742).w
00007028 7011                       		moveq	#$11,d0
0000702A 6000 A554                  		bra.w	LoadPLC		; load boss patterns
0000702E                            ; ===========================================================================
0000702E                            
0000702E                            locret_6EE8:
0000702E 4E75                       		rts	
00007030                            ; ===========================================================================
00007030                            
00007030                            Resize_GHZ3end:
00007030 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007036 4E75                       		rts	
00007038                            ; ===========================================================================
00007038                            ; ---------------------------------------------------------------------------
00007038                            ; Labyrinth Zone dynamic screen	resizing
00007038                            ; ---------------------------------------------------------------------------
00007038                            
00007038                            Resize_LZ:				; XREF: Resize_Index
00007038 7000                       		moveq	#0,d0
0000703A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000703E D040                       		add.w	d0,d0
00007040 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007044 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007048                            ; ===========================================================================
00007048 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000704A 0000                       		dc.w Resize_LZ12-Resize_LZx
0000704C 0000                       		dc.w Resize_LZ3-Resize_LZx
0000704E 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007050                            ; ===========================================================================
00007050                            
00007050                            Resize_LZ12:
00007050 4E75                       		rts	
00007052                            ; ===========================================================================
00007052                            
00007052                            Resize_LZ3:
00007052 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00007056 6700                       		beq.s	loc_6F28	; if not, branch
00007058 43F8 A506                  		lea	($FFFFA506).w,a1
0000705C 0C11 0007                  		cmpi.b	#7,(a1)
00007060 6700                       		beq.s	loc_6F28
00007062 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00007066 303C 00B7                  		move.w	#$B7,d0
0000706A 6100 A330                  		bsr.w	PlaySound_Special ; play rumbling sound
0000706E                            
0000706E                            loc_6F28:
0000706E 4A38 F742                  		tst.b	($FFFFF742).w
00007072 6600                       		bne.s	locret_6F64
00007074 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000707A 6500                       		bcs.s	locret_6F62
0000707C 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00007082 6400                       		bcc.s	locret_6F62
00007084 6100 0000                  		bsr.w	SingleObjLoad
00007088 6600                       		bne.s	loc_6F4A
0000708A 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
0000708E                            
0000708E                            loc_6F4A:
0000708E 303C 008C                  		move.w	#$8C,d0
00007092 6100 A302                  		bsr.w	PlaySound	; play boss music
00007096 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000709C 5438 F742                  		addq.b	#2,($FFFFF742).w
000070A0 7011                       		moveq	#$11,d0
000070A2 6000 A4DC                  		bra.w	LoadPLC		; load boss patterns
000070A6                            ; ===========================================================================
000070A6                            
000070A6                            locret_6F62:
000070A6 4E75                       		rts	
000070A8                            ; ===========================================================================
000070A8                            
000070A8                            locret_6F64:
000070A8 4E75                       		rts	
000070AA                            ; ===========================================================================
000070AA                            
000070AA                            Resize_SBZ3:
000070AA 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000070B0 6500                       		bcs.s	locret_6F8C
000070B2 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000070B8 6400                       		bcc.s	locret_6F8C	; if not, branch
000070BA 4238 FE30                  		clr.b	($FFFFFE30).w
000070BE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000070C4 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000070CA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000070D0                            
000070D0                            locret_6F8C:
000070D0 4E75                       		rts	
000070D2                            ; ===========================================================================
000070D2                            ; ---------------------------------------------------------------------------
000070D2                            ; Marble Zone dynamic screen resizing
000070D2                            ; ---------------------------------------------------------------------------
000070D2                            
000070D2                            Resize_MZ:				; XREF: Resize_Index
000070D2 7000                       		moveq	#0,d0
000070D4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000070D8 D040                       		add.w	d0,d0
000070DA 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000070DE 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000070E2                            ; ===========================================================================
000070E2 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000070E4 0000                       		dc.w Resize_MZ2-Resize_MZx
000070E6 0000                       		dc.w Resize_MZ3-Resize_MZx
000070E8                            ; ===========================================================================
000070E8                            
000070E8                            Resize_MZ1:
000070E8 7000                       		moveq	#0,d0
000070EA 1038 F742                  		move.b	($FFFFF742).w,d0
000070EE 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000070F2 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000070F6                            ; ===========================================================================
000070F6 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000070F8 0000                       		dc.w loc_6FEA-off_6FB2
000070FA 0000                       		dc.w loc_702E-off_6FB2
000070FC 0000                       		dc.w loc_7050-off_6FB2
000070FE                            ; ===========================================================================
000070FE                            
000070FE                            loc_6FBA:
000070FE 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007104 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000710A 6500                       		bcs.s	locret_6FE8
0000710C 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007112 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007118 6500                       		bcs.s	locret_6FE8
0000711A 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007120 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007126 6500                       		bcs.s	locret_6FE8
00007128 5438 F742                  		addq.b	#2,($FFFFF742).w
0000712C                            
0000712C                            locret_6FE8:
0000712C 4E75                       		rts	
0000712E                            ; ===========================================================================
0000712E                            
0000712E                            loc_6FEA:
0000712E 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007134 6400                       		bcc.s	loc_6FF8
00007136 5538 F742                  		subq.b	#2,($FFFFF742).w
0000713A 4E75                       		rts	
0000713C                            ; ===========================================================================
0000713C                            
0000713C                            loc_6FF8:
0000713C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007142 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007148 6400                       		bcc.s	locret_702C
0000714A 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007150 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007156 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
0000715C 6400                       		bcc.s	locret_702C
0000715E 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007164 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000716A 6500                       		bcs.s	locret_702C
0000716C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007170                            
00007170                            locret_702C:
00007170 4E75                       		rts	
00007172                            ; ===========================================================================
00007172                            
00007172                            loc_702E:
00007172 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007178 6400                       		bcc.s	loc_703C
0000717A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000717E 4E75                       		rts	
00007180                            ; ===========================================================================
00007180                            
00007180                            loc_703C:
00007180 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007186 6500                       		bcs.s	locret_704E
00007188 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000718E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007192                            
00007192                            locret_704E:
00007192 4E75                       		rts	
00007194                            ; ===========================================================================
00007194                            
00007194                            loc_7050:
00007194 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000719A 6500                       		bcs.s	locret_7072
0000719C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000071A2 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000071A8 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000071AE 6500                       		bcs.s	locret_7072
000071B0 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000071B6                            
000071B6                            locret_7072:
000071B6 4E75                       		rts	
000071B8                            ; ===========================================================================
000071B8                            
000071B8                            Resize_MZ2:
000071B8 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000071BE 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000071C4 6500                       		bcs.s	locret_7088
000071C6 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000071CC                            
000071CC                            locret_7088:
000071CC 4E75                       		rts	
000071CE                            ; ===========================================================================
000071CE                            
000071CE                            Resize_MZ3:
000071CE 7000                       		moveq	#0,d0
000071D0 1038 F742                  		move.b	($FFFFF742).w,d0
000071D4 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000071D8 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000071DC                            ; ===========================================================================
000071DC 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000071DE 0000                       		dc.w Resize_MZ3end-off_7098
000071E0                            ; ===========================================================================
000071E0                            
000071E0                            Resize_MZ3boss:
000071E0 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000071E6 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000071EC 6500                       		bcs.s	locret_70E8
000071EE 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000071F4 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000071FA 6500                       		bcs.s	locret_70E8
000071FC 6100 0000                  		bsr.w	SingleObjLoad
00007200 6600                       		bne.s	loc_70D0
00007202 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007206 337C 19F0 0008             		move.w	#$19F0,8(a1)
0000720C 337C 022C 000C             		move.w	#$22C,$C(a1)
00007212                            
00007212                            loc_70D0:
00007212 303C 008C                  		move.w	#$8C,d0
00007216 6100 A17E                  		bsr.w	PlaySound	; play boss music
0000721A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007220 5438 F742                  		addq.b	#2,($FFFFF742).w
00007224 7011                       		moveq	#$11,d0
00007226 6000 A358                  		bra.w	LoadPLC		; load boss patterns
0000722A                            ; ===========================================================================
0000722A                            
0000722A                            locret_70E8:
0000722A 4E75                       		rts	
0000722C                            ; ===========================================================================
0000722C                            
0000722C                            Resize_MZ3end:
0000722C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007232 4E75                       		rts	
00007234                            ; ===========================================================================
00007234                            ; ---------------------------------------------------------------------------
00007234                            ; Star Light Zone dynamic screen resizing
00007234                            ; ---------------------------------------------------------------------------
00007234                            
00007234                            Resize_SLZ:				; XREF: Resize_Index
00007234 7000                       		moveq	#0,d0
00007236 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000723A D040                       		add.w	d0,d0
0000723C 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007240 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007244                            ; ===========================================================================
00007244 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00007246 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00007248 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000724A                            ; ===========================================================================
0000724A                            
0000724A                            Resize_SLZ12:
0000724A 4E75                       		rts	
0000724C                            ; ===========================================================================
0000724C                            
0000724C                            Resize_SLZ3:
0000724C 7000                       		moveq	#0,d0
0000724E 1038 F742                  		move.b	($FFFFF742).w,d0
00007252 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007256 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000725A                            ; ===========================================================================
0000725A 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000725C 0000                       		dc.w Resize_SLZ3boss-off_7118
0000725E 0000                       		dc.w Resize_SLZ3end-off_7118
00007260                            ; ===========================================================================
00007260                            
00007260                            Resize_SLZ3main:
00007260 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007266 6500                       		bcs.s	locret_7130
00007268 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000726E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007272                            
00007272                            locret_7130:
00007272 4E75                       		rts	
00007274                            ; ===========================================================================
00007274                            
00007274                            Resize_SLZ3boss:
00007274 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000727A 6500                       		bcs.s	locret_715C
0000727C 6100 0000                  		bsr.w	SingleObjLoad
00007280 6600                       		bne.s	loc_7144
00007282 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007286                            
00007286                            loc_7144:
00007286 303C 008C                  		move.w	#$8C,d0
0000728A 6100 A10A                  		bsr.w	PlaySound	; play boss music
0000728E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007294 5438 F742                  		addq.b	#2,($FFFFF742).w
00007298 7011                       		moveq	#$11,d0
0000729A 6000 A2E4                  		bra.w	LoadPLC		; load boss patterns
0000729E                            ; ===========================================================================
0000729E                            
0000729E                            locret_715C:
0000729E 4E75                       		rts	
000072A0                            ; ===========================================================================
000072A0                            
000072A0                            Resize_SLZ3end:
000072A0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000072A6 4E75                       		rts
000072A8 4E75                       		rts
000072AA                            ; ===========================================================================
000072AA                            ; ---------------------------------------------------------------------------
000072AA                            ; Spring Yard Zone dynamic screen resizing
000072AA                            ; ---------------------------------------------------------------------------
000072AA                            
000072AA                            Resize_SYZ:				; XREF: Resize_Index
000072AA 7000                       		moveq	#0,d0
000072AC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000072B0 D040                       		add.w	d0,d0
000072B2 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000072B6 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000072BA                            ; ===========================================================================
000072BA 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000072BC 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000072BE 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000072C0                            ; ===========================================================================
000072C0                            
000072C0                            Resize_SYZ1:
000072C0 4E75                       		rts	
000072C2                            ; ===========================================================================
000072C2                            
000072C2                            Resize_SYZ2:
000072C2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000072C8 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000072CE 6500                       		bcs.s	locret_71A2
000072D0 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000072D6 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000072DC 6500                       		bcs.s	locret_71A2
000072DE 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000072E4                            
000072E4                            locret_71A2:
000072E4 4E75                       		rts	
000072E6                            ; ===========================================================================
000072E6                            
000072E6                            Resize_SYZ3:
000072E6 7000                       		moveq	#0,d0
000072E8 1038 F742                  		move.b	($FFFFF742).w,d0
000072EC 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000072F0 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000072F4                            ; ===========================================================================
000072F4 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000072F6 0000                       		dc.w Resize_SYZ3boss-off_71B2
000072F8 0000                       		dc.w Resize_SYZ3end-off_71B2
000072FA                            ; ===========================================================================
000072FA                            
000072FA                            Resize_SYZ3main:
000072FA 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007300 6500                       		bcs.s	locret_71CE
00007302 6100 0000                  		bsr.w	SingleObjLoad
00007306 6600                       		bne.s	locret_71CE
00007308 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000730C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007310                            
00007310                            locret_71CE:
00007310 4E75                       		rts	
00007312                            ; ===========================================================================
00007312                            
00007312                            Resize_SYZ3boss:
00007312 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007318 6500                       		bcs.s	locret_7200
0000731A 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007320 6100 0000                  		bsr.w	SingleObjLoad
00007324 6600                       		bne.s	loc_71EC
00007326 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000732A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000732E                            
0000732E                            loc_71EC:
0000732E 303C 008C                  		move.w	#$8C,d0
00007332 6100 A062                  		bsr.w	PlaySound	; play boss music
00007336 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000733C 7011                       		moveq	#$11,d0
0000733E 6000 A240                  		bra.w	LoadPLC		; load boss patterns
00007342                            ; ===========================================================================
00007342                            
00007342                            locret_7200:
00007342 4E75                       		rts	
00007344                            ; ===========================================================================
00007344                            
00007344                            Resize_SYZ3end:
00007344 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000734A 4E75                       		rts	
0000734C                            ; ===========================================================================
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            ; Scrap	Brain Zone dynamic screen resizing
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            
0000734C                            Resize_SBZ:				; XREF: Resize_Index
0000734C 7000                       		moveq	#0,d0
0000734E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007352 D040                       		add.w	d0,d0
00007354 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007358 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000735C                            ; ===========================================================================
0000735C 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000735E 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007360 0000                       		dc.w Resize_FZ-Resize_SBZx
00007362                            ; ===========================================================================
00007362                            
00007362                            Resize_SBZ1:
00007362 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007368 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000736E 6500                       		bcs.s	locret_7242
00007370 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007376 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000737C 6500                       		bcs.s	locret_7242
0000737E 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007384                            
00007384                            locret_7242:
00007384 4E75                       		rts	
00007386                            ; ===========================================================================
00007386                            
00007386                            Resize_SBZ2:
00007386 7000                       		moveq	#0,d0
00007388 1038 F742                  		move.b	($FFFFF742).w,d0
0000738C 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007390 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007394                            ; ===========================================================================
00007394 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007396 0000                       		dc.w Resize_SBZ2boss-off_7252
00007398 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000739A 0000                       		dc.w Resize_SBZ2end-off_7252
0000739C                            ; ===========================================================================
0000739C                            
0000739C                            Resize_SBZ2main:
0000739C 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000073A2 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000073A8 6500                       		bcs.s	locret_727A
000073AA 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000073B0 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000073B6 6500                       		bcs.s	locret_727A
000073B8 5438 F742                  		addq.b	#2,($FFFFF742).w
000073BC                            
000073BC                            locret_727A:
000073BC 4E75                       		rts	
000073BE                            ; ===========================================================================
000073BE                            
000073BE                            Resize_SBZ2boss:
000073BE 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000073C4 6500                       		bcs.s	locret_7298
000073C6 6100 0000                  		bsr.w	SingleObjLoad
000073CA 6600                       		bne.s	locret_7298
000073CC 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000073D0 5438 F742                  		addq.b	#2,($FFFFF742).w
000073D4 701E                       		moveq	#$1E,d0
000073D6 6000 A1A8                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000073DA                            ; ===========================================================================
000073DA                            
000073DA                            locret_7298:
000073DA 4E75                       		rts	
000073DC                            ; ===========================================================================
000073DC                            
000073DC                            Resize_SBZ2boss2:
000073DC 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000073E2 6500                       		bcs.s	loc_72B6
000073E4 6100 0000                  		bsr.w	SingleObjLoad
000073E8 6600                       		bne.s	loc_72B0
000073EA 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000073EE 5438 F742                  		addq.b	#2,($FFFFF742).w
000073F2                            
000073F2                            loc_72B0:
000073F2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073F8                            
000073F8                            loc_72B6:
000073F8 6000                       		bra.s	loc_72C2
000073FA                            ; ===========================================================================
000073FA                            
000073FA                            Resize_SBZ2end:
000073FA 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007400 6500                       		bcs.s	loc_72C2
00007402 4E75                       		rts	
00007404                            ; ===========================================================================
00007404                            
00007404                            loc_72C2:
00007404 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000740A 4E75                       		rts	
0000740C                            ; ===========================================================================
0000740C                            
0000740C                            Resize_FZ:
0000740C 7000                       		moveq	#0,d0
0000740E 1038 F742                  		move.b	($FFFFF742).w,d0
00007412 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007416 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000741A                            ; ===========================================================================
0000741A 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
0000741E 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007422 0000                       		dc.w Resize_FZend2-off_72D8
00007424                            ; ===========================================================================
00007424                            
00007424                            Resize_FZmain:
00007424 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000742A 6500                       		bcs.s	loc_72F4
0000742C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007430 701F                       		moveq	#$1F,d0
00007432 6100 A14C                  		bsr.w	LoadPLC		; load FZ boss patterns
00007436                            
00007436                            loc_72F4:
00007436 60CC                       		bra.s	loc_72C2
00007438                            ; ===========================================================================
00007438                            
00007438                            Resize_FZboss:
00007438 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000743E 6500                       		bcs.s	loc_7312
00007440 6100 0000                  		bsr.w	SingleObjLoad
00007444 6600                       		bne.s	loc_7312
00007446 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000744A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000744E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007454                            
00007454                            loc_7312:
00007454 60AE                       		bra.s	loc_72C2
00007456                            ; ===========================================================================
00007456                            
00007456                            Resize_FZend:
00007456 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000745C 6500                       		bcs.s	loc_7320
0000745E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007462                            
00007462                            loc_7320:
00007462 60A0                       		bra.s	loc_72C2
00007464                            ; ===========================================================================
00007464                            
00007464                            locret_7322:
00007464 4E75                       		rts	
00007466                            ; ===========================================================================
00007466                            
00007466                            Resize_FZend2:
00007466 609C                       		bra.s	loc_72C2
00007468                            ; ===========================================================================
00007468                            ; ---------------------------------------------------------------------------
00007468                            ; Ending sequence dynamic screen resizing (empty)
00007468                            ; ---------------------------------------------------------------------------
00007468                            
00007468                            Resize_Ending:				; XREF: Resize_Index
00007468 4E75                       		rts	
0000746A                            ; ===========================================================================
0000746A                            ; ---------------------------------------------------------------------------
0000746A                            ; Object 11 - GHZ bridge
0000746A                            ; ---------------------------------------------------------------------------
0000746A                            
0000746A                            Obj11:					; XREF: Obj_Index
0000746A 7000                       		moveq	#0,d0
0000746C 1028 0024                  		move.b	$24(a0),d0
00007470 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007474 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007478                            ; ===========================================================================
00007478 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000747C 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007480 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007484                            ; ===========================================================================
00007484                            
00007484                            Obj11_Main:				; XREF: Obj11_Index
00007484 5428 0024                  		addq.b	#2,$24(a0)
00007488 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007490 317C 438E 0002             		move.w	#$438E,2(a0)
00007496 117C 0004 0001             		move.b	#4,1(a0)
0000749C 117C 0003 0018             		move.b	#3,$18(a0)
000074A2 117C 0080 0019             		move.b	#$80,$19(a0)
000074A8 3428 000C                  		move.w	$C(a0),d2
000074AC 3628 0008                  		move.w	8(a0),d3
000074B0 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000074B2 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000074B6 7200                       		moveq	#0,d1
000074B8 1212                       		move.b	(a2),d1		; copy a2 to d1
000074BA 14FC 0000                  		move.b	#0,(a2)+
000074BE 3001                       		move.w	d1,d0
000074C0 E248                       		lsr.w	#1,d0
000074C2 E948                       		lsl.w	#4,d0
000074C4 9640                       		sub.w	d0,d3
000074C6 5501                       		subq.b	#2,d1
000074C8 6500                       		bcs.s	Obj11_Action
000074CA                            
000074CA                            Obj11_MakeBdg:
000074CA 6100 0000                  		bsr.w	SingleObjLoad
000074CE 6600                       		bne.s	Obj11_Action
000074D0 5228 0028                  		addq.b	#1,$28(a0)
000074D4 B668 0008                  		cmp.w	8(a0),d3
000074D8 6600                       		bne.s	loc_73B8
000074DA 0643 0010                  		addi.w	#$10,d3
000074DE 3142 000C                  		move.w	d2,$C(a0)
000074E2 3142 003C                  		move.w	d2,$3C(a0)
000074E6 3A08                       		move.w	a0,d5
000074E8 0445 D000                  		subi.w	#-$3000,d5
000074EC EC4D                       		lsr.w	#6,d5
000074EE 0245 007F                  		andi.w	#$7F,d5
000074F2 14C5                       		move.b	d5,(a2)+
000074F4 5228 0028                  		addq.b	#1,$28(a0)
000074F8                            
000074F8                            loc_73B8:				; XREF: ROM:00007398j
000074F8 3A09                       		move.w	a1,d5
000074FA 0445 D000                  		subi.w	#-$3000,d5
000074FE EC4D                       		lsr.w	#6,d5
00007500 0245 007F                  		andi.w	#$7F,d5
00007504 14C5                       		move.b	d5,(a2)+
00007506 137C 000A 0024             		move.b	#$A,$24(a1)
0000750C 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
0000750E 3342 000C                  		move.w	d2,$C(a1)
00007512 3342 003C                  		move.w	d2,$3C(a1)
00007516 3343 0008                  		move.w	d3,8(a1)
0000751A 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007522 337C 438E 0002             		move.w	#$438E,2(a1)
00007528 137C 0004 0001             		move.b	#4,1(a1)
0000752E 137C 0003 0018             		move.b	#3,$18(a1)
00007534 137C 0008 0019             		move.b	#8,$19(a1)
0000753A 0643 0010                  		addi.w	#$10,d3
0000753E 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007542                            
00007542                            Obj11_Action:				; XREF: Obj11_Index
00007542 6100                       		bsr.s	Obj11_Solid
00007544 4A28 003E                  		tst.b	$3E(a0)
00007548 6700                       		beq.s	Obj11_Display
0000754A 5928 003E                  		subq.b	#4,$3E(a0)
0000754E 6100 0000                  		bsr.w	Obj11_Bend
00007552                            
00007552                            Obj11_Display:
00007552 6100 0000                  		bsr.w	DisplaySprite
00007556 6000 0000                  		bra.w	Obj11_ChkDel
0000755A                            
0000755A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000755A                            
0000755A                            
0000755A                            Obj11_Solid:				; XREF: Obj11_Action
0000755A 7200                       		moveq	#0,d1
0000755C 1228 0028                  		move.b	$28(a0),d1
00007560 E749                       		lsl.w	#3,d1
00007562 3401                       		move.w	d1,d2
00007564 5041                       		addq.w	#8,d1
00007566 D442                       		add.w	d2,d2
00007568 43F8 D000                  		lea	($FFFFD000).w,a1
0000756C 4A69 0012                  		tst.w	$12(a1)
00007570 6B00 0000                  		bmi.w	locret_751E
00007574 3029 0008                  		move.w	8(a1),d0
00007578 9068 0008                  		sub.w	8(a0),d0
0000757C D041                       		add.w	d1,d0
0000757E 6B00 0000                  		bmi.w	locret_751E
00007582 B042                       		cmp.w	d2,d0
00007584 6400 0000                  		bcc.w	locret_751E
00007588 6000                       		bra.s	Platform2
0000758A                            ; End of function Obj11_Solid
0000758A                            
0000758A                            ; ---------------------------------------------------------------------------
0000758A                            ; Platform subroutine
0000758A                            ; ---------------------------------------------------------------------------
0000758A                            
0000758A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000758A                            
0000758A                            
0000758A                            PlatformObject:
0000758A 43F8 D000                  		lea	($FFFFD000).w,a1
0000758E 4A69 0012                  		tst.w	$12(a1)
00007592 6B00 0000                  		bmi.w	locret_751E
00007596 3029 0008                  		move.w	8(a1),d0
0000759A 9068 0008                  		sub.w	8(a0),d0
0000759E D041                       		add.w	d1,d0
000075A0 6B00 0000                  		bmi.w	locret_751E
000075A4 D241                       		add.w	d1,d1
000075A6 B041                       		cmp.w	d1,d0
000075A8 6400 0000                  		bcc.w	locret_751E
000075AC                            
000075AC                            Platform2:
000075AC 3028 000C                  		move.w	$C(a0),d0
000075B0 5140                       		subq.w	#8,d0
000075B2                            
000075B2                            Platform3:
000075B2 3429 000C                  		move.w	$C(a1),d2
000075B6 1229 0016                  		move.b	$16(a1),d1
000075BA 4881                       		ext.w	d1
000075BC D242                       		add.w	d2,d1
000075BE 5841                       		addq.w	#4,d1
000075C0 9041                       		sub.w	d1,d0
000075C2 6200 0000                  		bhi.w	locret_751E
000075C6 0C40 FFF0                  		cmpi.w	#-$10,d0
000075CA 6500 0000                  		bcs.w	locret_751E
000075CE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000075D2 6B00 0000                  		bmi.w	locret_751E
000075D6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000075DC 6400 0000                  		bcc.w	locret_751E
000075E0 D440                       		add.w	d0,d2
000075E2 5642                       		addq.w	#3,d2
000075E4 3342 000C                  		move.w	d2,$C(a1)
000075E8 5428 0024                  		addq.b	#2,$24(a0)
000075EC                            
000075EC                            loc_74AE:
000075EC 0829 0003 0022             		btst	#3,$22(a1)
000075F2 6700                       		beq.s	loc_74DC
000075F4 7000                       		moveq	#0,d0
000075F6 1029 003D                  		move.b	$3D(a1),d0
000075FA ED48                       		lsl.w	#6,d0
000075FC 0680 00FF D000             		addi.l	#$FFD000,d0
00007602 2440                       		movea.l	d0,a2
00007604 08AA 0003 0022             		bclr	#3,$22(a2)
0000760A 422A 0025                  		clr.b	$25(a2)
0000760E 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007614 6600                       		bne.s	loc_74DC
00007616 552A 0024                  		subq.b	#2,$24(a2)
0000761A                            
0000761A                            loc_74DC:
0000761A 3008                       		move.w	a0,d0
0000761C 0440 D000                  		subi.w	#-$3000,d0
00007620 EC48                       		lsr.w	#6,d0
00007622 0240 007F                  		andi.w	#$7F,d0
00007626 1340 003D                  		move.b	d0,$3D(a1)
0000762A 137C 0000 0026             		move.b	#0,$26(a1)
00007630 337C 0000 0012             		move.w	#0,$12(a1)
00007636 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000763C 0829 0001 0022             		btst	#1,$22(a1)
00007642 6700                       		beq.s	loc_7512
00007644 2F08                       		move.l	a0,-(sp)
00007646 2049                       		movea.l	a1,a0
00007648 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000764E 205F                       		movea.l	(sp)+,a0
00007650                            
00007650                            loc_7512:
00007650 08E9 0003 0022             		bset	#3,$22(a1)
00007656 08E8 0003 0022             		bset	#3,$22(a0)
0000765C                            
0000765C                            locret_751E:
0000765C 4E75                       		rts	
0000765E                            ; End of function PlatformObject
0000765E                            
0000765E                            ; ---------------------------------------------------------------------------
0000765E                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000765E                            ; ---------------------------------------------------------------------------
0000765E                            
0000765E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000765E                            
0000765E                            
0000765E                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
0000765E 43F8 D000                  		lea	($FFFFD000).w,a1
00007662 4A69 0012                  		tst.w	$12(a1)
00007666 6B00 FFF4                  		bmi.w	locret_751E
0000766A 3029 0008                  		move.w	8(a1),d0
0000766E 9068 0008                  		sub.w	8(a0),d0
00007672 D041                       		add.w	d1,d0
00007674 6BE6                       		bmi.s	locret_751E
00007676 D241                       		add.w	d1,d1
00007678 B041                       		cmp.w	d1,d0
0000767A 64E0                       		bcc.s	locret_751E
0000767C 0828 0000 0001             		btst	#0,1(a0)
00007682 6700                       		beq.s	loc_754A
00007684 4640                       		not.w	d0
00007686 D041                       		add.w	d1,d0
00007688                            
00007688                            loc_754A:
00007688 E248                       		lsr.w	#1,d0
0000768A 7600                       		moveq	#0,d3
0000768C 1632 0000                  		move.b	(a2,d0.w),d3
00007690 3028 000C                  		move.w	$C(a0),d0
00007694 9043                       		sub.w	d3,d0
00007696 6000 FF1A                  		bra.w	Platform3
0000769A                            ; End of function SlopeObject
0000769A                            
0000769A                            
0000769A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000769A                            
0000769A                            
0000769A                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000769A 43F8 D000                  		lea	($FFFFD000).w,a1
0000769E 4A69 0012                  		tst.w	$12(a1)
000076A2 6B00 FFB8                  		bmi.w	locret_751E
000076A6 3029 0008                  		move.w	8(a1),d0
000076AA 9068 0008                  		sub.w	8(a0),d0
000076AE D041                       		add.w	d1,d0
000076B0 6B00 FFAA                  		bmi.w	locret_751E
000076B4 D241                       		add.w	d1,d1
000076B6 B041                       		cmp.w	d1,d0
000076B8 6400 FFA2                  		bcc.w	locret_751E
000076BC 3028 000C                  		move.w	$C(a0),d0
000076C0 9043                       		sub.w	d3,d0
000076C2 6000 FEEE                  		bra.w	Platform3
000076C6                            ; End of function Obj15_Solid
000076C6                            
000076C6                            ; ===========================================================================
000076C6                            
000076C6                            Obj11_Action2:				; XREF: Obj11_Index
000076C6 6100                       		bsr.s	Obj11_WalkOff
000076C8 6100 0000                  		bsr.w	DisplaySprite
000076CC 6000 0000                  		bra.w	Obj11_ChkDel
000076D0                            
000076D0                            ; ---------------------------------------------------------------------------
000076D0                            ; Subroutine allowing Sonic to walk off a bridge
000076D0                            ; ---------------------------------------------------------------------------
000076D0                            
000076D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076D0                            
000076D0                            
000076D0                            Obj11_WalkOff:				; XREF: Obj11_Action2
000076D0 7200                       		moveq	#0,d1
000076D2 1228 0028                  		move.b	$28(a0),d1
000076D6 E749                       		lsl.w	#3,d1
000076D8 3401                       		move.w	d1,d2
000076DA 5041                       		addq.w	#8,d1
000076DC 6100                       		bsr.s	ExitPlatform2
000076DE 6400                       		bcc.s	locret_75BE
000076E0 E848                       		lsr.w	#4,d0
000076E2 1140 003F                  		move.b	d0,$3F(a0)
000076E6 1028 003E                  		move.b	$3E(a0),d0
000076EA 0C00 0040                  		cmpi.b	#$40,d0
000076EE 6700                       		beq.s	loc_75B6
000076F0 5828 003E                  		addq.b	#4,$3E(a0)
000076F4                            
000076F4                            loc_75B6:
000076F4 6100 0000                  		bsr.w	Obj11_Bend
000076F8 6100 0000                  		bsr.w	Obj11_MoveSonic
000076FC                            
000076FC                            locret_75BE:
000076FC 4E75                       		rts	
000076FE                            ; End of function Obj11_WalkOff
000076FE                            
000076FE                            ; ---------------------------------------------------------------------------
000076FE                            ; Subroutine allowing Sonic to walk or jump off	a platform
000076FE                            ; ---------------------------------------------------------------------------
000076FE                            
000076FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076FE                            
000076FE                            
000076FE                            ExitPlatform:
000076FE 3401                       		move.w	d1,d2
00007700                            
00007700                            ExitPlatform2:
00007700 D442                       		add.w	d2,d2
00007702 43F8 D000                  		lea	($FFFFD000).w,a1
00007706 0829 0001 0022             		btst	#1,$22(a1)
0000770C 6600                       		bne.s	loc_75E0
0000770E 3029 0008                  		move.w	8(a1),d0
00007712 9068 0008                  		sub.w	8(a0),d0
00007716 D041                       		add.w	d1,d0
00007718 6B00                       		bmi.s	loc_75E0
0000771A B042                       		cmp.w	d2,d0
0000771C 6500                       		bcs.s	locret_75F2
0000771E                            
0000771E                            loc_75E0:
0000771E 08A9 0003 0022             		bclr	#3,$22(a1)
00007724 117C 0002 0024             		move.b	#2,$24(a0)
0000772A 08A8 0003 0022             		bclr	#3,$22(a0)
00007730                            
00007730                            locret_75F2:
00007730 4E75                       		rts	
00007732                            ; End of function ExitPlatform
00007732                            
00007732                            
00007732                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007732                            
00007732                            
00007732                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007732 7000                       		moveq	#0,d0
00007734 1028 003F                  		move.b	$3F(a0),d0
00007738 1030 0029                  		move.b	$29(a0,d0.w),d0
0000773C ED48                       		lsl.w	#6,d0
0000773E 0680 00FF D000             		addi.l	#$FFD000,d0
00007744 2440                       		movea.l	d0,a2
00007746 43F8 D000                  		lea	($FFFFD000).w,a1
0000774A 302A 000C                  		move.w	$C(a2),d0
0000774E 5140                       		subq.w	#8,d0
00007750 7200                       		moveq	#0,d1
00007752 1229 0016                  		move.b	$16(a1),d1
00007756 9041                       		sub.w	d1,d0
00007758 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
0000775C 4E75                       		rts	
0000775E                            ; End of function Obj11_MoveSonic
0000775E                            
0000775E                            
0000775E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000775E                            
0000775E                            
0000775E                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
0000775E 1028 003E                  		move.b	$3E(a0),d0
00007762 6100 B276                  		bsr.w	CalcSine
00007766 3800                       		move.w	d0,d4
00007768 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000776E 7000                       		moveq	#0,d0
00007770 1028 0028                  		move.b	$28(a0),d0
00007774 E948                       		lsl.w	#4,d0
00007776 7600                       		moveq	#0,d3
00007778 1628 003F                  		move.b	$3F(a0),d3
0000777C 3403                       		move.w	d3,d2
0000777E D640                       		add.w	d0,d3
00007780 7A00                       		moveq	#0,d5
00007782 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007788 1A35 3000                  		move.b	(a5,d3.w),d5
0000778C 0243 000F                  		andi.w	#$F,d3
00007790 E94B                       		lsl.w	#4,d3
00007792 47F4 3000                  		lea	(a4,d3.w),a3
00007796 45E8 0029                  		lea	$29(a0),a2
0000779A                            
0000779A                            loc_765C:
0000779A 7000                       		moveq	#0,d0
0000779C 101A                       		move.b	(a2)+,d0
0000779E ED48                       		lsl.w	#6,d0
000077A0 0680 00FF D000             		addi.l	#$FFD000,d0
000077A6 2240                       		movea.l	d0,a1
000077A8 7000                       		moveq	#0,d0
000077AA 101B                       		move.b	(a3)+,d0
000077AC 5240                       		addq.w	#1,d0
000077AE C0C5                       		mulu.w	d5,d0
000077B0 C0C4                       		mulu.w	d4,d0
000077B2 4840                       		swap	d0
000077B4 D069 003C                  		add.w	$3C(a1),d0
000077B8 3340 000C                  		move.w	d0,$C(a1)
000077BC 51CA FFDC                  		dbf	d2,loc_765C
000077C0 7000                       		moveq	#0,d0
000077C2 1028 0028                  		move.b	$28(a0),d0
000077C6 7600                       		moveq	#0,d3
000077C8 1628 003F                  		move.b	$3F(a0),d3
000077CC 5203                       		addq.b	#1,d3
000077CE 9600                       		sub.b	d0,d3
000077D0 4403                       		neg.b	d3
000077D2 6B00                       		bmi.s	locret_76CA
000077D4 3403                       		move.w	d3,d2
000077D6 E94B                       		lsl.w	#4,d3
000077D8 47F4 3000                  		lea	(a4,d3.w),a3
000077DC D6C2                       		adda.w	d2,a3
000077DE 5342                       		subq.w	#1,d2
000077E0 6500                       		bcs.s	locret_76CA
000077E2                            
000077E2                            loc_76A4:
000077E2 7000                       		moveq	#0,d0
000077E4 101A                       		move.b	(a2)+,d0
000077E6 ED48                       		lsl.w	#6,d0
000077E8 0680 00FF D000             		addi.l	#$FFD000,d0
000077EE 2240                       		movea.l	d0,a1
000077F0 7000                       		moveq	#0,d0
000077F2 1023                       		move.b	-(a3),d0
000077F4 5240                       		addq.w	#1,d0
000077F6 C0C5                       		mulu.w	d5,d0
000077F8 C0C4                       		mulu.w	d4,d0
000077FA 4840                       		swap	d0
000077FC D069 003C                  		add.w	$3C(a1),d0
00007800 3340 000C                  		move.w	d0,$C(a1)
00007804 51CA FFDC                  		dbf	d2,loc_76A4
00007808                            
00007808                            locret_76CA:
00007808 4E75                       		rts	
0000780A                            ; End of function Obj11_Bend
0000780A                            
0000780A                            ; ===========================================================================
0000780A                            ; ---------------------------------------------------------------------------
0000780A                            ; GHZ bridge-bending data
0000780A                            ; (Defines how the bridge bends	when Sonic walks across	it)
0000780A                            ; ---------------------------------------------------------------------------
0000780A                            Obj11_BendData:	incbin	misc\ghzbend1.bin
0000791A                            		even
0000791A                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007A1A                            		even
00007A1A                            
00007A1A                            ; ===========================================================================
00007A1A                            
00007A1A                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007A1A 3028 0008                  		move.w	8(a0),d0
00007A1E 0240 FF80                  		andi.w	#$FF80,d0
00007A22 3238 F700                  		move.w	($FFFFF700).w,d1
00007A26 0441 0080                  		subi.w	#$80,d1
00007A2A 0241 FF80                  		andi.w	#$FF80,d1
00007A2E 9041                       		sub.w	d1,d0
00007A30 0C40 0280                  		cmpi.w	#$280,d0
00007A34 6200 0000                  		bhi.w	Obj11_DelAll
00007A38 4E75                       		rts	
00007A3A                            ; ===========================================================================
00007A3A                            
00007A3A                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007A3A 7400                       		moveq	#0,d2
00007A3C 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007A40 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007A42 5302                       		subq.b	#1,d2		; subtract 1
00007A44 6500                       		bcs.s	Obj11_Delete
00007A46                            
00007A46                            Obj11_DelLoop:
00007A46 7000                       		moveq	#0,d0
00007A48 101A                       		move.b	(a2)+,d0
00007A4A ED48                       		lsl.w	#6,d0
00007A4C 0680 00FF D000             		addi.l	#$FFD000,d0
00007A52 2240                       		movea.l	d0,a1
00007A54 B048                       		cmp.w	a0,d0
00007A56 6700                       		beq.s	loc_791E
00007A58 6100 0000                  		bsr.w	DeleteObject2
00007A5C                            
00007A5C                            loc_791E:
00007A5C 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007A60                            
00007A60                            Obj11_Delete:
00007A60 6100 0000                  		bsr.w	DeleteObject
00007A64 4E75                       		rts	
00007A66                            ; ===========================================================================
00007A66                            
00007A66                            Obj11_Delete2:				; XREF: Obj11_Index
00007A66 6100 0000                  		bsr.w	DeleteObject
00007A6A 4E75                       		rts	
00007A6C                            ; ===========================================================================
00007A6C                            
00007A6C                            Obj11_Display2:				; XREF: Obj11_Index
00007A6C 6100 0000                  		bsr.w	DisplaySprite
00007A70 4E75                       		rts	
00007A72                            ; ===========================================================================
00007A72                            ; ---------------------------------------------------------------------------
00007A72                            ; Sprite mappings - GHZ	bridge
00007A72                            ; ---------------------------------------------------------------------------
00007A72                            Map_obj11:
00007A72                            	include "_maps\obj11.asm"
00007A72                            ; ---------------------------------------------------------------------------
00007A72                            ; Sprite mappings - GHZ	bridge
00007A72                            ; ---------------------------------------------------------------------------
00007A72 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007A76 0000                       		dc.w byte_794B-Map_obj11
00007A78 01                         byte_793A:	dc.b 1
00007A79 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007A7E 02                         byte_7940:	dc.b 2
00007A7F F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007A84 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007A89 01                         byte_794B:	dc.b 1
00007A8A FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007A90 00                         		even
00007A90 00                         		even
00007A90                            
00007A90                            ; ===========================================================================
00007A90                            ; ---------------------------------------------------------------------------
00007A90                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007A90                            ;	    - spiked ball on a chain (SBZ)
00007A90                            ; ---------------------------------------------------------------------------
00007A90                            
00007A90                            Obj15:					; XREF: Obj_Index
00007A90 7000                       		moveq	#0,d0
00007A92 1028 0024                  		move.b	$24(a0),d0
00007A96 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007A9A 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007A9E                            ; ===========================================================================
00007A9E 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007AA2 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007AA6 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007AAA 0000                       		dc.w Obj15_Action-Obj15_Index
00007AAC                            ; ===========================================================================
00007AAC                            
00007AAC                            Obj15_Main:				; XREF: Obj15_Index
00007AAC 5428 0024                  		addq.b	#2,$24(a0)
00007AB0 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007AB8 317C 4380 0002             		move.w	#$4380,2(a0)
00007ABE 117C 0004 0001             		move.b	#4,1(a0)
00007AC4 117C 0003 0018             		move.b	#3,$18(a0)
00007ACA 117C 0018 0019             		move.b	#$18,$19(a0)
00007AD0 117C 0008 0016             		move.b	#8,$16(a0)
00007AD6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007ADC 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007AE2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007AE8 6600                       		bne.s	Obj15_NotSLZ
00007AEA 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007AF2 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007AF8 117C 0020 0019             		move.b	#$20,$19(a0)
00007AFE 117C 0010 0016             		move.b	#$10,$16(a0)
00007B04 117C 0099 0020             		move.b	#$99,$20(a0)
00007B0A                            
00007B0A                            Obj15_NotSLZ:
00007B0A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007B10 6600                       		bne.s	Obj15_SetLength
00007B12 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007B1A 317C 0391 0002             		move.w	#$391,2(a0)
00007B20 117C 0018 0019             		move.b	#$18,$19(a0)
00007B26 117C 0018 0016             		move.b	#$18,$16(a0)
00007B2C 117C 0086 0020             		move.b	#$86,$20(a0)
00007B32 117C 000C 0024             		move.b	#$C,$24(a0)
00007B38                            
00007B38                            Obj15_SetLength:
00007B38 1810                       		move.b	0(a0),d4
00007B3A 7200                       		moveq	#0,d1
00007B3C 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007B40 1212                       		move.b	(a2),d1		; move a2 to d1
00007B42 3F01                       		move.w	d1,-(sp)
00007B44 0241 000F                  		andi.w	#$F,d1
00007B48 14FC 0000                  		move.b	#0,(a2)+
00007B4C 3601                       		move.w	d1,d3
00007B4E E94B                       		lsl.w	#4,d3
00007B50 5003                       		addq.b	#8,d3
00007B52 1143 003C                  		move.b	d3,$3C(a0)
00007B56 5103                       		subq.b	#8,d3
00007B58 4A28 001A                  		tst.b	$1A(a0)
00007B5C 6700                       		beq.s	Obj15_MakeChain
00007B5E 5003                       		addq.b	#8,d3
00007B60 5341                       		subq.w	#1,d1
00007B62                            
00007B62                            Obj15_MakeChain:
00007B62 6100 0000                  		bsr.w	SingleObjLoad
00007B66 6600                       		bne.s	loc_7A92
00007B68 5228 0028                  		addq.b	#1,$28(a0)
00007B6C 3A09                       		move.w	a1,d5
00007B6E 0445 D000                  		subi.w	#-$3000,d5
00007B72 EC4D                       		lsr.w	#6,d5
00007B74 0245 007F                  		andi.w	#$7F,d5
00007B78 14C5                       		move.b	d5,(a2)+
00007B7A 137C 000A 0024             		move.b	#$A,$24(a1)
00007B80 1284                       		move.b	d4,0(a1)	; load swinging	object
00007B82 2368 0004 0004             		move.l	4(a0),4(a1)
00007B88 3368 0002 0002             		move.w	2(a0),2(a1)
00007B8E 08A9 0006 0002             		bclr	#6,2(a1)
00007B94 137C 0004 0001             		move.b	#4,1(a1)
00007B9A 137C 0004 0018             		move.b	#4,$18(a1)
00007BA0 137C 0008 0019             		move.b	#8,$19(a1)
00007BA6 137C 0001 001A             		move.b	#1,$1A(a1)
00007BAC 1343 003C                  		move.b	d3,$3C(a1)
00007BB0 0403 0010                  		subi.b	#$10,d3
00007BB4 6400                       		bcc.s	loc_7A8E
00007BB6 137C 0002 001A             		move.b	#2,$1A(a1)
00007BBC 137C 0003 0018             		move.b	#3,$18(a1)
00007BC2 08E9 0006 0002             		bset	#6,2(a1)
00007BC8                            
00007BC8                            loc_7A8E:
00007BC8 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007BCC                            
00007BCC                            loc_7A92:
00007BCC 3A08                       		move.w	a0,d5
00007BCE 0445 D000                  		subi.w	#-$3000,d5
00007BD2 EC4D                       		lsr.w	#6,d5
00007BD4 0245 007F                  		andi.w	#$7F,d5
00007BD8 14C5                       		move.b	d5,(a2)+
00007BDA 317C 4080 0026             		move.w	#$4080,$26(a0)
00007BE0 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007BE6 321F                       		move.w	(sp)+,d1
00007BE8 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007BEC 6700                       		beq.s	loc_7AD4	; if not, branch
00007BEE 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007BF6 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007BFC 117C 0001 001A             		move.b	#1,$1A(a0)
00007C02 117C 0002 0018             		move.b	#2,$18(a0)
00007C08 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007C0E                            
00007C0E                            loc_7AD4:
00007C0E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007C14 6700                       		beq.s	Obj15_Action	; if yes, branch
00007C16                            
00007C16                            Obj15_SetSolid:				; XREF: Obj15_Index
00007C16 7200                       		moveq	#0,d1
00007C18 1228 0019                  		move.b	$19(a0),d1
00007C1C 7600                       		moveq	#0,d3
00007C1E 1628 0016                  		move.b	$16(a0),d3
00007C22 6100 FA76                  		bsr.w	Obj15_Solid
00007C26                            
00007C26                            Obj15_Action:				; XREF: Obj15_Index
00007C26 6100 0000                  		bsr.w	Obj15_Move
00007C2A 6100 0000                  		bsr.w	DisplaySprite
00007C2E 6000 0000                  		bra.w	Obj15_ChkDel
00007C32                            ; ===========================================================================
00007C32                            
00007C32                            Obj15_Action2:				; XREF: Obj15_Index
00007C32 7200                       		moveq	#0,d1
00007C34 1228 0019                  		move.b	$19(a0),d1
00007C38 6100 FAC4                  		bsr.w	ExitPlatform
00007C3C 3F28 0008                  		move.w	8(a0),-(sp)
00007C40 6100 0000                  		bsr.w	Obj15_Move
00007C44 341F                       		move.w	(sp)+,d2
00007C46 7600                       		moveq	#0,d3
00007C48 1628 0016                  		move.b	$16(a0),d3
00007C4C 5203                       		addq.b	#1,d3
00007C4E 6100 0000                  		bsr.w	MvSonicOnPtfm
00007C52 6100 0000                  		bsr.w	DisplaySprite
00007C56 6000 0000                  		bra.w	Obj15_ChkDel
00007C5A                            
00007C5A 4E75                       		rts
00007C5C                            
00007C5C                            ; ---------------------------------------------------------------------------
00007C5C                            ; Subroutine to	change Sonic's position with a platform
00007C5C                            ; ---------------------------------------------------------------------------
00007C5C                            
00007C5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C5C                            
00007C5C                            
00007C5C                            MvSonicOnPtfm:
00007C5C 43F8 D000                  		lea	($FFFFD000).w,a1
00007C60 3028 000C                  		move.w	$C(a0),d0
00007C64 9043                       		sub.w	d3,d0
00007C66 6000                       		bra.s	MvSonic2
00007C68                            ; End of function MvSonicOnPtfm
00007C68                            
00007C68                            ; ---------------------------------------------------------------------------
00007C68                            ; Subroutine to	change Sonic's position with a platform
00007C68                            ; ---------------------------------------------------------------------------
00007C68                            
00007C68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C68                            
00007C68                            
00007C68                            MvSonicOnPtfm2:
00007C68 43F8 D000                  		lea	($FFFFD000).w,a1
00007C6C 3028 000C                  		move.w	$C(a0),d0
00007C70 0440 0009                  		subi.w	#9,d0
00007C74                            
00007C74                            MvSonic2:
00007C74 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007C78 6B00                       		bmi.s	locret_7B62
00007C7A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007C80 6400                       		bcc.s	locret_7B62
00007C82 4A78 FE08                  		tst.w	($FFFFFE08).w
00007C86 6600                       		bne.s	locret_7B62
00007C88 7200                       		moveq	#0,d1
00007C8A 1229 0016                  		move.b	$16(a1),d1
00007C8E 9041                       		sub.w	d1,d0
00007C90 3340 000C                  		move.w	d0,$C(a1)
00007C94 9468 0008                  		sub.w	8(a0),d2
00007C98 9569 0008                  		sub.w	d2,8(a1)
00007C9C                            
00007C9C                            locret_7B62:
00007C9C 4E75                       		rts	
00007C9E                            ; End of function MvSonicOnPtfm2
00007C9E                            
00007C9E                            
00007C9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C9E                            
00007C9E                            
00007C9E                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007C9E 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007CA2 323C 0080                  		move.w	#$80,d1
00007CA6 0828 0000 0022             		btst	#0,$22(a0)
00007CAC 6700                       		beq.s	loc_7B78
00007CAE 4440                       		neg.w	d0
00007CB0 D041                       		add.w	d1,d0
00007CB2                            
00007CB2                            loc_7B78:
00007CB2 6000                       		bra.s	Obj15_Move2
00007CB4                            ; End of function Obj15_Move
00007CB4                            
00007CB4                            
00007CB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CB4                            
00007CB4                            
00007CB4                            Obj48_Move:				; XREF: Obj48_Display2
00007CB4 4A28 003D                  		tst.b	$3D(a0)
00007CB8 6600                       		bne.s	loc_7B9C
00007CBA 3028 003E                  		move.w	$3E(a0),d0
00007CBE 5040                       		addq.w	#8,d0
00007CC0 3140 003E                  		move.w	d0,$3E(a0)
00007CC4 D168 0026                  		add.w	d0,$26(a0)
00007CC8 0C40 0200                  		cmpi.w	#$200,d0
00007CCC 6600                       		bne.s	loc_7BB6
00007CCE 117C 0001 003D             		move.b	#1,$3D(a0)
00007CD4 6000                       		bra.s	loc_7BB6
00007CD6                            ; ===========================================================================
00007CD6                            
00007CD6                            loc_7B9C:
00007CD6 3028 003E                  		move.w	$3E(a0),d0
00007CDA 5140                       		subq.w	#8,d0
00007CDC 3140 003E                  		move.w	d0,$3E(a0)
00007CE0 D168 0026                  		add.w	d0,$26(a0)
00007CE4 0C40 FE00                  		cmpi.w	#-$200,d0
00007CE8 6600                       		bne.s	loc_7BB6
00007CEA 117C 0000 003D             		move.b	#0,$3D(a0)
00007CF0                            
00007CF0                            loc_7BB6:
00007CF0 1028 0026                  		move.b	$26(a0),d0
00007CF4                            ; End of function Obj48_Move
00007CF4                            
00007CF4                            
00007CF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CF4                            
00007CF4                            
00007CF4                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00007CF4 6100 ACE4                  		bsr.w	CalcSine
00007CF8 3428 0038                  		move.w	$38(a0),d2
00007CFC 3628 003A                  		move.w	$3A(a0),d3
00007D00 45E8 0028                  		lea	$28(a0),a2
00007D04 7C00                       		moveq	#0,d6
00007D06 1C1A                       		move.b	(a2)+,d6
00007D08                            
00007D08                            loc_7BCE:
00007D08 7800                       		moveq	#0,d4
00007D0A 181A                       		move.b	(a2)+,d4
00007D0C ED4C                       		lsl.w	#6,d4
00007D0E 0684 00FF D000             		addi.l	#$FFD000,d4
00007D14 2244                       		movea.l	d4,a1
00007D16 7800                       		moveq	#0,d4
00007D18 1829 003C                  		move.b	$3C(a1),d4
00007D1C 2A04                       		move.l	d4,d5
00007D1E C9C0                       		muls.w	d0,d4
00007D20 E084                       		asr.l	#8,d4
00007D22 CBC1                       		muls.w	d1,d5
00007D24 E085                       		asr.l	#8,d5
00007D26 D842                       		add.w	d2,d4
00007D28 DA43                       		add.w	d3,d5
00007D2A 3344 000C                  		move.w	d4,$C(a1)
00007D2E 3345 0008                  		move.w	d5,8(a1)
00007D32 51CE FFD4                  		dbf	d6,loc_7BCE
00007D36 4E75                       		rts	
00007D38                            ; End of function Obj15_Move2
00007D38                            
00007D38                            ; ===========================================================================
00007D38                            
00007D38                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00007D38 3028 003A                  		move.w	$3A(a0),d0
00007D3C 0240 FF80                  		andi.w	#$FF80,d0
00007D40 3238 F700                  		move.w	($FFFFF700).w,d1
00007D44 0441 0080                  		subi.w	#$80,d1
00007D48 0241 FF80                  		andi.w	#$FF80,d1
00007D4C 9041                       		sub.w	d1,d0
00007D4E 0C40 0280                  		cmpi.w	#$280,d0
00007D52 6200 0000                  		bhi.w	Obj15_DelAll
00007D56 4E75                       		rts	
00007D58                            ; ===========================================================================
00007D58                            
00007D58                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00007D58 7400                       		moveq	#0,d2
00007D5A 45E8 0028                  		lea	$28(a0),a2
00007D5E 141A                       		move.b	(a2)+,d2
00007D60                            
00007D60                            Obj15_DelLoop:
00007D60 7000                       		moveq	#0,d0
00007D62 101A                       		move.b	(a2)+,d0
00007D64 ED48                       		lsl.w	#6,d0
00007D66 0680 00FF D000             		addi.l	#$FFD000,d0
00007D6C 2240                       		movea.l	d0,a1
00007D6E 6100 0000                  		bsr.w	DeleteObject2
00007D72 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00007D76 4E75                       		rts	
00007D78                            ; ===========================================================================
00007D78                            
00007D78                            Obj15_Delete:				; XREF: Obj15_Index
00007D78 6100 0000                  		bsr.w	DeleteObject
00007D7C 4E75                       		rts	
00007D7E                            ; ===========================================================================
00007D7E                            
00007D7E                            Obj15_Display:				; XREF: Obj15_Index
00007D7E 6000 0000                  		bra.w	DisplaySprite
00007D82                            ; ===========================================================================
00007D82                            ; ---------------------------------------------------------------------------
00007D82                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007D82                            ; ---------------------------------------------------------------------------
00007D82                            Map_obj15:
00007D82                            	include "_maps\obj15ghz.asm"
00007D82                            ; ---------------------------------------------------------------------------
00007D82                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007D82                            ; ---------------------------------------------------------------------------
00007D82 0000                       		dc.w byte_7C4E-Map_obj15
00007D84 0000                       		dc.w byte_7C59-Map_obj15
00007D86 0000                       		dc.w byte_7C5F-Map_obj15
00007D88 02                         byte_7C4E:	dc.b 2
00007D89 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00007D8E F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00007D93 01                         byte_7C59:	dc.b 1
00007D94 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007D99 01                         byte_7C5F:	dc.b 1
00007D9A F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00007DA0 00                         		even
00007DA0 00                         		even
00007DA0                            
00007DA0                            ; ---------------------------------------------------------------------------
00007DA0                            ; Sprite mappings - SLZ	swinging platforms
00007DA0                            ; ---------------------------------------------------------------------------
00007DA0                            Map_obj15a:
00007DA0                            	include "_maps\obj15slz.asm"
00007DA0                            ; ---------------------------------------------------------------------------
00007DA0                            ; Sprite mappings - SLZ	swinging platforms
00007DA0                            ; ---------------------------------------------------------------------------
00007DA0 0000                       		dc.w byte_7C6C-Map_obj15a
00007DA2 0000                       		dc.w byte_7C95-Map_obj15a
00007DA4 0000                       		dc.w byte_7C9B-Map_obj15a
00007DA6 08                         byte_7C6C:	dc.b 8
00007DA7 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00007DAC F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00007DB1 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00007DB6 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00007DBB 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00007DC0 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00007DC5 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00007DCA 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00007DCF 01                         byte_7C95:	dc.b 1
00007DD0 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00007DD5 01                         byte_7C9B:	dc.b 1
00007DD6 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00007DDC 00                         		even
00007DDC 00                         		even
00007DDC                            
00007DDC                            ; ===========================================================================
00007DDC                            ; ---------------------------------------------------------------------------
00007DDC                            ; Object 17 - helix of spikes on a pole	(GHZ)
00007DDC                            ; ---------------------------------------------------------------------------
00007DDC                            
00007DDC                            Obj17:					; XREF: Obj_Index
00007DDC 7000                       		moveq	#0,d0
00007DDE 1028 0024                  		move.b	$24(a0),d0
00007DE2 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00007DE6 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00007DEA                            ; ===========================================================================
00007DEA 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00007DEC 0000                       		dc.w Obj17_Action-Obj17_Index
00007DEE 0000                       		dc.w Obj17_Action-Obj17_Index
00007DF0 0000                       		dc.w Obj17_Delete-Obj17_Index
00007DF2 0000                       		dc.w Obj17_Display-Obj17_Index
00007DF4                            ; ===========================================================================
00007DF4                            
00007DF4                            Obj17_Main:				; XREF: Obj17_Index
00007DF4 5428 0024                  		addq.b	#2,$24(a0)
00007DF8 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00007E00 317C 4398 0002             		move.w	#$4398,2(a0)
00007E06 117C 0007 0022             		move.b	#7,$22(a0)
00007E0C 117C 0004 0001             		move.b	#4,1(a0)
00007E12 117C 0003 0018             		move.b	#3,$18(a0)
00007E18 117C 0008 0019             		move.b	#8,$19(a0)
00007E1E 3428 000C                  		move.w	$C(a0),d2
00007E22 3628 0008                  		move.w	8(a0),d3
00007E26 1810                       		move.b	0(a0),d4
00007E28 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007E2C 7200                       		moveq	#0,d1
00007E2E 1212                       		move.b	(a2),d1		; move a2 to d1
00007E30 14FC 0000                  		move.b	#0,(a2)+
00007E34 3001                       		move.w	d1,d0
00007E36 E248                       		lsr.w	#1,d0
00007E38 E948                       		lsl.w	#4,d0
00007E3A 9640                       		sub.w	d0,d3
00007E3C 5501                       		subq.b	#2,d1
00007E3E 6500                       		bcs.s	Obj17_Action
00007E40 7C00                       		moveq	#0,d6
00007E42                            
00007E42                            Obj17_MakeHelix:
00007E42 6100 0000                  		bsr.w	SingleObjLoad
00007E46 6600                       		bne.s	Obj17_Action
00007E48 5228 0028                  		addq.b	#1,$28(a0)
00007E4C 3A09                       		move.w	a1,d5
00007E4E 0445 D000                  		subi.w	#$D000,d5
00007E52 EC4D                       		lsr.w	#6,d5
00007E54 0245 007F                  		andi.w	#$7F,d5
00007E58 14C5                       		move.b	d5,(a2)+
00007E5A 137C 0008 0024             		move.b	#8,$24(a1)
00007E60 1284                       		move.b	d4,0(a1)
00007E62 3342 000C                  		move.w	d2,$C(a1)
00007E66 3343 0008                  		move.w	d3,8(a1)
00007E6A 2368 0004 0004             		move.l	4(a0),4(a1)
00007E70 337C 4398 0002             		move.w	#$4398,2(a1)
00007E76 137C 0004 0001             		move.b	#4,1(a1)
00007E7C 137C 0003 0018             		move.b	#3,$18(a1)
00007E82 137C 0008 0019             		move.b	#8,$19(a1)
00007E88 1346 003E                  		move.b	d6,$3E(a1)
00007E8C 5206                       		addq.b	#1,d6
00007E8E 0206 0007                  		andi.b	#7,d6
00007E92 0643 0010                  		addi.w	#$10,d3
00007E96 B668 0008                  		cmp.w	8(a0),d3
00007E9A 6600                       		bne.s	loc_7D78
00007E9C 1146 003E                  		move.b	d6,$3E(a0)
00007EA0 5206                       		addq.b	#1,d6
00007EA2 0206 0007                  		andi.b	#7,d6
00007EA6 0643 0010                  		addi.w	#$10,d3
00007EAA 5228 0028                  		addq.b	#1,$28(a0)
00007EAE                            
00007EAE                            loc_7D78:
00007EAE 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00007EB2                            
00007EB2                            Obj17_Action:				; XREF: Obj17_Index
00007EB2 6100 0000                  		bsr.w	Obj17_RotateSpikes
00007EB6 6100 0000                  		bsr.w	DisplaySprite
00007EBA 6000 0000                  		bra.w	Obj17_ChkDel
00007EBE                            
00007EBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EBE                            
00007EBE                            
00007EBE                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00007EBE 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00007EC2 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00007EC8 D028 003E                  		add.b	$3E(a0),d0
00007ECC 0200 0007                  		andi.b	#7,d0
00007ED0 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00007ED4 6600                       		bne.s	locret_7DA6
00007ED6 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00007EDC                            
00007EDC                            locret_7DA6:
00007EDC 4E75                       		rts	
00007EDE                            ; End of function Obj17_RotateSpikes
00007EDE                            
00007EDE                            ; ===========================================================================
00007EDE                            
00007EDE                            Obj17_ChkDel:				; XREF: Obj17_Action
00007EDE 3028 0008                  		move.w	8(a0),d0
00007EE2 0240 FF80                  		andi.w	#$FF80,d0
00007EE6 3238 F700                  		move.w	($FFFFF700).w,d1
00007EEA 0441 0080                  		subi.w	#$80,d1
00007EEE 0241 FF80                  		andi.w	#$FF80,d1
00007EF2 9041                       		sub.w	d1,d0
00007EF4 0C40 0280                  		cmpi.w	#$280,d0
00007EF8 6200 0000                  		bhi.w	Obj17_DelAll
00007EFC 4E75                       		rts	
00007EFE                            ; ===========================================================================
00007EFE                            
00007EFE                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00007EFE 7400                       		moveq	#0,d2
00007F00 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007F04 141A                       		move.b	(a2)+,d2	; move a2 to d2
00007F06 5502                       		subq.b	#2,d2
00007F08 6500                       		bcs.s	Obj17_Delete
00007F0A                            
00007F0A                            Obj17_DelLoop:
00007F0A 7000                       		moveq	#0,d0
00007F0C 101A                       		move.b	(a2)+,d0
00007F0E ED48                       		lsl.w	#6,d0
00007F10 0680 00FF D000             		addi.l	#$FFD000,d0
00007F16 2240                       		movea.l	d0,a1
00007F18 6100 0000                  		bsr.w	DeleteObject2	; delete object
00007F1C 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00007F20                            
00007F20                            Obj17_Delete:				; XREF: Obj17_Index
00007F20 6100 0000                  		bsr.w	DeleteObject
00007F24 4E75                       		rts	
00007F26                            ; ===========================================================================
00007F26                            
00007F26                            Obj17_Display:				; XREF: Obj17_Index
00007F26 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00007F2A 6000 0000                  		bra.w	DisplaySprite
00007F2E                            ; ===========================================================================
00007F2E                            ; ---------------------------------------------------------------------------
00007F2E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007F2E                            ; ---------------------------------------------------------------------------
00007F2E                            Map_obj17:
00007F2E                            	include "_maps\obj17.asm"
00007F2E                            ; ---------------------------------------------------------------------------
00007F2E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007F2E                            ; ---------------------------------------------------------------------------
00007F2E 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00007F32 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00007F36 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00007F3A 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00007F3E 01                         byte_7E08:	dc.b 1
00007F3F F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00007F44 01                         byte_7E0E:	dc.b 1
00007F45 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00007F4A 01                         byte_7E14:	dc.b 1
00007F4B F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00007F50 01                         byte_7E1A:	dc.b 1
00007F51 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00007F56 01                         byte_7E20:	dc.b 1
00007F57 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00007F5C 01                         byte_7E26:	dc.b 1
00007F5D 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00007F62 01                         byte_7E2C:	dc.b 1
00007F63 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00007F68                            		even
00007F68                            		even
00007F68                            
00007F68                            ; ===========================================================================
00007F68                            ; ---------------------------------------------------------------------------
00007F68                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00007F68                            ; ---------------------------------------------------------------------------
00007F68                            
00007F68                            Obj18:					; XREF: Obj_Index
00007F68 7000                       		moveq	#0,d0
00007F6A 1028 0024                  		move.b	$24(a0),d0
00007F6E 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00007F72 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00007F76                            ; ===========================================================================
00007F76 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00007F78 0000                       		dc.w Obj18_Solid-Obj18_Index
00007F7A 0000                       		dc.w Obj18_Action2-Obj18_Index
00007F7C 0000                       		dc.w Obj18_Delete-Obj18_Index
00007F7E 0000                       		dc.w Obj18_Action-Obj18_Index
00007F80                            ; ===========================================================================
00007F80                            
00007F80                            Obj18_Main:				; XREF: Obj18_Index
00007F80 5428 0024                  		addq.b	#2,$24(a0)
00007F84 317C 4000 0002             		move.w	#$4000,2(a0)
00007F8A 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00007F92 117C 0020 0019             		move.b	#$20,$19(a0)
00007F98 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00007F9E 6600                       		bne.s	Obj18_NotSYZ
00007FA0 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00007FA8 117C 0020 0019             		move.b	#$20,$19(a0)
00007FAE                            
00007FAE                            Obj18_NotSYZ:
00007FAE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007FB4 6600                       		bne.s	Obj18_NotSLZ
00007FB6 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00007FBE 117C 0020 0019             		move.b	#$20,$19(a0)
00007FC4 317C 4000 0002             		move.w	#$4000,2(a0)
00007FCA 117C 0003 0028             		move.b	#3,$28(a0)
00007FD0                            
00007FD0                            Obj18_NotSLZ:
00007FD0 117C 0004 0001             		move.b	#4,1(a0)
00007FD6 117C 0004 0018             		move.b	#4,$18(a0)
00007FDC 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00007FE2 3168 000C 0034             		move.w	$C(a0),$34(a0)
00007FE8 3168 0008 0032             		move.w	8(a0),$32(a0)
00007FEE 317C 0080 0026             		move.w	#$80,$26(a0)
00007FF4 7200                       		moveq	#0,d1
00007FF6 1028 0028                  		move.b	$28(a0),d0
00007FFA 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00007FFE 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008000 5201                       		addq.b	#1,d1		; use frame #1
00008002 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008008                            
00008008                            Obj18_SetFrame:
00008008 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000800C                            
0000800C                            Obj18_Solid:				; XREF: Obj18_Index
0000800C 4A28 0038                  		tst.b	$38(a0)
00008010 6700                       		beq.s	loc_7EE0
00008012 5928 0038                  		subq.b	#4,$38(a0)
00008016                            
00008016                            loc_7EE0:
00008016 7200                       		moveq	#0,d1
00008018 1228 0019                  		move.b	$19(a0),d1
0000801C 6100 F56C                  		bsr.w	PlatformObject
00008020                            
00008020                            Obj18_Action:				; XREF: Obj18_Index
00008020 6100 0000                  		bsr.w	Obj18_Move
00008024 6100 0000                  		bsr.w	Obj18_Nudge
00008028 6100 0000                  		bsr.w	DisplaySprite
0000802C 6000 0000                  		bra.w	Obj18_ChkDel
00008030                            ; ===========================================================================
00008030                            
00008030                            Obj18_Action2:				; XREF: Obj18_Index
00008030 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008036 6700                       		beq.s	loc_7F06
00008038 5828 0038                  		addq.b	#4,$38(a0)
0000803C                            
0000803C                            loc_7F06:
0000803C 7200                       		moveq	#0,d1
0000803E 1228 0019                  		move.b	$19(a0),d1
00008042 6100 F6BA                  		bsr.w	ExitPlatform
00008046 3F28 0008                  		move.w	8(a0),-(sp)
0000804A 6100 0000                  		bsr.w	Obj18_Move
0000804E 6100 0000                  		bsr.w	Obj18_Nudge
00008052 341F                       		move.w	(sp)+,d2
00008054 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008058 6100 0000                  		bsr.w	DisplaySprite
0000805C 6000 0000                  		bra.w	Obj18_ChkDel
00008060                            
00008060 4E75                       		rts
00008062                            
00008062                            ; ---------------------------------------------------------------------------
00008062                            ; Subroutine to	move platform slightly when you	stand on it
00008062                            ; ---------------------------------------------------------------------------
00008062                            
00008062                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008062                            
00008062                            
00008062                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008062 1028 0038                  		move.b	$38(a0),d0
00008066 6100 A972                  		bsr.w	CalcSine
0000806A 323C 0400                  		move.w	#$400,d1
0000806E C1C1                       		muls.w	d1,d0
00008070 4840                       		swap	d0
00008072 D068 002C                  		add.w	$2C(a0),d0
00008076 3140 000C                  		move.w	d0,$C(a0)
0000807A 4E75                       		rts	
0000807C                            ; End of function Obj18_Nudge
0000807C                            
0000807C                            ; ---------------------------------------------------------------------------
0000807C                            ; Subroutine to	move platforms
0000807C                            ; ---------------------------------------------------------------------------
0000807C                            
0000807C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000807C                            
0000807C                            
0000807C                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000807C 7000                       		moveq	#0,d0
0000807E 1028 0028                  		move.b	$28(a0),d0
00008082 0240 000F                  		andi.w	#$F,d0
00008086 D040                       		add.w	d0,d0
00008088 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000808C 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008090                            ; End of function Obj18_Move
00008090                            
00008090                            ; ===========================================================================
00008090 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008094 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008098 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000809C 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000080A0 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000080A4 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000080A8 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000080AA                            ; ===========================================================================
000080AA                            
000080AA                            Obj18_Type00:
000080AA 4E75                       		rts			; platform 00 doesn't move
000080AC                            ; ===========================================================================
000080AC                            
000080AC                            Obj18_Type05:
000080AC 3028 0032                  		move.w	$32(a0),d0
000080B0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000080B4 4401                       		neg.b	d1		; reverse platform-motion
000080B6 0601 0040                  		addi.b	#$40,d1
000080BA 6000                       		bra.s	Obj18_01_Move
000080BC                            ; ===========================================================================
000080BC                            
000080BC                            Obj18_Type01:
000080BC 3028 0032                  		move.w	$32(a0),d0
000080C0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000080C4 0401 0040                  		subi.b	#$40,d1
000080C8                            
000080C8                            Obj18_01_Move:
000080C8 4881                       		ext.w	d1
000080CA D041                       		add.w	d1,d0
000080CC 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000080D0 6000 0000                  		bra.w	Obj18_ChgMotion
000080D4                            ; ===========================================================================
000080D4                            
000080D4                            Obj18_Type0C:
000080D4 3028 0034                  		move.w	$34(a0),d0
000080D8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000080DC 4401                       		neg.b	d1		; reverse platform-motion
000080DE 0601 0030                  		addi.b	#$30,d1
000080E2 6000                       		bra.s	Obj18_02_Move
000080E4                            ; ===========================================================================
000080E4                            
000080E4                            Obj18_Type0B:
000080E4 3028 0034                  		move.w	$34(a0),d0
000080E8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000080EC 0401 0030                  		subi.b	#$30,d1
000080F0 6000                       		bra.s	Obj18_02_Move
000080F2                            ; ===========================================================================
000080F2                            
000080F2                            Obj18_Type06:
000080F2 3028 0034                  		move.w	$34(a0),d0
000080F6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000080FA 4401                       		neg.b	d1		; reverse platform-motion
000080FC 0601 0040                  		addi.b	#$40,d1
00008100 6000                       		bra.s	Obj18_02_Move
00008102                            ; ===========================================================================
00008102                            
00008102                            Obj18_Type02:
00008102 3028 0034                  		move.w	$34(a0),d0
00008106 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000810A 0401 0040                  		subi.b	#$40,d1
0000810E                            
0000810E                            Obj18_02_Move:
0000810E 4881                       		ext.w	d1
00008110 D041                       		add.w	d1,d0
00008112 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008116 6000 0000                  		bra.w	Obj18_ChgMotion
0000811A                            ; ===========================================================================
0000811A                            
0000811A                            Obj18_Type03:
0000811A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000811E 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008120 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008126 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008128 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000812E                            
0000812E                            Obj18_03_NoMove:
0000812E 4E75                       		rts	
00008130                            ; ===========================================================================
00008130                            
00008130                            Obj18_03_Wait:
00008130 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008134 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008136 317C 0020 003A             		move.w	#32,$3A(a0)
0000813C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008140 4E75                       		rts	
00008142                            ; ===========================================================================
00008142                            
00008142                            Obj18_Type04:
00008142 4A68 003A                  		tst.w	$3A(a0)
00008146 6700                       		beq.s	loc_8048
00008148 5368 003A                  		subq.w	#1,$3A(a0)
0000814C 6600                       		bne.s	loc_8048
0000814E 0828 0003 0022             		btst	#3,$22(a0)
00008154 6700                       		beq.s	loc_8042
00008156 08E9 0001 0022             		bset	#1,$22(a1)
0000815C 08A9 0003 0022             		bclr	#3,$22(a1)
00008162 137C 0002 0024             		move.b	#2,$24(a1)
00008168 08A8 0003 0022             		bclr	#3,$22(a0)
0000816E 4228 0025                  		clr.b	$25(a0)
00008172 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008178                            
00008178                            loc_8042:
00008178 117C 0008 0024             		move.b	#8,$24(a0)
0000817E                            
0000817E                            loc_8048:
0000817E 2628 002C                  		move.l	$2C(a0),d3
00008182 3028 0012                  		move.w	$12(a0),d0
00008186 48C0                       		ext.l	d0
00008188 E180                       		asl.l	#8,d0
0000818A D680                       		add.l	d0,d3
0000818C 2143 002C                  		move.l	d3,$2C(a0)
00008190 0668 0038 0012             		addi.w	#$38,$12(a0)
00008196 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000819A 0640 00E0                  		addi.w	#$E0,d0
0000819E B068 002C                  		cmp.w	$2C(a0),d0
000081A2 6400                       		bcc.s	locret_8074
000081A4 117C 0006 0024             		move.b	#6,$24(a0)
000081AA                            
000081AA                            locret_8074:
000081AA 4E75                       		rts	
000081AC                            ; ===========================================================================
000081AC                            
000081AC                            Obj18_Type07:
000081AC 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000081B0 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000081B2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000081B6 7000                       		moveq	#0,d0
000081B8 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000081BC E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000081BE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000081C2 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000081C4 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000081CA                            
000081CA                            Obj18_07_NoMove:
000081CA 4E75                       		rts	
000081CC                            ; ===========================================================================
000081CC                            
000081CC                            Obj18_07_Wait:
000081CC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000081D0 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000081D2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000081D6 4E75                       		rts	
000081D8                            ; ===========================================================================
000081D8                            
000081D8                            Obj18_Type08:
000081D8 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000081DC 3028 0034                  		move.w	$34(a0),d0
000081E0 0440 0200                  		subi.w	#$200,d0
000081E4 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000081E8 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000081EA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000081EE                            
000081EE                            Obj18_08_NoStop:
000081EE 4E75                       		rts	
000081F0                            ; ===========================================================================
000081F0                            
000081F0                            Obj18_Type0A:
000081F0 3028 0034                  		move.w	$34(a0),d0
000081F4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000081F8 0401 0040                  		subi.b	#$40,d1
000081FC 4881                       		ext.w	d1
000081FE E241                       		asr.w	#1,d1
00008200 D041                       		add.w	d1,d0
00008202 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008206                            
00008206                            Obj18_ChgMotion:
00008206 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000820C 4E75                       		rts	
0000820E                            ; ===========================================================================
0000820E                            
0000820E                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000820E 3028 0032                  		move.w	$32(a0),d0
00008212 0240 FF80                  		andi.w	#$FF80,d0
00008216 3238 F700                  		move.w	($FFFFF700).w,d1
0000821A 0441 0080                  		subi.w	#$80,d1
0000821E 0241 FF80                  		andi.w	#$FF80,d1
00008222 9041                       		sub.w	d1,d0
00008224 0C40 0280                  		cmpi.w	#$280,d0
00008228 6200                       		bhi.s	Obj18_Delete
0000822A 4E75                       		rts	
0000822C                            ; ===========================================================================
0000822C                            
0000822C                            Obj18_Delete:				; XREF: Obj18_Index
0000822C 6000 0000                  		bra.w	DeleteObject
00008230                            ; ===========================================================================
00008230                            ; ---------------------------------------------------------------------------
00008230                            ; Sprite mappings - unused
00008230                            ; ---------------------------------------------------------------------------
00008230                            Map_obj18x:
00008230                            	include "_maps\obj18x.asm"
00008230                            ; ---------------------------------------------------------------------------
00008230                            ; Sprite mappings - unused
00008230                            ; ---------------------------------------------------------------------------
00008230 0000                       		dc.w byte_80FE-Map_obj18x
00008232 0000                       		dc.w byte_8109-Map_obj18x
00008234 02                         byte_80FE:	dc.b 2
00008235 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000823A F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000823F 0A                         byte_8109:	dc.b $A
00008240 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008245 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000824A 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000824F 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008254 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008259 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000825E 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008263 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008268 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000826D 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008272                            		even
00008272                            		even
00008272                            
00008272                            ; ---------------------------------------------------------------------------
00008272                            ; Sprite mappings - GHZ	platforms
00008272                            ; ---------------------------------------------------------------------------
00008272                            Map_obj18:
00008272                            	include "_maps\obj18ghz.asm"
00008272                            ; ---------------------------------------------------------------------------
00008272                            ; Sprite mappings - GHZ	platforms
00008272                            ; ---------------------------------------------------------------------------
00008272 0000                       		dc.w byte_8140-Map_obj18
00008274 0000                       		dc.w byte_8155-Map_obj18
00008276 04                         byte_8140:	dc.b 4
00008277 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000827C F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008281 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008286 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000828B 0A                         byte_8155:	dc.b $A
0000828C F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008291 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008296 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000829B 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000082A0 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000082A5 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000082AA 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000082AF 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000082B4 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000082B9 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000082BE                            		even
000082BE                            		even
000082BE                            
000082BE                            ; ---------------------------------------------------------------------------
000082BE                            ; Sprite mappings - SYZ	platforms
000082BE                            ; ---------------------------------------------------------------------------
000082BE                            Map_obj18a:
000082BE                            	include "_maps\obj18syz.asm"
000082BE                            ; ---------------------------------------------------------------------------
000082BE                            ; Sprite mappings - SYZ	platforms
000082BE                            ; ---------------------------------------------------------------------------
000082BE 0000                       		dc.w byte_818A-Map_obj18a
000082C0 03                         byte_818A:	dc.b 3
000082C1 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000082C6 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000082CB F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000082D0                            		even
000082D0                            		even
000082D0                            
000082D0                            ; ---------------------------------------------------------------------------
000082D0                            ; Sprite mappings - SLZ	platforms
000082D0                            ; ---------------------------------------------------------------------------
000082D0                            Map_obj18b:
000082D0                            	include "_maps\obj18slz.asm"
000082D0                            ; ---------------------------------------------------------------------------
000082D0                            ; Sprite mappings - SLZ	platforms
000082D0                            ; ---------------------------------------------------------------------------
000082D0 0000                       		dc.w byte_819C-Map_obj18b
000082D2 02                         byte_819C:	dc.b 2
000082D3 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000082D8 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000082DE 00                         		even
000082DE 00                         		even
000082DE                            
000082DE                            ; ===========================================================================
000082DE                            ; ---------------------------------------------------------------------------
000082DE                            ; Object 19 - blank
000082DE                            ; ---------------------------------------------------------------------------
000082DE                            
000082DE                            Obj19:					; XREF: Obj_Index
000082DE 4E75                       		rts	
000082E0                            ; ===========================================================================
000082E0                            ; ---------------------------------------------------------------------------
000082E0                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000082E0                            ; ---------------------------------------------------------------------------
000082E0                            Map_obj48:
000082E0                            	include "_maps\obj48.asm"
000082E0                            ; ---------------------------------------------------------------------------
000082E0                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000082E0                            ; ---------------------------------------------------------------------------
000082E0 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000082E4 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000082E8 06                         byte_81B2:	dc.b 6
000082E9 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000082EE F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000082F3 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000082F8 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000082FD 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008302 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008307 04                         byte_81D1:	dc.b 4
00008308 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000830D E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008312 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008317 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000831C 04                         byte_81E6:	dc.b 4
0000831D E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008322 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008327 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000832C 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008331 04                         byte_81FB:	dc.b 4
00008332 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008337 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000833C 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008341 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008346                            		even
00008346                            		even
00008346                            
00008346                            ; ===========================================================================
00008346                            ; ---------------------------------------------------------------------------
00008346                            ; Object 1A - GHZ collapsing ledge
00008346                            ; ---------------------------------------------------------------------------
00008346                            
00008346                            Obj1A:					; XREF: Obj_Index
00008346 7000                       		moveq	#0,d0
00008348 1028 0024                  		move.b	$24(a0),d0
0000834C 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008350 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008354                            ; ===========================================================================
00008354 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008358 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
0000835C 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008360                            ; ===========================================================================
00008360                            
00008360                            Obj1A_Main:				; XREF: Obj1A_Index
00008360 5428 0024                  		addq.b	#2,$24(a0)
00008364 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000836C 317C 4000 0002             		move.w	#$4000,2(a0)
00008372 0028 0004 0001             		ori.b	#4,1(a0)
00008378 117C 0004 0018             		move.b	#4,$18(a0)
0000837E 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008384 117C 0064 0019             		move.b	#$64,$19(a0)
0000838A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008390 117C 0038 0016             		move.b	#$38,$16(a0)
00008396 08E8 0004 0001             		bset	#4,1(a0)
0000839C                            
0000839C                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000839C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000083A0 6700                       		beq.s	Obj1A_Slope	; if not, branch
000083A2 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000083A6 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000083AA 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000083AE                            
000083AE                            Obj1A_Slope:
000083AE 323C 0030                  		move.w	#$30,d1
000083B2 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000083B8 6100 F2A4                  		bsr.w	SlopeObject
000083BC 6000 0000                  		bra.w	MarkObjGone
000083C0                            ; ===========================================================================
000083C0                            
000083C0                            Obj1A_Touch:				; XREF: Obj1A_Index
000083C0 4A28 0038                  		tst.b	$38(a0)
000083C4 6700 0000                  		beq.w	loc_847A
000083C8 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000083CE 5328 0038                  		subq.b	#1,$38(a0)
000083D2                            
000083D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083D2                            
000083D2                            
000083D2                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000083D2 323C 0030                  		move.w	#$30,d1
000083D6 6100 F326                  		bsr.w	ExitPlatform
000083DA 323C 0030                  		move.w	#$30,d1
000083DE 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000083E4 3428 0008                  		move.w	8(a0),d2
000083E8 6100 0000                  		bsr.w	SlopeObject2
000083EC 6000 0000                  		bra.w	MarkObjGone
000083F0                            ; End of function Obj1A_WalkOff
000083F0                            
000083F0                            ; ===========================================================================
000083F0                            
000083F0                            Obj1A_Display:				; XREF: Obj1A_Index
000083F0 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000083F4 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000083F6 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000083FA 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000083FE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008402 6000 0000                  		bra.w	DisplaySprite
00008406                            ; ===========================================================================
00008406                            
00008406                            loc_82D0:				; XREF: Obj1A_Display
00008406 5328 0038                  		subq.b	#1,$38(a0)
0000840A 6100 FFC6                  		bsr.w	Obj1A_WalkOff
0000840E 43F8 D000                  		lea	($FFFFD000).w,a1
00008412 0829 0003 0022             		btst	#3,$22(a1)
00008418 6700                       		beq.s	loc_82FC
0000841A 4A28 0038                  		tst.b	$38(a0)
0000841E 6600                       		bne.s	locret_8308
00008420 08A9 0003 0022             		bclr	#3,$22(a1)
00008426 08A9 0005 0022             		bclr	#5,$22(a1)
0000842C 137C 0001 001D             		move.b	#1,$1D(a1)
00008432                            
00008432                            loc_82FC:
00008432 117C 0000 003A             		move.b	#0,$3A(a0)
00008438 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
0000843E                            
0000843E                            locret_8308:
0000843E 4E75                       		rts	
00008440                            ; ===========================================================================
00008440                            
00008440                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008440 6100 0000                  		bsr.w	ObjectFall
00008444 6100 0000                  		bsr.w	DisplaySprite
00008448 4A28 0001                  		tst.b	1(a0)
0000844C 6A00                       		bpl.s	Obj1A_Delete
0000844E 4E75                       		rts	
00008450                            ; ===========================================================================
00008450                            
00008450                            Obj1A_Delete:				; XREF: Obj1A_Index
00008450 6100 0000                  		bsr.w	DeleteObject
00008454 4E75                       		rts	
00008456                            ; ===========================================================================
00008456                            ; ---------------------------------------------------------------------------
00008456                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008456                            ; ---------------------------------------------------------------------------
00008456                            
00008456                            Obj53:					; XREF: Obj_Index
00008456 7000                       		moveq	#0,d0
00008458 1028 0024                  		move.b	$24(a0),d0
0000845C 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008460 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008464                            ; ===========================================================================
00008464 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008468 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
0000846C 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008470                            ; ===========================================================================
00008470                            
00008470                            Obj53_Main:				; XREF: Obj53_Index
00008470 5428 0024                  		addq.b	#2,$24(a0)
00008474 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
0000847C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008482 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008488 6600                       		bne.s	Obj53_NotSLZ
0000848A 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008490 5428 001A                  		addq.b	#2,$1A(a0)
00008494                            
00008494                            Obj53_NotSLZ:
00008494 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000849A 6600                       		bne.s	Obj53_NotSBZ
0000849C 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000084A2                            
000084A2                            Obj53_NotSBZ:
000084A2 0028 0004 0001             		ori.b	#4,1(a0)
000084A8 117C 0004 0018             		move.b	#4,$18(a0)
000084AE 117C 0007 0038             		move.b	#7,$38(a0)
000084B4 117C 0044 0019             		move.b	#$44,$19(a0)
000084BA                            
000084BA                            Obj53_ChkTouch:				; XREF: Obj53_Index
000084BA 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000084BE 6700                       		beq.s	Obj53_Solid	; if not, branch
000084C0 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000084C4 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000084C8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000084CC                            
000084CC                            Obj53_Solid:
000084CC 323C 0020                  		move.w	#$20,d1
000084D0 6100 F0B8                  		bsr.w	PlatformObject
000084D4 4A28 0028                  		tst.b	$28(a0)
000084D8 6A00                       		bpl.s	Obj53_MarkAsGone
000084DA 0829 0003 0022             		btst	#3,$22(a1)
000084E0 6700                       		beq.s	Obj53_MarkAsGone
000084E2 08A8 0000 0001             		bclr	#0,1(a0)
000084E8 3029 0008                  		move.w	8(a1),d0
000084EC 9068 0008                  		sub.w	8(a0),d0
000084F0 6400                       		bcc.s	Obj53_MarkAsGone
000084F2 08E8 0000 0001             		bset	#0,1(a0)
000084F8                            
000084F8                            Obj53_MarkAsGone:
000084F8 6000 0000                  		bra.w	MarkObjGone
000084FC                            ; ===========================================================================
000084FC                            
000084FC                            Obj53_Touch:				; XREF: Obj53_Index
000084FC 4A28 0038                  		tst.b	$38(a0)
00008500 6700 0000                  		beq.w	loc_8458
00008504 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000850A 5328 0038                  		subq.b	#1,$38(a0)
0000850E                            
0000850E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000850E                            
0000850E                            
0000850E                            Obj53_WalkOff:				; XREF: Obj53_Index
0000850E 323C 0020                  		move.w	#$20,d1
00008512 6100 F1EA                  		bsr.w	ExitPlatform
00008516 3428 0008                  		move.w	8(a0),d2
0000851A 6100 F74C                  		bsr.w	MvSonicOnPtfm2
0000851E 6000 0000                  		bra.w	MarkObjGone
00008522                            ; End of function Obj53_WalkOff
00008522                            
00008522                            ; ===========================================================================
00008522                            
00008522                            Obj53_Display:				; XREF: Obj53_Index
00008522 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008526 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008528 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000852C 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008530 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008534 6000 0000                  		bra.w	DisplaySprite
00008538                            ; ===========================================================================
00008538                            
00008538                            loc_8402:
00008538 5328 0038                  		subq.b	#1,$38(a0)
0000853C 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008540 43F8 D000                  		lea	($FFFFD000).w,a1
00008544 0829 0003 0022             		btst	#3,$22(a1)
0000854A 6700                       		beq.s	loc_842E
0000854C 4A28 0038                  		tst.b	$38(a0)
00008550 6600                       		bne.s	locret_843A
00008552 08A9 0003 0022             		bclr	#3,$22(a1)
00008558 08A9 0005 0022             		bclr	#5,$22(a1)
0000855E 137C 0001 001D             		move.b	#1,$1D(a1)
00008564                            
00008564                            loc_842E:
00008564 117C 0000 003A             		move.b	#0,$3A(a0)
0000856A 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008570                            
00008570                            locret_843A:
00008570 4E75                       		rts	
00008572                            ; ===========================================================================
00008572                            
00008572                            Obj53_TimeZero:				; XREF: Obj53_Display
00008572 6100 0000                  		bsr.w	ObjectFall
00008576 6100 0000                  		bsr.w	DisplaySprite
0000857A 4A28 0001                  		tst.b	1(a0)
0000857E 6A00                       		bpl.s	Obj53_Delete
00008580 4E75                       		rts	
00008582                            ; ===========================================================================
00008582                            
00008582                            Obj53_Delete:				; XREF: Obj53_Index
00008582 6100 0000                  		bsr.w	DeleteObject
00008586 4E75                       		rts	
00008588                            ; ===========================================================================
00008588                            
00008588                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008588 117C 0000 003A             		move.b	#0,$3A(a0)
0000858E                            
0000858E                            loc_8458:				; XREF: Obj53_Touch
0000858E 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008594 0828 0000 0028             		btst	#0,$28(a0)
0000859A 6700                       		beq.s	loc_846C
0000859C 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000085A2                            
000085A2                            loc_846C:
000085A2 7207                       		moveq	#7,d1
000085A4 5228 001A                  		addq.b	#1,$1A(a0)
000085A8 6000                       		bra.s	loc_8486
000085AA                            ; ===========================================================================
000085AA                            
000085AA                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000085AA 117C 0000 003A             		move.b	#0,$3A(a0)
000085B0                            
000085B0                            loc_847A:				; XREF: Obj1A_Touch
000085B0 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000085B6 7218                       		moveq	#$18,d1
000085B8 5428 001A                  		addq.b	#2,$1A(a0)
000085BC                            
000085BC                            loc_8486:				; XREF: Obj53_Collapse
000085BC 7000                       		moveq	#0,d0
000085BE 1028 001A                  		move.b	$1A(a0),d0
000085C2 D040                       		add.w	d0,d0
000085C4 2668 0004                  		movea.l	4(a0),a3
000085C8 D6F3 0000                  		adda.w	(a3,d0.w),a3
000085CC 524B                       		addq.w	#1,a3
000085CE 08E8 0005 0001             		bset	#5,1(a0)
000085D4 1810                       		move.b	0(a0),d4
000085D6 1A28 0001                  		move.b	1(a0),d5
000085DA 2248                       		movea.l	a0,a1
000085DC 6000                       		bra.s	loc_84B2
000085DE                            ; ===========================================================================
000085DE                            
000085DE                            loc_84AA:
000085DE 6100 0000                  		bsr.w	SingleObjLoad
000085E2 6600                       		bne.s	loc_84F2
000085E4 5A4B                       		addq.w	#5,a3
000085E6                            
000085E6                            loc_84B2:
000085E6 137C 0006 0024             		move.b	#6,$24(a1)
000085EC 1284                       		move.b	d4,0(a1)
000085EE 234B 0004                  		move.l	a3,4(a1)
000085F2 1345 0001                  		move.b	d5,1(a1)
000085F6 3368 0008 0008             		move.w	8(a0),8(a1)
000085FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008602 3368 0002 0002             		move.w	2(a0),2(a1)
00008608 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000860E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008614 135C 0038                  		move.b	(a4)+,$38(a1)
00008618 B3C8                       		cmpa.l	a0,a1
0000861A 6400                       		bcc.s	loc_84EE
0000861C 6100 0000                  		bsr.w	DisplaySprite2
00008620                            
00008620                            loc_84EE:
00008620 51C9 FFBC                  		dbf	d1,loc_84AA
00008624                            
00008624                            loc_84F2:
00008624 6100 0000                  		bsr.w	DisplaySprite
00008628 303C 00B9                  		move.w	#$B9,d0
0000862C 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008632                            ; ===========================================================================
00008632                            ; ---------------------------------------------------------------------------
00008632                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008632                            ; ---------------------------------------------------------------------------
00008632 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008642 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000864C 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008654 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000865C                            
0000865C                            ; ---------------------------------------------------------------------------
0000865C                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000865C                            ; ---------------------------------------------------------------------------
0000865C                            
0000865C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000865C                            
0000865C                            
0000865C                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
0000865C 43F8 D000                  		lea	($FFFFD000).w,a1
00008660 0829 0003 0022             		btst	#3,$22(a1)
00008666 6700                       		beq.s	locret_856E
00008668 3029 0008                  		move.w	8(a1),d0
0000866C 9068 0008                  		sub.w	8(a0),d0
00008670 D041                       		add.w	d1,d0
00008672 E248                       		lsr.w	#1,d0
00008674 0828 0000 0001             		btst	#0,1(a0)
0000867A 6700                       		beq.s	loc_854E
0000867C 4640                       		not.w	d0
0000867E D041                       		add.w	d1,d0
00008680                            
00008680                            loc_854E:
00008680 7200                       		moveq	#0,d1
00008682 1232 0000                  		move.b	(a2,d0.w),d1
00008686 3028 000C                  		move.w	$C(a0),d0
0000868A 9041                       		sub.w	d1,d0
0000868C 7200                       		moveq	#0,d1
0000868E 1229 0016                  		move.b	$16(a1),d1
00008692 9041                       		sub.w	d1,d0
00008694 3340 000C                  		move.w	d0,$C(a1)
00008698 9468 0008                  		sub.w	8(a0),d2
0000869C 9569 0008                  		sub.w	d2,8(a1)
000086A0                            
000086A0                            locret_856E:
000086A0 4E75                       		rts	
000086A2                            ; End of function SlopeObject2
000086A2                            
000086A2                            ; ===========================================================================
000086A2                            ; ---------------------------------------------------------------------------
000086A2                            ; Collision data for GHZ collapsing ledge
000086A2                            ; ---------------------------------------------------------------------------
000086A2                            Obj1A_SlopeData:
000086A2                            		incbin	misc\ghzledge.bin
000086D2                            		even
000086D2                            
000086D2                            ; ---------------------------------------------------------------------------
000086D2                            ; Sprite mappings - GHZ	collapsing ledge
000086D2                            ; ---------------------------------------------------------------------------
000086D2                            Map_obj1A:
000086D2                            	include "_maps\obj1A.asm"
000086D2                            ; ---------------------------------------------------------------------------
000086D2                            ; Sprite mappings - GHZ	collapsing ledge
000086D2                            ; ---------------------------------------------------------------------------
000086D2 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000086D6 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000086DA 10                         byte_85A8:	dc.b $10
000086DB C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000086E0 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000086E5 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000086EA E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000086EF D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000086F4 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000086F9 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000086FE F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008703 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008708 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000870D 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008712 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008717 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000871C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008721 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008726 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000872B 10                         byte_85F9:	dc.b $10
0000872C C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008731 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008736 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000873B E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008740 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008745 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000874A F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000874F F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008754 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008759 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000875E 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008763 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008768 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000876D 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008772 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008777 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000877C 19                         byte_864A:	dc.b $19
0000877D C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008782 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008787 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000878C D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008791 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008796 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000879B E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000087A0 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000087A5 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000087AA D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000087AF F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000087B4 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000087B9 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000087BE F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000087C3 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000087C8 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000087CD 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000087D2 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000087D7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000087DC 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000087E1 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000087E6 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000087EB 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000087F0 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000087F5 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000087FA 19                         byte_86C8:	dc.b $19
000087FB C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008800 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008805 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000880A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000880F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008814 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008819 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000881E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008823 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008828 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000882D F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008832 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008837 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000883C F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008841 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008846 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000884B 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008850 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008855 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000885A 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000885F 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008864 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008869 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000886E 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008873 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008878                            		even
00008878                            		even
00008878                            
00008878                            ; ---------------------------------------------------------------------------
00008878                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008878                            ; ---------------------------------------------------------------------------
00008878                            Map_obj53:
00008878                            	include "_maps\obj53.asm"
00008878                            ; ---------------------------------------------------------------------------
00008878                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008878                            ; ---------------------------------------------------------------------------
00008878 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0000887C 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008880 04                         byte_874E:	dc.b 4
00008881 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008886 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000888B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008890 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008895 08                         byte_8763:	dc.b 8
00008896 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000889B F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000088A0 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000088A5 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
000088AA 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
000088AF 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
000088B4 0805 0000 00               		dc.b 8,	5, 0, 0, 0
000088B9 0805 0000 10               		dc.b 8,	5, 0, 0, $10
000088BE 04                         byte_878C:	dc.b 4
000088BF F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
000088C4 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
000088C9 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000088CE 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
000088D3 08                         byte_87A1:	dc.b 8
000088D4 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000088D9 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
000088DE F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000088E3 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
000088E8 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000088ED 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000088F2 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000088F7 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000088FC                            		even
000088FC                            		even
000088FC                            
000088FC                            ; ===========================================================================
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            
000088FC                            Obj1C:					; XREF: Obj_Index
000088FC 7000                       		moveq	#0,d0
000088FE 1028 0024                  		move.b	$24(a0),d0
00008902 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008906 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000890A                            ; ===========================================================================
0000890A 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000890C 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000890E                            ; ===========================================================================
0000890E                            
0000890E                            Obj1C_Main:				; XREF: Obj1C_Index
0000890E 5428 0024                  		addq.b	#2,$24(a0)
00008912 7000                       		moveq	#0,d0
00008914 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008918 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000891C 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008920 2159 0004                  		move.l	(a1)+,4(a0)
00008924 3159 0002                  		move.w	(a1)+,2(a0)
00008928 0028 0004 0001             		ori.b	#4,1(a0)
0000892E 1159 001A                  		move.b	(a1)+,$1A(a0)
00008932 1159 0019                  		move.b	(a1)+,$19(a0)
00008936 1159 0018                  		move.b	(a1)+,$18(a0)
0000893A 1159 0020                  		move.b	(a1)+,$20(a0)
0000893E                            
0000893E                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000893E 3028 0008                  		move.w	8(a0),d0
00008942 0240 FF80                  		andi.w	#$FF80,d0
00008946 3238 F700                  		move.w	($FFFFF700).w,d1
0000894A 0441 0080                  		subi.w	#$80,d1
0000894E 0241 FF80                  		andi.w	#$FF80,d1
00008952 9041                       		sub.w	d1,d0
00008954 0C40 0280                  		cmpi.w	#$280,d0
00008958 6200 0000                  		bhi.w	DeleteObject
0000895C 6000 0000                  		bra.w	DisplaySprite
00008960                            ; ===========================================================================
00008960                            ; ---------------------------------------------------------------------------
00008960                            ; Variables for	object $1C are stored in an array
00008960                            ; ---------------------------------------------------------------------------
00008960 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008964 44D8                       		dc.w $44D8		; VRAM setting
00008966 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000896A 0000 0000                  		dc.l Map_obj1C
0000896E 44D8                       		dc.w $44D8
00008970 0008 0200                  		dc.b 0,	8, 2, 0
00008974 0000 0000                  		dc.l Map_obj1C
00008978 44D8                       		dc.w $44D8
0000897A 0008 0200                  		dc.b 0,	8, 2, 0
0000897E 0000 7A72                  		dc.l Map_obj11
00008982 438E                       		dc.w $438E
00008984 0110 0100                  		dc.b 1,	$10, 1,	0
00008988                            ; ---------------------------------------------------------------------------
00008988                            ; Sprite mappings - SLZ	lava thrower
00008988                            ; ---------------------------------------------------------------------------
00008988                            Map_obj1C:
00008988                            	include "_maps\obj1C.asm"
00008988                            ; ---------------------------------------------------------------------------
00008988                            ; Sprite mappings - SLZ	lava thrower
00008988                            ; ---------------------------------------------------------------------------
00008988 0000                       		dc.w byte_8858-Map_obj1C
0000898A 01                         byte_8858:	dc.b 1
0000898B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008990                            		even
00008990                            		even
00008990                            
00008990                            ; ===========================================================================
00008990                            ; ---------------------------------------------------------------------------
00008990                            ; Object 1D - switch that activates when Sonic touches it
00008990                            ; (this	is not used anywhere in	the game)
00008990                            ; ---------------------------------------------------------------------------
00008990                            
00008990                            Obj1D:					; XREF: Obj_Index
00008990 7000                       		moveq	#0,d0
00008992 1028 0024                  		move.b	$24(a0),d0
00008996 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
0000899A 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
0000899E                            ; ===========================================================================
0000899E 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000089A0 0000                       		dc.w Obj1D_Action-Obj1D_Index
000089A2 0000                       		dc.w Obj1D_Delete-Obj1D_Index
000089A4                            ; ===========================================================================
000089A4                            
000089A4                            Obj1D_Main:				; XREF: Obj1D_Index
000089A4 5428 0024                  		addq.b	#2,$24(a0)
000089A8 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
000089B0 317C 4000 0002             		move.w	#$4000,2(a0)
000089B6 117C 0004 0001             		move.b	#4,1(a0)
000089BC 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
000089C2 117C 0010 0019             		move.b	#$10,$19(a0)
000089C8 117C 0005 0018             		move.b	#5,$18(a0)
000089CE                            
000089CE                            Obj1D_Action:				; XREF: Obj1D_Index
000089CE 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
000089D4 323C 0010                  		move.w	#$10,d1
000089D8 6100 0000                  		bsr.w	Obj1D_ChkTouch
000089DC 6700                       		beq.s	Obj1D_ChkDel
000089DE 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000089E2 7001                       		moveq	#1,d0
000089E4 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
000089E8                            
000089E8                            Obj1D_ChkDel:
000089E8 6100 0000                  		bsr.w	DisplaySprite
000089EC 3028 0008                  		move.w	8(a0),d0
000089F0 0240 FF80                  		andi.w	#$FF80,d0
000089F4 3238 F700                  		move.w	($FFFFF700).w,d1
000089F8 0441 0080                  		subi.w	#$80,d1
000089FC 0241 FF80                  		andi.w	#$FF80,d1
00008A00 9041                       		sub.w	d1,d0
00008A02 0C40 0280                  		cmpi.w	#$280,d0
00008A06 6200 0000                  		bhi.w	Obj1D_Delete
00008A0A 4E75                       		rts	
00008A0C                            ; ===========================================================================
00008A0C                            
00008A0C                            Obj1D_Delete:				; XREF: Obj1D_Index
00008A0C 6100 0000                  		bsr.w	DeleteObject
00008A10 4E75                       		rts	
00008A12                            ; ---------------------------------------------------------------------------
00008A12                            ; Subroutine to	check if Sonic touches the object
00008A12                            ; ---------------------------------------------------------------------------
00008A12                            
00008A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A12                            
00008A12                            
00008A12                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008A12 43F8 D000                  		lea	($FFFFD000).w,a1
00008A16 3029 0008                  		move.w	8(a1),d0
00008A1A 9068 0008                  		sub.w	8(a0),d0
00008A1E D041                       		add.w	d1,d0
00008A20 6B00                       		bmi.s	loc_8918
00008A22 D241                       		add.w	d1,d1
00008A24 B041                       		cmp.w	d1,d0
00008A26 6400                       		bcc.s	loc_8918
00008A28 3429 000C                  		move.w	$C(a1),d2
00008A2C 1229 0016                  		move.b	$16(a1),d1
00008A30 4881                       		ext.w	d1
00008A32 D242                       		add.w	d2,d1
00008A34 3028 000C                  		move.w	$C(a0),d0
00008A38 0440 0010                  		subi.w	#$10,d0
00008A3C 9041                       		sub.w	d1,d0
00008A3E 6200                       		bhi.s	loc_8918
00008A40 0C40 FFF0                  		cmpi.w	#-$10,d0
00008A44 6500                       		bcs.s	loc_8918
00008A46 70FF                       		moveq	#-1,d0
00008A48 4E75                       		rts	
00008A4A                            ; ===========================================================================
00008A4A                            
00008A4A                            loc_8918:
00008A4A 7000                       		moveq	#0,d0
00008A4C 4E75                       		rts	
00008A4E                            ; End of function Obj1D_ChkTouch
00008A4E                            
00008A4E                            ; ===========================================================================
00008A4E                            ; ---------------------------------------------------------------------------
00008A4E                            ; Sprite mappings - object 1D
00008A4E                            ; ---------------------------------------------------------------------------
00008A4E                            Map_obj1D:
00008A4E                            	include "_maps\obj1D.asm"
00008A4E                            ; ---------------------------------------------------------------------------
00008A4E                            ; Sprite mappings - object 1D
00008A4E                            ; ---------------------------------------------------------------------------
00008A4E 0000                       		dc.w byte_891E-Map_obj1D
00008A50 04                         byte_891E:	dc.b 4
00008A51 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008A56 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008A5B E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008A60 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008A66 00                         		even
00008A66 00                         		even
00008A66                            
00008A66                            ; ===========================================================================
00008A66                            ; ---------------------------------------------------------------------------
00008A66                            ; Object 2A - doors (SBZ)
00008A66                            ; ---------------------------------------------------------------------------
00008A66                            
00008A66                            Obj2A:					; XREF: Obj_Index
00008A66 7000                       		moveq	#0,d0
00008A68 1028 0024                  		move.b	$24(a0),d0
00008A6C 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008A70 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008A74                            ; ===========================================================================
00008A74 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008A76 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008A78                            ; ===========================================================================
00008A78                            
00008A78                            Obj2A_Main:				; XREF: Obj2A_Index
00008A78 5428 0024                  		addq.b	#2,$24(a0)
00008A7C 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008A84 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008A8A 0028 0004 0001             		ori.b	#4,1(a0)
00008A90 117C 0008 0019             		move.b	#8,$19(a0)
00008A96 117C 0004 0018             		move.b	#4,$18(a0)
00008A9C                            
00008A9C                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008A9C 323C 0040                  		move.w	#$40,d1
00008AA0 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008AA4 3038 D008                  		move.w	($FFFFD008).w,d0
00008AA8 D041                       		add.w	d1,d0
00008AAA B068 0008                  		cmp.w	8(a0),d0
00008AAE 6500                       		bcs.s	Obj2A_Animate
00008AB0 9041                       		sub.w	d1,d0
00008AB2 9041                       		sub.w	d1,d0
00008AB4 B068 0008                  		cmp.w	8(a0),d0
00008AB8 6400                       		bcc.s	Obj2A_Animate
00008ABA D041                       		add.w	d1,d0
00008ABC B068 0008                  		cmp.w	8(a0),d0
00008AC0 6400                       		bcc.s	loc_899A
00008AC2 0828 0000 0022             		btst	#0,$22(a0)
00008AC8 6600                       		bne.s	Obj2A_Animate
00008ACA 6000                       		bra.s	Obj2A_Open
00008ACC                            ; ===========================================================================
00008ACC                            
00008ACC                            loc_899A:				; XREF: Obj2A_OpenShut
00008ACC 0828 0000 0022             		btst	#0,$22(a0)
00008AD2 6700                       		beq.s	Obj2A_Animate
00008AD4                            
00008AD4                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008AD4 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008ADA                            
00008ADA                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008ADA 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008AE0 6100 0000                  		bsr.w	AnimateSprite
00008AE4 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008AE8 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008AEA 323C 0011                  		move.w	#$11,d1
00008AEE 343C 0020                  		move.w	#$20,d2
00008AF2 3602                       		move.w	d2,d3
00008AF4 5243                       		addq.w	#1,d3
00008AF6 3828 0008                  		move.w	8(a0),d4
00008AFA 6100 0000                  		bsr.w	SolidObject
00008AFE                            
00008AFE                            Obj2A_MarkAsUsed:
00008AFE 6000 0000                  		bra.w	MarkObjGone
00008B02                            ; ===========================================================================
00008B02                            Ani_obj2A:
00008B02                            	include "_anim\obj2A.asm"
00008B02                            ; ---------------------------------------------------------------------------
00008B02                            ; Animation script - doors (SBZ)
00008B02                            ; ---------------------------------------------------------------------------
00008B02 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008B04 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008B06 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008B12 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008B1E                            		even
00008B1E                            		even
00008B1E                            
00008B1E                            ; ---------------------------------------------------------------------------
00008B1E                            ; Sprite mappings - doors (SBZ)
00008B1E                            ; ---------------------------------------------------------------------------
00008B1E                            Map_obj2A:
00008B1E                            	include "_maps\obj2A.asm"
00008B1E                            ; ---------------------------------------------------------------------------
00008B1E                            ; Sprite mappings - doors (SBZ)
00008B1E                            ; ---------------------------------------------------------------------------
00008B1E 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008B22 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008B26 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008B2A 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008B2E 0000                       		dc.w byte_8A56-Map_obj2A
00008B30 02                         byte_89FE:	dc.b 2
00008B31 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008B36 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008B3B 02                         byte_8A09:	dc.b 2
00008B3C DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008B41 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008B46 02                         byte_8A14:	dc.b 2
00008B47 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008B4C 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008B51 02                         byte_8A1F:	dc.b 2
00008B52 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008B57 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008B5C 02                         byte_8A2A:	dc.b 2
00008B5D D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008B62 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008B67 02                         byte_8A35:	dc.b 2
00008B68 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008B6D 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008B72 02                         byte_8A40:	dc.b 2
00008B73 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008B78 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008B7D 02                         byte_8A4B:	dc.b 2
00008B7E C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008B83 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008B88 02                         byte_8A56:	dc.b 2
00008B89 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008B8E 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008B94 00                         		even
00008B94 00                         		even
00008B94                            
00008B94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B94                            
00008B94                            
00008B94                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008B94 6100 0000                  		bsr.w	Obj44_SolidWall2
00008B98 6700                       		beq.s	loc_8AA8
00008B9A 6B00 0000                  		bmi.w	loc_8AC4
00008B9E 4A40                       		tst.w	d0
00008BA0 6700 0000                  		beq.w	loc_8A92
00008BA4 6B00                       		bmi.s	loc_8A7C
00008BA6 4A69 0010                  		tst.w	$10(a1)
00008BAA 6B00                       		bmi.s	loc_8A92
00008BAC 6000                       		bra.s	loc_8A82
00008BAE                            ; ===========================================================================
00008BAE                            
00008BAE                            loc_8A7C:
00008BAE 4A69 0010                  		tst.w	$10(a1)
00008BB2 6A00                       		bpl.s	loc_8A92
00008BB4                            
00008BB4                            loc_8A82:
00008BB4 9169 0008                  		sub.w	d0,8(a1)
00008BB8 337C 0000 0014             		move.w	#0,$14(a1)
00008BBE 337C 0000 0010             		move.w	#0,$10(a1)
00008BC4                            
00008BC4                            loc_8A92:
00008BC4 0829 0001 0022             		btst	#1,$22(a1)
00008BCA 6600                       		bne.s	loc_8AB6
00008BCC 08E9 0005 0022             		bset	#5,$22(a1)
00008BD2 08E8 0005 0022             		bset	#5,$22(a0)
00008BD8 4E75                       		rts	
00008BDA                            ; ===========================================================================
00008BDA                            
00008BDA                            loc_8AA8:
00008BDA 0828 0005 0022             		btst	#5,$22(a0)
00008BE0 6700                       		beq.s	locret_8AC2
00008BE2 337C 0001 001C             		move.w	#1,$1C(a1)
00008BE8                            
00008BE8                            loc_8AB6:
00008BE8 08A8 0005 0022             		bclr	#5,$22(a0)
00008BEE 08A9 0005 0022             		bclr	#5,$22(a1)
00008BF4                            
00008BF4                            locret_8AC2:
00008BF4 4E75                       		rts	
00008BF6                            ; ===========================================================================
00008BF6                            
00008BF6                            loc_8AC4:
00008BF6 4A69 0012                  		tst.w	$12(a1)
00008BFA 6A00                       		bpl.s	locret_8AD8
00008BFC 4A43                       		tst.w	d3
00008BFE 6A00                       		bpl.s	locret_8AD8
00008C00 9769 000C                  		sub.w	d3,$C(a1)
00008C04 337C 0000 0012             		move.w	#0,$12(a1)
00008C0A                            
00008C0A                            locret_8AD8:
00008C0A 4E75                       		rts	
00008C0C                            ; End of function Obj44_SolidWall
00008C0C                            
00008C0C                            
00008C0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C0C                            
00008C0C                            
00008C0C                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008C0C 43F8 D000                  		lea	($FFFFD000).w,a1
00008C10 3029 0008                  		move.w	8(a1),d0
00008C14 9068 0008                  		sub.w	8(a0),d0
00008C18 D041                       		add.w	d1,d0
00008C1A 6B00                       		bmi.s	loc_8B48
00008C1C 3601                       		move.w	d1,d3
00008C1E D643                       		add.w	d3,d3
00008C20 B043                       		cmp.w	d3,d0
00008C22 6200                       		bhi.s	loc_8B48
00008C24 1629 0016                  		move.b	$16(a1),d3
00008C28 4883                       		ext.w	d3
00008C2A D443                       		add.w	d3,d2
00008C2C 3629 000C                  		move.w	$C(a1),d3
00008C30 9668 000C                  		sub.w	$C(a0),d3
00008C34 D642                       		add.w	d2,d3
00008C36 6B00                       		bmi.s	loc_8B48
00008C38 3802                       		move.w	d2,d4
00008C3A D844                       		add.w	d4,d4
00008C3C B644                       		cmp.w	d4,d3
00008C3E 6400                       		bcc.s	loc_8B48
00008C40 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008C44 6B00                       		bmi.s	loc_8B48
00008C46 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008C4C 6400                       		bcc.s	loc_8B48
00008C4E 4A78 FE08                  		tst.w	($FFFFFE08).w
00008C52 6600                       		bne.s	loc_8B48
00008C54 3A00                       		move.w	d0,d5
00008C56 B240                       		cmp.w	d0,d1
00008C58 6400                       		bcc.s	loc_8B30
00008C5A D241                       		add.w	d1,d1
00008C5C 9041                       		sub.w	d1,d0
00008C5E 3A00                       		move.w	d0,d5
00008C60 4445                       		neg.w	d5
00008C62                            
00008C62                            loc_8B30:
00008C62 3203                       		move.w	d3,d1
00008C64 B443                       		cmp.w	d3,d2
00008C66 6400                       		bcc.s	loc_8B3C
00008C68 9644                       		sub.w	d4,d3
00008C6A 3203                       		move.w	d3,d1
00008C6C 4441                       		neg.w	d1
00008C6E                            
00008C6E                            loc_8B3C:
00008C6E BA41                       		cmp.w	d1,d5
00008C70 6200                       		bhi.s	loc_8B44
00008C72 7801                       		moveq	#1,d4
00008C74 4E75                       		rts	
00008C76                            ; ===========================================================================
00008C76                            
00008C76                            loc_8B44:
00008C76 78FF                       		moveq	#-1,d4
00008C78 4E75                       		rts	
00008C7A                            ; ===========================================================================
00008C7A                            
00008C7A                            loc_8B48:
00008C7A 7800                       		moveq	#0,d4
00008C7C 4E75                       		rts	
00008C7E                            ; End of function Obj44_SolidWall2
00008C7E                            
00008C7E                            ; ===========================================================================
00008C7E                            ; ---------------------------------------------------------------------------
00008C7E                            ; Object 1E - Ball Hog enemy (SBZ)
00008C7E                            ; ---------------------------------------------------------------------------
00008C7E                            
00008C7E                            Obj1E:					; XREF: Obj_Index
00008C7E 7000                       		moveq	#0,d0
00008C80 1028 0024                  		move.b	$24(a0),d0
00008C84 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008C88 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008C8C                            ; ===========================================================================
00008C8C 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008C8E 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008C90                            ; ===========================================================================
00008C90                            
00008C90                            Obj1E_Main:				; XREF: Obj1E_Index
00008C90 117C 0013 0016             		move.b	#$13,$16(a0)
00008C96 117C 0008 0017             		move.b	#8,$17(a0)
00008C9C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008CA4 317C 2302 0002             		move.w	#$2302,2(a0)
00008CAA 117C 0004 0001             		move.b	#4,1(a0)
00008CB0 117C 0004 0018             		move.b	#4,$18(a0)
00008CB6 117C 0005 0020             		move.b	#5,$20(a0)
00008CBC 117C 000C 0019             		move.b	#$C,$19(a0)
00008CC2 6100 0000                  		bsr.w	ObjectFall
00008CC6 4EB9 0000 0000             		jsr	ObjHitFloor
00008CCC 4A41                       		tst.w	d1
00008CCE 6A00                       		bpl.s	locret_8BAC
00008CD0 D368 000C                  		add.w	d1,$C(a0)
00008CD4 317C 0000 0012             		move.w	#0,$12(a0)
00008CDA 5428 0024                  		addq.b	#2,$24(a0)
00008CDE                            
00008CDE                            locret_8BAC:
00008CDE 4E75                       		rts	
00008CE0                            ; ===========================================================================
00008CE0                            
00008CE0                            Obj1E_Action:				; XREF: Obj1E_Index
00008CE0 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008CE6 6100 0000                  		bsr.w	AnimateSprite
00008CEA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00008CF0 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00008CF2 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00008CF6 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00008CF8 6000                       		bra.s	Obj1E_MarkAsGone
00008CFA                            ; ===========================================================================
00008CFA                            
00008CFA                            Obj1E_SetBall:				; XREF: Obj1E_Action
00008CFA 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00008CFE                            
00008CFE                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00008CFE 6000 0000                  		bra.w	MarkObjGone
00008D02                            ; ===========================================================================
00008D02                            
00008D02                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00008D02 117C 0001 0032             		move.b	#1,$32(a0)
00008D08 6100 0000                  		bsr.w	SingleObjLoad
00008D0C 6600                       		bne.s	loc_8C1A
00008D0E 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00008D12 3368 0008 0008             		move.w	8(a0),8(a1)
00008D18 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008D1E 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00008D24 337C 0000 0012             		move.w	#0,$12(a1)
00008D2A 70FC                       		moveq	#-4,d0
00008D2C 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00008D32 6700                       		beq.s	loc_8C0A	; if not, branch
00008D34 4440                       		neg.w	d0
00008D36 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00008D3A                            
00008D3A                            loc_8C0A:
00008D3A D169 0008                  		add.w	d0,8(a1)
00008D3E 0669 000C 000C             		addi.w	#$C,$C(a1)
00008D44 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00008D4A                            
00008D4A                            loc_8C1A:
00008D4A 60B2                       		bra.s	Obj1E_MarkAsGone
00008D4C                            ; ===========================================================================
00008D4C                            ; ---------------------------------------------------------------------------
00008D4C                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00008D4C                            ; ---------------------------------------------------------------------------
00008D4C                            
00008D4C                            Obj20:					; XREF: Obj_Index
00008D4C 7000                       		moveq	#0,d0
00008D4E 1028 0024                  		move.b	$24(a0),d0
00008D52 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00008D56 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00008D5A                            ; ===========================================================================
00008D5A 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00008D5C 0000                       		dc.w Obj20_Bounce-Obj20_Index
00008D5E                            ; ===========================================================================
00008D5E                            
00008D5E                            Obj20_Main:				; XREF: Obj20_Index
00008D5E 5428 0024                  		addq.b	#2,$24(a0)
00008D62 117C 0007 0016             		move.b	#7,$16(a0)
00008D68 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008D70 317C 2302 0002             		move.w	#$2302,2(a0)
00008D76 117C 0004 0001             		move.b	#4,1(a0)
00008D7C 117C 0003 0018             		move.b	#3,$18(a0)
00008D82 117C 0087 0020             		move.b	#$87,$20(a0)
00008D88 117C 0008 0019             		move.b	#8,$19(a0)
00008D8E 7000                       		moveq	#0,d0
00008D90 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00008D94 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00008D98 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00008D9C 117C 0004 001A             		move.b	#4,$1A(a0)
00008DA2                            
00008DA2                            Obj20_Bounce:				; XREF: Obj20_Index
00008DA2 4EB9 0000 0000             		jsr	ObjectFall
00008DA8 4A68 0012                  		tst.w	$12(a0)
00008DAC 6B00                       		bmi.s	Obj20_ChkExplode
00008DAE 4EB9 0000 0000             		jsr	ObjHitFloor
00008DB4 4A41                       		tst.w	d1
00008DB6 6A00                       		bpl.s	Obj20_ChkExplode
00008DB8 D368 000C                  		add.w	d1,$C(a0)
00008DBC 317C FD00 0012             		move.w	#-$300,$12(a0)
00008DC2 4A03                       		tst.b	d3
00008DC4 6700                       		beq.s	Obj20_ChkExplode
00008DC6 6B00                       		bmi.s	loc_8CA4
00008DC8 4A68 0010                  		tst.w	$10(a0)
00008DCC 6A00                       		bpl.s	Obj20_ChkExplode
00008DCE 4468 0010                  		neg.w	$10(a0)
00008DD2 6000                       		bra.s	Obj20_ChkExplode
00008DD4                            ; ===========================================================================
00008DD4                            
00008DD4                            loc_8CA4:				; XREF: Obj20_Bounce
00008DD4 4A68 0010                  		tst.w	$10(a0)
00008DD8 6B00                       		bmi.s	Obj20_ChkExplode
00008DDA 4468 0010                  		neg.w	$10(a0)
00008DDE                            
00008DDE                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00008DDE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00008DE2 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00008DE4 10BC 0024                  		move.b	#$24,0(a0)
00008DE8 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00008DEC 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00008DF2 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00008DF6                            ; ===========================================================================
00008DF6                            
00008DF6                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00008DF6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008DFA 6A00                       		bpl.s	Obj20_Display
00008DFC 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00008E02 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00008E08                            
00008E08                            Obj20_Display:
00008E08 6100 0000                  		bsr.w	DisplaySprite
00008E0C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008E10 0640 00E0                  		addi.w	#$E0,d0
00008E14 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00008E18 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00008E1C 4E75                       		rts	
00008E1E                            ; ===========================================================================
00008E1E                            ; ---------------------------------------------------------------------------
00008E1E                            ; Object 24 - explosion	from a destroyed monitor
00008E1E                            ; ---------------------------------------------------------------------------
00008E1E                            
00008E1E                            Obj24:					; XREF: Obj_Index
00008E1E 7000                       		moveq	#0,d0
00008E20 1028 0024                  		move.b	$24(a0),d0
00008E24 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00008E28 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00008E2C                            ; ===========================================================================
00008E2C 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00008E2E 0000                       		dc.w Obj24_Animate-Obj24_Index
00008E30                            ; ===========================================================================
00008E30                            
00008E30                            Obj24_Main:				; XREF: Obj24_Index
00008E30 5428 0024                  		addq.b	#2,$24(a0)
00008E34 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00008E3C 317C 041C 0002             		move.w	#$41C,2(a0)
00008E42 117C 0004 0001             		move.b	#4,1(a0)
00008E48 117C 0001 0018             		move.b	#1,$18(a0)
00008E4E 117C 0000 0020             		move.b	#0,$20(a0)
00008E54 117C 000C 0019             		move.b	#$C,$19(a0)
00008E5A 117C 0009 001E             		move.b	#9,$1E(a0)
00008E60 117C 0000 001A             		move.b	#0,$1A(a0)
00008E66 303C 00A5                  		move.w	#$A5,d0
00008E6A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play explosion sound
00008E70                            
00008E70                            Obj24_Animate:				; XREF: Obj24_Index
00008E70 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008E74 6A00                       		bpl.s	Obj24_Display
00008E76 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00008E7C 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008E80 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00008E86 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008E8A                            
00008E8A                            Obj24_Display:
00008E8A 6000 0000                  		bra.w	DisplaySprite
00008E8E                            ; ===========================================================================
00008E8E                            ; ---------------------------------------------------------------------------
00008E8E                            ; Object 27 - explosion	from a destroyed enemy
00008E8E                            ; ---------------------------------------------------------------------------
00008E8E                            
00008E8E                            Obj27:					; XREF: Obj_Index
00008E8E 7000                       		moveq	#0,d0
00008E90 1028 0024                  		move.b	$24(a0),d0
00008E94 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00008E98 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00008E9C                            ; ===========================================================================
00008E9C 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00008E9E 0000                       		dc.w Obj27_Main-Obj27_Index
00008EA0 0000                       		dc.w Obj27_Animate-Obj27_Index
00008EA2                            ; ===========================================================================
00008EA2                            
00008EA2                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00008EA2 5428 0024                  		addq.b	#2,$24(a0)
00008EA6 6100 0000                  		bsr.w	SingleObjLoad
00008EAA 6600                       		bne.s	Obj27_Main
00008EAC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00008EB0 3368 0008 0008             		move.w	8(a0),8(a1)
00008EB6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008EBC 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00008EC2                            
00008EC2                            Obj27_Main:				; XREF: Obj27_Index
00008EC2 5428 0024                  		addq.b	#2,$24(a0)
00008EC6 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00008ECE 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008ED4 117C 0004 0001             		move.b	#4,1(a0)
00008EDA 117C 0001 0018             		move.b	#1,$18(a0)
00008EE0 117C 0000 0020             		move.b	#0,$20(a0)
00008EE6 117C 000C 0019             		move.b	#$C,$19(a0)
00008EEC 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008EF2 117C 0000 001A             		move.b	#0,$1A(a0)
00008EF8 303C 00C1                  		move.w	#$C1,d0
00008EFC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00008F02                            
00008F02                            Obj27_Animate:				; XREF: Obj27_Index
00008F02 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008F06 6A00                       		bpl.s	Obj27_Display
00008F08 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008F0E 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008F12 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00008F18 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008F1C                            
00008F1C                            Obj27_Display:
00008F1C 6000 0000                  		bra.w	DisplaySprite
00008F20                            ; ===========================================================================
00008F20                            ; ---------------------------------------------------------------------------
00008F20                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00008F20                            ; ---------------------------------------------------------------------------
00008F20                            
00008F20                            Obj3F:					; XREF: Obj_Index
00008F20 7000                       		moveq	#0,d0
00008F22 1028 0024                  		move.b	$24(a0),d0
00008F26 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00008F2A 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00008F2E                            ; ===========================================================================
00008F2E 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00008F30 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
00008F32                            ; ===========================================================================
00008F32                            
00008F32                            Obj3F_Main:				; XREF: Obj3F_Index
00008F32 5428 0024                  		addq.b	#2,$24(a0)
00008F36 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00008F3E 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008F44 117C 0004 0001             		move.b	#4,1(a0)
00008F4A 117C 0001 0018             		move.b	#1,$18(a0)
00008F50 117C 0000 0020             		move.b	#0,$20(a0)
00008F56 117C 000C 0019             		move.b	#$C,$19(a0)
00008F5C 117C 0007 001E             		move.b	#7,$1E(a0)
00008F62 117C 0000 001A             		move.b	#0,$1A(a0)
00008F68 303C 00C4                  		move.w	#$C4,d0
00008F6C 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00008F72                            ; ===========================================================================
00008F72                            Ani_obj1E:
00008F72                            	include "_anim\obj1E.asm"
00008F72                            ; ---------------------------------------------------------------------------
00008F72                            ; Animation script - doors (SBZ)
00008F72                            ; ---------------------------------------------------------------------------
00008F72 0000                       		dc.w byte_8E4A-Ani_obj1E
00008F74 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00008F8C 00                         		even
00008F8C 00                         		even
00008F8C                            
00008F8C                            ; ---------------------------------------------------------------------------
00008F8C                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008F8C                            ; ---------------------------------------------------------------------------
00008F8C                            Map_obj1E:
00008F8C                            	include "_maps\obj1E.asm"
00008F8C                            ; ---------------------------------------------------------------------------
00008F8C                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008F8C                            ; ---------------------------------------------------------------------------
00008F8C 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00008F90 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00008F94 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00008F98 02                         byte_8E6E:	dc.b 2
00008F99 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008F9E FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00008FA3 02                         byte_8E79:	dc.b 2
00008FA4 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008FA9 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00008FAE 02                         byte_8E84:	dc.b 2
00008FAF F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00008FB4 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00008FB9 02                         byte_8E8F:	dc.b 2
00008FBA E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00008FBF F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00008FC4 01                         byte_8E9A:	dc.b 1
00008FC5 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00008FCA 01                         byte_8EA0:	dc.b 1
00008FCB F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00008FD0                            		even
00008FD0                            		even
00008FD0                            
00008FD0                            ; ---------------------------------------------------------------------------
00008FD0                            ; Sprite mappings - explosion
00008FD0                            ; ---------------------------------------------------------------------------
00008FD0                            Map_obj24:
00008FD0                            	include "_maps\obj24.asm"
00008FD0                            ; ---------------------------------------------------------------------------
00008FD0                            ; Sprite mappings - explosion
00008FD0                            ; ---------------------------------------------------------------------------
00008FD0 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00008FD4 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00008FD8 01                         byte_8EAE:	dc.b 1
00008FD9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00008FDE 01                         byte_8EB4:	dc.b 1
00008FDF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00008FE4 01                         byte_8EBA:	dc.b 1
00008FE5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00008FEA 01                         byte_8EC0:	dc.b 1
00008FEB F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00008FF0                            		even
00008FF0                            		even
00008FF0                            
00008FF0                            ; ---------------------------------------------------------------------------
00008FF0                            ; Sprite mappings - explosion
00008FF0                            ; ---------------------------------------------------------------------------
00008FF0 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00008FF4 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00008FF8 0000                       		dc.w byte_8EF7-Map_obj27
00008FFA 01                         byte_8ED0:	dc.b 1
00008FFB F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009000 01                         byte_8ED6:	dc.b 1
00009001 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009006 01                         byte_8EDC:	dc.b 1
00009007 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000900C 04                         byte_8EE2:	dc.b 4
0000900D EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009012 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009017 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000901C FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009021 04                         byte_8EF7:	dc.b 4
00009022 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009027 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000902C 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009031 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009036                            		even
00009036                            ; ---------------------------------------------------------------------------
00009036                            ; Sprite mappings - explosion from when	a boss is destroyed
00009036                            ; ---------------------------------------------------------------------------
00009036 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009038 0000                       		dc.w byte_8F16-Map_obj3F
0000903A 0000                       		dc.w byte_8F1C-Map_obj3F
0000903C FFD6                       		dc.w byte_8EE2-Map_obj3F
0000903E FFEB                       		dc.w byte_8EF7-Map_obj3F
00009040 01                         byte_8F16:	dc.b 1
00009041 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009046 01                         byte_8F1C:	dc.b 1
00009047 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000904C                            		even
0000904C                            ; ===========================================================================
0000904C                            ; ---------------------------------------------------------------------------
0000904C                            ; Object 28 - animals
0000904C                            ; ---------------------------------------------------------------------------
0000904C                            
0000904C                            Obj28:					; XREF: Obj_Index
0000904C 7000                       		moveq	#0,d0
0000904E 1028 0024                  		move.b	$24(a0),d0
00009052 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009056 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000905A                            ; ===========================================================================
0000905A 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000905E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009062 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009066 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000906A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000906E 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009072 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009076 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000907A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000907E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009082 0000                       		dc.w loc_92D6-Obj28_Index
00009084                            
00009084 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009090                            
00009090 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009094 0000 0000                  		dc.l Map_obj28
00009098 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000909C 0000 0000                  		dc.l Map_obj28a		; mappings address
000090A0 FE80 FD00                  		dc.w $FE80, $FD00
000090A4 0000 0000                  		dc.l Map_obj28
000090A8 FEC0 FE80                  		dc.w $FEC0, $FE80
000090AC 0000 0000                  		dc.l Map_obj28a
000090B0 FE40 FD00                  		dc.w $FE40, $FD00
000090B4 0000 0000                  		dc.l Map_obj28b
000090B8 FD00 FC00                  		dc.w $FD00, $FC00
000090BC 0000 0000                  		dc.l Map_obj28a
000090C0 FD80 FC80                  		dc.w $FD80, $FC80
000090C4 0000 0000                  		dc.l Map_obj28b
000090C8                            
000090C8 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000090D8 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000090E8 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000090F4                            
000090F4 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009108 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000911C 0000 0000                  		dc.l Map_obj28b
00009120                            
00009120 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009132 0565 05B3                  		dc.w $565, $5B3
00009136                            ; ===========================================================================
00009136                            
00009136                            Obj28_Ending:				; XREF: Obj28_Index
00009136 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000913A 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000913E 7000                       		moveq	#0,d0
00009140 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009144 D040                       		add.w	d0,d0		; multiply d0 by 2
00009146 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000914A 0440 0014                  		subi.w	#$14,d0
0000914E 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009154 D040                       		add.w	d0,d0
00009156 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000915C 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009160 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009166 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000916C 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009172 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009178 117C 000C 0016             		move.b	#$C,$16(a0)
0000917E 117C 0004 0001             		move.b	#4,1(a0)
00009184 08E8 0000 0001             		bset	#0,1(a0)
0000918A 117C 0006 0018             		move.b	#6,$18(a0)
00009190 117C 0008 0019             		move.b	#8,$19(a0)
00009196 117C 0007 001E             		move.b	#7,$1E(a0)
0000919C 6000 0000                  		bra.w	DisplaySprite
000091A0                            ; ===========================================================================
000091A0                            
000091A0                            Obj28_FromEnemy:			; XREF: Obj28_Ending
000091A0 5428 0024                  		addq.b	#2,$24(a0)
000091A4 6100 980E                  		bsr.w	RandomNumber
000091A8 0240 0001                  		andi.w	#1,d0
000091AC 7200                       		moveq	#0,d1
000091AE 1238 FE10                  		move.b	($FFFFFE10).w,d1
000091B2 D241                       		add.w	d1,d1
000091B4 D240                       		add.w	d0,d1
000091B6 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
000091BA 1031 1000                  		move.b	(a1,d1.w),d0
000091BE 1140 0030                  		move.b	d0,$30(a0)
000091C2 E748                       		lsl.w	#3,d0
000091C4 43FA FECA                  		lea	Obj28_Variables(pc),a1
000091C8 D2C0                       		adda.w	d0,a1
000091CA 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
000091CE 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
000091D2 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
000091D6 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000091DC 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000091E2 6700                       		beq.s	loc_90C0	; if yes, branch
000091E4 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000091EA                            
000091EA                            loc_90C0:
000091EA 117C 000C 0016             		move.b	#$C,$16(a0)
000091F0 117C 0004 0001             		move.b	#4,1(a0)
000091F6 08E8 0000 0001             		bset	#0,1(a0)
000091FC 117C 0006 0018             		move.b	#6,$18(a0)
00009202 117C 0008 0019             		move.b	#8,$19(a0)
00009208 117C 0007 001E             		move.b	#7,$1E(a0)
0000920E 117C 0002 001A             		move.b	#2,$1A(a0)
00009214 317C FC00 0012             		move.w	#-$400,$12(a0)
0000921A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000921E 6600                       		bne.s	loc_911C
00009220 6100 0000                  		bsr.w	SingleObjLoad
00009224 6600                       		bne.s	Obj28_Display
00009226 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000922A 3368 0008 0008             		move.w	8(a0),8(a1)
00009230 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009236 3028 003E                  		move.w	$3E(a0),d0
0000923A E248                       		lsr.w	#1,d0
0000923C 1340 001A                  		move.b	d0,$1A(a1)
00009240                            
00009240                            Obj28_Display:
00009240 6000 0000                  		bra.w	DisplaySprite
00009244                            ; ===========================================================================
00009244                            
00009244                            loc_911C:
00009244 117C 0012 0024             		move.b	#$12,$24(a0)
0000924A 4268 0010                  		clr.w	$10(a0)
0000924E 6000 0000                  		bra.w	DisplaySprite
00009252                            ; ===========================================================================
00009252                            
00009252                            loc_912A:				; XREF: Obj28_Index
00009252 4A28 0001                  		tst.b	1(a0)
00009256 6A00 0000                  		bpl.w	DeleteObject
0000925A 6100 0000                  		bsr.w	ObjectFall
0000925E 4A68 0012                  		tst.w	$12(a0)
00009262 6B00                       		bmi.s	loc_9180
00009264 4EB9 0000 0000             		jsr	ObjHitFloor
0000926A 4A41                       		tst.w	d1
0000926C 6A00                       		bpl.s	loc_9180
0000926E D368 000C                  		add.w	d1,$C(a0)
00009272 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009278 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000927E 117C 0001 001A             		move.b	#1,$1A(a0)
00009284 1028 0030                  		move.b	$30(a0),d0
00009288 D000                       		add.b	d0,d0
0000928A 5800                       		addq.b	#4,d0
0000928C 1140 0024                  		move.b	d0,$24(a0)
00009290 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009294 6700                       		beq.s	loc_9180
00009296 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000929C 6700                       		beq.s	loc_9180
0000929E 4468 0010                  		neg.w	$10(a0)
000092A2 0868 0000 0001             		bchg	#0,1(a0)
000092A8                            
000092A8                            loc_9180:
000092A8 6000 0000                  		bra.w	DisplaySprite
000092AC                            ; ===========================================================================
000092AC                            
000092AC                            loc_9184:				; XREF: Obj28_Index
000092AC 6100 0000                  		bsr.w	ObjectFall
000092B0 117C 0001 001A             		move.b	#1,$1A(a0)
000092B6 4A68 0012                  		tst.w	$12(a0)
000092BA 6B00                       		bmi.s	loc_91AE
000092BC 117C 0000 001A             		move.b	#0,$1A(a0)
000092C2 4EB9 0000 0000             		jsr	ObjHitFloor
000092C8 4A41                       		tst.w	d1
000092CA 6A00                       		bpl.s	loc_91AE
000092CC D368 000C                  		add.w	d1,$C(a0)
000092D0 3168 0034 0012             		move.w	$34(a0),$12(a0)
000092D6                            
000092D6                            loc_91AE:
000092D6 4A28 0028                  		tst.b	$28(a0)
000092DA 6600                       		bne.s	loc_9224
000092DC 4A28 0001                  		tst.b	1(a0)
000092E0 6A00 0000                  		bpl.w	DeleteObject
000092E4 6000 0000                  		bra.w	DisplaySprite
000092E8                            ; ===========================================================================
000092E8                            
000092E8                            loc_91C0:				; XREF: Obj28_Index
000092E8 6100 0000                  		bsr.w	SpeedToPos
000092EC 0668 0018 0012             		addi.w	#$18,$12(a0)
000092F2 4A68 0012                  		tst.w	$12(a0)
000092F6 6B00                       		bmi.s	loc_91FC
000092F8 4EB9 0000 0000             		jsr	ObjHitFloor
000092FE 4A41                       		tst.w	d1
00009300 6A00                       		bpl.s	loc_91FC
00009302 D368 000C                  		add.w	d1,$C(a0)
00009306 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000930C 4A28 0028                  		tst.b	$28(a0)
00009310 6700                       		beq.s	loc_91FC
00009312 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009318 6700                       		beq.s	loc_91FC
0000931A 4468 0010                  		neg.w	$10(a0)
0000931E 0868 0000 0001             		bchg	#0,1(a0)
00009324                            
00009324                            loc_91FC:
00009324 5328 001E                  		subq.b	#1,$1E(a0)
00009328 6A00                       		bpl.s	loc_9212
0000932A 117C 0001 001E             		move.b	#1,$1E(a0)
00009330 5228 001A                  		addq.b	#1,$1A(a0)
00009334 0228 0001 001A             		andi.b	#1,$1A(a0)
0000933A                            
0000933A                            loc_9212:
0000933A 4A28 0028                  		tst.b	$28(a0)
0000933E 6600                       		bne.s	loc_9224
00009340 4A28 0001                  		tst.b	1(a0)
00009344 6A00 0000                  		bpl.w	DeleteObject
00009348 6000 0000                  		bra.w	DisplaySprite
0000934C                            ; ===========================================================================
0000934C                            
0000934C                            loc_9224:				; XREF: Obj28_Index
0000934C 3028 0008                  		move.w	8(a0),d0
00009350 9078 D008                  		sub.w	($FFFFD008).w,d0
00009354 6500                       		bcs.s	loc_923C
00009356 0440 0180                  		subi.w	#$180,d0
0000935A 6A00                       		bpl.s	loc_923C
0000935C 4A28 0001                  		tst.b	1(a0)
00009360 6A00 0000                  		bpl.w	DeleteObject
00009364                            
00009364                            loc_923C:
00009364 6000 0000                  		bra.w	DisplaySprite
00009368                            ; ===========================================================================
00009368                            
00009368                            loc_9240:				; XREF: Obj28_Index
00009368 4A28 0001                  		tst.b	1(a0)
0000936C 6A00 0000                  		bpl.w	DeleteObject
00009370 5368 0036                  		subq.w	#1,$36(a0)
00009374 6600 0000                  		bne.w	loc_925C
00009378 117C 0002 0024             		move.b	#2,$24(a0)
0000937E 117C 0003 0018             		move.b	#3,$18(a0)
00009384                            
00009384                            loc_925C:
00009384 6000 0000                  		bra.w	DisplaySprite
00009388                            ; ===========================================================================
00009388                            
00009388                            loc_9260:				; XREF: Obj28_Index
00009388 6100 0000                  		bsr.w	sub_9404
0000938C 6400                       		bcc.s	loc_927C
0000938E 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009394 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000939A 117C 000E 0024             		move.b	#$E,$24(a0)
000093A0 6000 FF46                  		bra.w	loc_91C0
000093A4                            ; ===========================================================================
000093A4                            
000093A4                            loc_927C:
000093A4 6000 FFA6                  		bra.w	loc_9224
000093A8                            ; ===========================================================================
000093A8                            
000093A8                            loc_9280:				; XREF: Obj28_Index
000093A8 6100 0000                  		bsr.w	sub_9404
000093AC 6A00                       		bpl.s	loc_92B6
000093AE 4268 0010                  		clr.w	$10(a0)
000093B2 4268 0032                  		clr.w	$32(a0)
000093B6 6100 0000                  		bsr.w	SpeedToPos
000093BA 0668 0018 0012             		addi.w	#$18,$12(a0)
000093C0 6100 0000                  		bsr.w	loc_93C4
000093C4 6100 0000                  		bsr.w	loc_93EC
000093C8 5328 001E                  		subq.b	#1,$1E(a0)
000093CC 6A00                       		bpl.s	loc_92B6
000093CE 117C 0001 001E             		move.b	#1,$1E(a0)
000093D4 5228 001A                  		addq.b	#1,$1A(a0)
000093D8 0228 0001 001A             		andi.b	#1,$1A(a0)
000093DE                            
000093DE                            loc_92B6:
000093DE 6000 FF6C                  		bra.w	loc_9224
000093E2                            ; ===========================================================================
000093E2                            
000093E2                            loc_92BA:				; XREF: Obj28_Index
000093E2 6100 0000                  		bsr.w	sub_9404
000093E6 6A00                       		bpl.s	loc_9310
000093E8 3168 0032 0010             		move.w	$32(a0),$10(a0)
000093EE 3168 0034 0012             		move.w	$34(a0),$12(a0)
000093F4 117C 0004 0024             		move.b	#4,$24(a0)
000093FA 6000 FEB0                  		bra.w	loc_9184
000093FE                            ; ===========================================================================
000093FE                            
000093FE                            loc_92D6:				; XREF: Obj28_Index
000093FE 6100 0000                  		bsr.w	ObjectFall
00009402 117C 0001 001A             		move.b	#1,$1A(a0)
00009408 4A68 0012                  		tst.w	$12(a0)
0000940C 6B00                       		bmi.s	loc_9310
0000940E 117C 0000 001A             		move.b	#0,$1A(a0)
00009414 4EB9 0000 0000             		jsr	ObjHitFloor
0000941A 4A41                       		tst.w	d1
0000941C 6A00                       		bpl.s	loc_9310
0000941E 4628 0029                  		not.b	$29(a0)
00009422 6600                       		bne.s	loc_9306
00009424 4468 0010                  		neg.w	$10(a0)
00009428 0868 0000 0001             		bchg	#0,1(a0)
0000942E                            
0000942E                            loc_9306:
0000942E D368 000C                  		add.w	d1,$C(a0)
00009432 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009438                            
00009438                            loc_9310:
00009438 6000 FF12                  		bra.w	loc_9224
0000943C                            ; ===========================================================================
0000943C                            
0000943C                            loc_9314:				; XREF: Obj28_Index
0000943C 6100 0000                  		bsr.w	sub_9404
00009440 6A00                       		bpl.s	loc_932E
00009442 4268 0010                  		clr.w	$10(a0)
00009446 4268 0032                  		clr.w	$32(a0)
0000944A 6100 0000                  		bsr.w	ObjectFall
0000944E 6100 0000                  		bsr.w	loc_93C4
00009452 6100 0000                  		bsr.w	loc_93EC
00009456                            
00009456                            loc_932E:
00009456 6000 FEF4                  		bra.w	loc_9224
0000945A                            ; ===========================================================================
0000945A                            
0000945A                            loc_9332:				; XREF: Obj28_Index
0000945A 6100 0000                  		bsr.w	sub_9404
0000945E 6A00                       		bpl.s	loc_936C
00009460 6100 0000                  		bsr.w	ObjectFall
00009464 117C 0001 001A             		move.b	#1,$1A(a0)
0000946A 4A68 0012                  		tst.w	$12(a0)
0000946E 6B00                       		bmi.s	loc_936C
00009470 117C 0000 001A             		move.b	#0,$1A(a0)
00009476 4EB9 0000 0000             		jsr	ObjHitFloor
0000947C 4A41                       		tst.w	d1
0000947E 6A00                       		bpl.s	loc_936C
00009480 4468 0010                  		neg.w	$10(a0)
00009484 0868 0000 0001             		bchg	#0,1(a0)
0000948A D368 000C                  		add.w	d1,$C(a0)
0000948E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009494                            
00009494                            loc_936C:
00009494 6000 FEB6                  		bra.w	loc_9224
00009498                            ; ===========================================================================
00009498                            
00009498                            loc_9370:				; XREF: Obj28_Index
00009498 6100 0000                  		bsr.w	sub_9404
0000949C 6A00                       		bpl.s	loc_93C0
0000949E 6100 0000                  		bsr.w	SpeedToPos
000094A2 0668 0018 0012             		addi.w	#$18,$12(a0)
000094A8 4A68 0012                  		tst.w	$12(a0)
000094AC 6B00                       		bmi.s	loc_93AA
000094AE 4EB9 0000 0000             		jsr	ObjHitFloor
000094B4 4A41                       		tst.w	d1
000094B6 6A00                       		bpl.s	loc_93AA
000094B8 4628 0029                  		not.b	$29(a0)
000094BC 6600                       		bne.s	loc_93A0
000094BE 4468 0010                  		neg.w	$10(a0)
000094C2 0868 0000 0001             		bchg	#0,1(a0)
000094C8                            
000094C8                            loc_93A0:
000094C8 D368 000C                  		add.w	d1,$C(a0)
000094CC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000094D2                            
000094D2                            loc_93AA:
000094D2 5328 001E                  		subq.b	#1,$1E(a0)
000094D6 6A00                       		bpl.s	loc_93C0
000094D8 117C 0001 001E             		move.b	#1,$1E(a0)
000094DE 5228 001A                  		addq.b	#1,$1A(a0)
000094E2 0228 0001 001A             		andi.b	#1,$1A(a0)
000094E8                            
000094E8                            loc_93C0:
000094E8 6000 FE62                  		bra.w	loc_9224
000094EC                            ; ===========================================================================
000094EC                            
000094EC                            loc_93C4:
000094EC 117C 0001 001A             		move.b	#1,$1A(a0)
000094F2 4A68 0012                  		tst.w	$12(a0)
000094F6 6B00                       		bmi.s	locret_93EA
000094F8 117C 0000 001A             		move.b	#0,$1A(a0)
000094FE 4EB9 0000 0000             		jsr	ObjHitFloor
00009504 4A41                       		tst.w	d1
00009506 6A00                       		bpl.s	locret_93EA
00009508 D368 000C                  		add.w	d1,$C(a0)
0000950C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009512                            
00009512                            locret_93EA:
00009512 4E75                       		rts	
00009514                            ; ===========================================================================
00009514                            
00009514                            loc_93EC:
00009514 08E8 0000 0001             		bset	#0,1(a0)
0000951A 3028 0008                  		move.w	8(a0),d0
0000951E 9078 D008                  		sub.w	($FFFFD008).w,d0
00009522 6400                       		bcc.s	locret_9402
00009524 08A8 0000 0001             		bclr	#0,1(a0)
0000952A                            
0000952A                            locret_9402:
0000952A 4E75                       		rts	
0000952C                            
0000952C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000952C                            
0000952C                            
0000952C                            sub_9404:
0000952C 3038 D008                  		move.w	($FFFFD008).w,d0
00009530 9068 0008                  		sub.w	8(a0),d0
00009534 0440 00B8                  		subi.w	#$B8,d0
00009538 4E75                       		rts	
0000953A                            ; End of function sub_9404
0000953A                            
0000953A                            ; ===========================================================================
0000953A                            ; ---------------------------------------------------------------------------
0000953A                            ; Object 29 - points that appear when you destroy something
0000953A                            ; ---------------------------------------------------------------------------
0000953A                            
0000953A                            Obj29:					; XREF: Obj_Index
0000953A 7000                       		moveq	#0,d0
0000953C 1028 0024                  		move.b	$24(a0),d0
00009540 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009544 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009548 6000 0000                  		bra.w	DisplaySprite
0000954C                            ; ===========================================================================
0000954C 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000954E 0000                       		dc.w Obj29_Slower-Obj29_Index
00009550                            ; ===========================================================================
00009550                            
00009550                            Obj29_Main:				; XREF: Obj29_Index
00009550 5428 0024                  		addq.b	#2,$24(a0)
00009554 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000955C 317C 2797 0002             		move.w	#$2797,2(a0)
00009562 117C 0004 0001             		move.b	#4,1(a0)
00009568 117C 0001 0018             		move.b	#1,$18(a0)
0000956E 117C 0008 0019             		move.b	#8,$19(a0)
00009574 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000957A                            
0000957A                            Obj29_Slower:				; XREF: Obj29_Index
0000957A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000957E 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009582 6100 0000                  		bsr.w	SpeedToPos
00009586 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000958C 4E75                       		rts	
0000958E                            ; ===========================================================================
0000958E                            ; ---------------------------------------------------------------------------
0000958E                            ; Sprite mappings - animals
0000958E                            ; ---------------------------------------------------------------------------
0000958E                            Map_obj28:
0000958E                            	include "_maps\obj28.asm"
0000958E                            ; ---------------------------------------------------------------------------
0000958E                            ; Sprite mappings - animals
0000958E                            ; ---------------------------------------------------------------------------
0000958E 0000                       		dc.w byte_9472-Map_obj28
00009590 0000                       		dc.w byte_9478-Map_obj28
00009592 0000                       		dc.w byte_946C-Map_obj28
00009594 01                         byte_946C:	dc.b 1
00009595 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000959A 01                         byte_9472:	dc.b 1
0000959B F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
000095A0 01                         byte_9478:	dc.b 1
000095A1 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
000095A6                            		even
000095A6                            		even
000095A6                            
000095A6                            Map_obj28a:
000095A6                            	include "_maps\obj28a.asm"
000095A6                            ; ---------------------------------------------------------------------------
000095A6                            ; Sprite mappings - animals
000095A6                            ; ---------------------------------------------------------------------------
000095A6 0000                       		dc.w byte_948A-Map_obj28a
000095A8 0000                       		dc.w byte_9490-Map_obj28a
000095AA 0000                       		dc.w byte_9484-Map_obj28a
000095AC 01                         byte_9484:	dc.b 1
000095AD F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000095B2 01                         byte_948A:	dc.b 1
000095B3 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
000095B8 01                         byte_9490:	dc.b 1
000095B9 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
000095BE                            		even
000095BE                            		even
000095BE                            
000095BE                            Map_obj28b:
000095BE                            	include "_maps\obj28b.asm"
000095BE                            ; ---------------------------------------------------------------------------
000095BE                            ; Sprite mappings - animals
000095BE                            ; ---------------------------------------------------------------------------
000095BE 0000                       		dc.w byte_94A2-Map_obj28b
000095C0 0000                       		dc.w byte_94A8-Map_obj28b
000095C2 0000                       		dc.w byte_949C-Map_obj28b
000095C4 01                         byte_949C:	dc.b 1
000095C5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000095CA 01                         byte_94A2:	dc.b 1
000095CB FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
000095D0 01                         byte_94A8:	dc.b 1
000095D1 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
000095D6                            		even
000095D6                            		even
000095D6                            
000095D6                            ; ---------------------------------------------------------------------------
000095D6                            ; Sprite mappings - points that	appear when you	destroy	something
000095D6                            ; ---------------------------------------------------------------------------
000095D6                            Map_obj29:
000095D6                            	include "_maps\obj29.asm"
000095D6                            ; ---------------------------------------------------------------------------
000095D6                            ; Sprite mappings - points that	appear when you	destroy	something
000095D6                            ; ---------------------------------------------------------------------------
000095D6 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
000095DA 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
000095DE 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
000095E2 0000                       		dc.w byte_94E5-Map_obj29
000095E4 01                         byte_94BC:	dc.b 1
000095E5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
000095EA 01                         byte_94C2:	dc.b 1
000095EB FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
000095F0 01                         byte_94C8:	dc.b 1
000095F1 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
000095F6 01                         byte_94CE:	dc.b 1
000095F7 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
000095FC 01                         byte_94D4:	dc.b 1
000095FD FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009602 02                         byte_94DA:	dc.b 2
00009603 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009608 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000960D 02                         byte_94E5:	dc.b 2
0000960E FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009613 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009618                            		even
00009618                            		even
00009618                            
00009618                            ; ===========================================================================
00009618                            ; ---------------------------------------------------------------------------
00009618                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009618                            ; ---------------------------------------------------------------------------
00009618                            
00009618                            Obj1F:					; XREF: Obj_Index
00009618 7000                       		moveq	#0,d0
0000961A 1028 0024                  		move.b	$24(a0),d0
0000961E 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009622 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009626                            ; ===========================================================================
00009626 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009628 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000962A 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000962C 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000962E 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009630                            ; ===========================================================================
00009630                            
00009630                            Obj1F_Main:				; XREF: Obj1F_Index
00009630 117C 0010 0016             		move.b	#$10,$16(a0)
00009636 117C 0008 0017             		move.b	#8,$17(a0)
0000963C 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009644 317C 0400 0002             		move.w	#$400,2(a0)
0000964A 117C 0004 0001             		move.b	#4,1(a0)
00009650 117C 0003 0018             		move.b	#3,$18(a0)
00009656 117C 0006 0020             		move.b	#6,$20(a0)
0000965C 117C 0015 0019             		move.b	#$15,$19(a0)
00009662 6100 0000                  		bsr.w	ObjectFall
00009666 4EB9 0000 0000             		jsr	ObjHitFloor
0000966C 4A41                       		tst.w	d1
0000966E 6A00                       		bpl.s	locret_955A
00009670 D368 000C                  		add.w	d1,$C(a0)
00009674 1143 0026                  		move.b	d3,$26(a0)
00009678 317C 0000 0012             		move.w	#0,$12(a0)
0000967E 5428 0024                  		addq.b	#2,$24(a0)
00009682                            
00009682                            locret_955A:
00009682 4E75                       		rts	
00009684                            ; ===========================================================================
00009684                            
00009684                            Obj1F_Action:				; XREF: Obj1F_Index
00009684 7000                       		moveq	#0,d0
00009686 1028 0025                  		move.b	$25(a0),d0
0000968A 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000968E 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009692 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009698 6100 0000                  		bsr.w	AnimateSprite
0000969C 6000 0000                  		bra.w	MarkObjGone
000096A0                            ; ===========================================================================
000096A0 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
000096A2 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
000096A4                            ; ===========================================================================
000096A4                            
000096A4                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
000096A4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000096A8 6A00                       		bpl.s	locret_95B6
000096AA 4A28 0001                  		tst.b	1(a0)
000096AE 6A00                       		bpl.s	Obj1F_Move
000096B0 0868 0001 0032             		bchg	#1,$32(a0)
000096B6 6600                       		bne.s	Obj1F_MakeFire
000096B8                            
000096B8                            Obj1F_Move:
000096B8 5428 0025                  		addq.b	#2,$25(a0)
000096BC 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
000096C2 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
000096C8 6100 0000                  		bsr.w	Obj1F_SetAni
000096CC 5600                       		addq.b	#3,d0
000096CE 1140 001C                  		move.b	d0,$1C(a0)
000096D2 0868 0000 0022             		bchg	#0,$22(a0)
000096D8 6600                       		bne.s	locret_95B6
000096DA 4468 0010                  		neg.w	$10(a0)		; change direction
000096DE                            
000096DE                            locret_95B6:
000096DE 4E75                       		rts	
000096E0                            ; ===========================================================================
000096E0                            
000096E0                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
000096E0 317C 003B 0030             		move.w	#$3B,$30(a0)
000096E6 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
000096EC 6100 0000                  		bsr.w	SingleObjLoad
000096F0 6600                       		bne.s	Obj1F_MakeFire2
000096F2 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
000096F6 137C 0006 0024             		move.b	#6,$24(a1)
000096FC 3368 0008 0008             		move.w	8(a0),8(a1)
00009702 0469 0010 0008             		subi.w	#$10,8(a1)
00009708 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000970E 337C FF00 0010             		move.w	#-$100,$10(a1)
00009714                            
00009714                            Obj1F_MakeFire2:
00009714 6100 0000                  		bsr.w	SingleObjLoad
00009718 6600                       		bne.s	locret_9618
0000971A 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000971E 137C 0006 0024             		move.b	#6,$24(a1)
00009724 3368 0008 0008             		move.w	8(a0),8(a1)
0000972A 0669 0010 0008             		addi.w	#$10,8(a1)
00009730 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009736 337C 0100 0010             		move.w	#$100,$10(a1)
0000973C                            
0000973C                            locret_9618:
0000973C 4E75                       		rts	
0000973E                            ; ===========================================================================
0000973E                            
0000973E                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000973E 5368 0030                  		subq.w	#1,$30(a0)
00009742 6B00                       		bmi.s	loc_966E
00009744 6100 0000                  		bsr.w	SpeedToPos
00009748 0868 0000 0032             		bchg	#0,$32(a0)
0000974E 6600                       		bne.s	loc_9654
00009750 3628 0008                  		move.w	8(a0),d3
00009754 0643 0010                  		addi.w	#$10,d3
00009758 0828 0000 0022             		btst	#0,$22(a0)
0000975E 6700                       		beq.s	loc_9640
00009760 0443 0020                  		subi.w	#$20,d3
00009764                            
00009764                            loc_9640:
00009764 4EB9 0000 0000             		jsr	ObjHitFloor2
0000976A 0C41 FFF8                  		cmpi.w	#-8,d1
0000976E 6D00                       		blt.s	loc_966E
00009770 0C41 000C                  		cmpi.w	#$C,d1
00009774 6C00                       		bge.s	loc_966E
00009776 4E75                       		rts	
00009778                            ; ===========================================================================
00009778                            
00009778                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009778 4EB9 0000 0000             		jsr	ObjHitFloor
0000977E D368 000C                  		add.w	d1,$C(a0)
00009782 1143 0026                  		move.b	d3,$26(a0)
00009786 6100 0000                  		bsr.w	Obj1F_SetAni
0000978A 5600                       		addq.b	#3,d0
0000978C 1140 001C                  		move.b	d0,$1C(a0)
00009790 4E75                       		rts	
00009792                            ; ===========================================================================
00009792                            
00009792                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009792 5528 0025                  		subq.b	#2,$25(a0)
00009796 317C 003B 0030             		move.w	#59,$30(a0)
0000979C 317C 0000 0010             		move.w	#0,$10(a0)
000097A2 6100 0000                  		bsr.w	Obj1F_SetAni
000097A6 1140 001C                  		move.b	d0,$1C(a0)
000097AA 4E75                       		rts	
000097AC                            ; ---------------------------------------------------------------------------
000097AC                            ; Subroutine to	set the	correct	animation for a	Crabmeat
000097AC                            ; ---------------------------------------------------------------------------
000097AC                            
000097AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000097AC                            
000097AC                            
000097AC                            Obj1F_SetAni:				; XREF: loc_966E
000097AC 7000                       		moveq	#0,d0
000097AE 1628 0026                  		move.b	$26(a0),d3
000097B2 6B00                       		bmi.s	loc_96A4
000097B4 0C03 0006                  		cmpi.b	#6,d3
000097B8 6500                       		bcs.s	locret_96A2
000097BA 7001                       		moveq	#1,d0
000097BC 0828 0000 0022             		btst	#0,$22(a0)
000097C2 6600                       		bne.s	locret_96A2
000097C4 7002                       		moveq	#2,d0
000097C6                            
000097C6                            locret_96A2:
000097C6 4E75                       		rts	
000097C8                            ; ===========================================================================
000097C8                            
000097C8                            loc_96A4:				; XREF: Obj1F_SetAni
000097C8 0C03 00FA                  		cmpi.b	#-6,d3
000097CC 6200                       		bhi.s	locret_96B6
000097CE 7002                       		moveq	#2,d0
000097D0 0828 0000 0022             		btst	#0,$22(a0)
000097D6 6600                       		bne.s	locret_96B6
000097D8 7001                       		moveq	#1,d0
000097DA                            
000097DA                            locret_96B6:
000097DA 4E75                       		rts	
000097DC                            ; End of function Obj1F_SetAni
000097DC                            
000097DC                            ; ===========================================================================
000097DC                            
000097DC                            Obj1F_Delete:				; XREF: Obj1F_Index
000097DC 6100 0000                  		bsr.w	DeleteObject
000097E0 4E75                       		rts	
000097E2                            ; ===========================================================================
000097E2                            ; ---------------------------------------------------------------------------
000097E2                            ; Sub-object - missile that the	Crabmeat throws
000097E2                            ; ---------------------------------------------------------------------------
000097E2                            
000097E2                            Obj1F_BallMain:				; XREF: Obj1F_Index
000097E2 5428 0024                  		addq.b	#2,$24(a0)
000097E6 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000097EE 317C 0400 0002             		move.w	#$400,2(a0)
000097F4 117C 0004 0001             		move.b	#4,1(a0)
000097FA 117C 0003 0018             		move.b	#3,$18(a0)
00009800 117C 0087 0020             		move.b	#$87,$20(a0)
00009806 117C 0008 0019             		move.b	#8,$19(a0)
0000980C 317C FC00 0012             		move.w	#-$400,$12(a0)
00009812 117C 0007 001C             		move.b	#7,$1C(a0)
00009818                            
00009818                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009818 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000981E 6100 0000                  		bsr.w	AnimateSprite
00009822 6100 0000                  		bsr.w	ObjectFall
00009826 6100 0000                  		bsr.w	DisplaySprite
0000982A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000982E 0640 00E0                  		addi.w	#$E0,d0
00009832 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009836 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009838 4E75                       		rts	
0000983A                            ; ===========================================================================
0000983A                            
0000983A                            Obj1F_Delete2:
0000983A 6000 0000                  		bra.w	DeleteObject
0000983E                            ; ===========================================================================
0000983E                            Ani_obj1F:
0000983E                            	include "_anim\obj1F.asm"
0000983E                            ; ---------------------------------------------------------------------------
0000983E                            ; Animation script - Crabmeat enemy
0000983E                            ; ---------------------------------------------------------------------------
0000983E 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009844 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000984A 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000984E 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009852 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009856 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000985A 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009860 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009866 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000986C 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009870 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009874                            		even
00009874                            		even
00009874                            
00009874                            ; ---------------------------------------------------------------------------
00009874                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009874                            ; ---------------------------------------------------------------------------
00009874                            Map_obj1F:
00009874                            	include "_maps\obj1F.asm"
00009874                            ; ---------------------------------------------------------------------------
00009874                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009874                            ; ---------------------------------------------------------------------------
00009874 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
00009878 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000987C 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
00009880 0000                       		dc.w byte_97D7-Map_obj1F
00009882 04                         byte_975E:	dc.b 4
00009883 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
00009888 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000988D 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
00009892 0005 0806 00               		dc.b 0,	5, 8, 6, 0
00009897 04                         byte_9773:	dc.b 4
00009898 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000989D F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
000098A2 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
000098A7 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
000098AC 04                         byte_9788:	dc.b 4
000098AD EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
000098B2 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
000098B7 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
000098BC FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
000098C1 04                         byte_979D:	dc.b 4
000098C2 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
000098C7 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
000098CC FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
000098D1 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
000098D6 06                         byte_97B2:	dc.b 6
000098D7 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
000098DC F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
000098E1 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
000098E6 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
000098EB 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
000098F0 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
000098F5 01                         byte_97D1:	dc.b 1
000098F6 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
000098FB 01                         byte_97D7:	dc.b 1
000098FC F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
00009902 00                         		even
00009902 00                         		even
00009902                            
00009902                            ; ===========================================================================
00009902                            ; ---------------------------------------------------------------------------
00009902                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009902                            ; ---------------------------------------------------------------------------
00009902                            
00009902                            Obj22:					; XREF: Obj_Index
00009902 7000                       		moveq	#0,d0
00009904 1028 0024                  		move.b	$24(a0),d0
00009908 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000990C 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009910                            ; ===========================================================================
00009910 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009912 0000                       		dc.w Obj22_Action-Obj22_Index
00009914 0000                       		dc.w Obj22_Delete-Obj22_Index
00009916                            ; ===========================================================================
00009916                            
00009916                            Obj22_Main:				; XREF: Obj22_Index
00009916 5428 0024                  		addq.b	#2,$24(a0)
0000991A 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009922 317C 0444 0002             		move.w	#$444,2(a0)
00009928 117C 0004 0001             		move.b	#4,1(a0)
0000992E 117C 0003 0018             		move.b	#3,$18(a0)
00009934 117C 0008 0020             		move.b	#8,$20(a0)
0000993A 117C 0018 0019             		move.b	#$18,$19(a0)
00009940                            
00009940                            Obj22_Action:				; XREF: Obj22_Index
00009940 7000                       		moveq	#0,d0
00009942 1028 0025                  		move.b	$25(a0),d0
00009946 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000994A 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000994E 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009954 6100 0000                  		bsr.w	AnimateSprite
00009958 6000 0000                  		bra.w	MarkObjGone
0000995C                            ; ===========================================================================
0000995C 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000995E 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009960                            ; ===========================================================================
00009960                            
00009960                            Obj22_Move:				; XREF: Obj22_Index2
00009960 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009964 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009966 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000996C 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000996E 5428 0025                  		addq.b	#2,$25(a0)
00009972 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009978 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000997E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009984 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000998A 6600                       		bne.s	locret_986C	; if not, branch
0000998C 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009990                            
00009990                            locret_986C:
00009990 4E75                       		rts	
00009992                            ; ===========================================================================
00009992                            
00009992                            Obj22_Fire:				; XREF: Obj22_Move
00009992 6100 0000                  		bsr.w	SingleObjLoad
00009996 6600                       		bne.s	locret_98D0
00009998 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000999C 3368 0008 0008             		move.w	8(a0),8(a1)
000099A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000099A8 0669 001C 000C             		addi.w	#$1C,$C(a1)
000099AE 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
000099B4 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
000099BA 303C 0018                  		move.w	#$18,d0
000099BE 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
000099C4 6600                       		bne.s	loc_98AA	; if not, branch
000099C6 4440                       		neg.w	d0
000099C8 4469 0010                  		neg.w	$10(a1)		; move missile to the left
000099CC                            
000099CC                            loc_98AA:
000099CC D169 0008                  		add.w	d0,8(a1)
000099D0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000099D6 337C 000E 0032             		move.w	#$E,$32(a1)
000099DC 2348 003C                  		move.l	a0,$3C(a1)
000099E0 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
000099E6 317C 003B 0032             		move.w	#$3B,$32(a0)
000099EC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
000099F2                            
000099F2                            locret_98D0:
000099F2 4E75                       		rts	
000099F4                            ; ===========================================================================
000099F4                            
000099F4                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
000099F4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000099F8 6B00                       		bmi.s	Obj22_ChgDir
000099FA 6100 0000                  		bsr.w	SpeedToPos
000099FE 4A28 0034                  		tst.b	$34(a0)
00009A02 6600                       		bne.s	locret_992A
00009A04 3038 D008                  		move.w	($FFFFD008).w,d0
00009A08 9068 0008                  		sub.w	8(a0),d0
00009A0C 6A00                       		bpl.s	Obj22_SetNrSonic
00009A0E 4440                       		neg.w	d0
00009A10                            
00009A10                            Obj22_SetNrSonic:
00009A10 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009A14 6400                       		bcc.s	locret_992A	; if not, branch
00009A16 4A28 0001                  		tst.b	1(a0)
00009A1A 6A00                       		bpl.s	locret_992A
00009A1C 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009A22 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009A28 6000                       		bra.s	Obj22_Stop
00009A2A                            ; ===========================================================================
00009A2A                            
00009A2A                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009A2A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009A30 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009A36 317C 003B 0032             		move.w	#59,$32(a0)
00009A3C                            
00009A3C                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009A3C 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009A40 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009A46 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009A4C                            
00009A4C                            locret_992A:
00009A4C 4E75                       		rts	
00009A4E                            ; ===========================================================================
00009A4E                            
00009A4E                            Obj22_Delete:				; XREF: Obj22_Index
00009A4E 6100 0000                  		bsr.w	DeleteObject
00009A52 4E75                       		rts	
00009A54                            ; ===========================================================================
00009A54                            ; ---------------------------------------------------------------------------
00009A54                            ; Object 23 - missile that Buzz	Bomber throws
00009A54                            ; ---------------------------------------------------------------------------
00009A54                            
00009A54                            Obj23:					; XREF: Obj_Index
00009A54 7000                       		moveq	#0,d0
00009A56 1028 0024                  		move.b	$24(a0),d0
00009A5A 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009A5E 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009A62                            ; ===========================================================================
00009A62 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009A64 0000                       		dc.w Obj23_Animate-Obj23_Index
00009A66 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009A68 0000                       		dc.w Obj23_Delete-Obj23_Index
00009A6A 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009A6C                            ; ===========================================================================
00009A6C                            
00009A6C                            Obj23_Main:				; XREF: Obj23_Index
00009A6C 5368 0032                  		subq.w	#1,$32(a0)
00009A70 6A00                       		bpl.s	Obj23_ChkCancel
00009A72 5428 0024                  		addq.b	#2,$24(a0)
00009A76 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009A7E 317C 2444 0002             		move.w	#$2444,2(a0)
00009A84 117C 0004 0001             		move.b	#4,1(a0)
00009A8A 117C 0003 0018             		move.b	#3,$18(a0)
00009A90 117C 0008 0019             		move.b	#8,$19(a0)
00009A96 0228 0003 0022             		andi.b	#3,$22(a0)
00009A9C 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009AA0 6700                       		beq.s	Obj23_Animate	; if not, branch
00009AA2 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009AA8 117C 0087 0020             		move.b	#$87,$20(a0)
00009AAE 117C 0001 001C             		move.b	#1,$1C(a0)
00009AB4 6000                       		bra.s	Obj23_Animate2
00009AB6                            ; ===========================================================================
00009AB6                            
00009AB6                            Obj23_Animate:				; XREF: Obj23_Index
00009AB6 6100                       		bsr.s	Obj23_ChkCancel
00009AB8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009ABE 6100 0000                  		bsr.w	AnimateSprite
00009AC2 6000 0000                  		bra.w	DisplaySprite
00009AC6                            ; ---------------------------------------------------------------------------
00009AC6                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009AC6                            ; destroyed, and if it has, then cancel	the missile
00009AC6                            ; ---------------------------------------------------------------------------
00009AC6                            
00009AC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009AC6                            
00009AC6                            
00009AC6                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009AC6 2268 003C                  		movea.l	$3C(a0),a1
00009ACA 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009ACE 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009AD0 4E75                       		rts	
00009AD2                            ; End of function Obj23_ChkCancel
00009AD2                            
00009AD2                            ; ===========================================================================
00009AD2                            
00009AD2                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009AD2 0828 0007 0022             		btst	#7,$22(a0)
00009AD8 6600                       		bne.s	Obj23_Explode
00009ADA 117C 0087 0020             		move.b	#$87,$20(a0)
00009AE0 117C 0001 001C             		move.b	#1,$1C(a0)
00009AE6 6100 0000                  		bsr.w	SpeedToPos
00009AEA 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009AF0 6100 0000                  		bsr.w	AnimateSprite
00009AF4 6100 0000                  		bsr.w	DisplaySprite
00009AF8 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009AFC 0640 00E0                  		addi.w	#$E0,d0
00009B00 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009B04 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009B06 4E75                       		rts	
00009B08                            ; ===========================================================================
00009B08                            
00009B08                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009B08 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009B0C 117C 0000 0024             		move.b	#0,$24(a0)
00009B12 6000 F30A                  		bra.w	Obj24
00009B16                            ; ===========================================================================
00009B16                            
00009B16                            Obj23_Delete:				; XREF: Obj23_Index
00009B16 6100 0000                  		bsr.w	DeleteObject
00009B1A 4E75                       		rts	
00009B1C                            ; ===========================================================================
00009B1C                            
00009B1C                            Obj23_FromNewt:				; XREF: Obj23_Index
00009B1C 4A28 0001                  		tst.b	1(a0)
00009B20 6AF4                       		bpl.s	Obj23_Delete
00009B22 6100 0000                  		bsr.w	SpeedToPos
00009B26                            
00009B26                            Obj23_Animate2:				; XREF: Obj23_Main
00009B26 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009B2C 6100 0000                  		bsr.w	AnimateSprite
00009B30 6100 0000                  		bsr.w	DisplaySprite
00009B34 4E75                       		rts	
00009B36                            ; ===========================================================================
00009B36                            Ani_obj22:
00009B36                            	include "_anim\obj22.asm"
00009B36                            ; ---------------------------------------------------------------------------
00009B36                            ; Animation script - Buzz Bomber enemy
00009B36                            ; ---------------------------------------------------------------------------
00009B36 0000                       		dc.w byte_9A1E-Ani_obj22
00009B38 0000                       		dc.w byte_9A22-Ani_obj22
00009B3A 0000                       		dc.w byte_9A26-Ani_obj22
00009B3C 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009B40 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009B44 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009B48                            		even
00009B48                            		even
00009B48                            
00009B48                            Ani_obj23:
00009B48                            	include "_anim\obj23.asm"
00009B48                            ; ---------------------------------------------------------------------------
00009B48                            ; Animation script - missile that Buzz Bomber throws
00009B48                            ; ---------------------------------------------------------------------------
00009B48 0000                       		dc.w byte_9A2E-Ani_obj23
00009B4A 0000                       		dc.w byte_9A32-Ani_obj23
00009B4C 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009B50 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009B54                            		even
00009B54                            		even
00009B54                            
00009B54                            ; ---------------------------------------------------------------------------
00009B54                            ; Sprite mappings - Buzz Bomber	enemy
00009B54                            ; ---------------------------------------------------------------------------
00009B54                            Map_obj22:
00009B54                            	include "_maps\obj22.asm"
00009B54                            Map_e97a:
00009B54 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009B56 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009B58 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009B5A 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009B5C 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009B5E 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009B60 06                         Map_e97a_C: 	dc.b $6
00009B61 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009B66 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009B6B 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009B70 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009B75 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009B7A F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009B7F 06                         Map_e97a_2B: 	dc.b $6
00009B80 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009B85 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009B8A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009B8F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009B94 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009B99 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009B9E 07                         Map_e97a_4A: 	dc.b $7
00009B9F 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009BA4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009BA9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009BAE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009BB3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009BB8 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009BBD F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009BC2 07                         Map_e97a_6E: 	dc.b $7
00009BC3 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009BC8 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009BCD F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009BD2 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009BD7 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009BDC F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009BE1 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009BE6 06                         Map_e97a_92: 	dc.b $6
00009BE7 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009BEC 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009BF1 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009BF6 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009BFB F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009C00 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009C05 04                         Map_e97a_B1: 	dc.b $4
00009C06 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009C0B 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009C10 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009C15 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009C1A                            	even
00009C1A                            	even
00009C1A                            
00009C1A                            ; ---------------------------------------------------------------------------
00009C1A                            ; Sprite mappings - missile that Buzz Bomber throws
00009C1A                            ; ---------------------------------------------------------------------------
00009C1A                            Map_obj23:
00009C1A                            	include "_maps\obj23.asm"
00009C1A                            ; ---------------------------------------------------------------------------
00009C1A                            ; Sprite mappings - missile that Buzz Bomber throws
00009C1A                            ; ---------------------------------------------------------------------------
00009C1A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009C1E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009C22 01                         byte_9B0E:	dc.b 1
00009C23 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009C28 01                         byte_9B14:	dc.b 1
00009C29 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009C2E 01                         byte_9B1A:	dc.b 1
00009C2F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009C34 01                         byte_9B20:	dc.b 1
00009C35 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009C3A                            		even
00009C3A                            		even
00009C3A                            
00009C3A                            ; ===========================================================================
00009C3A                            ; ---------------------------------------------------------------------------
00009C3A                            ; Object 25 - rings
00009C3A                            ; ---------------------------------------------------------------------------
00009C3A                            
00009C3A                            Obj25:					; XREF: Obj_Index
00009C3A 7000                       		moveq	#0,d0
00009C3C 1028 0024                  		move.b	$24(a0),d0
00009C40 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009C44 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009C48                            ; ===========================================================================
00009C48 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009C4A 0000                       		dc.w Obj25_Animate-Obj25_Index
00009C4C 0000                       		dc.w Obj25_Collect-Obj25_Index
00009C4E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009C50 0000                       		dc.w Obj25_Delete-Obj25_Index
00009C52                            ; ---------------------------------------------------------------------------
00009C52                            ; Distances between rings (format: horizontal, vertical)
00009C52                            ; ---------------------------------------------------------------------------
00009C52 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009C54 1800                       		dc.b $18, 0		; horizontal normal
00009C56 2000                       		dc.b $20, 0		; horizontal wide
00009C58 0010                       		dc.b 0,	$10		; vertical tight
00009C5A 0018                       		dc.b 0,	$18		; vertical normal
00009C5C 0020                       		dc.b 0,	$20		; vertical wide
00009C5E 1010                       		dc.b $10, $10		; diagonal
00009C60 1818                       		dc.b $18, $18
00009C62 2020                       		dc.b $20, $20
00009C64 F010                       		dc.b $F0, $10
00009C66 E818                       		dc.b $E8, $18
00009C68 E020                       		dc.b $E0, $20
00009C6A 1008                       		dc.b $10, 8
00009C6C 1810                       		dc.b $18, $10
00009C6E F008                       		dc.b $F0, 8
00009C70 E810                       		dc.b $E8, $10
00009C72                            ; ===========================================================================
00009C72                            
00009C72                            Obj25_Main:				; XREF: Obj25_Index
00009C72 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009C76 7000                       		moveq	#0,d0
00009C78 1028 0023                  		move.b	$23(a0),d0
00009C7C 45F2 0002                  		lea	2(a2,d0.w),a2
00009C80 1812                       		move.b	(a2),d4
00009C82 1228 0028                  		move.b	$28(a0),d1
00009C86 1001                       		move.b	d1,d0
00009C88 0241 0007                  		andi.w	#7,d1
00009C8C 0C41 0007                  		cmpi.w	#7,d1
00009C90 6600                       		bne.s	loc_9B80
00009C92 7206                       		moveq	#6,d1
00009C94                            
00009C94                            loc_9B80:
00009C94 4841                       		swap	d1
00009C96 323C 0000                  		move.w	#0,d1
00009C9A E808                       		lsr.b	#4,d0
00009C9C D040                       		add.w	d0,d0
00009C9E 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009CA2 4885                       		ext.w	d5
00009CA4 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009CA8 4886                       		ext.w	d6
00009CAA 2248                       		movea.l	a0,a1
00009CAC 3428 0008                  		move.w	8(a0),d2
00009CB0 3628 000C                  		move.w	$C(a0),d3
00009CB4 E20C                       		lsr.b	#1,d4
00009CB6 6500                       		bcs.s	loc_9C02
00009CB8 0892 0007                  		bclr	#7,(a2)
00009CBC 6000                       		bra.s	loc_9BBA
00009CBE                            ; ===========================================================================
00009CBE                            
00009CBE                            Obj25_MakeRings:
00009CBE 4841                       		swap	d1
00009CC0 E20C                       		lsr.b	#1,d4
00009CC2 6500                       		bcs.s	loc_9C02
00009CC4 0892 0007                  		bclr	#7,(a2)
00009CC8 6100 0000                  		bsr.w	SingleObjLoad
00009CCC 6600                       		bne.s	loc_9C0E
00009CCE                            
00009CCE                            loc_9BBA:				; XREF: Obj25_Main
00009CCE 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00009CD2 5429 0024                  		addq.b	#2,$24(a1)
00009CD6 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
00009CDA 3368 0008 0032             		move.w	8(a0),$32(a1)
00009CE0 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
00009CE4 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009CEC 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009CF2 137C 0004 0001             		move.b	#4,1(a1)
00009CF8 137C 0002 0018             		move.b	#2,$18(a1)
00009CFE 137C 0047 0020             		move.b	#$47,$20(a1)
00009D04 137C 0008 0019             		move.b	#8,$19(a1)
00009D0A 1368 0023 0023             		move.b	$23(a0),$23(a1)
00009D10 1341 0034                  		move.b	d1,$34(a1)
00009D14                            
00009D14                            loc_9C02:
00009D14 5241                       		addq.w	#1,d1
00009D16 D445                       		add.w	d5,d2		; add ring spacing value to d2
00009D18 D646                       		add.w	d6,d3		; add ring spacing value to d3
00009D1A 4841                       		swap	d1
00009D1C 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
00009D20                            
00009D20                            loc_9C0E:
00009D20 0812 0000                  		btst	#0,(a2)
00009D24 6600 0000                  		bne.w	DeleteObject
00009D28                            
00009D28                            Obj25_Animate:				; XREF: Obj25_Index
00009D28 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
00009D2E 6100 0000                  		bsr.w	DisplaySprite
00009D32 3028 0032                  		move.w	$32(a0),d0
00009D36 0240 FF80                  		andi.w	#$FF80,d0
00009D3A 3238 F700                  		move.w	($FFFFF700).w,d1
00009D3E 0441 0080                  		subi.w	#$80,d1
00009D42 0241 FF80                  		andi.w	#$FF80,d1
00009D46 9041                       		sub.w	d1,d0
00009D48 0C40 0280                  		cmpi.w	#$280,d0
00009D4C 6200                       		bhi.s	Obj25_Delete
00009D4E 4E75                       		rts	
00009D50                            ; ===========================================================================
00009D50                            
00009D50                            Obj25_Collect:				; XREF: Obj25_Index
00009D50 5428 0024                  		addq.b	#2,$24(a0)
00009D54 117C 0000 0020             		move.b	#0,$20(a0)
00009D5A 117C 0001 0018             		move.b	#1,$18(a0)
00009D60 6100 0000                  		bsr.w	CollectRing
00009D64 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009D68 7000                       		moveq	#0,d0
00009D6A 1028 0023                  		move.b	$23(a0),d0
00009D6E 1228 0034                  		move.b	$34(a0),d1
00009D72 03F2 0002                  		bset	d1,2(a2,d0.w)
00009D76                            
00009D76                            Obj25_Sparkle:				; XREF: Obj25_Index
00009D76 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009D7C 6100 0000                  		bsr.w	AnimateSprite
00009D80 6000 0000                  		bra.w	DisplaySprite
00009D84                            ; ===========================================================================
00009D84                            
00009D84                            Obj25_Delete:				; XREF: Obj25_Index
00009D84 6000 0000                  		bra.w	DeleteObject
00009D88                            
00009D88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D88                            
00009D88                            
00009D88                            CollectRing:				; XREF: Obj25_Collect
00009D88 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
00009D8C 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
00009D92 303C 00B5                  		move.w	#$B5,d0		; play ring sound
00009D96 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
00009D9C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009D9E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
00009DA4 6700                       		beq.s	loc_9CA4
00009DA6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
00009DAC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009DAE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
00009DB4 6600                       		bne.s	Obj25_PlaySnd
00009DB6                            
00009DB6                            loc_9CA4:
00009DB6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00009DBA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00009DBE 303C 0088                  		move.w	#$88,d0		; play extra life music
00009DC2                            
00009DC2                            Obj25_PlaySnd:
00009DC2 4EF9 0000 139C             		jmp	(PlaySound_Special).l
00009DC8                            ; End of function CollectRing
00009DC8                            
00009DC8                            ; ===========================================================================
00009DC8                            ; ---------------------------------------------------------------------------
00009DC8                            ; Object 37 - rings flying out of Sonic	when he's hit
00009DC8                            ; ---------------------------------------------------------------------------
00009DC8                            
00009DC8                            Obj37:					; XREF: Obj_Index
00009DC8 7000                       		moveq	#0,d0
00009DCA 1028 0024                  		move.b	$24(a0),d0
00009DCE 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
00009DD2 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
00009DD6                            ; ===========================================================================
00009DD6 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
00009DD8 0000                       		dc.w Obj37_Bounce-Obj37_Index
00009DDA 0000                       		dc.w Obj37_Collect-Obj37_Index
00009DDC 0000                       		dc.w Obj37_Sparkle-Obj37_Index
00009DDE 0000                       		dc.w Obj37_Delete-Obj37_Index
00009DE0                            ; ===========================================================================
00009DE0                            
00009DE0                            Obj37_CountRings:			; XREF: Obj37_Index
00009DE0 2248                       		movea.l	a0,a1
00009DE2 7A00                       		moveq	#0,d5
00009DE4 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
00009DE8 7020                       		moveq	#32,d0
00009DEA BA40                       		cmp.w	d0,d5		; do you have 32 or more?
00009DEC 6500                       		bcs.s	loc_9CDE	; if not, branch
00009DEE 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
00009DF0                            
00009DF0                            loc_9CDE:
00009DF0 5345                       		subq.w	#1,d5
00009DF2 383C 0288                  		move.w	#$288,d4
00009DF6 6000                       		bra.s	Obj37_MakeRings
00009DF8                            ; ===========================================================================
00009DF8                            
00009DF8                            Obj37_Loop:
00009DF8 6100 0000                  		bsr.w	SingleObjLoad
00009DFC 6600 0000                  		bne.w	Obj37_ResetCounter
00009E00                            
00009E00                            Obj37_MakeRings:			; XREF: Obj37_CountRings
00009E00 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
00009E04 5429 0024                  		addq.b	#2,$24(a1)
00009E08 137C 0008 0016             		move.b	#8,$16(a1)
00009E0E 137C 0008 0017             		move.b	#8,$17(a1)
00009E14 3368 0008 0008             		move.w	8(a0),8(a1)
00009E1A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009E20 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009E28 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009E2E 137C 0004 0001             		move.b	#4,1(a1)
00009E34 137C 0003 0018             		move.b	#3,$18(a1)
00009E3A 137C 0047 0020             		move.b	#$47,$20(a1)
00009E40 137C 0008 0019             		move.b	#8,$19(a1)
00009E46 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
00009E4C 4A44                       		tst.w	d4
00009E4E 6B00                       		bmi.s	loc_9D62
00009E50 3004                       		move.w	d4,d0
00009E52 6100 8B86                  		bsr.w	CalcSine
00009E56 3404                       		move.w	d4,d2
00009E58 E04A                       		lsr.w	#8,d2
00009E5A E560                       		asl.w	d2,d0
00009E5C E561                       		asl.w	d2,d1
00009E5E 3400                       		move.w	d0,d2
00009E60 3601                       		move.w	d1,d3
00009E62 0604 0010                  		addi.b	#$10,d4
00009E66 6400                       		bcc.s	loc_9D62
00009E68 0444 0080                  		subi.w	#$80,d4
00009E6C 6400                       		bcc.s	loc_9D62
00009E6E 383C 0288                  		move.w	#$288,d4
00009E72                            
00009E72                            loc_9D62:
00009E72 3342 0010                  		move.w	d2,$10(a1)
00009E76 3343 0012                  		move.w	d3,$12(a1)
00009E7A 4442                       		neg.w	d2
00009E7C 4444                       		neg.w	d4
00009E7E 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
00009E82                            
00009E82                            Obj37_ResetCounter:			; XREF: Obj37_Loop
00009E82 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
00009E88 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
00009E8E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
00009E94 303C 00C6                  		move.w	#$C6,d0
00009E98 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play ring loss sound
00009E9E                            
00009E9E                            Obj37_Bounce:				; XREF: Obj37_Index
00009E9E 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
00009EA4 6100 0000                  		bsr.w	SpeedToPos
00009EA8 0668 0018 0012             		addi.w	#$18,$12(a0)
00009EAE 6B00                       		bmi.s	Obj37_ChkDel
00009EB0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00009EB4 D007                       		add.b	d7,d0
00009EB6 0200 0003                  		andi.b	#3,d0
00009EBA 6600                       		bne.s	Obj37_ChkDel
00009EBC 4EB9 0000 0000             		jsr	ObjHitFloor
00009EC2 4A41                       		tst.w	d1
00009EC4 6A00                       		bpl.s	Obj37_ChkDel
00009EC6 D368 000C                  		add.w	d1,$C(a0)
00009ECA 3028 0012                  		move.w	$12(a0),d0
00009ECE E440                       		asr.w	#2,d0
00009ED0 9168 0012                  		sub.w	d0,$12(a0)
00009ED4 4468 0012                  		neg.w	$12(a0)
00009ED8                            
00009ED8                            Obj37_ChkDel:				; XREF: Obj37_Bounce
00009ED8 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00009EDC 6700                       		beq.s	Obj37_Delete
00009EDE 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009EE2 0640 00E0                  		addi.w	#$E0,d0
00009EE6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
00009EEA 6500                       		bcs.s	Obj37_Delete	; if yes, branch
00009EEC 6000 0000                  		bra.w	DisplaySprite
00009EF0                            ; ===========================================================================
00009EF0                            
00009EF0                            Obj37_Collect:				; XREF: Obj37_Index
00009EF0 5428 0024                  		addq.b	#2,$24(a0)
00009EF4 117C 0000 0020             		move.b	#0,$20(a0)
00009EFA 117C 0001 0018             		move.b	#1,$18(a0)
00009F00 6100 FE86                  		bsr.w	CollectRing
00009F04                            
00009F04                            Obj37_Sparkle:				; XREF: Obj37_Index
00009F04 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009F0A 6100 0000                  		bsr.w	AnimateSprite
00009F0E 6000 0000                  		bra.w	DisplaySprite
00009F12                            ; ===========================================================================
00009F12                            
00009F12                            Obj37_Delete:				; XREF: Obj37_Index
00009F12 6000 0000                  		bra.w	DeleteObject
00009F16                            ; ===========================================================================
00009F16                            ; ---------------------------------------------------------------------------
00009F16                            ; Object 4B - giant ring for entry to special stage
00009F16                            ; ---------------------------------------------------------------------------
00009F16                            
00009F16                            Obj4B:					; XREF: Obj_Index
00009F16 7000                       		moveq	#0,d0
00009F18 1028 0024                  		move.b	$24(a0),d0
00009F1C 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
00009F20 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
00009F24                            ; ===========================================================================
00009F24 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
00009F26 0000                       		dc.w Obj4B_Animate-Obj4B_Index
00009F28 0000                       		dc.w Obj4B_Collect-Obj4B_Index
00009F2A 0000                       		dc.w Obj4B_Delete-Obj4B_Index
00009F2C                            ; ===========================================================================
00009F2C                            
00009F2C                            Obj4B_Main:				; XREF: Obj4B_Index
00009F2C 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
00009F34 317C 2400 0002             		move.w	#$2400,2(a0)
00009F3A 0028 0004 0001             		ori.b	#4,1(a0)
00009F40 117C 0040 0019             		move.b	#$40,$19(a0)
00009F46 4A28 0001                  		tst.b	1(a0)
00009F4A 6A00                       		bpl.s	Obj4B_Animate
00009F4C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
00009F52 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
00009F56 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
00009F5C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
00009F5E 4E75                       		rts	
00009F60                            ; ===========================================================================
00009F60                            
00009F60                            Obj4B_Okay:				; XREF: Obj4B_Main
00009F60 5428 0024                  		addq.b	#2,$24(a0)
00009F64 117C 0002 0018             		move.b	#2,$18(a0)
00009F6A 117C 0052 0020             		move.b	#$52,$20(a0)
00009F70 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
00009F76                            
00009F76                            Obj4B_Animate:				; XREF: Obj4B_Index
00009F76 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
00009F7C 3028 0008                  		move.w	8(a0),d0
00009F80 0240 FF80                  		andi.w	#$FF80,d0
00009F84 3238 F700                  		move.w	($FFFFF700).w,d1
00009F88 0441 0080                  		subi.w	#$80,d1
00009F8C 0241 FF80                  		andi.w	#$FF80,d1
00009F90 9041                       		sub.w	d1,d0
00009F92 0C40 0280                  		cmpi.w	#$280,d0
00009F96 6200 0000                  		bhi.w	DeleteObject
00009F9A 6000 0000                  		bra.w	DisplaySprite
00009F9E                            ; ===========================================================================
00009F9E                            
00009F9E                            Obj4B_Collect:				; XREF: Obj4B_Index
00009F9E 5528 0024                  		subq.b	#2,$24(a0)
00009FA2 117C 0000 0020             		move.b	#0,$20(a0)
00009FA8 6100 0000                  		bsr.w	SingleObjLoad
00009FAC 6600 0000                  		bne.w	Obj4B_PlaySnd
00009FB0 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
00009FB4 3368 0008 0008             		move.w	8(a0),8(a1)
00009FBA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009FC0 2348 003C                  		move.l	a0,$3C(a1)
00009FC4 3038 D008                  		move.w	($FFFFD008).w,d0
00009FC8 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
00009FCC 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
00009FCE 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
00009FD4                            
00009FD4                            Obj4B_PlaySnd:
00009FD4 303C 00C3                  		move.w	#$C3,d0
00009FD8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play giant ring	sound
00009FDE 6096                       		bra.s	Obj4B_Animate
00009FE0                            ; ===========================================================================
00009FE0                            
00009FE0                            Obj4B_Delete:				; XREF: Obj4B_Index
00009FE0 6000 0000                  		bra.w	DeleteObject
00009FE4                            ; ===========================================================================
00009FE4                            ; ---------------------------------------------------------------------------
00009FE4                            ; Object 7C - flash effect when	you collect the	giant ring
00009FE4                            ; ---------------------------------------------------------------------------
00009FE4                            
00009FE4                            Obj7C:					; XREF: Obj_Index
00009FE4 7000                       		moveq	#0,d0
00009FE6 1028 0024                  		move.b	$24(a0),d0
00009FEA 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
00009FEE 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
00009FF2                            ; ===========================================================================
00009FF2 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
00009FF4 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
00009FF6 0000                       		dc.w Obj7C_Delete-Obj7C_Index
00009FF8                            ; ===========================================================================
00009FF8                            
00009FF8                            Obj7C_Main:				; XREF: Obj7C_Index
00009FF8 5428 0024                  		addq.b	#2,$24(a0)
00009FFC 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A004 317C 2462 0002             		move.w	#$2462,2(a0)
0000A00A 0028 0004 0001             		ori.b	#4,1(a0)
0000A010 117C 0000 0018             		move.b	#0,$18(a0)
0000A016 117C 0020 0019             		move.b	#$20,$19(a0)
0000A01C 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A022                            
0000A022                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A022 6100                       		bsr.s	Obj7C_Collect
0000A024 3028 0008                  		move.w	8(a0),d0
0000A028 0240 FF80                  		andi.w	#$FF80,d0
0000A02C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A030 0441 0080                  		subi.w	#$80,d1
0000A034 0241 FF80                  		andi.w	#$FF80,d1
0000A038 9041                       		sub.w	d1,d0
0000A03A 0C40 0280                  		cmpi.w	#$280,d0
0000A03E 6200 0000                  		bhi.w	DeleteObject
0000A042 6000 0000                  		bra.w	DisplaySprite
0000A046                            
0000A046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A046                            
0000A046                            
0000A046                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A046 5328 001E                  		subq.b	#1,$1E(a0)
0000A04A 6A00                       		bpl.s	locret_9F76
0000A04C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A052 5228 001A                  		addq.b	#1,$1A(a0)
0000A056 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A05C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A05E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A064 6600                       		bne.s	locret_9F76	; if not, branch
0000A066 2268 003C                  		movea.l	$3C(a0),a1
0000A06A 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A070 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A076 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A07C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A080 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A084                            
0000A084                            locret_9F76:
0000A084 4E75                       		rts	
0000A086                            ; ===========================================================================
0000A086                            
0000A086                            Obj7C_End:				; XREF: Obj7C_Collect
0000A086 5428 0024                  		addq.b	#2,$24(a0)
0000A08A 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A090 588F                       		addq.l	#4,sp
0000A092 4E75                       		rts	
0000A094                            ; End of function Obj7C_Collect
0000A094                            
0000A094                            ; ===========================================================================
0000A094                            
0000A094                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A094 6000 0000                  		bra.w	DeleteObject
0000A098                            ; ===========================================================================
0000A098                            Ani_obj25:
0000A098                            	include "_anim\obj25.asm"
0000A098                            ; ---------------------------------------------------------------------------
0000A098                            ; Animation script - ring
0000A098                            ; ---------------------------------------------------------------------------
0000A098 0000                       		dc.w byte_9F8C-Ani_obj25
0000A09A 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A0A0                            		even
0000A0A0                            		even
0000A0A0                            
0000A0A0                            ; ---------------------------------------------------------------------------
0000A0A0                            ; Sprite mappings - rings
0000A0A0                            ; ---------------------------------------------------------------------------
0000A0A0                            Map_obj25:
0000A0A0                            	include "_maps\obj25.asm"
0000A0A0                            ; ---------------------------------------------------------------------------
0000A0A0                            ; Sprite mappings - rings
0000A0A0                            ; ---------------------------------------------------------------------------
0000A0A0 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A0A4 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A0A8 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A0AC 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A0B0 01                         byte_9FA2:	dc.b 1
0000A0B1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A0B6 01                         byte_9FA8:	dc.b 1
0000A0B7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A0BC 01                         byte_9FAE:	dc.b 1
0000A0BD F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A0C2 01                         byte_9FB4:	dc.b 1
0000A0C3 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A0C8 01                         byte_9FBA:	dc.b 1
0000A0C9 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A0CE 01                         byte_9FC0:	dc.b 1
0000A0CF F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A0D4 01                         byte_9FC6:	dc.b 1
0000A0D5 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A0DA 01                         byte_9FCC:	dc.b 1
0000A0DB F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A0E0                            		even
0000A0E0                            		even
0000A0E0                            
0000A0E0                            ; ---------------------------------------------------------------------------
0000A0E0                            ; Sprite mappings - giant ring
0000A0E0                            ; ---------------------------------------------------------------------------
0000A0E0                            Map_obj4B:
0000A0E0                            	include "_maps\obj4B.asm"
0000A0E0                            ; ---------------------------------------------------------------------------
0000A0E0                            ; Sprite mappings - giant ring
0000A0E0                            ; ---------------------------------------------------------------------------
0000A0E0 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A0E4 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A0E8 0A                         byte_9FDA:	dc.b $A
0000A0E9 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A0EE E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A0F3 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A0F8 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A0FD F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A102 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A107 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A10C 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A111 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A116 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A11B 08                         byte_A00D:	dc.b 8
0000A11C E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A121 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A126 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A12B F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A130 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A135 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A13A 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A13F 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A144 04                         byte_A036:	dc.b 4
0000A145 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A14A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A14F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A154 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A159 08                         byte_A04B:	dc.b 8
0000A15A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A15F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A164 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A169 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A16E F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A173 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A178 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A17D 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A182                            		even
0000A182                            		even
0000A182                            
0000A182                            ; ---------------------------------------------------------------------------
0000A182                            ; Sprite mappings - flash effect when you collect the giant ring
0000A182                            ; ---------------------------------------------------------------------------
0000A182                            Map_obj7C:
0000A182                            	include "_maps\obj7C.asm"
0000A182                            ; ---------------------------------------------------------------------------
0000A182                            ; Sprite mappings - flash effect when you collect the giant ring
0000A182                            ; ---------------------------------------------------------------------------
0000A182 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A186 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A18A 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A18E 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A192 02                         byte_A084:	dc.b 2
0000A193 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A198 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A19D 04                         byte_A08F:	dc.b 4
0000A19E E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A1A3 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A1A8 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A1AD 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A1B2 04                         byte_A0A4:	dc.b 4
0000A1B3 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A1B8 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A1BD 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A1C2 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A1C7 04                         byte_A0B9:	dc.b 4
0000A1C8 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A1CD E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A1D2 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A1D7 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A1DC 04                         byte_A0CE:	dc.b 4
0000A1DD E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A1E2 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A1E7 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A1EC 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A1F1 04                         byte_A0E3:	dc.b 4
0000A1F2 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A1F7 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A1FC 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A201 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A206 02                         byte_A0F8:	dc.b 2
0000A207 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A20C 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A211 04                         byte_A103:	dc.b 4
0000A212 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A217 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A21C 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A221 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A226                            		even
0000A226                            		even
0000A226                            
0000A226                            ; ===========================================================================
0000A226                            ; ---------------------------------------------------------------------------
0000A226                            ; Object 26 - monitors
0000A226                            ; ---------------------------------------------------------------------------
0000A226                            
0000A226                            Obj26:					; XREF: Obj_Index
0000A226 7000                       		moveq	#0,d0
0000A228 1028 0024                  		move.b	$24(a0),d0
0000A22C 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A230 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A234                            ; ===========================================================================
0000A234 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A236 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A238 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A23A 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A23C 0000                       		dc.w Obj26_Display-Obj26_Index
0000A23E                            ; ===========================================================================
0000A23E                            
0000A23E                            Obj26_Main:				; XREF: Obj26_Index
0000A23E 5428 0024                  		addq.b	#2,$24(a0)
0000A242 117C 000E 0016             		move.b	#$E,$16(a0)
0000A248 117C 000E 0017             		move.b	#$E,$17(a0)
0000A24E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A256 317C 0680 0002             		move.w	#$680,2(a0)
0000A25C 117C 0004 0001             		move.b	#4,1(a0)
0000A262 117C 0003 0018             		move.b	#3,$18(a0)
0000A268 117C 000F 0019             		move.b	#$F,$19(a0)
0000A26E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A272 7000                       		moveq	#0,d0
0000A274 1028 0023                  		move.b	$23(a0),d0
0000A278 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A27E 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A284 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A286 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A28C 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A292 4E75                       		rts	
0000A294                            ; ===========================================================================
0000A294                            
0000A294                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A294 117C 0046 0020             		move.b	#$46,$20(a0)
0000A29A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A2A0                            
0000A2A0                            Obj26_Solid:				; XREF: Obj26_Index
0000A2A0 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A2A4 6700                       		beq.s	loc_A1EC	; if not, branch
0000A2A6 5500                       		subq.b	#2,d0
0000A2A8 6600                       		bne.s	Obj26_Fall
0000A2AA 7200                       		moveq	#0,d1
0000A2AC 1228 0019                  		move.b	$19(a0),d1
0000A2B0 0641 000B                  		addi.w	#$B,d1
0000A2B4 6100 D448                  		bsr.w	ExitPlatform
0000A2B8 0829 0003 0022             		btst	#3,$22(a1)
0000A2BE 6600 0000                  		bne.w	loc_A1BC
0000A2C2 4228 0025                  		clr.b	$25(a0)
0000A2C6 6000 0000                  		bra.w	Obj26_Animate
0000A2CA                            ; ===========================================================================
0000A2CA                            
0000A2CA                            loc_A1BC:				; XREF: Obj26_Solid
0000A2CA 363C 0010                  		move.w	#$10,d3
0000A2CE 3428 0008                  		move.w	8(a0),d2
0000A2D2 6100 D988                  		bsr.w	MvSonicOnPtfm
0000A2D6 6000 0000                  		bra.w	Obj26_Animate
0000A2DA                            ; ===========================================================================
0000A2DA                            
0000A2DA                            Obj26_Fall:				; XREF: Obj26_Solid
0000A2DA 6100 0000                  		bsr.w	ObjectFall
0000A2DE 4EB9 0000 0000             		jsr	ObjHitFloor
0000A2E4 4A41                       		tst.w	d1
0000A2E6 6A00 0000                  		bpl.w	Obj26_Animate
0000A2EA D368 000C                  		add.w	d1,$C(a0)
0000A2EE 4268 0012                  		clr.w	$12(a0)
0000A2F2 4228 0025                  		clr.b	$25(a0)
0000A2F6 6000 0000                  		bra.w	Obj26_Animate
0000A2FA                            ; ===========================================================================
0000A2FA                            
0000A2FA                            loc_A1EC:				; XREF: Obj26_Solid
0000A2FA 323C 001A                  		move.w	#$1A,d1
0000A2FE 343C 000F                  		move.w	#$F,d2
0000A302 6100 0000                  		bsr.w	Obj26_SolidSides
0000A306 6700 0000                  		beq.w	loc_A25C
0000A30A 4A69 0012                  		tst.w	$12(a1)
0000A30E 6B00                       		bmi.s	loc_A20A
0000A310 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A316 6700                       		beq.s	loc_A25C	; if yes, branch
0000A318                            
0000A318                            loc_A20A:
0000A318 4A41                       		tst.w	d1
0000A31A 6A00                       		bpl.s	loc_A220
0000A31C 9769 000C                  		sub.w	d3,$C(a1)
0000A320 6100 D2CA                  		bsr.w	loc_74AE
0000A324 117C 0002 0025             		move.b	#2,$25(a0)
0000A32A 6000 0000                  		bra.w	Obj26_Animate
0000A32E                            ; ===========================================================================
0000A32E                            
0000A32E                            loc_A220:
0000A32E 4A40                       		tst.w	d0
0000A330 6700 0000                  		beq.w	loc_A246
0000A334 6B00                       		bmi.s	loc_A230
0000A336 4A69 0010                  		tst.w	$10(a1)
0000A33A 6B00                       		bmi.s	loc_A246
0000A33C 6000                       		bra.s	loc_A236
0000A33E                            ; ===========================================================================
0000A33E                            
0000A33E                            loc_A230:
0000A33E 4A69 0010                  		tst.w	$10(a1)
0000A342 6A00                       		bpl.s	loc_A246
0000A344                            
0000A344                            loc_A236:
0000A344 9169 0008                  		sub.w	d0,8(a1)
0000A348 337C 0000 0014             		move.w	#0,$14(a1)
0000A34E 337C 0000 0010             		move.w	#0,$10(a1)
0000A354                            
0000A354                            loc_A246:
0000A354 0829 0001 0022             		btst	#1,$22(a1)
0000A35A 6600                       		bne.s	loc_A26A
0000A35C 08E9 0005 0022             		bset	#5,$22(a1)
0000A362 08E8 0005 0022             		bset	#5,$22(a0)
0000A368 6000                       		bra.s	Obj26_Animate
0000A36A                            ; ===========================================================================
0000A36A                            
0000A36A                            loc_A25C:
0000A36A 0828 0005 0022             		btst	#5,$22(a0)
0000A370 6700                       		beq.s	Obj26_Animate
0000A372 337C 0001 001C             		move.w	#1,$1C(a1)
0000A378                            
0000A378                            loc_A26A:
0000A378 08A8 0005 0022             		bclr	#5,$22(a0)
0000A37E 08A9 0005 0022             		bclr	#5,$22(a1)
0000A384                            
0000A384                            Obj26_Animate:				; XREF: Obj26_Index
0000A384 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A38A 6100 0000                  		bsr.w	AnimateSprite
0000A38E                            
0000A38E                            Obj26_Display:				; XREF: Obj26_Index
0000A38E 6100 0000                  		bsr.w	DisplaySprite
0000A392 3028 0008                  		move.w	8(a0),d0
0000A396 0240 FF80                  		andi.w	#$FF80,d0
0000A39A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A39E 0441 0080                  		subi.w	#$80,d1
0000A3A2 0241 FF80                  		andi.w	#$FF80,d1
0000A3A6 9041                       		sub.w	d1,d0
0000A3A8 0C40 0280                  		cmpi.w	#$280,d0
0000A3AC 6200 0000                  		bhi.w	DeleteObject
0000A3B0 4E75                       		rts	
0000A3B2                            ; ===========================================================================
0000A3B2                            
0000A3B2                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A3B2 5428 0024                  		addq.b	#2,$24(a0)
0000A3B6 117C 0000 0020             		move.b	#0,$20(a0)
0000A3BC 6100 0000                  		bsr.w	SingleObjLoad
0000A3C0 6600                       		bne.s	Obj26_Explode
0000A3C2 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A3C6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3D2 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A3D8                            
0000A3D8                            Obj26_Explode:
0000A3D8 6100 0000                  		bsr.w	SingleObjLoad
0000A3DC 6600                       		bne.s	Obj26_SetBroken
0000A3DE 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000A3E2 5429 0024                  		addq.b	#2,$24(a1)
0000A3E6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3F2                            
0000A3F2                            Obj26_SetBroken:
0000A3F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A3F6 7000                       		moveq	#0,d0
0000A3F8 1028 0023                  		move.b	$23(a0),d0
0000A3FC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A402 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A408 6000 0000                  		bra.w	DisplaySprite
0000A40C                            ; ===========================================================================
0000A40C                            ; ---------------------------------------------------------------------------
0000A40C                            ; Object 2E - contents of monitors
0000A40C                            ; ---------------------------------------------------------------------------
0000A40C                            
0000A40C                            Obj2E:					; XREF: Obj_Index
0000A40C 7000                       		moveq	#0,d0
0000A40E 1028 0024                  		move.b	$24(a0),d0
0000A412 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A416 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A41A 6000 0000                  		bra.w	DisplaySprite
0000A41E                            ; ===========================================================================
0000A41E 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A420 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A422 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A424                            ; ===========================================================================
0000A424                            
0000A424                            Obj2E_Main:				; XREF: Obj2E_Index
0000A424 5428 0024                  		addq.b	#2,$24(a0)
0000A428 317C 0680 0002             		move.w	#$680,2(a0)
0000A42E 117C 0024 0001             		move.b	#$24,1(a0)
0000A434 117C 0003 0018             		move.b	#3,$18(a0)
0000A43A 117C 0008 0019             		move.b	#8,$19(a0)
0000A440 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A446 7000                       		moveq	#0,d0
0000A448 1028 001C                  		move.b	$1C(a0),d0
0000A44C 5400                       		addq.b	#2,d0
0000A44E 1140 001A                  		move.b	d0,$1A(a0)
0000A452 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A458 D000                       		add.b	d0,d0
0000A45A D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A45E 5249                       		addq.w	#1,a1
0000A460 2149 0004                  		move.l	a1,4(a0)
0000A464                            
0000A464                            Obj2E_Move:				; XREF: Obj2E_Index
0000A464 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A468 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A46C 6100 0000                  		bsr.w	SpeedToPos
0000A470 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A476 4E75                       		rts	
0000A478                            ; ===========================================================================
0000A478                            
0000A478                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A478 5428 0024                  		addq.b	#2,$24(a0)
0000A47C 317C 001D 001E             		move.w	#29,$1E(a0)
0000A482 1028 001C                  		move.b	$1C(a0),d0
0000A486 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A48A 6600                       		bne.s	Obj2E_ChkSonic
0000A48C 4E75                       		rts			; Eggman monitor does nothing
0000A48E                            ; ===========================================================================
0000A48E                            
0000A48E                            Obj2E_ChkSonic:
0000A48E 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A492 6600                       		bne.s	Obj2E_ChkShoes
0000A494                            
0000A494                            ExtraLife:
0000A494 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A498 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A49C 303C 0088                  		move.w	#$88,d0
0000A4A0 4EF9 0000 1396             		jmp	(PlaySound).l	; play extra life music
0000A4A6                            ; ===========================================================================
0000A4A6                            
0000A4A6                            Obj2E_ChkShoes:
0000A4A6 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A4AA 6600                       		bne.s	Obj2E_ChkShield
0000A4AC 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A4B2 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A4B8 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A4BE 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A4C4 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A4CA 303C 00E2                  		move.w	#$E2,d0
0000A4CE 4EF9 0000 1396             		jmp	(PlaySound).l	; Speed	up the music
0000A4D4                            ; ===========================================================================
0000A4D4                            
0000A4D4                            Obj2E_ChkShield:
0000A4D4 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A4D8 6600                       		bne.s	Obj2E_ChkInvinc
0000A4DA 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A4E0 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A4E6 303C 00AF                  		move.w	#$AF,d0
0000A4EA 4EF9 0000 1396             		jmp	(PlaySound).l	; play shield sound
0000A4F0                            ; ===========================================================================
0000A4F0                            
0000A4F0                            Obj2E_ChkInvinc:
0000A4F0 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A4F4 6600                       		bne.s	Obj2E_ChkRings
0000A4F6 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A4FC 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A502 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A508 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A50E 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A514 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A51A 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A520 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A526 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A52C 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A532 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A536 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A538 303C 0087                  		move.w	#$87,d0
0000A53C 4EF9 0000 1396             		jmp	(PlaySound).l	; play invincibility music
0000A542                            ; ===========================================================================
0000A542                            
0000A542                            Obj2E_NoMusic:
0000A542 4E75                       		rts	
0000A544                            ; ===========================================================================
0000A544                            
0000A544                            Obj2E_ChkRings:
0000A544 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A548 6600                       		bne.s	Obj2E_ChkS
0000A54A 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A550 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A556 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A55C 6500                       		bcs.s	Obj2E_RingSound
0000A55E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A564 6700 FF2E                  		beq.w	ExtraLife
0000A568 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A56E 6500                       		bcs.s	Obj2E_RingSound
0000A570 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A576 6700 FF1C                  		beq.w	ExtraLife
0000A57A                            
0000A57A                            Obj2E_RingSound:
0000A57A 303C 00B5                  		move.w	#$B5,d0
0000A57E 4EF9 0000 1396             		jmp	(PlaySound).l	; play ring sound
0000A584                            ; ===========================================================================
0000A584                            
0000A584                            Obj2E_ChkS:
0000A584 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A588 6600                       		bne.s	Obj2E_ChkEnd
0000A58A                            		; nop	
0000A58A 7201                       		moveq	#1,d1
0000A58C B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A590                            
0000A590                            Obj2E_ChkEnd:
0000A590 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A592                            ; ===========================================================================
0000A592                            
0000A592                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A592 5368 001E                  		subq.w	#1,$1E(a0)
0000A596 6B00 0000                  		bmi.w	DeleteObject
0000A59A 4E75                       		rts	
0000A59C                            ; ---------------------------------------------------------------------------
0000A59C                            ; Subroutine to	make the sides of a monitor solid
0000A59C                            ; ---------------------------------------------------------------------------
0000A59C                            
0000A59C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A59C                            
0000A59C                            
0000A59C                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A59C 43F8 D000                  		lea	($FFFFD000).w,a1
0000A5A0 3029 0008                  		move.w	8(a1),d0
0000A5A4 9068 0008                  		sub.w	8(a0),d0
0000A5A8 D041                       		add.w	d1,d0
0000A5AA 6B00                       		bmi.s	loc_A4E6
0000A5AC 3601                       		move.w	d1,d3
0000A5AE D643                       		add.w	d3,d3
0000A5B0 B043                       		cmp.w	d3,d0
0000A5B2 6200                       		bhi.s	loc_A4E6
0000A5B4 1629 0016                  		move.b	$16(a1),d3
0000A5B8 4883                       		ext.w	d3
0000A5BA D443                       		add.w	d3,d2
0000A5BC 3629 000C                  		move.w	$C(a1),d3
0000A5C0 9668 000C                  		sub.w	$C(a0),d3
0000A5C4 D642                       		add.w	d2,d3
0000A5C6 6B00                       		bmi.s	loc_A4E6
0000A5C8 D442                       		add.w	d2,d2
0000A5CA B642                       		cmp.w	d2,d3
0000A5CC 6400                       		bcc.s	loc_A4E6
0000A5CE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A5D2 6B00                       		bmi.s	loc_A4E6
0000A5D4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A5DA 6400                       		bcc.s	loc_A4E6
0000A5DC 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A5E0 6600                       		bne.s	loc_A4E6
0000A5E2 B240                       		cmp.w	d0,d1
0000A5E4 6400                       		bcc.s	loc_A4DC
0000A5E6 D241                       		add.w	d1,d1
0000A5E8 9041                       		sub.w	d1,d0
0000A5EA                            
0000A5EA                            loc_A4DC:
0000A5EA 0C43 0010                  		cmpi.w	#$10,d3
0000A5EE 6500                       		bcs.s	loc_A4EA
0000A5F0                            
0000A5F0                            loc_A4E2:
0000A5F0 7201                       		moveq	#1,d1
0000A5F2 4E75                       		rts	
0000A5F4                            ; ===========================================================================
0000A5F4                            
0000A5F4                            loc_A4E6:
0000A5F4 7200                       		moveq	#0,d1
0000A5F6 4E75                       		rts	
0000A5F8                            ; ===========================================================================
0000A5F8                            
0000A5F8                            loc_A4EA:
0000A5F8 7200                       		moveq	#0,d1
0000A5FA 1228 0019                  		move.b	$19(a0),d1
0000A5FE 5841                       		addq.w	#4,d1
0000A600 3401                       		move.w	d1,d2
0000A602 D442                       		add.w	d2,d2
0000A604 D269 0008                  		add.w	8(a1),d1
0000A608 9268 0008                  		sub.w	8(a0),d1
0000A60C 6BE2                       		bmi.s	loc_A4E2
0000A60E B242                       		cmp.w	d2,d1
0000A610 64DE                       		bcc.s	loc_A4E2
0000A612 72FF                       		moveq	#-1,d1
0000A614 4E75                       		rts	
0000A616                            ; End of function Obj26_SolidSides
0000A616                            
0000A616                            ; ===========================================================================
0000A616                            Ani_obj26:
0000A616                            	include "_anim\obj26.asm"
0000A616                            ; ---------------------------------------------------------------------------
0000A616                            ; Animation script - monitors
0000A616                            ; ---------------------------------------------------------------------------
0000A616 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A61C 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A622 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A628 0000                       		dc.w byte_A582-Ani_obj26
0000A62A 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A630 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A63C 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A648 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A654 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A660 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A66C 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A678 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A684 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A690 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A698                            		even
0000A698                            		even
0000A698                            
0000A698                            ; ---------------------------------------------------------------------------
0000A698                            ; Sprite mappings - monitors
0000A698                            ; ---------------------------------------------------------------------------
0000A698                            Map_obj26:
0000A698                            	include "_maps\obj26.asm"
0000A698                            ; ---------------------------------------------------------------------------
0000A698                            ; Sprite mappings - monitors
0000A698                            ; ---------------------------------------------------------------------------
0000A698 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000A69C 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000A6A0 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000A6A4 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000A6A8 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000A6AC 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000A6B0 01                         byte_A5A2:	dc.b 1			; static monitor
0000A6B1 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6B6 02                         byte_A5A8:	dc.b 2			; static monitor
0000A6B7 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000A6BC EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6C1 02                         byte_A5B3:	dc.b 2			; static monitor
0000A6C2 F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000A6C7 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6CC 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000A6CD F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000A6D2 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6D7 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000A6D8 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000A6DD EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6E2 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000A6E3 F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000A6E8 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6ED 02                         byte_A5DF:	dc.b 2			; shield monitor
0000A6EE F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000A6F3 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6F8 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000A6F9 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000A6FE EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A703 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000A704 F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000A709 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A70E 02                         byte_A600:	dc.b 2			; 'S' monitor
0000A70F F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000A714 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A719 02                         byte_A60B:	dc.b 2			; goggles monitor
0000A71A F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000A71F EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A724 01                         byte_A616:	dc.b 1			; broken monitor
0000A725 FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000A72A                            		even
0000A72A                            		even
0000A72A                            
0000A72A                            ; ===========================================================================
0000A72A                            ; ---------------------------------------------------------------------------
0000A72A                            ; Object 0E - Sonic on the title screen
0000A72A                            ; ---------------------------------------------------------------------------
0000A72A                            
0000A72A                            Obj0E:					; XREF: Obj_Index
0000A72A 7000                       		moveq	#0,d0
0000A72C 1028 0024                  		move.b	$24(a0),d0
0000A730 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000A734 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000A738                            ; ===========================================================================
0000A738 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000A73A 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000A73C 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000A73E 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000A740                            ; ===========================================================================
0000A740                            
0000A740                            Obj0E_Main:				; XREF: Obj0E_Index
0000A740 5428 0024                  		addq.b	#2,$24(a0)
0000A744 317C 00F0 0008             		move.w	#$F0,8(a0)
0000A74A 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000A750 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000A758 317C 2300 0002             		move.w	#$2300,2(a0)
0000A75E 117C 0001 0018             		move.b	#1,$18(a0)
0000A764 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000A76A 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A770 6100 0000                  		bsr.w	AnimateSprite
0000A774                            
0000A774                            Obj0E_Delay:				; XREF: Obj0E_Index
0000A774 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000A778 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000A77A 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000A77E 6000 0000                  		bra.w	DisplaySprite
0000A782                            ; ===========================================================================
0000A782                            
0000A782                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000A782 4E75                       		rts	
0000A784                            ; ===========================================================================
0000A784                            
0000A784                            Obj0E_Move:				; XREF: Obj0E_Index
0000A784 5168 000A                  		subq.w	#8,$A(a0)
0000A788 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000A78E 6600                       		bne.s	Obj0E_Display
0000A790 5428 0024                  		addq.b	#2,$24(a0)
0000A794                            
0000A794                            Obj0E_Display:
0000A794 6000 0000                  		bra.w	DisplaySprite
0000A798                            ; ===========================================================================
0000A798 4E75                       		rts	
0000A79A                            ; ===========================================================================
0000A79A                            
0000A79A                            Obj0E_Animate:				; XREF: Obj0E_Index
0000A79A 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A7A0 6100 0000                  		bsr.w	AnimateSprite
0000A7A4 6000 0000                  		bra.w	DisplaySprite
0000A7A8                            ; ===========================================================================
0000A7A8 4E75                       		rts	
0000A7AA                            ; ===========================================================================
0000A7AA                            ; ---------------------------------------------------------------------------
0000A7AA                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000A7AA                            ; ---------------------------------------------------------------------------
0000A7AA                            
0000A7AA                            Obj0F:					; XREF: Obj_Index
0000A7AA 7000                       		moveq	#0,d0
0000A7AC 1028 0024                  		move.b	$24(a0),d0
0000A7B0 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000A7B4 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000A7B8 6000 0000                  		bra.w	DisplaySprite
0000A7BC                            ; ===========================================================================
0000A7BC 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000A7BE 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000A7C0 0000                       		dc.w locret_A6F8-Obj0F_Index
0000A7C2                            ; ===========================================================================
0000A7C2                            
0000A7C2                            Obj0F_Main:				; XREF: Obj0F_Index
0000A7C2 5428 0024                  		addq.b	#2,$24(a0)
0000A7C6 317C 00D0 0008             		move.w	#$D0,8(a0)
0000A7CC 317C 0130 000A             		move.w	#$130,$A(a0)
0000A7D2 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000A7DA 317C 0200 0002             		move.w	#$200,2(a0)
0000A7E0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000A7E6 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000A7E8 5428 0024                  		addq.b	#2,$24(a0)
0000A7EC 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000A7F2 6600                       		bne.s	locret_A6F8	; if not, branch
0000A7F4 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000A7FA 317C 0170 0008             		move.w	#$170,8(a0)
0000A800 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000A806                            
0000A806                            locret_A6F8:				; XREF: Obj0F_Index
0000A806 4E75                       		rts	
0000A808                            ; ===========================================================================
0000A808                            
0000A808                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000A808 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000A80E 6000 0000                  		bra.w	AnimateSprite
0000A812                            ; ===========================================================================
0000A812                            Ani_obj0E:
0000A812                            	include "_anim\obj0E.asm"
0000A812                            ; ---------------------------------------------------------------------------
0000A812                            ; Animation script - Sonic on the title screen
0000A812                            ; ---------------------------------------------------------------------------
0000A812 0000                       		dc.w byte_A706-Ani_obj0E
0000A814 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000A820                            		even
0000A820                            		even
0000A820                            
0000A820                            Ani_obj0F:
0000A820                            	include "_anim\obj0F.asm"
0000A820                            ; ---------------------------------------------------------------------------
0000A820                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000A820                            ; ---------------------------------------------------------------------------
0000A820 0000                       		dc.w byte_A714-Ani_obj0F
0000A822 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000A826                            		even
0000A826                            		even
0000A826                            
0000A826                            ; ---------------------------------------------------------------------------
0000A826                            ; Subroutine to	animate	a sprite using an animation script
0000A826                            ; ---------------------------------------------------------------------------
0000A826                            
0000A826                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A826                            
0000A826                            
0000A826                            AnimateSprite:
0000A826 7000                       		moveq	#0,d0
0000A828 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000A82C B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000A830 6700                       		beq.s	Anim_Run	; if not, branch
0000A832 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000A836 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A83C 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000A842                            
0000A842                            Anim_Run:
0000A842 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A846 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000A848 D040                       		add.w	d0,d0
0000A84A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000A84E 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000A852 7200                       		moveq	#0,d1
0000A854 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000A858 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000A85C 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000A85E                            
0000A85E                            Anim_Next:
0000A85E 1200                       		move.b	d0,d1
0000A860 0200 001F                  		andi.b	#$1F,d0
0000A864 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000A868 1028 0022                  		move.b	$22(a0),d0
0000A86C E719                       		rol.b	#3,d1
0000A86E B101                       		eor.b	d0,d1
0000A870 0201 0003                  		andi.b	#3,d1
0000A874 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000A87A 8328 0001                  		or.b	d1,1(a0)
0000A87E 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000A882                            
0000A882                            Anim_Wait:
0000A882 4E75                       		rts	
0000A884                            ; ===========================================================================
0000A884                            
0000A884                            Anim_End_FF:
0000A884 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000A886 6600                       		bne.s	Anim_End_FE	; if not, branch
0000A888 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000A88E 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000A892 60CA                       		bra.s	Anim_Next
0000A894                            ; ===========================================================================
0000A894                            
0000A894                            Anim_End_FE:
0000A894 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000A896 6600                       		bne.s	Anim_End_FD	; if not, branch
0000A898 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000A89C 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000A8A0 9200                       		sub.b	d0,d1
0000A8A2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000A8A6 60B6                       		bra.s	Anim_Next
0000A8A8                            ; ===========================================================================
0000A8A8                            
0000A8A8                            Anim_End_FD:
0000A8A8 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000A8AA 6600                       		bne.s	Anim_End_FC	; if not, branch
0000A8AC 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000A8B2                            
0000A8B2                            Anim_End_FC:
0000A8B2 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000A8B4 6600                       		bne.s	Anim_End_FB	; if not, branch
0000A8B6 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000A8BA                            
0000A8BA                            Anim_End_FB:
0000A8BA 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000A8BC 6600                       		bne.s	Anim_End_FA	; if not, branch
0000A8BE 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A8C4 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000A8C8                            
0000A8C8                            Anim_End_FA:
0000A8C8 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000A8CA 6600                       		bne.s	Anim_End	; if not, branch
0000A8CC 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000A8D0                            
0000A8D0                            Anim_End:
0000A8D0 4E75                       		rts	
0000A8D2                            ; End of function AnimateSprite
0000A8D2                            
0000A8D2                            ; ===========================================================================
0000A8D2                            ; ---------------------------------------------------------------------------
0000A8D2                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A8D2                            ; ---------------------------------------------------------------------------
0000A8D2                            Map_obj0F:
0000A8D2                            	include "_maps\obj0F.asm"
0000A8D2                            ; ---------------------------------------------------------------------------
0000A8D2                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A8D2                            ; ---------------------------------------------------------------------------
0000A8D2 0000                       		dc.w byte_A7CD-Map_obj0F
0000A8D4 0000                       		dc.w byte_A7CC-Map_obj0F
0000A8D6 0000                       		dc.w byte_A7EB-Map_obj0F
0000A8D8 0000                       		dc.w byte_A882-Map_obj0F
0000A8DA 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000A8DB 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000A8E0 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000A8E5 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000A8EA 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000A8EF 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000A8F4 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000A8F9 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000A8FA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8FF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A904 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A909 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A90E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A913 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A918 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A91D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A922 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A927 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A92C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A931 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A936 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A93B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A940 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A945 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A94A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A94F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A954 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A959 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A95E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A963 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A968 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A96D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A972 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A977 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A97C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A981 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A986 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A98B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A990 01                         byte_A882:	dc.b 1			; "TM"
0000A991 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000A996                            		even
0000A996                            		even
0000A996                            
0000A996                            ; ---------------------------------------------------------------------------
0000A996                            ; Sprite mappings - Sonic on the title screen
0000A996                            ; ---------------------------------------------------------------------------
0000A996                            Map_obj0E:
0000A996                            	include "_maps\obj0E.asm"
0000A996                            ; ================================================================================
0000A996                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 15:54:10 GMT-0500 (Central Daylight Time)
0000A996                            ; ================================================================================
0000A996                            
0000A996                            DATANHL9WDDYR1:
0000A996 0000 0000                  	dc.w DATANHL9WDDYR1_0-DATANHL9WDDYR1, DATANHL9WDDYR1_1-DATANHL9WDDYR1
0000A99A 0000 0000                  	dc.w DATANHL9WDDYR1_2-DATANHL9WDDYR1, DATANHL9WDDYR1_3-DATANHL9WDDYR1
0000A99E 0000 0000                  	dc.w DATANHL9WDDYR1_4-DATANHL9WDDYR1, DATANHL9WDDYR1_5-DATANHL9WDDYR1
0000A9A2 0000 0000                  	dc.w DATANHL9WDDYR1_6-DATANHL9WDDYR1, DATANHL9WDDYR1_7-DATANHL9WDDYR1
0000A9A6 0A                         DATANHL9WDDYR1_0: dc.b $A
0000A9A7 0808 0000 08               	dc.b $8, $8, $0, $0, $8
0000A9AC 100F 0003 08               	dc.b $10, $F, $0, $3, $8
0000A9B1 100F 0013 28               	dc.b $10, $F, $0, $13, $28
0000A9B6 300E 0023 08               	dc.b $30, $E, $0, $23, $8
0000A9BB 300E 002F 28               	dc.b $30, $E, $0, $2F, $28
0000A9C0 480D 003B 00               	dc.b $48, $D, $0, $3B, $0
0000A9C5 4809 0043 20               	dc.b $48, $9, $0, $43, $20
0000A9CA 4800 0049 38               	dc.b $48, $0, $0, $49, $38
0000A9CF 580C 004A 08               	dc.b $58, $C, $0, $4A, $8
0000A9D4 5800 004E 28               	dc.b $58, $0, $0, $4E, $28
0000A9D9 0F                         DATANHL9WDDYR1_1: dc.b $F
0000A9DA 480E 01BD 20               	dc.b $48, $E, $1, $BD, $20
0000A9DF 3805 01C9 38               	dc.b $38, $5, $1, $C9, $38
0000A9E4 4000 01CD 30               	dc.b $40, $0, $1, $CD, $30
0000A9E9 4800 01CE 40               	dc.b $48, $0, $1, $CE, $40
0000A9EE 6000 01CF 20               	dc.b $60, $0, $1, $CF, $20
0000A9F3 100E 004F 08               	dc.b $10, $E, $0, $4F, $8
0000A9F8 100E 005B 28               	dc.b $10, $E, $0, $5B, $28
0000A9FD 1801 0067 48               	dc.b $18, $1, $0, $67, $48
0000AA02 2802 0069 00               	dc.b $28, $2, $0, $69, $0
0000AA07 280F 006C 08               	dc.b $28, $F, $0, $6C, $8
0000AA0C 280F 007C 28               	dc.b $28, $F, $0, $7C, $28
0000AA11 3002 008C 48               	dc.b $30, $2, $0, $8C, $48
0000AA16 480E 008F 10               	dc.b $48, $E, $0, $8F, $10
0000AA1B 4809 009B 30               	dc.b $48, $9, $0, $9B, $30
0000AA20 5804 00A1 30               	dc.b $58, $4, $0, $A1, $30
0000AA25 11                         DATANHL9WDDYR1_2: dc.b $11
0000AA26 380E 01BD 28               	dc.b $38, $E, $1, $BD, $28
0000AA2B 2805 01C9 40               	dc.b $28, $5, $1, $C9, $40
0000AA30 3000 01CD 38               	dc.b $30, $0, $1, $CD, $38
0000AA35 3800 01CE 48               	dc.b $38, $0, $1, $CE, $48
0000AA3A 5000 01CF 28               	dc.b $50, $0, $1, $CF, $28
0000AA3F 200F 01A9 08               	dc.b $20, $F, $1, $A9, $8
0000AA44 2003 01B9 28               	dc.b $20, $3, $1, $B9, $28
0000AA49 100E 004F 08               	dc.b $10, $E, $0, $4F, $8
0000AA4E 100E 005B 28               	dc.b $10, $E, $0, $5B, $28
0000AA53 1801 0067 48               	dc.b $18, $1, $0, $67, $48
0000AA58 2802 0069 00               	dc.b $28, $2, $0, $69, $0
0000AA5D 280F 006C 08               	dc.b $28, $F, $0, $6C, $8
0000AA62 280F 007C 28               	dc.b $28, $F, $0, $7C, $28
0000AA67 3002 008C 48               	dc.b $30, $2, $0, $8C, $48
0000AA6C 480E 008F 10               	dc.b $48, $E, $0, $8F, $10
0000AA71 4809 009B 30               	dc.b $48, $9, $0, $9B, $30
0000AA76 5804 00A1 30               	dc.b $58, $4, $0, $A1, $30
0000AA7B 0D                         DATANHL9WDDYR1_3: dc.b $D
0000AA7C 100F 00A3 08               	dc.b $10, $F, $0, $A3, $8
0000AA81 0808 00B3 28               	dc.b $8, $8, $0, $B3, $28
0000AA86 100F 00B6 28               	dc.b $10, $F, $0, $B6, $28
0000AA8B 1800 00C6 48               	dc.b $18, $0, $0, $C6, $48
0000AA90 2006 00C7 48               	dc.b $20, $6, $0, $C7, $48
0000AA95 3800 00CD 48               	dc.b $38, $0, $0, $CD, $48
0000AA9A 300D 00CE 08               	dc.b $30, $D, $0, $CE, $8
0000AA9F 300E 00D6 28               	dc.b $30, $E, $0, $D6, $28
0000AAA4 400B 00E2 10               	dc.b $40, $B, $0, $E2, $10
0000AAA9 4808 00EE 28               	dc.b $48, $8, $0, $EE, $28
0000AAAE 5001 00F1 08               	dc.b $50, $1, $0, $F1, $8
0000AAB3 5004 00F3 28               	dc.b $50, $4, $0, $F3, $28
0000AAB8 5800 00F5 28               	dc.b $58, $0, $0, $F5, $28
0000AABD 0B                         DATANHL9WDDYR1_4: dc.b $B
0000AABE 080F 00F6 10               	dc.b $8, $F, $0, $F6, $10
0000AAC3 080B 0106 30               	dc.b $8, $B, $1, $6, $30
0000AAC8 1006 0112 48               	dc.b $10, $6, $1, $12, $48
0000AACD 280E 0118 18               	dc.b $28, $E, $1, $18, $18
0000AAD2 280E 0124 38               	dc.b $28, $E, $1, $24, $38
0000AAD7 2801 0130 10               	dc.b $28, $1, $1, $30, $10
0000AADC 400E 0132 10               	dc.b $40, $E, $1, $32, $10
0000AAE1 4006 013E 30               	dc.b $40, $6, $1, $3E, $30
0000AAE6 4004 0144 40               	dc.b $40, $4, $1, $44, $40
0000AAEB 4800 0146 40               	dc.b $48, $0, $1, $46, $40
0000AAF0 5808 0147 18               	dc.b $58, $8, $1, $47, $18
0000AAF5 13                         DATANHL9WDDYR1_5: dc.b $13
0000AAF6 280E 01E4 38               	dc.b $28, $E, $1, $E4, $38
0000AAFB 1805 01F0 48               	dc.b $18, $5, $1, $F0, $48
0000AB00 4008 01F4 38               	dc.b $40, $8, $1, $F4, $38
0000AB05 4804 01F7 38               	dc.b $48, $4, $1, $F7, $38
0000AB0A 100F 014A 10               	dc.b $10, $F, $1, $4A, $10
0000AB0F 0804 015A 20               	dc.b $8, $4, $1, $5A, $20
0000AB14 000B 015C 30               	dc.b $0, $B, $1, $5C, $30
0000AB19 0800 0168 48               	dc.b $8, $0, $1, $68, $48
0000AB1E 1800 0169 48               	dc.b $18, $0, $1, $69, $48
0000AB23 1805 016A 00               	dc.b $18, $5, $1, $6A, $0
0000AB28 2802 016E 08               	dc.b $28, $2, $1, $6E, $8
0000AB2D 300F 0171 10               	dc.b $30, $F, $1, $71, $10
0000AB32 200D 0181 30               	dc.b $20, $D, $1, $81, $30
0000AB37 2001 0189 50               	dc.b $20, $1, $1, $89, $50
0000AB3C 3008 018B 30               	dc.b $30, $8, $1, $8B, $30
0000AB41 380E 018E 30               	dc.b $38, $E, $1, $8E, $30
0000AB46 500D 019A 08               	dc.b $50, $D, $1, $9A, $8
0000AB4B 500C 01A2 28               	dc.b $50, $C, $1, $A2, $28
0000AB50 5808 01A6 28               	dc.b $58, $8, $1, $A6, $28
0000AB55 0F                         DATANHL9WDDYR1_6: dc.b $F
0000AB56 EC0F 020D E2               	dc.b $EC, $F, $2, $D, $E2
0000AB5B 0C0F 021D E2               	dc.b $C, $F, $2, $1D, $E2
0000AB60 2C0F 022D E2               	dc.b $2C, $F, $2, $2D, $E2
0000AB65 EC0F 023D 02               	dc.b $EC, $F, $2, $3D, $2
0000AB6A 0C0F 024D 02               	dc.b $C, $F, $2, $4D, $2
0000AB6F 2C0F 025D 02               	dc.b $2C, $F, $2, $5D, $2
0000AB74 EC0F 026D 22               	dc.b $EC, $F, $2, $6D, $22
0000AB79 0C0F 027D 22               	dc.b $C, $F, $2, $7D, $22
0000AB7E 2C0F 028D 22               	dc.b $2C, $F, $2, $8D, $22
0000AB83 EC0F 029D 42               	dc.b $EC, $F, $2, $9D, $42
0000AB88 0C0F 02AD 42               	dc.b $C, $F, $2, $AD, $42
0000AB8D 2C0F 02BD 42               	dc.b $2C, $F, $2, $BD, $42
0000AB92 EC07 02CD 62               	dc.b $EC, $7, $2, $CD, $62
0000AB97 0C07 02D5 62               	dc.b $C, $7, $2, $D5, $62
0000AB9C 2C07 02DD 62               	dc.b $2C, $7, $2, $DD, $62
0000ABA1 0F                         DATANHL9WDDYR1_7: dc.b $F
0000ABA2 EC0F 020D E2               	dc.b $EC, $F, $2, $D, $E2
0000ABA7 0C0F 021D E2               	dc.b $C, $F, $2, $1D, $E2
0000ABAC 2C0F 022D E2               	dc.b $2C, $F, $2, $2D, $E2
0000ABB1 EC0F 023D 02               	dc.b $EC, $F, $2, $3D, $2
0000ABB6 0C0F 024D 02               	dc.b $C, $F, $2, $4D, $2
0000ABBB 2C0F 025D 02               	dc.b $2C, $F, $2, $5D, $2
0000ABC0 EC0F 026D 22               	dc.b $EC, $F, $2, $6D, $22
0000ABC5 0C0F 027D 22               	dc.b $C, $F, $2, $7D, $22
0000ABCA 2C0F 028D 22               	dc.b $2C, $F, $2, $8D, $22
0000ABCF EC0F 029D 42               	dc.b $EC, $F, $2, $9D, $42
0000ABD4 0C0F 02AD 42               	dc.b $C, $F, $2, $AD, $42
0000ABD9 2C0F 02BD 42               	dc.b $2C, $F, $2, $BD, $42
0000ABDE EC07 02CD 62               	dc.b $EC, $7, $2, $CD, $62
0000ABE3 0C07 02D5 62               	dc.b $C, $7, $2, $D5, $62
0000ABE8 2C07 02DD 62               	dc.b $2C, $7, $2, $DD, $62
0000ABEE 00                         	even
0000ABEE 00                         	even
0000ABEE                            
0000ABEE                            ; ===========================================================================
0000ABEE                            ; ---------------------------------------------------------------------------
0000ABEE                            ; Object 2B - Chopper enemy (GHZ)
0000ABEE                            ; ---------------------------------------------------------------------------
0000ABEE                            
0000ABEE                            Obj2B:					; XREF: Obj_Index
0000ABEE 7000                       		moveq	#0,d0
0000ABF0 1028 0024                  		move.b	$24(a0),d0
0000ABF4 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000ABF8 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000ABFC 6000 0000                  		bra.w	MarkObjGone
0000AC00                            ; ===========================================================================
0000AC00 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000AC02 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000AC04                            ; ===========================================================================
0000AC04                            
0000AC04                            Obj2B_Main:				; XREF: Obj2B_Index
0000AC04 5428 0024                  		addq.b	#2,$24(a0)
0000AC08 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000AC10 317C 047B 0002             		move.w	#$47B,2(a0)
0000AC16 117C 0004 0001             		move.b	#4,1(a0)
0000AC1C 117C 0004 0018             		move.b	#4,$18(a0)
0000AC22 117C 0009 0020             		move.b	#9,$20(a0)
0000AC28 117C 0010 0019             		move.b	#$10,$19(a0)
0000AC2E 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AC34 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000AC3A                            
0000AC3A                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000AC3A 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000AC40 6100 FBE4                  		bsr.w	AnimateSprite
0000AC44 6100 0000                  		bsr.w	SpeedToPos
0000AC48 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000AC4E 3028 0030                  		move.w	$30(a0),d0
0000AC52 B068 000C                  		cmp.w	$C(a0),d0
0000AC56 6400                       		bcc.s	Obj2B_ChgAni
0000AC58 3140 000C                  		move.w	d0,$C(a0)
0000AC5C 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AC62                            
0000AC62                            Obj2B_ChgAni:
0000AC62 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000AC68 0440 00C0                  		subi.w	#$C0,d0
0000AC6C B068 000C                  		cmp.w	$C(a0),d0
0000AC70 6400                       		bcc.s	locret_ABB6
0000AC72 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000AC78 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000AC7C 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000AC7E 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000AC84                            
0000AC84                            locret_ABB6:
0000AC84 4E75                       		rts	
0000AC86                            ; ===========================================================================
0000AC86                            Ani_obj2B:
0000AC86                            	include "_anim\obj2B.asm"
0000AC86                            ; ---------------------------------------------------------------------------
0000AC86                            ; Animation script - Chopper enemy
0000AC86                            ; ---------------------------------------------------------------------------
0000AC86 0000                       		dc.w byte_ABBE-Ani_obj2B
0000AC88 0000                       		dc.w byte_ABC2-Ani_obj2B
0000AC8A 0000                       		dc.w byte_ABC6-Ani_obj2B
0000AC8C 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000AC90 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000AC94 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000AC98 00                         		even
0000AC98 00                         		even
0000AC98                            
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98                            ; Sprite mappings - Chopper enemy (GHZ)
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98                            Map_obj2B:
0000AC98                            	include "_maps\obj2B.asm"
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98                            ; Sprite mappings - Chopper enemy (GHZ)
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98 0000                       		dc.w byte_ABCE-Map_obj2B
0000AC9A 0000                       		dc.w byte_ABD4-Map_obj2B
0000AC9C 01                         byte_ABCE:	dc.b 1
0000AC9D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000ACA2 01                         byte_ABD4:	dc.b 1
0000ACA3 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000ACA8                            		even
0000ACA8                            		even
0000ACA8                            
0000ACA8                            ; ===========================================================================
0000ACA8                            ; ---------------------------------------------------------------------------
0000ACA8                            ; Object 2C - Jaws enemy (LZ)
0000ACA8                            ; ---------------------------------------------------------------------------
0000ACA8                            
0000ACA8                            Obj2C:					; XREF: Obj_Index
0000ACA8 7000                       		moveq	#0,d0
0000ACAA 1028 0024                  		move.b	$24(a0),d0
0000ACAE 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000ACB2 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000ACB6                            ; ===========================================================================
0000ACB6 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000ACB8 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000ACBA                            ; ===========================================================================
0000ACBA                            
0000ACBA                            Obj2C_Main:				; XREF: Obj2C_Index
0000ACBA 5428 0024                  		addq.b	#2,$24(a0)
0000ACBE 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000ACC6 317C 2486 0002             		move.w	#$2486,2(a0)
0000ACCC 0028 0004 0001             		ori.b	#4,1(a0)
0000ACD2 117C 000A 0020             		move.b	#$A,$20(a0)
0000ACD8 117C 0004 0018             		move.b	#4,$18(a0)
0000ACDE 117C 0010 0019             		move.b	#$10,$19(a0)
0000ACE4 7000                       		moveq	#0,d0
0000ACE6 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000ACEA ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000ACEC 5340                       		subq.w	#1,d0
0000ACEE 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000ACF2 3140 0032                  		move.w	d0,$32(a0)
0000ACF6 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000ACFC 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000AD02 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000AD04 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000AD08                            
0000AD08                            Obj2C_Turn:				; XREF: Obj2C_Index
0000AD08 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000AD0C 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000AD0E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000AD14 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000AD18 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000AD1E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000AD24                            
0000AD24                            Obj2C_Animate:
0000AD24 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000AD2A 6100 FAFA                  		bsr.w	AnimateSprite
0000AD2E 6100 0000                  		bsr.w	SpeedToPos
0000AD32 6000 0000                  		bra.w	MarkObjGone
0000AD36                            ; ===========================================================================
0000AD36                            Ani_obj2C:
0000AD36                            	include "_anim\obj2C.asm"
0000AD36                            ; ---------------------------------------------------------------------------
0000AD36                            ; Animation script - Jaws enemy
0000AD36                            ; ---------------------------------------------------------------------------
0000AD36 0000                       		dc.w byte_AC6A-Ani_obj2C
0000AD38 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000AD3E                            		even
0000AD3E                            		even
0000AD3E                            
0000AD3E                            ; ---------------------------------------------------------------------------
0000AD3E                            ; Sprite mappings - Jaws enemy (LZ)
0000AD3E                            ; ---------------------------------------------------------------------------
0000AD3E                            Map_obj2C:
0000AD3E                            	include "_maps\obj2C.asm"
0000AD3E                            ; ---------------------------------------------------------------------------
0000AD3E                            ; Sprite mappings - Jaws enemy (LZ)
0000AD3E                            ; ---------------------------------------------------------------------------
0000AD3E 0000                       		dc.w byte_AC78-Map_obj2C
0000AD40 0000                       		dc.w byte_AC83-Map_obj2C
0000AD42 0000                       		dc.w byte_AC8E-Map_obj2C
0000AD44 0000                       		dc.w byte_AC99-Map_obj2C
0000AD46 02                         byte_AC78:	dc.b 2
0000AD47 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AD4C F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000AD51 02                         byte_AC83:	dc.b 2
0000AD52 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AD57 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000AD5C 02                         byte_AC8E:	dc.b 2
0000AD5D F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AD62 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000AD67 02                         byte_AC99:	dc.b 2
0000AD68 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AD6D F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000AD72                            		even
0000AD72                            		even
0000AD72                            
0000AD72                            ; ===========================================================================
0000AD72                            ; ---------------------------------------------------------------------------
0000AD72                            ; Object 2D - Burrobot enemy (LZ)
0000AD72                            ; ---------------------------------------------------------------------------
0000AD72                            
0000AD72                            Obj2D:					; XREF: Obj_Index
0000AD72 7000                       		moveq	#0,d0
0000AD74 1028 0024                  		move.b	$24(a0),d0
0000AD78 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000AD7C 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000AD80                            ; ===========================================================================
0000AD80 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000AD82 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000AD84                            ; ===========================================================================
0000AD84                            
0000AD84                            Obj2D_Main:				; XREF: Obj2D_Index
0000AD84 5428 0024                  		addq.b	#2,$24(a0)
0000AD88 117C 0013 0016             		move.b	#$13,$16(a0)
0000AD8E 117C 0008 0017             		move.b	#8,$17(a0)
0000AD94 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000AD9C 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000ADA2 0028 0004 0001             		ori.b	#4,1(a0)
0000ADA8 117C 0004 0018             		move.b	#4,$18(a0)
0000ADAE 117C 0005 0020             		move.b	#5,$20(a0)
0000ADB4 117C 000C 0019             		move.b	#$C,$19(a0)
0000ADBA 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000ADBE 117C 0002 001C             		move.b	#2,$1C(a0)
0000ADC4                            
0000ADC4                            Obj2D_Action:				; XREF: Obj2D_Index
0000ADC4 7000                       		moveq	#0,d0
0000ADC6 1028 0025                  		move.b	$25(a0),d0
0000ADCA 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000ADCE 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000ADD2 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000ADD8 6100 FA4C                  		bsr.w	AnimateSprite
0000ADDC 6000 0000                  		bra.w	MarkObjGone
0000ADE0                            ; ===========================================================================
0000ADE0 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000ADE2 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000ADE4 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000ADE6 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000ADE8                            ; ===========================================================================
0000ADE8                            
0000ADE8                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000ADE8 5368 0030                  		subq.w	#1,$30(a0)
0000ADEC 6A00                       		bpl.s	locret_AD42
0000ADEE 5428 0025                  		addq.b	#2,$25(a0)
0000ADF2 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000ADF8 317C 0080 0010             		move.w	#$80,$10(a0)
0000ADFE 117C 0001 001C             		move.b	#1,$1C(a0)
0000AE04 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000AE0A 6700                       		beq.s	locret_AD42
0000AE0C 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000AE10                            
0000AE10                            locret_AD42:
0000AE10 4E75                       		rts	
0000AE12                            ; ===========================================================================
0000AE12                            
0000AE12                            Obj2D_Move:				; XREF: Obj2D_Index2
0000AE12 5368 0030                  		subq.w	#1,$30(a0)
0000AE16 6B00                       		bmi.s	loc_AD84
0000AE18 6100 0000                  		bsr.w	SpeedToPos
0000AE1C 0868 0000 0032             		bchg	#0,$32(a0)
0000AE22 6600                       		bne.s	loc_AD78
0000AE24 3628 0008                  		move.w	8(a0),d3
0000AE28 0643 000C                  		addi.w	#$C,d3
0000AE2C 0828 0000 0022             		btst	#0,$22(a0)
0000AE32 6600                       		bne.s	loc_AD6A
0000AE34 0443 0018                  		subi.w	#$18,d3
0000AE38                            
0000AE38                            loc_AD6A:
0000AE38 4EB9 0000 0000             		jsr	ObjHitFloor2
0000AE3E 0C41 000C                  		cmpi.w	#$C,d1
0000AE42 6C00                       		bge.s	loc_AD84
0000AE44 4E75                       		rts	
0000AE46                            ; ===========================================================================
0000AE46                            
0000AE46                            loc_AD78:				; XREF: Obj2D_Move
0000AE46 4EB9 0000 0000             		jsr	ObjHitFloor
0000AE4C D368 000C                  		add.w	d1,$C(a0)
0000AE50 4E75                       		rts	
0000AE52                            ; ===========================================================================
0000AE52                            
0000AE52                            loc_AD84:				; XREF: Obj2D_Move
0000AE52 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000AE58 6700                       		beq.s	loc_ADA4
0000AE5A 5528 0025                  		subq.b	#2,$25(a0)
0000AE5E 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AE64 317C 0000 0010             		move.w	#0,$10(a0)
0000AE6A 117C 0000 001C             		move.b	#0,$1C(a0)
0000AE70 4E75                       		rts	
0000AE72                            ; ===========================================================================
0000AE72                            
0000AE72                            loc_ADA4:
0000AE72 5428 0025                  		addq.b	#2,$25(a0)
0000AE76 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AE7C 117C 0002 001C             		move.b	#2,$1C(a0)
0000AE82 4E75                       		rts	
0000AE84                            ; ===========================================================================
0000AE84                            
0000AE84                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000AE84 6100 0000                  		bsr.w	SpeedToPos
0000AE88 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AE8E 6B00                       		bmi.s	locret_ADF0
0000AE90 117C 0003 001C             		move.b	#3,$1C(a0)
0000AE96 4EB9 0000 0000             		jsr	ObjHitFloor
0000AE9C 4A41                       		tst.w	d1
0000AE9E 6A00                       		bpl.s	locret_ADF0
0000AEA0 D368 000C                  		add.w	d1,$C(a0)
0000AEA4 317C 0000 0012             		move.w	#0,$12(a0)
0000AEAA 117C 0001 001C             		move.b	#1,$1C(a0)
0000AEB0 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000AEB6 5528 0025                  		subq.b	#2,$25(a0)
0000AEBA 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000AEBE                            
0000AEBE                            locret_ADF0:
0000AEBE 4E75                       		rts	
0000AEC0                            ; ===========================================================================
0000AEC0                            
0000AEC0                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000AEC0 343C 0060                  		move.w	#$60,d2
0000AEC4 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000AEC8 6400                       		bcc.s	locret_AE20
0000AECA 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000AECE 9068 000C                  		sub.w	$C(a0),d0
0000AED2 6400                       		bcc.s	locret_AE20
0000AED4 0C40 FF80                  		cmpi.w	#-$80,d0
0000AED8 6500                       		bcs.s	locret_AE20
0000AEDA 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AEDE 6600                       		bne.s	locret_AE20
0000AEE0 5528 0025                  		subq.b	#2,$25(a0)
0000AEE4 3141 0010                  		move.w	d1,$10(a0)
0000AEE8 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AEEE                            
0000AEEE                            locret_AE20:
0000AEEE 4E75                       		rts	
0000AEF0                            
0000AEF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEF0                            
0000AEF0                            
0000AEF0                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000AEF0 323C 0080                  		move.w	#$80,d1
0000AEF4 08E8 0000 0022             		bset	#0,$22(a0)
0000AEFA 3038 D008                  		move.w	($FFFFD008).w,d0
0000AEFE 9068 0008                  		sub.w	8(a0),d0
0000AF02 6400                       		bcc.s	loc_AE40
0000AF04 4440                       		neg.w	d0
0000AF06 4441                       		neg.w	d1
0000AF08 08A8 0000 0022             		bclr	#0,$22(a0)
0000AF0E                            
0000AF0E                            loc_AE40:
0000AF0E B042                       		cmp.w	d2,d0
0000AF10 4E75                       		rts	
0000AF12                            ; End of function Obj2D_ChkSonic2
0000AF12                            
0000AF12                            ; ===========================================================================
0000AF12                            Ani_obj2D:
0000AF12                            	include "_anim\obj2D.asm"
0000AF12                            ; ---------------------------------------------------------------------------
0000AF12                            ; Animation script - Burrobot enemy
0000AF12                            ; ---------------------------------------------------------------------------
0000AF12 0000                       		dc.w byte_AE4C-Ani_obj2D
0000AF14 0000                       		dc.w byte_AE50-Ani_obj2D
0000AF16 0000                       		dc.w byte_AE54-Ani_obj2D
0000AF18 0000                       		dc.w byte_AE58-Ani_obj2D
0000AF1A 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000AF1E 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000AF22 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000AF26 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000AF2A 00                         		even
0000AF2A 00                         		even
0000AF2A                            
0000AF2A                            ; ---------------------------------------------------------------------------
0000AF2A                            ; Sprite mappings - Burrobot enemy (LZ)
0000AF2A                            ; ---------------------------------------------------------------------------
0000AF2A                            Map_obj2D:
0000AF2A                            	include "_maps\obj2D.asm"
0000AF2A                            ; ---------------------------------------------------------------------------
0000AF2A                            ; Sprite mappings - Burrobot enemy (LZ)
0000AF2A                            ; ---------------------------------------------------------------------------
0000AF2A 0000                       		dc.w byte_AE6A-Map_obj2D
0000AF2C 0000                       		dc.w byte_AE75-Map_obj2D
0000AF2E 0000                       		dc.w byte_AE80-Map_obj2D
0000AF30 0000                       		dc.w byte_AE8B-Map_obj2D
0000AF32 0000                       		dc.w byte_AE96-Map_obj2D
0000AF34 0000                       		dc.w byte_AEA1-Map_obj2D
0000AF36 0000                       		dc.w byte_AEAC-Map_obj2D
0000AF38 02                         byte_AE6A:	dc.b 2
0000AF39 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000AF3E 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AF43 02                         byte_AE75:	dc.b 2
0000AF44 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AF49 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000AF4E 02                         byte_AE80:	dc.b 2
0000AF4F E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000AF54 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000AF59 02                         byte_AE8B:	dc.b 2
0000AF5A E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000AF5F 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000AF64 02                         byte_AE96:	dc.b 2
0000AF65 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000AF6A 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000AF6F 02                         byte_AEA1:	dc.b 2
0000AF70 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000AF75 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000AF7A 02                         byte_AEAC:	dc.b 2
0000AF7B EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AF80 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AF86 00                         		even
0000AF86 00                         		even
0000AF86                            
0000AF86                            ; ===========================================================================
0000AF86                            ; ---------------------------------------------------------------------------
0000AF86                            ; Object 2F - large moving platforms (MZ)
0000AF86                            ; ---------------------------------------------------------------------------
0000AF86                            
0000AF86                            Obj2F:					; XREF: Obj_Index
0000AF86 7000                       		moveq	#0,d0
0000AF88 1028 0024                  		move.b	$24(a0),d0
0000AF8C 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000AF90 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000AF94                            ; ===========================================================================
0000AF94 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000AF96 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000AF98                            
0000AF98 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000AF9A 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000AF9C 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000AF9E 0140                       		dc.b 1,	$40
0000AFA0 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000AFA2 0220                       		dc.b 2,	$20
0000AFA4                            ; ===========================================================================
0000AFA4                            
0000AFA4                            Obj2F_Main:				; XREF: Obj2F_Index
0000AFA4 5428 0024                  		addq.b	#2,$24(a0)
0000AFA8 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000AFB0 317C C000 0002             		move.w	#$C000,2(a0)
0000AFB6 117C 0004 0001             		move.b	#4,1(a0)
0000AFBC 117C 0005 0018             		move.b	#5,$18(a0)
0000AFC2 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000AFC8 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000AFCE 7000                       		moveq	#0,d0
0000AFD0 1028 0028                  		move.b	$28(a0),d0
0000AFD4 E448                       		lsr.w	#2,d0
0000AFD6 0240 001C                  		andi.w	#$1C,d0
0000AFDA 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000AFDE 3019                       		move.w	(a1)+,d0
0000AFE0 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000AFE4 214A 0030                  		move.l	a2,$30(a0)
0000AFE8 1159 001A                  		move.b	(a1)+,$1A(a0)
0000AFEC 1151 0019                  		move.b	(a1),$19(a0)
0000AFF0 0228 000F 0028             		andi.b	#$F,$28(a0)
0000AFF6 117C 0040 0016             		move.b	#$40,$16(a0)
0000AFFC 08E8 0004 0001             		bset	#4,1(a0)
0000B002                            
0000B002                            Obj2F_Action:				; XREF: Obj2F_Index
0000B002 6100 0000                  		bsr.w	Obj2F_Types
0000B006 4A28 0025                  		tst.b	$25(a0)
0000B00A 6700                       		beq.s	Obj2F_Solid
0000B00C 7200                       		moveq	#0,d1
0000B00E 1228 0019                  		move.b	$19(a0),d1
0000B012 0641 000B                  		addi.w	#$B,d1
0000B016 6100 C6E6                  		bsr.w	ExitPlatform
0000B01A 0829 0003 0022             		btst	#3,$22(a1)
0000B020 6600 0000                  		bne.w	Obj2F_Slope
0000B024 4228 0025                  		clr.b	$25(a0)
0000B028 6000                       		bra.s	Obj2F_Display
0000B02A                            ; ===========================================================================
0000B02A                            
0000B02A                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B02A 7200                       		moveq	#0,d1
0000B02C 1228 0019                  		move.b	$19(a0),d1
0000B030 0641 000B                  		addi.w	#$B,d1
0000B034 2468 0030                  		movea.l	$30(a0),a2
0000B038 3428 0008                  		move.w	8(a0),d2
0000B03C 6100 D61E                  		bsr.w	SlopeObject2
0000B040 6000                       		bra.s	Obj2F_Display
0000B042                            ; ===========================================================================
0000B042                            
0000B042                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B042 7200                       		moveq	#0,d1
0000B044 1228 0019                  		move.b	$19(a0),d1
0000B048 0641 000B                  		addi.w	#$B,d1
0000B04C 343C 0020                  		move.w	#$20,d2
0000B050 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B056 6600                       		bne.s	loc_AF8E
0000B058 343C 0030                  		move.w	#$30,d2
0000B05C                            
0000B05C                            loc_AF8E:
0000B05C 2468 0030                  		movea.l	$30(a0),a2
0000B060 6100 0000                  		bsr.w	SolidObject2F
0000B064                            
0000B064                            Obj2F_Display:				; XREF: Obj2F_Action
0000B064 6100 0000                  		bsr.w	DisplaySprite
0000B068 6000 0000                  		bra.w	Obj2F_ChkDel
0000B06C                            
0000B06C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B06C                            
0000B06C                            
0000B06C                            Obj2F_Types:				; XREF: Obj2F_Action
0000B06C 7000                       		moveq	#0,d0
0000B06E 1028 0028                  		move.b	$28(a0),d0
0000B072 0240 0007                  		andi.w	#7,d0
0000B076 D040                       		add.w	d0,d0
0000B078 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B07C 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B080                            ; End of function Obj2F_Types
0000B080                            
0000B080                            ; ===========================================================================
0000B080 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B082 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B084 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B086 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B088 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B08A 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B08C                            ; ===========================================================================
0000B08C                            
0000B08C                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B08C 4E75                       		rts			; type 00 platform doesn't move
0000B08E                            ; ===========================================================================
0000B08E                            
0000B08E                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B08E 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B092 323C 0020                  		move.w	#$20,d1
0000B096 6000                       		bra.s	Obj2F_Move
0000B098                            ; ===========================================================================
0000B098                            
0000B098                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B098 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B09C 323C 0030                  		move.w	#$30,d1
0000B0A0 6000                       		bra.s	Obj2F_Move
0000B0A2                            ; ===========================================================================
0000B0A2                            
0000B0A2                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B0A2 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B0A6 323C 0040                  		move.w	#$40,d1
0000B0AA 6000                       		bra.s	Obj2F_Move
0000B0AC                            ; ===========================================================================
0000B0AC                            
0000B0AC                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B0AC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B0B0 323C 0060                  		move.w	#$60,d1
0000B0B4                            
0000B0B4                            Obj2F_Move:
0000B0B4 0828 0003 0028             		btst	#3,$28(a0)
0000B0BA 6700                       		beq.s	loc_AFF2
0000B0BC 4440                       		neg.w	d0
0000B0BE D041                       		add.w	d1,d0
0000B0C0                            
0000B0C0                            loc_AFF2:
0000B0C0 3228 002C                  		move.w	$2C(a0),d1
0000B0C4 9240                       		sub.w	d0,d1
0000B0C6 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B0CA 4E75                       		rts	
0000B0CC                            ; ===========================================================================
0000B0CC                            
0000B0CC                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B0CC 1028 0034                  		move.b	$34(a0),d0
0000B0D0 4A28 0025                  		tst.b	$25(a0)
0000B0D4 6600                       		bne.s	loc_B010
0000B0D6 5500                       		subq.b	#2,d0
0000B0D8 6400                       		bcc.s	loc_B01C
0000B0DA 7000                       		moveq	#0,d0
0000B0DC 6000                       		bra.s	loc_B01C
0000B0DE                            ; ===========================================================================
0000B0DE                            
0000B0DE                            loc_B010:
0000B0DE 5800                       		addq.b	#4,d0
0000B0E0 0C00 0040                  		cmpi.b	#$40,d0
0000B0E4 6500                       		bcs.s	loc_B01C
0000B0E6 103C 0040                  		move.b	#$40,d0
0000B0EA                            
0000B0EA                            loc_B01C:
0000B0EA 1140 0034                  		move.b	d0,$34(a0)
0000B0EE 4EB9 0000 29DA             		jsr	(CalcSine).l
0000B0F4 E848                       		lsr.w	#4,d0
0000B0F6 3200                       		move.w	d0,d1
0000B0F8 D068 002C                  		add.w	$2C(a0),d0
0000B0FC 3140 000C                  		move.w	d0,$C(a0)
0000B100 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B106 6600                       		bne.s	loc_B07A
0000B108 4A28 0035                  		tst.b	$35(a0)
0000B10C 6600                       		bne.s	loc_B07A
0000B10E 117C 0001 0035             		move.b	#1,$35(a0)
0000B114 6100 0000                  		bsr.w	SingleObjLoad2
0000B118 6600                       		bne.s	loc_B07A
0000B11A 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B11E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B124 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B12A 5069 002C                  		addq.w	#8,$2C(a1)
0000B12E 5769 002C                  		subq.w	#3,$2C(a1)
0000B132 0469 0040 0008             		subi.w	#$40,8(a1)
0000B138 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B13E 2348 0038                  		move.l	a0,$38(a1)
0000B142 2448                       		movea.l	a0,a2
0000B144 6100                       		bsr.s	sub_B09C
0000B146                            
0000B146                            loc_B07A:
0000B146 7400                       		moveq	#0,d2
0000B148 45E8 0036                  		lea	$36(a0),a2
0000B14C 141A                       		move.b	(a2)+,d2
0000B14E 5302                       		subq.b	#1,d2
0000B150 6500                       		bcs.s	locret_B09A
0000B152                            
0000B152                            loc_B086:
0000B152 7000                       		moveq	#0,d0
0000B154 101A                       		move.b	(a2)+,d0
0000B156 ED48                       		lsl.w	#6,d0
0000B158 0640 D000                  		addi.w	#-$3000,d0
0000B15C 3240                       		movea.w	d0,a1
0000B15E 3341 003C                  		move.w	d1,$3C(a1)
0000B162 51CA FFEE                  		dbf	d2,loc_B086
0000B166                            
0000B166                            locret_B09A:
0000B166 4E75                       		rts	
0000B168                            
0000B168                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B168                            
0000B168                            
0000B168                            sub_B09C:
0000B168 45EA 0036                  		lea	$36(a2),a2
0000B16C 7000                       		moveq	#0,d0
0000B16E 1012                       		move.b	(a2),d0
0000B170 5212                       		addq.b	#1,(a2)
0000B172 45F2 0001                  		lea	1(a2,d0.w),a2
0000B176 3009                       		move.w	a1,d0
0000B178 0440 D000                  		subi.w	#-$3000,d0
0000B17C EC48                       		lsr.w	#6,d0
0000B17E 0240 007F                  		andi.w	#$7F,d0
0000B182 1480                       		move.b	d0,(a2)
0000B184 4E75                       		rts	
0000B186                            ; End of function sub_B09C
0000B186                            
0000B186                            ; ===========================================================================
0000B186                            
0000B186                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B186 4A28 0035                  		tst.b	$35(a0)
0000B18A 6700                       		beq.s	loc_B0C6
0000B18C 4A28 0001                  		tst.b	1(a0)
0000B190 6A00                       		bpl.s	Obj2F_DelFlames
0000B192                            
0000B192                            loc_B0C6:
0000B192 3028 002A                  		move.w	$2A(a0),d0
0000B196 0240 FF80                  		andi.w	#$FF80,d0
0000B19A 3238 F700                  		move.w	($FFFFF700).w,d1
0000B19E 0441 0080                  		subi.w	#$80,d1
0000B1A2 0241 FF80                  		andi.w	#$FF80,d1
0000B1A6 9041                       		sub.w	d1,d0
0000B1A8 0C40 0280                  		cmpi.w	#$280,d0
0000B1AC 6200 0000                  		bhi.w	DeleteObject
0000B1B0 4E75                       		rts	
0000B1B2                            ; ===========================================================================
0000B1B2                            
0000B1B2                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B1B2 7400                       		moveq	#0,d2
0000B1B4                            
0000B1B4                            loc_B0E8:
0000B1B4 45E8 0036                  		lea	$36(a0),a2
0000B1B8 1412                       		move.b	(a2),d2
0000B1BA 421A                       		clr.b	(a2)+
0000B1BC 5302                       		subq.b	#1,d2
0000B1BE 6500                       		bcs.s	locret_B116
0000B1C0                            
0000B1C0                            loc_B0F4:
0000B1C0 7000                       		moveq	#0,d0
0000B1C2 1012                       		move.b	(a2),d0
0000B1C4 421A                       		clr.b	(a2)+
0000B1C6 ED48                       		lsl.w	#6,d0
0000B1C8 0640 D000                  		addi.w	#-$3000,d0
0000B1CC 3240                       		movea.w	d0,a1
0000B1CE 6100 0000                  		bsr.w	DeleteObject2
0000B1D2 51CA FFEC                  		dbf	d2,loc_B0F4
0000B1D6 117C 0000 0035             		move.b	#0,$35(a0)
0000B1DC 117C 0000 0034             		move.b	#0,$34(a0)
0000B1E2                            
0000B1E2                            locret_B116:
0000B1E2 4E75                       		rts	
0000B1E4                            ; ===========================================================================
0000B1E4                            ; ---------------------------------------------------------------------------
0000B1E4                            ; Collision data for large moving platforms (MZ)
0000B1E4                            ; ---------------------------------------------------------------------------
0000B1E4                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B230                            		even
0000B230                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B25C                            		even
0000B25C                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B2A8                            		even
0000B2A8                            ; ===========================================================================
0000B2A8                            ; ---------------------------------------------------------------------------
0000B2A8                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B2A8                            ; (appears when	you walk on sinking platforms)
0000B2A8                            ; ---------------------------------------------------------------------------
0000B2A8                            
0000B2A8                            Obj35:					; XREF: Obj_Index
0000B2A8 7000                       		moveq	#0,d0
0000B2AA 1028 0024                  		move.b	$24(a0),d0
0000B2AE 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B2B2 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B2B6                            ; ===========================================================================
0000B2B6 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B2B8 0000                       		dc.w loc_B238-Obj35_Index
0000B2BA 0000                       		dc.w Obj35_Move-Obj35_Index
0000B2BC                            ; ===========================================================================
0000B2BC                            
0000B2BC                            Obj35_Main:				; XREF: Obj35_Index
0000B2BC 5428 0024                  		addq.b	#2,$24(a0)
0000B2C0 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B2C8 317C 0345 0002             		move.w	#$345,2(a0)
0000B2CE 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B2D4 117C 0004 0001             		move.b	#4,1(a0)
0000B2DA 117C 0001 0018             		move.b	#1,$18(a0)
0000B2E0 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B2E6 117C 0008 0019             		move.b	#8,$19(a0)
0000B2EC 303C 00C8                  		move.w	#$C8,d0
0000B2F0 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000B2F6 4A28 0028                  		tst.b	$28(a0)
0000B2FA 6700                       		beq.s	loc_B238
0000B2FC 5428 0024                  		addq.b	#2,$24(a0)
0000B300 6000 0000                  		bra.w	Obj35_Move
0000B304                            ; ===========================================================================
0000B304                            
0000B304                            loc_B238:				; XREF: Obj35_Index
0000B304 2268 0030                  		movea.l	$30(a0),a1
0000B308 3228 0008                  		move.w	8(a0),d1
0000B30C 9268 002A                  		sub.w	$2A(a0),d1
0000B310 0641 000C                  		addi.w	#$C,d1
0000B314 3001                       		move.w	d1,d0
0000B316 E248                       		lsr.w	#1,d0
0000B318 1031 0000                  		move.b	(a1,d0.w),d0
0000B31C 4440                       		neg.w	d0
0000B31E D068 002C                  		add.w	$2C(a0),d0
0000B322 3400                       		move.w	d0,d2
0000B324 D068 003C                  		add.w	$3C(a0),d0
0000B328 3140 000C                  		move.w	d0,$C(a0)
0000B32C 0C41 0084                  		cmpi.w	#$84,d1
0000B330 6400                       		bcc.s	loc_B2B0
0000B332 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B33A 0C41 0080                  		cmpi.w	#$80,d1
0000B33E 6400                       		bcc.s	loc_B2B0
0000B340 2028 0008                  		move.l	8(a0),d0
0000B344 0680 0008 0000             		addi.l	#$80000,d0
0000B34A 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B350 6600                       		bne.s	loc_B2B0
0000B352 6100 0000                  		bsr.w	SingleObjLoad2
0000B356 6600                       		bne.s	loc_B2B0
0000B358 12BC 0035                  		move.b	#$35,0(a1)
0000B35C 3368 0008 0008             		move.w	8(a0),8(a1)
0000B362 3342 002C                  		move.w	d2,$2C(a1)
0000B366 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B36C 137C 0001 0028             		move.b	#1,$28(a1)
0000B372 2468 0038                  		movea.l	$38(a0),a2
0000B376 6100 FDF0                  		bsr.w	sub_B09C
0000B37A                            
0000B37A                            loc_B2B0:
0000B37A 6000                       		bra.s	Obj35_Animate
0000B37C                            ; ===========================================================================
0000B37C                            
0000B37C                            Obj35_Move:				; XREF: Obj35_Index
0000B37C 3028 002C                  		move.w	$2C(a0),d0
0000B380 D068 003C                  		add.w	$3C(a0),d0
0000B384 3140 000C                  		move.w	d0,$C(a0)
0000B388                            
0000B388                            Obj35_Animate:				; XREF: loc_B238
0000B388 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B38E 6100 F496                  		bsr.w	AnimateSprite
0000B392 6000 0000                  		bra.w	DisplaySprite
0000B396                            ; ===========================================================================
0000B396                            Ani_obj35:
0000B396                            	include "_anim\obj35.asm"
0000B396                            ; ---------------------------------------------------------------------------
0000B396                            ; Animation script - fireball that sits on the	floor (MZ)
0000B396                            ; ---------------------------------------------------------------------------
0000B396 0000                       		dc.w byte_B2CE-Ani_obj35
0000B398 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B39E                            		even
0000B39E                            		even
0000B39E                            
0000B39E                            ; ---------------------------------------------------------------------------
0000B39E                            ; Sprite mappings - large moving platforms (MZ)
0000B39E                            ; ---------------------------------------------------------------------------
0000B39E                            Map_obj2F:
0000B39E                            	include "_maps\obj2F.asm"
0000B39E                            ; ---------------------------------------------------------------------------
0000B39E                            ; Sprite mappings - large moving platforms (MZ)
0000B39E                            ; ---------------------------------------------------------------------------
0000B39E 0000                       		dc.w byte_B2DA-Map_obj2F
0000B3A0 0000                       		dc.w byte_B31C-Map_obj2F
0000B3A2 0000                       		dc.w byte_B34F-Map_obj2F
0000B3A4 0D                         byte_B2DA:	dc.b $D
0000B3A5 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B3AA F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B3AF 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B3B4 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B3B9 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B3BE F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B3C3 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B3C8 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B3CD F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B3D2 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B3D7 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B3DC D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B3E1 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B3E6 0A                         byte_B31C:	dc.b $A
0000B3E7 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B3EC F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B3F1 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B3F6 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B3FB E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B400 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B405 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B40A E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B40F C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B414 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B419 06                         byte_B34F:	dc.b 6
0000B41A D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B41F F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B424 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B429 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B42E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B433 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B438                            		even
0000B438                            		even
0000B438                            
0000B438                            ; ---------------------------------------------------------------------------
0000B438                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B438                            ; ---------------------------------------------------------------------------
0000B438                            Map_obj14:
0000B438                            	include "_maps\obj14.asm"
0000B438                            ; ---------------------------------------------------------------------------
0000B438                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B438                            ; ---------------------------------------------------------------------------
0000B438 0000                       		dc.w byte_B37A-Map_obj14
0000B43A 0000                       		dc.w byte_B380-Map_obj14
0000B43C 0000                       		dc.w byte_B386-Map_obj14
0000B43E 0000                       		dc.w byte_B38C-Map_obj14
0000B440 0000                       		dc.w byte_B392-Map_obj14
0000B442 0000                       		dc.w byte_B398-Map_obj14
0000B444 01                         byte_B37A:	dc.b 1
0000B445 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B44A 01                         byte_B380:	dc.b 1
0000B44B E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B450 01                         byte_B386:	dc.b 1
0000B451 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B456 01                         byte_B38C:	dc.b 1
0000B457 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B45C 01                         byte_B392:	dc.b 1
0000B45D F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B462 01                         byte_B398:	dc.b 1
0000B463 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B468                            		even
0000B468                            		even
0000B468                            
0000B468                            ; ===========================================================================
0000B468                            ; ---------------------------------------------------------------------------
0000B468                            ; Object 30 - large green glassy blocks	(MZ)
0000B468                            ; ---------------------------------------------------------------------------
0000B468                            
0000B468                            Obj30:					; XREF: Obj_Index
0000B468 7000                       		moveq	#0,d0
0000B46A 1028 0024                  		move.b	$24(a0),d0
0000B46E 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B472 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B476 3028 0008                  		move.w	8(a0),d0
0000B47A 0240 FF80                  		andi.w	#$FF80,d0
0000B47E 3238 F700                  		move.w	($FFFFF700).w,d1
0000B482 0441 0080                  		subi.w	#$80,d1
0000B486 0241 FF80                  		andi.w	#$FF80,d1
0000B48A 9041                       		sub.w	d1,d0
0000B48C 0C40 0280                  		cmpi.w	#$280,d0
0000B490 6200 0000                  		bhi.w	Obj30_Delete
0000B494 6000 0000                  		bra.w	DisplaySprite
0000B498                            ; ===========================================================================
0000B498                            
0000B498                            Obj30_Delete:
0000B498 6000 0000                  		bra.w	DeleteObject
0000B49C                            ; ===========================================================================
0000B49C 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B49E 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B4A0 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B4A2 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B4A4 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B4A6                            
0000B4A6 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B4A9 0400 01                    		dc.b 4,	0, 1
0000B4AC 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B4AF 0800 01                    		dc.b 8,	0, 1
0000B4B2                            ; ===========================================================================
0000B4B2                            
0000B4B2                            Obj30_Main:				; XREF: Obj30_Index
0000B4B2 45F9 0000 B4A6             		lea	(Obj30_Vars1).l,a2
0000B4B8 7201                       		moveq	#1,d1
0000B4BA 117C 0048 0016             		move.b	#$48,$16(a0)
0000B4C0 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B4C6 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B4C8 45F9 0000 B4AC             		lea	(Obj30_Vars2).l,a2
0000B4CE 7201                       		moveq	#1,d1
0000B4D0 117C 0038 0016             		move.b	#$38,$16(a0)
0000B4D6                            
0000B4D6                            loc_B40C:
0000B4D6 2248                       		movea.l	a0,a1
0000B4D8 6000                       		bra.s	Obj30_Load	; load main object
0000B4DA                            ; ===========================================================================
0000B4DA                            
0000B4DA                            Obj30_Loop:
0000B4DA 6100 0000                  		bsr.w	SingleObjLoad2
0000B4DE 6600                       		bne.s	loc_B480
0000B4E0                            
0000B4E0                            Obj30_Load:				; XREF: Obj30_Main
0000B4E0 135A 0024                  		move.b	(a2)+,$24(a1)
0000B4E4 12BC 0030                  		move.b	#$30,0(a1)
0000B4E8 3368 0008 0008             		move.w	8(a0),8(a1)
0000B4EE 101A                       		move.b	(a2)+,d0
0000B4F0 4880                       		ext.w	d0
0000B4F2 D068 000C                  		add.w	$C(a0),d0
0000B4F6 3340 000C                  		move.w	d0,$C(a1)
0000B4FA 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B502 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B508 137C 0004 0001             		move.b	#4,1(a1)
0000B50E 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B514 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B51A 137C 0020 0019             		move.b	#$20,$19(a1)
0000B520 137C 0004 0018             		move.b	#4,$18(a1)
0000B526 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B52A 2348 003C                  		move.l	a0,$3C(a1)
0000B52E 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B532                            
0000B532 137C 0010 0019             		move.b	#$10,$19(a1)
0000B538 137C 0003 0018             		move.b	#3,$18(a1)
0000B53E 5029 0028                  		addq.b	#8,$28(a1)
0000B542 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B548                            
0000B548                            loc_B480:
0000B548 317C 0090 0032             		move.w	#$90,$32(a0)
0000B54E 08E8 0004 0001             		bset	#4,1(a0)
0000B554                            
0000B554                            Obj30_Block012:				; XREF: Obj30_Index
0000B554 6100 0000                  		bsr.w	Obj30_Types
0000B558 323C 002B                  		move.w	#$2B,d1
0000B55C 343C 0048                  		move.w	#$48,d2
0000B560 363C 0049                  		move.w	#$49,d3
0000B564 3828 0008                  		move.w	8(a0),d4
0000B568 6000 0000                  		bra.w	SolidObject
0000B56C                            ; ===========================================================================
0000B56C                            
0000B56C                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B56C 2268 003C                  		movea.l	$3C(a0),a1
0000B570 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B576 6000 0000                  		bra.w	Obj30_Types
0000B57A                            ; ===========================================================================
0000B57A                            
0000B57A                            Obj30_Block34:				; XREF: Obj30_Index
0000B57A 6100 0000                  		bsr.w	Obj30_Types
0000B57E 323C 002B                  		move.w	#$2B,d1
0000B582 343C 0038                  		move.w	#$38,d2
0000B586 363C 0039                  		move.w	#$39,d3
0000B58A 3828 0008                  		move.w	8(a0),d4
0000B58E 6000 0000                  		bra.w	SolidObject
0000B592                            ; ===========================================================================
0000B592                            
0000B592                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B592 2268 003C                  		movea.l	$3C(a0),a1
0000B596 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B59C 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B5A2 6000 0002                  		bra.w	*+4
0000B5A6                            
0000B5A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5A6                            
0000B5A6                            
0000B5A6                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B5A6 7000                       		moveq	#0,d0
0000B5A8 1028 0028                  		move.b	$28(a0),d0
0000B5AC 0240 0007                  		andi.w	#7,d0
0000B5B0 D040                       		add.w	d0,d0
0000B5B2 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B5B6 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B5BA                            ; End of function Obj30_Types
0000B5BA                            
0000B5BA                            ; ===========================================================================
0000B5BA 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B5BC 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B5BE 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B5C0 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B5C2 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B5C4                            ; ===========================================================================
0000B5C4                            
0000B5C4                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B5C4 4E75                       		rts	
0000B5C6                            ; ===========================================================================
0000B5C6                            
0000B5C6                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B5C6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B5CA 323C 0040                  		move.w	#$40,d1
0000B5CE 6000                       		bra.s	loc_B514
0000B5D0                            ; ===========================================================================
0000B5D0                            
0000B5D0                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B5D0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B5D4 323C 0040                  		move.w	#$40,d1
0000B5D8 4440                       		neg.w	d0
0000B5DA D041                       		add.w	d1,d0
0000B5DC                            
0000B5DC                            loc_B514:				; XREF: Obj30_Type01
0000B5DC 0828 0003 0028             		btst	#3,$28(a0)
0000B5E2 6700                       		beq.s	loc_B526
0000B5E4 4440                       		neg.w	d0
0000B5E6 D041                       		add.w	d1,d0
0000B5E8 E208                       		lsr.b	#1,d0
0000B5EA 0640 0020                  		addi.w	#$20,d0
0000B5EE                            
0000B5EE                            loc_B526:
0000B5EE 6000 0000                  		bra.w	loc_B5EE
0000B5F2                            ; ===========================================================================
0000B5F2                            
0000B5F2                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B5F2 0828 0003 0028             		btst	#3,$28(a0)
0000B5F8 6700                       		beq.s	loc_B53E
0000B5FA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B5FE 0440 0010                  		subi.w	#$10,d0
0000B602 6000 0000                  		bra.w	loc_B5EE
0000B606                            ; ===========================================================================
0000B606                            
0000B606                            loc_B53E:
0000B606 0828 0003 0022             		btst	#3,$22(a0)
0000B60C 6600                       		bne.s	loc_B54E
0000B60E 08A8 0000 0034             		bclr	#0,$34(a0)
0000B614 6000                       		bra.s	loc_B582
0000B616                            ; ===========================================================================
0000B616                            
0000B616                            loc_B54E:
0000B616 4A28 0034                  		tst.b	$34(a0)
0000B61A 6600                       		bne.s	loc_B582
0000B61C 117C 0001 0034             		move.b	#1,$34(a0)
0000B622 08E8 0000 0035             		bset	#0,$35(a0)
0000B628 6700                       		beq.s	loc_B582
0000B62A 08E8 0007 0034             		bset	#7,$34(a0)
0000B630 317C 0010 0036             		move.w	#$10,$36(a0)
0000B636 117C 000A 0038             		move.b	#$A,$38(a0)
0000B63C 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000B642 6600                       		bne.s	loc_B582
0000B644 317C 0040 0036             		move.w	#$40,$36(a0)
0000B64A                            
0000B64A                            loc_B582:
0000B64A 4A28 0034                  		tst.b	$34(a0)
0000B64E 6A00                       		bpl.s	loc_B5AA
0000B650 4A28 0038                  		tst.b	$38(a0)
0000B654 6700                       		beq.s	loc_B594
0000B656 5328 0038                  		subq.b	#1,$38(a0)
0000B65A 6600                       		bne.s	loc_B5AA
0000B65C                            
0000B65C                            loc_B594:
0000B65C 4A68 0032                  		tst.w	$32(a0)
0000B660 6700                       		beq.s	loc_B5A4
0000B662 5368 0032                  		subq.w	#1,$32(a0)
0000B666 5368 0036                  		subq.w	#1,$36(a0)
0000B66A 6600                       		bne.s	loc_B5AA
0000B66C                            
0000B66C                            loc_B5A4:
0000B66C 08A8 0007 0034             		bclr	#7,$34(a0)
0000B672                            
0000B672                            loc_B5AA:
0000B672 3028 0032                  		move.w	$32(a0),d0
0000B676 6000                       		bra.s	loc_B5EE
0000B678                            ; ===========================================================================
0000B678                            
0000B678                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000B678 0828 0003 0028             		btst	#3,$28(a0)
0000B67E 6700                       		beq.s	Obj30_ChkSwitch
0000B680 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B684 0440 0010                  		subi.w	#$10,d0
0000B688 6000                       		bra.s	loc_B5EE
0000B68A                            ; ===========================================================================
0000B68A                            
0000B68A                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000B68A 4A28 0034                  		tst.b	$34(a0)
0000B68E 6600                       		bne.s	loc_B5E0
0000B690 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000B694 7000                       		moveq	#0,d0
0000B696 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000B69A E848                       		lsr.w	#4,d0		; read only the	first nybble
0000B69C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000B6A0 6700                       		beq.s	loc_B5EA	; if not, branch
0000B6A2 117C 0001 0034             		move.b	#1,$34(a0)
0000B6A8                            
0000B6A8                            loc_B5E0:
0000B6A8 4A68 0032                  		tst.w	$32(a0)
0000B6AC 6700                       		beq.s	loc_B5EA
0000B6AE 5568 0032                  		subq.w	#2,$32(a0)
0000B6B2                            
0000B6B2                            loc_B5EA:
0000B6B2 3028 0032                  		move.w	$32(a0),d0
0000B6B6                            
0000B6B6                            loc_B5EE:
0000B6B6 3228 0030                  		move.w	$30(a0),d1
0000B6BA 9240                       		sub.w	d0,d1
0000B6BC 3141 000C                  		move.w	d1,$C(a0)
0000B6C0 4E75                       		rts	
0000B6C2                            ; ===========================================================================
0000B6C2                            ; ---------------------------------------------------------------------------
0000B6C2                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B6C2                            ; ---------------------------------------------------------------------------
0000B6C2                            Map_obj30:
0000B6C2                            	include "_maps\obj30.asm"
0000B6C2                            ; ---------------------------------------------------------------------------
0000B6C2                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B6C2                            ; ---------------------------------------------------------------------------
0000B6C2 0000                       		dc.w byte_B600-Map_obj30
0000B6C4 0000                       		dc.w byte_B63D-Map_obj30
0000B6C6 0000                       		dc.w byte_B648-Map_obj30
0000B6C8 0C                         byte_B600:	dc.b $C
0000B6C9 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000B6CE B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000B6D3 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000B6D8 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000B6DD E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000B6E2 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000B6E7 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000B6EC 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000B6F1 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000B6F6 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000B6FB 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000B700 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000B705 02                         byte_B63D:	dc.b 2
0000B706 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000B70B 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000B710 0A                         byte_B648:	dc.b $A
0000B711 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000B716 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000B71B D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000B720 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000B725 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000B72A F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000B72F 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000B734 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000B739 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000B73E 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000B744 00                         		even
0000B744 00                         		even
0000B744                            
0000B744                            ; ===========================================================================
0000B744                            ; ---------------------------------------------------------------------------
0000B744                            ; Object 31 - stomping metal blocks on chains (MZ)
0000B744                            ; ---------------------------------------------------------------------------
0000B744                            
0000B744                            Obj31:					; XREF: Obj_Index
0000B744 7000                       		moveq	#0,d0
0000B746 1028 0024                  		move.b	$24(a0),d0
0000B74A 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000B74E 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000B752                            ; ===========================================================================
0000B752 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000B754 0000                       		dc.w loc_B798-Obj31_Index
0000B756 0000                       		dc.w loc_B7FE-Obj31_Index
0000B758 0000                       		dc.w Obj31_Display2-Obj31_Index
0000B75A 0000                       		dc.w loc_B7E2-Obj31_Index
0000B75C                            
0000B75C 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000B75E 0100                       		dc.b 1,	0
0000B760                            
0000B760 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000B763 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000B766 08CC 03                    		dc.b 8,	$CC, 3
0000B769 06F0 02                    		dc.b 6,	$F0, 2
0000B76C                            
0000B76C 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000B770 5000 7800                  		dc.w $5000, $7800
0000B774 3800 5800                  		dc.w $3800, $5800
0000B778 B800                       		dc.w $B800
0000B77A                            ; ===========================================================================
0000B77A                            
0000B77A                            Obj31_Main:				; XREF: Obj31_Index
0000B77A 7000                       		moveq	#0,d0
0000B77C 1028 0028                  		move.b	$28(a0),d0
0000B780 6A00                       		bpl.s	loc_B6CE
0000B782 0240 007F                  		andi.w	#$7F,d0
0000B786 D040                       		add.w	d0,d0
0000B788 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000B78C 115A 003A                  		move.b	(a2)+,$3A(a0)
0000B790 101A                       		move.b	(a2)+,d0
0000B792 1140 0028                  		move.b	d0,$28(a0)
0000B796                            
0000B796                            loc_B6CE:
0000B796 0200 000F                  		andi.b	#$F,d0
0000B79A D040                       		add.w	d0,d0
0000B79C 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000B7A0 4A40                       		tst.w	d0
0000B7A2 6600                       		bne.s	loc_B6E0
0000B7A4 3142 0032                  		move.w	d2,$32(a0)
0000B7A8                            
0000B7A8                            loc_B6E0:
0000B7A8 45F9 0000 B760             		lea	(Obj31_Var).l,a2
0000B7AE 2248                       		movea.l	a0,a1
0000B7B0 7203                       		moveq	#3,d1
0000B7B2 6000                       		bra.s	Obj31_MakeStomper
0000B7B4                            ; ===========================================================================
0000B7B4                            
0000B7B4                            Obj31_Loop:
0000B7B4 6100 0000                  		bsr.w	SingleObjLoad2
0000B7B8 6600 0000                  		bne.w	Obj31_SetSize
0000B7BC                            
0000B7BC                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000B7BC 135A 0024                  		move.b	(a2)+,$24(a1)
0000B7C0 12BC 0031                  		move.b	#$31,0(a1)
0000B7C4 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7CA 101A                       		move.b	(a2)+,d0
0000B7CC 4880                       		ext.w	d0
0000B7CE D068 000C                  		add.w	$C(a0),d0
0000B7D2 3340 000C                  		move.w	d0,$C(a1)
0000B7D6 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000B7DE 337C 0300 0002             		move.w	#$300,2(a1)
0000B7E4 137C 0004 0001             		move.b	#4,1(a1)
0000B7EA 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B7F0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B7F6 137C 0010 0019             		move.b	#$10,$19(a1)
0000B7FC 3342 0034                  		move.w	d2,$34(a1)
0000B800 137C 0004 0018             		move.b	#4,$18(a1)
0000B806 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B80A 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000B810 6600                       		bne.s	loc_B76A
0000B812 5341                       		subq.w	#1,d1
0000B814 1028 0028                  		move.b	$28(a0),d0
0000B818 0240 00F0                  		andi.w	#$F0,d0
0000B81C 0C40 0020                  		cmpi.w	#$20,d0
0000B820 679A                       		beq.s	Obj31_MakeStomper
0000B822 137C 0038 0019             		move.b	#$38,$19(a1)
0000B828 137C 0090 0020             		move.b	#$90,$20(a1)
0000B82E 5241                       		addq.w	#1,d1
0000B830                            
0000B830                            loc_B76A:
0000B830 2348 003C                  		move.l	a0,$3C(a1)
0000B834 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000B838                            
0000B838 137C 0003 0018             		move.b	#3,$18(a1)
0000B83E                            
0000B83E                            Obj31_SetSize:
0000B83E 7000                       		moveq	#0,d0
0000B840 1028 0028                  		move.b	$28(a0),d0
0000B844 E648                       		lsr.w	#3,d0
0000B846 0200 000E                  		andi.b	#$E,d0
0000B84A 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000B84E 115A 0019                  		move.b	(a2)+,$19(a0)
0000B852 115A 001A                  		move.b	(a2)+,$1A(a0)
0000B856 6000                       		bra.s	loc_B798
0000B858                            ; ===========================================================================
0000B858 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000B85A 3009                       		dc.b $30, 9
0000B85C 100A                       		dc.b $10, $A
0000B85E                            ; ===========================================================================
0000B85E                            
0000B85E                            loc_B798:				; XREF: Obj31_Index
0000B85E 6100 0000                  		bsr.w	Obj31_Types
0000B862 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000B868 7200                       		moveq	#0,d1
0000B86A 1228 0019                  		move.b	$19(a0),d1
0000B86E 0641 000B                  		addi.w	#$B,d1
0000B872 343C 000C                  		move.w	#$C,d2
0000B876 363C 000D                  		move.w	#$D,d3
0000B87A 3828 0008                  		move.w	8(a0),d4
0000B87E 6100 0000                  		bsr.w	SolidObject
0000B882 0828 0003 0022             		btst	#3,$22(a0)
0000B888 6700                       		beq.s	Obj31_Display
0000B88A 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B890 6400                       		bcc.s	Obj31_Display
0000B892 2448                       		movea.l	a0,a2
0000B894 41F8 D000                  		lea	($FFFFD000).w,a0
0000B898 4EB9 0000 0000             		jsr	KillSonic
0000B89E 204A                       		movea.l	a2,a0
0000B8A0                            
0000B8A0                            Obj31_Display:
0000B8A0 6100 0000                  		bsr.w	DisplaySprite
0000B8A4 6000 0000                  		bra.w	Obj31_ChkDel
0000B8A8                            ; ===========================================================================
0000B8A8                            
0000B8A8                            loc_B7E2:				; XREF: Obj31_Index
0000B8A8 117C 0080 0016             		move.b	#$80,$16(a0)
0000B8AE 08E8 0004 0001             		bset	#4,1(a0)
0000B8B4 2268 003C                  		movea.l	$3C(a0),a1
0000B8B8 1029 0032                  		move.b	$32(a1),d0
0000B8BC EA08                       		lsr.b	#5,d0
0000B8BE 5600                       		addq.b	#3,d0
0000B8C0 1140 001A                  		move.b	d0,$1A(a0)
0000B8C4                            
0000B8C4                            loc_B7FE:				; XREF: Obj31_Index
0000B8C4 2268 003C                  		movea.l	$3C(a0),a1
0000B8C8 7000                       		moveq	#0,d0
0000B8CA 1029 0032                  		move.b	$32(a1),d0
0000B8CE D068 0030                  		add.w	$30(a0),d0
0000B8D2 3140 000C                  		move.w	d0,$C(a0)
0000B8D6                            
0000B8D6                            Obj31_Display2:				; XREF: Obj31_Index
0000B8D6 6100 0000                  		bsr.w	DisplaySprite
0000B8DA                            
0000B8DA                            Obj31_ChkDel:				; XREF: Obj31_Display
0000B8DA 3028 0008                  		move.w	8(a0),d0
0000B8DE 0240 FF80                  		andi.w	#$FF80,d0
0000B8E2 3238 F700                  		move.w	($FFFFF700).w,d1
0000B8E6 0441 0080                  		subi.w	#$80,d1
0000B8EA 0241 FF80                  		andi.w	#$FF80,d1
0000B8EE 9041                       		sub.w	d1,d0
0000B8F0 0C40 0280                  		cmpi.w	#$280,d0
0000B8F4 6200 0000                  		bhi.w	DeleteObject
0000B8F8 4E75                       		rts	
0000B8FA                            ; ===========================================================================
0000B8FA                            
0000B8FA                            Obj31_Types:				; XREF: loc_B798
0000B8FA 1028 0028                  		move.b	$28(a0),d0
0000B8FE 0240 000F                  		andi.w	#$F,d0
0000B902 D040                       		add.w	d0,d0
0000B904 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000B908 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000B90C                            ; ===========================================================================
0000B90C 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000B90E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B910 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B912 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B914 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B916 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B918 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B91A                            ; ===========================================================================
0000B91A                            
0000B91A                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000B91A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000B91E 7000                       		moveq	#0,d0
0000B920 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000B924 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000B928 6700                       		beq.s	loc_B8A8	; if not, branch
0000B92A 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000B92E 6A00                       		bpl.s	loc_B872
0000B930 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B936 6700                       		beq.s	loc_B8A0
0000B938                            
0000B938                            loc_B872:
0000B938 4A68 0032                  		tst.w	$32(a0)
0000B93C 6700                       		beq.s	loc_B8A0
0000B93E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B942 0200 000F                  		andi.b	#$F,d0
0000B946 6600                       		bne.s	loc_B892
0000B948 4A28 0001                  		tst.b	1(a0)
0000B94C 6A00                       		bpl.s	loc_B892
0000B94E 303C 00C7                  		move.w	#$C7,d0
0000B952 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B958                            
0000B958                            loc_B892:
0000B958 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B95E 6400                       		bcc.s	Obj31_Restart
0000B960 317C 0000 0032             		move.w	#0,$32(a0)
0000B966                            
0000B966                            loc_B8A0:
0000B966 317C 0000 0012             		move.w	#0,$12(a0)
0000B96C 6000                       		bra.s	Obj31_Restart
0000B96E                            ; ===========================================================================
0000B96E                            
0000B96E                            loc_B8A8:				; XREF: Obj31_Type00
0000B96E 3228 0034                  		move.w	$34(a0),d1
0000B972 B268 0032                  		cmp.w	$32(a0),d1
0000B976 6700                       		beq.s	Obj31_Restart
0000B978 3028 0012                  		move.w	$12(a0),d0
0000B97C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000B982 D168 0032                  		add.w	d0,$32(a0)
0000B986 B268 0032                  		cmp.w	$32(a0),d1
0000B98A 6200                       		bhi.s	Obj31_Restart
0000B98C 3141 0032                  		move.w	d1,$32(a0)
0000B990 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000B996 4A28 0001                  		tst.b	1(a0)
0000B99A 6A00                       		bpl.s	Obj31_Restart
0000B99C 303C 00BD                  		move.w	#$BD,d0
0000B9A0 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000B9A6                            
0000B9A6                            Obj31_Restart:
0000B9A6 7000                       		moveq	#0,d0
0000B9A8 1028 0032                  		move.b	$32(a0),d0
0000B9AC D068 0030                  		add.w	$30(a0),d0
0000B9B0 3140 000C                  		move.w	d0,$C(a0)
0000B9B4 4E75                       		rts	
0000B9B6                            ; ===========================================================================
0000B9B6                            
0000B9B6                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000B9B6 4A68 0036                  		tst.w	$36(a0)
0000B9BA 6700                       		beq.s	loc_B938
0000B9BC 4A68 0038                  		tst.w	$38(a0)
0000B9C0 6700                       		beq.s	loc_B902
0000B9C2 5368 0038                  		subq.w	#1,$38(a0)
0000B9C6 6000                       		bra.s	loc_B97C
0000B9C8                            ; ===========================================================================
0000B9C8                            
0000B9C8                            loc_B902:
0000B9C8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B9CC 0200 000F                  		andi.b	#$F,d0
0000B9D0 6600                       		bne.s	loc_B91C
0000B9D2 4A28 0001                  		tst.b	1(a0)
0000B9D6 6A00                       		bpl.s	loc_B91C
0000B9D8 303C 00C7                  		move.w	#$C7,d0
0000B9DC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B9E2                            
0000B9E2                            loc_B91C:
0000B9E2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B9E8 6400                       		bcc.s	loc_B97C
0000B9EA 317C 0000 0032             		move.w	#0,$32(a0)
0000B9F0 317C 0000 0012             		move.w	#0,$12(a0)
0000B9F6 317C 0000 0036             		move.w	#0,$36(a0)
0000B9FC 6000                       		bra.s	loc_B97C
0000B9FE                            ; ===========================================================================
0000B9FE                            
0000B9FE                            loc_B938:				; XREF: Obj31_Type01
0000B9FE 3228 0034                  		move.w	$34(a0),d1
0000BA02 B268 0032                  		cmp.w	$32(a0),d1
0000BA06 6700                       		beq.s	loc_B97C
0000BA08 3028 0012                  		move.w	$12(a0),d0
0000BA0C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BA12 D168 0032                  		add.w	d0,$32(a0)
0000BA16 B268 0032                  		cmp.w	$32(a0),d1
0000BA1A 6200                       		bhi.s	loc_B97C
0000BA1C 3141 0032                  		move.w	d1,$32(a0)
0000BA20 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BA26 317C 0001 0036             		move.w	#1,$36(a0)
0000BA2C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BA32 4A28 0001                  		tst.b	1(a0)
0000BA36 6A00                       		bpl.s	loc_B97C
0000BA38 303C 00BD                  		move.w	#$BD,d0
0000BA3C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BA42                            
0000BA42                            loc_B97C:
0000BA42 6000 FF62                  		bra.w	Obj31_Restart
0000BA46                            ; ===========================================================================
0000BA46                            
0000BA46                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BA46 3038 D008                  		move.w	($FFFFD008).w,d0
0000BA4A 9068 0008                  		sub.w	8(a0),d0
0000BA4E 6400                       		bcc.s	loc_B98C
0000BA50 4440                       		neg.w	d0
0000BA52                            
0000BA52                            loc_B98C:
0000BA52 0C40 0090                  		cmpi.w	#$90,d0
0000BA56 6400                       		bcc.s	loc_B996
0000BA58 5228 0028                  		addq.b	#1,$28(a0)
0000BA5C                            
0000BA5C                            loc_B996:
0000BA5C 6000 FF48                  		bra.w	Obj31_Restart
0000BA60                            ; ===========================================================================
0000BA60                            ; ---------------------------------------------------------------------------
0000BA60                            ; Object 45 - spiked metal block from beta version (MZ)
0000BA60                            ; ---------------------------------------------------------------------------
0000BA60                            
0000BA60                            Obj45:					; XREF: Obj_Index
0000BA60 7000                       		moveq	#0,d0
0000BA62 1028 0024                  		move.b	$24(a0),d0
0000BA66 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BA6A 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BA6E                            ; ===========================================================================
0000BA6E 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BA70 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BA72 0000                       		dc.w loc_BA8E-Obj45_Index
0000BA74 0000                       		dc.w Obj45_Display-Obj45_Index
0000BA76 0000                       		dc.w loc_BA7A-Obj45_Index
0000BA78                            
0000BA78 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BA7B 04E4 01                    		dc.b	4, $E4,	  1
0000BA7E 0834 03                    		dc.b	8, $34,	  3
0000BA81 0628 02                    		dc.b	6, $28,	  2
0000BA84                            
0000BA84 3800                       word_B9BE:	dc.w $3800
0000BA86 A000                       		dc.w -$6000
0000BA88 5000                       		dc.w $5000
0000BA8A                            ; ===========================================================================
0000BA8A                            
0000BA8A                            Obj45_Main:				; XREF: Obj45_Index
0000BA8A 7000                       		moveq	#0,d0
0000BA8C 1028 0028                  		move.b	$28(a0),d0
0000BA90 D040                       		add.w	d0,d0
0000BA92 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BA96 45F9 0000 BA78             		lea	(Obj45_Var).l,a2
0000BA9C 2248                       		movea.l	a0,a1
0000BA9E 7203                       		moveq	#3,d1
0000BAA0 6000                       		bra.s	Obj45_Load
0000BAA2                            ; ===========================================================================
0000BAA2                            
0000BAA2                            Obj45_Loop:
0000BAA2 6100 0000                  		bsr.w	SingleObjLoad2
0000BAA6 6600                       		bne.s	loc_BA52
0000BAA8                            
0000BAA8                            Obj45_Load:				; XREF: Obj45_Main
0000BAA8 135A 0024                  		move.b	(a2)+,$24(a1)
0000BAAC 12BC 0045                  		move.b	#$45,0(a1)
0000BAB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BAB6 101A                       		move.b	(a2)+,d0
0000BAB8 4880                       		ext.w	d0
0000BABA D068 0008                  		add.w	8(a0),d0
0000BABE 3340 0008                  		move.w	d0,8(a1)
0000BAC2 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BACA 337C 0300 0002             		move.w	#$300,2(a1)
0000BAD0 137C 0004 0001             		move.b	#4,1(a1)
0000BAD6 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BADC 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BAE2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BAE8 137C 0020 0019             		move.b	#$20,$19(a1)
0000BAEE 3342 0034                  		move.w	d2,$34(a1)
0000BAF2 137C 0004 0018             		move.b	#4,$18(a1)
0000BAF8 0C12 0001                  		cmpi.b	#1,(a2)
0000BAFC 6600                       		bne.s	loc_BA40
0000BAFE 137C 0091 0020             		move.b	#$91,$20(a1)
0000BB04                            
0000BB04                            loc_BA40:
0000BB04 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BB08 2348 003C                  		move.l	a0,$3C(a1)
0000BB0C 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BB10                            
0000BB10 137C 0003 0018             		move.b	#3,$18(a1)
0000BB16                            
0000BB16                            loc_BA52:
0000BB16 117C 0010 0019             		move.b	#$10,$19(a0)
0000BB1C                            
0000BB1C                            Obj45_Solid:				; XREF: Obj45_Index
0000BB1C 3F28 0008                  		move.w	8(a0),-(sp)
0000BB20 6100 0000                  		bsr.w	Obj45_Move
0000BB24 323C 0017                  		move.w	#$17,d1
0000BB28 343C 0020                  		move.w	#$20,d2
0000BB2C 363C 0020                  		move.w	#$20,d3
0000BB30 381F                       		move.w	(sp)+,d4
0000BB32 6100 0000                  		bsr.w	SolidObject
0000BB36 6100 0000                  		bsr.w	DisplaySprite
0000BB3A 6000 0000                  		bra.w	Obj45_ChkDel
0000BB3E                            ; ===========================================================================
0000BB3E                            
0000BB3E                            loc_BA7A:				; XREF: Obj45_Index
0000BB3E 2268 003C                  		movea.l	$3C(a0),a1
0000BB42 1029 0032                  		move.b	$32(a1),d0
0000BB46 0600 0010                  		addi.b	#$10,d0
0000BB4A EA08                       		lsr.b	#5,d0
0000BB4C 5600                       		addq.b	#3,d0
0000BB4E 1140 001A                  		move.b	d0,$1A(a0)
0000BB52                            
0000BB52                            loc_BA8E:				; XREF: Obj45_Index
0000BB52 2268 003C                  		movea.l	$3C(a0),a1
0000BB56 7000                       		moveq	#0,d0
0000BB58 1029 0032                  		move.b	$32(a1),d0
0000BB5C 4440                       		neg.w	d0
0000BB5E D068 0030                  		add.w	$30(a0),d0
0000BB62 3140 0008                  		move.w	d0,8(a0)
0000BB66                            
0000BB66                            Obj45_Display:				; XREF: Obj45_Index
0000BB66 6100 0000                  		bsr.w	DisplaySprite
0000BB6A                            
0000BB6A                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BB6A 3028 003A                  		move.w	$3A(a0),d0
0000BB6E 0240 FF80                  		andi.w	#$FF80,d0
0000BB72 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB76 0441 0080                  		subi.w	#$80,d1
0000BB7A 0241 FF80                  		andi.w	#$FF80,d1
0000BB7E 9041                       		sub.w	d1,d0
0000BB80 0C40 0280                  		cmpi.w	#$280,d0
0000BB84 6200 0000                  		bhi.w	DeleteObject
0000BB88 4E75                       		rts	
0000BB8A                            
0000BB8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB8A                            
0000BB8A                            
0000BB8A                            Obj45_Move:				; XREF: Obj45_Solid
0000BB8A 7000                       		moveq	#0,d0
0000BB8C 1028 0028                  		move.b	$28(a0),d0
0000BB90 D040                       		add.w	d0,d0
0000BB92 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BB96 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BB9A                            ; End of function Obj45_Move
0000BB9A                            
0000BB9A                            ; ===========================================================================
0000BB9A 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BB9C 0000                       		dc.w loc_BADA-off_BAD6
0000BB9E                            ; ===========================================================================
0000BB9E                            
0000BB9E                            loc_BADA:				; XREF: off_BAD6
0000BB9E 4A68 0036                  		tst.w	$36(a0)
0000BBA2 6700                       		beq.s	loc_BB08
0000BBA4 4A68 0038                  		tst.w	$38(a0)
0000BBA8 6700                       		beq.s	loc_BAEC
0000BBAA 5368 0038                  		subq.w	#1,$38(a0)
0000BBAE 6000                       		bra.s	loc_BB3C
0000BBB0                            ; ===========================================================================
0000BBB0                            
0000BBB0                            loc_BAEC:
0000BBB0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BBB6 6400                       		bcc.s	loc_BB3C
0000BBB8 317C 0000 0032             		move.w	#0,$32(a0)
0000BBBE 317C 0000 0010             		move.w	#0,$10(a0)
0000BBC4 317C 0000 0036             		move.w	#0,$36(a0)
0000BBCA 6000                       		bra.s	loc_BB3C
0000BBCC                            ; ===========================================================================
0000BBCC                            
0000BBCC                            loc_BB08:				; XREF: loc_BADA
0000BBCC 3228 0034                  		move.w	$34(a0),d1
0000BBD0 B268 0032                  		cmp.w	$32(a0),d1
0000BBD4 6700                       		beq.s	loc_BB3C
0000BBD6 3028 0010                  		move.w	$10(a0),d0
0000BBDA 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BBE0 D168 0032                  		add.w	d0,$32(a0)
0000BBE4 B268 0032                  		cmp.w	$32(a0),d1
0000BBE8 6200                       		bhi.s	loc_BB3C
0000BBEA 3141 0032                  		move.w	d1,$32(a0)
0000BBEE 317C 0000 0010             		move.w	#0,$10(a0)
0000BBF4 317C 0001 0036             		move.w	#1,$36(a0)
0000BBFA 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BC00                            
0000BC00                            loc_BB3C:
0000BC00 7000                       		moveq	#0,d0
0000BC02 1028 0032                  		move.b	$32(a0),d0
0000BC06 4440                       		neg.w	d0
0000BC08 D068 0030                  		add.w	$30(a0),d0
0000BC0C 3140 0008                  		move.w	d0,8(a0)
0000BC10 4E75                       		rts	
0000BC12                            ; ===========================================================================
0000BC12                            ; ---------------------------------------------------------------------------
0000BC12                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BC12                            ; ---------------------------------------------------------------------------
0000BC12                            Map_obj31:
0000BC12                            	include "_maps\obj31.asm"
0000BC12                            ; ---------------------------------------------------------------------------
0000BC12                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BC12                            ; ---------------------------------------------------------------------------
0000BC12 0000                       		dc.w byte_BB64-Map_obj31
0000BC14 0000                       		dc.w byte_BB7E-Map_obj31
0000BC16 0000                       		dc.w byte_BB98-Map_obj31
0000BC18 0000                       		dc.w byte_BB9E-Map_obj31
0000BC1A 0000                       		dc.w byte_BBA9-Map_obj31
0000BC1C 0000                       		dc.w byte_BBBE-Map_obj31
0000BC1E 0000                       		dc.w byte_BBDD-Map_obj31
0000BC20 0000                       		dc.w byte_BC06-Map_obj31
0000BC22 0000                       		dc.w byte_BC06-Map_obj31
0000BC24 0000                       		dc.w byte_BC39-Map_obj31
0000BC26 0000                       		dc.w byte_BC53-Map_obj31
0000BC28 05                         byte_BB64:	dc.b 5
0000BC29 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000BC2E F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000BC33 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BC38 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000BC3D F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000BC42 05                         byte_BB7E:	dc.b 5
0000BC43 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000BC48 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000BC4D F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000BC52 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000BC57 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000BC5C 01                         byte_BB98:	dc.b 1
0000BC5D DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000BC62 02                         byte_BB9E:	dc.b 2
0000BC63 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC68 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC6D 04                         byte_BBA9:	dc.b 4
0000BC6E E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BC73 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BC78 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC7D 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC82 06                         byte_BBBE:	dc.b 6
0000BC83 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BC88 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BC8D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BC92 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BC97 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC9C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BCA1 08                         byte_BBDD:	dc.b 8
0000BCA2 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BCA7 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BCAC C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BCB1 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BCB6 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BCBB F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BCC0 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BCC5 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BCCA 0A                         byte_BC06:	dc.b $A
0000BCCB 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000BCD0 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000BCD5 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BCDA B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BCDF C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BCE4 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BCE9 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BCEE F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BCF3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BCF8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BCFD 05                         byte_BC39:	dc.b 5
0000BCFE F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000BD03 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000BD08 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000BD0D F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000BD12 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BD17 01                         byte_BC53:	dc.b 1
0000BD18 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000BD1E 00                         		even
0000BD1E 00                         		even
0000BD1E                            
0000BD1E                            ; ---------------------------------------------------------------------------
0000BD1E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BD1E                            ; ---------------------------------------------------------------------------
0000BD1E                            Map_obj45:
0000BD1E                            	include "_maps\obj45.asm"
0000BD1E                            ; ---------------------------------------------------------------------------
0000BD1E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BD1E                            ; ---------------------------------------------------------------------------
0000BD1E 0000                       		dc.w byte_BC6C-Map_obj45
0000BD20 0000                       		dc.w byte_BC7C-Map_obj45
0000BD22 0000                       		dc.w byte_BC8C-Map_obj45
0000BD24 0000                       		dc.w byte_BC92-Map_obj45
0000BD26 0000                       		dc.w byte_BC9D-Map_obj45
0000BD28 0000                       		dc.w byte_BCB2-Map_obj45
0000BD2A 0000                       		dc.w byte_BCD1-Map_obj45
0000BD2C 0000                       		dc.w byte_BCFA-Map_obj45
0000BD2E 0000                       		dc.w byte_BCFA-Map_obj45
0000BD30 03                         byte_BC6C:	dc.b 3
0000BD31 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000BD36 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000BD3B F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000BD40 03                         byte_BC7C:	dc.b 3
0000BD41 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000BD46 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000BD4B 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000BD50 01                         byte_BC8C:	dc.b 1
0000BD51 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000BD56 02                         byte_BC92:	dc.b 2
0000BD57 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD5C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD61 04                         byte_BC9D:	dc.b 4
0000BD62 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD67 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD6C F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD71 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD76 06                         byte_BCB2:	dc.b 6
0000BD77 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD7C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD81 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD86 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD8B F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BD90 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BD95 08                         byte_BCD1:	dc.b 8
0000BD96 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD9B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BDA0 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BDA5 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BDAA F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BDAF F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BDB4 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BDB9 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BDBE 08                         byte_BCFA:	dc.b 8
0000BDBF F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BDC4 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BDC9 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BDCE F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BDD3 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BDD8 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BDDD F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BDE2 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BDE7 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000BDEC F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000BDF2 00                         		even
0000BDF2 00                         		even
0000BDF2                            
0000BDF2                            ; ===========================================================================
0000BDF2                            ; ---------------------------------------------------------------------------
0000BDF2                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000BDF2                            ; ---------------------------------------------------------------------------
0000BDF2                            
0000BDF2                            Obj32:					; XREF: Obj_Index
0000BDF2 7000                       		moveq	#0,d0
0000BDF4 1028 0024                  		move.b	$24(a0),d0
0000BDF8 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000BDFC 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000BE00                            ; ===========================================================================
0000BE00 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000BE02 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000BE04                            ; ===========================================================================
0000BE04                            
0000BE04                            Obj32_Main:				; XREF: Obj32_Index
0000BE04 5428 0024                  		addq.b	#2,$24(a0)
0000BE08 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000BE10 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000BE16 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000BE1C 6700                       		beq.s	loc_BD60
0000BE1E 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000BE24                            
0000BE24                            loc_BD60:
0000BE24 117C 0004 0001             		move.b	#4,1(a0)
0000BE2A 117C 0010 0019             		move.b	#$10,$19(a0)
0000BE30 117C 0004 0018             		move.b	#4,$18(a0)
0000BE36 5668 000C                  		addq.w	#3,$C(a0)
0000BE3A                            
0000BE3A                            Obj32_Pressed:				; XREF: Obj32_Index
0000BE3A 4A28 0001                  		tst.b	1(a0)
0000BE3E 6A00                       		bpl.s	Obj32_Display
0000BE40 323C 001B                  		move.w	#$1B,d1
0000BE44 343C 0005                  		move.w	#5,d2
0000BE48 363C 0005                  		move.w	#5,d3
0000BE4C 3828 0008                  		move.w	8(a0),d4
0000BE50 6100 0000                  		bsr.w	SolidObject
0000BE54 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000BE5A 1028 0028                  		move.b	$28(a0),d0
0000BE5E 0240 000F                  		andi.w	#$F,d0
0000BE62 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000BE66 47F3 0000                  		lea	(a3,d0.w),a3
0000BE6A 7600                       		moveq	#0,d3
0000BE6C 0828 0006 0028             		btst	#6,$28(a0)
0000BE72 6700                       		beq.s	loc_BDB2
0000BE74 7607                       		moveq	#7,d3
0000BE76                            
0000BE76                            loc_BDB2:
0000BE76 4A28 0028                  		tst.b	$28(a0)
0000BE7A 6A00                       		bpl.s	loc_BDBE
0000BE7C 6100 0000                  		bsr.w	Obj32_MZBlock
0000BE80 6600                       		bne.s	loc_BDC8
0000BE82                            
0000BE82                            loc_BDBE:
0000BE82 4A28 0025                  		tst.b	$25(a0)
0000BE86 6600                       		bne.s	loc_BDC8
0000BE88 0793                       		bclr	d3,(a3)
0000BE8A 6000                       		bra.s	loc_BDDE
0000BE8C                            ; ===========================================================================
0000BE8C                            
0000BE8C                            loc_BDC8:
0000BE8C 4A13                       		tst.b	(a3)
0000BE8E 6600                       		bne.s	loc_BDD6
0000BE90 303C 00CD                  		move.w	#$CD,d0
0000BE94 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play switch sound
0000BE9A                            
0000BE9A                            loc_BDD6:
0000BE9A 07D3                       		bset	d3,(a3)
0000BE9C 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000BEA2                            
0000BEA2                            loc_BDDE:
0000BEA2 0828 0005 0028             		btst	#5,$28(a0)
0000BEA8 6700                       		beq.s	Obj32_Display
0000BEAA 5328 001E                  		subq.b	#1,$1E(a0)
0000BEAE 6A00                       		bpl.s	Obj32_Display
0000BEB0 117C 0007 001E             		move.b	#7,$1E(a0)
0000BEB6 0868 0001 001A             		bchg	#1,$1A(a0)
0000BEBC                            
0000BEBC                            Obj32_Display:
0000BEBC 6100 0000                  		bsr.w	DisplaySprite
0000BEC0 3028 0008                  		move.w	8(a0),d0
0000BEC4 0240 FF80                  		andi.w	#$FF80,d0
0000BEC8 3238 F700                  		move.w	($FFFFF700).w,d1
0000BECC 0441 0080                  		subi.w	#$80,d1
0000BED0 0241 FF80                  		andi.w	#$FF80,d1
0000BED4 9041                       		sub.w	d1,d0
0000BED6 0C40 0280                  		cmpi.w	#$280,d0
0000BEDA 6200 0000                  		bhi.w	Obj32_Delete
0000BEDE 4E75                       		rts	
0000BEE0                            ; ===========================================================================
0000BEE0                            
0000BEE0                            Obj32_Delete:
0000BEE0 6100 0000                  		bsr.w	DeleteObject
0000BEE4 4E75                       		rts	
0000BEE6                            
0000BEE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BEE6                            
0000BEE6                            
0000BEE6                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000BEE6 3F03                       		move.w	d3,-(sp)
0000BEE8 3428 0008                  		move.w	8(a0),d2
0000BEEC 3628 000C                  		move.w	$C(a0),d3
0000BEF0 0442 0010                  		subi.w	#$10,d2
0000BEF4 5143                       		subq.w	#8,d3
0000BEF6 383C 0020                  		move.w	#$20,d4
0000BEFA 3A3C 0010                  		move.w	#$10,d5
0000BEFE 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000BF02 3C3C 005F                  		move.w	#$5F,d6
0000BF06                            
0000BF06                            Obj32_MZLoop:
0000BF06 4A29 0001                  		tst.b	1(a1)
0000BF0A 6A00                       		bpl.s	loc_BE4E
0000BF0C 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000BF10 6700                       		beq.s	loc_BE5E	; if yes, branch
0000BF12                            
0000BF12                            loc_BE4E:
0000BF12 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000BF16 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000BF1A                            
0000BF1A 361F                       		move.w	(sp)+,d3
0000BF1C 7000                       		moveq	#0,d0
0000BF1E                            
0000BF1E                            locret_BE5A:
0000BF1E 4E75                       		rts	
0000BF20                            ; ===========================================================================
0000BF20 1010                       Obj32_MZData:	dc.b $10, $10
0000BF22                            ; ===========================================================================
0000BF22                            
0000BF22                            loc_BE5E:				; XREF: Obj32_MZBlock
0000BF22 7001                       		moveq	#1,d0
0000BF24 0240 003F                  		andi.w	#$3F,d0
0000BF28 D040                       		add.w	d0,d0
0000BF2A 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000BF2E 121A                       		move.b	(a2)+,d1
0000BF30 4881                       		ext.w	d1
0000BF32 3029 0008                  		move.w	8(a1),d0
0000BF36 9041                       		sub.w	d1,d0
0000BF38 9042                       		sub.w	d2,d0
0000BF3A 6400                       		bcc.s	loc_BE80
0000BF3C D241                       		add.w	d1,d1
0000BF3E D041                       		add.w	d1,d0
0000BF40 6500                       		bcs.s	loc_BE84
0000BF42 60CE                       		bra.s	loc_BE4E
0000BF44                            ; ===========================================================================
0000BF44                            
0000BF44                            loc_BE80:
0000BF44 B044                       		cmp.w	d4,d0
0000BF46 62CA                       		bhi.s	loc_BE4E
0000BF48                            
0000BF48                            loc_BE84:
0000BF48 121A                       		move.b	(a2)+,d1
0000BF4A 4881                       		ext.w	d1
0000BF4C 3029 000C                  		move.w	$C(a1),d0
0000BF50 9041                       		sub.w	d1,d0
0000BF52 9043                       		sub.w	d3,d0
0000BF54 6400                       		bcc.s	loc_BE9A
0000BF56 D241                       		add.w	d1,d1
0000BF58 D041                       		add.w	d1,d0
0000BF5A 6500                       		bcs.s	loc_BE9E
0000BF5C 60B4                       		bra.s	loc_BE4E
0000BF5E                            ; ===========================================================================
0000BF5E                            
0000BF5E                            loc_BE9A:
0000BF5E B045                       		cmp.w	d5,d0
0000BF60 62B0                       		bhi.s	loc_BE4E
0000BF62                            
0000BF62                            loc_BE9E:
0000BF62 361F                       		move.w	(sp)+,d3
0000BF64 7001                       		moveq	#1,d0
0000BF66 4E75                       		rts	
0000BF68                            ; End of function Obj32_MZBlock
0000BF68                            
0000BF68                            ; ===========================================================================
0000BF68                            ; ---------------------------------------------------------------------------
0000BF68                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BF68                            ; ---------------------------------------------------------------------------
0000BF68                            Map_obj32:
0000BF68                            	include "_maps\obj32.asm"
0000BF68                            ; ---------------------------------------------------------------------------
0000BF68                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BF68                            ; ---------------------------------------------------------------------------
0000BF68 0000                       		dc.w byte_BEAC-Map_obj32
0000BF6A 0000                       		dc.w byte_BEB7-Map_obj32
0000BF6C 0000                       		dc.w byte_BEC2-Map_obj32
0000BF6E 0000                       		dc.w byte_BEB7-Map_obj32
0000BF70 02                         byte_BEAC:	dc.b 2
0000BF71 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000BF76 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000BF7B 02                         byte_BEB7:	dc.b 2
0000BF7C F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000BF81 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000BF86 02                         byte_BEC2:	dc.b 2
0000BF87 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000BF8C F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000BF91 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000BF96                            		even
0000BF96                            		even
0000BF96                            
0000BF96                            ; ===========================================================================
0000BF96                            ; ---------------------------------------------------------------------------
0000BF96                            ; Object 33 - pushable blocks (MZ, LZ)
0000BF96                            ; ---------------------------------------------------------------------------
0000BF96                            
0000BF96                            Obj33:					; XREF: Obj_Index
0000BF96 7000                       		moveq	#0,d0
0000BF98 1028 0024                  		move.b	$24(a0),d0
0000BF9C 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000BFA0 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000BFA4                            ; ===========================================================================
0000BFA4 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000BFA6 0000                       		dc.w loc_BF6E-Obj33_Index
0000BFA8 0000                       		dc.w loc_C02C-Obj33_Index
0000BFAA                            
0000BFAA 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000BFAC 4001                       		dc.b $40, 1
0000BFAE                            ; ===========================================================================
0000BFAE                            
0000BFAE                            Obj33_Main:				; XREF: Obj33_Index
0000BFAE 5428 0024                  		addq.b	#2,$24(a0)
0000BFB2 117C 000F 0016             		move.b	#$F,$16(a0)
0000BFB8 117C 000F 0017             		move.b	#$F,$17(a0)
0000BFBE 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000BFC6 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000BFCC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000BFD2 6600                       		bne.s	loc_BF16
0000BFD4 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000BFDA                            
0000BFDA                            loc_BF16:
0000BFDA 117C 0004 0001             		move.b	#4,1(a0)
0000BFE0 117C 0003 0018             		move.b	#3,$18(a0)
0000BFE6 3168 0008 0034             		move.w	8(a0),$34(a0)
0000BFEC 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000BFF2 7000                       		moveq	#0,d0
0000BFF4 1028 0028                  		move.b	$28(a0),d0
0000BFF8 D040                       		add.w	d0,d0
0000BFFA 0240 000E                  		andi.w	#$E,d0
0000BFFE 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C002 115A 0019                  		move.b	(a2)+,$19(a0)
0000C006 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C00A 4A28 0028                  		tst.b	$28(a0)
0000C00E 6700                       		beq.s	Obj33_ChkGone
0000C010 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C016                            
0000C016                            Obj33_ChkGone:
0000C016 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C01A 7000                       		moveq	#0,d0
0000C01C 1028 0023                  		move.b	$23(a0),d0
0000C020 6700                       		beq.s	loc_BF6E
0000C022 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C028 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C02E 6600 0000                  		bne.w	DeleteObject
0000C032                            
0000C032                            loc_BF6E:				; XREF: Obj33_Index
0000C032 4A28 0032                  		tst.b	$32(a0)
0000C036 6600 0000                  		bne.w	loc_C046
0000C03A 7200                       		moveq	#0,d1
0000C03C 1228 0019                  		move.b	$19(a0),d1
0000C040 0641 000B                  		addi.w	#$B,d1
0000C044 343C 0010                  		move.w	#$10,d2
0000C048 363C 0011                  		move.w	#$11,d3
0000C04C 3828 0008                  		move.w	8(a0),d4
0000C050 6100 0000                  		bsr.w	loc_C186
0000C054 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C05A 6600                       		bne.s	loc_BFC6	; if not, branch
0000C05C 08A8 0007 0028             		bclr	#7,$28(a0)
0000C062 3028 0008                  		move.w	8(a0),d0
0000C066 0C40 0A20                  		cmpi.w	#$A20,d0
0000C06A 6500                       		bcs.s	loc_BFC6
0000C06C 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C070 6400                       		bcc.s	loc_BFC6
0000C072 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C076 0440 001C                  		subi.w	#$1C,d0
0000C07A 3140 000C                  		move.w	d0,$C(a0)
0000C07E 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C084 08E8 0007 0028             		bset	#7,$28(a0)
0000C08A                            
0000C08A                            loc_BFC6:
0000C08A 3028 0008                  		move.w	8(a0),d0
0000C08E 0240 FF80                  		andi.w	#$FF80,d0
0000C092 3238 F700                  		move.w	($FFFFF700).w,d1
0000C096 0441 0080                  		subi.w	#$80,d1
0000C09A 0241 FF80                  		andi.w	#$FF80,d1
0000C09E 9041                       		sub.w	d1,d0
0000C0A0 0C40 0280                  		cmpi.w	#$280,d0
0000C0A4 6200                       		bhi.s	loc_BFE6
0000C0A6 6000 0000                  		bra.w	DisplaySprite
0000C0AA                            ; ===========================================================================
0000C0AA                            
0000C0AA                            loc_BFE6:
0000C0AA 3028 0034                  		move.w	$34(a0),d0
0000C0AE 0240 FF80                  		andi.w	#$FF80,d0
0000C0B2 3238 F700                  		move.w	($FFFFF700).w,d1
0000C0B6 0441 0080                  		subi.w	#$80,d1
0000C0BA 0241 FF80                  		andi.w	#$FF80,d1
0000C0BE 9041                       		sub.w	d1,d0
0000C0C0 0C40 0280                  		cmpi.w	#$280,d0
0000C0C4 6200                       		bhi.s	loc_C016
0000C0C6 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C0CC 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C0D2 117C 0004 0024             		move.b	#4,$24(a0)
0000C0D8 6000                       		bra.s	loc_C02C
0000C0DA                            ; ===========================================================================
0000C0DA                            
0000C0DA                            loc_C016:
0000C0DA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C0DE 7000                       		moveq	#0,d0
0000C0E0 1028 0023                  		move.b	$23(a0),d0
0000C0E4 6700                       		beq.s	loc_C028
0000C0E6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C0EC                            
0000C0EC                            loc_C028:
0000C0EC 6000 0000                  		bra.w	DeleteObject
0000C0F0                            ; ===========================================================================
0000C0F0                            
0000C0F0                            loc_C02C:				; XREF: Obj33_Index
0000C0F0 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C0F4 6700                       		beq.s	locret_C044
0000C0F6 117C 0002 0024             		move.b	#2,$24(a0)
0000C0FC 4228 0032                  		clr.b	$32(a0)
0000C100 4268 0010                  		clr.w	$10(a0)
0000C104 4268 0012                  		clr.w	$12(a0)
0000C108                            
0000C108                            locret_C044:
0000C108 4E75                       		rts	
0000C10A                            ; ===========================================================================
0000C10A                            
0000C10A                            loc_C046:				; XREF: loc_BF6E
0000C10A 3F28 0008                  		move.w	8(a0),-(sp)
0000C10E 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C114 6400                       		bcc.s	loc_C056
0000C116 6100 0000                  		bsr.w	SpeedToPos
0000C11A                            
0000C11A                            loc_C056:
0000C11A 0828 0001 0022             		btst	#1,$22(a0)
0000C120 6700                       		beq.s	loc_C0A0
0000C122 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C128 4EB9 0000 0000             		jsr	ObjHitFloor
0000C12E 4A41                       		tst.w	d1
0000C130 6A00 0000                  		bpl.w	loc_C09E
0000C134 D368 000C                  		add.w	d1,$C(a0)
0000C138 4268 0012                  		clr.w	$12(a0)
0000C13C 08A8 0001 0022             		bclr	#1,$22(a0)
0000C142 3011                       		move.w	(a1),d0
0000C144 0240 03FF                  		andi.w	#$3FF,d0
0000C148 0C40 016A                  		cmpi.w	#$16A,d0
0000C14C 6500                       		bcs.s	loc_C09E
0000C14E 3028 0030                  		move.w	$30(a0),d0
0000C152 E640                       		asr.w	#3,d0
0000C154 3140 0010                  		move.w	d0,$10(a0)
0000C158 117C 0001 0032             		move.b	#1,$32(a0)
0000C15E 4268 000E                  		clr.w	$E(a0)
0000C162                            
0000C162                            loc_C09E:
0000C162 6000                       		bra.s	loc_C0E6
0000C164                            ; ===========================================================================
0000C164                            
0000C164                            loc_C0A0:
0000C164 4A68 0010                  		tst.w	$10(a0)
0000C168 6700 0000                  		beq.w	loc_C0D6
0000C16C 6B00                       		bmi.s	loc_C0BC
0000C16E 7600                       		moveq	#0,d3
0000C170 1628 0019                  		move.b	$19(a0),d3
0000C174 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C17A 4A41                       		tst.w	d1		; has block touched a wall?
0000C17C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C17E 6000                       		bra.s	loc_C0E6
0000C180                            ; ===========================================================================
0000C180                            
0000C180                            loc_C0BC:
0000C180 7600                       		moveq	#0,d3
0000C182 1628 0019                  		move.b	$19(a0),d3
0000C186 4643                       		not.w	d3
0000C188 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C18E 4A41                       		tst.w	d1		; has block touched a wall?
0000C190 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C192 6000                       		bra.s	loc_C0E6
0000C194                            ; ===========================================================================
0000C194                            
0000C194                            Obj33_StopPush:
0000C194 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C198 6000                       		bra.s	loc_C0E6
0000C19A                            ; ===========================================================================
0000C19A                            
0000C19A                            loc_C0D6:
0000C19A 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C1A2 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C1A8 6400                       		bcc.s	loc_C104
0000C1AA                            
0000C1AA                            loc_C0E6:
0000C1AA 7200                       		moveq	#0,d1
0000C1AC 1228 0019                  		move.b	$19(a0),d1
0000C1B0 0641 000B                  		addi.w	#$B,d1
0000C1B4 343C 0010                  		move.w	#$10,d2
0000C1B8 363C 0011                  		move.w	#$11,d3
0000C1BC 381F                       		move.w	(sp)+,d4
0000C1BE 6100 0000                  		bsr.w	loc_C186
0000C1C2 6100                       		bsr.s	Obj33_ChkLava
0000C1C4 6000 FEC4                  		bra.w	loc_BFC6
0000C1C8                            ; ===========================================================================
0000C1C8                            
0000C1C8                            loc_C104:
0000C1C8 381F                       		move.w	(sp)+,d4
0000C1CA 43F8 D000                  		lea	($FFFFD000).w,a1
0000C1CE 08A9 0003 0022             		bclr	#3,$22(a1)
0000C1D4 08A8 0003 0022             		bclr	#3,$22(a0)
0000C1DA 6000 FECE                  		bra.w	loc_BFE6
0000C1DE                            ; ===========================================================================
0000C1DE                            
0000C1DE                            Obj33_ChkLava:
0000C1DE 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C1E4 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C1E6 343C FFE0                  		move.w	#-$20,d2
0000C1EA 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C1F0 6700                       		beq.s	Obj33_LoadLava
0000C1F2 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C1F8 6700                       		beq.s	Obj33_LoadLava
0000C1FA 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C200 6700                       		beq.s	Obj33_LoadLava
0000C202 4E75                       		rts	
0000C204                            ; ===========================================================================
0000C204                            
0000C204                            Obj33_ChkLava2:
0000C204 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C20A 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C20C 343C 0020                  		move.w	#$20,d2
0000C210 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C216 6700                       		beq.s	Obj33_LoadLava
0000C218 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C21E 6700                       		beq.s	Obj33_LoadLava
0000C220                            
0000C220                            Obj33_NoLava:
0000C220 4E75                       		rts	
0000C222                            ; ===========================================================================
0000C222                            
0000C222                            Obj33_LoadLava:
0000C222 6100 0000                  		bsr.w	SingleObjLoad
0000C226 6600                       		bne.s	locret_C184
0000C228 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C22C 3368 0008 0008             		move.w	8(a0),8(a1)
0000C232 D569 0008                  		add.w	d2,8(a1)
0000C236 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C23C 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C242 2348 003C                  		move.l	a0,$3C(a1)
0000C246                            
0000C246                            locret_C184:
0000C246 4E75                       		rts	
0000C248                            ; ===========================================================================
0000C248                            
0000C248                            loc_C186:				; XREF: loc_BF6E
0000C248 1028 0025                  		move.b	$25(a0),d0
0000C24C 6700 0000                  		beq.w	loc_C218
0000C250 5500                       		subq.b	#2,d0
0000C252 6600                       		bne.s	loc_C1AA
0000C254 6100 B4A8                  		bsr.w	ExitPlatform
0000C258 0829 0003 0022             		btst	#3,$22(a1)
0000C25E 6600                       		bne.s	loc_C1A4
0000C260 4228 0025                  		clr.b	$25(a0)
0000C264 4E75                       		rts	
0000C266                            ; ===========================================================================
0000C266                            
0000C266                            loc_C1A4:
0000C266 3404                       		move.w	d4,d2
0000C268 6000 B9F2                  		bra.w	MvSonicOnPtfm
0000C26C                            ; ===========================================================================
0000C26C                            
0000C26C                            loc_C1AA:
0000C26C 5500                       		subq.b	#2,d0
0000C26E 6600                       		bne.s	loc_C1F2
0000C270 6100 0000                  		bsr.w	SpeedToPos
0000C274 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C27A 4EB9 0000 0000             		jsr	ObjHitFloor
0000C280 4A41                       		tst.w	d1
0000C282 6A00 0000                  		bpl.w	locret_C1F0
0000C286 D368 000C                  		add.w	d1,$C(a0)
0000C28A 4268 0012                  		clr.w	$12(a0)
0000C28E 4228 0025                  		clr.b	$25(a0)
0000C292 3011                       		move.w	(a1),d0
0000C294 0240 03FF                  		andi.w	#$3FF,d0
0000C298 0C40 016A                  		cmpi.w	#$16A,d0
0000C29C 6500                       		bcs.s	locret_C1F0
0000C29E 3028 0030                  		move.w	$30(a0),d0
0000C2A2 E640                       		asr.w	#3,d0
0000C2A4 3140 0010                  		move.w	d0,$10(a0)
0000C2A8 117C 0001 0032             		move.b	#1,$32(a0)
0000C2AE 4268 000E                  		clr.w	$E(a0)
0000C2B2                            
0000C2B2                            locret_C1F0:
0000C2B2 4E75                       		rts	
0000C2B4                            ; ===========================================================================
0000C2B4                            
0000C2B4                            loc_C1F2:
0000C2B4 6100 0000                  		bsr.w	SpeedToPos
0000C2B8 3028 0008                  		move.w	8(a0),d0
0000C2BC 0240 000C                  		andi.w	#$C,d0
0000C2C0 6600 0000                  		bne.w	locret_C2E4
0000C2C4 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C2CA 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C2D0 4268 0010                  		clr.w	$10(a0)
0000C2D4 5528 0025                  		subq.b	#2,$25(a0)
0000C2D8 4E75                       		rts	
0000C2DA                            ; ===========================================================================
0000C2DA                            
0000C2DA                            loc_C218:
0000C2DA 6100 0000                  		bsr.w	loc_FAC8
0000C2DE 4A44                       		tst.w	d4
0000C2E0 6700 0000                  		beq.w	locret_C2E4
0000C2E4 6B00 0000                  		bmi.w	locret_C2E4
0000C2E8 4A28 0032                  		tst.b	$32(a0)
0000C2EC 6700                       		beq.s	loc_C230
0000C2EE 6000 0000                  		bra.w	locret_C2E4
0000C2F2                            ; ===========================================================================
0000C2F2                            
0000C2F2                            loc_C230:
0000C2F2 4A40                       		tst.w	d0
0000C2F4 6700 0000                  		beq.w	locret_C2E4
0000C2F8 6B00                       		bmi.s	loc_C268
0000C2FA 0829 0000 0022             		btst	#0,$22(a1)
0000C300 6600 0000                  		bne.w	locret_C2E4
0000C304 3F00                       		move.w	d0,-(sp)
0000C306 7600                       		moveq	#0,d3
0000C308 1628 0019                  		move.b	$19(a0),d3
0000C30C 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C312 301F                       		move.w	(sp)+,d0
0000C314 4A41                       		tst.w	d1
0000C316 6B00 0000                  		bmi.w	locret_C2E4
0000C31A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C322 7001                       		moveq	#1,d0
0000C324 323C 0040                  		move.w	#$40,d1
0000C328 6000                       		bra.s	loc_C294
0000C32A                            ; ===========================================================================
0000C32A                            
0000C32A                            loc_C268:
0000C32A 0829 0000 0022             		btst	#0,$22(a1)
0000C330 6700                       		beq.s	locret_C2E4
0000C332 3F00                       		move.w	d0,-(sp)
0000C334 7600                       		moveq	#0,d3
0000C336 1628 0019                  		move.b	$19(a0),d3
0000C33A 4643                       		not.w	d3
0000C33C 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C342 301F                       		move.w	(sp)+,d0
0000C344 4A41                       		tst.w	d1
0000C346 6B00                       		bmi.s	locret_C2E4
0000C348 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C350 70FF                       		moveq	#-1,d0
0000C352 323C FFC0                  		move.w	#-$40,d1
0000C356                            
0000C356                            loc_C294:
0000C356 43F8 D000                  		lea	($FFFFD000).w,a1
0000C35A D169 0008                  		add.w	d0,8(a1)
0000C35E 3341 0014                  		move.w	d1,$14(a1)
0000C362 337C 0000 0010             		move.w	#0,$10(a1)
0000C368 3F00                       		move.w	d0,-(sp)
0000C36A 303C 00A7                  		move.w	#$A7,d0
0000C36E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C374 301F                       		move.w	(sp)+,d0
0000C376 4A28 0028                  		tst.b	$28(a0)
0000C37A 6B00                       		bmi.s	locret_C2E4
0000C37C 3F00                       		move.w	d0,-(sp)
0000C37E 4EB9 0000 0000             		jsr	ObjHitFloor
0000C384 301F                       		move.w	(sp)+,d0
0000C386 0C41 0004                  		cmpi.w	#4,d1
0000C38A 6F00                       		ble.s	loc_C2E0
0000C38C 317C 0400 0010             		move.w	#$400,$10(a0)
0000C392 4A40                       		tst.w	d0
0000C394 6A00                       		bpl.s	loc_C2D8
0000C396 4468 0010                  		neg.w	$10(a0)
0000C39A                            
0000C39A                            loc_C2D8:
0000C39A 117C 0006 0025             		move.b	#6,$25(a0)
0000C3A0 6000                       		bra.s	locret_C2E4
0000C3A2                            ; ===========================================================================
0000C3A2                            
0000C3A2                            loc_C2E0:
0000C3A2 D368 000C                  		add.w	d1,$C(a0)
0000C3A6                            
0000C3A6                            locret_C2E4:
0000C3A6 4E75                       		rts	
0000C3A8                            ; ===========================================================================
0000C3A8                            ; ---------------------------------------------------------------------------
0000C3A8                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C3A8                            ; ---------------------------------------------------------------------------
0000C3A8                            Map_obj33:
0000C3A8                            	include "_maps\obj33.asm"
0000C3A8                            ; ---------------------------------------------------------------------------
0000C3A8                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C3A8                            ; ---------------------------------------------------------------------------
0000C3A8 0000                       		dc.w byte_C2EA-Map_obj33
0000C3AA 0000                       		dc.w byte_C2F0-Map_obj33
0000C3AC 01                         byte_C2EA:	dc.b 1
0000C3AD F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C3B2 04                         byte_C2F0:	dc.b 4
0000C3B3 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C3B8 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C3BD F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C3C2 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C3C8 00                         		even
0000C3C8 00                         		even
0000C3C8                            
0000C3C8                            ; ===========================================================================
0000C3C8                            ; ---------------------------------------------------------------------------
0000C3C8                            ; Object 34 - zone title cards
0000C3C8                            ; ---------------------------------------------------------------------------
0000C3C8                            
0000C3C8                            Obj34:					; XREF: Obj_Index
0000C3C8 7000                       		moveq	#0,d0
0000C3CA 1028 0024                  		move.b	$24(a0),d0
0000C3CE 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C3D2 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C3D6                            ; ===========================================================================
0000C3D6 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C3D8 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C3DA 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C3DC 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C3DE                            ; ===========================================================================
0000C3DE                            
0000C3DE                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C3DE 2248                       		movea.l	a0,a1
0000C3E0 7000                       		moveq	#0,d0
0000C3E2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C3E6 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C3EC 6600                       		bne.s	Obj34_CheckFZ
0000C3EE 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C3F0                            
0000C3F0                            Obj34_CheckFZ:
0000C3F0 3400                       		move.w	d0,d2
0000C3F2 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C3F8 6600                       		bne.s	Obj34_LoadConfig
0000C3FA 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C3FC 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C3FE                            
0000C3FE                            Obj34_LoadConfig:
0000C3FE 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C404 E948                       		lsl.w	#4,d0
0000C406 D6C0                       		adda.w	d0,a3
0000C408 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C40E 7203                       		moveq	#3,d1
0000C410                            
0000C410                            Obj34_Loop:
0000C410 12BC 0034                  		move.b	#$34,0(a1)
0000C414 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C418 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C41C 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C420 335A 000A                  		move.w	(a2)+,$A(a1)
0000C424 135A 0024                  		move.b	(a2)+,$24(a1)
0000C428 101A                       		move.b	(a2)+,d0
0000C42A 6600                       		bne.s	Obj34_ActNumber
0000C42C 1002                       		move.b	d2,d0
0000C42E                            
0000C42E                            Obj34_ActNumber:
0000C42E 0C00 0007                  		cmpi.b	#7,d0
0000C432 6600                       		bne.s	Obj34_MakeSprite
0000C434 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C438 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C43E 6600                       		bne.s	Obj34_MakeSprite
0000C440 5300                       		subq.b	#1,d0
0000C442                            
0000C442                            Obj34_MakeSprite:
0000C442 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C446 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C44E 337C 8580 0002             		move.w	#$8580,2(a1)
0000C454 137C 0078 0019             		move.b	#$78,$19(a1)
0000C45A 137C 0000 0001             		move.b	#0,1(a1)
0000C460 137C 0000 0018             		move.b	#0,$18(a1)
0000C466 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C46C 43E9 0040                  		lea	$40(a1),a1	; next object
0000C470 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C474                            
0000C474                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C474 7210                       		moveq	#$10,d1		; set horizontal speed
0000C476 3028 0030                  		move.w	$30(a0),d0
0000C47A B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C47E 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C480 6C00                       		bge.s	Obj34_Move
0000C482 4441                       		neg.w	d1
0000C484                            
0000C484                            Obj34_Move:
0000C484 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C488                            
0000C488                            loc_C3C8:
0000C488 3028 0008                  		move.w	8(a0),d0
0000C48C 6B00                       		bmi.s	locret_C3D8
0000C48E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C492 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C494 6000 0000                  		bra.w	DisplaySprite
0000C498                            ; ===========================================================================
0000C498                            
0000C498                            locret_C3D8:
0000C498 4E75                       		rts	
0000C49A                            ; ===========================================================================
0000C49A                            
0000C49A                            Obj34_Wait:				; XREF: Obj34_Index
0000C49A 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C49E 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C4A0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C4A4 6000 0000                  		bra.w	DisplaySprite
0000C4A8                            ; ===========================================================================
0000C4A8                            
0000C4A8                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C4A8 4A28 0001                  		tst.b	1(a0)
0000C4AC 6A00                       		bpl.s	Obj34_ChangeArt
0000C4AE 7220                       		moveq	#$20,d1
0000C4B0 3028 0032                  		move.w	$32(a0),d0
0000C4B4 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C4B8 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C4BA 6C00                       		bge.s	Obj34_Move2
0000C4BC 4441                       		neg.w	d1
0000C4BE                            
0000C4BE                            Obj34_Move2:
0000C4BE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C4C2 3028 0008                  		move.w	8(a0),d0
0000C4C6 6B00                       		bmi.s	locret_C412
0000C4C8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C4CC 6400                       		bcc.s	locret_C412	; if yes, branch
0000C4CE 6000 0000                  		bra.w	DisplaySprite
0000C4D2                            ; ===========================================================================
0000C4D2                            
0000C4D2                            locret_C412:
0000C4D2 4E75                       		rts	
0000C4D4                            ; ===========================================================================
0000C4D4                            
0000C4D4                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C4D4 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C4DA 6600                       		bne.s	Obj34_Delete
0000C4DC 7002                       		moveq	#2,d0
0000C4DE 4EB9 0000 1580             		jsr	(LoadPLC).l	; load explosion patterns
0000C4E4 7000                       		moveq	#0,d0
0000C4E6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C4EA 0640 0015                  		addi.w	#$15,d0
0000C4EE 4EB9 0000 1580             		jsr	(LoadPLC).l	; load animal patterns
0000C4F4                            
0000C4F4                            Obj34_Delete:
0000C4F4 6000 0000                  		bra.w	DeleteObject
0000C4F8                            ; ===========================================================================
0000C4F8 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C4FA 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C4FC 00E4                       		dc.w $E4
0000C4FE 0206                       		dc.b 2,	6
0000C500 00EA                       		dc.w $EA
0000C502 0207                       		dc.b 2,	7
0000C504 00E0                       		dc.w $E0
0000C506 020A                       		dc.b 2,	$A
0000C508                            ; ---------------------------------------------------------------------------
0000C508                            ; Title	card configuration data
0000C508                            ; Format:
0000C508                            ; 4 bytes per item (YYYY XXXX)
0000C508                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C508                            ; ---------------------------------------------------------------------------
0000C508 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C518 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C528 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C538 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C548 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C558 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C568 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C578                            ; ===========================================================================
0000C578                            ; ---------------------------------------------------------------------------
0000C578                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C578                            ; ---------------------------------------------------------------------------
0000C578                            
0000C578                            Obj39:					; XREF: Obj_Index
0000C578 7000                       		moveq	#0,d0
0000C57A 1028 0024                  		move.b	$24(a0),d0
0000C57E 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C582 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C586                            ; ===========================================================================
0000C586 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C588 0000                       		dc.w loc_C50C-Obj39_Index
0000C58A 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C58C                            ; ===========================================================================
0000C58C                            
0000C58C                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C58C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C590 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C592 4E75                       		rts	
0000C594                            ; ===========================================================================
0000C594                            
0000C594                            Obj39_Main:
0000C594 5428 0024                  		addq.b	#2,$24(a0)
0000C598 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C59E 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C5A4 6700                       		beq.s	loc_C4EC	; if not, branch
0000C5A6 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C5AC                            
0000C5AC                            loc_C4EC:
0000C5AC 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C5B2 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C5BA 317C 855E 0002             		move.w	#$855E,2(a0)
0000C5C0 117C 0000 0001             		move.b	#0,1(a0)
0000C5C6 117C 0000 0018             		move.b	#0,$18(a0)
0000C5CC                            
0000C5CC                            loc_C50C:				; XREF: Obj39_Index
0000C5CC 7210                       		moveq	#$10,d1		; set horizontal speed
0000C5CE 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C5D4 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C5D6 6500                       		bcs.s	Obj39_Move
0000C5D8 4441                       		neg.w	d1
0000C5DA                            
0000C5DA                            Obj39_Move:
0000C5DA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C5DE 6000 0000                  		bra.w	DisplaySprite
0000C5E2                            ; ===========================================================================
0000C5E2                            
0000C5E2                            Obj39_SetWait:				; XREF: Obj39_Main
0000C5E2 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C5E8 5428 0024                  		addq.b	#2,$24(a0)
0000C5EC 4E75                       		rts	
0000C5EE                            ; ===========================================================================
0000C5EE                            
0000C5EE                            Obj39_Wait:				; XREF: Obj39_Index
0000C5EE 1038 F605                  		move.b	($FFFFF605).w,d0
0000C5F2 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C5F6 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C5F8 0828 0000 001A             		btst	#0,$1A(a0)
0000C5FE 6600                       		bne.s	Obj39_Display
0000C600 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000C604 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000C606 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C60A 6000 0000                  		bra.w	DisplaySprite
0000C60E                            ; ===========================================================================
0000C60E                            
0000C60E                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000C60E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000C612 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000C614 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000C61A 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000C61E 6600                       		bne.s	Obj39_Display	; if yes, branch
0000C620 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000C626 6000                       		bra.s	Obj39_Display
0000C628                            ; ===========================================================================
0000C628                            
0000C628                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000C628 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C62E                            
0000C62E                            Obj39_Display:				; XREF: Obj39_ChgMode
0000C62E 6000 0000                  		bra.w	DisplaySprite
0000C632                            ; ===========================================================================
0000C632                            ; ---------------------------------------------------------------------------
0000C632                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000C632                            ; ---------------------------------------------------------------------------
0000C632                            
0000C632                            Obj3A:					; XREF: Obj_Index
0000C632 7000                       		moveq	#0,d0
0000C634 1028 0024                  		move.b	$24(a0),d0
0000C638 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000C63C 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000C640                            ; ===========================================================================
0000C640 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000C642 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000C644 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C646 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000C648 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C64A 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000C64C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C64E 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000C650 0000                       		dc.w loc_C766-Obj3A_Index
0000C652                            ; ===========================================================================
0000C652                            
0000C652                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000C652 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C656 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000C658 4E75                       		rts	
0000C65A                            ; ===========================================================================
0000C65A                            
0000C65A                            Obj3A_Main:
0000C65A 2248                       		movea.l	a0,a1
0000C65C 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000C662 7206                       		moveq	#6,d1
0000C664                            
0000C664                            Obj3A_Loop:
0000C664 12BC 003A                  		move.b	#$3A,0(a1)
0000C668 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000C66C 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000C670 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C674 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C678 135A 0024                  		move.b	(a2)+,$24(a1)
0000C67C 101A                       		move.b	(a2)+,d0
0000C67E 0C00 0006                  		cmpi.b	#6,d0
0000C682 6600                       		bne.s	loc_C5CA
0000C684 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000C688                            
0000C688                            loc_C5CA:
0000C688 1340 001A                  		move.b	d0,$1A(a1)
0000C68C 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000C694 337C 8580 0002             		move.w	#$8580,2(a1)
0000C69A 137C 0000 0001             		move.b	#0,1(a1)
0000C6A0 43E9 0040                  		lea	$40(a1),a1
0000C6A4 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000C6A8                            
0000C6A8                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000C6A8 7210                       		moveq	#$10,d1		; set horizontal speed
0000C6AA 3028 0030                  		move.w	$30(a0),d0
0000C6AE B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C6B2 6700                       		beq.s	loc_C61A	; if yes, branch
0000C6B4 6C00                       		bge.s	Obj3A_Move
0000C6B6 4441                       		neg.w	d1
0000C6B8                            
0000C6B8                            Obj3A_Move:
0000C6B8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C6BC                            
0000C6BC                            loc_C5FE:				; XREF: loc_C61A
0000C6BC 3028 0008                  		move.w	8(a0),d0
0000C6C0 6B00                       		bmi.s	locret_C60E
0000C6C2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C6C6 6400                       		bcc.s	locret_C60E	; if yes, branch
0000C6C8 6000 0000                  		bra.w	DisplaySprite
0000C6CC                            ; ===========================================================================
0000C6CC                            
0000C6CC                            locret_C60E:
0000C6CC 4E75                       		rts	
0000C6CE                            ; ===========================================================================
0000C6CE                            
0000C6CE                            loc_C610:				; XREF: loc_C61A
0000C6CE 117C 000E 0024             		move.b	#$E,$24(a0)
0000C6D4 6000 0000                  		bra.w	Obj3A_ChkPos2
0000C6D8                            ; ===========================================================================
0000C6D8                            
0000C6D8                            loc_C61A:				; XREF: Obj3A_ChkPos
0000C6D8 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000C6DE 67EE                       		beq.s	loc_C610
0000C6E0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C6E6 66D4                       		bne.s	loc_C5FE
0000C6E8 5428 0024                  		addq.b	#2,$24(a0)
0000C6EC 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C6F2                            
0000C6F2                            Obj3A_Wait:				; XREF: Obj3A_Index
0000C6F2 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C6F6 6600                       		bne.s	Obj3A_Display
0000C6F8 5428 0024                  		addq.b	#2,$24(a0)
0000C6FC                            
0000C6FC                            Obj3A_Display:
0000C6FC 6000 0000                  		bra.w	DisplaySprite
0000C700                            ; ===========================================================================
0000C700                            
0000C700                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000C700 6100 0000                  		bsr.w	DisplaySprite
0000C704 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000C70A 7000                       		moveq	#0,d0
0000C70C 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000C710 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000C712 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C716 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000C71C                            
0000C71C                            Obj3A_RingBonus:
0000C71C 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C720 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000C722 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C726 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C72C                            
0000C72C                            Obj3A_ChkBonus:
0000C72C 4A40                       		tst.w	d0		; is there any bonus?
0000C72E 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000C730 303C 00C5                  		move.w	#$C5,d0
0000C734 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C73A 5428 0024                  		addq.b	#2,$24(a0)
0000C73E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000C744 6600                       		bne.s	Obj3A_SetDelay
0000C746 5828 0024                  		addq.b	#4,$24(a0)
0000C74A                            
0000C74A                            Obj3A_SetDelay:
0000C74A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C750                            
0000C750                            locret_C692:
0000C750 4E75                       		rts	
0000C752                            ; ===========================================================================
0000C752                            
0000C752                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000C752 4EB9 0000 0000             		jsr	AddPoints
0000C758 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C75C 0200 0003                  		andi.b	#3,d0
0000C760 66EE                       		bne.s	locret_C692
0000C762 303C 00CD                  		move.w	#$CD,d0
0000C766 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C76C                            ; ===========================================================================
0000C76C                            
0000C76C                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000C76C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C770 0240 0007                  		andi.w	#7,d0
0000C774 E748                       		lsl.w	#3,d0
0000C776 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000C77A 0241 0003                  		andi.w	#3,d1
0000C77E D241                       		add.w	d1,d1
0000C780 D041                       		add.w	d1,d0
0000C782 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000C786 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000C78A 4A40                       		tst.w	d0
0000C78C 6600                       		bne.s	Obj3A_ChkSS
0000C78E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000C794 6000                       		bra.s	Obj3A_Display2
0000C796                            ; ===========================================================================
0000C796                            
0000C796                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000C796 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000C79A 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000C79E 6700                       		beq.s	loc_C6EA	; if not, branch
0000C7A0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000C7A6 6000                       		bra.s	Obj3A_Display2
0000C7A8                            ; ===========================================================================
0000C7A8                            
0000C7A8                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000C7A8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C7AE                            
0000C7AE                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000C7AE 6000 0000                  		bra.w	DisplaySprite
0000C7B2                            ; ===========================================================================
0000C7B2                            ; ---------------------------------------------------------------------------
0000C7B2                            ; Level	order array
0000C7B2                            ; ---------------------------------------------------------------------------
0000C7B2                            LevelOrder:	incbin	misc\lvl_ord.bin
0000C7E2                            		even
0000C7E2                            ; ===========================================================================
0000C7E2                            
0000C7E2                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000C7E2 7220                       		moveq	#$20,d1		; set horizontal speed
0000C7E4 3028 0032                  		move.w	$32(a0),d0
0000C7E8 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000C7EC 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000C7EE 6C00                       		bge.s	Obj3A_Move2
0000C7F0 4441                       		neg.w	d1
0000C7F2                            
0000C7F2                            Obj3A_Move2:
0000C7F2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C7F6 3028 0008                  		move.w	8(a0),d0
0000C7FA 6B00                       		bmi.s	locret_C748
0000C7FC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C800 6400                       		bcc.s	locret_C748	; if yes, branch
0000C802 6000 0000                  		bra.w	DisplaySprite
0000C806                            ; ===========================================================================
0000C806                            
0000C806                            locret_C748:
0000C806 4E75                       		rts	
0000C808                            ; ===========================================================================
0000C808                            
0000C808                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000C808 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C80E 6600 0000                  		bne.w	DeleteObject
0000C812 5428 0024                  		addq.b	#2,$24(a0)
0000C816 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000C81A 303C 008D                  		move.w	#$8D,d0
0000C81E 4EF9 0000 1396             		jmp	(PlaySound).l	; play FZ music
0000C824                            ; ===========================================================================
0000C824                            
0000C824                            loc_C766:				; XREF: Obj3A_Index
0000C824 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000C828 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000C82E 6700 0000                  		beq.w	DeleteObject
0000C832 4E75                       		rts	
0000C834                            ; ===========================================================================
0000C834 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000C83A 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000C83C FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000C842 0201                       		dc.b 2,	1
0000C844 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000C84A 0206                       		dc.b 2,	6
0000C84C 0520 0120 00EC             		dc.w $520, $120, $EC
0000C852 0202                       		dc.b 2,	2
0000C854 0540 0120 00FC             		dc.w $540, $120, $FC
0000C85A 0203                       		dc.b 2,	3
0000C85C 0560 0120 010C             		dc.w $560, $120, $10C
0000C862 0204                       		dc.b 2,	4
0000C864 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000C86A 0205                       		dc.b 2,	5
0000C86C                            ; ===========================================================================
0000C86C                            ; ---------------------------------------------------------------------------
0000C86C                            ; Object 7E - special stage results screen
0000C86C                            ; ---------------------------------------------------------------------------
0000C86C                            
0000C86C                            Obj7E:					; XREF: Obj_Index
0000C86C 7000                       		moveq	#0,d0
0000C86E 1028 0024                  		move.b	$24(a0),d0
0000C872 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000C876 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000C87A                            ; ===========================================================================
0000C87A 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000C87C 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000C87E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C880 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000C882 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C884 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C886 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C888 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000C88A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C88C 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C88E 0000                       		dc.w loc_C91A-Obj7E_Index
0000C890                            ; ===========================================================================
0000C890                            
0000C890                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000C890 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C894 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000C896 4E75                       		rts	
0000C898                            ; ===========================================================================
0000C898                            
0000C898                            Obj7E_Main:
0000C898 2248                       		movea.l	a0,a1
0000C89A 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000C8A0 7203                       		moveq	#3,d1
0000C8A2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000C8A8 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000C8AA 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000C8AC                            
0000C8AC                            Obj7E_Loop:
0000C8AC 12BC 007E                  		move.b	#$7E,0(a1)
0000C8B0 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000C8B4 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C8B8 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C8BC 135A 0024                  		move.b	(a2)+,$24(a1)
0000C8C0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C8C4 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000C8CC 337C 8580 0002             		move.w	#$8580,2(a1)
0000C8D2 137C 0000 0001             		move.b	#0,1(a1)
0000C8D8 43E9 0040                  		lea	$40(a1),a1
0000C8DC 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000C8E0                            
0000C8E0 7007                       		moveq	#7,d0
0000C8E2 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000C8E6 6700                       		beq.s	loc_C842
0000C8E8 7000                       		moveq	#0,d0
0000C8EA 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000C8EE 6600                       		bne.s	loc_C842	; if not, branch
0000C8F0 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000C8F2 317C 0018 0008             		move.w	#$18,8(a0)
0000C8F8 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000C8FE                            
0000C8FE                            loc_C842:
0000C8FE 1140 001A                  		move.b	d0,$1A(a0)
0000C902                            
0000C902                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000C902 7210                       		moveq	#$10,d1		; set horizontal speed
0000C904 3028 0030                  		move.w	$30(a0),d0
0000C908 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C90C 6700                       		beq.s	loc_C86C	; if yes, branch
0000C90E 6C00                       		bge.s	Obj7E_Move
0000C910 4441                       		neg.w	d1
0000C912                            
0000C912                            Obj7E_Move:
0000C912 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C916                            
0000C916                            loc_C85A:				; XREF: loc_C86C
0000C916 3028 0008                  		move.w	8(a0),d0
0000C91A 6B00                       		bmi.s	locret_C86A
0000C91C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C920 6400                       		bcc.s	locret_C86A	; if yes, branch
0000C922 6000 0000                  		bra.w	DisplaySprite
0000C926                            ; ===========================================================================
0000C926                            
0000C926                            locret_C86A:
0000C926 4E75                       		rts	
0000C928                            ; ===========================================================================
0000C928                            
0000C928                            loc_C86C:				; XREF: Obj7E_ChkPos
0000C928 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C92E 66E6                       		bne.s	loc_C85A
0000C930 5428 0024                  		addq.b	#2,$24(a0)
0000C934 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C93A 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000C940                            
0000C940                            Obj7E_Wait:				; XREF: Obj7E_Index
0000C940 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C944 6600                       		bne.s	Obj7E_Display
0000C946 5428 0024                  		addq.b	#2,$24(a0)
0000C94A                            
0000C94A                            Obj7E_Display:
0000C94A 6000 0000                  		bra.w	DisplaySprite
0000C94E                            ; ===========================================================================
0000C94E                            
0000C94E                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000C94E 6100 0000                  		bsr.w	DisplaySprite
0000C952 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000C958 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C95C 6700                       		beq.s	loc_C8C4	; if yes, branch
0000C95E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C964 700A                       		moveq	#10,d0		; add 10 to score
0000C966 4EB9 0000 0000             		jsr	AddPoints
0000C96C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C970 0200 0003                  		andi.b	#3,d0
0000C974 6600                       		bne.s	locret_C8EA
0000C976 303C 00CD                  		move.w	#$CD,d0
0000C97A 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C980                            ; ===========================================================================
0000C980                            
0000C980                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000C980 303C 00C5                  		move.w	#$C5,d0
0000C984 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C98A 5428 0024                  		addq.b	#2,$24(a0)
0000C98E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C994 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000C99A 6500                       		bcs.s	locret_C8EA	; if not, branch
0000C99C 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000C9A2 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000C9A6                            
0000C9A6                            locret_C8EA:
0000C9A6 4E75                       		rts	
0000C9A8                            ; ===========================================================================
0000C9A8                            
0000C9A8                            Obj7E_Exit:				; XREF: Obj7E_Index
0000C9A8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C9AE 6000 0000                  		bra.w	DisplaySprite
0000C9B2                            ; ===========================================================================
0000C9B2                            
0000C9B2                            Obj7E_Continue:				; XREF: Obj7E_Index
0000C9B2 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000C9B8 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000C9BE 303C 00BF                  		move.w	#$BF,d0
0000C9C2 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play continues music
0000C9C8 5428 0024                  		addq.b	#2,$24(a0)
0000C9CC 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000C9D2 6000 0000                  		bra.w	DisplaySprite
0000C9D6                            ; ===========================================================================
0000C9D6                            
0000C9D6                            loc_C91A:				; XREF: Obj7E_Index
0000C9D6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C9DA 0200 000F                  		andi.b	#$F,d0
0000C9DE 6600                       		bne.s	Obj7E_Display2
0000C9E0 0868 0000 001A             		bchg	#0,$1A(a0)
0000C9E6                            
0000C9E6                            Obj7E_Display2:
0000C9E6 6000 0000                  		bra.w	DisplaySprite
0000C9EA                            ; ===========================================================================
0000C9EA 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000C9F0 0200                       		dc.b 2,	0		; rountine number, frame number
0000C9F2 0320 0120 0118             		dc.w $320, $120, $118
0000C9F8 0201                       		dc.b 2,	1
0000C9FA 0360 0120 0128             		dc.w $360, $120, $128
0000CA00 0202                       		dc.b 2,	2
0000CA02 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CA08 0203                       		dc.b 2,	3
0000CA0A 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CA10 0206                       		dc.b 2,	6
0000CA12                            ; ===========================================================================
0000CA12                            ; ---------------------------------------------------------------------------
0000CA12                            ; Object 7F - chaos emeralds from the special stage results screen
0000CA12                            ; ---------------------------------------------------------------------------
0000CA12                            
0000CA12                            Obj7F:					; XREF: Obj_Index
0000CA12 7000                       		moveq	#0,d0
0000CA14 1028 0024                  		move.b	$24(a0),d0
0000CA18 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CA1C 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CA20                            ; ===========================================================================
0000CA20 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CA22 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CA24                            
0000CA24                            ; ---------------------------------------------------------------------------
0000CA24                            ; X-axis positions for chaos emeralds
0000CA24                            ; ---------------------------------------------------------------------------
0000CA24 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CA30                            ; ===========================================================================
0000CA30                            
0000CA30                            Obj7F_Main:				; XREF: Obj7F_Index
0000CA30 2248                       		movea.l	a0,a1
0000CA32 45F9 0000 CA24             		lea	(Obj7F_PosData).l,a2
0000CA38 7400                       		moveq	#0,d2
0000CA3A 7200                       		moveq	#0,d1
0000CA3C 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CA40 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CA42 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CA46                            
0000CA46                            Obj7F_Loop:
0000CA46 12BC 007F                  		move.b	#$7F,0(a1)
0000CA4A 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CA4E 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CA54 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CA58 1633 2000                  		move.b	(a3,d2.w),d3
0000CA5C 1343 001A                  		move.b	d3,$1A(a1)
0000CA60 1343 001C                  		move.b	d3,$1C(a1)
0000CA64 5202                       		addq.b	#1,d2
0000CA66 5429 0024                  		addq.b	#2,$24(a1)
0000CA6A 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CA72 337C 8541 0002             		move.w	#$8541,2(a1)
0000CA78 137C 0000 0001             		move.b	#0,1(a1)
0000CA7E 43E9 0040                  		lea	$40(a1),a1	; next object
0000CA82 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CA86                            
0000CA86                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CA86 1028 001A                  		move.b	$1A(a0),d0
0000CA8A 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CA90 0C00 0006                  		cmpi.b	#6,d0
0000CA94 6600                       		bne.s	Obj7F_Display
0000CA96 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CA9C                            
0000CA9C                            Obj7F_Display:
0000CA9C 6000 0000                  		bra.w	DisplaySprite
0000CAA0                            ; ===========================================================================
0000CAA0                            ; ---------------------------------------------------------------------------
0000CAA0                            ; Sprite mappings - zone title cards
0000CAA0                            ; ---------------------------------------------------------------------------
0000CAA0 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CAA2 0000                       		dc.w byte_CA2C-Map_obj34
0000CAA4 0000                       		dc.w byte_CA5A-Map_obj34
0000CAA6 0000                       		dc.w byte_CA7A-Map_obj34
0000CAA8 0000                       		dc.w byte_CAA8-Map_obj34
0000CAAA 0000                       		dc.w byte_CADC-Map_obj34
0000CAAC 0000                       		dc.w byte_CB10-Map_obj34
0000CAAE 0000                       		dc.w byte_CB26-Map_obj34
0000CAB0 0000                       		dc.w byte_CB31-Map_obj34
0000CAB2 0000                       		dc.w byte_CB3C-Map_obj34
0000CAB4 0000                       		dc.w byte_CB47-Map_obj34
0000CAB6 0000                       		dc.w byte_CB8A-Map_obj34
0000CAB8 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CAB9 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CABE F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CAC3 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CAC8 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CACD F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CAD2 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CAD7 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CADC F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CAE1 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CAE6 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CAEB F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CAF0 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CAF5 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CAF6 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CAFB F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CB00 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CB05 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CB0A F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CB0F F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CB14 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CB19 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CB1E F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CB23 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CB28 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CB2D F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CB32 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CB37 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CB3C F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CB41 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CB46 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CB4B F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CB50 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CB55 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CB5A F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CB5F F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CB64 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CB65 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CB6A F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CB6F F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CB74 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CB79 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000CB7E 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000CB7F F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000CB84 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000CB89 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000CB8E F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000CB93 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000CB98 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000CB9D F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000CBA2 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000CBA7 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000CBAC F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000CBB1 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000CBB6 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000CBBB F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000CBC0 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000CBC5 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000CBCA F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000CBCF F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000CBD4 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000CBD5 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000CBDA F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000CBDF F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000CBE4 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000CBE9 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000CBEE F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000CBF3 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000CBF8 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000CBFD F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000CC02 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000CC07 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000CC0C F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000CC11 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000CC16 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000CC1B F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000CC20 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000CC25 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000CC2A F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000CC2F F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000CC34 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000CC39 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000CC3E 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000CC3F F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000CC44 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000CC49 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000CC4E F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000CC53 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000CC58 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CC5D F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000CC62 04                         byte_CB10:	dc.b 4			; ZONE
0000CC63 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000CC68 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000CC6D F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000CC72 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CC77 00                         		dc.b 0
0000CC78 02                         byte_CB26:	dc.b 2			; ACT 1
0000CC79 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CC7E F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000CC83 02                         byte_CB31:	dc.b 2			; ACT 2
0000CC84 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CC89 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000CC8E 02                         byte_CB3C:	dc.b 2			; ACT 3
0000CC8F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CC94 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000CC99 0D                         byte_CB47:	dc.b $D			; Oval
0000CC9A E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000CC9F E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000CCA4 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000CCA9 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000CCAE 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000CCB3 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000CCB8 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000CCBD FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000CCC2 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000CCC7 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000CCCC FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000CCD1 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000CCD6 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000CCDB 00                         		dc.b 0
0000CCDC 05                         byte_CB8A:	dc.b 5			; FINAL
0000CCDD F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000CCE2 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000CCE7 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000CCEC F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000CCF1 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000CCF6                            		even
0000CCF6                            ; ---------------------------------------------------------------------------
0000CCF6                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CCF6                            ; ---------------------------------------------------------------------------
0000CCF6                            Map_obj39:
0000CCF6                            	include "_maps\obj39.asm"
0000CCF6                            ; ---------------------------------------------------------------------------
0000CCF6                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CCF6                            ; ---------------------------------------------------------------------------
0000CCF6 0000                       		dc.w byte_CBAC-Map_obj39
0000CCF8 0000                       		dc.w byte_CBB7-Map_obj39
0000CCFA 0000                       		dc.w byte_CBC2-Map_obj39
0000CCFC 0000                       		dc.w byte_CBCD-Map_obj39
0000CCFE 02                         byte_CBAC:	dc.b 2
0000CCFF F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000CD04 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000CD09 02                         byte_CBB7:	dc.b 2
0000CD0A F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000CD0F F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000CD14 02                         byte_CBC2:	dc.b 2
0000CD15 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000CD1A F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000CD1F 02                         byte_CBCD:	dc.b 2
0000CD20 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000CD25 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000CD2A                            		even
0000CD2A                            		even
0000CD2A                            
0000CD2A                            ; ---------------------------------------------------------------------------
0000CD2A                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000CD2A                            ; ---------------------------------------------------------------------------
0000CD2A 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000CD2C 0000                       		dc.w byte_CC13-Map_obj3A
0000CD2E 0000                       		dc.w byte_CC32-Map_obj3A
0000CD30 0000                       		dc.w byte_CC51-Map_obj3A
0000CD32 0000                       		dc.w byte_CC75-Map_obj3A
0000CD34 FF6F                       		dc.w byte_CB47-Map_obj3A
0000CD36 FF4E                       		dc.w byte_CB26-Map_obj3A
0000CD38 FF59                       		dc.w byte_CB31-Map_obj3A
0000CD3A FF64                       		dc.w byte_CB3C-Map_obj3A
0000CD3C 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000CD3D F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000CD42 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000CD47 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000CD4C F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000CD51 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000CD56 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000CD5B F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000CD60 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000CD65 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000CD6A F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000CD6F F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000CD74 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000CD79 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000CD7E F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000CD83 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000CD88 06                         byte_CC13:	dc.b 6			; PASSED
0000CD89 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000CD8E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000CD93 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000CD98 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000CD9D F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CDA2 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000CDA7 06                         byte_CC32:	dc.b 6			; SCORE
0000CDA8 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CDAD F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CDB2 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CDB7 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CDBC F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CDC1 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CDC6 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000CDC7 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000CDCC F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CDD1 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CDD6 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CDDB FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CDE0 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000CDE5 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CDEA 07                         byte_CC75:	dc.b 7			; RING BONUS
0000CDEB F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CDF0 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CDF5 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CDFA F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CDFF FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CE04 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CE09 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CE0E                            		even
0000CE0E                            ; ---------------------------------------------------------------------------
0000CE0E                            ; Sprite mappings - special stage results screen
0000CE0E                            ; ---------------------------------------------------------------------------
0000CE0E 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000CE10 0000                       		dc.w byte_CCEE-Map_obj7E
0000CE12 0000                       		dc.w byte_CD0D-Map_obj7E
0000CE14 FE8B                       		dc.w byte_CB47-Map_obj7E
0000CE16 0000                       		dc.w byte_CD31-Map_obj7E
0000CE18 0000                       		dc.w byte_CD46-Map_obj7E
0000CE1A 0000                       		dc.w byte_CD5B-Map_obj7E
0000CE1C 0000                       		dc.w byte_CD6B-Map_obj7E
0000CE1E 0000                       		dc.w byte_CDA8-Map_obj7E
0000CE20 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000CE21 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000CE26 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000CE2B F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000CE30 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000CE35 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000CE3A F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000CE3F F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000CE44 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CE49 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000CE4E F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000CE53 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000CE58 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000CE5D F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000CE62 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000CE63 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CE68 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CE6D F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CE72 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CE77 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CE7C FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CE81 07                         byte_CD0D:	dc.b 7
0000CE82 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CE87 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CE8C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CE91 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CE96 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CE9B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CEA0 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CEA5 04                         byte_CD31:	dc.b 4
0000CEA6 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CEAB F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CEB0 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CEB5 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000CEBA 04                         byte_CD46:	dc.b 4
0000CEBB F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CEC0 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CEC5 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CECA F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000CECF 03                         byte_CD5B:	dc.b 3
0000CED0 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CED5 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CEDA F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CEDF 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000CEE0 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000CEE5 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000CEEA F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000CEEF F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000CEF4 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000CEF9 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000CEFE F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000CF03 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000CF08 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000CF0D F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000CF12 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000CF17 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000CF1C 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000CF1D F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000CF22 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000CF27 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000CF2C F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000CF31 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000CF36 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000CF3B F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000CF40 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000CF45 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000CF4A F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000CF4F F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000CF54 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000CF59 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000CF5E F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000CF63 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000CF68                            		even
0000CF68                            ; ---------------------------------------------------------------------------
0000CF68                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CF68                            ; ---------------------------------------------------------------------------
0000CF68                            Map_obj7F:
0000CF68                            	include "_maps\obj7F.asm"
0000CF68                            ; ---------------------------------------------------------------------------
0000CF68                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CF68                            ; ---------------------------------------------------------------------------
0000CF68 0000                       		dc.w byte_CE02-Map_obj7F
0000CF6A 0000                       		dc.w byte_CE08-Map_obj7F
0000CF6C 0000                       		dc.w byte_CE0E-Map_obj7F
0000CF6E 0000                       		dc.w byte_CE14-Map_obj7F
0000CF70 0000                       		dc.w byte_CE1A-Map_obj7F
0000CF72 0000                       		dc.w byte_CE20-Map_obj7F
0000CF74 0000                       		dc.w byte_CE26-Map_obj7F
0000CF76 01                         byte_CE02:	dc.b 1
0000CF77 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000CF7C 01                         byte_CE08:	dc.b 1
0000CF7D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CF82 01                         byte_CE0E:	dc.b 1
0000CF83 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000CF88 01                         byte_CE14:	dc.b 1
0000CF89 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000CF8E 01                         byte_CE1A:	dc.b 1
0000CF8F F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000CF94 01                         byte_CE20:	dc.b 1
0000CF95 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000CF9A 00                         byte_CE26:	dc.b 0			; Blank frame
0000CF9C 00                         		even
0000CF9C 00                         		even
0000CF9C                            
0000CF9C                            ; ===========================================================================
0000CF9C                            ; ---------------------------------------------------------------------------
0000CF9C                            ; Object 36 - spikes
0000CF9C                            ; ---------------------------------------------------------------------------
0000CF9C                            
0000CF9C                            Obj36:					; XREF: Obj_Index
0000CF9C 7000                       		moveq	#0,d0
0000CF9E 1028 0024                  		move.b	$24(a0),d0
0000CFA2 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000CFA6 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000CFAA                            ; ===========================================================================
0000CFAA 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000CFAC 0000                       		dc.w Obj36_Solid-Obj36_Index
0000CFAE                            
0000CFAE 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000CFB0 0110                       		dc.b 1,	$10
0000CFB2 0204                       		dc.b 2,	4
0000CFB4 031C                       		dc.b 3,	$1C
0000CFB6 0440                       		dc.b 4,	$40
0000CFB8 0510                       		dc.b 5,	$10
0000CFBA                            ; ===========================================================================
0000CFBA                            
0000CFBA                            Obj36_Main:				; XREF: Obj36_Index
0000CFBA 5428 0024                  		addq.b	#2,$24(a0)
0000CFBE 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000CFC6 317C 051B 0002             		move.w	#$51B,2(a0)
0000CFCC 0028 0004 0001             		ori.b	#4,1(a0)
0000CFD2 117C 0004 0018             		move.b	#4,$18(a0)
0000CFD8 1028 0028                  		move.b	$28(a0),d0
0000CFDC 0228 000F 0028             		andi.b	#$F,$28(a0)
0000CFE2 0240 00F0                  		andi.w	#$F0,d0
0000CFE6 43F9 0000 CFAE             		lea	(Obj36_Var).l,a1
0000CFEC E648                       		lsr.w	#3,d0
0000CFEE D2C0                       		adda.w	d0,a1
0000CFF0 1159 001A                  		move.b	(a1)+,$1A(a0)
0000CFF4 1159 0019                  		move.b	(a1)+,$19(a0)
0000CFF8 3168 0008 0030             		move.w	8(a0),$30(a0)
0000CFFE 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D004                            
0000D004                            Obj36_Solid:				; XREF: Obj36_Index
0000D004 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D008 343C 0004                  		move.w	#4,d2
0000D00C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D012 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D014 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D01A 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D01C 343C 0014                  		move.w	#$14,d2
0000D020                            
0000D020                            ; Spikes types $1x and $5x face	sideways
0000D020                            
0000D020                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D020 323C 001B                  		move.w	#$1B,d1
0000D024 3602                       		move.w	d2,d3
0000D026 5243                       		addq.w	#1,d3
0000D028 3828 0008                  		move.w	8(a0),d4
0000D02C 6100 0000                  		bsr.w	SolidObject
0000D030 0828 0003 0022             		btst	#3,$22(a0)
0000D036 6600                       		bne.s	Obj36_Display
0000D038 0C44 0001                  		cmpi.w	#1,d4
0000D03C 6700                       		beq.s	Obj36_Hurt
0000D03E 6000                       		bra.s	Obj36_Display
0000D040                            ; ===========================================================================
0000D040                            
0000D040                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D040                            
0000D040                            Obj36_Upright:				; XREF: Obj36_Solid
0000D040 7200                       		moveq	#0,d1
0000D042 1228 0019                  		move.b	$19(a0),d1
0000D046 0641 000B                  		addi.w	#$B,d1
0000D04A 343C 0010                  		move.w	#$10,d2
0000D04E 363C 0011                  		move.w	#$11,d3
0000D052 3828 0008                  		move.w	8(a0),d4
0000D056 6100 0000                  		bsr.w	SolidObject
0000D05A 0828 0003 0022             		btst	#3,$22(a0)
0000D060 6600                       		bne.s	Obj36_Hurt
0000D062 4A44                       		tst.w	d4
0000D064 6A00                       		bpl.s	Obj36_Display
0000D066                            
0000D066                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D066 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D06A 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D06C 2F08                       		move.l	a0,-(sp)
0000D06E 2448                       		movea.l	a0,a2
0000D070 41F8 D000                  		lea	($FFFFD000).w,a0
0000D074 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D07A 6400                       		bcc.s	loc_CF20
0000D07C 2628 000C                  		move.l	$C(a0),d3
0000D080 3028 0012                  		move.w	$12(a0),d0
0000D084 48C0                       		ext.l	d0
0000D086 E180                       		asl.l	#8,d0
0000D088 9680                       		sub.l	d0,d3
0000D08A 2143 000C                  		move.l	d3,$C(a0)
0000D08E 4EB9 0000 0000             		jsr	HurtSonic
0000D094                            
0000D094                            loc_CF20:
0000D094 205F                       		movea.l	(sp)+,a0
0000D096                            
0000D096                            Obj36_Display:
0000D096 6100 0000                  		bsr.w	DisplaySprite
0000D09A 3028 0030                  		move.w	$30(a0),d0
0000D09E 0240 FF80                  		andi.w	#$FF80,d0
0000D0A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000D0A6 0441 0080                  		subi.w	#$80,d1
0000D0AA 0241 FF80                  		andi.w	#$FF80,d1
0000D0AE 9041                       		sub.w	d1,d0
0000D0B0 0C40 0280                  		cmpi.w	#$280,d0
0000D0B4 6200 0000                  		bhi.w	DeleteObject
0000D0B8 4E75                       		rts	
0000D0BA                            ; ===========================================================================
0000D0BA                            
0000D0BA                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D0BA 7000                       		moveq	#0,d0
0000D0BC 1028 0028                  		move.b	$28(a0),d0
0000D0C0 D040                       		add.w	d0,d0
0000D0C2 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D0C6 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D0CA                            ; ===========================================================================
0000D0CA 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D0CC 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D0CE 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D0D0                            ; ===========================================================================
0000D0D0                            
0000D0D0                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D0D0 4E75                       		rts			; don't move the object
0000D0D2                            ; ===========================================================================
0000D0D2                            
0000D0D2                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D0D2 6100 0000                  		bsr.w	Obj36_Wait
0000D0D6 7000                       		moveq	#0,d0
0000D0D8 1028 0034                  		move.b	$34(a0),d0
0000D0DC D068 0032                  		add.w	$32(a0),d0
0000D0E0 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D0E4 4E75                       		rts	
0000D0E6                            ; ===========================================================================
0000D0E6                            
0000D0E6                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D0E6 6100 0000                  		bsr.w	Obj36_Wait
0000D0EA 7000                       		moveq	#0,d0
0000D0EC 1028 0034                  		move.b	$34(a0),d0
0000D0F0 D068 0030                  		add.w	$30(a0),d0
0000D0F4 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D0F8 4E75                       		rts	
0000D0FA                            ; ===========================================================================
0000D0FA                            
0000D0FA                            Obj36_Wait:
0000D0FA 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D0FE 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D100 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D104 6600                       		bne.s	locret_CFE6
0000D106 4A28 0001                  		tst.b	1(a0)
0000D10A 6A00                       		bpl.s	locret_CFE6
0000D10C 303C 00B6                  		move.w	#$B6,d0
0000D110 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D116 6000                       		bra.s	locret_CFE6
0000D118                            ; ===========================================================================
0000D118                            
0000D118                            loc_CFA4:
0000D118 4A68 0036                  		tst.w	$36(a0)
0000D11C 6700                       		beq.s	loc_CFC6
0000D11E 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D124 6400                       		bcc.s	locret_CFE6
0000D126 317C 0000 0034             		move.w	#0,$34(a0)
0000D12C 317C 0000 0036             		move.w	#0,$36(a0)
0000D132 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D138 6000                       		bra.s	locret_CFE6
0000D13A                            ; ===========================================================================
0000D13A                            
0000D13A                            loc_CFC6:
0000D13A 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D140 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D146 6500                       		bcs.s	locret_CFE6
0000D148 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D14E 317C 0001 0036             		move.w	#1,$36(a0)
0000D154 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D15A                            
0000D15A                            locret_CFE6:
0000D15A 4E75                       		rts	
0000D15C                            ; ===========================================================================
0000D15C                            ; ---------------------------------------------------------------------------
0000D15C                            ; Sprite mappings - spikes
0000D15C                            ; ---------------------------------------------------------------------------
0000D15C                            Map_obj36:
0000D15C                            	include "_maps\obj36.asm"
0000D15C                            ; ---------------------------------------------------------------------------
0000D15C                            ; Sprite mappings - spikes
0000D15C                            ; ---------------------------------------------------------------------------
0000D15C 0000                       		dc.w byte_CFF4-Map_obj36
0000D15E 0000                       		dc.w byte_D004-Map_obj36
0000D160 0000                       		dc.w byte_D014-Map_obj36
0000D162 0000                       		dc.w byte_D01A-Map_obj36
0000D164 0000                       		dc.w byte_D02A-Map_obj36
0000D166 0000                       		dc.w byte_D049-Map_obj36
0000D168 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D169 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D16E F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D173 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D178 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D179 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D17E FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D183 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D188 01                         byte_D014:	dc.b 1			; 1 spike
0000D189 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D18E 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D18F F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D194 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D199 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D19E 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D19F F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D1A4 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D1A9 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D1AE F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D1B3 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D1B8 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D1BD 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D1BE FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D1C4 00                         		even
0000D1C4 00                         		even
0000D1C4                            
0000D1C4                            ; ===========================================================================
0000D1C4                            ; ---------------------------------------------------------------------------
0000D1C4                            ; Object 3B - purple rock (GHZ)
0000D1C4                            ; ---------------------------------------------------------------------------
0000D1C4                            
0000D1C4                            Obj3B:					; XREF: Obj_Index
0000D1C4 7000                       		moveq	#0,d0
0000D1C6 1028 0024                  		move.b	$24(a0),d0
0000D1CA 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D1CE 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D1D2                            ; ===========================================================================
0000D1D2 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D1D4 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D1D6                            ; ===========================================================================
0000D1D6                            
0000D1D6                            Obj3B_Main:				; XREF: Obj3B_Index
0000D1D6 5428 0024                  		addq.b	#2,$24(a0)
0000D1DA 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D1E2 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D1E8 117C 0004 0001             		move.b	#4,1(a0)
0000D1EE 117C 0013 0019             		move.b	#$13,$19(a0)
0000D1F4 117C 0004 0018             		move.b	#4,$18(a0)
0000D1FA                            
0000D1FA                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D1FA 323C 001B                  		move.w	#$1B,d1
0000D1FE 343C 0010                  		move.w	#$10,d2
0000D202 363C 0010                  		move.w	#$10,d3
0000D206 3828 0008                  		move.w	8(a0),d4
0000D20A 6100 0000                  		bsr.w	SolidObject
0000D20E 6100 0000                  		bsr.w	DisplaySprite
0000D212 3028 0008                  		move.w	8(a0),d0
0000D216 0240 FF80                  		andi.w	#$FF80,d0
0000D21A 3238 F700                  		move.w	($FFFFF700).w,d1
0000D21E 0441 0080                  		subi.w	#$80,d1
0000D222 0241 FF80                  		andi.w	#$FF80,d1
0000D226 9041                       		sub.w	d1,d0
0000D228 0C40 0280                  		cmpi.w	#$280,d0
0000D22C 6200 0000                  		bhi.w	DeleteObject
0000D230 4E75                       		rts	
0000D232                            ; ===========================================================================
0000D232                            ; ---------------------------------------------------------------------------
0000D232                            ; Object 49 - waterfall	sound effect (GHZ)
0000D232                            ; ---------------------------------------------------------------------------
0000D232                            
0000D232                            Obj49:					; XREF: Obj_Index
0000D232 7000                       		moveq	#0,d0
0000D234 1028 0024                  		move.b	$24(a0),d0
0000D238 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D23C 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D240                            ; ===========================================================================
0000D240 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D242 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D244                            ; ===========================================================================
0000D244                            
0000D244                            Obj49_Main:				; XREF: Obj49_Index
0000D244 5428 0024                  		addq.b	#2,$24(a0)
0000D248 117C 0004 0001             		move.b	#4,1(a0)
0000D24E                            
0000D24E                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D24E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D252 0200 003F                  		andi.b	#$3F,d0
0000D256 6600                       		bne.s	Obj49_ChkDel
0000D258 303C 00D0                  		move.w	#$D0,d0
0000D25C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D262                            
0000D262                            Obj49_ChkDel:
0000D262 3028 0008                  		move.w	8(a0),d0
0000D266 0240 FF80                  		andi.w	#$FF80,d0
0000D26A 3238 F700                  		move.w	($FFFFF700).w,d1
0000D26E 0441 0080                  		subi.w	#$80,d1
0000D272 0241 FF80                  		andi.w	#$FF80,d1
0000D276 9041                       		sub.w	d1,d0
0000D278 0C40 0280                  		cmpi.w	#$280,d0
0000D27C 6200 0000                  		bhi.w	DeleteObject
0000D280 4E75                       		rts	
0000D282                            ; ===========================================================================
0000D282                            ; ---------------------------------------------------------------------------
0000D282                            ; Sprite mappings - purple rock	(GHZ)
0000D282                            ; ---------------------------------------------------------------------------
0000D282                            Map_obj3B:
0000D282                            	include "_maps\obj3B.asm"
0000D282                            ; ---------------------------------------------------------------------------
0000D282                            ; Sprite mappings - purple rock	(GHZ)
0000D282                            ; ---------------------------------------------------------------------------
0000D282 0000                       		dc.w byte_D110-Map_obj3B
0000D284 02                         byte_D110:	dc.b 2
0000D285 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D28A F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D290 00                         		even
0000D290 00                         		even
0000D290                            
0000D290                            ; ===========================================================================
0000D290                            ; ---------------------------------------------------------------------------
0000D290                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D290                            ; ---------------------------------------------------------------------------
0000D290                            
0000D290                            Obj3C:					; XREF: Obj_Index
0000D290 7000                       		moveq	#0,d0
0000D292 1028 0024                  		move.b	$24(a0),d0
0000D296 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D29A 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D29E 6000 0000                  		bra.w	MarkObjGone
0000D2A2                            ; ===========================================================================
0000D2A2 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D2A4 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D2A6 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D2A8                            ; ===========================================================================
0000D2A8                            
0000D2A8                            Obj3C_Main:				; XREF: Obj3C_Index
0000D2A8 5428 0024                  		addq.b	#2,$24(a0)
0000D2AC 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D2B4 317C 450F 0002             		move.w	#$450F,2(a0)
0000D2BA 117C 0004 0001             		move.b	#4,1(a0)
0000D2C0 117C 0010 0019             		move.b	#$10,$19(a0)
0000D2C6 117C 0004 0018             		move.b	#4,$18(a0)
0000D2CC 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D2D2                            
0000D2D2                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D2D2 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D2D8 323C 001B                  		move.w	#$1B,d1
0000D2DC 343C 0020                  		move.w	#$20,d2
0000D2E0 363C 0020                  		move.w	#$20,d3
0000D2E4 3828 0008                  		move.w	8(a0),d4
0000D2E8 6100 0000                  		bsr.w	SolidObject
0000D2EC 0828 0005 0022             		btst	#5,$22(a0)
0000D2F2 6600                       		bne.s	Obj3C_ChkRoll
0000D2F4                            
0000D2F4                            locret_D180:
0000D2F4 4E75                       		rts	
0000D2F6                            ; ===========================================================================
0000D2F6                            
0000D2F6                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D2F6 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D2FC 66F6                       		bne.s	locret_D180	; if not, branch
0000D2FE 3028 0030                  		move.w	$30(a0),d0
0000D302 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D304 4440                       		neg.w	d0
0000D306                            
0000D306                            Obj3C_ChkSpeed:
0000D306 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D30A 65E8                       		bcs.s	locret_D180	; if not, branch
0000D30C 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D312 5869 0008                  		addq.w	#4,8(a1)
0000D316 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D31C 3028 0008                  		move.w	8(a0),d0
0000D320 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D324 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D326 5169 0008                  		subq.w	#8,8(a1)
0000D32A 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D330                            
0000D330                            Obj3C_Smash:
0000D330 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D336 08A8 0005 0022             		bclr	#5,$22(a0)
0000D33C 08A9 0005 0022             		bclr	#5,$22(a1)
0000D342 7207                       		moveq	#7,d1		; load 8 fragments
0000D344 343C 0070                  		move.w	#$70,d2
0000D348 6100                       		bsr.s	SmashObject
0000D34A                            
0000D34A                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D34A 6100 0000                  		bsr.w	SpeedToPos
0000D34E 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D354 6100 0000                  		bsr.w	DisplaySprite
0000D358 4A28 0001                  		tst.b	1(a0)
0000D35C 6A00 0000                  		bpl.w	DeleteObject
0000D360 4E75                       		rts	
0000D362                            
0000D362                            ; ---------------------------------------------------------------------------
0000D362                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D362                            ; ---------------------------------------------------------------------------
0000D362                            
0000D362                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D362                            
0000D362                            
0000D362                            SmashObject:				; XREF: Obj3C_Smash
0000D362 7000                       		moveq	#0,d0
0000D364 1028 001A                  		move.b	$1A(a0),d0
0000D368 D040                       		add.w	d0,d0
0000D36A 2668 0004                  		movea.l	4(a0),a3
0000D36E D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D372 524B                       		addq.w	#1,a3
0000D374 08E8 0005 0001             		bset	#5,1(a0)
0000D37A 1810                       		move.b	0(a0),d4
0000D37C 1A28 0001                  		move.b	1(a0),d5
0000D380 2248                       		movea.l	a0,a1
0000D382 6000                       		bra.s	Smash_LoadFrag
0000D384                            ; ===========================================================================
0000D384                            
0000D384                            Smash_Loop:
0000D384 6100 0000                  		bsr.w	SingleObjLoad
0000D388 6600                       		bne.s	Smash_PlaySnd
0000D38A 5A4B                       		addq.w	#5,a3
0000D38C                            
0000D38C                            Smash_LoadFrag:				; XREF: SmashObject
0000D38C 137C 0004 0024             		move.b	#4,$24(a1)
0000D392 1284                       		move.b	d4,0(a1)
0000D394 234B 0004                  		move.l	a3,4(a1)
0000D398 1345 0001                  		move.b	d5,1(a1)
0000D39C 3368 0008 0008             		move.w	8(a0),8(a1)
0000D3A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D3A8 3368 0002 0002             		move.w	2(a0),2(a1)
0000D3AE 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D3B4 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D3BA 335C 0010                  		move.w	(a4)+,$10(a1)
0000D3BE 335C 0012                  		move.w	(a4)+,$12(a1)
0000D3C2 B3C8                       		cmpa.l	a0,a1
0000D3C4 6400                       		bcc.s	loc_D268
0000D3C6 2F08                       		move.l	a0,-(sp)
0000D3C8 2049                       		movea.l	a1,a0
0000D3CA 6100 0000                  		bsr.w	SpeedToPos
0000D3CE D568 0012                  		add.w	d2,$12(a0)
0000D3D2 205F                       		movea.l	(sp)+,a0
0000D3D4 6100 0000                  		bsr.w	DisplaySprite2
0000D3D8                            
0000D3D8                            loc_D268:
0000D3D8 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D3DC                            
0000D3DC                            Smash_PlaySnd:
0000D3DC 303C 00CB                  		move.w	#$CB,d0
0000D3E0 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D3E6                            ; End of function SmashObject
0000D3E6                            
0000D3E6                            ; ===========================================================================
0000D3E6                            ; Smashed block	fragment speeds
0000D3E6                            ;
0000D3E6 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D3EA 0600 FF00                  		dc.w $600, $FF00
0000D3EE 0600 0100                  		dc.w $600, $100
0000D3F2 0400 0500                  		dc.w $400, $500
0000D3F6 0600 FA00                  		dc.w $600, $FA00
0000D3FA 0800 FE00                  		dc.w $800, $FE00
0000D3FE 0800 0200                  		dc.w $800, $200
0000D402 0600 0600                  		dc.w $600, $600
0000D406                            
0000D406 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D40A F800 FE00                  		dc.w $F800, $FE00
0000D40E F800 0200                  		dc.w $F800, $200
0000D412 FA00 0600                  		dc.w $FA00, $600
0000D416 FC00 FB00                  		dc.w $FC00, $FB00
0000D41A FA00 FF00                  		dc.w $FA00, $FF00
0000D41E FA00 0100                  		dc.w $FA00, $100
0000D422 FC00 0500                  		dc.w $FC00, $500
0000D426                            ; ---------------------------------------------------------------------------
0000D426                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D426                            ; ---------------------------------------------------------------------------
0000D426                            Map_obj3C:
0000D426                            	include "_maps\obj3C.asm"
0000D426                            ; ---------------------------------------------------------------------------
0000D426                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D426                            ; ---------------------------------------------------------------------------
0000D426 0000                       		dc.w byte_D2BC-Map_obj3C
0000D428 0000                       		dc.w byte_D2E5-Map_obj3C
0000D42A 0000                       		dc.w byte_D30E-Map_obj3C
0000D42C 08                         byte_D2BC:	dc.b 8
0000D42D E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D432 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D437 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D43C 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D441 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D446 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D44B 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D450 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D455 08                         byte_D2E5:	dc.b 8
0000D456 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D45B F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D460 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D465 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D46A E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D46F F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D474 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D479 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D47E 08                         byte_D30E:	dc.b 8
0000D47F E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D484 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D489 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D48E 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D493 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D498 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D49D 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D4A2 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D4A8 00                         		even
0000D4A8 00                         		even
0000D4A8                            
0000D4A8                            ; ---------------------------------------------------------------------------
0000D4A8                            ; Object code loading subroutine
0000D4A8                            ; ---------------------------------------------------------------------------
0000D4A8                            
0000D4A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D4A8                            
0000D4A8                            
0000D4A8                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D4A8 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D4AC 7E7F                       		moveq	#$7F,d7
0000D4AE 7000                       		moveq	#0,d0
0000D4B0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D4B6 6400                       		bcc.s	loc_D362
0000D4B8                            
0000D4B8                            loc_D348:
0000D4B8 1010                       		move.b	(a0),d0		; load object number from RAM
0000D4BA 6700                       		beq.s	loc_D358
0000D4BC D040                       		add.w	d0,d0
0000D4BE D040                       		add.w	d0,d0
0000D4C0 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D4C4 4E91                       		jsr	(a1)		; run the object's code
0000D4C6 7000                       		moveq	#0,d0
0000D4C8                            
0000D4C8                            loc_D358:
0000D4C8 41E8 0040                  		lea	$40(a0),a0	; next object
0000D4CC 51CF FFEA                  		dbf	d7,loc_D348
0000D4D0 4E75                       		rts	
0000D4D2                            ; ===========================================================================
0000D4D2                            
0000D4D2                            loc_D362:
0000D4D2 7E1F                       		moveq	#$1F,d7
0000D4D4 61E2                       		bsr.s	loc_D348
0000D4D6 7E5F                       		moveq	#$5F,d7
0000D4D8                            
0000D4D8                            loc_D368:
0000D4D8 7000                       		moveq	#0,d0
0000D4DA 1010                       		move.b	(a0),d0
0000D4DC 6700                       		beq.s	loc_D378
0000D4DE 4A28 0001                  		tst.b	1(a0)
0000D4E2 6A00                       		bpl.s	loc_D378
0000D4E4 6100 0000                  		bsr.w	DisplaySprite
0000D4E8                            
0000D4E8                            loc_D378:
0000D4E8 41E8 0040                  		lea	$40(a0),a0
0000D4EC                            
0000D4EC                            loc_D37C:
0000D4EC 51CF FFEA                  		dbf	d7,loc_D368
0000D4F0 4E75                       		rts	
0000D4F2                            ; End of function ObjectsLoad
0000D4F2                            
0000D4F2                            ; ===========================================================================
0000D4F2                            ; ---------------------------------------------------------------------------
0000D4F2                            ; Object pointers
0000D4F2                            ; ---------------------------------------------------------------------------
0000D4F2                            Obj_Index:
0000D4F2                            	include "_inc\Object pointers.asm"
0000D4F2                            ; ---------------------------------------------------------------------------
0000D4F2                            ; Object pointers
0000D4F2                            ; ---------------------------------------------------------------------------
0000D4F2 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D502 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D512 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D522 0000 0000 0000 A72A 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D532 0000 746A 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D542 0000 7A90 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D552 0000 82DE 0000 8346 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D562 0000 8990 0000 8C7E 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D572 0000 0000 0000 9902 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D582 0000 9C3A 0000 A226 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D592 0000 953A 0000 8A66 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D5A2 0000 AD72 0000 A40C 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D5B2 0000 B744 0000 BDF2 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D5C2 0000 B2A8 0000 CF9C 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D5D2 0000 C578 0000 C632 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D5E2 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D5F2 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000D602 0000 BA60 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000D612 0000 D232 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000D622 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000D632 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000D642 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000D652 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000D662 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000D672 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000D682 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000D692 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000D6A2 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000D6B2 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000D6C2 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000D6D2 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000D6E2 0000 0000 0000 C86C 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000D6F2 0000 4F8A 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000D702 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000D712 0000 5644 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D712 0000 5644 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D722                            
0000D722                            ; ---------------------------------------------------------------------------
0000D722                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000D722                            ; ---------------------------------------------------------------------------
0000D722                            
0000D722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D722                            
0000D722                            
0000D722                            ObjectFall:
0000D722 2428 0008                  		move.l	8(a0),d2
0000D726 2628 000C                  		move.l	$C(a0),d3
0000D72A 3028 0010                  		move.w	$10(a0),d0
0000D72E 48C0                       		ext.l	d0
0000D730 E180                       		asl.l	#8,d0
0000D732 D480                       		add.l	d0,d2
0000D734 3028 0012                  		move.w	$12(a0),d0
0000D738 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000D73E 48C0                       		ext.l	d0
0000D740 E180                       		asl.l	#8,d0
0000D742 D680                       		add.l	d0,d3
0000D744 2142 0008                  		move.l	d2,8(a0)
0000D748 2143 000C                  		move.l	d3,$C(a0)
0000D74C 4E75                       		rts	
0000D74E                            ; End of function ObjectFall
0000D74E                            
0000D74E                            ; ---------------------------------------------------------------------------
0000D74E                            ; Subroutine translating object	speed to update	object position
0000D74E                            ; ---------------------------------------------------------------------------
0000D74E                            
0000D74E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D74E                            
0000D74E                            
0000D74E                            SpeedToPos:
0000D74E 2428 0008                  		move.l	8(a0),d2
0000D752 2628 000C                  		move.l	$C(a0),d3
0000D756 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000D75A 48C0                       		ext.l	d0
0000D75C E180                       		asl.l	#8,d0		; multiply speed by $100
0000D75E D480                       		add.l	d0,d2		; add to x-axis	position
0000D760 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000D764 48C0                       		ext.l	d0
0000D766 E180                       		asl.l	#8,d0		; multiply by $100
0000D768 D680                       		add.l	d0,d3		; add to y-axis	position
0000D76A 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000D76E 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000D772 4E75                       		rts	
0000D774                            ; End of function SpeedToPos
0000D774                            
0000D774                            ; ---------------------------------------------------------------------------
0000D774                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000D774                            ; ---------------------------------------------------------------------------
0000D774                            
0000D774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D774                            
0000D774                            
0000D774                            DisplaySprite:
0000D774 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000D778 3028 0018                  		move.w	$18(a0),d0
0000D77C E248                       		lsr.w	#1,d0
0000D77E 0240 0380                  		andi.w	#$380,d0
0000D782 D2C0                       		adda.w	d0,a1
0000D784 0C51 007E                  		cmpi.w	#$7E,(a1)
0000D788 6400                       		bcc.s	locret_D620
0000D78A 5451                       		addq.w	#2,(a1)
0000D78C D2D1                       		adda.w	(a1),a1
0000D78E 3288                       		move.w	a0,(a1)
0000D790                            
0000D790                            locret_D620:
0000D790 4E75                       		rts	
0000D792                            ; End of function DisplaySprite
0000D792                            
0000D792                            ; ---------------------------------------------------------------------------
0000D792                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000D792                            ; ---------------------------------------------------------------------------
0000D792                            
0000D792                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D792                            
0000D792                            
0000D792                            DisplaySprite2:
0000D792 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000D796 3029 0018                  		move.w	$18(a1),d0
0000D79A E248                       		lsr.w	#1,d0
0000D79C 0240 0380                  		andi.w	#$380,d0
0000D7A0 D4C0                       		adda.w	d0,a2
0000D7A2 0C52 007E                  		cmpi.w	#$7E,(a2)
0000D7A6 6400                       		bcc.s	locret_D63E
0000D7A8 5452                       		addq.w	#2,(a2)
0000D7AA D4D2                       		adda.w	(a2),a2
0000D7AC 3489                       		move.w	a1,(a2)
0000D7AE                            
0000D7AE                            locret_D63E:
0000D7AE 4E75                       		rts	
0000D7B0                            ; End of function DisplaySprite2
0000D7B0                            
0000D7B0                            ; ---------------------------------------------------------------------------
0000D7B0                            ; Subroutine to	delete an object
0000D7B0                            ; ---------------------------------------------------------------------------
0000D7B0                            
0000D7B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7B0                            
0000D7B0                            
0000D7B0                            DeleteObject:
0000D7B0 2248                       		movea.l	a0,a1
0000D7B2                            
0000D7B2                            DeleteObject2:
0000D7B2 7200                       		moveq	#0,d1
0000D7B4 700F                       		moveq	#$F,d0
0000D7B6                            
0000D7B6                            loc_D646:
0000D7B6 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000D7B8 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000D7BC 4E75                       		rts	
0000D7BE                            ; End of function DeleteObject
0000D7BE                            
0000D7BE                            ; ===========================================================================
0000D7BE 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000D7C2 00FF F700                  		dc.l $FFF700		; main screen x-position
0000D7C6 00FF F708                  		dc.l $FFF708		; background x-position	1
0000D7CA 00FF F718                  		dc.l $FFF718		; background x-position	2
0000D7CE                            ; ---------------------------------------------------------------------------
0000D7CE                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000D7CE                            ; ---------------------------------------------------------------------------
0000D7CE                            
0000D7CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7CE                            
0000D7CE                            
0000D7CE                            BuildSprites:				; XREF: TitleScreen; et al
0000D7CE 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000D7D2 7A00                       		moveq	#0,d5
0000D7D4 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000D7D8 7E07                       		moveq	#7,d7
0000D7DA                            
0000D7DA                            loc_D66A:
0000D7DA 4A54                       		tst.w	(a4)
0000D7DC 6700 0000                  		beq.w	loc_D72E
0000D7E0 7C02                       		moveq	#2,d6
0000D7E2                            
0000D7E2                            loc_D672:
0000D7E2 3074 6000                  		movea.w	(a4,d6.w),a0
0000D7E6 4A10                       		tst.b	(a0)
0000D7E8 6700 0000                  		beq.w	loc_D726
0000D7EC 08A8 0007 0001             		bclr	#7,1(a0)
0000D7F2 1028 0001                  		move.b	1(a0),d0
0000D7F6 1800                       		move.b	d0,d4
0000D7F8 0240 000C                  		andi.w	#$C,d0
0000D7FC 6700                       		beq.s	loc_D6DE
0000D7FE 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000D802 7000                       		moveq	#0,d0
0000D804 1028 0019                  		move.b	$19(a0),d0
0000D808 3628 0008                  		move.w	8(a0),d3
0000D80C 9651                       		sub.w	(a1),d3
0000D80E 3203                       		move.w	d3,d1
0000D810 D240                       		add.w	d0,d1
0000D812 6B00 0000                  		bmi.w	loc_D726
0000D816 3203                       		move.w	d3,d1
0000D818 9240                       		sub.w	d0,d1
0000D81A 0C41 0140                  		cmpi.w	#$140,d1
0000D81E 6C00                       		bge.s	loc_D726
0000D820 0643 0080                  		addi.w	#$80,d3
0000D824 0804 0004                  		btst	#4,d4
0000D828 6700                       		beq.s	loc_D6E8
0000D82A 7000                       		moveq	#0,d0
0000D82C 1028 0016                  		move.b	$16(a0),d0
0000D830 3428 000C                  		move.w	$C(a0),d2
0000D834 9469 0004                  		sub.w	4(a1),d2
0000D838 3202                       		move.w	d2,d1
0000D83A D240                       		add.w	d0,d1
0000D83C 6B00                       		bmi.s	loc_D726
0000D83E 3202                       		move.w	d2,d1
0000D840 9240                       		sub.w	d0,d1
0000D842 0C41 00E0                  		cmpi.w	#$E0,d1
0000D846 6C00                       		bge.s	loc_D726
0000D848 0642 0080                  		addi.w	#$80,d2
0000D84C 6000                       		bra.s	loc_D700
0000D84E                            ; ===========================================================================
0000D84E                            
0000D84E                            loc_D6DE:
0000D84E 3428 000A                  		move.w	$A(a0),d2
0000D852 3628 0008                  		move.w	8(a0),d3
0000D856 6000                       		bra.s	loc_D700
0000D858                            ; ===========================================================================
0000D858                            
0000D858                            loc_D6E8:
0000D858 3428 000C                  		move.w	$C(a0),d2
0000D85C 9469 0004                  		sub.w	4(a1),d2
0000D860 0642 0080                  		addi.w	#$80,d2
0000D864 0C42 0060                  		cmpi.w	#$60,d2
0000D868 6500                       		bcs.s	loc_D726
0000D86A 0C42 0180                  		cmpi.w	#$180,d2
0000D86E 6400                       		bcc.s	loc_D726
0000D870                            
0000D870                            loc_D700:
0000D870 2268 0004                  		movea.l	4(a0),a1
0000D874 7200                       		moveq	#0,d1
0000D876 0804 0005                  		btst	#5,d4
0000D87A 6600                       		bne.s	loc_D71C
0000D87C 1228 001A                  		move.b	$1A(a0),d1
0000D880 D201                       		add.b	d1,d1
0000D882 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000D886 1219                       		move.b	(a1)+,d1
0000D888 5301                       		subq.b	#1,d1
0000D88A 6B00                       		bmi.s	loc_D720
0000D88C                            
0000D88C                            loc_D71C:
0000D88C 6100 0000                  		bsr.w	sub_D750
0000D890                            
0000D890                            loc_D720:
0000D890 08E8 0007 0001             		bset	#7,1(a0)
0000D896                            
0000D896                            loc_D726:
0000D896 5446                       		addq.w	#2,d6
0000D898 5554                       		subq.w	#2,(a4)
0000D89A 6600 FF46                  		bne.w	loc_D672
0000D89E                            
0000D89E                            loc_D72E:
0000D89E 49EC 0080                  		lea	$80(a4),a4
0000D8A2 51CF FF36                  		dbf	d7,loc_D66A
0000D8A6 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000D8AA 0C05 0050                  		cmpi.b	#$50,d5
0000D8AE 6700                       		beq.s	loc_D748
0000D8B0 24BC 0000 0000             		move.l	#0,(a2)
0000D8B6 4E75                       		rts	
0000D8B8                            ; ===========================================================================
0000D8B8                            
0000D8B8                            loc_D748:
0000D8B8 157C 0000 FFFB             		move.b	#0,-5(a2)
0000D8BE 4E75                       		rts	
0000D8C0                            ; End of function BuildSprites
0000D8C0                            
0000D8C0                            
0000D8C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D8C0                            
0000D8C0                            
0000D8C0                            sub_D750:				; XREF: BuildSprites
0000D8C0 3668 0002                  		movea.w	2(a0),a3
0000D8C4 0804 0000                  		btst	#0,d4
0000D8C8 6600                       		bne.s	loc_D796
0000D8CA 0804 0001                  		btst	#1,d4
0000D8CE 6600 0000                  		bne.w	loc_D7E4
0000D8D2                            ; End of function sub_D750
0000D8D2                            
0000D8D2                            
0000D8D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D8D2                            
0000D8D2                            
0000D8D2                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000D8D2 0C05 0050                  		cmpi.b	#$50,d5
0000D8D6 6700                       		beq.s	locret_D794
0000D8D8 1019                       		move.b	(a1)+,d0
0000D8DA 4880                       		ext.w	d0
0000D8DC D042                       		add.w	d2,d0
0000D8DE 34C0                       		move.w	d0,(a2)+
0000D8E0 14D9                       		move.b	(a1)+,(a2)+
0000D8E2 5205                       		addq.b	#1,d5
0000D8E4 14C5                       		move.b	d5,(a2)+
0000D8E6 1019                       		move.b	(a1)+,d0
0000D8E8 E148                       		lsl.w	#8,d0
0000D8EA 1019                       		move.b	(a1)+,d0
0000D8EC D04B                       		add.w	a3,d0
0000D8EE 34C0                       		move.w	d0,(a2)+
0000D8F0 1019                       		move.b	(a1)+,d0
0000D8F2 4880                       		ext.w	d0
0000D8F4 D043                       		add.w	d3,d0
0000D8F6 0240 01FF                  		andi.w	#$1FF,d0
0000D8FA 6600                       		bne.s	loc_D78E
0000D8FC 5240                       		addq.w	#1,d0
0000D8FE                            
0000D8FE                            loc_D78E:
0000D8FE 34C0                       		move.w	d0,(a2)+
0000D900 51C9 FFD0                  		dbf	d1,sub_D762
0000D904                            
0000D904                            locret_D794:
0000D904 4E75                       		rts	
0000D906                            ; End of function sub_D762
0000D906                            
0000D906                            ; ===========================================================================
0000D906                            
0000D906                            loc_D796:
0000D906 0804 0001                  		btst	#1,d4
0000D90A 6600 0000                  		bne.w	loc_D82A
0000D90E                            
0000D90E                            loc_D79E:
0000D90E 0C05 0050                  		cmpi.b	#$50,d5
0000D912 6700                       		beq.s	locret_D7E2
0000D914 1019                       		move.b	(a1)+,d0
0000D916 4880                       		ext.w	d0
0000D918 D042                       		add.w	d2,d0
0000D91A 34C0                       		move.w	d0,(a2)+
0000D91C 1819                       		move.b	(a1)+,d4
0000D91E 14C4                       		move.b	d4,(a2)+
0000D920 5205                       		addq.b	#1,d5
0000D922 14C5                       		move.b	d5,(a2)+
0000D924 1019                       		move.b	(a1)+,d0
0000D926 E148                       		lsl.w	#8,d0
0000D928 1019                       		move.b	(a1)+,d0
0000D92A D04B                       		add.w	a3,d0
0000D92C 0A40 0800                  		eori.w	#$800,d0
0000D930 34C0                       		move.w	d0,(a2)+
0000D932 1019                       		move.b	(a1)+,d0
0000D934 4880                       		ext.w	d0
0000D936 4440                       		neg.w	d0
0000D938 D804                       		add.b	d4,d4
0000D93A 0244 0018                  		andi.w	#$18,d4
0000D93E 5044                       		addq.w	#8,d4
0000D940 9044                       		sub.w	d4,d0
0000D942 D043                       		add.w	d3,d0
0000D944 0240 01FF                  		andi.w	#$1FF,d0
0000D948 6600                       		bne.s	loc_D7DC
0000D94A 5240                       		addq.w	#1,d0
0000D94C                            
0000D94C                            loc_D7DC:
0000D94C 34C0                       		move.w	d0,(a2)+
0000D94E 51C9 FFBE                  		dbf	d1,loc_D79E
0000D952                            
0000D952                            locret_D7E2:
0000D952 4E75                       		rts	
0000D954                            ; ===========================================================================
0000D954                            
0000D954                            loc_D7E4:				; XREF: sub_D750
0000D954 0C05 0050                  		cmpi.b	#$50,d5
0000D958 6700                       		beq.s	locret_D828
0000D95A 1019                       		move.b	(a1)+,d0
0000D95C 1811                       		move.b	(a1),d4
0000D95E 4880                       		ext.w	d0
0000D960 4440                       		neg.w	d0
0000D962 E70C                       		lsl.b	#3,d4
0000D964 0244 0018                  		andi.w	#$18,d4
0000D968 5044                       		addq.w	#8,d4
0000D96A 9044                       		sub.w	d4,d0
0000D96C D042                       		add.w	d2,d0
0000D96E 34C0                       		move.w	d0,(a2)+
0000D970 14D9                       		move.b	(a1)+,(a2)+
0000D972 5205                       		addq.b	#1,d5
0000D974 14C5                       		move.b	d5,(a2)+
0000D976 1019                       		move.b	(a1)+,d0
0000D978 E148                       		lsl.w	#8,d0
0000D97A 1019                       		move.b	(a1)+,d0
0000D97C D04B                       		add.w	a3,d0
0000D97E 0A40 1000                  		eori.w	#$1000,d0
0000D982 34C0                       		move.w	d0,(a2)+
0000D984 1019                       		move.b	(a1)+,d0
0000D986 4880                       		ext.w	d0
0000D988 D043                       		add.w	d3,d0
0000D98A 0240 01FF                  		andi.w	#$1FF,d0
0000D98E 6600                       		bne.s	loc_D822
0000D990 5240                       		addq.w	#1,d0
0000D992                            
0000D992                            loc_D822:
0000D992 34C0                       		move.w	d0,(a2)+
0000D994 51C9 FFBE                  		dbf	d1,loc_D7E4
0000D998                            
0000D998                            locret_D828:
0000D998 4E75                       		rts	
0000D99A                            ; ===========================================================================
0000D99A                            
0000D99A                            loc_D82A:
0000D99A 0C05 0050                  		cmpi.b	#$50,d5
0000D99E 6700                       		beq.s	locret_D87C
0000D9A0 1019                       		move.b	(a1)+,d0
0000D9A2 1811                       		move.b	(a1),d4
0000D9A4 4880                       		ext.w	d0
0000D9A6 4440                       		neg.w	d0
0000D9A8 E70C                       		lsl.b	#3,d4
0000D9AA 0244 0018                  		andi.w	#$18,d4
0000D9AE 5044                       		addq.w	#8,d4
0000D9B0 9044                       		sub.w	d4,d0
0000D9B2 D042                       		add.w	d2,d0
0000D9B4 34C0                       		move.w	d0,(a2)+
0000D9B6 1819                       		move.b	(a1)+,d4
0000D9B8 14C4                       		move.b	d4,(a2)+
0000D9BA 5205                       		addq.b	#1,d5
0000D9BC 14C5                       		move.b	d5,(a2)+
0000D9BE 1019                       		move.b	(a1)+,d0
0000D9C0 E148                       		lsl.w	#8,d0
0000D9C2 1019                       		move.b	(a1)+,d0
0000D9C4 D04B                       		add.w	a3,d0
0000D9C6 0A40 1800                  		eori.w	#$1800,d0
0000D9CA 34C0                       		move.w	d0,(a2)+
0000D9CC 1019                       		move.b	(a1)+,d0
0000D9CE 4880                       		ext.w	d0
0000D9D0 4440                       		neg.w	d0
0000D9D2 D804                       		add.b	d4,d4
0000D9D4 0244 0018                  		andi.w	#$18,d4
0000D9D8 5044                       		addq.w	#8,d4
0000D9DA 9044                       		sub.w	d4,d0
0000D9DC D043                       		add.w	d3,d0
0000D9DE 0240 01FF                  		andi.w	#$1FF,d0
0000D9E2 6600                       		bne.s	loc_D876
0000D9E4 5240                       		addq.w	#1,d0
0000D9E6                            
0000D9E6                            loc_D876:
0000D9E6 34C0                       		move.w	d0,(a2)+
0000D9E8 51C9 FFB0                  		dbf	d1,loc_D82A
0000D9EC                            
0000D9EC                            locret_D87C:
0000D9EC 4E75                       		rts	
0000D9EE                            ; ---------------------------------------------------------------------------
0000D9EE                            ; Subroutine to	check if an object is on the screen
0000D9EE                            ; ---------------------------------------------------------------------------
0000D9EE                            
0000D9EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9EE                            
0000D9EE                            
0000D9EE                            ChkObjOnScreen:
0000D9EE 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000D9F2 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000D9F6 6B00                       		bmi.s	NotOnScreen
0000D9F8 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000D9FC 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D9FE                            
0000D9FE 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DA02 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DA06 6B00                       		bmi.s	NotOnScreen
0000DA08 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DA0C 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DA0E                            
0000DA0E 7000                       		moveq	#0,d0		; set flag to 0
0000DA10 4E75                       		rts	
0000DA12                            ; ===========================================================================
0000DA12                            
0000DA12                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DA12 7001                       		moveq	#1,d0		; set flag to 1
0000DA14 4E75                       		rts	
0000DA16                            ; End of function ChkObjOnScreen
0000DA16                            
0000DA16                            
0000DA16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA16                            
0000DA16                            
0000DA16                            ChkObjOnScreen2:
0000DA16 7200                       		moveq	#0,d1
0000DA18 1228 0019                  		move.b	$19(a0),d1
0000DA1C 3028 0008                  		move.w	8(a0),d0
0000DA20 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DA24 D041                       		add.w	d1,d0
0000DA26 6B00                       		bmi.s	NotOnScreen2
0000DA28 D241                       		add.w	d1,d1
0000DA2A 9041                       		sub.w	d1,d0
0000DA2C 0C40 0140                  		cmpi.w	#320,d0
0000DA30 6C00                       		bge.s	NotOnScreen2
0000DA32                            
0000DA32 3228 000C                  		move.w	$C(a0),d1
0000DA36 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DA3A 6B00                       		bmi.s	NotOnScreen2
0000DA3C 0C41 00E0                  		cmpi.w	#224,d1
0000DA40 6C00                       		bge.s	NotOnScreen2
0000DA42                            
0000DA42 7000                       		moveq	#0,d0
0000DA44 4E75                       		rts	
0000DA46                            ; ===========================================================================
0000DA46                            
0000DA46                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DA46 7001                       		moveq	#1,d0
0000DA48 4E75                       		rts	
0000DA4A                            ; End of function ChkObjOnScreen2
0000DA4A                            
0000DA4A                            ; ---------------------------------------------------------------------------
0000DA4A                            ; Subroutine to	load a level's objects
0000DA4A                            ; ---------------------------------------------------------------------------
0000DA4A                            
0000DA4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA4A                            
0000DA4A                            
0000DA4A                            ObjPosLoad:				; XREF: Level; et al
0000DA4A 7000                       		moveq	#0,d0
0000DA4C 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DA50 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DA54 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DA58                            ; End of function ObjPosLoad
0000DA58                            
0000DA58                            ; ===========================================================================
0000DA58 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DA5A 0000                       		dc.w OPL_Next-OPL_Index
0000DA5C                            ; ===========================================================================
0000DA5C                            
0000DA5C                            OPL_Main:				; XREF: OPL_Index
0000DA5C 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DA60 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DA64 ED08                       		lsl.b	#6,d0
0000DA66 E848                       		lsr.w	#4,d0
0000DA68 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DA6E 2248                       		movea.l	a0,a1
0000DA70 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DA74 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DA78 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DA7C D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DA80 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DA84 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DA88 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DA8C 34FC 0101                  		move.w	#$101,(a2)+
0000DA90 303C 005E                  		move.w	#$5E,d0
0000DA94                            
0000DA94                            OPL_ClrList:
0000DA94 429A                       		clr.l	(a2)+
0000DA96 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DA9A                            
0000DA9A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DA9E 7400                       		moveq	#0,d2
0000DAA0 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DAA4 0446 0080                  		subi.w	#$80,d6
0000DAA8 6400                       		bcc.s	loc_D93C
0000DAAA 7C00                       		moveq	#0,d6
0000DAAC                            
0000DAAC                            loc_D93C:
0000DAAC 0246 FF80                  		andi.w	#$FF80,d6
0000DAB0 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DAB4                            
0000DAB4                            loc_D944:
0000DAB4 BC50                       		cmp.w	(a0),d6
0000DAB6 6300                       		bls.s	loc_D956
0000DAB8 4A28 0004                  		tst.b	4(a0)
0000DABC 6A00                       		bpl.s	loc_D952
0000DABE 1412                       		move.b	(a2),d2
0000DAC0 5212                       		addq.b	#1,(a2)
0000DAC2                            
0000DAC2                            loc_D952:
0000DAC2 5C48                       		addq.w	#6,a0
0000DAC4 60EE                       		bra.s	loc_D944
0000DAC6                            ; ===========================================================================
0000DAC6                            
0000DAC6                            loc_D956:
0000DAC6 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DACA 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DACE 0446 0080                  		subi.w	#$80,d6
0000DAD2 6500                       		bcs.s	loc_D976
0000DAD4                            
0000DAD4                            loc_D964:
0000DAD4 BC50                       		cmp.w	(a0),d6
0000DAD6 6300                       		bls.s	loc_D976
0000DAD8 4A28 0004                  		tst.b	4(a0)
0000DADC 6A00                       		bpl.s	loc_D972
0000DADE 522A 0001                  		addq.b	#1,1(a2)
0000DAE2                            
0000DAE2                            loc_D972:
0000DAE2 5C48                       		addq.w	#6,a0
0000DAE4 60EE                       		bra.s	loc_D964
0000DAE6                            ; ===========================================================================
0000DAE6                            
0000DAE6                            loc_D976:
0000DAE6 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DAEA 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DAF0                            
0000DAF0                            OPL_Next:				; XREF: OPL_Index
0000DAF0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DAF4 7400                       		moveq	#0,d2
0000DAF6 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DAFA 0246 FF80                  		andi.w	#$FF80,d6
0000DAFE BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DB02 6700 0000                  		beq.w	locret_DA3A
0000DB06 6C00                       		bge.s	loc_D9F6
0000DB08 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DB0C 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DB10 0446 0080                  		subi.w	#$80,d6
0000DB14 6500                       		bcs.s	loc_D9D2
0000DB16                            
0000DB16                            loc_D9A6:
0000DB16 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DB1A 6C00                       		bge.s	loc_D9D2
0000DB1C 5D48                       		subq.w	#6,a0
0000DB1E 4A28 0004                  		tst.b	4(a0)
0000DB22 6A00                       		bpl.s	loc_D9BC
0000DB24 532A 0001                  		subq.b	#1,1(a2)
0000DB28 142A 0001                  		move.b	1(a2),d2
0000DB2C                            
0000DB2C                            loc_D9BC:
0000DB2C 6100 0000                  		bsr.w	loc_DA3C
0000DB30 6600                       		bne.s	loc_D9C6
0000DB32 5D48                       		subq.w	#6,a0
0000DB34 60E0                       		bra.s	loc_D9A6
0000DB36                            ; ===========================================================================
0000DB36                            
0000DB36                            loc_D9C6:
0000DB36 4A28 0004                  		tst.b	4(a0)
0000DB3A 6A00                       		bpl.s	loc_D9D0
0000DB3C 522A 0001                  		addq.b	#1,1(a2)
0000DB40                            
0000DB40                            loc_D9D0:
0000DB40 5C48                       		addq.w	#6,a0
0000DB42                            
0000DB42                            loc_D9D2:
0000DB42 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DB46 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DB4A 0646 0300                  		addi.w	#$300,d6
0000DB4E                            
0000DB4E                            loc_D9DE:
0000DB4E BC68 FFFA                  		cmp.w	-6(a0),d6
0000DB52 6E00                       		bgt.s	loc_D9F0
0000DB54 4A28 FFFE                  		tst.b	-2(a0)
0000DB58 6A00                       		bpl.s	loc_D9EC
0000DB5A 5312                       		subq.b	#1,(a2)
0000DB5C                            
0000DB5C                            loc_D9EC:
0000DB5C 5D48                       		subq.w	#6,a0
0000DB5E 60EE                       		bra.s	loc_D9DE
0000DB60                            ; ===========================================================================
0000DB60                            
0000DB60                            loc_D9F0:
0000DB60 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DB64 4E75                       		rts	
0000DB66                            ; ===========================================================================
0000DB66                            
0000DB66                            loc_D9F6:
0000DB66 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DB6A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DB6E 0646 0280                  		addi.w	#$280,d6
0000DB72                            
0000DB72                            loc_DA02:
0000DB72 BC50                       		cmp.w	(a0),d6
0000DB74 6300                       		bls.s	loc_DA16
0000DB76 4A28 0004                  		tst.b	4(a0)
0000DB7A 6A00                       		bpl.s	loc_DA10
0000DB7C 1412                       		move.b	(a2),d2
0000DB7E 5212                       		addq.b	#1,(a2)
0000DB80                            
0000DB80                            loc_DA10:
0000DB80 6100 0000                  		bsr.w	loc_DA3C
0000DB84 67EC                       		beq.s	loc_DA02
0000DB86                            
0000DB86                            loc_DA16:
0000DB86 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DB8A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DB8E 0446 0300                  		subi.w	#$300,d6
0000DB92 6500                       		bcs.s	loc_DA36
0000DB94                            
0000DB94                            loc_DA24:
0000DB94 BC50                       		cmp.w	(a0),d6
0000DB96 6300                       		bls.s	loc_DA36
0000DB98 4A28 0004                  		tst.b	4(a0)
0000DB9C 6A00                       		bpl.s	loc_DA32
0000DB9E 522A 0001                  		addq.b	#1,1(a2)
0000DBA2                            
0000DBA2                            loc_DA32:
0000DBA2 5C48                       		addq.w	#6,a0
0000DBA4 60EE                       		bra.s	loc_DA24
0000DBA6                            ; ===========================================================================
0000DBA6                            
0000DBA6                            loc_DA36:
0000DBA6 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DBAA                            
0000DBAA                            locret_DA3A:
0000DBAA 4E75                       		rts	
0000DBAC                            ; ===========================================================================
0000DBAC                            
0000DBAC                            loc_DA3C:
0000DBAC 4A28 0004                  		tst.b	4(a0)
0000DBB0 6A00                       		bpl.s	OPL_MakeItem
0000DBB2 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DBB8 6700                       		beq.s	OPL_MakeItem
0000DBBA 5C48                       		addq.w	#6,a0
0000DBBC 7000                       		moveq	#0,d0
0000DBBE 4E75                       		rts	
0000DBC0                            ; ===========================================================================
0000DBC0                            
0000DBC0                            OPL_MakeItem:
0000DBC0 6100 0000                  		bsr.w	SingleObjLoad
0000DBC4 6600                       		bne.s	locret_DA8A
0000DBC6 3358 0008                  		move.w	(a0)+,8(a1)
0000DBCA 3018                       		move.w	(a0)+,d0
0000DBCC 3200                       		move.w	d0,d1
0000DBCE 0240 0FFF                  		andi.w	#$FFF,d0
0000DBD2 3340 000C                  		move.w	d0,$C(a1)
0000DBD6 E559                       		rol.w	#2,d1
0000DBD8 0201 0003                  		andi.b	#3,d1
0000DBDC 1341 0001                  		move.b	d1,1(a1)
0000DBE0 1341 0022                  		move.b	d1,$22(a1)
0000DBE4 1018                       		move.b	(a0)+,d0
0000DBE6 6A00                       		bpl.s	loc_DA80
0000DBE8 0200 007F                  		andi.b	#$7F,d0
0000DBEC 1342 0023                  		move.b	d2,$23(a1)
0000DBF0                            
0000DBF0                            loc_DA80:
0000DBF0 1280                       		move.b	d0,0(a1)
0000DBF2 1358 0028                  		move.b	(a0)+,$28(a1)
0000DBF6 7000                       		moveq	#0,d0
0000DBF8                            
0000DBF8                            locret_DA8A:
0000DBF8 4E75                       		rts	
0000DBFA                            ; ---------------------------------------------------------------------------
0000DBFA                            ; Single object	loading	subroutine
0000DBFA                            ; ---------------------------------------------------------------------------
0000DBFA                            
0000DBFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBFA                            
0000DBFA                            
0000DBFA                            SingleObjLoad:
0000DBFA 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000DBFE 303C 005F                  		move.w	#$5F,d0
0000DC02                            
0000DC02                            loc_DA94:
0000DC02 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000DC04 6700                       		beq.s	locret_DAA0	; if yes, branch
0000DC06 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000DC0A 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000DC0E                            
0000DC0E                            locret_DAA0:
0000DC0E 4E75                       		rts	
0000DC10                            ; End of function SingleObjLoad
0000DC10                            
0000DC10                            
0000DC10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC10                            
0000DC10                            
0000DC10                            SingleObjLoad2:
0000DC10 2248                       		movea.l	a0,a1
0000DC12 303C F000                  		move.w	#-$1000,d0
0000DC16 9048                       		sub.w	a0,d0
0000DC18 EC48                       		lsr.w	#6,d0
0000DC1A 5340                       		subq.w	#1,d0
0000DC1C 6500                       		bcs.s	locret_DABC
0000DC1E                            
0000DC1E                            loc_DAB0:
0000DC1E 4A11                       		tst.b	(a1)
0000DC20 6700                       		beq.s	locret_DABC
0000DC22 43E9 0040                  		lea	$40(a1),a1
0000DC26 51C8 FFF6                  		dbf	d0,loc_DAB0
0000DC2A                            
0000DC2A                            locret_DABC:
0000DC2A 4E75                       		rts	
0000DC2C                            ; End of function SingleObjLoad2
0000DC2C                            
0000DC2C                            ; ===========================================================================
0000DC2C                            ; ---------------------------------------------------------------------------
0000DC2C                            ; Object 41 - springs
0000DC2C                            ; ---------------------------------------------------------------------------
0000DC2C                            
0000DC2C                            Obj41:					; XREF: Obj_Index
0000DC2C 7000                       		moveq	#0,d0
0000DC2E 1028 0024                  		move.b	$24(a0),d0
0000DC32 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000DC36 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000DC3A 6100 FB38                  		bsr.w	DisplaySprite
0000DC3E 3028 0008                  		move.w	8(a0),d0
0000DC42 0240 FF80                  		andi.w	#$FF80,d0
0000DC46 3238 F700                  		move.w	($FFFFF700).w,d1
0000DC4A 0441 0080                  		subi.w	#$80,d1
0000DC4E 0241 FF80                  		andi.w	#$FF80,d1
0000DC52 9041                       		sub.w	d1,d0
0000DC54 0C40 0280                  		cmpi.w	#$280,d0
0000DC58 6200 FB56                  		bhi.w	DeleteObject
0000DC5C 4E75                       		rts	
0000DC5E                            ; ===========================================================================
0000DC5E 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000DC60 0000                       		dc.w Obj41_Up-Obj41_Index
0000DC62 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000DC64 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000DC66 0000                       		dc.w Obj41_LR-Obj41_Index
0000DC68 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000DC6A 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000DC6C 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000DC6E 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000DC70 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000DC72                            
0000DC72 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000DC74 F600                       		dc.w -$A00		; power	of yellow spring
0000DC76                            ; ===========================================================================
0000DC76                            
0000DC76                            Obj41_Main:				; XREF: Obj41_Index
0000DC76 5428 0024                  		addq.b	#2,$24(a0)
0000DC7A 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000DC82 317C 0523 0002             		move.w	#$523,2(a0)
0000DC88 0028 0004 0001             		ori.b	#4,1(a0)
0000DC8E 117C 0010 0019             		move.b	#$10,$19(a0)
0000DC94 117C 0004 0018             		move.b	#4,$18(a0)
0000DC9A 1028 0028                  		move.b	$28(a0),d0
0000DC9E 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000DCA2 6700                       		beq.s	loc_DB54	; if not, branch
0000DCA4 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000DCAA 117C 0001 001C             		move.b	#1,$1C(a0)
0000DCB0 117C 0003 001A             		move.b	#3,$1A(a0)
0000DCB6 317C 0533 0002             		move.w	#$533,2(a0)
0000DCBC 117C 0008 0019             		move.b	#8,$19(a0)
0000DCC2                            
0000DCC2                            loc_DB54:
0000DCC2 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000DCC6 6700                       		beq.s	loc_DB66	; if not, branch
0000DCC8 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000DCCE 08E8 0001 0022             		bset	#1,$22(a0)
0000DCD4                            
0000DCD4                            loc_DB66:
0000DCD4 0800 0001                  		btst	#1,d0
0000DCD8 6700                       		beq.s	loc_DB72
0000DCDA 08E8 0005 0002             		bset	#5,2(a0)
0000DCE0                            
0000DCE0                            loc_DB72:
0000DCE0 0240 000F                  		andi.w	#$F,d0
0000DCE4 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000DCEA 4E75                       		rts	
0000DCEC                            ; ===========================================================================
0000DCEC                            
0000DCEC                            Obj41_Up:				; XREF: Obj41_Index
0000DCEC 323C 001B                  		move.w	#$1B,d1
0000DCF0 343C 0008                  		move.w	#8,d2
0000DCF4 363C 0010                  		move.w	#$10,d3
0000DCF8 3828 0008                  		move.w	8(a0),d4
0000DCFC 6100 0000                  		bsr.w	SolidObject
0000DD00 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000DD04 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000DD06 4E75                       		rts	
0000DD08                            ; ===========================================================================
0000DD08                            
0000DD08                            Obj41_BounceUp:				; XREF: Obj41_Up
0000DD08 5428 0024                  		addq.b	#2,$24(a0)
0000DD0C 5069 000C                  		addq.w	#8,$C(a1)
0000DD10 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000DD16 08E9 0001 0022             		bset	#1,$22(a1)
0000DD1C 08A9 0003 0022             		bclr	#3,$22(a1)
0000DD22 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000DD28 137C 0002 0024             		move.b	#2,$24(a1)
0000DD2E 08A8 0003 0022             		bclr	#3,$22(a0)
0000DD34 4228 0025                  		clr.b	$25(a0)
0000DD38 303C 00CC                  		move.w	#$CC,d0
0000DD3C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DD42                            
0000DD42                            Obj41_AniUp:				; XREF: Obj41_Index
0000DD42 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DD48 6000 CADC                  		bra.w	AnimateSprite
0000DD4C                            ; ===========================================================================
0000DD4C                            
0000DD4C                            Obj41_ResetUp:				; XREF: Obj41_Index
0000DD4C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DD52 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000DD56 4E75                       		rts	
0000DD58                            ; ===========================================================================
0000DD58                            
0000DD58                            Obj41_LR:				; XREF: Obj41_Index
0000DD58 323C 0013                  		move.w	#$13,d1
0000DD5C 343C 000E                  		move.w	#$E,d2
0000DD60 363C 000F                  		move.w	#$F,d3
0000DD64 3828 0008                  		move.w	8(a0),d4
0000DD68 6100 0000                  		bsr.w	SolidObject
0000DD6C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DD72 6600                       		bne.s	loc_DC0C
0000DD74 117C 0008 0024             		move.b	#8,$24(a0)
0000DD7A                            
0000DD7A                            loc_DC0C:
0000DD7A 0828 0005 0022             		btst	#5,$22(a0)
0000DD80 6600                       		bne.s	Obj41_BounceLR
0000DD82 4E75                       		rts	
0000DD84                            ; ===========================================================================
0000DD84                            
0000DD84                            Obj41_BounceLR:				; XREF: Obj41_LR
0000DD84 5428 0024                  		addq.b	#2,$24(a0)
0000DD88 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000DD8E 5069 0008                  		addq.w	#8,8(a1)
0000DD92 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000DD98 6600                       		bne.s	loc_DC36	; if yes, branch
0000DD9A 0469 0010 0008             		subi.w	#$10,8(a1)
0000DDA0 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000DDA4                            
0000DDA4                            loc_DC36:
0000DDA4 337C 000F 003E             		move.w	#$F,$3E(a1)
0000DDAA 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DDB0 0869 0000 0022             		bchg	#0,$22(a1)
0000DDB6 0829 0002 0022             		btst	#2,$22(a1)
0000DDBC 6600                       		bne.s	loc_DC56
0000DDBE 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000DDC4                            
0000DDC4                            loc_DC56:
0000DDC4 08A8 0005 0022             		bclr	#5,$22(a0)
0000DDCA 08A9 0005 0022             		bclr	#5,$22(a1)
0000DDD0 303C 00CC                  		move.w	#$CC,d0
0000DDD4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DDDA                            
0000DDDA                            Obj41_AniLR:				; XREF: Obj41_Index
0000DDDA 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DDE0 6000 CA44                  		bra.w	AnimateSprite
0000DDE4                            ; ===========================================================================
0000DDE4                            
0000DDE4                            Obj41_ResetLR:				; XREF: Obj41_Index
0000DDE4 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000DDEA 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000DDEE 4E75                       		rts	
0000DDF0                            ; ===========================================================================
0000DDF0                            
0000DDF0                            Obj41_Dwn:				; XREF: Obj41_Index
0000DDF0 323C 001B                  		move.w	#$1B,d1
0000DDF4 343C 0008                  		move.w	#8,d2
0000DDF8 363C 0010                  		move.w	#$10,d3
0000DDFC 3828 0008                  		move.w	8(a0),d4
0000DE00 6100 0000                  		bsr.w	SolidObject
0000DE04 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DE0A 6600                       		bne.s	loc_DCA4
0000DE0C 117C 000E 0024             		move.b	#$E,$24(a0)
0000DE12                            
0000DE12                            loc_DCA4:
0000DE12 4A28 0025                  		tst.b	$25(a0)
0000DE16 6600                       		bne.s	locret_DCAE
0000DE18 4A44                       		tst.w	d4
0000DE1A 6B00                       		bmi.s	Obj41_BounceDwn
0000DE1C                            
0000DE1C                            locret_DCAE:
0000DE1C 4E75                       		rts	
0000DE1E                            ; ===========================================================================
0000DE1E                            
0000DE1E                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000DE1E 5428 0024                  		addq.b	#2,$24(a0)
0000DE22 5169 000C                  		subq.w	#8,$C(a1)
0000DE26 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000DE2C 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000DE30 08E9 0001 0022             		bset	#1,$22(a1)
0000DE36 08A9 0003 0022             		bclr	#3,$22(a1)
0000DE3C 137C 0002 0024             		move.b	#2,$24(a1)
0000DE42 08A8 0003 0022             		bclr	#3,$22(a0)
0000DE48 4228 0025                  		clr.b	$25(a0)
0000DE4C 303C 00CC                  		move.w	#$CC,d0
0000DE50 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DE56                            
0000DE56                            Obj41_AniDwn:				; XREF: Obj41_Index
0000DE56 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DE5C 6000 C9C8                  		bra.w	AnimateSprite
0000DE60                            ; ===========================================================================
0000DE60                            
0000DE60                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000DE60 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DE66 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000DE6A 4E75                       		rts	
0000DE6C                            ; ===========================================================================
0000DE6C                            Ani_obj41:
0000DE6C                            	include "_anim\obj41.asm"
0000DE6C                            ; ---------------------------------------------------------------------------
0000DE6C                            ; Animation script - springs
0000DE6C                            ; ---------------------------------------------------------------------------
0000DE6C 0000                       		dc.w byte_DD02-Ani_obj41
0000DE6E 0000                       		dc.w byte_DD0E-Ani_obj41
0000DE70 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000DE7C 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000DE88                            		even
0000DE88                            		even
0000DE88                            
0000DE88                            ; ---------------------------------------------------------------------------
0000DE88                            ; Sprite mappings - springs
0000DE88                            ; ---------------------------------------------------------------------------
0000DE88                            Map_obj41:
0000DE88                            	include "_maps\obj41.asm"
0000DE88                            ; ---------------------------------------------------------------------------
0000DE88                            ; Sprite mappings - springs
0000DE88                            ; ---------------------------------------------------------------------------
0000DE88 0000                       		dc.w byte_DD26-Map_obj41
0000DE8A 0000                       		dc.w byte_DD31-Map_obj41
0000DE8C 0000                       		dc.w byte_DD37-Map_obj41
0000DE8E 0000                       		dc.w byte_DD47-Map_obj41
0000DE90 0000                       		dc.w byte_DD4D-Map_obj41
0000DE92 0000                       		dc.w byte_DD53-Map_obj41
0000DE94 02                         byte_DD26:	dc.b 2
0000DE95 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000DE9A 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000DE9F 01                         byte_DD31:	dc.b 1
0000DEA0 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000DEA5 03                         byte_DD37:	dc.b 3
0000DEA6 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000DEAB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000DEB0 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000DEB5 01                         byte_DD47:	dc.b 1
0000DEB6 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000DEBB 01                         byte_DD4D:	dc.b 1
0000DEBC F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000DEC1 04                         byte_DD53:	dc.b 4
0000DEC2 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000DEC7 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000DECC F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000DED1 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000DED6                            		even
0000DED6                            		even
0000DED6                            
0000DED6                            ; ===========================================================================
0000DED6                            ; ---------------------------------------------------------------------------
0000DED6                            ; Object 42 - Newtron enemy (GHZ)
0000DED6                            ; ---------------------------------------------------------------------------
0000DED6                            
0000DED6                            Obj42:					; XREF: Obj_Index
0000DED6 7000                       		moveq	#0,d0
0000DED8 1028 0024                  		move.b	$24(a0),d0
0000DEDC 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000DEE0 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000DEE4                            ; ===========================================================================
0000DEE4 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000DEE6 0000                       		dc.w Obj42_Action-Obj42_Index
0000DEE8 0000                       		dc.w Obj42_Delete-Obj42_Index
0000DEEA                            ; ===========================================================================
0000DEEA                            
0000DEEA                            Obj42_Main:				; XREF: Obj42_Index
0000DEEA 5428 0024                  		addq.b	#2,$24(a0)
0000DEEE 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000DEF6 317C 049B 0002             		move.w	#$49B,2(a0)
0000DEFC 117C 0004 0001             		move.b	#4,1(a0)
0000DF02 117C 0004 0018             		move.b	#4,$18(a0)
0000DF08 117C 0014 0019             		move.b	#$14,$19(a0)
0000DF0E 117C 0010 0016             		move.b	#$10,$16(a0)
0000DF14 117C 0008 0017             		move.b	#8,$17(a0)
0000DF1A                            
0000DF1A                            Obj42_Action:				; XREF: Obj42_Index
0000DF1A 7000                       		moveq	#0,d0
0000DF1C 1028 0025                  		move.b	$25(a0),d0
0000DF20 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000DF24 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000DF28 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000DF2E 6100 C8F6                  		bsr.w	AnimateSprite
0000DF32 6000 0000                  		bra.w	MarkObjGone
0000DF36                            ; ===========================================================================
0000DF36 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000DF38 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000DF3A 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000DF3C 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000DF3E 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000DF40                            ; ===========================================================================
0000DF40                            
0000DF40                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000DF40 08E8 0000 0022             		bset	#0,$22(a0)
0000DF46 3038 D008                  		move.w	($FFFFD008).w,d0
0000DF4A 9068 0008                  		sub.w	8(a0),d0
0000DF4E 6400                       		bcc.s	loc_DDEA
0000DF50 4440                       		neg.w	d0
0000DF52 08A8 0000 0022             		bclr	#0,$22(a0)
0000DF58                            
0000DF58                            loc_DDEA:
0000DF58 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000DF5C 6400                       		bcc.s	locret_DE12	; if not, branch
0000DF5E 5428 0025                  		addq.b	#2,$25(a0)
0000DF62 117C 0001 001C             		move.b	#1,$1C(a0)
0000DF68 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000DF6C 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000DF6E 317C 249B 0002             		move.w	#$249B,2(a0)
0000DF74 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000DF7A 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000DF80                            
0000DF80                            locret_DE12:
0000DF80 4E75                       		rts	
0000DF82                            ; ===========================================================================
0000DF82                            
0000DF82                            Obj42_Type00:				; XREF: Obj42_Index2
0000DF82 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000DF88 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000DF8A 08E8 0000 0022             		bset	#0,$22(a0)
0000DF90 3038 D008                  		move.w	($FFFFD008).w,d0
0000DF94 9068 0008                  		sub.w	8(a0),d0
0000DF98 6400                       		bcc.s	locret_DE32
0000DF9A 08A8 0000 0022             		bclr	#0,$22(a0)
0000DFA0                            
0000DFA0                            locret_DE32:
0000DFA0 4E75                       		rts	
0000DFA2                            ; ===========================================================================
0000DFA2                            
0000DFA2                            Obj42_Fall:				; XREF: Obj42_Type00
0000DFA2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DFA8 6600                       		bne.s	loc_DE42
0000DFAA 117C 000C 0020             		move.b	#$C,$20(a0)
0000DFB0                            
0000DFB0                            loc_DE42:
0000DFB0 6100 F770                  		bsr.w	ObjectFall
0000DFB4 6100 0000                  		bsr.w	ObjHitFloor
0000DFB8 4A41                       		tst.w	d1		; has newtron hit the floor?
0000DFBA 6A00                       		bpl.s	locret_DE86	; if not, branch
0000DFBC D368 000C                  		add.w	d1,$C(a0)
0000DFC0 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000DFC6 5428 0025                  		addq.b	#2,$25(a0)
0000DFCA 117C 0002 001C             		move.b	#2,$1C(a0)
0000DFD0 0828 0005 0002             		btst	#5,2(a0)
0000DFD6 6700                       		beq.s	Obj42_Move
0000DFD8 5228 001C                  		addq.b	#1,$1C(a0)
0000DFDC                            
0000DFDC                            Obj42_Move:
0000DFDC 117C 000D 0020             		move.b	#$D,$20(a0)
0000DFE2 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000DFE8 0828 0000 0022             		btst	#0,$22(a0)
0000DFEE 6600                       		bne.s	locret_DE86
0000DFF0 4468 0010                  		neg.w	$10(a0)
0000DFF4                            
0000DFF4                            locret_DE86:
0000DFF4 4E75                       		rts	
0000DFF6                            ; ===========================================================================
0000DFF6                            
0000DFF6                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000DFF6 6100 F756                  		bsr.w	SpeedToPos
0000DFFA 6100 0000                  		bsr.w	ObjHitFloor
0000DFFE 0C41 FFF8                  		cmpi.w	#-8,d1
0000E002 6D00                       		blt.s	loc_DEA2
0000E004 0C41 000C                  		cmpi.w	#$C,d1
0000E008 6C00                       		bge.s	loc_DEA2
0000E00A D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E00E 4E75                       		rts	
0000E010                            ; ===========================================================================
0000E010                            
0000E010                            loc_DEA2:
0000E010 5428 0025                  		addq.b	#2,$25(a0)
0000E014 4E75                       		rts	
0000E016                            ; ===========================================================================
0000E016                            
0000E016                            Obj42_Speed:				; XREF: Obj42_Index2
0000E016 6100 F736                  		bsr.w	SpeedToPos
0000E01A 4E75                       		rts	
0000E01C                            ; ===========================================================================
0000E01C                            
0000E01C                            Obj42_Type01:				; XREF: Obj42_Index2
0000E01C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E022 6600                       		bne.s	Obj42_FireMissile
0000E024 117C 000C 0020             		move.b	#$C,$20(a0)
0000E02A                            
0000E02A                            Obj42_FireMissile:
0000E02A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E030 6600                       		bne.s	locret_DF14
0000E032 4A28 0032                  		tst.b	$32(a0)
0000E036 6600                       		bne.s	locret_DF14
0000E038 117C 0001 0032             		move.b	#1,$32(a0)
0000E03E 6100 FBBA                  		bsr.w	SingleObjLoad
0000E042 6600                       		bne.s	locret_DF14
0000E044 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E048 3368 0008 0008             		move.w	8(a0),8(a1)
0000E04E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E054 5169 000C                  		subq.w	#8,$C(a1)
0000E058 337C 0200 0010             		move.w	#$200,$10(a1)
0000E05E 303C 0014                  		move.w	#$14,d0
0000E062 0828 0000 0022             		btst	#0,$22(a0)
0000E068 6600                       		bne.s	loc_DF04
0000E06A 4440                       		neg.w	d0
0000E06C 4469 0010                  		neg.w	$10(a1)
0000E070                            
0000E070                            loc_DF04:
0000E070 D169 0008                  		add.w	d0,8(a1)
0000E074 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E07A 137C 0001 0028             		move.b	#1,$28(a1)
0000E080                            
0000E080                            locret_DF14:
0000E080 4E75                       		rts	
0000E082                            ; ===========================================================================
0000E082                            
0000E082                            Obj42_Delete:				; XREF: Obj42_Index
0000E082 6000 F72C                  		bra.w	DeleteObject
0000E086                            ; ===========================================================================
0000E086                            Ani_obj42:
0000E086                            	include "_anim\obj42.asm"
0000E086                            ; ---------------------------------------------------------------------------
0000E086                            ; Animation script - Newtron enemy
0000E086                            ; ---------------------------------------------------------------------------
0000E086 0000                       		dc.w byte_DF24-Ani_obj42
0000E088 0000                       		dc.w byte_DF28-Ani_obj42
0000E08A 0000                       		dc.w byte_DF30-Ani_obj42
0000E08C 0000                       		dc.w byte_DF34-Ani_obj42
0000E08E 0000                       		dc.w byte_DF38-Ani_obj42
0000E090 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E094 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E09C 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E0A0 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E0A4 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E0AE                            		even
0000E0AE                            		even
0000E0AE                            
0000E0AE                            ; ---------------------------------------------------------------------------
0000E0AE                            ; Sprite mappings - Newtron enemy (GHZ)
0000E0AE                            ; ---------------------------------------------------------------------------
0000E0AE                            Map_obj42:
0000E0AE                            	include "_maps\obj42.asm"
0000E0AE                            ; ---------------------------------------------------------------------------
0000E0AE                            ; Sprite mappings - Newtron enemy (GHZ)
0000E0AE                            ; ---------------------------------------------------------------------------
0000E0AE 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E0B2 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E0B6 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E0BA 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E0BE 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E0C2 0000                       		dc.w byte_DFF8-Map_obj42
0000E0C4 03                         byte_DF58:	dc.b 3
0000E0C5 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E0CA F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E0CF FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E0D4 03                         byte_DF68:	dc.b 3
0000E0D5 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E0DA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E0DF FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E0E4 03                         byte_DF78:	dc.b 3
0000E0E5 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E0EA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E0EF FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E0F4 04                         byte_DF88:	dc.b 4
0000E0F5 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E0FA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E0FF FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E104 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E109 03                         byte_DF9D:	dc.b 3
0000E10A F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E10F FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E114 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E119 02                         byte_DFAD:	dc.b 2
0000E11A F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E11F F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E124 03                         byte_DFB8:	dc.b 3
0000E125 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E12A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E12F FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E134 03                         byte_DFC8:	dc.b 3
0000E135 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E13A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E13F FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E144 03                         byte_DFD8:	dc.b 3
0000E145 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E14A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E14F FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E154 03                         byte_DFE8:	dc.b 3
0000E155 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E15A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E15F FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E164 00                         byte_DFF8:	dc.b 0
0000E166 00                         		even
0000E166 00                         		even
0000E166                            
0000E166                            ; ===========================================================================
0000E166                            ; ---------------------------------------------------------------------------
0000E166                            ; Object 43 - Roller enemy (SYZ)
0000E166                            ; ---------------------------------------------------------------------------
0000E166                            
0000E166                            Obj43:					; XREF: Obj_Index
0000E166 7000                       		moveq	#0,d0
0000E168 1028 0024                  		move.b	$24(a0),d0
0000E16C 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E170 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E174                            ; ===========================================================================
0000E174 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E176 0000                       		dc.w Obj43_Action-Obj43_Index
0000E178                            ; ===========================================================================
0000E178                            
0000E178                            Obj43_Main:				; XREF: Obj43_Index
0000E178 117C 000E 0016             		move.b	#$E,$16(a0)
0000E17E 117C 0008 0017             		move.b	#8,$17(a0)
0000E184 6100 F59C                  		bsr.w	ObjectFall
0000E188 6100 0000                  		bsr.w	ObjHitFloor
0000E18C 4A41                       		tst.w	d1
0000E18E 6A00                       		bpl.s	locret_E052
0000E190 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E194 317C 0000 0012             		move.w	#0,$12(a0)
0000E19A 5428 0024                  		addq.b	#2,$24(a0)
0000E19E 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E1A6 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E1AC 117C 0004 0001             		move.b	#4,1(a0)
0000E1B2 117C 0004 0018             		move.b	#4,$18(a0)
0000E1B8 117C 0010 0019             		move.b	#$10,$19(a0)
0000E1BE                            
0000E1BE                            locret_E052:
0000E1BE 4E75                       		rts	
0000E1C0                            ; ===========================================================================
0000E1C0                            
0000E1C0                            Obj43_Action:				; XREF: Obj43_Index
0000E1C0 7000                       		moveq	#0,d0
0000E1C2 1028 0025                  		move.b	$25(a0),d0
0000E1C6 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E1CA 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E1CE 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E1D4 6100 C650                  		bsr.w	AnimateSprite
0000E1D8 3028 0008                  		move.w	8(a0),d0
0000E1DC 0240 FF80                  		andi.w	#$FF80,d0
0000E1E0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E1E4 0441 0080                  		subi.w	#$80,d1
0000E1E8 0241 FF80                  		andi.w	#$FF80,d1
0000E1EC 9041                       		sub.w	d1,d0
0000E1EE 0C40 0280                  		cmpi.w	#$280,d0
0000E1F2 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E1F6 6000 F57C                  		bra.w	DisplaySprite
0000E1FA                            ; ===========================================================================
0000E1FA                            
0000E1FA                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E1FA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E1FE 7000                       		moveq	#0,d0
0000E200 1028 0023                  		move.b	$23(a0),d0
0000E204 6700                       		beq.s	Obj43_Delete
0000E206 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E20C                            
0000E20C                            Obj43_Delete:
0000E20C 6000 F5A2                  		bra.w	DeleteObject
0000E210                            ; ===========================================================================
0000E210 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E212 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E214 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E216 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E218                            ; ===========================================================================
0000E218                            
0000E218                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E218 3038 D008                  		move.w	($FFFFD008).w,d0
0000E21C 0440 0100                  		subi.w	#$100,d0
0000E220 6500                       		bcs.s	loc_E0D2
0000E222 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E226 6500                       		bcs.s	loc_E0D2
0000E228 5828 0025                  		addq.b	#4,$25(a0)
0000E22C 117C 0002 001C             		move.b	#2,$1C(a0)
0000E232 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E238 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E23E                            
0000E23E                            loc_E0D2:
0000E23E 588F                       		addq.l	#4,sp
0000E240 4E75                       		rts	
0000E242                            ; ===========================================================================
0000E242                            
0000E242                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E242 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E248 6700                       		beq.s	loc_E0F8
0000E24A 5368 0030                  		subq.w	#1,$30(a0)
0000E24E 6A00                       		bpl.s	locret_E0F6
0000E250 117C 0001 001C             		move.b	#1,$1C(a0)
0000E256 317C 0700 0010             		move.w	#$700,$10(a0)
0000E25C 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E262                            
0000E262                            locret_E0F6:
0000E262 4E75                       		rts	
0000E264                            ; ===========================================================================
0000E264                            
0000E264                            loc_E0F8:
0000E264 5428 0025                  		addq.b	#2,$25(a0)
0000E268 4E75                       		rts	
0000E26A                            ; ===========================================================================
0000E26A                            
0000E26A                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E26A 6100 0000                  		bsr.w	Obj43_Stop
0000E26E 6100 F4DE                  		bsr.w	SpeedToPos
0000E272 6100 0000                  		bsr.w	ObjHitFloor
0000E276 0C41 FFF8                  		cmpi.w	#-8,d1
0000E27A 6D00                       		blt.s	Obj43_Jump
0000E27C 0C41 000C                  		cmpi.w	#$C,d1
0000E280 6C00                       		bge.s	Obj43_Jump
0000E282 D368 000C                  		add.w	d1,$C(a0)
0000E286 4E75                       		rts	
0000E288                            ; ===========================================================================
0000E288                            
0000E288                            Obj43_Jump:
0000E288 5428 0025                  		addq.b	#2,$25(a0)
0000E28C 08E8 0000 0032             		bset	#0,$32(a0)
0000E292 6700                       		beq.s	locret_E12E
0000E294 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E29A                            
0000E29A                            locret_E12E:
0000E29A 4E75                       		rts	
0000E29C                            ; ===========================================================================
0000E29C                            
0000E29C                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E29C 6100 F484                  		bsr.w	ObjectFall
0000E2A0 4A68 0012                  		tst.w	$12(a0)
0000E2A4 6B00                       		bmi.s	locret_E150
0000E2A6 6100 0000                  		bsr.w	ObjHitFloor
0000E2AA 4A41                       		tst.w	d1
0000E2AC 6A00                       		bpl.s	locret_E150
0000E2AE D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E2B2 5528 0025                  		subq.b	#2,$25(a0)
0000E2B6 317C 0000 0012             		move.w	#0,$12(a0)
0000E2BC                            
0000E2BC                            locret_E150:
0000E2BC 4E75                       		rts	
0000E2BE                            
0000E2BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2BE                            
0000E2BE                            
0000E2BE                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E2BE 4A28 0032                  		tst.b	$32(a0)
0000E2C2 6B00                       		bmi.s	locret_E188
0000E2C4 3038 D008                  		move.w	($FFFFD008).w,d0
0000E2C8 0440 0030                  		subi.w	#$30,d0
0000E2CC 9068 0008                  		sub.w	8(a0),d0
0000E2D0 6400                       		bcc.s	locret_E188
0000E2D2 117C 0000 001C             		move.b	#0,$1C(a0)
0000E2D8 117C 000E 0020             		move.b	#$E,$20(a0)
0000E2DE 4268 0010                  		clr.w	$10(a0)
0000E2E2 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E2E8 117C 0002 0025             		move.b	#2,$25(a0)
0000E2EE 08E8 0007 0032             		bset	#7,$32(a0)
0000E2F4                            
0000E2F4                            locret_E188:
0000E2F4 4E75                       		rts	
0000E2F6                            ; End of function Obj43_Stop
0000E2F6                            
0000E2F6                            ; ===========================================================================
0000E2F6                            Ani_obj43:
0000E2F6                            	include "_anim\obj43.asm"
0000E2F6                            ; ---------------------------------------------------------------------------
0000E2F6                            ; Animation script - Roller enemy
0000E2F6                            ; ---------------------------------------------------------------------------
0000E2F6 0000                       		dc.w byte_E190-Ani_obj43
0000E2F8 0000                       		dc.w byte_E196-Ani_obj43
0000E2FA 0000                       		dc.w byte_E19C-Ani_obj43
0000E2FC 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E302 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E308 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E30E 00                         		even
0000E30E 00                         		even
0000E30E                            
0000E30E                            ; ---------------------------------------------------------------------------
0000E30E                            ; Sprite mappings - Roller enemy (SYZ)
0000E30E                            ; ---------------------------------------------------------------------------
0000E30E                            Map_obj43:
0000E30E                            	include "_maps\obj43.asm"
0000E30E                            ; ---------------------------------------------------------------------------
0000E30E                            ; Sprite mappings - Roller enemy (SYZ)
0000E30E                            ; ---------------------------------------------------------------------------
0000E30E 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E312 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E316 0000                       		dc.w byte_E1CE-Map_obj43
0000E318 02                         byte_E1AC:	dc.b 2
0000E319 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E31E F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E323 02                         byte_E1B7:	dc.b 2
0000E324 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E329 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E32E 01                         byte_E1C2:	dc.b 1
0000E32F F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E334 01                         byte_E1C8:	dc.b 1
0000E335 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E33A 01                         byte_E1CE:	dc.b 1
0000E33B F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E340                            		even
0000E340                            		even
0000E340                            
0000E340                            ; ===========================================================================
0000E340                            ; ---------------------------------------------------------------------------
0000E340                            ; Object 44 - walls (GHZ)
0000E340                            ; ---------------------------------------------------------------------------
0000E340                            
0000E340                            Obj44:					; XREF: Obj_Index
0000E340 7000                       		moveq	#0,d0
0000E342 1028 0024                  		move.b	$24(a0),d0
0000E346 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E34A 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E34E                            ; ===========================================================================
0000E34E 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E350 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E352 0000                       		dc.w Obj44_Display-Obj44_Index
0000E354                            ; ===========================================================================
0000E354                            
0000E354                            Obj44_Main:				; XREF: Obj44_Index
0000E354 5428 0024                  		addq.b	#2,$24(a0)
0000E358 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E360 317C 434C 0002             		move.w	#$434C,2(a0)
0000E366 0028 0004 0001             		ori.b	#4,1(a0)
0000E36C 117C 0008 0019             		move.b	#8,$19(a0)
0000E372 117C 0006 0018             		move.b	#6,$18(a0)
0000E378 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E37E 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E384 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E386 5428 0024                  		addq.b	#2,$24(a0)
0000E38A 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E38C                            ; ===========================================================================
0000E38C                            
0000E38C                            Obj44_Solid:				; XREF: Obj44_Index
0000E38C 323C 0013                  		move.w	#$13,d1
0000E390 343C 0028                  		move.w	#$28,d2
0000E394 6100 A7FE                  		bsr.w	Obj44_SolidWall
0000E398                            
0000E398                            Obj44_Display:				; XREF: Obj44_Index
0000E398 6100 F3DA                  		bsr.w	DisplaySprite
0000E39C 3028 0008                  		move.w	8(a0),d0
0000E3A0 0240 FF80                  		andi.w	#$FF80,d0
0000E3A4 3238 F700                  		move.w	($FFFFF700).w,d1
0000E3A8 0441 0080                  		subi.w	#$80,d1
0000E3AC 0241 FF80                  		andi.w	#$FF80,d1
0000E3B0 9041                       		sub.w	d1,d0
0000E3B2 0C40 0280                  		cmpi.w	#$280,d0
0000E3B6 6200 F3F8                  		bhi.w	DeleteObject
0000E3BA 4E75                       		rts	
0000E3BC                            ; ===========================================================================
0000E3BC                            ; ---------------------------------------------------------------------------
0000E3BC                            ; Sprite mappings - walls (GHZ)
0000E3BC                            ; ---------------------------------------------------------------------------
0000E3BC                            Map_obj44:
0000E3BC                            	include "_maps\obj44.asm"
0000E3BC                            ; ---------------------------------------------------------------------------
0000E3BC                            ; Sprite mappings - walls (GHZ)
0000E3BC                            ; ---------------------------------------------------------------------------
0000E3BC 0000                       		dc.w byte_E256-Map_obj44
0000E3BE 0000                       		dc.w byte_E26B-Map_obj44
0000E3C0 0000                       		dc.w byte_E280-Map_obj44
0000E3C2 04                         byte_E256:	dc.b 4
0000E3C3 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E3C8 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E3CD 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E3D2 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E3D7 04                         byte_E26B:	dc.b 4
0000E3D8 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E3DD F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E3E2 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E3E7 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E3EC 04                         byte_E280:	dc.b 4
0000E3ED E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E3F2 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E3F7 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E3FC 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E402 00                         		even
0000E402 00                         		even
0000E402                            
0000E402                            ; ===========================================================================
0000E402                            ; ---------------------------------------------------------------------------
0000E402                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E402                            ; ---------------------------------------------------------------------------
0000E402                            
0000E402                            Obj13:					; XREF: Obj_Index
0000E402 7000                       		moveq	#0,d0
0000E404 1028 0024                  		move.b	$24(a0),d0
0000E408 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E40C 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E410 6000 0000                  		bra.w	Obj14_ChkDel
0000E414                            ; ===========================================================================
0000E414 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E416 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E418                            ; ---------------------------------------------------------------------------
0000E418                            ;
0000E418                            ; Lava ball production rates
0000E418                            ;
0000E418 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E41E                            ; ===========================================================================
0000E41E                            
0000E41E                            Obj13_Main:				; XREF: Obj13_Index
0000E41E 5428 0024                  		addq.b	#2,$24(a0)
0000E422 1028 0028                  		move.b	$28(a0),d0
0000E426 E848                       		lsr.w	#4,d0
0000E428 0240 000F                  		andi.w	#$F,d0
0000E42C 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E432 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E438 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E43E                            
0000E43E                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E43E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E442 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E444 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E44A 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E44E 6600                       		bne.s	locret_E302
0000E450 6100 F7A8                  		bsr.w	SingleObjLoad
0000E454 6600                       		bne.s	locret_E302
0000E456 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E45A 3368 0008 0008             		move.w	8(a0),8(a1)
0000E460 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E466 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E46C                            
0000E46C                            locret_E302:
0000E46C 4E75                       		rts	
0000E46E                            ; ===========================================================================
0000E46E                            ; ---------------------------------------------------------------------------
0000E46E                            ; Object 14 - lava balls (MZ, SLZ)
0000E46E                            ; ---------------------------------------------------------------------------
0000E46E                            
0000E46E                            Obj14:					; XREF: Obj_Index
0000E46E 7000                       		moveq	#0,d0
0000E470 1028 0024                  		move.b	$24(a0),d0
0000E474 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E478 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E47C 6000 F2F6                  		bra.w	DisplaySprite
0000E480                            ; ===========================================================================
0000E480 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E482 0000                       		dc.w Obj14_Action-Obj14_Index
0000E484 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E486                            
0000E486 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E490 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E498                            ; ===========================================================================
0000E498                            
0000E498                            Obj14_Main:				; XREF: Obj14_Index
0000E498 5428 0024                  		addq.b	#2,$24(a0)
0000E49C 117C 0008 0016             		move.b	#8,$16(a0)
0000E4A2 117C 0008 0017             		move.b	#8,$17(a0)
0000E4A8 217C 0000 B438 0004        		move.l	#Map_obj14,4(a0)
0000E4B0 317C 0345 0002             		move.w	#$345,2(a0)
0000E4B6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E4BC 6600                       		bne.s	loc_E35A
0000E4BE 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E4C4                            
0000E4C4                            loc_E35A:
0000E4C4 117C 0004 0001             		move.b	#4,1(a0)
0000E4CA 117C 0003 0018             		move.b	#3,$18(a0)
0000E4D0 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E4D6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E4DC 4A28 0029                  		tst.b	$29(a0)
0000E4E0 6700                       		beq.s	Obj14_SetSpeed
0000E4E2 5428 0018                  		addq.b	#2,$18(a0)
0000E4E6                            
0000E4E6                            Obj14_SetSpeed:
0000E4E6 7000                       		moveq	#0,d0
0000E4E8 1028 0028                  		move.b	$28(a0),d0
0000E4EC D040                       		add.w	d0,d0
0000E4EE 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E4F4 117C 0008 0019             		move.b	#8,$19(a0)
0000E4FA 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E500 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E502 117C 0010 0019             		move.b	#$10,$19(a0)
0000E508 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E50E 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E514 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E51A                            
0000E51A                            Obj14_PlaySnd:
0000E51A 303C 00AE                  		move.w	#$AE,d0
0000E51E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E524                            
0000E524                            Obj14_Action:				; XREF: Obj14_Index
0000E524 7000                       		moveq	#0,d0
0000E526 1028 0028                  		move.b	$28(a0),d0
0000E52A D040                       		add.w	d0,d0
0000E52C 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E530 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E534 6100 F218                  		bsr.w	SpeedToPos
0000E538 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E53E 6100 C2E6                  		bsr.w	AnimateSprite
0000E542                            
0000E542                            Obj14_ChkDel:				; XREF: Obj13
0000E542 3028 0008                  		move.w	8(a0),d0
0000E546 0240 FF80                  		andi.w	#$FF80,d0
0000E54A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E54E 0441 0080                  		subi.w	#$80,d1
0000E552 0241 FF80                  		andi.w	#$FF80,d1
0000E556 9041                       		sub.w	d1,d0
0000E558 0C40 0280                  		cmpi.w	#$280,d0
0000E55C 6200 F252                  		bhi.w	DeleteObject
0000E560 4E75                       		rts	
0000E562                            ; ===========================================================================
0000E562 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E566 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E56A 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E56E 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E572 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E574                            ; ===========================================================================
0000E574                            ; lavaball types 00-03 fly up and fall back down
0000E574                            
0000E574                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E574 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E57A 3028 0030                  		move.w	$30(a0),d0
0000E57E B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E582 6400                       		bcc.s	loc_E41E	; if not, branch
0000E584 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E588                            
0000E588                            loc_E41E:
0000E588 08A8 0001 0022             		bclr	#1,$22(a0)
0000E58E 4A68 0012                  		tst.w	$12(a0)
0000E592 6A00                       		bpl.s	locret_E430
0000E594 08E8 0001 0022             		bset	#1,$22(a0)
0000E59A                            
0000E59A                            locret_E430:
0000E59A 4E75                       		rts	
0000E59C                            ; ===========================================================================
0000E59C                            ; lavaball type	04 flies up until it hits the ceiling
0000E59C                            
0000E59C                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E59C 08E8 0001 0022             		bset	#1,$22(a0)
0000E5A2 6100 0000                  		bsr.w	ObjHitCeiling
0000E5A6 4A41                       		tst.w	d1
0000E5A8 6A00                       		bpl.s	locret_E452
0000E5AA 117C 0008 0028             		move.b	#8,$28(a0)
0000E5B0 117C 0001 001C             		move.b	#1,$1C(a0)
0000E5B6 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E5BC                            
0000E5BC                            locret_E452:
0000E5BC 4E75                       		rts	
0000E5BE                            ; ===========================================================================
0000E5BE                            ; lavaball type	05 falls down until it hits the	floor
0000E5BE                            
0000E5BE                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E5BE 08A8 0001 0022             		bclr	#1,$22(a0)
0000E5C4 6100 0000                  		bsr.w	ObjHitFloor
0000E5C8 4A41                       		tst.w	d1
0000E5CA 6A00                       		bpl.s	locret_E474
0000E5CC 117C 0008 0028             		move.b	#8,$28(a0)
0000E5D2 117C 0001 001C             		move.b	#1,$1C(a0)
0000E5D8 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E5DE                            
0000E5DE                            locret_E474:
0000E5DE 4E75                       		rts	
0000E5E0                            ; ===========================================================================
0000E5E0                            ; lavaball types 06-07 move sideways
0000E5E0                            
0000E5E0                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E5E0 08E8 0000 0022             		bset	#0,$22(a0)
0000E5E6 76F8                       		moveq	#-8,d3
0000E5E8 6100 0000                  		bsr.w	ObjHitWallLeft
0000E5EC 4A41                       		tst.w	d1
0000E5EE 6A00                       		bpl.s	locret_E498
0000E5F0 117C 0008 0028             		move.b	#8,$28(a0)
0000E5F6 117C 0003 001C             		move.b	#3,$1C(a0)
0000E5FC 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E602                            
0000E602                            locret_E498:
0000E602 4E75                       		rts	
0000E604                            ; ===========================================================================
0000E604                            
0000E604                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000E604 08A8 0000 0022             		bclr	#0,$22(a0)
0000E60A 7608                       		moveq	#8,d3
0000E60C 6100 0000                  		bsr.w	ObjHitWallRight
0000E610 4A41                       		tst.w	d1
0000E612 6A00                       		bpl.s	locret_E4BC
0000E614 117C 0008 0028             		move.b	#8,$28(a0)
0000E61A 117C 0003 001C             		move.b	#3,$1C(a0)
0000E620 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E626                            
0000E626                            locret_E4BC:
0000E626 4E75                       		rts	
0000E628                            ; ===========================================================================
0000E628                            
0000E628                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000E628 4E75                       		rts	
0000E62A                            ; ===========================================================================
0000E62A                            
0000E62A                            Obj14_Delete:				; XREF: Obj14_Index
0000E62A 6000 F184                  		bra.w	DeleteObject
0000E62E                            ; ===========================================================================
0000E62E                            Ani_obj14:
0000E62E                            	include "_anim\obj14.asm"
0000E62E                            ; ---------------------------------------------------------------------------
0000E62E                            ; Animation script - lava balls
0000E62E                            ; ---------------------------------------------------------------------------
0000E62E 0000                       		dc.w byte_E4CC-Ani_obj14
0000E630 0000                       		dc.w byte_E4D2-Ani_obj14
0000E632 0000                       		dc.w byte_E4D6-Ani_obj14
0000E634 0000                       		dc.w byte_E4DC-Ani_obj14
0000E636 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000E63C 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000E640 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000E646 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000E64A                            		even
0000E64A                            		even
0000E64A                            
0000E64A                            ; ===========================================================================
0000E64A                            ; ---------------------------------------------------------------------------
0000E64A                            ; Object 6D - flame thrower (SBZ)
0000E64A                            ; ---------------------------------------------------------------------------
0000E64A                            
0000E64A                            Obj6D:					; XREF: Obj_Index
0000E64A 7000                       		moveq	#0,d0
0000E64C 1028 0024                  		move.b	$24(a0),d0
0000E650 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000E654 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000E658                            ; ===========================================================================
0000E658 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000E65A 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000E65C                            ; ===========================================================================
0000E65C                            
0000E65C                            Obj6D_Main:				; XREF: Obj6D_Index
0000E65C 5428 0024                  		addq.b	#2,$24(a0)
0000E660 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000E668 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000E66E 0028 0004 0001             		ori.b	#4,1(a0)
0000E674 117C 0001 0018             		move.b	#1,$18(a0)
0000E67A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E680 117C 000C 0019             		move.b	#$C,$19(a0)
0000E686 1028 0028                  		move.b	$28(a0),d0
0000E68A 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000E68E D040                       		add.w	d0,d0		; multiply by 2
0000E690 3140 0030                  		move.w	d0,$30(a0)
0000E694 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000E698 1028 0028                  		move.b	$28(a0),d0
0000E69C 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000E6A0 EB48                       		lsl.w	#5,d0		; multiply by $20
0000E6A2 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000E6A6 117C 000A 0036             		move.b	#$A,$36(a0)
0000E6AC 0828 0001 0022             		btst	#1,$22(a0)
0000E6B2 6700                       		beq.s	Obj6D_Action
0000E6B4 117C 0002 001C             		move.b	#2,$1C(a0)
0000E6BA 117C 0015 0036             		move.b	#$15,$36(a0)
0000E6C0                            
0000E6C0                            Obj6D_Action:				; XREF: Obj6D_Index
0000E6C0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000E6C4 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000E6C6 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000E6CC 0868 0000 001C             		bchg	#0,$1C(a0)
0000E6D2 6700                       		beq.s	loc_E57A
0000E6D4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000E6DA 303C 00B3                  		move.w	#$B3,d0
0000E6DE 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000E6E4                            
0000E6E4                            loc_E57A:
0000E6E4 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000E6EA 6100 C13A                  		bsr.w	AnimateSprite
0000E6EE 117C 0000 0020             		move.b	#0,$20(a0)
0000E6F4 1028 0036                  		move.b	$36(a0),d0
0000E6F8 B028 001A                  		cmp.b	$1A(a0),d0
0000E6FC 6600                       		bne.s	Obj6D_ChkDel
0000E6FE 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000E704                            
0000E704                            Obj6D_ChkDel:
0000E704 3028 0008                  		move.w	8(a0),d0
0000E708 0240 FF80                  		andi.w	#$FF80,d0
0000E70C 3238 F700                  		move.w	($FFFFF700).w,d1
0000E710 0441 0080                  		subi.w	#$80,d1
0000E714 0241 FF80                  		andi.w	#$FF80,d1
0000E718 9041                       		sub.w	d1,d0
0000E71A 0C40 0280                  		cmpi.w	#$280,d0
0000E71E 6200 F090                  		bhi.w	DeleteObject
0000E722 6000 F050                  		bra.w	DisplaySprite
0000E726                            ; ===========================================================================
0000E726                            Ani_obj6D:
0000E726                            	include "_anim\obj6D.asm"
0000E726                            ; ---------------------------------------------------------------------------
0000E726                            ; Animation script - flamethrower (SBZ)
0000E726                            ; ---------------------------------------------------------------------------
0000E726 0000                       		dc.w byte_E5C4-Ani_obj6D
0000E728 0000                       		dc.w byte_E5D2-Ani_obj6D
0000E72A 0000                       		dc.w byte_E5DC-Ani_obj6D
0000E72C 0000                       		dc.w byte_E5EA-Ani_obj6D
0000E72E 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000E73C 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000E746 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000E754 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000E75E                            		even
0000E75E                            		even
0000E75E                            
0000E75E                            ; ---------------------------------------------------------------------------
0000E75E                            ; Sprite mappings - flame thrower (SBZ)
0000E75E                            ; ---------------------------------------------------------------------------
0000E75E                            Map_obj6D:
0000E75E                            	include "_maps\obj6D.asm"
0000E75E                            ; ---------------------------------------------------------------------------
0000E75E                            ; Sprite mappings - flame thrower (SBZ)
0000E75E                            ; ---------------------------------------------------------------------------
0000E75E 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000E762 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000E766 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000E76A 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000E76E 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000E772 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000E776 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000E77A 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000E77E 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000E782 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000E786 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000E78A 01                         byte_E620:	dc.b 1
0000E78B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E790 02                         byte_E626:	dc.b 2
0000E791 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E796 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E79B 02                         byte_E631:	dc.b 2
0000E79C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7A1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7A6 03                         byte_E63C:	dc.b 3
0000E7A7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E7AC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E7B1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7B6 03                         byte_E64C:	dc.b 3
0000E7B7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E7BC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7C1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7C6 04                         byte_E65C:	dc.b 4
0000E7C7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E7CC 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E7D1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E7D6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7DB 04                         byte_E671:	dc.b 4
0000E7DC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E7E1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E7E6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7EB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7F0 05                         byte_E686:	dc.b 5
0000E7F1 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E7F6 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E7FB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E800 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E805 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E80A 05                         byte_E6A0:	dc.b 5
0000E80B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E810 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E815 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E81A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E81F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E824 06                         byte_E6BA:	dc.b 6
0000E825 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E82A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E82F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E834 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E839 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E83E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E843 06                         byte_E6D9:	dc.b 6
0000E844 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E849 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E84E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E853 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E858 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E85D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E862 01                         byte_E6F8:	dc.b 1
0000E863 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E868 02                         byte_E6FE:	dc.b 2
0000E869 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E86E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E873 02                         byte_E709:	dc.b 2
0000E874 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E879 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E87E 03                         byte_E714:	dc.b 3
0000E87F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E884 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E889 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E88E 03                         byte_E724:	dc.b 3
0000E88F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E894 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E899 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E89E 04                         byte_E734:	dc.b 4
0000E89F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E8A4 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E8A9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E8AE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E8B3 04                         byte_E749:	dc.b 4
0000E8B4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E8B9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E8BE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E8C3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E8C8 05                         byte_E75E:	dc.b 5
0000E8C9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E8CE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E8D3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E8D8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E8DD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E8E2 05                         byte_E778:	dc.b 5
0000E8E3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E8E8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E8ED 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E8F2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E8F7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E8FC 06                         byte_E792:	dc.b 6
0000E8FD E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E902 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E907 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E90C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E911 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E916 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E91B 06                         byte_E7B1:	dc.b 6
0000E91C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E921 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E926 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E92B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E930 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E935 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E93A                            		even
0000E93A                            		even
0000E93A                            
0000E93A                            ; ===========================================================================
0000E93A                            ; ---------------------------------------------------------------------------
0000E93A                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000E93A                            ; ---------------------------------------------------------------------------
0000E93A                            
0000E93A                            Obj46:					; XREF: Obj_Index
0000E93A 7000                       		moveq	#0,d0
0000E93C 1028 0024                  		move.b	$24(a0),d0
0000E940 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000E944 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000E948                            ; ===========================================================================
0000E948 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000E94A 0000                       		dc.w Obj46_Action-Obj46_Index
0000E94C                            ; ===========================================================================
0000E94C                            
0000E94C                            Obj46_Main:				; XREF: Obj46_Index
0000E94C 5428 0024                  		addq.b	#2,$24(a0)
0000E950 117C 000F 0016             		move.b	#$F,$16(a0)
0000E956 117C 000F 0017             		move.b	#$F,$17(a0)
0000E95C 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000E964 317C 4000 0002             		move.w	#$4000,2(a0)
0000E96A 117C 0004 0001             		move.b	#4,1(a0)
0000E970 117C 0003 0018             		move.b	#3,$18(a0)
0000E976 117C 0010 0019             		move.b	#$10,$19(a0)
0000E97C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E982 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000E988                            
0000E988                            Obj46_Action:				; XREF: Obj46_Index
0000E988 4A28 0001                  		tst.b	1(a0)
0000E98C 6A00                       		bpl.s	Obj46_ChkDel
0000E98E 7000                       		moveq	#0,d0
0000E990 1028 0028                  		move.b	$28(a0),d0	; get object type
0000E994 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000E998 D040                       		add.w	d0,d0
0000E99A 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000E99E 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000E9A2 323C 001B                  		move.w	#$1B,d1
0000E9A6 343C 0010                  		move.w	#$10,d2
0000E9AA 363C 0011                  		move.w	#$11,d3
0000E9AE 3828 0008                  		move.w	8(a0),d4
0000E9B2 6100 0000                  		bsr.w	SolidObject
0000E9B6                            
0000E9B6                            Obj46_ChkDel:
0000E9B6 6100 EDBC                  		bsr.w	DisplaySprite
0000E9BA 3028 0008                  		move.w	8(a0),d0
0000E9BE 0240 FF80                  		andi.w	#$FF80,d0
0000E9C2 3238 F700                  		move.w	($FFFFF700).w,d1
0000E9C6 0441 0080                  		subi.w	#$80,d1
0000E9CA 0241 FF80                  		andi.w	#$FF80,d1
0000E9CE 9041                       		sub.w	d1,d0
0000E9D0 0C40 0280                  		cmpi.w	#$280,d0
0000E9D4 6200 EDDA                  		bhi.w	DeleteObject
0000E9D8 4E75                       		rts	
0000E9DA                            ; ===========================================================================
0000E9DA 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000E9DC 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000E9DE 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000E9E0 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000E9E2 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000E9E4                            ; ===========================================================================
0000E9E4                            
0000E9E4                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000E9E4 4E75                       		rts	
0000E9E6                            ; ===========================================================================
0000E9E6                            
0000E9E6                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000E9E6 3038 D008                  		move.w	($FFFFD008).w,d0
0000E9EA 9068 0008                  		sub.w	8(a0),d0
0000E9EE 6400                       		bcc.s	loc_E888
0000E9F0 4440                       		neg.w	d0
0000E9F2                            
0000E9F2                            loc_E888:
0000E9F2 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000E9F6 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000E9F8 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000E9FE                            
0000E9FE                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000E9FE 7000                       		moveq	#0,d0
0000EA00 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EA04 0828 0003 0028             		btst	#3,$28(a0)
0000EA0A 6700                       		beq.s	loc_E8A8
0000EA0C 4440                       		neg.w	d0
0000EA0E 0640 0010                  		addi.w	#$10,d0
0000EA12                            
0000EA12                            loc_E8A8:
0000EA12 3228 0030                  		move.w	$30(a0),d1
0000EA16 9240                       		sub.w	d0,d1
0000EA18 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EA1C 4E75                       		rts	
0000EA1E                            ; ===========================================================================
0000EA1E                            
0000EA1E                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EA1E 6100 ED2E                  		bsr.w	SpeedToPos
0000EA22 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EA28 6100 0000                  		bsr.w	ObjHitFloor
0000EA2C 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EA2E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EA32 D368 000C                  		add.w	d1,$C(a0)
0000EA36 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EA3A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EA40 117C 0004 0028             		move.b	#4,$28(a0)
0000EA46 3011                       		move.w	(a1),d0
0000EA48 0240 03FF                  		andi.w	#$3FF,d0
0000EA4C 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EA50 6400                       		bcc.s	locret_E8EE
0000EA52 117C 0000 0028             		move.b	#0,$28(a0)
0000EA58                            
0000EA58                            locret_E8EE:
0000EA58 4E75                       		rts	
0000EA5A                            ; ===========================================================================
0000EA5A                            
0000EA5A                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EA5A 7000                       		moveq	#0,d0
0000EA5C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EA60 E648                       		lsr.w	#3,d0
0000EA62 3228 0030                  		move.w	$30(a0),d1
0000EA66 9240                       		sub.w	d0,d1
0000EA68 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EA6C 4E75                       		rts	
0000EA6E                            ; ===========================================================================
0000EA6E                            ; ---------------------------------------------------------------------------
0000EA6E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EA6E                            ; ---------------------------------------------------------------------------
0000EA6E                            Map_obj46:
0000EA6E                            	include "_maps\obj46.asm"
0000EA6E                            ; ---------------------------------------------------------------------------
0000EA6E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EA6E                            ; ---------------------------------------------------------------------------
0000EA6E 0000                       		dc.w byte_E906-Map_obj46
0000EA70 01                         byte_E906:	dc.b 1
0000EA71 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EA76                            		even
0000EA76                            		even
0000EA76                            
0000EA76                            ; ===========================================================================
0000EA76                            ; ---------------------------------------------------------------------------
0000EA76                            ; Object 12 - lamp (SYZ)
0000EA76                            ; ---------------------------------------------------------------------------
0000EA76                            
0000EA76                            Obj12:					; XREF: Obj_Index
0000EA76 7000                       		moveq	#0,d0
0000EA78 1028 0024                  		move.b	$24(a0),d0
0000EA7C 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EA80 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EA84                            ; ===========================================================================
0000EA84 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EA86 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EA88                            ; ===========================================================================
0000EA88                            
0000EA88                            Obj12_Main:				; XREF: Obj12_Index
0000EA88 5428 0024                  		addq.b	#2,$24(a0)
0000EA8C 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EA94 317C 0000 0002             		move.w	#0,2(a0)
0000EA9A 117C 0004 0001             		move.b	#4,1(a0)
0000EAA0 117C 0010 0019             		move.b	#$10,$19(a0)
0000EAA6 117C 0006 0018             		move.b	#6,$18(a0)
0000EAAC                            
0000EAAC                            Obj12_Animate:				; XREF: Obj12_Index
0000EAAC 5328 001E                  		subq.b	#1,$1E(a0)
0000EAB0 6A00                       		bpl.s	Obj12_ChkDel
0000EAB2 117C 0007 001E             		move.b	#7,$1E(a0)
0000EAB8 5228 001A                  		addq.b	#1,$1A(a0)
0000EABC 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EAC2 6500                       		bcs.s	Obj12_ChkDel
0000EAC4 117C 0000 001A             		move.b	#0,$1A(a0)
0000EACA                            
0000EACA                            Obj12_ChkDel:
0000EACA 3028 0008                  		move.w	8(a0),d0
0000EACE 0240 FF80                  		andi.w	#$FF80,d0
0000EAD2 3238 F700                  		move.w	($FFFFF700).w,d1
0000EAD6 0441 0080                  		subi.w	#$80,d1
0000EADA 0241 FF80                  		andi.w	#$FF80,d1
0000EADE 9041                       		sub.w	d1,d0
0000EAE0 0C40 0280                  		cmpi.w	#$280,d0
0000EAE4 6200 ECCA                  		bhi.w	DeleteObject
0000EAE8 6000 EC8A                  		bra.w	DisplaySprite
0000EAEC                            ; ===========================================================================
0000EAEC                            ; ---------------------------------------------------------------------------
0000EAEC                            ; Sprite mappings - lamp (SYZ)
0000EAEC                            ; ---------------------------------------------------------------------------
0000EAEC                            Map_obj12:
0000EAEC                            	include "_maps\obj12.asm"
0000EAEC                            ; ---------------------------------------------------------------------------
0000EAEC                            ; Sprite mappings - lamp (SYZ)
0000EAEC                            ; ---------------------------------------------------------------------------
0000EAEC 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EAF0 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EAF4 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EAF8 02                         byte_E98E:	dc.b 2
0000EAF9 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EAFE 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EB03 02                         byte_E999:	dc.b 2
0000EB04 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EB09 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EB0E 02                         byte_E9A4:	dc.b 2
0000EB0F F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EB14 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EB19 02                         byte_E9AF:	dc.b 2
0000EB1A F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EB1F 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EB24 02                         byte_E9BA:	dc.b 2
0000EB25 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EB2A 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EB2F 02                         byte_E9C5:	dc.b 2
0000EB30 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EB35 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EB3A                            		even
0000EB3A                            		even
0000EB3A                            
0000EB3A                            ; ===========================================================================
0000EB3A                            ; ---------------------------------------------------------------------------
0000EB3A                            ; Object 47 - pinball bumper (SYZ)
0000EB3A                            ; ---------------------------------------------------------------------------
0000EB3A                            
0000EB3A                            Obj47:					; XREF: Obj_Index
0000EB3A 7000                       		moveq	#0,d0
0000EB3C 1028 0024                  		move.b	$24(a0),d0
0000EB40 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EB44 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EB48                            ; ===========================================================================
0000EB48 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EB4A 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EB4C                            ; ===========================================================================
0000EB4C                            
0000EB4C                            Obj47_Main:				; XREF: Obj47_Index
0000EB4C 5428 0024                  		addq.b	#2,$24(a0)
0000EB50 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EB58 317C 0380 0002             		move.w	#$380,2(a0)
0000EB5E 117C 0004 0001             		move.b	#4,1(a0)
0000EB64 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB6A 117C 0001 0018             		move.b	#1,$18(a0)
0000EB70 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EB76                            
0000EB76                            Obj47_Hit:				; XREF: Obj47_Index
0000EB76 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EB7A 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EB7E 4228 0021                  		clr.b	$21(a0)
0000EB82 43F8 D000                  		lea	($FFFFD000).w,a1
0000EB86 3228 0008                  		move.w	8(a0),d1
0000EB8A 3428 000C                  		move.w	$C(a0),d2
0000EB8E 9269 0008                  		sub.w	8(a1),d1
0000EB92 9469 000C                  		sub.w	$C(a1),d2
0000EB96 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0000EB9C 4EB9 0000 29DA             		jsr	(CalcSine).l
0000EBA2 C3FC F900                  		muls.w	#-$700,d1
0000EBA6 E081                       		asr.l	#8,d1
0000EBA8 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EBAC C1FC F900                  		muls.w	#-$700,d0
0000EBB0 E080                       		asr.l	#8,d0
0000EBB2 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EBB6 08E9 0001 0022             		bset	#1,$22(a1)
0000EBBC 08A9 0004 0022             		bclr	#4,$22(a1)
0000EBC2 08A9 0005 0022             		bclr	#5,$22(a1)
0000EBC8 4229 003C                  		clr.b	$3C(a1)
0000EBCC 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBD2 303C 00B4                  		move.w	#$B4,d0
0000EBD6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EBDC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EBE0 7000                       		moveq	#0,d0
0000EBE2 1028 0023                  		move.b	$23(a0),d0
0000EBE6 6700                       		beq.s	Obj47_Score
0000EBE8 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EBEE 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EBF0 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EBF4                            
0000EBF4                            Obj47_Score:
0000EBF4 7001                       		moveq	#1,d0
0000EBF6 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000EBFC 6100 EFFC                  		bsr.w	SingleObjLoad
0000EC00 6600                       		bne.s	Obj47_Display
0000EC02 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000EC06 3368 0008 0008             		move.w	8(a0),8(a1)
0000EC0C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EC12 137C 0004 001A             		move.b	#4,$1A(a1)
0000EC18                            
0000EC18                            Obj47_Display:
0000EC18 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000EC1E 6100 BC06                  		bsr.w	AnimateSprite
0000EC22 3028 0008                  		move.w	8(a0),d0
0000EC26 0240 FF80                  		andi.w	#$FF80,d0
0000EC2A 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC2E 0441 0080                  		subi.w	#$80,d1
0000EC32 0241 FF80                  		andi.w	#$FF80,d1
0000EC36 9041                       		sub.w	d1,d0
0000EC38 0C40 0280                  		cmpi.w	#$280,d0
0000EC3C 6200                       		bhi.s	Obj47_ChkHit
0000EC3E 6000 EB34                  		bra.w	DisplaySprite
0000EC42                            ; ===========================================================================
0000EC42                            
0000EC42                            Obj47_ChkHit:				; XREF: Obj47_Display
0000EC42 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EC46 7000                       		moveq	#0,d0
0000EC48 1028 0023                  		move.b	$23(a0),d0
0000EC4C 6700                       		beq.s	Obj47_Delete
0000EC4E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EC54                            
0000EC54                            Obj47_Delete:
0000EC54 6000 EB5A                  		bra.w	DeleteObject
0000EC58                            ; ===========================================================================
0000EC58                            Ani_obj47:
0000EC58                            	include "_anim\obj47.asm"
0000EC58                            ; ---------------------------------------------------------------------------
0000EC58                            ; Animation script - flamethrower (SBZ)
0000EC58                            ; ---------------------------------------------------------------------------
0000EC58 0000                       		dc.w byte_EAF4-Ani_obj47
0000EC5A 0000                       		dc.w byte_EAF8-Ani_obj47
0000EC5C 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000EC60 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000EC68                            		even
0000EC68                            		even
0000EC68                            
0000EC68                            ; ---------------------------------------------------------------------------
0000EC68                            ; Sprite mappings - pinball bumper (SYZ)
0000EC68                            ; ---------------------------------------------------------------------------
0000EC68                            Map_obj47:
0000EC68                            	include "_maps\obj47.asm"
0000EC68                            ; ---------------------------------------------------------------------------
0000EC68                            ; Sprite mappings - pinball bumper (SYZ)
0000EC68                            ; ---------------------------------------------------------------------------
0000EC68 0000                       		dc.w byte_EB06-Map_obj47
0000EC6A 0000                       		dc.w byte_EB11-Map_obj47
0000EC6C 0000                       		dc.w byte_EB1C-Map_obj47
0000EC6E 02                         byte_EB06:	dc.b 2
0000EC6F F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000EC74 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000EC79 02                         byte_EB11:	dc.b 2
0000EC7A F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000EC7F F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000EC84 02                         byte_EB1C:	dc.b 2
0000EC85 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000EC8A F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000EC90 00                         		even
0000EC90 00                         		even
0000EC90                            
0000EC90                            ; ===========================================================================
0000EC90                            ; ---------------------------------------------------------------------------
0000EC90                            ; Object 0D - signpost at the end of a level
0000EC90                            ; ---------------------------------------------------------------------------
0000EC90                            
0000EC90                            Obj0D:					; XREF: Obj_Index
0000EC90 7000                       		moveq	#0,d0
0000EC92 1028 0024                  		move.b	$24(a0),d0
0000EC96 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000EC9A 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000EC9E 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000ECA4 6100 BB80                  		bsr.w	AnimateSprite
0000ECA8 6100 EACA                  		bsr.w	DisplaySprite
0000ECAC 3028 0008                  		move.w	8(a0),d0
0000ECB0 0240 FF80                  		andi.w	#$FF80,d0
0000ECB4 3238 F700                  		move.w	($FFFFF700).w,d1
0000ECB8 0441 0080                  		subi.w	#$80,d1
0000ECBC 0241 FF80                  		andi.w	#$FF80,d1
0000ECC0 9041                       		sub.w	d1,d0
0000ECC2 0C40 0280                  		cmpi.w	#$280,d0
0000ECC6 6200 EAE8                  		bhi.w	DeleteObject
0000ECCA 4E75                       		rts	
0000ECCC                            ; ===========================================================================
0000ECCC 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000ECCE 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000ECD0 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000ECD2 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000ECD4 0000                       		dc.w locret_ED1A-Obj0D_Index
0000ECD6                            ; ===========================================================================
0000ECD6                            
0000ECD6                            Obj0D_Main:				; XREF: Obj0D_Index
0000ECD6 5428 0024                  		addq.b	#2,$24(a0)
0000ECDA 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000ECE2 317C 0680 0002             		move.w	#$680,2(a0)
0000ECE8 117C 0004 0001             		move.b	#4,1(a0)
0000ECEE 117C 0018 0019             		move.b	#$18,$19(a0)
0000ECF4 117C 0004 0018             		move.b	#4,$18(a0)
0000ECFA                            
0000ECFA                            Obj0D_Touch:				; XREF: Obj0D_Index
0000ECFA 3038 D008                  		move.w	($FFFFD008).w,d0
0000ECFE 9068 0008                  		sub.w	8(a0),d0
0000ED02 6500                       		bcs.s	locret_EBBA
0000ED04 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000ED08 6400                       		bcc.s	locret_EBBA	; if not, branch
0000ED0A 303C 00CF                  		move.w	#$CF,d0
0000ED0E 4EB9 0000 1396             		jsr	(PlaySound).l	; play signpost	sound
0000ED14 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000ED18 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000ED1E 5428 0024                  		addq.b	#2,$24(a0)
0000ED22                            
0000ED22                            locret_EBBA:
0000ED22 4E75                       		rts	
0000ED24                            ; ===========================================================================
0000ED24                            
0000ED24                            Obj0D_Spin:				; XREF: Obj0D_Index
0000ED24 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000ED28 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000ED2A 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000ED30 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000ED34 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000ED3A 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000ED3C 5428 0024                  		addq.b	#2,$24(a0)
0000ED40                            
0000ED40                            Obj0D_Sparkle:
0000ED40 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000ED44 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000ED46 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000ED4C 7000                       		moveq	#0,d0
0000ED4E 1028 0034                  		move.b	$34(a0),d0
0000ED52 5428 0034                  		addq.b	#2,$34(a0)
0000ED56 0228 000E 0034             		andi.b	#$E,$34(a0)
0000ED5C 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000ED60 6100 EE98                  		bsr.w	SingleObjLoad
0000ED64 6600                       		bne.s	locret_EC42
0000ED66 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000ED6A 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000ED70 101A                       		move.b	(a2)+,d0
0000ED72 4880                       		ext.w	d0
0000ED74 D068 0008                  		add.w	8(a0),d0
0000ED78 3340 0008                  		move.w	d0,8(a1)
0000ED7C 101A                       		move.b	(a2)+,d0
0000ED7E 4880                       		ext.w	d0
0000ED80 D068 000C                  		add.w	$C(a0),d0
0000ED84 3340 000C                  		move.w	d0,$C(a1)
0000ED88 237C 0000 A0A0 0004        		move.l	#Map_obj25,4(a1)
0000ED90 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000ED96 137C 0004 0001             		move.b	#4,1(a1)
0000ED9C 137C 0002 0018             		move.b	#2,$18(a1)
0000EDA2 137C 0008 0019             		move.b	#8,$19(a1)
0000EDA8                            
0000EDA8                            locret_EC42:
0000EDA8 4E75                       		rts	
0000EDAA                            ; ===========================================================================
0000EDAA E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000EDAC 0808                       		dc.b	8,   8
0000EDAE F000                       		dc.b -$10,   0
0000EDB0 18F8                       		dc.b  $18,  -8
0000EDB2 00F8                       		dc.b	0,  -8
0000EDB4 1000                       		dc.b  $10,   0
0000EDB6 E808                       		dc.b -$18,   8
0000EDB8 1810                       		dc.b  $18, $10
0000EDBA                            ; ===========================================================================
0000EDBA                            
0000EDBA                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000EDBA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000EDBE 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000EDC2 0838 0001 D022             		btst	#1,($FFFFD022).w
0000EDC8 6600                       		bne.s	loc_EC70
0000EDCA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000EDD0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000EDD6 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000EDD8 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000EDDE 6000                       		bra.s	loc_EC70
0000EDE0                            
0000EDE0                            Obj0D_MoveLeft:
0000EDE0 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000EDE6                            
0000EDE6                            loc_EC70:
0000EDE6 4A38 D000                  		tst.b	($FFFFD000).w
0000EDEA 6700                       		beq.s	loc_EC86
0000EDEC 3038 D008                  		move.w	($FFFFD008).w,d0
0000EDF0 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000EDF4 0641 0128                  		addi.w	#$128,d1
0000EDF8 B041                       		cmp.w	d1,d0
0000EDFA 6500                       		bcs.s	locret_ECEE
0000EDFC                            
0000EDFC                            loc_EC86:
0000EDFC 5428 0024                  		addq.b	#2,$24(a0)
0000EE00                            
0000EE00                            ; ---------------------------------------------------------------------------
0000EE00                            ; Subroutine to	set up bonuses at the end of an	act
0000EE00                            ; ---------------------------------------------------------------------------
0000EE00                            
0000EE00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EE00                            
0000EE00                            
0000EE00                            GotThroughAct:				; XREF: Obj3E_EndAct
0000EE00 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000EE04 6600                       		bne.s	locret_ECEE
0000EE06 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000EE0C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000EE10 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EE14 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000EE1A 7010                       		moveq	#$10,d0
0000EE1C 4EB9 0000 15B2             		jsr	(LoadPLC2).l	; load title card patterns
0000EE22 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000EE28 7000                       		moveq	#0,d0
0000EE2A 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000EE2E C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000EE32 7200                       		moveq	#0,d1
0000EE34 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000EE38 D041                       		add.w	d1,d0		; add up your time
0000EE3A 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000EE3E 7214                       		moveq	#$14,d1
0000EE40 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000EE42 6500                       		bcs.s	loc_ECD0	; if not, branch
0000EE44 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000EE46                            
0000EE46                            loc_ECD0:
0000EE46 D040                       		add.w	d0,d0
0000EE48 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000EE4E 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000EE52 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000EE56 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000EE5A 303C 008E                  		move.w	#$8E,d0
0000EE5E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000EE64                            
0000EE64                            locret_ECEE:
0000EE64 4E75                       		rts	
0000EE66                            ; End of function GotThroughAct
0000EE66                            
0000EE66                            ; ===========================================================================
0000EE66 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000EE7A 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000EE90                            ; ===========================================================================
0000EE90                            
0000EE90                            locret_ED1A:				; XREF: Obj0D_Index
0000EE90 4E75                       		rts	
0000EE92                            ; ===========================================================================
0000EE92                            Ani_obj0D:
0000EE92                            	include "_anim\obj0D.asm"
0000EE92                            ; ---------------------------------------------------------------------------
0000EE92                            ; Animation script - signpost
0000EE92                            ; ---------------------------------------------------------------------------
0000EE92 0000                       		dc.w byte_ED24-Ani_obj0D
0000EE94 0000                       		dc.w byte_ED28-Ani_obj0D
0000EE96 0000                       		dc.w byte_ED2E-Ani_obj0D
0000EE98 0000                       		dc.w byte_ED34-Ani_obj0D
0000EE9A 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000EE9E 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000EEA4 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000EEAA 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000EEAE 00                         		even
0000EEAE 00                         		even
0000EEAE                            
0000EEAE                            ; ---------------------------------------------------------------------------
0000EEAE                            ; Sprite mappings - signpost
0000EEAE                            ; ---------------------------------------------------------------------------
0000EEAE                            Map_obj0D:
0000EEAE                            	include "_maps\obj0D.asm"
0000EEAE                            ; ---------------------------------------------------------------------------
0000EEAE                            ; Sprite mappings - signpost
0000EEAE                            ; ---------------------------------------------------------------------------
0000EEAE 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000EEB2 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000EEB6 0000                       		dc.w byte_ED73-Map_obj0D
0000EEB8 03                         byte_ED42:	dc.b 3
0000EEB9 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000EEBE F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000EEC3 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EEC8 02                         byte_ED52:	dc.b 2
0000EEC9 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000EECE 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EED3 02                         byte_ED5D:	dc.b 2
0000EED4 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000EED9 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000EEDE 02                         byte_ED68:	dc.b 2
0000EEDF F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000EEE4 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000EEE9 03                         byte_ED73:	dc.b 3
0000EEEA F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000EEEF F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000EEF4 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EEFA 00                         		even
0000EEFA 00                         		even
0000EEFA                            
0000EEFA                            ; ===========================================================================
0000EEFA                            ; ---------------------------------------------------------------------------
0000EEFA                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000EEFA                            ; ---------------------------------------------------------------------------
0000EEFA                            
0000EEFA                            Obj4C:					; XREF: Obj_Index
0000EEFA 7000                       		moveq	#0,d0
0000EEFC 1028 0024                  		move.b	$24(a0),d0
0000EF00 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000EF04 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000EF08 6000 0000                  		bra.w	Obj4D_ChkDel
0000EF0C                            ; ===========================================================================
0000EF0C 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000EF0E 0000                       		dc.w loc_EDCC-Obj4C_Index
0000EF10 0000                       		dc.w loc_EE3E-Obj4C_Index
0000EF12 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000EF14 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000EF16 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000EF18                            ; ===========================================================================
0000EF18                            
0000EF18                            Obj4C_Main:				; XREF: Obj4C_Index
0000EF18 5428 0024                  		addq.b	#2,$24(a0)
0000EF1C 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000EF24 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000EF2A 117C 0004 0001             		move.b	#4,1(a0)
0000EF30 117C 0001 0018             		move.b	#1,$18(a0)
0000EF36 117C 0038 0019             		move.b	#$38,$19(a0)
0000EF3C 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000EF42                            
0000EF42                            loc_EDCC:				; XREF: Obj4C_Index
0000EF42 5368 0032                  		subq.w	#1,$32(a0)
0000EF46 6A00                       		bpl.s	locret_EDF0
0000EF48 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000EF4E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000EF52 3228 000C                  		move.w	$C(a0),d1
0000EF56 B041                       		cmp.w	d1,d0
0000EF58 6400                       		bcc.s	locret_EDF0
0000EF5A 0441 0170                  		subi.w	#$170,d1
0000EF5E B041                       		cmp.w	d1,d0
0000EF60 6500                       		bcs.s	locret_EDF0
0000EF62 5428 0024                  		addq.b	#2,$24(a0)
0000EF66                            
0000EF66                            locret_EDF0:
0000EF66 4E75                       		rts	
0000EF68                            ; ===========================================================================
0000EF68                            
0000EF68                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000EF68 5428 0024                  		addq.b	#2,$24(a0)
0000EF6C 6100 ECA2                  		bsr.w	SingleObjLoad2
0000EF70 6600                       		bne.s	loc_EE18
0000EF72 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000EF76 3368 0008 0008             		move.w	8(a0),8(a1)
0000EF7C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EF82 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EF88 2348 003C                  		move.l	a0,$3C(a1)
0000EF8C                            
0000EF8C                            loc_EE18:
0000EF8C 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF92 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EF96 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000EF98 117C 0004 001C             		move.b	#4,$1C(a0)
0000EF9E 6000                       		bra.s	Obj4C_Display
0000EFA0                            ; ===========================================================================
0000EFA0                            
0000EFA0                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000EFA0 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000EFA4 08E9 0001 0022             		bset	#1,$22(a1)
0000EFAA 337C FA80 0012             		move.w	#-$580,$12(a1)
0000EFB0 6000                       		bra.s	Obj4C_Display
0000EFB2                            ; ===========================================================================
0000EFB2                            
0000EFB2                            loc_EE3E:				; XREF: Obj4C_Index
0000EFB2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EFB6 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000EFB8 5428 0024                  		addq.b	#2,$24(a0)
0000EFBC 4E75                       		rts	
0000EFBE                            ; ===========================================================================
0000EFBE                            
0000EFBE                            Obj4C_Display:				; XREF: Obj4C_Index
0000EFBE 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000EFC4 6100 B860                  		bsr.w	AnimateSprite
0000EFC8 6100 E7AA                  		bsr.w	DisplaySprite
0000EFCC 4E75                       		rts	
0000EFCE                            ; ===========================================================================
0000EFCE                            
0000EFCE                            Obj4C_Delete:				; XREF: Obj4C_Index
0000EFCE 117C 0000 001C             		move.b	#0,$1C(a0)
0000EFD4 117C 0002 0024             		move.b	#2,$24(a0)
0000EFDA 4A28 0028                  		tst.b	$28(a0)
0000EFDE 6700 E7D0                  		beq.w	DeleteObject
0000EFE2 4E75                       		rts	
0000EFE4                            ; ===========================================================================
0000EFE4                            ; ---------------------------------------------------------------------------
0000EFE4                            ; Object 4D - lava geyser / lavafall (MZ)
0000EFE4                            ; ---------------------------------------------------------------------------
0000EFE4                            
0000EFE4                            Obj4D:					; XREF: Obj_Index
0000EFE4 7000                       		moveq	#0,d0
0000EFE6 1028 0024                  		move.b	$24(a0),d0
0000EFEA 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000EFEE 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000EFF2 6000 E780                  		bra.w	DisplaySprite
0000EFF6                            ; ===========================================================================
0000EFF6 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000EFF8 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000EFFA 0000                       		dc.w loc_EFFC-Obj4D_Index
0000EFFC 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000EFFE                            
0000EFFE FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F002                            ; ===========================================================================
0000F002                            
0000F002                            Obj4D_Main:				; XREF: Obj4D_Index
0000F002 5428 0024                  		addq.b	#2,$24(a0)
0000F006 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F00C 4A28 0028                  		tst.b	$28(a0)
0000F010 6700                       		beq.s	loc_EEA4
0000F012 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F018                            
0000F018                            loc_EEA4:
0000F018 7000                       		moveq	#0,d0
0000F01A 1028 0028                  		move.b	$28(a0),d0
0000F01E D040                       		add.w	d0,d0
0000F020 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F026 2248                       		movea.l	a0,a1
0000F028 7201                       		moveq	#1,d1
0000F02A 6100                       		bsr.s	Obj4D_MakeLava
0000F02C 6000                       		bra.s	loc_EF10
0000F02E                            ; ===========================================================================
0000F02E                            
0000F02E                            Obj4D_Loop:
0000F02E 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F032 6600                       		bne.s	loc_EF0A
0000F034                            
0000F034                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F034 12BC 004D                  		move.b	#$4D,0(a1)
0000F038 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F040 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F046 137C 0004 0001             		move.b	#4,1(a1)
0000F04C 137C 0020 0019             		move.b	#$20,$19(a1)
0000F052 3368 0008 0008             		move.w	8(a0),8(a1)
0000F058 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F05E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F064 137C 0001 0018             		move.b	#1,$18(a1)
0000F06A 137C 0005 001C             		move.b	#5,$1C(a1)
0000F070 4A28 0028                  		tst.b	$28(a0)
0000F074 6700                       		beq.s	loc_EF0A
0000F076 137C 0002 001C             		move.b	#2,$1C(a1)
0000F07C                            
0000F07C                            loc_EF0A:
0000F07C 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F080 4E75                       		rts	
0000F082                            ; ===========================================================================
0000F082                            
0000F082                            loc_EF10:				; XREF: Obj4D_Main
0000F082 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F088 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F08E 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F094 137C 0093 0020             		move.b	#$93,$20(a1)
0000F09A 137C 0080 0016             		move.b	#$80,$16(a1)
0000F0A0 08E9 0004 0001             		bset	#4,1(a1)
0000F0A6 5829 0024                  		addq.b	#4,$24(a1)
0000F0AA 2348 003C                  		move.l	a0,$3C(a1)
0000F0AE 4A28 0028                  		tst.b	$28(a0)
0000F0B2 6700                       		beq.s	Obj4D_PlaySnd
0000F0B4 7200                       		moveq	#0,d1
0000F0B6 6100 FF76                  		bsr.w	Obj4D_Loop
0000F0BA 5429 0024                  		addq.b	#2,$24(a1)
0000F0BE 08E9 0004 0002             		bset	#4,2(a1)
0000F0C4 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F0CA 137C 0000 0018             		move.b	#0,$18(a1)
0000F0D0 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F0D6 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F0DC 117C 0000 0028             		move.b	#0,$28(a0)
0000F0E2                            
0000F0E2                            Obj4D_PlaySnd:
0000F0E2 303C 00C8                  		move.w	#$C8,d0
0000F0E6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000F0EC                            
0000F0EC                            Obj4D_Action:				; XREF: Obj4D_Index
0000F0EC 7000                       		moveq	#0,d0
0000F0EE 1028 0028                  		move.b	$28(a0),d0
0000F0F2 D040                       		add.w	d0,d0
0000F0F4 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F0F8 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F0FC 6100 E650                  		bsr.w	SpeedToPos
0000F100 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F106 6100 B71E                  		bsr.w	AnimateSprite
0000F10A                            
0000F10A                            Obj4D_ChkDel:				; XREF: Obj4C
0000F10A 3028 0008                  		move.w	8(a0),d0
0000F10E 0240 FF80                  		andi.w	#$FF80,d0
0000F112 3238 F700                  		move.w	($FFFFF700).w,d1
0000F116 0441 0080                  		subi.w	#$80,d1
0000F11A 0241 FF80                  		andi.w	#$FF80,d1
0000F11E 9041                       		sub.w	d1,d0
0000F120 0C40 0280                  		cmpi.w	#$280,d0
0000F124 6200 E68A                  		bhi.w	DeleteObject
0000F128 4E75                       		rts	
0000F12A                            ; ===========================================================================
0000F12A 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F12C 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F12E                            ; ===========================================================================
0000F12E                            
0000F12E                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F12E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F134 3028 0030                  		move.w	$30(a0),d0
0000F138 B068 000C                  		cmp.w	$C(a0),d0
0000F13C 6400                       		bcc.s	locret_EFDA
0000F13E 5828 0024                  		addq.b	#4,$24(a0)
0000F142 2268 003C                  		movea.l	$3C(a0),a1
0000F146 137C 0003 001C             		move.b	#3,$1C(a1)
0000F14C                            
0000F14C                            locret_EFDA:
0000F14C 4E75                       		rts	
0000F14E                            ; ===========================================================================
0000F14E                            
0000F14E                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F14E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F154 3028 0030                  		move.w	$30(a0),d0
0000F158 B068 000C                  		cmp.w	$C(a0),d0
0000F15C 6400                       		bcc.s	locret_EFFA
0000F15E 5828 0024                  		addq.b	#4,$24(a0)
0000F162 2268 003C                  		movea.l	$3C(a0),a1
0000F166 137C 0001 001C             		move.b	#1,$1C(a1)
0000F16C                            
0000F16C                            locret_EFFA:
0000F16C 4E75                       		rts	
0000F16E                            ; ===========================================================================
0000F16E                            
0000F16E                            loc_EFFC:				; XREF: Obj4D_Index
0000F16E 2268 003C                  		movea.l	$3C(a0),a1
0000F172 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F178 6700 0000                  		beq.w	Obj4D_Delete
0000F17C 3029 000C                  		move.w	$C(a1),d0
0000F180 0640 0060                  		addi.w	#$60,d0
0000F184 3140 000C                  		move.w	d0,$C(a0)
0000F188 9068 0030                  		sub.w	$30(a0),d0
0000F18C 4440                       		neg.w	d0
0000F18E 7208                       		moveq	#8,d1
0000F190 0C40 0040                  		cmpi.w	#$40,d0
0000F194 6C00                       		bge.s	loc_F026
0000F196 720B                       		moveq	#$B,d1
0000F198                            
0000F198                            loc_F026:
0000F198 0C40 0080                  		cmpi.w	#$80,d0
0000F19C 6F00                       		ble.s	loc_F02E
0000F19E 720E                       		moveq	#$E,d1
0000F1A0                            
0000F1A0                            loc_F02E:
0000F1A0 5328 001E                  		subq.b	#1,$1E(a0)
0000F1A4 6A00                       		bpl.s	loc_F04C
0000F1A6 117C 0007 001E             		move.b	#7,$1E(a0)
0000F1AC 5228 001B                  		addq.b	#1,$1B(a0)
0000F1B0 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F1B6 6500                       		bcs.s	loc_F04C
0000F1B8 117C 0000 001B             		move.b	#0,$1B(a0)
0000F1BE                            
0000F1BE                            loc_F04C:
0000F1BE 1028 001B                  		move.b	$1B(a0),d0
0000F1C2 D001                       		add.b	d1,d0
0000F1C4 1140 001A                  		move.b	d0,$1A(a0)
0000F1C8 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F1CC                            ; ===========================================================================
0000F1CC                            
0000F1CC                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F1CC 6000 E5E2                  		bra.w	DeleteObject
0000F1D0                            ; ===========================================================================
0000F1D0                            ; ---------------------------------------------------------------------------
0000F1D0                            ; Object 4E - advancing	wall of	lava (MZ)
0000F1D0                            ; ---------------------------------------------------------------------------
0000F1D0                            
0000F1D0                            Obj4E:					; XREF: Obj_Index
0000F1D0 7000                       		moveq	#0,d0
0000F1D2 1028 0024                  		move.b	$24(a0),d0
0000F1D6 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F1DA 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F1DE                            ; ===========================================================================
0000F1DE 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F1E0 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F1E2 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F1E4 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F1E6 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F1E8                            ; ===========================================================================
0000F1E8                            
0000F1E8                            Obj4E_Main:				; XREF: Obj4E_Index
0000F1E8 5828 0024                  		addq.b	#4,$24(a0)
0000F1EC 2248                       		movea.l	a0,a1
0000F1EE 7201                       		moveq	#1,d1
0000F1F0 6000                       		bra.s	Obj4E_Main2
0000F1F2                            ; ===========================================================================
0000F1F2                            
0000F1F2                            Obj4E_Loop:
0000F1F2 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F1F6 6600                       		bne.s	loc_F0C8
0000F1F8                            
0000F1F8                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F1F8 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F1FC 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F204 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F20A 137C 0004 0001             		move.b	#4,1(a1)
0000F210 137C 0050 0019             		move.b	#$50,$19(a1)
0000F216 3368 0008 0008             		move.w	8(a0),8(a1)
0000F21C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F222 137C 0001 0018             		move.b	#1,$18(a1)
0000F228 137C 0000 001C             		move.b	#0,$1C(a1)
0000F22E 137C 0094 0020             		move.b	#$94,$20(a1)
0000F234 2348 003C                  		move.l	a0,$3C(a1)
0000F238                            
0000F238                            loc_F0C8:
0000F238 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F23C                            
0000F23C 5C29 0024                  		addq.b	#6,$24(a1)
0000F240 137C 0004 001A             		move.b	#4,$1A(a1)
0000F246                            
0000F246                            Obj4E_Action:				; XREF: Obj4E_Index
0000F246 3038 D008                  		move.w	($FFFFD008).w,d0
0000F24A 9068 0008                  		sub.w	8(a0),d0
0000F24E 6400                       		bcc.s	Obj4E_ChkSonic
0000F250 4440                       		neg.w	d0
0000F252                            
0000F252                            Obj4E_ChkSonic:
0000F252 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F256 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F258 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F25C 9068 000C                  		sub.w	$C(a0),d0
0000F260 6400                       		bcc.s	loc_F0F4
0000F262 4440                       		neg.w	d0
0000F264                            
0000F264                            loc_F0F4:
0000F264 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F268 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F26A 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F270 6000                       		bra.s	Obj4E_Solid
0000F272                            ; ===========================================================================
0000F272                            
0000F272                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F272 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F276 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F278 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F27E 5528 0024                  		subq.b	#2,$24(a0)
0000F282                            
0000F282                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F282 323C 002B                  		move.w	#$2B,d1
0000F286 343C 0018                  		move.w	#$18,d2
0000F28A 3602                       		move.w	d2,d3
0000F28C 5243                       		addq.w	#1,d3
0000F28E 3828 0008                  		move.w	8(a0),d4
0000F292 1028 0024                  		move.b	$24(a0),d0
0000F296 3F00                       		move.w	d0,-(sp)
0000F298 6100 0000                  		bsr.w	SolidObject
0000F29C 301F                       		move.w	(sp)+,d0
0000F29E 1140 0024                  		move.b	d0,$24(a0)
0000F2A2 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F2A8 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F2AA 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F2AE 4228 0036                  		clr.b	$36(a0)
0000F2B2                            
0000F2B2                            Obj4E_Animate:
0000F2B2 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F2B8 6100 B56C                  		bsr.w	AnimateSprite
0000F2BC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F2C2 6400                       		bcc.s	Obj4E_ChkDel
0000F2C4 6100 E488                  		bsr.w	SpeedToPos
0000F2C8                            
0000F2C8                            Obj4E_ChkDel:
0000F2C8 6100 E4AA                  		bsr.w	DisplaySprite
0000F2CC 4A28 0036                  		tst.b	$36(a0)
0000F2D0 6600                       		bne.s	locret_F17E
0000F2D2 3028 0008                  		move.w	8(a0),d0
0000F2D6 0240 FF80                  		andi.w	#$FF80,d0
0000F2DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2DE 0441 0080                  		subi.w	#$80,d1
0000F2E2 0241 FF80                  		andi.w	#$FF80,d1
0000F2E6 9041                       		sub.w	d1,d0
0000F2E8 0C40 0280                  		cmpi.w	#$280,d0
0000F2EC 6200                       		bhi.s	Obj4E_ChkGone
0000F2EE                            
0000F2EE                            locret_F17E:
0000F2EE 4E75                       		rts	
0000F2F0                            ; ===========================================================================
0000F2F0                            
0000F2F0                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F2F0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F2F4 7000                       		moveq	#0,d0
0000F2F6 1028 0023                  		move.b	$23(a0),d0
0000F2FA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F300 117C 0008 0024             		move.b	#8,$24(a0)
0000F306 4E75                       		rts	
0000F308                            ; ===========================================================================
0000F308                            
0000F308                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F308 2268 003C                  		movea.l	$3C(a0),a1
0000F30C 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F312 6700                       		beq.s	Obj4E_Delete
0000F314 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F31A 0468 0080 0008             		subi.w	#$80,8(a0)
0000F320 6000 E452                  		bra.w	DisplaySprite
0000F324                            ; ===========================================================================
0000F324                            
0000F324                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F324 6000 E48A                  		bra.w	DeleteObject
0000F328                            ; ===========================================================================
0000F328                            ; ---------------------------------------------------------------------------
0000F328                            ; Object 54 - invisible	lava tag (MZ)
0000F328                            ; ---------------------------------------------------------------------------
0000F328                            
0000F328                            Obj54:					; XREF: Obj_Index
0000F328 7000                       		moveq	#0,d0
0000F32A 1028 0024                  		move.b	$24(a0),d0
0000F32E 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F332 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F336                            ; ===========================================================================
0000F336 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F338 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F33A                            
0000F33A 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F33E                            ; ===========================================================================
0000F33E                            
0000F33E                            Obj54_Main:				; XREF: Obj54_Index
0000F33E 5428 0024                  		addq.b	#2,$24(a0)
0000F342 7000                       		moveq	#0,d0
0000F344 1028 0028                  		move.b	$28(a0),d0
0000F348 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F34E 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F356 117C 0084 0001             		move.b	#$84,1(a0)
0000F35C                            
0000F35C                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F35C 3028 0008                  		move.w	8(a0),d0
0000F360 0240 FF80                  		andi.w	#$FF80,d0
0000F364 3238 F700                  		move.w	($FFFFF700).w,d1
0000F368 0441 0080                  		subi.w	#$80,d1
0000F36C 0241 FF80                  		andi.w	#$FF80,d1
0000F370 9041                       		sub.w	d1,d0
0000F372 6B00 E43C                  		bmi.w	DeleteObject
0000F376 0C40 0280                  		cmpi.w	#$280,d0
0000F37A 6200 E434                  		bhi.w	DeleteObject
0000F37E 4E75                       		rts	
0000F380                            ; ===========================================================================
0000F380                            ; ---------------------------------------------------------------------------
0000F380                            ; Sprite mappings - invisible lava tag (MZ)
0000F380                            ; ---------------------------------------------------------------------------
0000F380                            Map_obj54:
0000F380                            	include "_maps\obj54.asm"
0000F380                            ; ---------------------------------------------------------------------------
0000F380                            ; Sprite mappings - invisible lava tag (MZ)
0000F380                            ; ---------------------------------------------------------------------------
0000F380 0000                       		dc.w byte_F212-Map_obj54
0000F382 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F384 00                         		even
0000F384 00                         		even
0000F384                            
0000F384                            Ani_obj4C:
0000F384                            	include "_anim\obj4C.asm"
0000F384                            ; ---------------------------------------------------------------------------
0000F384                            ; Animation script - geyser of lava (MZ)
0000F384                            ; ---------------------------------------------------------------------------
0000F384 0000                       		dc.w byte_F220-Ani_obj4C
0000F386 0000                       		dc.w byte_F22A-Ani_obj4C
0000F388 0000                       		dc.w byte_F22E-Ani_obj4C
0000F38A 0000                       		dc.w byte_F232-Ani_obj4C
0000F38C 0000                       		dc.w byte_F23A-Ani_obj4C
0000F38E 0000                       		dc.w byte_F23E-Ani_obj4C
0000F390 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F39A 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F39E 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F3A2 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F3AA 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F3AE 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F3B2                            		even
0000F3B2                            		even
0000F3B2                            
0000F3B2                            Ani_obj4E:
0000F3B2                            	include "_anim\obj4E.asm"
0000F3B2                            ; ---------------------------------------------------------------------------
0000F3B2                            ; Animation script - advancing wall of lava (MZ)
0000F3B2                            ; ---------------------------------------------------------------------------
0000F3B2 0000                       		dc.w byte_F244-Ani_obj4E
0000F3B4 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F3BA                            		even
0000F3BA                            		even
0000F3BA                            
0000F3BA                            ; ---------------------------------------------------------------------------
0000F3BA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F3BA                            ; ---------------------------------------------------------------------------
0000F3BA                            Map_obj4C:
0000F3BA                            	include "_maps\obj4C.asm"
0000F3BA                            ; ---------------------------------------------------------------------------
0000F3BA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F3BA                            ; ---------------------------------------------------------------------------
0000F3BA 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F3BE 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F3C2 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F3C6 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F3CA 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F3CE 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F3D2 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F3D6 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F3DA 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F3DE 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F3E2 02                         byte_F272:	dc.b 2
0000F3E3 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F3E8 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F3ED 02                         byte_F27D:	dc.b 2
0000F3EE EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F3F3 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F3F8 04                         byte_F288:	dc.b 4
0000F3F9 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F3FE F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F403 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F408 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F40D 04                         byte_F29D:	dc.b 4
0000F40E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F413 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F418 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F41D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F422 06                         byte_F2B2:	dc.b 6
0000F423 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F428 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F42D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F432 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F437 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F43C E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F441 06                         byte_F2D1:	dc.b 6
0000F442 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F447 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F44C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F451 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F456 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F45B E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F460 02                         byte_F2F0:	dc.b 2
0000F461 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F466 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F46B 02                         byte_F2FB:	dc.b 2
0000F46C E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F471 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F476 0A                         byte_F306:	dc.b $A
0000F477 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F47C 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F481 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F486 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F48B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F490 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F495 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F49A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F49F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F4A4 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F4A9 0A                         byte_F339:	dc.b $A
0000F4AA 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F4AF 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F4B4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F4B9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F4BE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F4C3 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F4C8 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F4CD F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F4D2 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F4D7 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F4DC 0A                         byte_F36C:	dc.b $A
0000F4DD 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F4E2 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F4E7 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F4EC B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F4F1 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F4F6 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F4FB F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F500 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F505 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F50A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F50F 06                         byte_F39F:	dc.b 6
0000F510 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F515 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F51A B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F51F B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F524 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F529 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F52E 06                         byte_F3BE:	dc.b 6
0000F52F 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F534 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F539 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F53E B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F543 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F548 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F54D 06                         byte_F3DD:	dc.b 6
0000F54E 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F553 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F558 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F55D B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F562 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F567 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F56C 10                         byte_F3FC:	dc.b $10
0000F56D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F572 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F577 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F57C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F581 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F586 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F58B F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F590 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F595 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F59A 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F59F 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F5A4 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F5A9 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F5AE 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F5B3 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F5B8 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F5BD 10                         byte_F44D:	dc.b $10
0000F5BE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F5C3 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F5C8 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F5CD B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F5D2 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F5D7 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F5DC F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F5E1 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F5E6 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F5EB 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F5F0 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F5F5 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000F5FA 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000F5FF 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000F604 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000F609 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000F60E 10                         byte_F49E:	dc.b $10
0000F60F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F614 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F619 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F61E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F623 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F628 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F62D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F632 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F637 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F63C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F641 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000F646 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000F64B 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000F650 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000F655 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000F65A 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000F65F 06                         byte_F4EF:	dc.b 6
0000F660 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000F665 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000F66A E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000F66F E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000F674 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000F679 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000F67E 06                         byte_F50E:	dc.b 6
0000F67F E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000F684 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000F689 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000F68E E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000F693 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000F698 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000F69D 00                         byte_F52D:	dc.b 0
0000F69E                            		even
0000F69E                            		even
0000F69E                            
0000F69E                            ; ---------------------------------------------------------------------------
0000F69E                            ; Sprite mappings - advancing wall of lava (MZ)
0000F69E                            ; ---------------------------------------------------------------------------
0000F69E                            Map_obj4E:
0000F69E                            	include "_maps\obj4E.asm"
0000F69E                            ; ---------------------------------------------------------------------------
0000F69E                            ; Sprite mappings - advancing wall of lava (MZ)
0000F69E                            ; ---------------------------------------------------------------------------
0000F69E 0000                       		dc.w byte_F538-Map_obj4E
0000F6A0 0000                       		dc.w byte_F566-Map_obj4E
0000F6A2 0000                       		dc.w byte_F594-Map_obj4E
0000F6A4 0000                       		dc.w byte_F5C2-Map_obj4E
0000F6A6 0000                       		dc.w byte_F5F0-Map_obj4E
0000F6A8 09                         byte_F538:	dc.b 9
0000F6A9 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000F6AE 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F6B3 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F6B8 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F6BD 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F6C2 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F6C7 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F6CC E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F6D1 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F6D6 09                         byte_F566:	dc.b 9
0000F6D7 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F6DC 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000F6E1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F6E6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F6EB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F6F0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F6F5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F6FA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F6FF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F704 09                         byte_F594:	dc.b 9
0000F705 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000F70A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F70F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F714 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F719 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F71E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F723 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F728 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F72D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F732 09                         byte_F5C2:	dc.b 9
0000F733 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F738 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000F73D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F742 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F747 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F74C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F751 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F756 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F75B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F760 08                         byte_F5F0:	dc.b 8
0000F761 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000F766 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F76B E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F770 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F775 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F77A 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F77F E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F784 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F78A 00                         		even
0000F78A 00                         		even
0000F78A                            
0000F78A                            ; ===========================================================================
0000F78A                            ; ---------------------------------------------------------------------------
0000F78A                            ; Object 40 - Moto Bug enemy (GHZ)
0000F78A                            ; ---------------------------------------------------------------------------
0000F78A                            
0000F78A                            Obj40:					; XREF: Obj_Index
0000F78A 7000                       		moveq	#0,d0
0000F78C 1028 0024                  		move.b	$24(a0),d0
0000F790 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000F794 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000F798                            ; ===========================================================================
0000F798 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000F79A 0000                       		dc.w Obj40_Action-Obj40_Index
0000F79C 0000                       		dc.w Obj40_Animate-Obj40_Index
0000F79E 0000                       		dc.w Obj40_Delete-Obj40_Index
0000F7A0                            ; ===========================================================================
0000F7A0                            
0000F7A0                            Obj40_Main:				; XREF: Obj40_Index
0000F7A0 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000F7A8 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000F7AE 117C 0004 0001             		move.b	#4,1(a0)
0000F7B4 117C 0004 0018             		move.b	#4,$18(a0)
0000F7BA 117C 0014 0019             		move.b	#$14,$19(a0)
0000F7C0 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000F7C4 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000F7C6 117C 000E 0016             		move.b	#$E,$16(a0)
0000F7CC 117C 0008 0017             		move.b	#8,$17(a0)
0000F7D2 117C 000C 0020             		move.b	#$C,$20(a0)
0000F7D8 6100 DF48                  		bsr.w	ObjectFall
0000F7DC 4EB9 0000 0000             		jsr	ObjHitFloor
0000F7E2 4A41                       		tst.w	d1
0000F7E4 6A00                       		bpl.s	locret_F68A
0000F7E6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F7EA 317C 0000 0012             		move.w	#0,$12(a0)
0000F7F0 5428 0024                  		addq.b	#2,$24(a0)
0000F7F4 0868 0000 0022             		bchg	#0,$22(a0)
0000F7FA                            
0000F7FA                            locret_F68A:
0000F7FA 4E75                       		rts	
0000F7FC                            ; ===========================================================================
0000F7FC                            
0000F7FC                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000F7FC 5828 0024                  		addq.b	#4,$24(a0)
0000F800 6000 0000                  		bra.w	Obj40_Animate
0000F804                            ; ===========================================================================
0000F804                            
0000F804                            Obj40_Action:				; XREF: Obj40_Index
0000F804 7000                       		moveq	#0,d0
0000F806 1028 0025                  		move.b	$25(a0),d0
0000F80A 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000F80E 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000F812 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F818 6100 B00C                  		bsr.w	AnimateSprite
0000F81C                            
0000F81C                            ; ---------------------------------------------------------------------------
0000F81C                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000F81C                            ; ---------------------------------------------------------------------------
0000F81C                            
0000F81C                            MarkObjGone:
0000F81C 3028 0008                  		move.w	8(a0),d0
0000F820 0240 FF80                  		andi.w	#$FF80,d0
0000F824 3238 F700                  		move.w	($FFFFF700).w,d1
0000F828 0441 0080                  		subi.w	#$80,d1
0000F82C 0241 FF80                  		andi.w	#$FF80,d1
0000F830 9041                       		sub.w	d1,d0
0000F832 0C40 0280                  		cmpi.w	#$280,d0
0000F836 6200 0000                  		bhi.w	Mark_ChkGone
0000F83A 6000 DF38                  		bra.w	DisplaySprite
0000F83E                            ; ===========================================================================
0000F83E                            
0000F83E                            Mark_ChkGone:
0000F83E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F842 7000                       		moveq	#0,d0
0000F844 1028 0023                  		move.b	$23(a0),d0
0000F848 6700                       		beq.s	Mark_Delete
0000F84A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F850                            
0000F850                            Mark_Delete:
0000F850 6000 DF5E                  		bra.w	DeleteObject
0000F854                            
0000F854                            ; ===========================================================================
0000F854 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000F856 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000F858                            ; ===========================================================================
0000F858                            
0000F858                            Obj40_Move:				; XREF: Obj40_Index2
0000F858 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F85C 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000F85E 5428 0025                  		addq.b	#2,$25(a0)
0000F862 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000F868 117C 0001 001C             		move.b	#1,$1C(a0)
0000F86E 0868 0000 0022             		bchg	#0,$22(a0)
0000F874 6600                       		bne.s	locret_F70A
0000F876 4468 0010                  		neg.w	$10(a0)		; change direction
0000F87A                            
0000F87A                            locret_F70A:
0000F87A 4E75                       		rts	
0000F87C                            ; ===========================================================================
0000F87C                            
0000F87C                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000F87C 6100 DED0                  		bsr.w	SpeedToPos
0000F880 4EB9 0000 0000             		jsr	ObjHitFloor
0000F886 0C41 FFF8                  		cmpi.w	#-8,d1
0000F88A 6D00                       		blt.s	Obj40_Pause
0000F88C 0C41 000C                  		cmpi.w	#$C,d1
0000F890 6C00                       		bge.s	Obj40_Pause
0000F892 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F896 5328 0033                  		subq.b	#1,$33(a0)
0000F89A 6A00                       		bpl.s	locret_F756
0000F89C 117C 000F 0033             		move.b	#$F,$33(a0)
0000F8A2 6100 E356                  		bsr.w	SingleObjLoad
0000F8A6 6600                       		bne.s	locret_F756
0000F8A8 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000F8AC 3368 0008 0008             		move.w	8(a0),8(a1)
0000F8B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F8B8 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F8BE 137C 0002 001C             		move.b	#2,$1C(a1)
0000F8C4                            
0000F8C4                            locret_F756:
0000F8C4 4E75                       		rts	
0000F8C6                            ; ===========================================================================
0000F8C6                            
0000F8C6                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000F8C6 5528 0025                  		subq.b	#2,$25(a0)
0000F8CA 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F8D0 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000F8D6 117C 0000 001C             		move.b	#0,$1C(a0)
0000F8DC 4E75                       		rts	
0000F8DE                            ; ===========================================================================
0000F8DE                            
0000F8DE                            Obj40_Animate:				; XREF: Obj40_Index
0000F8DE 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F8E4 6100 AF40                  		bsr.w	AnimateSprite
0000F8E8 6000 DE8A                  		bra.w	DisplaySprite
0000F8EC                            ; ===========================================================================
0000F8EC                            
0000F8EC                            Obj40_Delete:				; XREF: Obj40_Index
0000F8EC 6000 DEC2                  		bra.w	DeleteObject
0000F8F0                            ; ===========================================================================
0000F8F0                            Ani_obj40:
0000F8F0                            	include "_anim\obj40.asm"
0000F8F0                            ; ---------------------------------------------------------------------------
0000F8F0                            ; Animation script - Motobug enemy
0000F8F0                            ; ---------------------------------------------------------------------------
0000F8F0 0000                       		dc.w byte_F788-Ani_obj40
0000F8F2 0000                       		dc.w byte_F78C-Ani_obj40
0000F8F4 0000                       		dc.w byte_F792-Ani_obj40
0000F8F6 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000F8FA 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000F900 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000F90E                            		even
0000F90E                            		even
0000F90E                            
0000F90E                            ; ---------------------------------------------------------------------------
0000F90E                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F90E                            ; ---------------------------------------------------------------------------
0000F90E                            Map_obj40:
0000F90E                            	include "_maps\obj40.asm"
0000F90E                            Map_cedc:
0000F90E 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000F910 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000F912 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000F914 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000F916 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000F918 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000F91A 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000F91C 04                         Map_cedc_E: 	dc.b $4
0000F91D F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000F922 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000F927 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000F92C 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000F931 04                         Map_cedc_23: 	dc.b $4
0000F932 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000F937 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000F93C F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000F941 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000F946 05                         Map_cedc_38: 	dc.b $5
0000F947 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000F94C 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000F951 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000F956 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000F95B 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000F960 01                         Map_cedc_52: 	dc.b $1
0000F961 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000F966 01                         Map_cedc_58: 	dc.b $1
0000F967 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000F96C 01                         Map_cedc_5E: 	dc.b $1
0000F96D FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000F972 00                         Map_cedc_64: 	dc.b $0
0000F974 00                         	even
0000F974 00                         	even
0000F974                            
0000F974                            ; ===========================================================================
0000F974                            ; ---------------------------------------------------------------------------
0000F974                            ; Object 4F - blank
0000F974                            ; ---------------------------------------------------------------------------
0000F974                            
0000F974                            Obj4F:					; XREF: Obj_Index
0000F974 4E75                       		rts	
0000F976                            
0000F976                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F976                            
0000F976                            
0000F976                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000F976 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000F97A D047                       		add.w	d7,d0
0000F97C 0240 0003                  		andi.w	#3,d0
0000F980 6600                       		bne.s	loc_F836
0000F982 7600                       		moveq	#0,d3
0000F984 1628 0019                  		move.b	$19(a0),d3
0000F988 4A68 0010                  		tst.w	$10(a0)
0000F98C 6B00                       		bmi.s	loc_F82C
0000F98E 6100 0000                  		bsr.w	ObjHitWallRight
0000F992 4A41                       		tst.w	d1
0000F994 6A00                       		bpl.s	loc_F836
0000F996                            
0000F996                            loc_F828:
0000F996 7001                       		moveq	#1,d0
0000F998 4E75                       		rts	
0000F99A                            ; ===========================================================================
0000F99A                            
0000F99A                            loc_F82C:
0000F99A 4643                       		not.w	d3
0000F99C 6100 0000                  		bsr.w	ObjHitWallLeft
0000F9A0 4A41                       		tst.w	d1
0000F9A2 6BF2                       		bmi.s	loc_F828
0000F9A4                            
0000F9A4                            loc_F836:
0000F9A4 7000                       		moveq	#0,d0
0000F9A6 4E75                       		rts	
0000F9A8                            ; End of function Obj50_ChkWall
0000F9A8                            
0000F9A8                            ; ===========================================================================
0000F9A8                            ; ---------------------------------------------------------------------------
0000F9A8                            ; Object 50 - Yadrin enemy (SYZ)
0000F9A8                            ; ---------------------------------------------------------------------------
0000F9A8                            
0000F9A8                            Obj50:					; XREF: Obj_Index
0000F9A8 7000                       		moveq	#0,d0
0000F9AA 1028 0024                  		move.b	$24(a0),d0
0000F9AE 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000F9B2 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000F9B6                            ; ===========================================================================
0000F9B6 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000F9B8 0000                       		dc.w Obj50_Action-Obj50_Index
0000F9BA                            ; ===========================================================================
0000F9BA                            
0000F9BA                            Obj50_Main:				; XREF: Obj50_Index
0000F9BA 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000F9C2 317C 247B 0002             		move.w	#$247B,2(a0)
0000F9C8 117C 0004 0001             		move.b	#4,1(a0)
0000F9CE 117C 0004 0018             		move.b	#4,$18(a0)
0000F9D4 117C 0014 0019             		move.b	#$14,$19(a0)
0000F9DA 117C 0011 0016             		move.b	#$11,$16(a0)
0000F9E0 117C 0008 0017             		move.b	#8,$17(a0)
0000F9E6 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000F9EC 6100 DD34                  		bsr.w	ObjectFall
0000F9F0 6100 0000                  		bsr.w	ObjHitFloor
0000F9F4 4A41                       		tst.w	d1
0000F9F6 6A00                       		bpl.s	locret_F89E
0000F9F8 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F9FC 317C 0000 0012             		move.w	#0,$12(a0)
0000FA02 5428 0024                  		addq.b	#2,$24(a0)
0000FA06 0868 0000 0022             		bchg	#0,$22(a0)
0000FA0C                            
0000FA0C                            locret_F89E:
0000FA0C 4E75                       		rts	
0000FA0E                            ; ===========================================================================
0000FA0E                            
0000FA0E                            Obj50_Action:				; XREF: Obj50_Index
0000FA0E 7000                       		moveq	#0,d0
0000FA10 1028 0025                  		move.b	$25(a0),d0
0000FA14 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FA18 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FA1C 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FA22 6100 AE02                  		bsr.w	AnimateSprite
0000FA26 6000 FDF4                  		bra.w	MarkObjGone
0000FA2A                            ; ===========================================================================
0000FA2A 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FA2C 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FA2E                            ; ===========================================================================
0000FA2E                            
0000FA2E                            Obj50_Move:				; XREF: Obj50_Index2
0000FA2E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FA32 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FA34 5428 0025                  		addq.b	#2,$25(a0)
0000FA38 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FA3E 117C 0001 001C             		move.b	#1,$1C(a0)
0000FA44 0868 0000 0022             		bchg	#0,$22(a0)
0000FA4A 6600                       		bne.s	locret_F8E2
0000FA4C 4468 0010                  		neg.w	$10(a0)		; change direction
0000FA50                            
0000FA50                            locret_F8E2:
0000FA50 4E75                       		rts	
0000FA52                            ; ===========================================================================
0000FA52                            
0000FA52                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FA52 6100 DCFA                  		bsr.w	SpeedToPos
0000FA56 6100 0000                  		bsr.w	ObjHitFloor
0000FA5A 0C41 FFF8                  		cmpi.w	#-8,d1
0000FA5E 6D00                       		blt.s	Obj50_Pause
0000FA60 0C41 000C                  		cmpi.w	#$C,d1
0000FA64 6C00                       		bge.s	Obj50_Pause
0000FA66 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FA6A 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FA6E 6600                       		bne.s	Obj50_Pause
0000FA70 4E75                       		rts	
0000FA72                            ; ===========================================================================
0000FA72                            
0000FA72                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FA72 5528 0025                  		subq.b	#2,$25(a0)
0000FA76 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FA7C 317C 0000 0010             		move.w	#0,$10(a0)
0000FA82 117C 0000 001C             		move.b	#0,$1C(a0)
0000FA88 4E75                       		rts	
0000FA8A                            ; ===========================================================================
0000FA8A                            Ani_obj50:
0000FA8A                            	include "_anim\obj50.asm"
0000FA8A                            ; ---------------------------------------------------------------------------
0000FA8A                            ; Animation script - Yadrin enemy
0000FA8A                            ; ---------------------------------------------------------------------------
0000FA8A 0000                       		dc.w byte_F920-Ani_obj50
0000FA8C 0000                       		dc.w byte_F924-Ani_obj50
0000FA8E 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FA92 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FA9C                            		even
0000FA9C                            		even
0000FA9C                            
0000FA9C                            ; ---------------------------------------------------------------------------
0000FA9C                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FA9C                            ; ---------------------------------------------------------------------------
0000FA9C                            Map_obj50:
0000FA9C                            	include "_maps\obj50.asm"
0000FA9C                            ; ---------------------------------------------------------------------------
0000FA9C                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FA9C                            ; ---------------------------------------------------------------------------
0000FA9C 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FAA0 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FAA4 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FAA8 05                         byte_F93A:	dc.b 5
0000FAA9 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FAAE FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FAB3 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FAB8 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FABD 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FAC2 05                         byte_F954:	dc.b 5
0000FAC3 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FAC8 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FACD EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FAD2 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FAD7 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FADC 05                         byte_F96E:	dc.b 5
0000FADD F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FAE2 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FAE7 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FAEC F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FAF1 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FAF6 05                         byte_F988:	dc.b 5
0000FAF7 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FAFC FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FB01 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FB06 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FB0B 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FB10 05                         byte_F9A2:	dc.b 5
0000FB11 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FB16 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FB1B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FB20 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FB25 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FB2A 05                         byte_F9BC:	dc.b 5
0000FB2B F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FB30 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FB35 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FB3A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FB3F 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FB44                            		even
0000FB44                            		even
0000FB44                            
0000FB44                            ; ---------------------------------------------------------------------------
0000FB44                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FB44                            ;
0000FB44                            ; variables:
0000FB44                            ; d1 = width
0000FB44                            ; d2 = height /	2 (when	jumping)
0000FB44                            ; d3 = height /	2 (when	walking)
0000FB44                            ; d4 = x-axis position
0000FB44                            ; ---------------------------------------------------------------------------
0000FB44                            
0000FB44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB44                            
0000FB44                            
0000FB44                            SolidObject:
0000FB44 4A28 0025                  		tst.b	$25(a0)
0000FB48 6700 0000                  		beq.w	loc_FAC8
0000FB4C 3401                       		move.w	d1,d2
0000FB4E D442                       		add.w	d2,d2
0000FB50 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB54 0829 0001 0022             		btst	#1,$22(a1)
0000FB5A 6600                       		bne.s	loc_F9FE
0000FB5C 3029 0008                  		move.w	8(a1),d0
0000FB60 9068 0008                  		sub.w	8(a0),d0
0000FB64 D041                       		add.w	d1,d0
0000FB66 6B00                       		bmi.s	loc_F9FE
0000FB68 B042                       		cmp.w	d2,d0
0000FB6A 6500                       		bcs.s	loc_FA12
0000FB6C                            
0000FB6C                            loc_F9FE:
0000FB6C 08A9 0003 0022             		bclr	#3,$22(a1)
0000FB72 08A8 0003 0022             		bclr	#3,$22(a0)
0000FB78 4228 0025                  		clr.b	$25(a0)
0000FB7C 7800                       		moveq	#0,d4
0000FB7E 4E75                       		rts	
0000FB80                            ; ===========================================================================
0000FB80                            
0000FB80                            loc_FA12:
0000FB80 3404                       		move.w	d4,d2
0000FB82 6100 80D8                  		bsr.w	MvSonicOnPtfm
0000FB86 7800                       		moveq	#0,d4
0000FB88 4E75                       		rts	
0000FB8A                            ; ===========================================================================
0000FB8A                            
0000FB8A                            SolidObject71:				; XREF: Obj71_Solid
0000FB8A 4A28 0025                  		tst.b	$25(a0)
0000FB8E 6700 0000                  		beq.w	loc_FAD0
0000FB92 3401                       		move.w	d1,d2
0000FB94 D442                       		add.w	d2,d2
0000FB96 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB9A 0829 0001 0022             		btst	#1,$22(a1)
0000FBA0 6600                       		bne.s	loc_FA44
0000FBA2 3029 0008                  		move.w	8(a1),d0
0000FBA6 9068 0008                  		sub.w	8(a0),d0
0000FBAA D041                       		add.w	d1,d0
0000FBAC 6B00                       		bmi.s	loc_FA44
0000FBAE B042                       		cmp.w	d2,d0
0000FBB0 6500                       		bcs.s	loc_FA58
0000FBB2                            
0000FBB2                            loc_FA44:
0000FBB2 08A9 0003 0022             		bclr	#3,$22(a1)
0000FBB8 08A8 0003 0022             		bclr	#3,$22(a0)
0000FBBE 4228 0025                  		clr.b	$25(a0)
0000FBC2 7800                       		moveq	#0,d4
0000FBC4 4E75                       		rts	
0000FBC6                            ; ===========================================================================
0000FBC6                            
0000FBC6                            loc_FA58:
0000FBC6 3404                       		move.w	d4,d2
0000FBC8 6100 8092                  		bsr.w	MvSonicOnPtfm
0000FBCC 7800                       		moveq	#0,d4
0000FBCE 4E75                       		rts	
0000FBD0                            ; ===========================================================================
0000FBD0                            
0000FBD0                            SolidObject2F:				; XREF: Obj2F_Solid
0000FBD0 43F8 D000                  		lea	($FFFFD000).w,a1
0000FBD4 4A28 0001                  		tst.b	1(a0)
0000FBD8 6A00 0000                  		bpl.w	loc_FB92
0000FBDC 3029 0008                  		move.w	8(a1),d0
0000FBE0 9068 0008                  		sub.w	8(a0),d0
0000FBE4 D041                       		add.w	d1,d0
0000FBE6 6B00 0000                  		bmi.w	loc_FB92
0000FBEA 3601                       		move.w	d1,d3
0000FBEC D643                       		add.w	d3,d3
0000FBEE B043                       		cmp.w	d3,d0
0000FBF0 6200 0000                  		bhi.w	loc_FB92
0000FBF4 3A00                       		move.w	d0,d5
0000FBF6 0828 0000 0001             		btst	#0,1(a0)
0000FBFC 6700                       		beq.s	loc_FA94
0000FBFE 4645                       		not.w	d5
0000FC00 DA43                       		add.w	d3,d5
0000FC02                            
0000FC02                            loc_FA94:
0000FC02 E24D                       		lsr.w	#1,d5
0000FC04 7600                       		moveq	#0,d3
0000FC06 1632 5000                  		move.b	(a2,d5.w),d3
0000FC0A 9612                       		sub.b	(a2),d3
0000FC0C 3A28 000C                  		move.w	$C(a0),d5
0000FC10 9A43                       		sub.w	d3,d5
0000FC12 1629 0016                  		move.b	$16(a1),d3
0000FC16 4883                       		ext.w	d3
0000FC18 D443                       		add.w	d3,d2
0000FC1A 3629 000C                  		move.w	$C(a1),d3
0000FC1E 9645                       		sub.w	d5,d3
0000FC20 5843                       		addq.w	#4,d3
0000FC22 D642                       		add.w	d2,d3
0000FC24 6B00 0000                  		bmi.w	loc_FB92
0000FC28 3802                       		move.w	d2,d4
0000FC2A D844                       		add.w	d4,d4
0000FC2C B644                       		cmp.w	d4,d3
0000FC2E 6400 0000                  		bcc.w	loc_FB92
0000FC32 6000 0000                  		bra.w	loc_FB0E
0000FC36                            ; ===========================================================================
0000FC36                            
0000FC36                            loc_FAC8:
0000FC36 4A28 0001                  		tst.b	1(a0)
0000FC3A 6A00 0000                  		bpl.w	loc_FB92
0000FC3E                            
0000FC3E                            loc_FAD0:
0000FC3E 43F8 D000                  		lea	($FFFFD000).w,a1
0000FC42 3029 0008                  		move.w	8(a1),d0
0000FC46 9068 0008                  		sub.w	8(a0),d0
0000FC4A D041                       		add.w	d1,d0
0000FC4C 6B00 0000                  		bmi.w	loc_FB92
0000FC50 3601                       		move.w	d1,d3
0000FC52 D643                       		add.w	d3,d3
0000FC54 B043                       		cmp.w	d3,d0
0000FC56 6200 0000                  		bhi.w	loc_FB92
0000FC5A 1629 0016                  		move.b	$16(a1),d3
0000FC5E 4883                       		ext.w	d3
0000FC60 D443                       		add.w	d3,d2
0000FC62 3629 000C                  		move.w	$C(a1),d3
0000FC66 9668 000C                  		sub.w	$C(a0),d3
0000FC6A 5843                       		addq.w	#4,d3
0000FC6C D642                       		add.w	d2,d3
0000FC6E 6B00 0000                  		bmi.w	loc_FB92
0000FC72 3802                       		move.w	d2,d4
0000FC74 D844                       		add.w	d4,d4
0000FC76 B644                       		cmp.w	d4,d3
0000FC78 6400 0000                  		bcc.w	loc_FB92
0000FC7C                            
0000FC7C                            loc_FB0E:
0000FC7C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000FC80 6B00 0000                  		bmi.w	loc_FB92
0000FC84 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000FC8A 6400 0000                  		bcc.w	loc_FB92
0000FC8E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FC92 6600 0000                  		bne.w	loc_FBAC
0000FC96 3A00                       		move.w	d0,d5
0000FC98 B240                       		cmp.w	d0,d1
0000FC9A 6400                       		bcc.s	loc_FB36
0000FC9C D241                       		add.w	d1,d1
0000FC9E 9041                       		sub.w	d1,d0
0000FCA0 3A00                       		move.w	d0,d5
0000FCA2 4445                       		neg.w	d5
0000FCA4                            
0000FCA4                            loc_FB36:
0000FCA4 3203                       		move.w	d3,d1
0000FCA6 B443                       		cmp.w	d3,d2
0000FCA8 6400                       		bcc.s	loc_FB44
0000FCAA 5943                       		subq.w	#4,d3
0000FCAC 9644                       		sub.w	d4,d3
0000FCAE 3203                       		move.w	d3,d1
0000FCB0 4441                       		neg.w	d1
0000FCB2                            
0000FCB2                            loc_FB44:
0000FCB2 BA41                       		cmp.w	d1,d5
0000FCB4 6200 0000                  		bhi.w	loc_FBB0
0000FCB8 0C41 0004                  		cmpi.w	#4,d1
0000FCBC 6300                       		bls.s	loc_FB8C
0000FCBE 4A40                       		tst.w	d0
0000FCC0 6700                       		beq.s	loc_FB70
0000FCC2 6B00                       		bmi.s	loc_FB5E
0000FCC4 4A69 0010                  		tst.w	$10(a1)
0000FCC8 6B00                       		bmi.s	loc_FB70
0000FCCA 6000                       		bra.s	loc_FB64
0000FCCC                            ; ===========================================================================
0000FCCC                            
0000FCCC                            loc_FB5E:
0000FCCC 4A69 0010                  		tst.w	$10(a1)
0000FCD0 6A00                       		bpl.s	loc_FB70
0000FCD2                            
0000FCD2                            loc_FB64:
0000FCD2 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0000FCD8 337C 0000 0010             		move.w	#0,$10(a1)
0000FCDE                            
0000FCDE                            loc_FB70:
0000FCDE 9169 0008                  		sub.w	d0,8(a1)
0000FCE2 0829 0001 0022             		btst	#1,$22(a1)
0000FCE8 6600                       		bne.s	loc_FB8C
0000FCEA 08E9 0005 0022             		bset	#5,$22(a1)
0000FCF0 08E8 0005 0022             		bset	#5,$22(a0)
0000FCF6 7801                       		moveq	#1,d4
0000FCF8 4E75                       		rts	
0000FCFA                            ; ===========================================================================
0000FCFA                            
0000FCFA                            loc_FB8C:
0000FCFA 6100                       		bsr.s	loc_FBA0
0000FCFC 7801                       		moveq	#1,d4
0000FCFE 4E75                       		rts	
0000FD00                            ; ===========================================================================
0000FD00                            
0000FD00                            loc_FB92:
0000FD00 0828 0005 0022             		btst	#5,$22(a0)
0000FD06 6700                       		beq.s	loc_FBAC
0000FD08 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0000FD0E                            
0000FD0E                            loc_FBA0:
0000FD0E 08A8 0005 0022             		bclr	#5,$22(a0)
0000FD14 08A9 0005 0022             		bclr	#5,$22(a1)
0000FD1A                            
0000FD1A                            loc_FBAC:
0000FD1A 7800                       		moveq	#0,d4
0000FD1C 4E75                       		rts	
0000FD1E                            ; ===========================================================================
0000FD1E                            
0000FD1E                            loc_FBB0:
0000FD1E 4A43                       		tst.w	d3
0000FD20 6B00                       		bmi.s	loc_FBBC
0000FD22 0C43 0010                  		cmpi.w	#$10,d3
0000FD26 6500                       		bcs.s	loc_FBEE
0000FD28 60D6                       		bra.s	loc_FB92
0000FD2A                            ; ===========================================================================
0000FD2A                            
0000FD2A                            loc_FBBC:
0000FD2A 4A69 0012                  		tst.w	$12(a1)
0000FD2E 6700                       		beq.s	loc_FBD6
0000FD30 6A00                       		bpl.s	loc_FBD2
0000FD32 4A43                       		tst.w	d3
0000FD34 6A00                       		bpl.s	loc_FBD2
0000FD36 9769 000C                  		sub.w	d3,$C(a1)
0000FD3A 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0000FD40                            
0000FD40                            loc_FBD2:
0000FD40 78FF                       		moveq	#-1,d4
0000FD42 4E75                       		rts	
0000FD44                            ; ===========================================================================
0000FD44                            
0000FD44                            loc_FBD6:
0000FD44 0829 0001 0022             		btst	#1,$22(a1)
0000FD4A 66F4                       		bne.s	loc_FBD2
0000FD4C 2F08                       		move.l	a0,-(sp)
0000FD4E 2049                       		movea.l	a1,a0
0000FD50 4EB9 0000 0000             		jsr	KillSonic
0000FD56 205F                       		movea.l	(sp)+,a0
0000FD58 78FF                       		moveq	#-1,d4
0000FD5A 4E75                       		rts	
0000FD5C                            ; ===========================================================================
0000FD5C                            
0000FD5C                            loc_FBEE:
0000FD5C 5943                       		subq.w	#4,d3
0000FD5E 7200                       		moveq	#0,d1
0000FD60 1228 0019                  		move.b	$19(a0),d1
0000FD64 3401                       		move.w	d1,d2
0000FD66 D442                       		add.w	d2,d2
0000FD68 D269 0008                  		add.w	8(a1),d1
0000FD6C 9268 0008                  		sub.w	8(a0),d1
0000FD70 6B00                       		bmi.s	loc_FC28
0000FD72 B242                       		cmp.w	d2,d1
0000FD74 6400                       		bcc.s	loc_FC28
0000FD76 4A69 0012                  		tst.w	$12(a1)
0000FD7A 6B00                       		bmi.s	loc_FC28
0000FD7C 9769 000C                  		sub.w	d3,$C(a1)
0000FD80 5369 000C                  		subq.w	#1,$C(a1)
0000FD84 6100                       		bsr.s	sub_FC2C
0000FD86 117C 0002 0025             		move.b	#2,$25(a0)
0000FD8C 08E8 0003 0022             		bset	#3,$22(a0)
0000FD92 78FF                       		moveq	#-1,d4
0000FD94 4E75                       		rts	
0000FD96                            ; ===========================================================================
0000FD96                            
0000FD96                            loc_FC28:
0000FD96 7800                       		moveq	#0,d4
0000FD98 4E75                       		rts	
0000FD9A                            ; End of function SolidObject
0000FD9A                            
0000FD9A                            
0000FD9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD9A                            
0000FD9A                            
0000FD9A                            sub_FC2C:				; XREF: SolidObject
0000FD9A 0829 0003 0022             		btst	#3,$22(a1)
0000FDA0 6700                       		beq.s	loc_FC4E
0000FDA2 7000                       		moveq	#0,d0
0000FDA4 1029 003D                  		move.b	$3D(a1),d0
0000FDA8 ED48                       		lsl.w	#6,d0
0000FDAA 0680 00FF D000             		addi.l	#$FFD000,d0
0000FDB0 2440                       		movea.l	d0,a2
0000FDB2 08AA 0003 0022             		bclr	#3,$22(a2)
0000FDB8 422A 0025                  		clr.b	$25(a2)
0000FDBC                            
0000FDBC                            loc_FC4E:
0000FDBC 3008                       		move.w	a0,d0
0000FDBE 0440 D000                  		subi.w	#-$3000,d0
0000FDC2 EC48                       		lsr.w	#6,d0
0000FDC4 0240 007F                  		andi.w	#$7F,d0
0000FDC8 1340 003D                  		move.b	d0,$3D(a1)
0000FDCC 137C 0000 0026             		move.b	#0,$26(a1)
0000FDD2 337C 0000 0012             		move.w	#0,$12(a1)
0000FDD8 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000FDDE 0829 0001 0022             		btst	#1,$22(a1)
0000FDE4 6700                       		beq.s	loc_FC84
0000FDE6 2F08                       		move.l	a0,-(sp)
0000FDE8 2049                       		movea.l	a1,a0
0000FDEA 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000FDF0 205F                       		movea.l	(sp)+,a0
0000FDF2                            
0000FDF2                            loc_FC84:
0000FDF2 08E9 0003 0022             		bset	#3,$22(a1)
0000FDF8 08E8 0003 0022             		bset	#3,$22(a0)
0000FDFE 4E75                       		rts	
0000FE00                            ; End of function sub_FC2C
0000FE00                            
0000FE00                            ; ===========================================================================
0000FE00                            ; ---------------------------------------------------------------------------
0000FE00                            ; Object 51 - smashable	green block (MZ)
0000FE00                            ; ---------------------------------------------------------------------------
0000FE00                            
0000FE00                            Obj51:					; XREF: Obj_Index
0000FE00 7000                       		moveq	#0,d0
0000FE02 1028 0024                  		move.b	$24(a0),d0
0000FE06 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0000FE0A 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0000FE0E 6000 FA0C                  		bra.w	MarkObjGone
0000FE12                            ; ===========================================================================
0000FE12 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0000FE14 0000                       		dc.w Obj51_Solid-Obj51_Index
0000FE16 0000                       		dc.w Obj51_Display-Obj51_Index
0000FE18                            ; ===========================================================================
0000FE18                            
0000FE18                            Obj51_Main:				; XREF: Obj51_Index
0000FE18 5428 0024                  		addq.b	#2,$24(a0)
0000FE1C 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0000FE24 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FE2A 117C 0004 0001             		move.b	#4,1(a0)
0000FE30 117C 0010 0019             		move.b	#$10,$19(a0)
0000FE36 117C 0004 0018             		move.b	#4,$18(a0)
0000FE3C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000FE42                            
0000FE42                            Obj51_Solid:				; XREF: Obj51_Index
0000FE42 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0000FE48 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0000FE4E 323C 001B                  		move.w	#$1B,d1
0000FE52 343C 0010                  		move.w	#$10,d2
0000FE56 363C 0011                  		move.w	#$11,d3
0000FE5A 3828 0008                  		move.w	8(a0),d4
0000FE5E 6100 FCE4                  		bsr.w	SolidObject
0000FE62 0828 0003 0022             		btst	#3,$22(a0)
0000FE68 6600                       		bne.s	Obj51_Smash
0000FE6A                            
0000FE6A                            locret_FCFC:
0000FE6A 4E75                       		rts	
0000FE6C                            ; ===========================================================================
0000FE6C                            
0000FE6C                            Obj51_Smash:				; XREF: Obj51_Solid
0000FE6C 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0000FE72 66F6                       		bne.s	locret_FCFC	; if not, branch
0000FE74 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0000FE7A 08E9 0002 0022             		bset	#2,$22(a1)
0000FE80 137C 000E 0016             		move.b	#$E,$16(a1)
0000FE86 137C 0007 0017             		move.b	#7,$17(a1)
0000FE8C 137C 0002 001C             		move.b	#2,$1C(a1)
0000FE92 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0000FE98 08E9 0001 0022             		bset	#1,$22(a1)
0000FE9E 08A9 0003 0022             		bclr	#3,$22(a1)
0000FEA4 137C 0002 0024             		move.b	#2,$24(a1)
0000FEAA 08A8 0003 0022             		bclr	#3,$22(a0)
0000FEB0 4228 0025                  		clr.b	$25(a0)
0000FEB4 117C 0001 001A             		move.b	#1,$1A(a0)
0000FEBA 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0000FEC0 7203                       		moveq	#3,d1		; set number of	fragments to 4
0000FEC2 343C 0038                  		move.w	#$38,d2
0000FEC6 6100 D49A                  		bsr.w	SmashObject
0000FECA 6100 DD2E                  		bsr.w	SingleObjLoad
0000FECE 6600                       		bne.s	Obj51_Display
0000FED0 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000FED4 3368 0008 0008             		move.w	8(a0),8(a1)
0000FEDA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FEE0 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0000FEE4 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0000FEE8 0C42 0006                  		cmpi.w	#6,d2
0000FEEC 6500                       		bcs.s	Obj51_Bonus
0000FEEE 7406                       		moveq	#6,d2
0000FEF0                            
0000FEF0                            Obj51_Bonus:
0000FEF0 7000                       		moveq	#0,d0
0000FEF2 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0000FEF6 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0000FEFC 6500                       		bcs.s	loc_FD98	; if not, branch
0000FEFE 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0000FF02 740A                       		moveq	#10,d2
0000FF04                            
0000FF04                            loc_FD98:
0000FF04 4EB9 0000 0000             		jsr	AddPoints
0000FF0A E24A                       		lsr.w	#1,d2
0000FF0C 1342 001A                  		move.b	d2,$1A(a1)
0000FF10                            
0000FF10                            Obj51_Display:				; XREF: Obj51_Index
0000FF10 6100 D83C                  		bsr.w	SpeedToPos
0000FF14 0668 0038 0012             		addi.w	#$38,$12(a0)
0000FF1A 6100 D858                  		bsr.w	DisplaySprite
0000FF1E 4A28 0001                  		tst.b	1(a0)
0000FF22 6A00 D88C                  		bpl.w	DeleteObject
0000FF26 4E75                       		rts	
0000FF28                            ; ===========================================================================
0000FF28 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0000FF2C FF00 FF00                  		dc.w $FF00, $FF00
0000FF30 0200 FE00                  		dc.w $200, $FE00
0000FF34 0100 FF00                  		dc.w $100, $FF00
0000FF38                            
0000FF38 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0000FF40                            ; ---------------------------------------------------------------------------
0000FF40                            ; Sprite mappings - smashable green block (MZ)
0000FF40                            ; ---------------------------------------------------------------------------
0000FF40                            Map_obj51:
0000FF40                            	include "_maps\obj51.asm"
0000FF40                            ; ---------------------------------------------------------------------------
0000FF40                            ; Sprite mappings - smashable green block (MZ)
0000FF40                            ; ---------------------------------------------------------------------------
0000FF40 0000                       		dc.w byte_FDD8-Map_obj51
0000FF42 0000                       		dc.w byte_FDE3-Map_obj51
0000FF44 02                         byte_FDD8:	dc.b 2
0000FF45 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0000FF4A 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0000FF4F 04                         byte_FDE3:	dc.b 4
0000FF50 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0000FF55 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0000FF5A F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0000FF5F 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0000FF64                            		even
0000FF64                            		even
0000FF64                            
0000FF64                            ; ===========================================================================
0000FF64                            ; ---------------------------------------------------------------------------
0000FF64                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0000FF64                            ; ---------------------------------------------------------------------------
0000FF64                            
0000FF64                            Obj52:					; XREF: Obj_Index
0000FF64 7000                       		moveq	#0,d0
0000FF66 1028 0024                  		move.b	$24(a0),d0
0000FF6A 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0000FF6E 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0000FF72                            ; ===========================================================================
0000FF72 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0000FF74 0000                       		dc.w Obj52_Platform-Obj52_Index
0000FF76 0000                       		dc.w Obj52_StandOn-Obj52_Index
0000FF78                            
0000FF78 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0000FF7A 2001                       		dc.b $20, 1
0000FF7C 2002                       		dc.b $20, 2
0000FF7E 4003                       		dc.b $40, 3
0000FF80 3004                       		dc.b $30, 4
0000FF82                            ; ===========================================================================
0000FF82                            
0000FF82                            Obj52_Main:				; XREF: Obj52_Index
0000FF82 5428 0024                  		addq.b	#2,$24(a0)
0000FF86 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0000FF8E 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FF94 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000FF9A 6600                       		bne.s	loc_FE44
0000FF9C 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0000FFA4 317C 43BC 0002             		move.w	#$43BC,2(a0)
0000FFAA 117C 0007 0016             		move.b	#7,$16(a0)
0000FFB0                            
0000FFB0                            loc_FE44:
0000FFB0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000FFB6 6600                       		bne.s	loc_FE60
0000FFB8 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0000FFBE 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0000FFC4 6700                       		beq.s	loc_FE60	; if yes, branch
0000FFC6 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0000FFCC                            
0000FFCC                            loc_FE60:
0000FFCC 117C 0004 0001             		move.b	#4,1(a0)
0000FFD2 7000                       		moveq	#0,d0
0000FFD4 1028 0028                  		move.b	$28(a0),d0
0000FFD8 E648                       		lsr.w	#3,d0
0000FFDA 0240 001E                  		andi.w	#$1E,d0
0000FFDE 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0000FFE2 115A 0019                  		move.b	(a2)+,$19(a0)
0000FFE6 115A 001A                  		move.b	(a2)+,$1A(a0)
0000FFEA 117C 0004 0018             		move.b	#4,$18(a0)
0000FFF0 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FFF6 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000FFFC 0228 000F 0028             		andi.b	#$F,$28(a0)
00010002                            
00010002                            Obj52_Platform:				; XREF: Obj52_Index
00010002 6100 0000                  		bsr.w	Obj52_Move
00010006 7200                       		moveq	#0,d1
00010008 1228 0019                  		move.b	$19(a0),d1
0001000C 4EB9 0000 758A             		jsr	(PlatformObject).l
00010012 6000                       		bra.s	Obj52_ChkDel
00010014                            ; ===========================================================================
00010014                            
00010014                            Obj52_StandOn:				; XREF: Obj52_Index
00010014 7200                       		moveq	#0,d1
00010016 1228 0019                  		move.b	$19(a0),d1
0001001A 4EB9 0000 76FE             		jsr	(ExitPlatform).l
00010020 3F28 0008                  		move.w	8(a0),-(sp)
00010024 6100 0000                  		bsr.w	Obj52_Move
00010028 341F                       		move.w	(sp)+,d2
0001002A 4EB9 0000 7C68             		jsr	(MvSonicOnPtfm2).l
00010030                            
00010030                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010030 3028 0030                  		move.w	$30(a0),d0
00010034 0240 FF80                  		andi.w	#$FF80,d0
00010038 3238 F700                  		move.w	($FFFFF700).w,d1
0001003C 0441 0080                  		subi.w	#$80,d1
00010040 0241 FF80                  		andi.w	#$FF80,d1
00010044 9041                       		sub.w	d1,d0
00010046 0C40 0280                  		cmpi.w	#$280,d0
0001004A 6200 D764                  		bhi.w	DeleteObject
0001004E 6000 D724                  		bra.w	DisplaySprite
00010052                            ; ===========================================================================
00010052                            
00010052                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010052 7000                       		moveq	#0,d0
00010054 1028 0028                  		move.b	$28(a0),d0
00010058 0240 000F                  		andi.w	#$F,d0
0001005C D040                       		add.w	d0,d0
0001005E 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010062 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010066                            ; ===========================================================================
00010066 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0001006A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001006E 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010072 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010076 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0001007A 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0001007C                            ; ===========================================================================
0001007C                            
0001007C                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0001007C 4E75                       		rts	
0001007E                            ; ===========================================================================
0001007E                            
0001007E                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001007E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010082 323C 0060                  		move.w	#$60,d1
00010086 0828 0000 0022             		btst	#0,$22(a0)
0001008C 6700                       		beq.s	loc_FF26
0001008E 4440                       		neg.w	d0
00010090 D041                       		add.w	d1,d0
00010092                            
00010092                            loc_FF26:
00010092 3228 0030                  		move.w	$30(a0),d1
00010096 9240                       		sub.w	d0,d1
00010098 3141 0008                  		move.w	d1,8(a0)
0001009C 4E75                       		rts	
0001009E                            ; ===========================================================================
0001009E                            
0001009E                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001009E 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000100A4 6600                       		bne.s	Obj52_02_Wait
000100A6 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000100AA                            
000100AA                            Obj52_02_Wait:
000100AA 4E75                       		rts	
000100AC                            ; ===========================================================================
000100AC                            
000100AC                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000100AC 7600                       		moveq	#0,d3
000100AE 1628 0019                  		move.b	$19(a0),d3
000100B2 6100 0000                  		bsr.w	ObjHitWallRight
000100B6 4A41                       		tst.w	d1		; has the platform hit a wall?
000100B8 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000100BA 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000100BE 3168 0008 0030             		move.w	8(a0),$30(a0)
000100C4 4E75                       		rts	
000100C6                            ; ===========================================================================
000100C6                            
000100C6                            Obj52_03_End:
000100C6 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000100CA 4E75                       		rts	
000100CC                            ; ===========================================================================
000100CC                            
000100CC                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000100CC 7600                       		moveq	#0,d3
000100CE 1628 0019                  		move.b	$19(a0),d3
000100D2 6100 0000                  		bsr.w	ObjHitWallRight
000100D6 4A41                       		tst.w	d1		; has the platform hit a wall?
000100D8 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000100DA 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000100DE 3168 0008 0030             		move.w	8(a0),$30(a0)
000100E4 4E75                       		rts	
000100E6                            ; ===========================================================================
000100E6                            
000100E6                            Obj52_05_End:
000100E6 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000100EA 4E75                       		rts	
000100EC                            ; ===========================================================================
000100EC                            
000100EC                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000100EC 6100 D660                  		bsr.w	SpeedToPos
000100F0 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000100F6 6100 0000                  		bsr.w	ObjHitFloor
000100FA 4A41                       		tst.w	d1		; has platform hit the floor?
000100FC 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010100 D368 000C                  		add.w	d1,$C(a0)
00010104 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010108 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001010C                            
0001010C                            locret_FFA0:
0001010C 4E75                       		rts	
0001010E                            ; ===========================================================================
0001010E                            
0001010E                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001010E 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010112 6700                       		beq.s	Obj52_07_ChkDel
00010114 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010118                            
00010118                            Obj52_07_ChkDel:
00010118 588F                       		addq.l	#4,sp
0001011A 3028 0030                  		move.w	$30(a0),d0
0001011E 0240 FF80                  		andi.w	#$FF80,d0
00010122 3238 F700                  		move.w	($FFFFF700).w,d1
00010126 0441 0080                  		subi.w	#$80,d1
0001012A 0241 FF80                  		andi.w	#$FF80,d1
0001012E 9041                       		sub.w	d1,d0
00010130 0C40 0280                  		cmpi.w	#$280,d0
00010134 6200 D67A                  		bhi.w	DeleteObject
00010138 4E75                       		rts	
0001013A                            ; ===========================================================================
0001013A                            
0001013A                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0001013A 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001013E 323C 0080                  		move.w	#$80,d1
00010142 0828 0000 0022             		btst	#0,$22(a0)
00010148 6700                       		beq.s	loc_FFE2
0001014A 4440                       		neg.w	d0
0001014C D041                       		add.w	d1,d0
0001014E                            
0001014E                            loc_FFE2:
0001014E 3228 0032                  		move.w	$32(a0),d1
00010152 9240                       		sub.w	d0,d1
00010154 3141 000C                  		move.w	d1,$C(a0)
00010158 4E75                       		rts	
0001015A                            ; ===========================================================================
0001015A                            
0001015A                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
0001015A 7600                       		moveq	#0,d3
0001015C 1628 0019                  		move.b	$19(a0),d3
00010160 D643                       		add.w	d3,d3
00010162 7208                       		moveq	#8,d1
00010164 0828 0000 0022             		btst	#0,$22(a0)
0001016A 6700                       		beq.s	loc_10004
0001016C 4441                       		neg.w	d1
0001016E 4443                       		neg.w	d3
00010170                            
00010170                            loc_10004:
00010170 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010174 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010176 3028 0008                  		move.w	8(a0),d0
0001017A 9068 0030                  		sub.w	$30(a0),d0
0001017E B043                       		cmp.w	d3,d0
00010180 6700                       		beq.s	Obj52_0A_Wait
00010182 D368 0008                  		add.w	d1,8(a0)	; move platform
00010186 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001018C 4E75                       		rts	
0001018E                            ; ===========================================================================
0001018E                            
0001018E                            Obj52_0A_Wait:
0001018E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010192 6600                       		bne.s	locret_1002E	; if time remains, branch
00010194 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001019A                            
0001019A                            locret_1002E:
0001019A 4E75                       		rts	
0001019C                            ; ===========================================================================
0001019C                            
0001019C                            Obj52_0A_Back:
0001019C 3028 0008                  		move.w	8(a0),d0
000101A0 9068 0030                  		sub.w	$30(a0),d0
000101A4 6700                       		beq.s	Obj52_0A_Reset
000101A6 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000101AA 4E75                       		rts	
000101AC                            ; ===========================================================================
000101AC                            
000101AC                            Obj52_0A_Reset:
000101AC 4268 0036                  		clr.w	$36(a0)
000101B0 5328 0028                  		subq.b	#1,$28(a0)
000101B4 4E75                       		rts	
000101B6                            ; ===========================================================================
000101B6                            ; ---------------------------------------------------------------------------
000101B6                            ; Sprite mappings - moving blocks (MZ, SBZ)
000101B6                            ; ---------------------------------------------------------------------------
000101B6                            Map_obj52:
000101B6                            	include "_maps\obj52mz.asm"
000101B6                            ; ---------------------------------------------------------------------------
000101B6                            ; Sprite mappings - moving blocks (MZ, SBZ)
000101B6                            ; ---------------------------------------------------------------------------
000101B6 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000101BA 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000101BE 0000                       		dc.w byte_1008F-Map_obj52
000101C0 01                         byte_10054:	dc.b 1
000101C1 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000101C6 02                         byte_1005A:	dc.b 2
000101C7 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000101CC F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000101D1 04                         byte_10065:	dc.b 4
000101D2 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000101D7 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000101DC F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000101E1 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000101E6 04                         byte_1007A:	dc.b 4
000101E7 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000101EC F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000101F1 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000101F6 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000101FB 03                         byte_1008F:	dc.b 3
000101FC F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010201 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010206 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001020C 00                         		even
0001020C 00                         		even
0001020C                            
0001020C                            ; ---------------------------------------------------------------------------
0001020C                            ; Sprite mappings - moving block (LZ)
0001020C                            ; ---------------------------------------------------------------------------
0001020C                            Map_obj52a:
0001020C                            	include "_maps\obj52lz.asm"
0001020C                            ; ---------------------------------------------------------------------------
0001020C                            ; Sprite mappings - moving block (LZ)
0001020C                            ; ---------------------------------------------------------------------------
0001020C 0000                       		dc.w byte_100A2-Map_obj52a
0001020E 01                         byte_100A2:	dc.b 1
0001020F F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010214                            		even
00010214                            		even
00010214                            
00010214                            ; ===========================================================================
00010214                            ; ---------------------------------------------------------------------------
00010214                            ; Object 55 - Basaran enemy (MZ)
00010214                            ; ---------------------------------------------------------------------------
00010214                            
00010214                            Obj55:					; XREF: Obj_Index
00010214 7000                       		moveq	#0,d0
00010216 1028 0024                  		move.b	$24(a0),d0
0001021A 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001021E 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010222                            ; ===========================================================================
00010222 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010224 0000                       		dc.w Obj55_Action-Obj55_Index
00010226                            ; ===========================================================================
00010226                            
00010226                            Obj55_Main:				; XREF: Obj55_Index
00010226 5428 0024                  		addq.b	#2,$24(a0)
0001022A 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010232 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010238 117C 0004 0001             		move.b	#4,1(a0)
0001023E 117C 000C 0016             		move.b	#$C,$16(a0)
00010244 117C 0002 0018             		move.b	#2,$18(a0)
0001024A 117C 000B 0020             		move.b	#$B,$20(a0)
00010250 117C 0010 0019             		move.b	#$10,$19(a0)
00010256                            
00010256                            Obj55_Action:				; XREF: Obj55_Index
00010256 7000                       		moveq	#0,d0
00010258 1028 0025                  		move.b	$25(a0),d0
0001025C 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010260 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010264 43F9 0000 0000             		lea	(Ani_obj55).l,a1
0001026A 6100 A5BA                  		bsr.w	AnimateSprite
0001026E 6000 F5AC                  		bra.w	MarkObjGone
00010272                            ; ===========================================================================
00010272 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010274 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010276 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010278 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
0001027A                            ; ===========================================================================
0001027A                            
0001027A                            Obj55_ChkDrop:				; XREF: Obj55_Index2
0001027A 343C 0080                  		move.w	#$80,d2
0001027E 6100 0000                  		bsr.w	Obj55_ChkSonic
00010282 6400                       		bcc.s	Obj55_NoDrop
00010284 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010288 3140 0036                  		move.w	d0,$36(a0)
0001028C 9068 000C                  		sub.w	$C(a0),d0
00010290 6500                       		bcs.s	Obj55_NoDrop
00010292 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010296 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010298 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001029C 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0001029E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000102A2 D007                       		add.b	d7,d0
000102A4 0200 0007                  		andi.b	#7,d0
000102A8 6600                       		bne.s	Obj55_NoDrop
000102AA 117C 0001 001C             		move.b	#1,$1C(a0)
000102B0 5428 0025                  		addq.b	#2,$25(a0)
000102B4                            
000102B4                            Obj55_NoDrop:
000102B4 4E75                       		rts	
000102B6                            ; ===========================================================================
000102B6                            
000102B6                            Obj55_DropFly:				; XREF: Obj55_Index2
000102B6 6100 D496                  		bsr.w	SpeedToPos
000102BA 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000102C0 343C 0080                  		move.w	#$80,d2
000102C4 6100 0000                  		bsr.w	Obj55_ChkSonic
000102C8 3028 0036                  		move.w	$36(a0),d0
000102CC 9068 000C                  		sub.w	$C(a0),d0
000102D0 6500                       		bcs.s	Obj55_ChkDel
000102D2 0C40 0010                  		cmpi.w	#$10,d0
000102D6 6400                       		bcc.s	locret_10180
000102D8 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000102DC 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000102E2 117C 0002 001C             		move.b	#2,$1C(a0)
000102E8 5428 0025                  		addq.b	#2,$25(a0)
000102EC                            
000102EC                            locret_10180:
000102EC 4E75                       		rts	
000102EE                            ; ===========================================================================
000102EE                            
000102EE                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000102EE 4A28 0001                  		tst.b	1(a0)
000102F2 6A00 D4BC                  		bpl.w	DeleteObject
000102F6 4E75                       		rts	
000102F8                            ; ===========================================================================
000102F8                            
000102F8                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000102F8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000102FC 0200 000F                  		andi.b	#$F,d0
00010300 6600                       		bne.s	loc_101A0
00010302 303C 00C0                  		move.w	#$C0,d0
00010306 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flapping sound
0001030C                            
0001030C                            loc_101A0:
0001030C 6100 D440                  		bsr.w	SpeedToPos
00010310 3038 D008                  		move.w	($FFFFD008).w,d0
00010314 9068 0008                  		sub.w	8(a0),d0
00010318 6400                       		bcc.s	loc_101B0
0001031A 4440                       		neg.w	d0
0001031C                            
0001031C                            loc_101B0:
0001031C 0C40 0080                  		cmpi.w	#$80,d0
00010320 6500                       		bcs.s	locret_101C6
00010322 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010326 D007                       		add.b	d7,d0
00010328 0200 0007                  		andi.b	#7,d0
0001032C 6600                       		bne.s	locret_101C6
0001032E 5428 0025                  		addq.b	#2,$25(a0)
00010332                            
00010332                            locret_101C6:
00010332 4E75                       		rts	
00010334                            ; ===========================================================================
00010334                            
00010334                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010334 6100 D418                  		bsr.w	SpeedToPos
00010338 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001033E 6100 0000                  		bsr.w	ObjHitCeiling
00010342 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010344 6A00                       		bpl.s	locret_101F4	; if not, branch
00010346 9368 000C                  		sub.w	d1,$C(a0)
0001034A 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010350 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010354 4268 0012                  		clr.w	$12(a0)
00010358 4228 001C                  		clr.b	$1C(a0)
0001035C 4228 0025                  		clr.b	$25(a0)
00010360                            
00010360                            locret_101F4:
00010360 4E75                       		rts	
00010362                            ; ===========================================================================
00010362                            
00010362                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010362 323C 0100                  		move.w	#$100,d1
00010366 08E8 0000 0022             		bset	#0,$22(a0)
0001036C 3038 D008                  		move.w	($FFFFD008).w,d0
00010370 9068 0008                  		sub.w	8(a0),d0
00010374 6400                       		bcc.s	loc_10214
00010376 4440                       		neg.w	d0
00010378 4441                       		neg.w	d1
0001037A 08A8 0000 0022             		bclr	#0,$22(a0)
00010380                            
00010380                            loc_10214:
00010380 B042                       		cmp.w	d2,d0
00010382 4E75                       		rts	
00010384                            ; ===========================================================================
00010384 6100 D3C8                  		bsr.w	SpeedToPos
00010388 6100 D3EA                  		bsr.w	DisplaySprite
0001038C 4A28 0001                  		tst.b	1(a0)
00010390 6A00 D41E                  		bpl.w	DeleteObject
00010394 4E75                       		rts	
00010396                            ; ===========================================================================
00010396                            Ani_obj55:
00010396                            	include "_anim\obj55.asm"
00010396                            ; ---------------------------------------------------------------------------
00010396                            ; Animation script - Basaran enemy
00010396                            ; ---------------------------------------------------------------------------
00010396 0000                       		dc.w byte_10230-Ani_obj55
00010398 0000                       		dc.w byte_10234-Ani_obj55
0001039A 0000                       		dc.w byte_10238-Ani_obj55
0001039C 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000103A0 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000103A4 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000103AA                            		even
000103AA                            		even
000103AA                            
000103AA                            ; ---------------------------------------------------------------------------
000103AA                            ; Sprite mappings - Basaran enemy (MZ)
000103AA                            ; ---------------------------------------------------------------------------
000103AA                            Map_obj55:
000103AA                            	include "_maps\obj55.asm"
000103AA                            ; ---------------------------------------------------------------------------
000103AA                            ; Sprite mappings - Basaran enemy (MZ)
000103AA                            ; ---------------------------------------------------------------------------
000103AA 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000103AE 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000103B2 01                         byte_10246:	dc.b 1
000103B3 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000103B8 03                         byte_1024C:	dc.b 3
000103B9 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000103BE 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000103C3 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000103C8 04                         byte_1025C:	dc.b 4
000103C9 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000103CE 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000103D3 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000103D8 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000103DD 04                         byte_10271:	dc.b 4
000103DE F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000103E3 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000103E8 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000103ED FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000103F2                            		even
000103F2                            		even
000103F2                            
000103F2                            ; ===========================================================================
000103F2                            ; ---------------------------------------------------------------------------
000103F2                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000103F2                            ; ---------------------------------------------------------------------------
000103F2                            
000103F2                            Obj56:					; XREF: Obj_Index
000103F2 7000                       		moveq	#0,d0
000103F4 1028 0024                  		move.b	$24(a0),d0
000103F8 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000103FC 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010400                            ; ===========================================================================
00010400 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010402 0000                       		dc.w Obj56_Action-Obj56_Index
00010404                            
00010404 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010406 2020                       		dc.b  $20, $20
00010408 1020                       		dc.b  $10, $20
0001040A 201A                       		dc.b  $20, $1A
0001040C 1027                       		dc.b  $10, $27
0001040E 1010                       		dc.b  $10, $10
00010410 0820                       		dc.b	8, $20
00010412 4010                       		dc.b  $40, $10
00010414                            ; ===========================================================================
00010414                            
00010414                            Obj56_Main:				; XREF: Obj56_Index
00010414 5428 0024                  		addq.b	#2,$24(a0)
00010418 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010420 317C 4000 0002             		move.w	#$4000,2(a0)
00010426 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001042C 6600                       		bne.s	loc_102C8
0001042E 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010434                            
00010434                            loc_102C8:
00010434 117C 0004 0001             		move.b	#4,1(a0)
0001043A 117C 0003 0018             		move.b	#3,$18(a0)
00010440 7000                       		moveq	#0,d0
00010442 1028 0028                  		move.b	$28(a0),d0
00010446 E648                       		lsr.w	#3,d0
00010448 0240 000E                  		andi.w	#$E,d0
0001044C 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010450 115A 0019                  		move.b	(a2)+,$19(a0)
00010454 1152 0016                  		move.b	(a2),$16(a0)
00010458 E248                       		lsr.w	#1,d0
0001045A 1140 001A                  		move.b	d0,$1A(a0)
0001045E 3168 0008 0034             		move.w	8(a0),$34(a0)
00010464 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001046A 7000                       		moveq	#0,d0
0001046C 1012                       		move.b	(a2),d0
0001046E D040                       		add.w	d0,d0
00010470 3140 003A                  		move.w	d0,$3A(a0)
00010474 7000                       		moveq	#0,d0
00010476 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001047C 6700                       		beq.s	loc_10332
0001047E 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010482 0240 000F                  		andi.w	#$F,d0
00010486 5140                       		subq.w	#8,d0
00010488 6500                       		bcs.s	loc_10332
0001048A E548                       		lsl.w	#2,d0
0001048C 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010490 45F2 0000                  		lea	(a2,d0.w),a2
00010494 4A52                       		tst.w	(a2)
00010496 6A00                       		bpl.s	loc_10332
00010498 0868 0000 0022             		bchg	#0,$22(a0)
0001049E                            
0001049E                            loc_10332:
0001049E 1028 0028                  		move.b	$28(a0),d0
000104A2 6A00                       		bpl.s	Obj56_Action
000104A4 0200 000F                  		andi.b	#$F,d0
000104A8 1140 003C                  		move.b	d0,$3C(a0)
000104AC 117C 0005 0028             		move.b	#5,$28(a0)
000104B2 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000104B8 6600                       		bne.s	Obj56_ChkGone
000104BA 117C 000C 0028             		move.b	#$C,$28(a0)
000104C0 317C 0080 003A             		move.w	#$80,$3A(a0)
000104C6                            
000104C6                            Obj56_ChkGone:
000104C6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000104CA 7000                       		moveq	#0,d0
000104CC 1028 0023                  		move.b	$23(a0),d0
000104D0 6700                       		beq.s	Obj56_Action
000104D2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000104D8 0832 0000 0002             		btst	#0,2(a2,d0.w)
000104DE 6700                       		beq.s	Obj56_Action
000104E0 5228 0028                  		addq.b	#1,$28(a0)
000104E4 4268 003A                  		clr.w	$3A(a0)
000104E8                            
000104E8                            Obj56_Action:				; XREF: Obj56_Index
000104E8 3F28 0008                  		move.w	8(a0),-(sp)
000104EC 7000                       		moveq	#0,d0
000104EE 1028 0028                  		move.b	$28(a0),d0	; get object type
000104F2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000104F6 D040                       		add.w	d0,d0
000104F8 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000104FC 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010500 381F                       		move.w	(sp)+,d4
00010502 4A28 0001                  		tst.b	1(a0)
00010506 6A00                       		bpl.s	Obj56_ChkDel
00010508 7200                       		moveq	#0,d1
0001050A 1228 0019                  		move.b	$19(a0),d1
0001050E 0641 000B                  		addi.w	#$B,d1
00010512 7400                       		moveq	#0,d2
00010514 1428 0016                  		move.b	$16(a0),d2
00010518 3602                       		move.w	d2,d3
0001051A 5243                       		addq.w	#1,d3
0001051C 6100 F626                  		bsr.w	SolidObject
00010520                            
00010520                            Obj56_ChkDel:
00010520 3028 0034                  		move.w	$34(a0),d0
00010524 0240 FF80                  		andi.w	#$FF80,d0
00010528 3238 F700                  		move.w	($FFFFF700).w,d1
0001052C 0441 0080                  		subi.w	#$80,d1
00010530 0241 FF80                  		andi.w	#$FF80,d1
00010534 9041                       		sub.w	d1,d0
00010536 0C40 0280                  		cmpi.w	#$280,d0
0001053A 6200 D274                  		bhi.w	DeleteObject
0001053E 6000 D234                  		bra.w	DisplaySprite
00010542                            ; ===========================================================================
00010542 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010546 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
0001054A 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001054E 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010552 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010556 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
0001055A 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001055E                            ; ===========================================================================
0001055E                            
0001055E                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001055E 4E75                       		rts	
00010560                            ; ===========================================================================
00010560                            
00010560                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010560 323C 0040                  		move.w	#$40,d1
00010564 7000                       		moveq	#0,d0
00010566 1038 FE68                  		move.b	($FFFFFE68).w,d0
0001056A 6000                       		bra.s	Obj56_Move_LR
0001056C                            ; ===========================================================================
0001056C                            
0001056C                            Obj56_Type02:				; XREF: Obj56_TypeIndex
0001056C 323C 0080                  		move.w	#$80,d1
00010570 7000                       		moveq	#0,d0
00010572 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010576                            
00010576                            Obj56_Move_LR:
00010576 0828 0000 0022             		btst	#0,$22(a0)
0001057C 6700                       		beq.s	loc_10416
0001057E 4440                       		neg.w	d0
00010580 D041                       		add.w	d1,d0
00010582                            
00010582                            loc_10416:
00010582 3228 0034                  		move.w	$34(a0),d1
00010586 9240                       		sub.w	d0,d1
00010588 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001058C 4E75                       		rts	
0001058E                            ; ===========================================================================
0001058E                            
0001058E                            Obj56_Type03:				; XREF: Obj56_TypeIndex
0001058E 323C 0040                  		move.w	#$40,d1
00010592 7000                       		moveq	#0,d0
00010594 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010598 6000                       		bra.s	Obj56_Move_UD
0001059A                            ; ===========================================================================
0001059A                            
0001059A                            Obj56_Type04:				; XREF: Obj56_TypeIndex
0001059A 323C 0080                  		move.w	#$80,d1
0001059E 7000                       		moveq	#0,d0
000105A0 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000105A4                            
000105A4                            Obj56_Move_UD:
000105A4 0828 0000 0022             		btst	#0,$22(a0)
000105AA 6700                       		beq.s	loc_10444
000105AC 4440                       		neg.w	d0
000105AE D041                       		add.w	d1,d0
000105B0                            
000105B0                            loc_10444:
000105B0 3228 0030                  		move.w	$30(a0),d1
000105B4 9240                       		sub.w	d0,d1
000105B6 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000105BA 4E75                       		rts	
000105BC                            ; ===========================================================================
000105BC                            
000105BC                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000105BC 4A28 0038                  		tst.b	$38(a0)
000105C0 6600                       		bne.s	loc_104A4
000105C2 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000105C8 6600                       		bne.s	loc_1047A	; if not, branch
000105CA 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000105D0 6600                       		bne.s	loc_1047A
000105D2 4238 F7C9                  		clr.b	($FFFFF7C9).w
000105D6 3038 D008                  		move.w	($FFFFD008).w,d0
000105DA B068 0008                  		cmp.w	8(a0),d0
000105DE 6400                       		bcc.s	loc_1047A
000105E0 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000105E6                            
000105E6                            loc_1047A:
000105E6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000105EA 7000                       		moveq	#0,d0
000105EC 1028 003C                  		move.b	$3C(a0),d0
000105F0 0832 0000 0000             		btst	#0,(a2,d0.w)
000105F6 6700                       		beq.s	loc_104AE
000105F8 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000105FE 6600                       		bne.s	loc_1049E	; if not, branch
00010600 0C00 0003                  		cmpi.b	#3,d0
00010604 6600                       		bne.s	loc_1049E
00010606 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001060A                            
0001060A                            loc_1049E:
0001060A 117C 0001 0038             		move.b	#1,$38(a0)
00010610                            
00010610                            loc_104A4:
00010610 4A68 003A                  		tst.w	$3A(a0)
00010614 6700                       		beq.s	loc_104C8
00010616 5568 003A                  		subq.w	#2,$3A(a0)
0001061A                            
0001061A                            loc_104AE:
0001061A 3028 003A                  		move.w	$3A(a0),d0
0001061E 0828 0000 0022             		btst	#0,$22(a0)
00010624 6700                       		beq.s	loc_104BC
00010626 4440                       		neg.w	d0
00010628                            
00010628                            loc_104BC:
00010628 3228 0030                  		move.w	$30(a0),d1
0001062C D240                       		add.w	d0,d1
0001062E 3141 000C                  		move.w	d1,$C(a0)
00010632 4E75                       		rts	
00010634                            ; ===========================================================================
00010634                            
00010634                            loc_104C8:
00010634 5228 0028                  		addq.b	#1,$28(a0)
00010638 4228 0038                  		clr.b	$38(a0)
0001063C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010640 7000                       		moveq	#0,d0
00010642 1028 0023                  		move.b	$23(a0),d0
00010646 67D2                       		beq.s	loc_104AE
00010648 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001064E 60CA                       		bra.s	loc_104AE
00010650                            ; ===========================================================================
00010650                            
00010650                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010650 4A28 0038                  		tst.b	$38(a0)
00010654 6600                       		bne.s	loc_10500
00010656 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001065A 7000                       		moveq	#0,d0
0001065C 1028 003C                  		move.b	$3C(a0),d0
00010660 4A32 0000                  		tst.b	(a2,d0.w)
00010664 6A00                       		bpl.s	loc_10512
00010666 117C 0001 0038             		move.b	#1,$38(a0)
0001066C                            
0001066C                            loc_10500:
0001066C 7000                       		moveq	#0,d0
0001066E 1028 0016                  		move.b	$16(a0),d0
00010672 D040                       		add.w	d0,d0
00010674 B068 003A                  		cmp.w	$3A(a0),d0
00010678 6700                       		beq.s	loc_1052C
0001067A 5468 003A                  		addq.w	#2,$3A(a0)
0001067E                            
0001067E                            loc_10512:
0001067E 3028 003A                  		move.w	$3A(a0),d0
00010682 0828 0000 0022             		btst	#0,$22(a0)
00010688 6700                       		beq.s	loc_10520
0001068A 4440                       		neg.w	d0
0001068C                            
0001068C                            loc_10520:
0001068C 3228 0030                  		move.w	$30(a0),d1
00010690 D240                       		add.w	d0,d1
00010692 3141 000C                  		move.w	d1,$C(a0)
00010696 4E75                       		rts	
00010698                            ; ===========================================================================
00010698                            
00010698                            loc_1052C:
00010698 5328 0028                  		subq.b	#1,$28(a0)
0001069C 4228 0038                  		clr.b	$38(a0)
000106A0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000106A4 7000                       		moveq	#0,d0
000106A6 1028 0023                  		move.b	$23(a0),d0
000106AA 67D2                       		beq.s	loc_10512
000106AC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000106B2 60CA                       		bra.s	loc_10512
000106B4                            ; ===========================================================================
000106B4                            
000106B4                            Obj56_Type07:				; XREF: Obj56_TypeIndex
000106B4 4A28 0038                  		tst.b	$38(a0)
000106B8 6600                       		bne.s	loc_1055E
000106BA 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
000106BE 6700                       		beq.s	locret_10578
000106C0 117C 0001 0038             		move.b	#1,$38(a0)
000106C6 4268 003A                  		clr.w	$3A(a0)
000106CA                            
000106CA                            loc_1055E:
000106CA 5268 0008                  		addq.w	#1,8(a0)
000106CE 3168 0008 0034             		move.w	8(a0),$34(a0)
000106D4 5268 003A                  		addq.w	#1,$3A(a0)
000106D8 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000106DE 6600                       		bne.s	locret_10578
000106E0 4228 0028                  		clr.b	$28(a0)
000106E4                            
000106E4                            locret_10578:
000106E4 4E75                       		rts	
000106E6                            ; ===========================================================================
000106E6                            
000106E6                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000106E6 4A28 0038                  		tst.b	$38(a0)
000106EA 6600                       		bne.s	loc_10598
000106EC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000106F0 7000                       		moveq	#0,d0
000106F2 1028 003C                  		move.b	$3C(a0),d0
000106F6 0832 0000 0000             		btst	#0,(a2,d0.w)
000106FC 6700                       		beq.s	loc_105A2
000106FE 117C 0001 0038             		move.b	#1,$38(a0)
00010704                            
00010704                            loc_10598:
00010704 4A68 003A                  		tst.w	$3A(a0)
00010708 6700                       		beq.s	loc_105C0
0001070A 5568 003A                  		subq.w	#2,$3A(a0)
0001070E                            
0001070E                            loc_105A2:
0001070E 3028 003A                  		move.w	$3A(a0),d0
00010712 0828 0000 0022             		btst	#0,$22(a0)
00010718 6700                       		beq.s	loc_105B4
0001071A 4440                       		neg.w	d0
0001071C 0640 0080                  		addi.w	#$80,d0
00010720                            
00010720                            loc_105B4:
00010720 3228 0034                  		move.w	$34(a0),d1
00010724 D240                       		add.w	d0,d1
00010726 3141 0008                  		move.w	d1,8(a0)
0001072A 4E75                       		rts	
0001072C                            ; ===========================================================================
0001072C                            
0001072C                            loc_105C0:
0001072C 5228 0028                  		addq.b	#1,$28(a0)
00010730 4228 0038                  		clr.b	$38(a0)
00010734 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010738 7000                       		moveq	#0,d0
0001073A 1028 0023                  		move.b	$23(a0),d0
0001073E 67CE                       		beq.s	loc_105A2
00010740 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010746 60C6                       		bra.s	loc_105A2
00010748                            ; ===========================================================================
00010748                            
00010748                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010748 4A28 0038                  		tst.b	$38(a0)
0001074C 6600                       		bne.s	loc_105F8
0001074E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010752 7000                       		moveq	#0,d0
00010754 1028 003C                  		move.b	$3C(a0),d0
00010758 4A32 0000                  		tst.b	(a2,d0.w)
0001075C 6A00                       		bpl.s	loc_10606
0001075E 117C 0001 0038             		move.b	#1,$38(a0)
00010764                            
00010764                            loc_105F8:
00010764 303C 0080                  		move.w	#$80,d0
00010768 B068 003A                  		cmp.w	$3A(a0),d0
0001076C 6700                       		beq.s	loc_10624
0001076E 5468 003A                  		addq.w	#2,$3A(a0)
00010772                            
00010772                            loc_10606:
00010772 3028 003A                  		move.w	$3A(a0),d0
00010776 0828 0000 0022             		btst	#0,$22(a0)
0001077C 6700                       		beq.s	loc_10618
0001077E 4440                       		neg.w	d0
00010780 0640 0080                  		addi.w	#$80,d0
00010784                            
00010784                            loc_10618:
00010784 3228 0034                  		move.w	$34(a0),d1
00010788 D240                       		add.w	d0,d1
0001078A 3141 0008                  		move.w	d1,8(a0)
0001078E 4E75                       		rts	
00010790                            ; ===========================================================================
00010790                            
00010790                            loc_10624:
00010790 5328 0028                  		subq.b	#1,$28(a0)
00010794 4228 0038                  		clr.b	$38(a0)
00010798 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001079C 7000                       		moveq	#0,d0
0001079E 1028 0023                  		move.b	$23(a0),d0
000107A2 67CE                       		beq.s	loc_10606
000107A4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000107AA 60C6                       		bra.s	loc_10606
000107AC                            ; ===========================================================================
000107AC                            
000107AC                            Obj56_Type08:				; XREF: Obj56_TypeIndex
000107AC 323C 0010                  		move.w	#$10,d1
000107B0 7000                       		moveq	#0,d0
000107B2 1038 FE88                  		move.b	($FFFFFE88).w,d0
000107B6 E248                       		lsr.w	#1,d0
000107B8 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
000107BC 6000                       		bra.s	Obj56_Move_Sqr
000107BE                            ; ===========================================================================
000107BE                            
000107BE                            Obj56_Type09:				; XREF: Obj56_TypeIndex
000107BE 323C 0030                  		move.w	#$30,d1
000107C2 7000                       		moveq	#0,d0
000107C4 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000107C8 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000107CC 6000                       		bra.s	Obj56_Move_Sqr
000107CE                            ; ===========================================================================
000107CE                            
000107CE                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
000107CE 323C 0050                  		move.w	#$50,d1
000107D2 7000                       		moveq	#0,d0
000107D4 1038 FE90                  		move.b	($FFFFFE90).w,d0
000107D8 3638 FE92                  		move.w	($FFFFFE92).w,d3
000107DC 6000                       		bra.s	Obj56_Move_Sqr
000107DE                            ; ===========================================================================
000107DE                            
000107DE                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000107DE 323C 0070                  		move.w	#$70,d1
000107E2 7000                       		moveq	#0,d0
000107E4 1038 FE94                  		move.b	($FFFFFE94).w,d0
000107E8 3638 FE96                  		move.w	($FFFFFE96).w,d3
000107EC                            
000107EC                            Obj56_Move_Sqr:
000107EC 4A43                       		tst.w	d3
000107EE 6600                       		bne.s	loc_1068E
000107F0 5228 0022                  		addq.b	#1,$22(a0)
000107F4 0228 0003 0022             		andi.b	#3,$22(a0)
000107FA                            
000107FA                            loc_1068E:
000107FA 1428 0022                  		move.b	$22(a0),d2
000107FE 0202 0003                  		andi.b	#3,d2
00010802 6600                       		bne.s	loc_106AE
00010804 9041                       		sub.w	d1,d0
00010806 D068 0034                  		add.w	$34(a0),d0
0001080A 3140 0008                  		move.w	d0,8(a0)
0001080E 4441                       		neg.w	d1
00010810 D268 0030                  		add.w	$30(a0),d1
00010814 3141 000C                  		move.w	d1,$C(a0)
00010818 4E75                       		rts	
0001081A                            ; ===========================================================================
0001081A                            
0001081A                            loc_106AE:
0001081A 5302                       		subq.b	#1,d2
0001081C 6600                       		bne.s	loc_106CC
0001081E 5341                       		subq.w	#1,d1
00010820 9041                       		sub.w	d1,d0
00010822 4440                       		neg.w	d0
00010824 D068 0030                  		add.w	$30(a0),d0
00010828 3140 000C                  		move.w	d0,$C(a0)
0001082C 5241                       		addq.w	#1,d1
0001082E D268 0034                  		add.w	$34(a0),d1
00010832 3141 0008                  		move.w	d1,8(a0)
00010836 4E75                       		rts	
00010838                            ; ===========================================================================
00010838                            
00010838                            loc_106CC:
00010838 5302                       		subq.b	#1,d2
0001083A 6600                       		bne.s	loc_106EA
0001083C 5341                       		subq.w	#1,d1
0001083E 9041                       		sub.w	d1,d0
00010840 4440                       		neg.w	d0
00010842 D068 0034                  		add.w	$34(a0),d0
00010846 3140 0008                  		move.w	d0,8(a0)
0001084A 5241                       		addq.w	#1,d1
0001084C D268 0030                  		add.w	$30(a0),d1
00010850 3141 000C                  		move.w	d1,$C(a0)
00010854 4E75                       		rts	
00010856                            ; ===========================================================================
00010856                            
00010856                            loc_106EA:
00010856 9041                       		sub.w	d1,d0
00010858 D068 0030                  		add.w	$30(a0),d0
0001085C 3140 000C                  		move.w	d0,$C(a0)
00010860 4441                       		neg.w	d1
00010862 D268 0034                  		add.w	$34(a0),d1
00010866 3141 0008                  		move.w	d1,8(a0)
0001086A 4E75                       		rts	
0001086C                            ; ===========================================================================
0001086C                            ; ---------------------------------------------------------------------------
0001086C                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001086C                            ; ---------------------------------------------------------------------------
0001086C                            Map_obj56:
0001086C                            	include "_maps\obj56.asm"
0001086C                            ; ---------------------------------------------------------------------------
0001086C                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001086C                            ; ---------------------------------------------------------------------------
0001086C 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010870 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010874 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010878 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
0001087C 01                         byte_10710:	dc.b 1
0001087D F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010882 04                         byte_10716:	dc.b 4
00010883 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010888 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0001088D 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010892 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010897 02                         byte_1072B:	dc.b 2
00010898 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0001089D 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000108A2 04                         byte_10736:	dc.b 4
000108A3 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
000108A8 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000108AD 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000108B2 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000108B7 03                         byte_1074B:	dc.b 3
000108B8 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
000108BD F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000108C2 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000108C7 01                         byte_1075B:	dc.b 1
000108C8 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000108CD 02                         byte_10761:	dc.b 2
000108CE E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000108D3 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000108D8 04                         byte_1076C:	dc.b 4
000108D9 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000108DE F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000108E3 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000108E8 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000108EE 00                         		even
000108EE 00                         		even
000108EE                            
000108EE                            ; ===========================================================================
000108EE                            ; ---------------------------------------------------------------------------
000108EE                            ; Object 57 - spiked balls (SYZ, LZ)
000108EE                            ; ---------------------------------------------------------------------------
000108EE                            
000108EE                            Obj57:					; XREF: Obj_Index
000108EE 7000                       		moveq	#0,d0
000108F0 1028 0024                  		move.b	$24(a0),d0
000108F4 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000108F8 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000108FC                            ; ===========================================================================
000108FC 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000108FE 0000                       		dc.w Obj57_Move-Obj57_Index
00010900 0000                       		dc.w Obj57_Display-Obj57_Index
00010902                            ; ===========================================================================
00010902                            
00010902                            Obj57_Main:				; XREF: Obj57_Index
00010902 5428 0024                  		addq.b	#2,$24(a0)
00010906 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001090E 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010914 117C 0004 0001             		move.b	#4,1(a0)
0001091A 117C 0004 0018             		move.b	#4,$18(a0)
00010920 117C 0008 0019             		move.b	#8,$19(a0)
00010926 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001092C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010932 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010938 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001093E 6600                       		bne.s	loc_107E8
00010940 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010946 317C 0310 0002             		move.w	#$310,2(a0)
0001094C 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010954                            
00010954                            loc_107E8:
00010954 1228 0028                  		move.b	$28(a0),d1	; get object type
00010958 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001095C 4881                       		ext.w	d1
0001095E E741                       		asl.w	#3,d1		; multiply by 8
00010960 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010964 1028 0022                  		move.b	$22(a0),d0
00010968 E418                       		ror.b	#2,d0
0001096A 0200 00C0                  		andi.b	#-$40,d0
0001096E 1140 0026                  		move.b	d0,$26(a0)
00010972 45E8 0029                  		lea	$29(a0),a2
00010976 1228 0028                  		move.b	$28(a0),d1	; get object type
0001097A 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001097E 14FC 0000                  		move.b	#0,(a2)+
00010982 3601                       		move.w	d1,d3
00010984 E94B                       		lsl.w	#4,d3
00010986 1143 003C                  		move.b	d3,$3C(a0)
0001098A 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001098C 6500                       		bcs.s	loc_10894
0001098E 0828 0003 0028             		btst	#3,$28(a0)
00010994 6700                       		beq.s	Obj57_MakeChain
00010996 5341                       		subq.w	#1,d1
00010998 6500                       		bcs.s	loc_10894
0001099A                            
0001099A                            Obj57_MakeChain:
0001099A 6100 D25E                  		bsr.w	SingleObjLoad
0001099E 6600                       		bne.s	loc_10894
000109A0 5228 0029                  		addq.b	#1,$29(a0)
000109A4 3A09                       		move.w	a1,d5
000109A6 0445 D000                  		subi.w	#-$3000,d5
000109AA EC4D                       		lsr.w	#6,d5
000109AC 0245 007F                  		andi.w	#$7F,d5
000109B0 14C5                       		move.b	d5,(a2)+
000109B2 137C 0004 0024             		move.b	#4,$24(a1)
000109B8 1290                       		move.b	0(a0),0(a1)
000109BA 2368 0004 0004             		move.l	4(a0),4(a1)
000109C0 3368 0002 0002             		move.w	2(a0),2(a1)
000109C6 1368 0001 0001             		move.b	1(a0),1(a1)
000109CC 1368 0018 0018             		move.b	$18(a0),$18(a1)
000109D2 1368 0019 0019             		move.b	$19(a0),$19(a1)
000109D8 1368 0020 0020             		move.b	$20(a0),$20(a1)
000109DE 0403 0010                  		subi.b	#$10,d3
000109E2 1343 003C                  		move.b	d3,$3C(a1)
000109E6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000109EC 6600                       		bne.s	loc_10890
000109EE 4A03                       		tst.b	d3
000109F0 6600                       		bne.s	loc_10890
000109F2 137C 0002 001A             		move.b	#2,$1A(a1)
000109F8                            
000109F8                            loc_10890:
000109F8 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000109FC                            
000109FC                            loc_10894:
000109FC 3A08                       		move.w	a0,d5
000109FE 0445 D000                  		subi.w	#-$3000,d5
00010A02 EC4D                       		lsr.w	#6,d5
00010A04 0245 007F                  		andi.w	#$7F,d5
00010A08 14C5                       		move.b	d5,(a2)+
00010A0A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010A10 6600                       		bne.s	Obj57_Move
00010A12 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010A18 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010A1E                            
00010A1E                            Obj57_Move:				; XREF: Obj57_Index
00010A1E 6100 0000                  		bsr.w	Obj57_MoveSub
00010A22 6000 0000                  		bra.w	Obj57_ChkDel
00010A26                            ; ===========================================================================
00010A26                            
00010A26                            Obj57_MoveSub:				; XREF: Obj57_Move
00010A26 3028 003E                  		move.w	$3E(a0),d0
00010A2A D168 0026                  		add.w	d0,$26(a0)
00010A2E 1028 0026                  		move.b	$26(a0),d0
00010A32 4EB9 0000 29DA             		jsr	(CalcSine).l
00010A38 3428 0038                  		move.w	$38(a0),d2
00010A3C 3628 003A                  		move.w	$3A(a0),d3
00010A40 45E8 0029                  		lea	$29(a0),a2
00010A44 7C00                       		moveq	#0,d6
00010A46 1C1A                       		move.b	(a2)+,d6
00010A48                            
00010A48                            Obj57_MoveLoop:
00010A48 7800                       		moveq	#0,d4
00010A4A 181A                       		move.b	(a2)+,d4
00010A4C ED4C                       		lsl.w	#6,d4
00010A4E 0684 00FF D000             		addi.l	#$FFD000,d4
00010A54 2244                       		movea.l	d4,a1
00010A56 7800                       		moveq	#0,d4
00010A58 1829 003C                  		move.b	$3C(a1),d4
00010A5C 2A04                       		move.l	d4,d5
00010A5E C9C0                       		muls.w	d0,d4
00010A60 E084                       		asr.l	#8,d4
00010A62 CBC1                       		muls.w	d1,d5
00010A64 E085                       		asr.l	#8,d5
00010A66 D842                       		add.w	d2,d4
00010A68 DA43                       		add.w	d3,d5
00010A6A 3344 000C                  		move.w	d4,$C(a1)
00010A6E 3345 0008                  		move.w	d5,8(a1)
00010A72 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010A76 4E75                       		rts	
00010A78                            ; ===========================================================================
00010A78                            
00010A78                            Obj57_ChkDel:				; XREF: Obj57_Move
00010A78 3028 003A                  		move.w	$3A(a0),d0
00010A7C 0240 FF80                  		andi.w	#$FF80,d0
00010A80 3238 F700                  		move.w	($FFFFF700).w,d1
00010A84 0441 0080                  		subi.w	#$80,d1
00010A88 0241 FF80                  		andi.w	#$FF80,d1
00010A8C 9041                       		sub.w	d1,d0
00010A8E 0C40 0280                  		cmpi.w	#$280,d0
00010A92 6200 0000                  		bhi.w	Obj57_Delete
00010A96 6000 CCDC                  		bra.w	DisplaySprite
00010A9A                            ; ===========================================================================
00010A9A                            
00010A9A                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010A9A 7400                       		moveq	#0,d2
00010A9C 45E8 0029                  		lea	$29(a0),a2
00010AA0 141A                       		move.b	(a2)+,d2
00010AA2                            
00010AA2                            Obj57_DelLoop:
00010AA2 7000                       		moveq	#0,d0
00010AA4 101A                       		move.b	(a2)+,d0
00010AA6 ED48                       		lsl.w	#6,d0
00010AA8 0680 00FF D000             		addi.l	#$FFD000,d0
00010AAE 2240                       		movea.l	d0,a1
00010AB0 6100 CD00                  		bsr.w	DeleteObject2
00010AB4 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010AB8                            
00010AB8 4E75                       		rts	
00010ABA                            ; ===========================================================================
00010ABA                            
00010ABA                            Obj57_Display:				; XREF: Obj57_Index
00010ABA 6000 CCB8                  		bra.w	DisplaySprite
00010ABE                            ; ===========================================================================
00010ABE                            ; ---------------------------------------------------------------------------
00010ABE                            ; Sprite mappings - chain of spiked balls (SYZ)
00010ABE                            ; ---------------------------------------------------------------------------
00010ABE                            Map_obj57:
00010ABE                            	include "_maps\obj57syz.asm"
00010ABE                            ; ---------------------------------------------------------------------------
00010ABE                            ; Sprite mappings - chain of spiked balls (SYZ)
00010ABE                            ; ---------------------------------------------------------------------------
00010ABE 0000                       		dc.w byte_10958-Map_obj57
00010AC0 01                         byte_10958:	dc.b 1
00010AC1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010AC6                            		even
00010AC6                            		even
00010AC6                            
00010AC6                            ; ---------------------------------------------------------------------------
00010AC6                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010AC6                            ; ---------------------------------------------------------------------------
00010AC6                            Map_obj57a:
00010AC6                            	include "_maps\obj57lz.asm"
00010AC6                            ; ---------------------------------------------------------------------------
00010AC6                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010AC6                            ; ---------------------------------------------------------------------------
00010AC6 0000                       		dc.w byte_10964-Map_obj57a
00010AC8 0000                       		dc.w byte_1096A-Map_obj57a
00010ACA 0000                       		dc.w byte_10970-Map_obj57a
00010ACC 01                         byte_10964:	dc.b 1
00010ACD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010AD2 01                         byte_1096A:	dc.b 1
00010AD3 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010AD8 01                         byte_10970:	dc.b 1
00010AD9 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010ADE                            		even
00010ADE                            		even
00010ADE                            
00010ADE                            ; ===========================================================================
00010ADE                            ; ---------------------------------------------------------------------------
00010ADE                            ; Object 58 - giant spiked balls (SYZ)
00010ADE                            ; ---------------------------------------------------------------------------
00010ADE                            
00010ADE                            Obj58:					; XREF: Obj_Index
00010ADE 7000                       		moveq	#0,d0
00010AE0 1028 0024                  		move.b	$24(a0),d0
00010AE4 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010AE8 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010AEC                            ; ===========================================================================
00010AEC 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010AEE 0000                       		dc.w Obj58_Move-Obj58_Index
00010AF0                            ; ===========================================================================
00010AF0                            
00010AF0                            Obj58_Main:				; XREF: Obj58_Index
00010AF0 5428 0024                  		addq.b	#2,$24(a0)
00010AF4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010AFC 317C 0396 0002             		move.w	#$396,2(a0)
00010B02 117C 0004 0001             		move.b	#4,1(a0)
00010B08 117C 0004 0018             		move.b	#4,$18(a0)
00010B0E 117C 0018 0019             		move.b	#$18,$19(a0)
00010B14 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010B1A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010B20 117C 0086 0020             		move.b	#$86,$20(a0)
00010B26 1228 0028                  		move.b	$28(a0),d1	; get object type
00010B2A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010B2E 4881                       		ext.w	d1
00010B30 E741                       		asl.w	#3,d1		; multiply by 8
00010B32 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010B36 1028 0022                  		move.b	$22(a0),d0
00010B3A E418                       		ror.b	#2,d0
00010B3C 0200 00C0                  		andi.b	#$C0,d0
00010B40 1140 0026                  		move.b	d0,$26(a0)
00010B44 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010B4A                            
00010B4A                            Obj58_Move:				; XREF: Obj58_Index
00010B4A 7000                       		moveq	#0,d0
00010B4C 1028 0028                  		move.b	$28(a0),d0	; get object type
00010B50 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010B54 D040                       		add.w	d0,d0
00010B56 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010B5A 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010B5E 3028 003A                  		move.w	$3A(a0),d0
00010B62 0240 FF80                  		andi.w	#$FF80,d0
00010B66 3238 F700                  		move.w	($FFFFF700).w,d1
00010B6A 0441 0080                  		subi.w	#$80,d1
00010B6E 0241 FF80                  		andi.w	#$FF80,d1
00010B72 9041                       		sub.w	d1,d0
00010B74 0C40 0280                  		cmpi.w	#$280,d0
00010B78 6200 CC36                  		bhi.w	DeleteObject
00010B7C 6000 CBF6                  		bra.w	DisplaySprite
00010B80                            ; ===========================================================================
00010B80 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010B82 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010B84 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010B86 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010B88                            ; ===========================================================================
00010B88                            
00010B88                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010B88 4E75                       		rts	
00010B8A                            ; ===========================================================================
00010B8A                            
00010B8A                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010B8A 323C 0060                  		move.w	#$60,d1
00010B8E 7000                       		moveq	#0,d0
00010B90 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010B94 0828 0000 0022             		btst	#0,$22(a0)
00010B9A 6700                       		beq.s	loc_10A38
00010B9C 4440                       		neg.w	d0
00010B9E D041                       		add.w	d1,d0
00010BA0                            
00010BA0                            loc_10A38:
00010BA0 3228 003A                  		move.w	$3A(a0),d1
00010BA4 9240                       		sub.w	d0,d1
00010BA6 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010BAA 4E75                       		rts	
00010BAC                            ; ===========================================================================
00010BAC                            
00010BAC                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010BAC 323C 0060                  		move.w	#$60,d1
00010BB0 7000                       		moveq	#0,d0
00010BB2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010BB6 0828 0000 0022             		btst	#0,$22(a0)
00010BBC 6700                       		beq.s	loc_10A5C
00010BBE 4440                       		neg.w	d0
00010BC0 0640 0080                  		addi.w	#$80,d0
00010BC4                            
00010BC4                            loc_10A5C:
00010BC4 3228 0038                  		move.w	$38(a0),d1
00010BC8 9240                       		sub.w	d0,d1
00010BCA 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010BCE 4E75                       		rts	
00010BD0                            ; ===========================================================================
00010BD0                            
00010BD0                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010BD0 3028 003E                  		move.w	$3E(a0),d0
00010BD4 D168 0026                  		add.w	d0,$26(a0)
00010BD8 1028 0026                  		move.b	$26(a0),d0
00010BDC 4EB9 0000 29DA             		jsr	(CalcSine).l
00010BE2 3428 0038                  		move.w	$38(a0),d2
00010BE6 3628 003A                  		move.w	$3A(a0),d3
00010BEA 7800                       		moveq	#0,d4
00010BEC 1828 003C                  		move.b	$3C(a0),d4
00010BF0 2A04                       		move.l	d4,d5
00010BF2 C9C0                       		muls.w	d0,d4
00010BF4 E084                       		asr.l	#8,d4
00010BF6 CBC1                       		muls.w	d1,d5
00010BF8 E085                       		asr.l	#8,d5
00010BFA D842                       		add.w	d2,d4
00010BFC DA43                       		add.w	d3,d5
00010BFE 3144 000C                  		move.w	d4,$C(a0)
00010C02 3145 0008                  		move.w	d5,8(a0)
00010C06 4E75                       		rts	
00010C08                            ; ===========================================================================
00010C08                            ; ---------------------------------------------------------------------------
00010C08                            ; Sprite mappings - SBZ	spiked ball on a chain
00010C08                            ; ---------------------------------------------------------------------------
00010C08                            Map_obj15b:
00010C08                            	include "_maps\obj15sbz.asm"
00010C08                            ; ---------------------------------------------------------------------------
00010C08                            ; Sprite mappings - spiked ball on a chain (SBZ)
00010C08                            ; ---------------------------------------------------------------------------
00010C08 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00010C0C 0000                       		dc.w byte_10AC6-Map_obj15b
00010C0E 05                         byte_10AA6:	dc.b 5
00010C0F E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00010C14 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00010C19 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00010C1E F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00010C23 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00010C28 01                         byte_10AC0:	dc.b 1
00010C29 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00010C2E 02                         byte_10AC6:	dc.b 2
00010C2F F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00010C34 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00010C3A 00                         		even
00010C3A 00                         		even
00010C3A                            
00010C3A                            ; ===========================================================================
00010C3A                            ; ---------------------------------------------------------------------------
00010C3A                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00010C3A                            ; ---------------------------------------------------------------------------
00010C3A                            
00010C3A                            Obj59:					; XREF: Obj_Index
00010C3A 7000                       		moveq	#0,d0
00010C3C 1028 0024                  		move.b	$24(a0),d0
00010C40 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00010C44 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00010C48 3028 0032                  		move.w	$32(a0),d0
00010C4C 0240 FF80                  		andi.w	#$FF80,d0
00010C50 3238 F700                  		move.w	($FFFFF700).w,d1
00010C54 0441 0080                  		subi.w	#$80,d1
00010C58 0241 FF80                  		andi.w	#$FF80,d1
00010C5C 9041                       		sub.w	d1,d0
00010C5E 0C40 0280                  		cmpi.w	#$280,d0
00010C62 6200 CB4C                  		bhi.w	DeleteObject
00010C66 6000 CB0C                  		bra.w	DisplaySprite
00010C6A                            ; ===========================================================================
00010C6A 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00010C6C 0000                       		dc.w Obj59_Platform-Obj59_Index
00010C6E 0000                       		dc.w Obj59_Action-Obj59_Index
00010C70 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00010C72                            
00010C72 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00010C74                            
00010C74 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00010C76 2001                       		dc.b $20, 1
00010C78 3401                       		dc.b $34, 1
00010C7A 1003                       		dc.b $10, 3
00010C7C 2003                       		dc.b $20, 3
00010C7E 3403                       		dc.b $34, 3
00010C80 1401                       		dc.b $14, 1
00010C82 2401                       		dc.b $24, 1
00010C84 2C01                       		dc.b $2C, 1
00010C86 1403                       		dc.b $14, 3
00010C88 2403                       		dc.b $24, 3
00010C8A 2C03                       		dc.b $2C, 3
00010C8C 2005                       		dc.b $20, 5
00010C8E 2007                       		dc.b $20, 7
00010C90 3009                       		dc.b $30, 9
00010C92                            ; ===========================================================================
00010C92                            
00010C92                            Obj59_Main:				; XREF: Obj59_Index
00010C92 5428 0024                  		addq.b	#2,$24(a0)
00010C96 7000                       		moveq	#0,d0
00010C98 1028 0028                  		move.b	$28(a0),d0
00010C9C 6A00                       		bpl.s	Obj59_Main2
00010C9E 5828 0024                  		addq.b	#4,$24(a0)
00010CA2 0240 007F                  		andi.w	#$7F,d0
00010CA6 C0FC 0006                  		mulu.w	#6,d0
00010CAA 3140 003C                  		move.w	d0,$3C(a0)
00010CAE 3140 003E                  		move.w	d0,$3E(a0)
00010CB2 588F                       		addq.l	#4,sp
00010CB4 4E75                       		rts	
00010CB6                            ; ===========================================================================
00010CB6                            
00010CB6                            Obj59_Main2:
00010CB6 E648                       		lsr.w	#3,d0
00010CB8 0240 001E                  		andi.w	#$1E,d0
00010CBC 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00010CC0 115A 0019                  		move.b	(a2)+,$19(a0)
00010CC4 115A 001A                  		move.b	(a2)+,$1A(a0)
00010CC8 7000                       		moveq	#0,d0
00010CCA 1028 0028                  		move.b	$28(a0),d0
00010CCE D040                       		add.w	d0,d0
00010CD0 0240 001E                  		andi.w	#$1E,d0
00010CD4 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00010CD8 101A                       		move.b	(a2)+,d0
00010CDA E548                       		lsl.w	#2,d0
00010CDC 3140 003C                  		move.w	d0,$3C(a0)
00010CE0 115A 0028                  		move.b	(a2)+,$28(a0)
00010CE4 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00010CEC 317C 4000 0002             		move.w	#$4000,2(a0)
00010CF2 117C 0004 0001             		move.b	#4,1(a0)
00010CF8 117C 0004 0018             		move.b	#4,$18(a0)
00010CFE 3168 0008 0032             		move.w	8(a0),$32(a0)
00010D04 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010D0A                            
00010D0A                            Obj59_Platform:				; XREF: Obj59_Index
00010D0A 7200                       		moveq	#0,d1
00010D0C 1228 0019                  		move.b	$19(a0),d1
00010D10 4EB9 0000 758A             		jsr	(PlatformObject).l
00010D16 6000 0000                  		bra.w	Obj59_Types
00010D1A                            ; ===========================================================================
00010D1A                            
00010D1A                            Obj59_Action:				; XREF: Obj59_Index
00010D1A 7200                       		moveq	#0,d1
00010D1C 1228 0019                  		move.b	$19(a0),d1
00010D20 4EB9 0000 76FE             		jsr	(ExitPlatform).l
00010D26 3F28 0008                  		move.w	8(a0),-(sp)
00010D2A 6100 0000                  		bsr.w	Obj59_Types
00010D2E 341F                       		move.w	(sp)+,d2
00010D30 4A10                       		tst.b	0(a0)
00010D32 6700                       		beq.s	locret_10BD4
00010D34 4EF9 0000 7C68             		jmp	(MvSonicOnPtfm2).l
00010D3A                            ; ===========================================================================
00010D3A                            
00010D3A                            locret_10BD4:
00010D3A 4E75                       		rts	
00010D3C                            ; ===========================================================================
00010D3C                            
00010D3C                            Obj59_Types:
00010D3C 7000                       		moveq	#0,d0
00010D3E 1028 0028                  		move.b	$28(a0),d0
00010D42 0240 000F                  		andi.w	#$F,d0
00010D46 D040                       		add.w	d0,d0
00010D48 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00010D4C 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00010D50                            ; ===========================================================================
00010D50 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010D54 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010D58 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010D5C 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010D60 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00010D64                            ; ===========================================================================
00010D64                            
00010D64                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00010D64 4E75                       		rts	
00010D66                            ; ===========================================================================
00010D66                            
00010D66                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00010D66 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00010D6C 6600                       		bne.s	locret_10C0C
00010D6E 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010D72                            
00010D72                            locret_10C0C:
00010D72 4E75                       		rts	
00010D74                            ; ===========================================================================
00010D74                            
00010D74                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00010D74 6100 0000                  		bsr.w	Obj59_Move
00010D78 3028 0034                  		move.w	$34(a0),d0
00010D7C 4440                       		neg.w	d0
00010D7E D068 0030                  		add.w	$30(a0),d0
00010D82 3140 000C                  		move.w	d0,$C(a0)
00010D86 4E75                       		rts	
00010D88                            ; ===========================================================================
00010D88                            
00010D88                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00010D88 6100 0000                  		bsr.w	Obj59_Move
00010D8C 3028 0034                  		move.w	$34(a0),d0
00010D90 D068 0030                  		add.w	$30(a0),d0
00010D94 3140 000C                  		move.w	d0,$C(a0)
00010D98 4E75                       		rts	
00010D9A                            ; ===========================================================================
00010D9A                            
00010D9A                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00010D9A 6100 0000                  		bsr.w	Obj59_Move
00010D9E 3028 0034                  		move.w	$34(a0),d0
00010DA2 E240                       		asr.w	#1,d0
00010DA4 4440                       		neg.w	d0
00010DA6 D068 0030                  		add.w	$30(a0),d0
00010DAA 3140 000C                  		move.w	d0,$C(a0)
00010DAE 3028 0034                  		move.w	$34(a0),d0
00010DB2 D068 0032                  		add.w	$32(a0),d0
00010DB6 3140 0008                  		move.w	d0,8(a0)
00010DBA 4E75                       		rts	
00010DBC                            ; ===========================================================================
00010DBC                            
00010DBC                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00010DBC 6100 0000                  		bsr.w	Obj59_Move
00010DC0 3028 0034                  		move.w	$34(a0),d0
00010DC4 E240                       		asr.w	#1,d0
00010DC6 D068 0030                  		add.w	$30(a0),d0
00010DCA 3140 000C                  		move.w	d0,$C(a0)
00010DCE 3028 0034                  		move.w	$34(a0),d0
00010DD2 4440                       		neg.w	d0
00010DD4 D068 0032                  		add.w	$32(a0),d0
00010DD8 3140 0008                  		move.w	d0,8(a0)
00010DDC 4E75                       		rts	
00010DDE                            ; ===========================================================================
00010DDE                            
00010DDE                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00010DDE 6100 0000                  		bsr.w	Obj59_Move
00010DE2 3028 0034                  		move.w	$34(a0),d0
00010DE6 4440                       		neg.w	d0
00010DE8 D068 0030                  		add.w	$30(a0),d0
00010DEC 3140 000C                  		move.w	d0,$C(a0)
00010DF0 4A28 0028                  		tst.b	$28(a0)
00010DF4 6700 0000                  		beq.w	loc_10C94
00010DF8 4E75                       		rts	
00010DFA                            ; ===========================================================================
00010DFA                            
00010DFA                            loc_10C94:
00010DFA 0828 0003 0022             		btst	#3,$22(a0)
00010E00 6700                       		beq.s	Obj59_Delete
00010E02 08E9 0001 0022             		bset	#1,$22(a1)
00010E08 08A9 0003 0022             		bclr	#3,$22(a1)
00010E0E 137C 0002 0024             		move.b	#2,$24(a1)
00010E14                            
00010E14                            Obj59_Delete:
00010E14 6000 C99A                  		bra.w	DeleteObject
00010E18                            
00010E18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010E18                            
00010E18                            
00010E18                            Obj59_Move:				; XREF: Obj59_Type02; et al
00010E18 3028 0038                  		move.w	$38(a0),d0
00010E1C 4A28 003A                  		tst.b	$3A(a0)
00010E20 6600                       		bne.s	loc_10CC8
00010E22 0C40 0800                  		cmpi.w	#$800,d0
00010E26 6400                       		bcc.s	loc_10CD0
00010E28 0640 0010                  		addi.w	#$10,d0
00010E2C 6000                       		bra.s	loc_10CD0
00010E2E                            ; ===========================================================================
00010E2E                            
00010E2E                            loc_10CC8:
00010E2E 4A40                       		tst.w	d0
00010E30 6700                       		beq.s	loc_10CD0
00010E32 0440 0010                  		subi.w	#$10,d0
00010E36                            
00010E36                            loc_10CD0:
00010E36 3140 0038                  		move.w	d0,$38(a0)
00010E3A 48C0                       		ext.l	d0
00010E3C E180                       		asl.l	#8,d0
00010E3E D0A8 0034                  		add.l	$34(a0),d0
00010E42 2140 0034                  		move.l	d0,$34(a0)
00010E46 4840                       		swap	d0
00010E48 3428 003C                  		move.w	$3C(a0),d2
00010E4C B042                       		cmp.w	d2,d0
00010E4E 6300                       		bls.s	loc_10CF0
00010E50 117C 0001 003A             		move.b	#1,$3A(a0)
00010E56                            
00010E56                            loc_10CF0:
00010E56 D442                       		add.w	d2,d2
00010E58 B042                       		cmp.w	d2,d0
00010E5A 6600                       		bne.s	locret_10CFA
00010E5C 4228 0028                  		clr.b	$28(a0)
00010E60                            
00010E60                            locret_10CFA:
00010E60 4E75                       		rts	
00010E62                            ; End of function Obj59_Move
00010E62                            
00010E62                            ; ===========================================================================
00010E62                            
00010E62                            Obj59_MakeMulti:			; XREF: Obj59_Index
00010E62 5368 003C                  		subq.w	#1,$3C(a0)
00010E66 6600                       		bne.s	Obj59_ChkDel
00010E68 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00010E6E 6100 CD8A                  		bsr.w	SingleObjLoad
00010E72 6600                       		bne.s	Obj59_ChkDel
00010E74 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00010E78 3368 0008 0008             		move.w	8(a0),8(a1)
00010E7E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010E84 137C 000E 0028             		move.b	#$E,$28(a1)
00010E8A                            
00010E8A                            Obj59_ChkDel:
00010E8A 588F                       		addq.l	#4,sp
00010E8C 3028 0008                  		move.w	8(a0),d0
00010E90 0240 FF80                  		andi.w	#$FF80,d0
00010E94 3238 F700                  		move.w	($FFFFF700).w,d1
00010E98 0441 0080                  		subi.w	#$80,d1
00010E9C 0241 FF80                  		andi.w	#$FF80,d1
00010EA0 9041                       		sub.w	d1,d0
00010EA2 0C40 0280                  		cmpi.w	#$280,d0
00010EA6 6200 C908                  		bhi.w	DeleteObject
00010EAA 4E75                       		rts	
00010EAC                            ; ===========================================================================
00010EAC                            ; ---------------------------------------------------------------------------
00010EAC                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010EAC                            ; ---------------------------------------------------------------------------
00010EAC                            Map_obj59:
00010EAC                            	include "_maps\obj59.asm"
00010EAC                            ; ---------------------------------------------------------------------------
00010EAC                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010EAC                            ; ---------------------------------------------------------------------------
00010EAC 0000                       		dc.w byte_10D4A-Map_obj59
00010EAE 03                         byte_10D4A:	dc.b 3
00010EAF F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00010EB4 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00010EB9 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00010EBE                            		even
00010EBE                            		even
00010EBE                            
00010EBE                            ; ===========================================================================
00010EBE                            ; ---------------------------------------------------------------------------
00010EBE                            ; Object 5A - platforms	moving in circles (SLZ)
00010EBE                            ; ---------------------------------------------------------------------------
00010EBE                            
00010EBE                            Obj5A:					; XREF: Obj_Index
00010EBE 7000                       		moveq	#0,d0
00010EC0 1028 0024                  		move.b	$24(a0),d0
00010EC4 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00010EC8 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00010ECC 3028 0032                  		move.w	$32(a0),d0
00010ED0 0240 FF80                  		andi.w	#$FF80,d0
00010ED4 3238 F700                  		move.w	($FFFFF700).w,d1
00010ED8 0441 0080                  		subi.w	#$80,d1
00010EDC 0241 FF80                  		andi.w	#$FF80,d1
00010EE0 9041                       		sub.w	d1,d0
00010EE2 0C40 0280                  		cmpi.w	#$280,d0
00010EE6 6200 C8C8                  		bhi.w	DeleteObject
00010EEA 6000 C888                  		bra.w	DisplaySprite
00010EEE                            ; ===========================================================================
00010EEE 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00010EF0 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00010EF2 0000                       		dc.w Obj5A_Action-Obj5A_Index
00010EF4                            ; ===========================================================================
00010EF4                            
00010EF4                            Obj5A_Main:				; XREF: Obj5A_Index
00010EF4 5428 0024                  		addq.b	#2,$24(a0)
00010EF8 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00010F00 317C 4000 0002             		move.w	#$4000,2(a0)
00010F06 117C 0004 0001             		move.b	#4,1(a0)
00010F0C 117C 0004 0018             		move.b	#4,$18(a0)
00010F12 117C 0018 0019             		move.b	#$18,$19(a0)
00010F18 3168 0008 0032             		move.w	8(a0),$32(a0)
00010F1E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010F24                            
00010F24                            Obj5A_Platform:				; XREF: Obj5A_Index
00010F24 7200                       		moveq	#0,d1
00010F26 1228 0019                  		move.b	$19(a0),d1
00010F2A 4EB9 0000 758A             		jsr	(PlatformObject).l
00010F30 6000 0000                  		bra.w	Obj5A_Types
00010F34                            ; ===========================================================================
00010F34                            
00010F34                            Obj5A_Action:				; XREF: Obj5A_Index
00010F34 7200                       		moveq	#0,d1
00010F36 1228 0019                  		move.b	$19(a0),d1
00010F3A 4EB9 0000 76FE             		jsr	(ExitPlatform).l
00010F40 3F28 0008                  		move.w	8(a0),-(sp)
00010F44 6100 0000                  		bsr.w	Obj5A_Types
00010F48 341F                       		move.w	(sp)+,d2
00010F4A 4EF9 0000 7C68             		jmp	(MvSonicOnPtfm2).l
00010F50                            ; ===========================================================================
00010F50                            
00010F50                            Obj5A_Types:
00010F50 7000                       		moveq	#0,d0
00010F52 1028 0028                  		move.b	$28(a0),d0
00010F56 0240 000C                  		andi.w	#$C,d0
00010F5A E248                       		lsr.w	#1,d0
00010F5C 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00010F60 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00010F64                            ; ===========================================================================
00010F64 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00010F66 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00010F68                            ; ===========================================================================
00010F68                            
00010F68                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00010F68 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010F6C 0401 0050                  		subi.b	#$50,d1
00010F70 4881                       		ext.w	d1
00010F72 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010F76 0402 0050                  		subi.b	#$50,d2
00010F7A 4882                       		ext.w	d2
00010F7C 0828 0000 0028             		btst	#0,$28(a0)
00010F82 6700                       		beq.s	loc_10E24
00010F84 4441                       		neg.w	d1
00010F86 4442                       		neg.w	d2
00010F88                            
00010F88                            loc_10E24:
00010F88 0828 0001 0028             		btst	#1,$28(a0)
00010F8E 6700                       		beq.s	loc_10E30
00010F90 4441                       		neg.w	d1
00010F92 C342                       		exg	d1,d2
00010F94                            
00010F94                            loc_10E30:
00010F94 D268 0032                  		add.w	$32(a0),d1
00010F98 3141 0008                  		move.w	d1,8(a0)
00010F9C D468 0030                  		add.w	$30(a0),d2
00010FA0 3142 000C                  		move.w	d2,$C(a0)
00010FA4 4E75                       		rts	
00010FA6                            ; ===========================================================================
00010FA6                            
00010FA6                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00010FA6 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010FAA 0401 0050                  		subi.b	#$50,d1
00010FAE 4881                       		ext.w	d1
00010FB0 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010FB4 0402 0050                  		subi.b	#$50,d2
00010FB8 4882                       		ext.w	d2
00010FBA 0828 0000 0028             		btst	#0,$28(a0)
00010FC0 6700                       		beq.s	loc_10E62
00010FC2 4441                       		neg.w	d1
00010FC4 4442                       		neg.w	d2
00010FC6                            
00010FC6                            loc_10E62:
00010FC6 0828 0001 0028             		btst	#1,$28(a0)
00010FCC 6700                       		beq.s	loc_10E6E
00010FCE 4441                       		neg.w	d1
00010FD0 C342                       		exg	d1,d2
00010FD2                            
00010FD2                            loc_10E6E:
00010FD2 4441                       		neg.w	d1
00010FD4 D268 0032                  		add.w	$32(a0),d1
00010FD8 3141 0008                  		move.w	d1,8(a0)
00010FDC D468 0030                  		add.w	$30(a0),d2
00010FE0 3142 000C                  		move.w	d2,$C(a0)
00010FE4 4E75                       		rts	
00010FE6                            ; ===========================================================================
00010FE6                            ; ---------------------------------------------------------------------------
00010FE6                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010FE6                            ; ---------------------------------------------------------------------------
00010FE6                            Map_obj5A:
00010FE6                            	include "_maps\obj5A.asm"
00010FE6                            ; ---------------------------------------------------------------------------
00010FE6                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010FE6                            ; ---------------------------------------------------------------------------
00010FE6 0000                       		dc.w byte_10E84-Map_obj5A
00010FE8 02                         byte_10E84:	dc.b 2
00010FE9 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00010FEE F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00010FF4 00                         		even
00010FF4 00                         		even
00010FF4                            
00010FF4                            ; ===========================================================================
00010FF4                            ; ---------------------------------------------------------------------------
00010FF4                            ; Object 5B - blocks that form a staircase (SLZ)
00010FF4                            ; ---------------------------------------------------------------------------
00010FF4                            
00010FF4                            Obj5B:					; XREF: Obj_Index
00010FF4 7000                       		moveq	#0,d0
00010FF6 1028 0024                  		move.b	$24(a0),d0
00010FFA 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00010FFE 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011002 3028 0030                  		move.w	$30(a0),d0
00011006 0240 FF80                  		andi.w	#$FF80,d0
0001100A 3238 F700                  		move.w	($FFFFF700).w,d1
0001100E 0441 0080                  		subi.w	#$80,d1
00011012 0241 FF80                  		andi.w	#$FF80,d1
00011016 9041                       		sub.w	d1,d0
00011018 0C40 0280                  		cmpi.w	#$280,d0
0001101C 6200 C792                  		bhi.w	DeleteObject
00011020 6000 C752                  		bra.w	DisplaySprite
00011024                            ; ===========================================================================
00011024 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011026 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011028 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001102A                            ; ===========================================================================
0001102A                            
0001102A                            Obj5B_Main:				; XREF: Obj5B_Index
0001102A 5428 0024                  		addq.b	#2,$24(a0)
0001102E 7638                       		moveq	#$38,d3
00011030 7801                       		moveq	#1,d4
00011032 0828 0000 0022             		btst	#0,$22(a0)
00011038 6700                       		beq.s	loc_10EDA
0001103A 763B                       		moveq	#$3B,d3
0001103C 78FF                       		moveq	#-1,d4
0001103E                            
0001103E                            loc_10EDA:
0001103E 3428 0008                  		move.w	8(a0),d2
00011042 2248                       		movea.l	a0,a1
00011044 7203                       		moveq	#3,d1
00011046 6000                       		bra.s	Obj5B_MakeBlocks
00011048                            ; ===========================================================================
00011048                            
00011048                            Obj5B_Loop:
00011048 6100 CBC6                  		bsr.w	SingleObjLoad2
0001104C 6600 0000                  		bne.w	Obj5B_Move
00011050 137C 0004 0024             		move.b	#4,$24(a1)
00011056                            
00011056                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011056 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
0001105A 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011062 337C 4000 0002             		move.w	#$4000,2(a1)
00011068 137C 0004 0001             		move.b	#4,1(a1)
0001106E 137C 0003 0018             		move.b	#3,$18(a1)
00011074 137C 0010 0019             		move.b	#$10,$19(a1)
0001107A 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011080 3342 0008                  		move.w	d2,8(a1)
00011084 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001108A 3368 0008 0030             		move.w	8(a0),$30(a1)
00011090 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011096 0642 0020                  		addi.w	#$20,d2
0001109A 1343 0037                  		move.b	d3,$37(a1)
0001109E 2348 003C                  		move.l	a0,$3C(a1)
000110A2 D604                       		add.b	d4,d3
000110A4 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000110A8                            
000110A8                            Obj5B_Move:				; XREF: Obj5B_Index
000110A8 7000                       		moveq	#0,d0
000110AA 1028 0028                  		move.b	$28(a0),d0
000110AE 0240 0007                  		andi.w	#7,d0
000110B2 D040                       		add.w	d0,d0
000110B4 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000110B8 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000110BC                            
000110BC                            Obj5B_Solid:				; XREF: Obj5B_Index
000110BC 2468 003C                  		movea.l	$3C(a0),a2
000110C0 7000                       		moveq	#0,d0
000110C2 1028 0037                  		move.b	$37(a0),d0
000110C6 1032 0000                  		move.b	(a2,d0.w),d0
000110CA D068 0032                  		add.w	$32(a0),d0
000110CE 3140 000C                  		move.w	d0,$C(a0)
000110D2 7200                       		moveq	#0,d1
000110D4 1228 0019                  		move.b	$19(a0),d1
000110D8 0641 000B                  		addi.w	#$B,d1
000110DC 343C 0010                  		move.w	#$10,d2
000110E0 363C 0011                  		move.w	#$11,d3
000110E4 3828 0008                  		move.w	8(a0),d4
000110E8 6100 EA5A                  		bsr.w	SolidObject
000110EC 4A04                       		tst.b	d4
000110EE 6A00                       		bpl.s	loc_10F92
000110F0 1544 0036                  		move.b	d4,$36(a2)
000110F4                            
000110F4                            loc_10F92:
000110F4 0828 0003 0022             		btst	#3,$22(a0)
000110FA 6700                       		beq.s	locret_10FA0
000110FC 157C 0001 0036             		move.b	#1,$36(a2)
00011102                            
00011102                            locret_10FA0:
00011102 4E75                       		rts	
00011104                            ; ===========================================================================
00011104 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011106 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011108 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0001110A 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001110C                            ; ===========================================================================
0001110C                            
0001110C                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001110C 4A68 0034                  		tst.w	$34(a0)
00011110 6600                       		bne.s	loc_10FC0
00011112 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011118 6600                       		bne.s	locret_10FBE
0001111A 317C 001E 0034             		move.w	#$1E,$34(a0)
00011120                            
00011120                            locret_10FBE:
00011120 4E75                       		rts	
00011122                            ; ===========================================================================
00011122                            
00011122                            loc_10FC0:
00011122 5368 0034                  		subq.w	#1,$34(a0)
00011126 66F8                       		bne.s	locret_10FBE
00011128 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001112C 4E75                       		rts	
0001112E                            ; ===========================================================================
0001112E                            
0001112E                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001112E 4A68 0034                  		tst.w	$34(a0)
00011132 6600                       		bne.s	loc_10FE0
00011134 4A28 0036                  		tst.b	$36(a0)
00011138 6A00                       		bpl.s	locret_10FDE
0001113A 317C 003C 0034             		move.w	#$3C,$34(a0)
00011140                            
00011140                            locret_10FDE:
00011140 4E75                       		rts	
00011142                            ; ===========================================================================
00011142                            
00011142                            loc_10FE0:
00011142 5368 0034                  		subq.w	#1,$34(a0)
00011146 6600                       		bne.s	loc_10FEC
00011148 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001114C 4E75                       		rts	
0001114E                            ; ===========================================================================
0001114E                            
0001114E                            loc_10FEC:
0001114E 43E8 0038                  		lea	$38(a0),a1
00011152 3028 0034                  		move.w	$34(a0),d0
00011156 E408                       		lsr.b	#2,d0
00011158 0200 0001                  		andi.b	#1,d0
0001115C 12C0                       		move.b	d0,(a1)+
0001115E 0A00 0001                  		eori.b	#1,d0
00011162 12C0                       		move.b	d0,(a1)+
00011164 0A00 0001                  		eori.b	#1,d0
00011168 12C0                       		move.b	d0,(a1)+
0001116A 0A00 0001                  		eori.b	#1,d0
0001116E 12C0                       		move.b	d0,(a1)+
00011170 4E75                       		rts	
00011172                            ; ===========================================================================
00011172                            
00011172                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011172 43E8 0038                  		lea	$38(a0),a1
00011176 0C11 0080                  		cmpi.b	#$80,(a1)
0001117A 6700                       		beq.s	locret_11038
0001117C 5211                       		addq.b	#1,(a1)
0001117E 7200                       		moveq	#0,d1
00011180 1219                       		move.b	(a1)+,d1
00011182 4841                       		swap	d1
00011184 E289                       		lsr.l	#1,d1
00011186 2401                       		move.l	d1,d2
00011188 E289                       		lsr.l	#1,d1
0001118A 2601                       		move.l	d1,d3
0001118C D682                       		add.l	d2,d3
0001118E 4841                       		swap	d1
00011190 4842                       		swap	d2
00011192 4843                       		swap	d3
00011194 12C3                       		move.b	d3,(a1)+
00011196 12C2                       		move.b	d2,(a1)+
00011198 12C1                       		move.b	d1,(a1)+
0001119A                            
0001119A                            locret_11038:
0001119A 4E75                       		rts	
0001119C 4E75                       		rts	
0001119E                            ; ===========================================================================
0001119E                            ; ---------------------------------------------------------------------------
0001119E                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001119E                            ; ---------------------------------------------------------------------------
0001119E                            Map_obj5B:
0001119E                            	include "_maps\obj5B.asm"
0001119E                            ; ---------------------------------------------------------------------------
0001119E                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001119E                            ; ---------------------------------------------------------------------------
0001119E 0000                       		dc.w byte_1103E-Map_obj5B
000111A0 01                         byte_1103E:	dc.b 1
000111A1 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000111A6                            		even
000111A6                            		even
000111A6                            
000111A6                            ; ===========================================================================
000111A6                            ; ---------------------------------------------------------------------------
000111A6                            ; Object 5C - metal girders in foreground (SLZ)
000111A6                            ; ---------------------------------------------------------------------------
000111A6                            
000111A6                            Obj5C:					; XREF: Obj_Index
000111A6 7000                       		moveq	#0,d0
000111A8 1028 0024                  		move.b	$24(a0),d0
000111AC 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000111B0 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000111B4                            ; ===========================================================================
000111B4 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000111B6 0000                       		dc.w Obj5C_Display-Obj5C_Index
000111B8                            ; ===========================================================================
000111B8                            
000111B8                            Obj5C_Main:				; XREF: Obj5C_Index
000111B8 5428 0024                  		addq.b	#2,$24(a0)
000111BC 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000111C4 317C 83CC 0002             		move.w	#$83CC,2(a0)
000111CA 117C 0010 0019             		move.b	#$10,$19(a0)
000111D0                            
000111D0                            Obj5C_Display:				; XREF: Obj5C_Index
000111D0 2238 F700                  		move.l	($FFFFF700).w,d1
000111D4 D281                       		add.l	d1,d1
000111D6 4841                       		swap	d1
000111D8 4441                       		neg.w	d1
000111DA 3141 0008                  		move.w	d1,8(a0)
000111DE 2238 F704                  		move.l	($FFFFF704).w,d1
000111E2 D281                       		add.l	d1,d1
000111E4 4841                       		swap	d1
000111E6 0241 003F                  		andi.w	#$3F,d1
000111EA 4441                       		neg.w	d1
000111EC 0641 0100                  		addi.w	#$100,d1
000111F0 3141 000A                  		move.w	d1,$A(a0)
000111F4 6000 C57E                  		bra.w	DisplaySprite
000111F8                            ; ===========================================================================
000111F8                            ; ---------------------------------------------------------------------------
000111F8                            ; Sprite mappings - metal girders in foreground	(SLZ)
000111F8                            ; ---------------------------------------------------------------------------
000111F8                            Map_obj5C:
000111F8                            	include "_maps\obj5C.asm"
000111F8                            ; ---------------------------------------------------------------------------
000111F8                            ; Sprite mappings - metal girders in foreground	(SLZ)
000111F8                            ; ---------------------------------------------------------------------------
000111F8 0000                       		dc.w byte_11098-Map_obj5C
000111FA 09                         byte_11098:	dc.b 9
000111FB 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011200 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011205 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001120A E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001120F 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011214 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011219 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001121E 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011223 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011228                            		even
00011228                            		even
00011228                            
00011228                            ; ===========================================================================
00011228                            ; ---------------------------------------------------------------------------
00011228                            ; Object 1B - water surface (LZ)
00011228                            ; ---------------------------------------------------------------------------
00011228                            
00011228                            Obj1B:					; XREF: Obj_Index
00011228 7000                       		moveq	#0,d0
0001122A 1028 0024                  		move.b	$24(a0),d0
0001122E 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011232 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011236                            ; ===========================================================================
00011236 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011238 0000                       		dc.w Obj1B_Action-Obj1B_Index
0001123A                            ; ===========================================================================
0001123A                            
0001123A                            Obj1B_Main:				; XREF: Obj1B_Index
0001123A 5428 0024                  		addq.b	#2,$24(a0)
0001123E 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011246 317C C300 0002             		move.w	#$C300,2(a0)
0001124C 117C 0004 0001             		move.b	#4,1(a0)
00011252 117C 0080 0019             		move.b	#$80,$19(a0)
00011258 3168 0008 0030             		move.w	8(a0),$30(a0)
0001125E                            
0001125E                            Obj1B_Action:				; XREF: Obj1B_Index
0001125E 3238 F700                  		move.w	($FFFFF700).w,d1
00011262 0241 FFE0                  		andi.w	#$FFE0,d1
00011266 D268 0030                  		add.w	$30(a0),d1
0001126A 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011270 6700                       		beq.s	loc_11114
00011272 0641 0020                  		addi.w	#$20,d1
00011276                            
00011276                            loc_11114:
00011276 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
0001127A 3238 F646                  		move.w	($FFFFF646).w,d1
0001127E 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011282 4A28 0032                  		tst.b	$32(a0)
00011286 6600                       		bne.s	Obj1B_Animate
00011288 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001128E 6700                       		beq.s	loc_1114A	; if not, branch
00011290 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011294 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
0001129A 6000                       		bra.s	Obj1B_Display
0001129C                            ; ===========================================================================
0001129C                            
0001129C                            Obj1B_Animate:				; XREF: loc_11114
0001129C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000112A0 6600                       		bne.s	Obj1B_Display	; if yes, branch
000112A2 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000112A8 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000112AC                            
000112AC                            loc_1114A:				; XREF: loc_11114
000112AC 5328 001E                  		subq.b	#1,$1E(a0)
000112B0 6A00                       		bpl.s	Obj1B_Display
000112B2 117C 0007 001E             		move.b	#7,$1E(a0)
000112B8 5228 001A                  		addq.b	#1,$1A(a0)
000112BC 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000112C2 6500                       		bcs.s	Obj1B_Display
000112C4 117C 0000 001A             		move.b	#0,$1A(a0)
000112CA                            
000112CA                            Obj1B_Display:
000112CA 6000 C4A8                  		bra.w	DisplaySprite
000112CE                            ; ===========================================================================
000112CE                            ; ---------------------------------------------------------------------------
000112CE                            ; Sprite mappings - water surface (LZ)
000112CE                            ; ---------------------------------------------------------------------------
000112CE                            Map_obj1B:
000112CE                            	include "_maps\obj1B.asm"
000112CE                            ; ---------------------------------------------------------------------------
000112CE                            ; Sprite mappings - water surface (LZ)
000112CE                            ; ---------------------------------------------------------------------------
000112CE 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000112D2 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000112D6 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000112DA 03                         byte_11178:	dc.b 3
000112DB FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000112E0 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000112E5 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000112EA 03                         byte_11188:	dc.b 3
000112EB FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000112F0 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000112F5 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000112FA 03                         byte_11198:	dc.b 3
000112FB FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011300 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011305 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001130A 06                         byte_111A8:	dc.b 6
0001130B FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011310 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011315 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001131A FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001131F FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011324 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011329 06                         byte_111C7:	dc.b 6
0001132A FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001132F FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011334 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011339 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001133E FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011343 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011348 06                         byte_111E6:	dc.b 6
00011349 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001134E FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011353 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011358 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
0001135D FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011362 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011368 00                         		even
00011368 00                         		even
00011368                            
00011368                            ; ===========================================================================
00011368                            ; ---------------------------------------------------------------------------
00011368                            ; Object 0B - pole that	breaks (LZ)
00011368                            ; ---------------------------------------------------------------------------
00011368                            
00011368                            Obj0B:					; XREF: Obj_Index
00011368 7000                       		moveq	#0,d0
0001136A 1028 0024                  		move.b	$24(a0),d0
0001136E 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011372 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011376                            ; ===========================================================================
00011376 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011378 0000                       		dc.w Obj0B_Action-Obj0B_Index
0001137A 0000                       		dc.w Obj0B_Display-Obj0B_Index
0001137C                            ; ===========================================================================
0001137C                            
0001137C                            Obj0B_Main:				; XREF: Obj0B_Index
0001137C 5428 0024                  		addq.b	#2,$24(a0)
00011380 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011388 317C 43DE 0002             		move.w	#$43DE,2(a0)
0001138E 117C 0004 0001             		move.b	#4,1(a0)
00011394 117C 0008 0019             		move.b	#8,$19(a0)
0001139A 117C 0004 0018             		move.b	#4,$18(a0)
000113A0 117C 00E1 0020             		move.b	#$E1,$20(a0)
000113A6 7000                       		moveq	#0,d0
000113A8 1028 0028                  		move.b	$28(a0),d0	; get object type
000113AC C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000113B0 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000113B4                            
000113B4                            Obj0B_Action:				; XREF: Obj0B_Index
000113B4 4A28 0032                  		tst.b	$32(a0)
000113B8 6700                       		beq.s	Obj0B_Grab
000113BA 4A68 0030                  		tst.w	$30(a0)
000113BE 6700                       		beq.s	Obj0B_MoveUp
000113C0 5368 0030                  		subq.w	#1,$30(a0)
000113C4 6600                       		bne.s	Obj0B_MoveUp
000113C6 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000113CC 6000                       		bra.s	Obj0B_Release
000113CE                            ; ===========================================================================
000113CE                            
000113CE                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000113CE 43F8 D000                  		lea	($FFFFD000).w,a1
000113D2 3028 000C                  		move.w	$C(a0),d0
000113D6 0440 0018                  		subi.w	#$18,d0
000113DA 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000113E0 6700                       		beq.s	Obj0B_MoveDown
000113E2 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000113E6 B069 000C                  		cmp.w	$C(a1),d0
000113EA 6500                       		bcs.s	Obj0B_MoveDown
000113EC 3340 000C                  		move.w	d0,$C(a1)
000113F0                            
000113F0                            Obj0B_MoveDown:
000113F0 0640 0024                  		addi.w	#$24,d0
000113F4 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000113FA 6700                       		beq.s	Obj0B_LetGo
000113FC 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011400 B069 000C                  		cmp.w	$C(a1),d0
00011404 6400                       		bcc.s	Obj0B_LetGo
00011406 3340 000C                  		move.w	d0,$C(a1)
0001140A                            
0001140A                            Obj0B_LetGo:
0001140A 1038 F603                  		move.b	($FFFFF603).w,d0
0001140E 0240 0070                  		andi.w	#$70,d0
00011412 6700                       		beq.s	Obj0B_Display
00011414                            
00011414                            Obj0B_Release:				; XREF: Obj0B_Action
00011414 4228 0020                  		clr.b	$20(a0)
00011418 5428 0024                  		addq.b	#2,$24(a0)
0001141C 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011420 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011424 4228 0032                  		clr.b	$32(a0)
00011428 6000                       		bra.s	Obj0B_Display
0001142A                            ; ===========================================================================
0001142A                            
0001142A                            Obj0B_Grab:				; XREF: Obj0B_Action
0001142A 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
0001142E 6700                       		beq.s	Obj0B_Display	; if not, branch
00011430 43F8 D000                  		lea	($FFFFD000).w,a1
00011434 3028 0008                  		move.w	8(a0),d0
00011438 0640 0014                  		addi.w	#$14,d0
0001143C B069 0008                  		cmp.w	8(a1),d0
00011440 6400                       		bcc.s	Obj0B_Display
00011442 4228 0021                  		clr.b	$21(a0)
00011446 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0001144C 6400                       		bcc.s	Obj0B_Display
0001144E 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011452 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011456 3028 0008                  		move.w	8(a0),d0
0001145A 0640 0014                  		addi.w	#$14,d0
0001145E 3340 0008                  		move.w	d0,8(a1)
00011462 08A9 0000 0022             		bclr	#0,$22(a1)
00011468 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
0001146E 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011474 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001147A 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011480                            
00011480                            Obj0B_Display:				; XREF: Obj0B_Index
00011480 6000 E39A                  		bra.w	MarkObjGone
00011484                            ; ===========================================================================
00011484                            ; ---------------------------------------------------------------------------
00011484                            ; Sprite mappings - pole that breaks (LZ)
00011484                            ; ---------------------------------------------------------------------------
00011484                            Map_obj0B:
00011484                            	include "_maps\obj0B.asm"
00011484                            ; ---------------------------------------------------------------------------
00011484                            ; Sprite mappings - pole that breaks (LZ)
00011484                            ; ---------------------------------------------------------------------------
00011484 0000                       		dc.w byte_11326-Map_obj0B
00011486 0000                       		dc.w byte_11331-Map_obj0B
00011488 02                         byte_11326:	dc.b 2			; normal pole
00011489 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001148E 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011493 04                         byte_11331:	dc.b 4			; broken pole
00011494 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011499 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001149E 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000114A3 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000114A8                            		even
000114A8                            		even
000114A8                            
000114A8                            ; ===========================================================================
000114A8                            ; ---------------------------------------------------------------------------
000114A8                            ; Object 0C - flapping door (LZ)
000114A8                            ; ---------------------------------------------------------------------------
000114A8                            
000114A8                            Obj0C:					; XREF: Obj_Index
000114A8 7000                       		moveq	#0,d0
000114AA 1028 0024                  		move.b	$24(a0),d0
000114AE 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000114B2 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000114B6                            ; ===========================================================================
000114B6 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000114B8 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000114BA                            ; ===========================================================================
000114BA                            
000114BA                            Obj0C_Main:				; XREF: Obj0C_Index
000114BA 5428 0024                  		addq.b	#2,$24(a0)
000114BE 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000114C6 317C 4328 0002             		move.w	#$4328,2(a0)
000114CC 0028 0004 0001             		ori.b	#4,1(a0)
000114D2 117C 0028 0019             		move.b	#$28,$19(a0)
000114D8 7000                       		moveq	#0,d0
000114DA 1028 0028                  		move.b	$28(a0),d0	; get object type
000114DE C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000114E2 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000114E6                            
000114E6                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000114E6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000114EA 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000114EC 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000114F2 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000114F8 4A28 0001                  		tst.b	1(a0)
000114FC 6A00                       		bpl.s	Obj0C_Solid
000114FE 303C 00BB                  		move.w	#$BB,d0
00011502 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play door sound
00011508                            
00011508                            Obj0C_Solid:
00011508 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
0001150E 6100 9316                  		bsr.w	AnimateSprite
00011512 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011516 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0001151A 6600                       		bne.s	Obj0C_Display	; if yes, branch
0001151C 3038 D008                  		move.w	($FFFFD008).w,d0
00011520 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011524 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011526 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001152C 323C 0013                  		move.w	#$13,d1
00011530 343C 0020                  		move.w	#$20,d2
00011534 3602                       		move.w	d2,d3
00011536 5243                       		addq.w	#1,d3
00011538 3828 0008                  		move.w	8(a0),d4
0001153C 6100 E606                  		bsr.w	SolidObject	; make the door	solid
00011540                            
00011540                            Obj0C_Display:
00011540 6000 E2DA                  		bra.w	MarkObjGone
00011544                            ; ===========================================================================
00011544                            Ani_obj0C:
00011544                            	include "_anim\obj0C.asm"
00011544                            ; ---------------------------------------------------------------------------
00011544                            ; Animation script - flapping door (LZ)
00011544                            ; ---------------------------------------------------------------------------
00011544 0000                       		dc.w byte_113E6-Ani_obj0C
00011546 0000                       		dc.w byte_113EC-Ani_obj0C
00011548 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001154E 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011554                            		even
00011554                            		even
00011554                            
00011554                            ; ---------------------------------------------------------------------------
00011554                            ; Sprite mappings - flapping door (LZ)
00011554                            ; ---------------------------------------------------------------------------
00011554                            Map_obj0C:
00011554                            	include "_maps\obj0C.asm"
00011554                            ; ---------------------------------------------------------------------------
00011554                            ; Sprite mappings - flapping door (LZ)
00011554                            ; ---------------------------------------------------------------------------
00011554 0000                       		dc.w byte_113F8-Map_obj0C
00011556 0000                       		dc.w byte_11403-Map_obj0C
00011558 0000                       		dc.w byte_1140E-Map_obj0C
0001155A 02                         byte_113F8:	dc.b 2
0001155B E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011560 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011565 02                         byte_11403:	dc.b 2
00011566 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
0001156B 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011570 02                         byte_1140E:	dc.b 2
00011571 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011576 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0001157C 00                         		even
0001157C 00                         		even
0001157C                            
0001157C                            ; ===========================================================================
0001157C                            ; ---------------------------------------------------------------------------
0001157C                            ; Object 71 - invisible	solid blocks
0001157C                            ; ---------------------------------------------------------------------------
0001157C                            
0001157C                            Obj71:					; XREF: Obj_Index
0001157C 7000                       		moveq	#0,d0
0001157E 1028 0024                  		move.b	$24(a0),d0
00011582 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011586 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
0001158A                            ; ===========================================================================
0001158A 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
0001158C 0000                       		dc.w Obj71_Solid-Obj71_Index
0001158E                            ; ===========================================================================
0001158E                            
0001158E                            Obj71_Main:				; XREF: Obj71_Index
0001158E 5428 0024                  		addq.b	#2,$24(a0)
00011592 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
0001159A 317C 8680 0002             		move.w	#$8680,2(a0)
000115A0 0028 0004 0001             		ori.b	#4,1(a0)
000115A6 1028 0028                  		move.b	$28(a0),d0	; get object type
000115AA 1200                       		move.b	d0,d1
000115AC 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000115B0 0640 0010                  		addi.w	#$10,d0
000115B4 E248                       		lsr.w	#1,d0
000115B6 1140 0019                  		move.b	d0,$19(a0)	; set object width
000115BA 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000115BE 5241                       		addq.w	#1,d1
000115C0 E749                       		lsl.w	#3,d1
000115C2 1141 0016                  		move.b	d1,$16(a0)	; set object height
000115C6                            
000115C6                            Obj71_Solid:				; XREF: Obj71_Index
000115C6 6100 C426                  		bsr.w	ChkObjOnScreen
000115CA 6600                       		bne.s	Obj71_ChkDel
000115CC 7200                       		moveq	#0,d1
000115CE 1228 0019                  		move.b	$19(a0),d1
000115D2 0641 000B                  		addi.w	#$B,d1
000115D6 7400                       		moveq	#0,d2
000115D8 1428 0016                  		move.b	$16(a0),d2
000115DC 3602                       		move.w	d2,d3
000115DE 5243                       		addq.w	#1,d3
000115E0 3828 0008                  		move.w	8(a0),d4
000115E4 6100 E5A4                  		bsr.w	SolidObject71
000115E8                            
000115E8                            Obj71_ChkDel:
000115E8 3028 0008                  		move.w	8(a0),d0
000115EC 0240 FF80                  		andi.w	#$FF80,d0
000115F0 3238 F700                  		move.w	($FFFFF700).w,d1
000115F4 0441 0080                  		subi.w	#$80,d1
000115F8 0241 FF80                  		andi.w	#$FF80,d1
000115FC 9041                       		sub.w	d1,d0
000115FE 0C40 0280                  		cmpi.w	#$280,d0
00011602 6200                       		bhi.s	Obj71_Delete
00011604 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011608 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
0001160A 4EFA C168                  		jmp	DisplaySprite	; if yes, display the object
0001160E                            ; ===========================================================================
0001160E                            
0001160E                            Obj71_NoDisplay:
0001160E 4E75                       		rts	
00011610                            ; ===========================================================================
00011610                            
00011610                            Obj71_Delete:
00011610 4EFA C19E                  		jmp	DeleteObject
00011614                            ; ===========================================================================
00011614                            ; ---------------------------------------------------------------------------
00011614                            ; Sprite mappings - invisible solid blocks
00011614                            ; ---------------------------------------------------------------------------
00011614                            Map_obj71:
00011614                            	include "_maps\obj71.asm"
00011614                            ; ---------------------------------------------------------------------------
00011614                            ; Sprite mappings - invisible solid blocks
00011614                            ; ---------------------------------------------------------------------------
00011614 0000                       		dc.w byte_114BC-Map_obj71
00011616 0000                       		dc.w byte_114D1-Map_obj71
00011618 0000                       		dc.w byte_114E6-Map_obj71
0001161A 04                         byte_114BC:	dc.b 4
0001161B F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011620 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011625 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
0001162A 0005 0018 00               		dc.b 0,	5, 0, $18, 0
0001162F 04                         byte_114D1:	dc.b 4
00011630 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011635 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
0001163A 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
0001163F 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011644 04                         byte_114E6:	dc.b 4
00011645 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
0001164A E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
0001164F 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011654 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
0001165A 00                         		even
0001165A 00                         		even
0001165A                            
0001165A                            ; ===========================================================================
0001165A                            ; ---------------------------------------------------------------------------
0001165A                            ; Object 5D - fans (SLZ)
0001165A                            ; ---------------------------------------------------------------------------
0001165A                            
0001165A                            Obj5D:					; XREF: Obj_Index
0001165A 7000                       		moveq	#0,d0
0001165C 1028 0024                  		move.b	$24(a0),d0
00011660 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011664 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011668                            ; ===========================================================================
00011668 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
0001166A 0000                       		dc.w Obj5D_Delay-Obj5D_Index
0001166C                            ; ===========================================================================
0001166C                            
0001166C                            Obj5D_Main:				; XREF: Obj5D_Index
0001166C 5428 0024                  		addq.b	#2,$24(a0)
00011670 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011678 317C 43A0 0002             		move.w	#$43A0,2(a0)
0001167E 0028 0004 0001             		ori.b	#4,1(a0)
00011684 117C 0010 0019             		move.b	#$10,$19(a0)
0001168A 117C 0004 0018             		move.b	#4,$18(a0)
00011690                            
00011690                            Obj5D_Delay:				; XREF: Obj5D_Index
00011690 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011696 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011698 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001169C 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001169E 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
000116A4 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
000116AA 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
000116AC 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
000116B2                            
000116B2                            Obj5D_Blow:
000116B2 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
000116B6 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
000116BA 43F8 D000                  		lea	($FFFFD000).w,a1
000116BE 3029 0008                  		move.w	8(a1),d0
000116C2 9068 0008                  		sub.w	8(a0),d0
000116C6 0828 0000 0022             		btst	#0,$22(a0)
000116CC 6600                       		bne.s	Obj5D_ChkSonic
000116CE 4440                       		neg.w	d0
000116D0                            
000116D0                            Obj5D_ChkSonic:
000116D0 0640 0050                  		addi.w	#$50,d0
000116D4 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000116D8 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000116DA 3229 000C                  		move.w	$C(a1),d1
000116DE 0641 0060                  		addi.w	#$60,d1
000116E2 9268 000C                  		sub.w	$C(a0),d1
000116E6 6500                       		bcs.s	Obj5D_Animate
000116E8 0C41 0070                  		cmpi.w	#$70,d1
000116EC 6400                       		bcc.s	Obj5D_Animate
000116EE 0440 0050                  		subi.w	#$50,d0
000116F2 6400                       		bcc.s	loc_1159A
000116F4 4640                       		not.w	d0
000116F6 D040                       		add.w	d0,d0
000116F8                            
000116F8                            loc_1159A:
000116F8 0640 0060                  		addi.w	#$60,d0
000116FC 0828 0000 0022             		btst	#0,$22(a0)
00011702 6600                       		bne.s	loc_115A8
00011704 4440                       		neg.w	d0
00011706                            
00011706                            loc_115A8:
00011706 4400                       		neg.b	d0
00011708 E840                       		asr.w	#4,d0
0001170A 0828 0000 0028             		btst	#0,$28(a0)
00011710 6700                       		beq.s	Obj5D_MoveSonic
00011712 4440                       		neg.w	d0
00011714                            
00011714                            Obj5D_MoveSonic:
00011714 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011718                            
00011718                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011718 5328 001E                  		subq.b	#1,$1E(a0)
0001171C 6A00                       		bpl.s	Obj5D_ChkDel
0001171E 117C 0000 001E             		move.b	#0,$1E(a0)
00011724 5228 001B                  		addq.b	#1,$1B(a0)
00011728 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
0001172E 6500                       		bcs.s	loc_115D8
00011730 117C 0000 001B             		move.b	#0,$1B(a0)
00011736                            
00011736                            loc_115D8:
00011736 7000                       		moveq	#0,d0
00011738 0828 0000 0028             		btst	#0,$28(a0)
0001173E 6700                       		beq.s	loc_115E4
00011740 7002                       		moveq	#2,d0
00011742                            
00011742                            loc_115E4:
00011742 D028 001B                  		add.b	$1B(a0),d0
00011746 1140 001A                  		move.b	d0,$1A(a0)
0001174A                            
0001174A                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
0001174A 6100 C028                  		bsr.w	DisplaySprite
0001174E 3028 0008                  		move.w	8(a0),d0
00011752 0240 FF80                  		andi.w	#$FF80,d0
00011756 3238 F700                  		move.w	($FFFFF700).w,d1
0001175A 0441 0080                  		subi.w	#$80,d1
0001175E 0241 FF80                  		andi.w	#$FF80,d1
00011762 9041                       		sub.w	d1,d0
00011764 0C40 0280                  		cmpi.w	#$280,d0
00011768 6200 C046                  		bhi.w	DeleteObject
0001176C 4E75                       		rts	
0001176E                            ; ===========================================================================
0001176E                            ; ---------------------------------------------------------------------------
0001176E                            ; Sprite mappings - fans (SLZ)
0001176E                            ; ---------------------------------------------------------------------------
0001176E                            Map_obj5D:
0001176E                            	include "_maps\obj5D.asm"
0001176E                            ; ---------------------------------------------------------------------------
0001176E                            ; Sprite mappings - fans (SLZ)
0001176E                            ; ---------------------------------------------------------------------------
0001176E 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011772 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011776 0000                       		dc.w byte_1161A-Map_obj5D
00011778 02                         byte_1161A:	dc.b 2
00011779 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001177E 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011783 02                         byte_11625:	dc.b 2
00011784 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011789 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001178E 02                         byte_11630:	dc.b 2
0001178F F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011794 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001179A 00                         		even
0001179A 00                         		even
0001179A                            
0001179A                            ; ===========================================================================
0001179A                            ; ---------------------------------------------------------------------------
0001179A                            ; Object 5E - seesaws (SLZ)
0001179A                            ; ---------------------------------------------------------------------------
0001179A                            
0001179A                            Obj5E:					; XREF: Obj_Index
0001179A 7000                       		moveq	#0,d0
0001179C 1028 0024                  		move.b	$24(a0),d0
000117A0 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
000117A4 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
000117A8 3028 0030                  		move.w	$30(a0),d0
000117AC 0240 FF80                  		andi.w	#$FF80,d0
000117B0 3238 F700                  		move.w	($FFFFF700).w,d1
000117B4 0441 0080                  		subi.w	#$80,d1
000117B8 0241 FF80                  		andi.w	#$FF80,d1
000117BC 9041                       		sub.w	d1,d0
000117BE 6B00 BFF0                  		bmi.w	DeleteObject
000117C2 0C40 0280                  		cmpi.w	#$280,d0
000117C6 6200 BFE8                  		bhi.w	DeleteObject
000117CA 6000 BFA8                  		bra.w	DisplaySprite
000117CE                            ; ===========================================================================
000117CE 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000117D0 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000117D2 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000117D4 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000117D6 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000117D8 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000117DA                            ; ===========================================================================
000117DA                            
000117DA                            Obj5E_Main:				; XREF: Obj5E_Index
000117DA 5428 0024                  		addq.b	#2,$24(a0)
000117DE 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000117E6 317C 0374 0002             		move.w	#$374,2(a0)
000117EC 0028 0004 0001             		ori.b	#4,1(a0)
000117F2 117C 0004 0018             		move.b	#4,$18(a0)
000117F8 117C 0030 0019             		move.b	#$30,$19(a0)
000117FE 3168 0008 0030             		move.w	8(a0),$30(a0)
00011804 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011808 6600                       		bne.s	loc_116D2	; if not, branch
0001180A 6100 C404                  		bsr.w	SingleObjLoad2
0001180E 6600                       		bne.s	loc_116D2
00011810 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011814 5C29 0024                  		addq.b	#6,$24(a1)
00011818 3368 0008 0008             		move.w	8(a0),8(a1)
0001181E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011824 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001182A 2348 003C                  		move.l	a0,$3C(a1)
0001182E                            
0001182E                            loc_116D2:
0001182E 0828 0000 0022             		btst	#0,$22(a0)
00011834 6700                       		beq.s	loc_116E0
00011836 117C 0002 001A             		move.b	#2,$1A(a0)
0001183C                            
0001183C                            loc_116E0:
0001183C 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011842                            
00011842                            Obj5E_Slope:				; XREF: Obj5E_Index
00011842 1228 003A                  		move.b	$3A(a0),d1
00011846 6100 0000                  		bsr.w	loc_11766
0001184A 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011850 0828 0000 001A             		btst	#0,$1A(a0)
00011856 6700                       		beq.s	loc_11702
00011858 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001185E                            
0001185E                            loc_11702:
0001185E 43F8 D000                  		lea	($FFFFD000).w,a1
00011862 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011868 323C 0030                  		move.w	#$30,d1
0001186C 4EB9 0000 765E             		jsr	(SlopeObject).l
00011872 4E75                       		rts	
00011874                            ; ===========================================================================
00011874                            
00011874                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011874 6100 0000                  		bsr.w	loc_1174A
00011878 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001187E 0828 0000 001A             		btst	#0,$1A(a0)
00011884 6700                       		beq.s	loc_11730
00011886 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001188C                            
0001188C                            loc_11730:
0001188C 323C 0030                  		move.w	#$30,d1
00011890 4EB9 0000 76FE             		jsr	(ExitPlatform).l
00011896 323C 0030                  		move.w	#$30,d1
0001189A 3428 0008                  		move.w	8(a0),d2
0001189E 4EB9 0000 865C             		jsr	SlopeObject2
000118A4 4E75                       		rts	
000118A6                            ; ===========================================================================
000118A6                            
000118A6                            loc_1174A:				; XREF: Obj5E_Slope2
000118A6 7202                       		moveq	#2,d1
000118A8 43F8 D000                  		lea	($FFFFD000).w,a1
000118AC 3028 0008                  		move.w	8(a0),d0
000118B0 9069 0008                  		sub.w	8(a1),d0
000118B4 6400                       		bcc.s	loc_1175E
000118B6 4440                       		neg.w	d0
000118B8 7200                       		moveq	#0,d1
000118BA                            
000118BA                            loc_1175E:
000118BA 0C40 0008                  		cmpi.w	#8,d0
000118BE 6400                       		bcc.s	loc_11766
000118C0 7201                       		moveq	#1,d1
000118C2                            
000118C2                            loc_11766:
000118C2 1028 001A                  		move.b	$1A(a0),d0
000118C6 B001                       		cmp.b	d1,d0
000118C8 6700                       		beq.s	locret_11790
000118CA 6400                       		bcc.s	loc_11772
000118CC 5400                       		addq.b	#2,d0
000118CE                            
000118CE                            loc_11772:
000118CE 5300                       		subq.b	#1,d0
000118D0 1140 001A                  		move.b	d0,$1A(a0)
000118D4 1141 003A                  		move.b	d1,$3A(a0)
000118D8 08A8 0000 0001             		bclr	#0,1(a0)
000118DE 0828 0001 001A             		btst	#1,$1A(a0)
000118E4 6700                       		beq.s	locret_11790
000118E6 08E8 0000 0001             		bset	#0,1(a0)
000118EC                            
000118EC                            locret_11790:
000118EC 4E75                       		rts	
000118EE                            ; ===========================================================================
000118EE                            
000118EE                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000118EE 5428 0024                  		addq.b	#2,$24(a0)
000118F2 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000118FA 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011900 0028 0004 0001             		ori.b	#4,1(a0)
00011906 117C 0004 0018             		move.b	#4,$18(a0)
0001190C 117C 008B 0020             		move.b	#$8B,$20(a0)
00011912 117C 000C 0019             		move.b	#$C,$19(a0)
00011918 3168 0008 0030             		move.w	8(a0),$30(a0)
0001191E 0668 0028 0008             		addi.w	#$28,8(a0)
00011924 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001192A 117C 0001 001A             		move.b	#1,$1A(a0)
00011930 0828 0000 0022             		btst	#0,$22(a0)
00011936 6700                       		beq.s	Obj5E_MoveSpike
00011938 0468 0050 0008             		subi.w	#$50,8(a0)
0001193E 117C 0002 003A             		move.b	#2,$3A(a0)
00011944                            
00011944                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011944 2268 003C                  		movea.l	$3C(a0),a1
00011948 7000                       		moveq	#0,d0
0001194A 1028 003A                  		move.b	$3A(a0),d0
0001194E 9029 003A                  		sub.b	$3A(a1),d0
00011952 6700                       		beq.s	loc_1183E
00011954 6400                       		bcc.s	loc_117FC
00011956 4400                       		neg.b	d0
00011958                            
00011958                            loc_117FC:
00011958 323C F7E8                  		move.w	#-$818,d1
0001195C 343C FEEC                  		move.w	#-$114,d2
00011960 0C00 0001                  		cmpi.b	#1,d0
00011964 6700                       		beq.s	loc_11822
00011966 323C F510                  		move.w	#-$AF0,d1
0001196A 343C FF34                  		move.w	#-$CC,d2
0001196E 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011974 6D00                       		blt.s	loc_11822
00011976 323C F200                  		move.w	#-$E00,d1
0001197A 343C FF60                  		move.w	#-$A0,d2
0001197E                            
0001197E                            loc_11822:
0001197E 3141 0012                  		move.w	d1,$12(a0)
00011982 3142 0010                  		move.w	d2,$10(a0)
00011986 3028 0008                  		move.w	8(a0),d0
0001198A 9068 0030                  		sub.w	$30(a0),d0
0001198E 6400                       		bcc.s	loc_11838
00011990 4468 0010                  		neg.w	$10(a0)
00011994                            
00011994                            loc_11838:
00011994 5428 0024                  		addq.b	#2,$24(a0)
00011998 6000                       		bra.s	Obj5E_SpikeFall
0001199A                            ; ===========================================================================
0001199A                            
0001199A                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001199A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000119A0 7000                       		moveq	#0,d0
000119A2 1029 001A                  		move.b	$1A(a1),d0
000119A6 343C 0028                  		move.w	#$28,d2
000119AA 3228 0008                  		move.w	8(a0),d1
000119AE 9268 0030                  		sub.w	$30(a0),d1
000119B2 6400                       		bcc.s	loc_1185C
000119B4 4442                       		neg.w	d2
000119B6 5440                       		addq.w	#2,d0
000119B8                            
000119B8                            loc_1185C:
000119B8 D040                       		add.w	d0,d0
000119BA 3228 0034                  		move.w	$34(a0),d1
000119BE D272 0000                  		add.w	(a2,d0.w),d1
000119C2 3141 000C                  		move.w	d1,$C(a0)
000119C6 D468 0030                  		add.w	$30(a0),d2
000119CA 3142 0008                  		move.w	d2,8(a0)
000119CE 4268 000E                  		clr.w	$E(a0)
000119D2 4268 000A                  		clr.w	$A(a0)
000119D6 4E75                       		rts	
000119D8                            ; ===========================================================================
000119D8                            
000119D8                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000119D8 4A68 0012                  		tst.w	$12(a0)
000119DC 6A00                       		bpl.s	loc_1189A
000119DE 6100 BD42                  		bsr.w	ObjectFall
000119E2 3028 0034                  		move.w	$34(a0),d0
000119E6 0440 002F                  		subi.w	#$2F,d0
000119EA B068 000C                  		cmp.w	$C(a0),d0
000119EE 6E00                       		bgt.s	locret_11898
000119F0 6100 BD30                  		bsr.w	ObjectFall
000119F4                            
000119F4                            locret_11898:
000119F4 4E75                       		rts	
000119F6                            ; ===========================================================================
000119F6                            
000119F6                            loc_1189A:				; XREF: Obj5E_SpikeFall
000119F6 6100 BD2A                  		bsr.w	ObjectFall
000119FA 2268 003C                  		movea.l	$3C(a0),a1
000119FE 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011A04 7000                       		moveq	#0,d0
00011A06 1029 001A                  		move.b	$1A(a1),d0
00011A0A 3228 0008                  		move.w	8(a0),d1
00011A0E 9268 0030                  		sub.w	$30(a0),d1
00011A12 6400                       		bcc.s	loc_118BA
00011A14 5440                       		addq.w	#2,d0
00011A16                            
00011A16                            loc_118BA:
00011A16 D040                       		add.w	d0,d0
00011A18 3228 0034                  		move.w	$34(a0),d1
00011A1C D272 0000                  		add.w	(a2,d0.w),d1
00011A20 B268 000C                  		cmp.w	$C(a0),d1
00011A24 6E00                       		bgt.s	locret_11938
00011A26 2268 003C                  		movea.l	$3C(a0),a1
00011A2A 7202                       		moveq	#2,d1
00011A2C 4A68 0010                  		tst.w	$10(a0)
00011A30 6B00                       		bmi.s	Obj5E_Spring
00011A32 7200                       		moveq	#0,d1
00011A34                            
00011A34                            Obj5E_Spring:
00011A34 1341 003A                  		move.b	d1,$3A(a1)
00011A38 1141 003A                  		move.b	d1,$3A(a0)
00011A3C B229 001A                  		cmp.b	$1A(a1),d1
00011A40 6700                       		beq.s	loc_1192C
00011A42 08A9 0003 0022             		bclr	#3,$22(a1)
00011A48 6700                       		beq.s	loc_1192C
00011A4A 4229 0025                  		clr.b	$25(a1)
00011A4E 137C 0002 0024             		move.b	#2,$24(a1)
00011A54 45F8 D000                  		lea	($FFFFD000).w,a2
00011A58 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011A5E 446A 0012                  		neg.w	$12(a2)
00011A62 08EA 0001 0022             		bset	#1,$22(a2)
00011A68 08AA 0003 0022             		bclr	#3,$22(a2)
00011A6E 422A 003C                  		clr.b	$3C(a2)
00011A72 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011A78 157C 0002 0024             		move.b	#2,$24(a2)
00011A7E 303C 00CC                  		move.w	#$CC,d0
00011A82 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
00011A88                            
00011A88                            loc_1192C:
00011A88 4268 0010                  		clr.w	$10(a0)
00011A8C 4268 0012                  		clr.w	$12(a0)
00011A90 5528 0024                  		subq.b	#2,$24(a0)
00011A94                            
00011A94                            locret_11938:
00011A94 4E75                       		rts	
00011A96                            ; ===========================================================================
00011A96 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011AA0                            
00011AA0                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011AD0                            		even
00011AD0                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011B00                            		even
00011B00                            ; ---------------------------------------------------------------------------
00011B00                            ; Sprite mappings - seesaws (SLZ)
00011B00                            ; ---------------------------------------------------------------------------
00011B00                            Map_obj5E:
00011B00                            	include "_maps\obj5E.asm"
00011B00                            ; ---------------------------------------------------------------------------
00011B00                            ; Sprite mappings - seesaws (SLZ)
00011B00                            ; ---------------------------------------------------------------------------
00011B00 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011B04 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011B08 07                         byte_119AC:	dc.b 7
00011B09 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011B0E DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011B13 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011B18 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011B1D FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011B22 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011B27 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011B2C 04                         byte_119D0:	dc.b 4
00011B2D E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011B32 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011B37 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011B3C E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011B42 00                         		even
00011B42 00                         		even
00011B42                            
00011B42                            ; ---------------------------------------------------------------------------
00011B42                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011B42                            ; ---------------------------------------------------------------------------
00011B42                            Map_obj5Ea:
00011B42                            	include "_maps\obj5Eballs.asm"
00011B42                            ; ---------------------------------------------------------------------------
00011B42                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011B42                            ; ---------------------------------------------------------------------------
00011B42 0000                       		dc.w byte_119EA-Map_obj5Ea
00011B44 0000                       		dc.w byte_119F0-Map_obj5Ea
00011B46 01                         byte_119EA:	dc.b 1
00011B47 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011B4C 01                         byte_119F0:	dc.b 1
00011B4D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011B52                            		even
00011B52                            		even
00011B52                            
00011B52                            ; ===========================================================================
00011B52                            ; ---------------------------------------------------------------------------
00011B52                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011B52                            ; ---------------------------------------------------------------------------
00011B52                            
00011B52                            Obj5F:					; XREF: Obj_Index
00011B52 7000                       		moveq	#0,d0
00011B54 1028 0024                  		move.b	$24(a0),d0
00011B58 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011B5C 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011B60                            ; ===========================================================================
00011B60 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011B62 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011B64 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011B66 0000                       		dc.w Obj5F_End-Obj5F_Index
00011B68                            ; ===========================================================================
00011B68                            
00011B68                            Obj5F_Main:				; XREF: Obj5F_Index
00011B68 5428 0024                  		addq.b	#2,$24(a0)
00011B6C 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011B74 317C 0400 0002             		move.w	#$400,2(a0)
00011B7A 0028 0004 0001             		ori.b	#4,1(a0)
00011B80 117C 0003 0018             		move.b	#3,$18(a0)
00011B86 117C 000C 0019             		move.b	#$C,$19(a0)
00011B8C 1028 0028                  		move.b	$28(a0),d0
00011B90 6700                       		beq.s	loc_11A3C
00011B92 1140 0024                  		move.b	d0,$24(a0)
00011B96 4E75                       		rts	
00011B98                            ; ===========================================================================
00011B98                            
00011B98                            loc_11A3C:
00011B98 117C 009A 0020             		move.b	#$9A,$20(a0)
00011B9E 0868 0000 0022             		bchg	#0,$22(a0)
00011BA4                            
00011BA4                            Obj5F_Action:				; XREF: Obj5F_Index
00011BA4 7000                       		moveq	#0,d0
00011BA6 1028 0025                  		move.b	$25(a0),d0
00011BAA 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011BAE 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011BB2 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011BB8 6100 8C6C                  		bsr.w	AnimateSprite
00011BBC 6000 DC5E                  		bra.w	MarkObjGone
00011BC0                            ; ===========================================================================
00011BC0 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011BC2 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011BC4 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011BC6                            ; ===========================================================================
00011BC6                            
00011BC6                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011BC6 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011BCA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011BCE 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011BD0 5428 0025                  		addq.b	#2,$25(a0)
00011BD4 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011BDA 317C 0010 0010             		move.w	#$10,$10(a0)
00011BE0 117C 0001 001C             		move.b	#1,$1C(a0)
00011BE6 0868 0000 0022             		bchg	#0,$22(a0)
00011BEC 6700                       		beq.s	locret_11A96
00011BEE 4468 0010                  		neg.w	$10(a0)		; change direction
00011BF2                            
00011BF2                            locret_11A96:
00011BF2 4E75                       		rts	
00011BF4                            ; ===========================================================================
00011BF4                            
00011BF4                            Obj5F_Wait:				; XREF: Obj5F_Index2
00011BF4 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011BF8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011BFC 6B00                       		bmi.s	loc_11AA8
00011BFE 6100 BB4E                  		bsr.w	SpeedToPos
00011C02 4E75                       		rts	
00011C04                            ; ===========================================================================
00011C04                            
00011C04                            loc_11AA8:
00011C04 5528 0025                  		subq.b	#2,$25(a0)
00011C08 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00011C0E 4268 0010                  		clr.w	$10(a0)		; stop walking
00011C12 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00011C18 4E75                       		rts	
00011C1A                            ; ===========================================================================
00011C1A                            
00011C1A                            Obj5F_Explode:				; XREF: Obj5F_Index2
00011C1A 5368 0030                  		subq.w	#1,$30(a0)
00011C1E 6A00                       		bpl.s	locret_11AD0
00011C20 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00011C24 117C 0000 0024             		move.b	#0,$24(a0)
00011C2A                            
00011C2A                            locret_11AD0:
00011C2A 4E75                       		rts	
00011C2C                            ; ===========================================================================
00011C2C                            
00011C2C                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00011C2C 3038 D008                  		move.w	($FFFFD008).w,d0
00011C30 9068 0008                  		sub.w	8(a0),d0
00011C34 6400                       		bcc.s	loc_11ADE
00011C36 4440                       		neg.w	d0
00011C38                            
00011C38                            loc_11ADE:
00011C38 0C40 0060                  		cmpi.w	#$60,d0
00011C3C 6400                       		bcc.s	locret_11B5E
00011C3E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011C42 9068 000C                  		sub.w	$C(a0),d0
00011C46 6400                       		bcc.s	Obj5F_MakeFuse
00011C48 4440                       		neg.w	d0
00011C4A                            
00011C4A                            Obj5F_MakeFuse:
00011C4A 0C40 0060                  		cmpi.w	#$60,d0
00011C4E 6400                       		bcc.s	locret_11B5E
00011C50 4A78 FE08                  		tst.w	($FFFFFE08).w
00011C54 6600                       		bne.s	locret_11B5E
00011C56 117C 0004 0025             		move.b	#4,$25(a0)
00011C5C 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00011C62 4268 0010                  		clr.w	$10(a0)
00011C66 117C 0002 001C             		move.b	#2,$1C(a0)
00011C6C 6100 BFA2                  		bsr.w	SingleObjLoad2
00011C70 6600                       		bne.s	locret_11B5E
00011C72 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00011C76 3368 0008 0008             		move.w	8(a0),8(a1)
00011C7C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C82 3368 000C 0034             		move.w	$C(a0),$34(a1)
00011C88 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011C8E 137C 0004 0028             		move.b	#4,$28(a1)
00011C94 137C 0003 001C             		move.b	#3,$1C(a1)
00011C9A 337C 0010 0012             		move.w	#$10,$12(a1)
00011CA0 0828 0001 0022             		btst	#1,$22(a0)
00011CA6 6700                       		beq.s	loc_11B54
00011CA8 4469 0012                  		neg.w	$12(a1)
00011CAC                            
00011CAC                            loc_11B54:
00011CAC 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00011CB2 2348 003C                  		move.l	a0,$3C(a1)
00011CB6                            
00011CB6                            locret_11B5E:
00011CB6 4E75                       		rts	
00011CB8                            ; ===========================================================================
00011CB8                            
00011CB8                            Obj5F_Display:				; XREF: Obj5F_Index
00011CB8 6100                       		bsr.s	loc_11B70
00011CBA 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011CC0 6100 8B64                  		bsr.w	AnimateSprite
00011CC4 6000 DB56                  		bra.w	MarkObjGone
00011CC8                            ; ===========================================================================
00011CC8                            
00011CC8                            loc_11B70:
00011CC8 5368 0030                  		subq.w	#1,$30(a0)
00011CCC 6B00                       		bmi.s	loc_11B7C
00011CCE 6100 BA7E                  		bsr.w	SpeedToPos
00011CD2 4E75                       		rts	
00011CD4                            ; ===========================================================================
00011CD4                            
00011CD4                            loc_11B7C:
00011CD4 4268 0030                  		clr.w	$30(a0)
00011CD8 4228 0024                  		clr.b	$24(a0)
00011CDC 3168 0034 000C             		move.w	$34(a0),$C(a0)
00011CE2 7203                       		moveq	#3,d1
00011CE4 2248                       		movea.l	a0,a1
00011CE6 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00011CEC 6000                       		bra.s	Obj5F_MakeShrap
00011CEE                            ; ===========================================================================
00011CEE                            
00011CEE                            Obj5F_Loop:
00011CEE 6100 BF20                  		bsr.w	SingleObjLoad2
00011CF2 6600                       		bne.s	loc_11BCE
00011CF4                            
00011CF4                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00011CF4 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00011CF8 3368 0008 0008             		move.w	8(a0),8(a1)
00011CFE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011D04 137C 0006 0028             		move.b	#6,$28(a1)
00011D0A 137C 0004 001C             		move.b	#4,$1C(a1)
00011D10 335A 0010                  		move.w	(a2)+,$10(a1)
00011D14 335A 0012                  		move.w	(a2)+,$12(a1)
00011D18 137C 0098 0020             		move.b	#$98,$20(a1)
00011D1E 08E9 0007 0001             		bset	#7,1(a1)
00011D24                            
00011D24                            loc_11BCE:
00011D24 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00011D28                            
00011D28 117C 0006 0024             		move.b	#6,$24(a0)
00011D2E                            
00011D2E                            Obj5F_End:				; XREF: Obj5F_Index
00011D2E 6100 BA1E                  		bsr.w	SpeedToPos
00011D32 0668 0018 0012             		addi.w	#$18,$12(a0)
00011D38 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011D3E 6100 8AE6                  		bsr.w	AnimateSprite
00011D42 4A28 0001                  		tst.b	1(a0)
00011D46 6A00 BA68                  		bpl.w	DeleteObject
00011D4A 6000 BA28                  		bra.w	DisplaySprite
00011D4E                            ; ===========================================================================
00011D4E FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00011D5E                            
00011D5E                            Ani_obj5F:
00011D5E                            	include "_anim\obj5F.asm"
00011D5E                            ; ---------------------------------------------------------------------------
00011D5E                            ; Animation script - Bomb enemy
00011D5E                            ; ---------------------------------------------------------------------------
00011D5E 0000                       		dc.w byte_11C12-Ani_obj5F
00011D60 0000                       		dc.w byte_11C16-Ani_obj5F
00011D62 0000                       		dc.w byte_11C1C-Ani_obj5F
00011D64 0000                       		dc.w byte_11C20-Ani_obj5F
00011D66 0000                       		dc.w byte_11C24-Ani_obj5F
00011D68 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00011D6C 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00011D72 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00011D76 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00011D7A 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00011D7E                            		even
00011D7E                            		even
00011D7E                            
00011D7E                            ; ---------------------------------------------------------------------------
00011D7E                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011D7E                            ; ---------------------------------------------------------------------------
00011D7E                            Map_obj5F:
00011D7E                            	include "_maps\obj5F.asm"
00011D7E                            ; ---------------------------------------------------------------------------
00011D7E                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011D7E                            ; ---------------------------------------------------------------------------
00011D7E 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00011D82 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00011D86 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00011D8A 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00011D8E 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00011D92 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00011D96 03                         byte_11C40:	dc.b 3
00011D97 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011D9C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011DA1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011DA6 03                         byte_11C50:	dc.b 3
00011DA7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011DAC 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011DB1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011DB6 03                         byte_11C60:	dc.b 3
00011DB7 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011DBC 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00011DC1 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011DC6 03                         byte_11C70:	dc.b 3
00011DC7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011DCC 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00011DD1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011DD6 03                         byte_11C80:	dc.b 3
00011DD7 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011DDC 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00011DE1 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011DE6 03                         byte_11C90:	dc.b 3
00011DE7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011DEC 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00011DF1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011DF6 02                         byte_11CA0:	dc.b 2
00011DF7 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011DFC 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011E01 02                         byte_11CAB:	dc.b 2
00011E02 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011E07 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011E0C 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00011E0D E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00011E12 01                         byte_11CBC:	dc.b 1			; fuse
00011E13 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00011E18 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00011E19 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00011E1E 01                         byte_11CC8:	dc.b 1			; fireball
00011E1F FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00011E24                            		even
00011E24                            		even
00011E24                            
00011E24                            ; ===========================================================================
00011E24                            ; ---------------------------------------------------------------------------
00011E24                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00011E24                            ; ---------------------------------------------------------------------------
00011E24                            
00011E24                            Obj60:					; XREF: Obj_Index
00011E24 7000                       		moveq	#0,d0
00011E26 1028 0024                  		move.b	$24(a0),d0
00011E2A 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00011E2E 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00011E32                            ; ===========================================================================
00011E32 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00011E34 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00011E36 0000                       		dc.w Obj60_Display-Obj60_Index
00011E38 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00011E3A 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00011E3C                            ; ===========================================================================
00011E3C                            
00011E3C                            Obj60_Main:				; XREF: Obj60_Index
00011E3C 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00011E44 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00011E4A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011E50 6700                       		beq.s	loc_11D02
00011E52 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00011E58                            
00011E58                            loc_11D02:
00011E58 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011E5E 6600                       		bne.s	loc_11D10
00011E60 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00011E66                            
00011E66                            loc_11D10:
00011E66 0028 0004 0001             		ori.b	#4,1(a0)
00011E6C 117C 0004 0018             		move.b	#4,$18(a0)
00011E72 117C 000B 0020             		move.b	#$B,$20(a0)
00011E78 117C 000C 0019             		move.b	#$C,$19(a0)
00011E7E 7400                       		moveq	#0,d2
00011E80 45E8 0037                  		lea	$37(a0),a2
00011E84 264A                       		movea.l	a2,a3
00011E86 524A                       		addq.w	#1,a2
00011E88 7203                       		moveq	#3,d1
00011E8A                            
00011E8A                            Obj60_MakeOrbs:
00011E8A 6100 BD84                  		bsr.w	SingleObjLoad2
00011E8E 6600                       		bne.s	loc_11D90
00011E90 5213                       		addq.b	#1,(a3)
00011E92 3A09                       		move.w	a1,d5
00011E94 0445 D000                  		subi.w	#-$3000,d5
00011E98 EC4D                       		lsr.w	#6,d5
00011E9A 0245 007F                  		andi.w	#$7F,d5
00011E9E 14C5                       		move.b	d5,(a2)+
00011EA0 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00011EA2 137C 0006 0024             		move.b	#6,$24(a1)
00011EA8 2368 0004 0004             		move.l	4(a0),4(a1)
00011EAE 3368 0002 0002             		move.w	2(a0),2(a1)
00011EB4 0029 0004 0001             		ori.b	#4,1(a1)
00011EBA 137C 0004 0018             		move.b	#4,$18(a1)
00011EC0 137C 0008 0019             		move.b	#8,$19(a1)
00011EC6 137C 0003 001A             		move.b	#3,$1A(a1)
00011ECC 137C 0098 0020             		move.b	#$98,$20(a1)
00011ED2 1342 0026                  		move.b	d2,$26(a1)
00011ED6 0602 0040                  		addi.b	#$40,d2
00011EDA 2348 003C                  		move.l	a0,$3C(a1)
00011EDE 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00011EE2                            
00011EE2                            loc_11D90:
00011EE2 7001                       		moveq	#1,d0
00011EE4 0828 0000 0022             		btst	#0,$22(a0)
00011EEA 6700                       		beq.s	Obj60_Move
00011EEC 4440                       		neg.w	d0
00011EEE                            
00011EEE                            Obj60_Move:
00011EEE 1140 0036                  		move.b	d0,$36(a0)
00011EF2 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00011EF8 5428 0024                  		addq.b	#2,$24(a0)
00011EFC 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00011F02 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00011F08 6700                       		beq.s	locret_11DBC	; if not, branch
00011F0A 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00011F0E                            
00011F0E                            locret_11DBC:
00011F0E 4E75                       		rts	
00011F10                            ; ===========================================================================
00011F10                            
00011F10                            Obj60_ChkSonic:				; XREF: Obj60_Index
00011F10 3038 D008                  		move.w	($FFFFD008).w,d0
00011F14 9068 0008                  		sub.w	8(a0),d0
00011F18 6400                       		bcc.s	loc_11DCA
00011F1A 4440                       		neg.w	d0
00011F1C                            
00011F1C                            loc_11DCA:
00011F1C 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00011F20 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011F22 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011F26 9068 000C                  		sub.w	$C(a0),d0
00011F2A 6400                       		bcc.s	loc_11DDC
00011F2C 4440                       		neg.w	d0
00011F2E                            
00011F2E                            loc_11DDC:
00011F2E 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00011F32 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011F34 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011F38 6600                       		bne.s	Obj60_Animate	; if yes, branch
00011F3A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00011F40                            
00011F40                            Obj60_Animate:
00011F40 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00011F46 6100 88DE                  		bsr.w	AnimateSprite
00011F4A 6000 0000                  		bra.w	Obj60_ChkDel
00011F4E                            ; ===========================================================================
00011F4E                            
00011F4E                            Obj60_Display:				; XREF: Obj60_Index
00011F4E 6100 B7FE                  		bsr.w	SpeedToPos
00011F52                            
00011F52                            Obj60_ChkDel:				; XREF: Obj60_Animate
00011F52 3028 0008                  		move.w	8(a0),d0
00011F56 0240 FF80                  		andi.w	#$FF80,d0
00011F5A 3238 F700                  		move.w	($FFFFF700).w,d1
00011F5E 0441 0080                  		subi.w	#$80,d1
00011F62 0241 FF80                  		andi.w	#$FF80,d1
00011F66 9041                       		sub.w	d1,d0
00011F68 0C40 0280                  		cmpi.w	#$280,d0
00011F6C 6200 0000                  		bhi.w	Obj60_ChkGone
00011F70 6000 B802                  		bra.w	DisplaySprite
00011F74                            ; ===========================================================================
00011F74                            
00011F74                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00011F74 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011F78 7000                       		moveq	#0,d0
00011F7A 1028 0023                  		move.b	$23(a0),d0
00011F7E 6700                       		beq.s	loc_11E34
00011F80 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011F86                            
00011F86                            loc_11E34:
00011F86 45E8 0037                  		lea	$37(a0),a2
00011F8A 7400                       		moveq	#0,d2
00011F8C 141A                       		move.b	(a2)+,d2
00011F8E 5342                       		subq.w	#1,d2
00011F90 6500                       		bcs.s	Obj60_Delete
00011F92                            
00011F92                            loc_11E40:
00011F92 7000                       		moveq	#0,d0
00011F94 101A                       		move.b	(a2)+,d0
00011F96 ED48                       		lsl.w	#6,d0
00011F98 0680 00FF D000             		addi.l	#$FFD000,d0
00011F9E 2240                       		movea.l	d0,a1
00011FA0 6100 B810                  		bsr.w	DeleteObject2
00011FA4 51CA FFEC                  		dbf	d2,loc_11E40
00011FA8                            
00011FA8                            Obj60_Delete:
00011FA8 6000 B806                  		bra.w	DeleteObject
00011FAC                            ; ===========================================================================
00011FAC                            
00011FAC                            Obj60_MoveOrb:				; XREF: Obj60_Index
00011FAC 2268 003C                  		movea.l	$3C(a0),a1
00011FB0 0C11 0060                  		cmpi.b	#$60,0(a1)
00011FB4 6600 B7FA                  		bne.w	DeleteObject
00011FB8 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00011FBE 6600                       		bne.s	Obj60_Circle
00011FC0 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00011FC6 6600                       		bne.s	Obj60_Circle
00011FC8 5428 0024                  		addq.b	#2,$24(a0)
00011FCC 5329 0037                  		subq.b	#1,$37(a1)
00011FD0 6600                       		bne.s	Obj60_FireOrb
00011FD2 5429 0024                  		addq.b	#2,$24(a1)
00011FD6                            
00011FD6                            Obj60_FireOrb:
00011FD6 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00011FDC 0829 0000 0022             		btst	#0,$22(a1)
00011FE2 6700                       		beq.s	Obj60_Display2
00011FE4 4468 0010                  		neg.w	$10(a0)
00011FE8                            
00011FE8                            Obj60_Display2:
00011FE8 6000 B78A                  		bra.w	DisplaySprite
00011FEC                            ; ===========================================================================
00011FEC                            
00011FEC                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00011FEC 1028 0026                  		move.b	$26(a0),d0
00011FF0 4EB9 0000 29DA             		jsr	(CalcSine).l
00011FF6 E841                       		asr.w	#4,d1
00011FF8 D269 0008                  		add.w	8(a1),d1
00011FFC 3141 0008                  		move.w	d1,8(a0)
00012000 E840                       		asr.w	#4,d0
00012002 D069 000C                  		add.w	$C(a1),d0
00012006 3140 000C                  		move.w	d0,$C(a0)
0001200A 1029 0036                  		move.b	$36(a1),d0
0001200E D128 0026                  		add.b	d0,$26(a0)
00012012 6000 B760                  		bra.w	DisplaySprite
00012016                            ; ===========================================================================
00012016                            
00012016                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012016 6100 B736                  		bsr.w	SpeedToPos
0001201A 4A28 0001                  		tst.b	1(a0)
0001201E 6A00 B790                  		bpl.w	DeleteObject
00012022 6000 B750                  		bra.w	DisplaySprite
00012026                            ; ===========================================================================
00012026                            Ani_obj60:
00012026                            	include "_anim\obj60.asm"
00012026                            ; ---------------------------------------------------------------------------
00012026                            ; Animation script - Orbinaut enemy
00012026                            ; ---------------------------------------------------------------------------
00012026 0000                       		dc.w byte_11EDA-Ani_obj60
00012028 0000                       		dc.w byte_11EDE-Ani_obj60
0001202A 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001202E 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012034                            		even
00012034                            		even
00012034                            
00012034                            ; ---------------------------------------------------------------------------
00012034                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012034                            ; ---------------------------------------------------------------------------
00012034                            Map_obj60:
00012034                            	include "_maps\obj60.asm"
00012034                            ; ---------------------------------------------------------------------------
00012034                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012034                            ; ---------------------------------------------------------------------------
00012034 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012038 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001203C 01                         byte_11EEC:	dc.b 1
0001203D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012042 01                         byte_11EF2:	dc.b 1
00012043 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012048 01                         byte_11EF8:	dc.b 1
00012049 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001204E 01                         byte_11EFE:	dc.b 1
0001204F F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012054                            		even
00012054                            		even
00012054                            
00012054                            ; ===========================================================================
00012054                            ; ---------------------------------------------------------------------------
00012054                            ; Object 16 - harpoon (LZ)
00012054                            ; ---------------------------------------------------------------------------
00012054                            
00012054                            Obj16:					; XREF: Obj_Index
00012054 7000                       		moveq	#0,d0
00012056 1028 0024                  		move.b	$24(a0),d0
0001205A 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001205E 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012062                            ; ===========================================================================
00012062 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012064 0000                       		dc.w Obj16_Move-Obj16_Index
00012066 0000                       		dc.w Obj16_Wait-Obj16_Index
00012068                            ; ===========================================================================
00012068                            
00012068                            Obj16_Main:				; XREF: Obj16_Index
00012068 5428 0024                  		addq.b	#2,$24(a0)
0001206C 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012074 317C 03CC 0002             		move.w	#$3CC,2(a0)
0001207A 0028 0004 0001             		ori.b	#4,1(a0)
00012080 117C 0004 0018             		move.b	#4,$18(a0)
00012086 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001208C 117C 0014 0019             		move.b	#$14,$19(a0)
00012092 317C 003C 0030             		move.w	#60,$30(a0)
00012098                            
00012098                            Obj16_Move:				; XREF: Obj16_Index
00012098 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001209E 6100 8786                  		bsr.w	AnimateSprite
000120A2 7000                       		moveq	#0,d0
000120A4 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000120A8 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000120AE 6000 D76C                  		bra.w	MarkObjGone
000120B2                            ; ===========================================================================
000120B2 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000120B8                            ; ===========================================================================
000120B8                            
000120B8                            Obj16_Wait:				; XREF: Obj16_Index
000120B8 5368 0030                  		subq.w	#1,$30(a0)
000120BC 6A00                       		bpl.s	Obj16_ChkDel
000120BE 317C 003C 0030             		move.w	#60,$30(a0)
000120C4 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000120C8 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000120CE                            
000120CE                            Obj16_ChkDel:
000120CE 6000 D74C                  		bra.w	MarkObjGone
000120D2                            ; ===========================================================================
000120D2                            Ani_obj16:
000120D2                            	include "_anim\obj16.asm"
000120D2                            ; ---------------------------------------------------------------------------
000120D2                            ; Animation script - harpoon (LZ)
000120D2                            ; ---------------------------------------------------------------------------
000120D2 0000                       		dc.w byte_11F8A-Ani_obj16
000120D4 0000                       		dc.w byte_11F8E-Ani_obj16
000120D6 0000                       		dc.w byte_11F92-Ani_obj16
000120D8 0000                       		dc.w byte_11F96-Ani_obj16
000120DA 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000120DE 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000120E2 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000120E6 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000120EA                            		even
000120EA                            		even
000120EA                            
000120EA                            ; ---------------------------------------------------------------------------
000120EA                            ; Sprite mappings - harpoon (LZ)
000120EA                            ; ---------------------------------------------------------------------------
000120EA                            Map_obj16:
000120EA                            	include "_maps\obj16.asm"
000120EA                            ; ---------------------------------------------------------------------------
000120EA                            ; Sprite mappings - harpoon (LZ)
000120EA                            ; ---------------------------------------------------------------------------
000120EA 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000120EE 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000120F2 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000120F6 01                         byte_11FA6:	dc.b 1
000120F7 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000120FC 01                         byte_11FAC:	dc.b 1
000120FD FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012102 02                         byte_11FB2:	dc.b 2
00012103 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012108 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001210D 01                         byte_11FBD:	dc.b 1
0001210E F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012113 01                         byte_11FC3:	dc.b 1
00012114 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012119 02                         byte_11FC9:	dc.b 2
0001211A D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001211F F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012124                            		even
00012124                            		even
00012124                            
00012124                            ; ===========================================================================
00012124                            ; ---------------------------------------------------------------------------
00012124                            ; Object 61 - blocks (LZ)
00012124                            ; ---------------------------------------------------------------------------
00012124                            
00012124                            Obj61:					; XREF: Obj_Index
00012124 7000                       		moveq	#0,d0
00012126 1028 0024                  		move.b	$24(a0),d0
0001212A 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001212E 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012132                            ; ===========================================================================
00012132 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012134 0000                       		dc.w Obj61_Action-Obj61_Index
00012136                            
00012136 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012138 200C                       		dc.b $20, $C
0001213A 1010                       		dc.b $10, $10
0001213C 1010                       		dc.b $10, $10
0001213E                            ; ===========================================================================
0001213E                            
0001213E                            Obj61_Main:				; XREF: Obj61_Index
0001213E 5428 0024                  		addq.b	#2,$24(a0)
00012142 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001214A 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012150 117C 0004 0001             		move.b	#4,1(a0)
00012156 117C 0003 0018             		move.b	#3,$18(a0)
0001215C 7000                       		moveq	#0,d0
0001215E 1028 0028                  		move.b	$28(a0),d0
00012162 E648                       		lsr.w	#3,d0
00012164 0240 000E                  		andi.w	#$E,d0
00012168 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001216C 115A 0019                  		move.b	(a2)+,$19(a0)
00012170 1152 0016                  		move.b	(a2),$16(a0)
00012174 E248                       		lsr.w	#1,d0
00012176 1140 001A                  		move.b	d0,$1A(a0)
0001217A 3168 0008 0034             		move.w	8(a0),$34(a0)
00012180 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012186 1028 0028                  		move.b	$28(a0),d0
0001218A 0200 000F                  		andi.b	#$F,d0
0001218E 6700                       		beq.s	Obj61_Action
00012190 0C00 0007                  		cmpi.b	#7,d0
00012194 6700                       		beq.s	Obj61_Action
00012196 117C 0001 0038             		move.b	#1,$38(a0)
0001219C                            
0001219C                            Obj61_Action:				; XREF: Obj61_Index
0001219C 3F28 0008                  		move.w	8(a0),-(sp)
000121A0 7000                       		moveq	#0,d0
000121A2 1028 0028                  		move.b	$28(a0),d0
000121A6 0240 000F                  		andi.w	#$F,d0
000121AA D040                       		add.w	d0,d0
000121AC 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000121B0 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000121B4 381F                       		move.w	(sp)+,d4
000121B6 4A28 0001                  		tst.b	1(a0)
000121BA 6A00                       		bpl.s	Obj61_ChkDel
000121BC 7200                       		moveq	#0,d1
000121BE 1228 0019                  		move.b	$19(a0),d1
000121C2 0641 000B                  		addi.w	#$B,d1
000121C6 7400                       		moveq	#0,d2
000121C8 1428 0016                  		move.b	$16(a0),d2
000121CC 3602                       		move.w	d2,d3
000121CE 5243                       		addq.w	#1,d3
000121D0 6100 D972                  		bsr.w	SolidObject
000121D4 1144 003F                  		move.b	d4,$3F(a0)
000121D8 6100 0000                  		bsr.w	loc_12180
000121DC                            
000121DC                            Obj61_ChkDel:
000121DC 3028 0034                  		move.w	$34(a0),d0
000121E0 0240 FF80                  		andi.w	#$FF80,d0
000121E4 3238 F700                  		move.w	($FFFFF700).w,d1
000121E8 0441 0080                  		subi.w	#$80,d1
000121EC 0241 FF80                  		andi.w	#$FF80,d1
000121F0 9041                       		sub.w	d1,d0
000121F2 0C40 0280                  		cmpi.w	#$280,d0
000121F6 6200 B5B8                  		bhi.w	DeleteObject
000121FA 6000 B578                  		bra.w	DisplaySprite
000121FE                            ; ===========================================================================
000121FE 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012202 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012206 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
0001220A 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001220E                            ; ===========================================================================
0001220E                            
0001220E                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001220E 4E75                       		rts	
00012210                            ; ===========================================================================
00012210                            
00012210                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012210 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012214 6600                       		bne.s	loc_120D6	; if yes, branch
00012216 0828 0003 0022             		btst	#3,$22(a0)
0001221C 6700                       		beq.s	locret_120D4
0001221E 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012224                            
00012224                            locret_120D4:
00012224 4E75                       		rts	
00012226                            ; ===========================================================================
00012226                            
00012226                            loc_120D6:
00012226 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001222A 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001222C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012230 4228 0038                  		clr.b	$38(a0)
00012234 4E75                       		rts	
00012236                            ; ===========================================================================
00012236                            
00012236                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012236 6100 B516                  		bsr.w	SpeedToPos
0001223A 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001223E 6100 0000                  		bsr.w	ObjHitFloor
00012242 4A41                       		tst.w	d1
00012244 6A00 0000                  		bpl.w	locret_12106
00012248 5241                       		addq.w	#1,d1
0001224A D368 000C                  		add.w	d1,$C(a0)
0001224E 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012252 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012256                            
00012256                            locret_12106:
00012256 4E75                       		rts	
00012258                            ; ===========================================================================
00012258                            
00012258                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012258 6100 B4F4                  		bsr.w	SpeedToPos
0001225C 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012260 6100 0000                  		bsr.w	ObjHitCeiling
00012264 4A41                       		tst.w	d1
00012266 6A00 0000                  		bpl.w	locret_12126
0001226A 9368 000C                  		sub.w	d1,$C(a0)
0001226E 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012272 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012276                            
00012276                            locret_12126:
00012276 4E75                       		rts	
00012278                            ; ===========================================================================
00012278                            
00012278                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012278 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001227E 6600                       		bne.s	locret_12138	; if not, branch
00012280 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012284 4228 0038                  		clr.b	$38(a0)
00012288                            
00012288                            locret_12138:
00012288 4E75                       		rts	
0001228A                            ; ===========================================================================
0001228A                            
0001228A                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001228A 3038 F646                  		move.w	($FFFFF646).w,d0
0001228E 9068 000C                  		sub.w	$C(a0),d0
00012292 6700                       		beq.s	locret_1217E
00012294 6400                       		bcc.s	loc_12162
00012296 0C40 FFFE                  		cmpi.w	#-2,d0
0001229A 6C00                       		bge.s	loc_1214E
0001229C 70FE                       		moveq	#-2,d0
0001229E                            
0001229E                            loc_1214E:
0001229E D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000122A2 6100 0000                  		bsr.w	ObjHitCeiling
000122A6 4A41                       		tst.w	d1
000122A8 6A00 0000                  		bpl.w	locret_12160
000122AC 9368 000C                  		sub.w	d1,$C(a0)
000122B0                            
000122B0                            locret_12160:
000122B0 4E75                       		rts	
000122B2                            ; ===========================================================================
000122B2                            
000122B2                            loc_12162:				; XREF: Obj61_Type07
000122B2 0C40 0002                  		cmpi.w	#2,d0
000122B6 6F00                       		ble.s	loc_1216A
000122B8 7002                       		moveq	#2,d0
000122BA                            
000122BA                            loc_1216A:
000122BA D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000122BE 6100 0000                  		bsr.w	ObjHitFloor
000122C2 4A41                       		tst.w	d1
000122C4 6A00 0000                  		bpl.w	locret_1217E
000122C8 5241                       		addq.w	#1,d1
000122CA D368 000C                  		add.w	d1,$C(a0)
000122CE                            
000122CE                            locret_1217E:
000122CE 4E75                       		rts	
000122D0                            ; ===========================================================================
000122D0                            
000122D0                            loc_12180:				; XREF: Obj61_Action
000122D0 4A28 0038                  		tst.b	$38(a0)
000122D4 6700                       		beq.s	locret_121C0
000122D6 0828 0003 0022             		btst	#3,$22(a0)
000122DC 6600                       		bne.s	loc_1219A
000122DE 4A28 003E                  		tst.b	$3E(a0)
000122E2 6700                       		beq.s	locret_121C0
000122E4 5928 003E                  		subq.b	#4,$3E(a0)
000122E8 6000                       		bra.s	loc_121A6
000122EA                            ; ===========================================================================
000122EA                            
000122EA                            loc_1219A:
000122EA 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000122F0 6700                       		beq.s	locret_121C0
000122F2 5828 003E                  		addq.b	#4,$3E(a0)
000122F6                            
000122F6                            loc_121A6:
000122F6 1028 003E                  		move.b	$3E(a0),d0
000122FA 4EB9 0000 29DA             		jsr	(CalcSine).l
00012300 323C 0400                  		move.w	#$400,d1
00012304 C1C1                       		muls.w	d1,d0
00012306 4840                       		swap	d0
00012308 D068 0030                  		add.w	$30(a0),d0
0001230C 3140 000C                  		move.w	d0,$C(a0)
00012310                            
00012310                            locret_121C0:
00012310 4E75                       		rts	
00012312                            ; ===========================================================================
00012312                            ; ---------------------------------------------------------------------------
00012312                            ; Sprite mappings - blocks (LZ)
00012312                            ; ---------------------------------------------------------------------------
00012312                            Map_obj61:
00012312                            	include "_maps\obj61.asm"
00012312                            ; ---------------------------------------------------------------------------
00012312                            ; Sprite mappings - blocks (LZ)
00012312                            ; ---------------------------------------------------------------------------
00012312 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012316 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
0001231A 01                         byte_121CA:	dc.b 1
0001231B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012320 02                         byte_121D0:	dc.b 2
00012321 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012326 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
0001232B 01                         byte_121DB:	dc.b 1
0001232C F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012331 01                         byte_121E1:	dc.b 1
00012332 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012338 00                         		even
00012338 00                         		even
00012338                            
00012338                            ; ===========================================================================
00012338                            ; ---------------------------------------------------------------------------
00012338                            ; Object 62 - gargoyle head (LZ)
00012338                            ; ---------------------------------------------------------------------------
00012338                            
00012338                            Obj62:					; XREF: Obj_Index
00012338 7000                       		moveq	#0,d0
0001233A 1028 0024                  		move.b	$24(a0),d0
0001233E 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012342 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012346 6000 D4D4                  		bra.w	MarkObjGone
0001234A                            ; ===========================================================================
0001234A 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
0001234C 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001234E 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012350 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012352                            
00012352 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001235A                            ; ===========================================================================
0001235A                            
0001235A                            Obj62_Main:				; XREF: Obj62_Index
0001235A 5428 0024                  		addq.b	#2,$24(a0)
0001235E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012366 317C 42E9 0002             		move.w	#$42E9,2(a0)
0001236C 0028 0004 0001             		ori.b	#4,1(a0)
00012372 117C 0003 0018             		move.b	#3,$18(a0)
00012378 117C 0010 0019             		move.b	#$10,$19(a0)
0001237E 1028 0028                  		move.b	$28(a0),d0	; get object type
00012382 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012386 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
0001238C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012392 0228 000F 0028             		andi.b	#$F,$28(a0)
00012398                            
00012398                            Obj62_MakeFire:				; XREF: Obj62_Index
00012398 5328 001E                  		subq.b	#1,$1E(a0)
0001239C 6600                       		bne.s	Obj62_NoFire
0001239E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000123A4 6100 B648                  		bsr.w	ChkObjOnScreen
000123A8 6600                       		bne.s	Obj62_NoFire
000123AA 6100 B84E                  		bsr.w	SingleObjLoad
000123AE 6600                       		bne.s	Obj62_NoFire
000123B0 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000123B4 5829 0024                  		addq.b	#4,$24(a1)
000123B8 3368 0008 0008             		move.w	8(a0),8(a1)
000123BE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000123C4 1368 0001 0001             		move.b	1(a0),1(a1)
000123CA 1368 0022 0022             		move.b	$22(a0),$22(a1)
000123D0                            
000123D0                            Obj62_NoFire:
000123D0 4E75                       		rts	
000123D2                            ; ===========================================================================
000123D2                            
000123D2                            Obj62_FireBall:				; XREF: Obj62_Index
000123D2 5428 0024                  		addq.b	#2,$24(a0)
000123D6 117C 0008 0016             		move.b	#8,$16(a0)
000123DC 117C 0008 0017             		move.b	#8,$17(a0)
000123E2 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000123EA 317C 02E9 0002             		move.w	#$2E9,2(a0)
000123F0 0028 0004 0001             		ori.b	#4,1(a0)
000123F6 117C 0004 0018             		move.b	#4,$18(a0)
000123FC 117C 0098 0020             		move.b	#$98,$20(a0)
00012402 117C 0008 0019             		move.b	#8,$19(a0)
00012408 117C 0002 001A             		move.b	#2,$1A(a0)
0001240E 5068 000C                  		addq.w	#8,$C(a0)
00012412 317C 0200 0010             		move.w	#$200,$10(a0)
00012418 0828 0000 0022             		btst	#0,$22(a0)
0001241E 6600                       		bne.s	Obj62_Sound
00012420 4468 0010                  		neg.w	$10(a0)
00012424                            
00012424                            Obj62_Sound:
00012424 303C 00AE                  		move.w	#$AE,d0
00012428 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001242E                            
0001242E                            Obj62_AniFire:				; XREF: Obj62_Index
0001242E 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012432 0200 0007                  		andi.b	#7,d0
00012436 6600                       		bne.s	Obj62_StopFire
00012438 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
0001243E                            
0001243E                            Obj62_StopFire:
0001243E 6100 B30E                  		bsr.w	SpeedToPos
00012442 0828 0000 0022             		btst	#0,$22(a0)
00012448 6600                       		bne.s	Obj62_StopFire2
0001244A 76F8                       		moveq	#-8,d3
0001244C 6100 0000                  		bsr.w	ObjHitWallLeft
00012450 4A41                       		tst.w	d1
00012452 6B00 B35C                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012456 4E75                       		rts	
00012458                            ; ===========================================================================
00012458                            
00012458                            Obj62_StopFire2:
00012458 7608                       		moveq	#8,d3
0001245A 6100 0000                  		bsr.w	ObjHitWallRight
0001245E 4A41                       		tst.w	d1
00012460 6B00 B34E                  		bmi.w	DeleteObject
00012464 4E75                       		rts	
00012466                            ; ===========================================================================
00012466                            ; ---------------------------------------------------------------------------
00012466                            ; Sprite mappings - gargoyle head (LZ)
00012466                            ; ---------------------------------------------------------------------------
00012466                            Map_obj62:
00012466                            	include "_maps\obj62.asm"
00012466                            ; ---------------------------------------------------------------------------
00012466                            ; Sprite mappings - gargoyle head (LZ)
00012466                            ; ---------------------------------------------------------------------------
00012466 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
0001246A 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001246E 03                         byte_12320:	dc.b 3
0001246F F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012474 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012479 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001247E 01                         byte_12330:	dc.b 1
0001247F FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012484 01                         byte_12336:	dc.b 1
00012485 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
0001248A                            		even
0001248A                            		even
0001248A                            
0001248A                            ; ===========================================================================
0001248A                            ; ---------------------------------------------------------------------------
0001248A                            ; Object 63 - platforms	on a conveyor belt (LZ)
0001248A                            ; ---------------------------------------------------------------------------
0001248A                            
0001248A                            Obj63:					; XREF: Obj_Index
0001248A 7000                       		moveq	#0,d0
0001248C 1028 0024                  		move.b	$24(a0),d0
00012490 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012494 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012498 3028 0030                  		move.w	$30(a0),d0
0001249C 0240 FF80                  		andi.w	#$FF80,d0
000124A0 3238 F700                  		move.w	($FFFFF700).w,d1
000124A4 0441 0080                  		subi.w	#$80,d1
000124A8 0241 FF80                  		andi.w	#$FF80,d1
000124AC 9041                       		sub.w	d1,d0
000124AE 0C40 0280                  		cmpi.w	#$280,d0
000124B2 6200                       		bhi.s	loc_1236A
000124B4                            
000124B4                            Obj63_Display:				; XREF: loc_1236A
000124B4 6000 B2BE                  		bra.w	DisplaySprite
000124B8                            ; ===========================================================================
000124B8                            
000124B8                            loc_1236A:				; XREF: Obj63
000124B8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000124BE 6600                       		bne.s	loc_12378
000124C0 0C40 FF80                  		cmpi.w	#-$80,d0
000124C4 64EE                       		bcc.s	Obj63_Display
000124C6                            
000124C6                            loc_12378:
000124C6 1028 002F                  		move.b	$2F(a0),d0
000124CA 6A00 B2E4                  		bpl.w	DeleteObject
000124CE 0240 007F                  		andi.w	#$7F,d0
000124D2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000124D6 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000124DC 6000 B2D2                  		bra.w	DeleteObject
000124E0                            ; ===========================================================================
000124E0 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000124E2 0000                       		dc.w loc_124B2-Obj63_Index
000124E4 0000                       		dc.w loc_124C2-Obj63_Index
000124E6 0000                       		dc.w loc_124DE-Obj63_Index
000124E8                            ; ===========================================================================
000124E8                            
000124E8                            Obj63_Main:				; XREF: Obj63_Index
000124E8 1028 0028                  		move.b	$28(a0),d0
000124EC 6B00 0000                  		bmi.w	loc_12460
000124F0 5428 0024                  		addq.b	#2,$24(a0)
000124F4 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000124FC 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012502 0028 0004 0001             		ori.b	#4,1(a0)
00012508 117C 0010 0019             		move.b	#$10,$19(a0)
0001250E 117C 0004 0018             		move.b	#4,$18(a0)
00012514 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
0001251A 6600                       		bne.s	loc_123E2
0001251C 5828 0024                  		addq.b	#4,$24(a0)
00012520 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012526 117C 0001 0018             		move.b	#1,$18(a0)
0001252C 6000 0000                  		bra.w	loc_124DE
00012530                            ; ===========================================================================
00012530                            
00012530                            loc_123E2:
00012530 117C 0004 001A             		move.b	#4,$1A(a0)
00012536 7000                       		moveq	#0,d0
00012538 1028 0028                  		move.b	$28(a0),d0
0001253C 3200                       		move.w	d0,d1
0001253E E648                       		lsr.w	#3,d0
00012540 0240 001E                  		andi.w	#$1E,d0
00012544 45FA 0000                  		lea	Obj63_Data(pc),a2
00012548 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001254C 315A 0038                  		move.w	(a2)+,$38(a0)
00012550 315A 0030                  		move.w	(a2)+,$30(a0)
00012554 214A 003C                  		move.l	a2,$3C(a0)
00012558 0241 000F                  		andi.w	#$F,d1
0001255C E549                       		lsl.w	#2,d1
0001255E 1141 0038                  		move.b	d1,$38(a0)
00012562 117C 0004 003A             		move.b	#4,$3A(a0)
00012568 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001256C 6700                       		beq.s	loc_1244C
0001256E 117C 0001 003B             		move.b	#1,$3B(a0)
00012574 4428 003A                  		neg.b	$3A(a0)
00012578 7200                       		moveq	#0,d1
0001257A 1228 0038                  		move.b	$38(a0),d1
0001257E D228 003A                  		add.b	$3A(a0),d1
00012582 B228 0039                  		cmp.b	$39(a0),d1
00012586 6500                       		bcs.s	loc_12448
00012588 1001                       		move.b	d1,d0
0001258A 7200                       		moveq	#0,d1
0001258C 4A00                       		tst.b	d0
0001258E 6A00                       		bpl.s	loc_12448
00012590 1228 0039                  		move.b	$39(a0),d1
00012594 5901                       		subq.b	#4,d1
00012596                            
00012596                            loc_12448:
00012596 1141 0038                  		move.b	d1,$38(a0)
0001259A                            
0001259A                            loc_1244C:
0001259A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000125A0 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000125A6 6100 0000                  		bsr.w	Obj63_ChangeDir
000125AA 6000 0000                  		bra.w	loc_124B2
000125AE                            ; ===========================================================================
000125AE                            
000125AE                            loc_12460:				; XREF: Obj63_Main
000125AE 1140 002F                  		move.b	d0,$2F(a0)
000125B2 0240 007F                  		andi.w	#$7F,d0
000125B6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000125BA 08F2 0000 0000             		bset	#0,(a2,d0.w)
000125C0 6600 B1EE                  		bne.w	DeleteObject
000125C4 D040                       		add.w	d0,d0
000125C6 0240 001E                  		andi.w	#$1E,d0
000125CA 0640 0070                  		addi.w	#$70,d0
000125CE 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000125D4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000125D8 321A                       		move.w	(a2)+,d1
000125DA 2248                       		movea.l	a0,a1
000125DC 6000                       		bra.s	Obj63_MakePtfms
000125DE                            ; ===========================================================================
000125DE                            
000125DE                            Obj63_Loop:
000125DE 6100 B61A                  		bsr.w	SingleObjLoad
000125E2 6600                       		bne.s	loc_124AA
000125E4                            
000125E4                            Obj63_MakePtfms:			; XREF: loc_12460
000125E4 12BC 0063                  		move.b	#$63,0(a1)
000125E8 335A 0008                  		move.w	(a2)+,8(a1)
000125EC 335A 000C                  		move.w	(a2)+,$C(a1)
000125F0 301A                       		move.w	(a2)+,d0
000125F2 1340 0028                  		move.b	d0,$28(a1)
000125F6                            
000125F6                            loc_124AA:
000125F6 51C9 FFE6                  		dbf	d1,Obj63_Loop
000125FA                            
000125FA 588F                       		addq.l	#4,sp
000125FC 4E75                       		rts	
000125FE                            ; ===========================================================================
000125FE                            
000125FE                            loc_124B2:				; XREF: Obj63_Index
000125FE 7200                       		moveq	#0,d1
00012600 1228 0019                  		move.b	$19(a0),d1
00012604 4EB9 0000 758A             		jsr	(PlatformObject).l
0001260A 6000 0000                  		bra.w	sub_12502
0001260E                            ; ===========================================================================
0001260E                            
0001260E                            loc_124C2:				; XREF: Obj63_Index
0001260E 7200                       		moveq	#0,d1
00012610 1228 0019                  		move.b	$19(a0),d1
00012614 4EB9 0000 76FE             		jsr	(ExitPlatform).l
0001261A 3F28 0008                  		move.w	8(a0),-(sp)
0001261E 6100 0000                  		bsr.w	sub_12502
00012622 341F                       		move.w	(sp)+,d2
00012624 4EF9 0000 7C68             		jmp	(MvSonicOnPtfm2).l
0001262A                            ; ===========================================================================
0001262A                            
0001262A                            loc_124DE:				; XREF: Obj63_Index
0001262A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001262E 0240 0003                  		andi.w	#3,d0
00012632 6600                       		bne.s	loc_124FC
00012634 7201                       		moveq	#1,d1
00012636 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001263A 6700                       		beq.s	loc_124F2
0001263C 4401                       		neg.b	d1
0001263E                            
0001263E                            loc_124F2:
0001263E D328 001A                  		add.b	d1,$1A(a0)
00012642 0228 0003 001A             		andi.b	#3,$1A(a0)
00012648                            
00012648                            loc_124FC:
00012648 588F                       		addq.l	#4,sp
0001264A 6000 D1D0                  		bra.w	MarkObjGone
0001264E                            
0001264E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001264E                            
0001264E                            
0001264E                            sub_12502:				; XREF: loc_124B2; loc_124C2
0001264E 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012652 6700                       		beq.s	loc_12520
00012654 4A28 003B                  		tst.b	$3B(a0)
00012658 6600                       		bne.s	loc_12520
0001265A 117C 0001 003B             		move.b	#1,$3B(a0)
00012660 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012666 4428 003A                  		neg.b	$3A(a0)
0001266A 6000                       		bra.s	loc_12534
0001266C                            ; ===========================================================================
0001266C                            
0001266C                            loc_12520:
0001266C 3028 0008                  		move.w	8(a0),d0
00012670 B068 0034                  		cmp.w	$34(a0),d0
00012674 6600                       		bne.s	loc_1256A
00012676 3028 000C                  		move.w	$C(a0),d0
0001267A B068 0036                  		cmp.w	$36(a0),d0
0001267E 6600                       		bne.s	loc_1256A
00012680                            
00012680                            loc_12534:
00012680 7200                       		moveq	#0,d1
00012682 1228 0038                  		move.b	$38(a0),d1
00012686 D228 003A                  		add.b	$3A(a0),d1
0001268A B228 0039                  		cmp.b	$39(a0),d1
0001268E 6500                       		bcs.s	loc_12552
00012690 1001                       		move.b	d1,d0
00012692 7200                       		moveq	#0,d1
00012694 4A00                       		tst.b	d0
00012696 6A00                       		bpl.s	loc_12552
00012698 1228 0039                  		move.b	$39(a0),d1
0001269C 5901                       		subq.b	#4,d1
0001269E                            
0001269E                            loc_12552:
0001269E 1141 0038                  		move.b	d1,$38(a0)
000126A2 2268 003C                  		movea.l	$3C(a0),a1
000126A6 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000126AC 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000126B2 6100 0000                  		bsr.w	Obj63_ChangeDir
000126B6                            
000126B6                            loc_1256A:
000126B6 6100 B096                  		bsr.w	SpeedToPos
000126BA 4E75                       		rts	
000126BC                            ; End of function sub_12502
000126BC                            
000126BC                            
000126BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000126BC                            
000126BC                            
000126BC                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000126BC 7000                       		moveq	#0,d0
000126BE 343C FF00                  		move.w	#-$100,d2
000126C2 3028 0008                  		move.w	8(a0),d0
000126C6 9068 0034                  		sub.w	$34(a0),d0
000126CA 6400                       		bcc.s	loc_12584
000126CC 4440                       		neg.w	d0
000126CE 4442                       		neg.w	d2
000126D0                            
000126D0                            loc_12584:
000126D0 7200                       		moveq	#0,d1
000126D2 363C FF00                  		move.w	#-$100,d3
000126D6 3228 000C                  		move.w	$C(a0),d1
000126DA 9268 0036                  		sub.w	$36(a0),d1
000126DE 6400                       		bcc.s	loc_12598
000126E0 4441                       		neg.w	d1
000126E2 4443                       		neg.w	d3
000126E4                            
000126E4                            loc_12598:
000126E4 B240                       		cmp.w	d0,d1
000126E6 6500                       		bcs.s	loc_125C2
000126E8 3028 0008                  		move.w	8(a0),d0
000126EC 9068 0034                  		sub.w	$34(a0),d0
000126F0 6700                       		beq.s	loc_125AE
000126F2 48C0                       		ext.l	d0
000126F4 E180                       		asl.l	#8,d0
000126F6 81C1                       		divs.w	d1,d0
000126F8 4440                       		neg.w	d0
000126FA                            
000126FA                            loc_125AE:
000126FA 3140 0010                  		move.w	d0,$10(a0)
000126FE 3143 0012                  		move.w	d3,$12(a0)
00012702 4840                       		swap	d0
00012704 3140 000A                  		move.w	d0,$A(a0)
00012708 4268 000E                  		clr.w	$E(a0)
0001270C 4E75                       		rts	
0001270E                            ; ===========================================================================
0001270E                            
0001270E                            loc_125C2:				; XREF: Obj63_ChangeDir
0001270E 3228 000C                  		move.w	$C(a0),d1
00012712 9268 0036                  		sub.w	$36(a0),d1
00012716 6700                       		beq.s	loc_125D4
00012718 48C1                       		ext.l	d1
0001271A E181                       		asl.l	#8,d1
0001271C 83C0                       		divs.w	d0,d1
0001271E 4441                       		neg.w	d1
00012720                            
00012720                            loc_125D4:
00012720 3141 0012                  		move.w	d1,$12(a0)
00012724 3142 0010                  		move.w	d2,$10(a0)
00012728 4841                       		swap	d1
0001272A 3141 000E                  		move.w	d1,$E(a0)
0001272E 4268 000A                  		clr.w	$A(a0)
00012732 4E75                       		rts	
00012734                            ; End of function Obj63_ChangeDir
00012734                            
00012734                            ; ===========================================================================
00012734 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012736 0000                       		dc.w word_12610-Obj63_Data
00012738 0000                       		dc.w word_12628-Obj63_Data
0001273A 0000                       		dc.w word_1263C-Obj63_Data
0001273C 0000                       		dc.w word_12650-Obj63_Data
0001273E 0000                       		dc.w word_12668-Obj63_Data
00012740 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012750 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
0001275C 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
0001276C 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012774 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012788 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001279C 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000127B4 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000127C8                            
000127C8                            ; ---------------------------------------------------------------------------
000127C8                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000127C8                            ; ---------------------------------------------------------------------------
000127C8                            Map_obj63:
000127C8                            	include "_maps\obj63.asm"
000127C8                            ; ---------------------------------------------------------------------------
000127C8                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000127C8                            ; ---------------------------------------------------------------------------
000127C8 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000127CC 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000127D0 0000                       		dc.w byte_1269E-Map_obj63
000127D2 01                         byte_12686:	dc.b 1
000127D3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000127D8 01                         byte_1268C:	dc.b 1
000127D9 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000127DE 01                         byte_12692:	dc.b 1
000127DF F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000127E4 01                         byte_12698:	dc.b 1
000127E5 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000127EA 01                         byte_1269E:	dc.b 1
000127EB F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000127F0                            		even
000127F0                            		even
000127F0                            
000127F0                            ; ===========================================================================
000127F0                            ; ---------------------------------------------------------------------------
000127F0                            ; Object 64 - bubbles (LZ)
000127F0                            ; ---------------------------------------------------------------------------
000127F0                            
000127F0                            Obj64:					; XREF: Obj_Index
000127F0 7000                       		moveq	#0,d0
000127F2 1028 0024                  		move.b	$24(a0),d0
000127F6 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000127FA 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000127FE                            ; ===========================================================================
000127FE 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012800 0000                       		dc.w Obj64_Animate-Obj64_Index
00012802 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012804 0000                       		dc.w Obj64_Display2-Obj64_Index
00012806 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012808 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001280A                            ; ===========================================================================
0001280A                            
0001280A                            Obj64_Main:				; XREF: Obj64_Index
0001280A 5428 0024                  		addq.b	#2,$24(a0)
0001280E 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012816 317C 8348 0002             		move.w	#$8348,2(a0)
0001281C 117C 0084 0001             		move.b	#$84,1(a0)
00012822 117C 0010 0019             		move.b	#$10,$19(a0)
00012828 117C 0001 0018             		move.b	#1,$18(a0)
0001282E 1028 0028                  		move.b	$28(a0),d0	; get object type
00012832 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012834 5028 0024                  		addq.b	#8,$24(a0)
00012838 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001283C 1140 0032                  		move.b	d0,$32(a0)
00012840 1140 0033                  		move.b	d0,$33(a0)
00012844 117C 0006 001C             		move.b	#6,$1C(a0)
0001284A 6000 0000                  		bra.w	Obj64_BblMaker
0001284E                            ; ===========================================================================
0001284E                            
0001284E                            Obj64_Bubble:				; XREF: Obj64_Main
0001284E 1140 001C                  		move.b	d0,$1C(a0)
00012852 3168 0008 0030             		move.w	8(a0),$30(a0)
00012858 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
0001285E 4EB9 0000 29B4             		jsr	(RandomNumber).l
00012864 1140 0026                  		move.b	d0,$26(a0)
00012868                            
00012868                            Obj64_Animate:				; XREF: Obj64_Index
00012868 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001286E 4EB9 0000 A826             		jsr	AnimateSprite
00012874 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001287A 6600                       		bne.s	Obj64_ChkWater
0001287C 117C 0001 002E             		move.b	#1,$2E(a0)
00012882                            
00012882                            Obj64_ChkWater:				; XREF: Obj64_Index
00012882 3038 F646                  		move.w	($FFFFF646).w,d0
00012886 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001288A 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
0001288C                            
0001288C                            Obj64_Burst:				; XREF: Obj64_Wobble
0001288C 117C 0006 0024             		move.b	#6,$24(a0)
00012892 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012896 6000 0000                  		bra.w	Obj64_Display2
0001289A                            ; ===========================================================================
0001289A                            
0001289A                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001289A 1028 0026                  		move.b	$26(a0),d0
0001289E 5228 0026                  		addq.b	#1,$26(a0)
000128A2 0240 007F                  		andi.w	#$7F,d0
000128A6 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000128AC 1031 0000                  		move.b	(a1,d0.w),d0
000128B0 4880                       		ext.w	d0
000128B2 D068 0030                  		add.w	$30(a0),d0
000128B6 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000128BA 4A28 002E                  		tst.b	$2E(a0)
000128BE 6700                       		beq.s	Obj64_Display
000128C0 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000128C4 6700                       		beq.s	Obj64_Display	; if not, branch
000128C6                            
000128C6 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000128CA 303C 00AD                  		move.w	#$AD,d0
000128CE 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000128D4 43F8 D000                  		lea	($FFFFD000).w,a1
000128D8 4269 0010                  		clr.w	$10(a1)
000128DC 4269 0012                  		clr.w	$12(a1)
000128E0 4269 0014                  		clr.w	$14(a1)
000128E4 137C 0015 001C             		move.b	#$15,$1C(a1)
000128EA 337C 0023 003E             		move.w	#$23,$3E(a1)
000128F0 137C 0000 003C             		move.b	#0,$3C(a1)
000128F6 08A9 0005 0022             		bclr	#5,$22(a1)
000128FC 08A9 0004 0022             		bclr	#4,$22(a1)
00012902 0829 0002 0022             		btst	#2,$22(a1)
00012908 6700 FF82                  		beq.w	Obj64_Burst
0001290C 08A9 0002 0022             		bclr	#2,$22(a1)
00012912 137C 0013 0016             		move.b	#$13,$16(a1)
00012918 137C 0009 0017             		move.b	#9,$17(a1)
0001291E 5B69 000C                  		subq.w	#5,$C(a1)
00012922 6000 FF68                  		bra.w	Obj64_Burst
00012926                            ; ===========================================================================
00012926                            
00012926                            Obj64_Display:				; XREF: Obj64_Wobble
00012926 6100 AE26                  		bsr.w	SpeedToPos
0001292A 4A28 0001                  		tst.b	1(a0)
0001292E 6A00                       		bpl.s	Obj64_Delete
00012930 4EFA AE42                  		jmp	DisplaySprite
00012934                            ; ===========================================================================
00012934                            
00012934                            Obj64_Delete:
00012934 4EFA AE7A                  		jmp	DeleteObject
00012938                            ; ===========================================================================
00012938                            
00012938                            Obj64_Display2:				; XREF: Obj64_Index
00012938 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001293E 4EB9 0000 A826             		jsr	AnimateSprite
00012944 4A28 0001                  		tst.b	1(a0)
00012948 6A00                       		bpl.s	Obj64_Delete2
0001294A 4EFA AE28                  		jmp	DisplaySprite
0001294E                            ; ===========================================================================
0001294E                            
0001294E                            Obj64_Delete2:
0001294E 4EFA AE60                  		jmp	DeleteObject
00012952                            ; ===========================================================================
00012952                            
00012952                            Obj64_Delete3:				; XREF: Obj64_Index
00012952 6000 AE5C                  		bra.w	DeleteObject
00012956                            ; ===========================================================================
00012956                            
00012956                            Obj64_BblMaker:				; XREF: Obj64_Index
00012956 4A68 0036                  		tst.w	$36(a0)
0001295A 6600                       		bne.s	loc_12874
0001295C 3038 F646                  		move.w	($FFFFF646).w,d0
00012960 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012964 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012968 4A28 0001                  		tst.b	1(a0)
0001296C 6A00 0000                  		bpl.w	Obj64_ChkDel
00012970 5368 0038                  		subq.w	#1,$38(a0)
00012974 6A00 0000                  		bpl.w	loc_12914
00012978 317C 0001 0036             		move.w	#1,$36(a0)
0001297E                            
0001297E                            loc_1283A:
0001297E 4EB9 0000 29B4             		jsr	(RandomNumber).l
00012984 3200                       		move.w	d0,d1
00012986 0240 0007                  		andi.w	#7,d0
0001298A 0C40 0006                  		cmpi.w	#6,d0
0001298E 64EE                       		bcc.s	loc_1283A
00012990                            
00012990 1140 0034                  		move.b	d0,$34(a0)
00012994 0241 000C                  		andi.w	#$C,d1
00012998 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001299E D2C1                       		adda.w	d1,a1
000129A0 2149 003C                  		move.l	a1,$3C(a0)
000129A4 5328 0032                  		subq.b	#1,$32(a0)
000129A8 6A00                       		bpl.s	loc_12872
000129AA 1168 0033 0032             		move.b	$33(a0),$32(a0)
000129B0 08E8 0007 0036             		bset	#7,$36(a0)
000129B6                            
000129B6                            loc_12872:
000129B6 6000                       		bra.s	loc_1287C
000129B8                            ; ===========================================================================
000129B8                            
000129B8                            loc_12874:				; XREF: Obj64_BblMaker
000129B8 5368 0038                  		subq.w	#1,$38(a0)
000129BC 6A00 0000                  		bpl.w	loc_12914
000129C0                            
000129C0                            loc_1287C:
000129C0 4EB9 0000 29B4             		jsr	(RandomNumber).l
000129C6 0240 001F                  		andi.w	#$1F,d0
000129CA 3140 0038                  		move.w	d0,$38(a0)
000129CE 6100 B22A                  		bsr.w	SingleObjLoad
000129D2 6600                       		bne.s	loc_128F8
000129D4 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000129D8 3368 0008 0008             		move.w	8(a0),8(a1)
000129DE 4EB9 0000 29B4             		jsr	(RandomNumber).l
000129E4 0240 000F                  		andi.w	#$F,d0
000129E8 5140                       		subq.w	#8,d0
000129EA D169 0008                  		add.w	d0,8(a1)
000129EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000129F4 7000                       		moveq	#0,d0
000129F6 1028 0034                  		move.b	$34(a0),d0
000129FA 2468 003C                  		movea.l	$3C(a0),a2
000129FE 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012A04 0828 0007 0036             		btst	#7,$36(a0)
00012A0A 6700                       		beq.s	loc_128F8
00012A0C 4EB9 0000 29B4             		jsr	(RandomNumber).l
00012A12 0240 0003                  		andi.w	#3,d0
00012A16 6600                       		bne.s	loc_128E4
00012A18 08E8 0006 0036             		bset	#6,$36(a0)
00012A1E 6600                       		bne.s	loc_128F8
00012A20 137C 0002 0028             		move.b	#2,$28(a1)
00012A26                            
00012A26                            loc_128E4:
00012A26 4A28 0034                  		tst.b	$34(a0)
00012A2A 6600                       		bne.s	loc_128F8
00012A2C 08E8 0006 0036             		bset	#6,$36(a0)
00012A32 6600                       		bne.s	loc_128F8
00012A34 137C 0002 0028             		move.b	#2,$28(a1)
00012A3A                            
00012A3A                            loc_128F8:
00012A3A 5328 0034                  		subq.b	#1,$34(a0)
00012A3E 6A00                       		bpl.s	loc_12914
00012A40 4EB9 0000 29B4             		jsr	(RandomNumber).l
00012A46 0240 007F                  		andi.w	#$7F,d0
00012A4A 0640 0080                  		addi.w	#$80,d0
00012A4E D168 0038                  		add.w	d0,$38(a0)
00012A52 4268 0036                  		clr.w	$36(a0)
00012A56                            
00012A56                            loc_12914:
00012A56 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012A5C 4EB9 0000 A826             		jsr	AnimateSprite
00012A62                            
00012A62                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012A62 3028 0008                  		move.w	8(a0),d0
00012A66 0240 FF80                  		andi.w	#$FF80,d0
00012A6A 3238 F700                  		move.w	($FFFFF700).w,d1
00012A6E 0441 0080                  		subi.w	#$80,d1
00012A72 0241 FF80                  		andi.w	#$FF80,d1
00012A76 9041                       		sub.w	d1,d0
00012A78 0C40 0280                  		cmpi.w	#$280,d0
00012A7C 6200 AD32                  		bhi.w	DeleteObject
00012A80 3038 F646                  		move.w	($FFFFF646).w,d0
00012A84 B068 000C                  		cmp.w	$C(a0),d0
00012A88 6500 ACEA                  		bcs.w	DisplaySprite
00012A8C 4E75                       		rts	
00012A8E                            ; ===========================================================================
00012A8E                            ; bubble production sequence
00012A8E                            
00012A8E                            ; 0 = small bubble, 1 =	large bubble
00012A8E                            
00012A8E 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012AA0                            
00012AA0                            ; ===========================================================================
00012AA0                            
00012AA0                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012AA0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012AA4 6B00                       		bmi.s	loc_12998
00012AA6 43F8 D000                  		lea	($FFFFD000).w,a1
00012AAA 3029 0008                  		move.w	8(a1),d0
00012AAE 3228 0008                  		move.w	8(a0),d1
00012AB2 0441 0010                  		subi.w	#$10,d1
00012AB6 B240                       		cmp.w	d0,d1
00012AB8 6400                       		bcc.s	loc_12998
00012ABA 0641 0020                  		addi.w	#$20,d1
00012ABE B240                       		cmp.w	d0,d1
00012AC0 6500                       		bcs.s	loc_12998
00012AC2 3029 000C                  		move.w	$C(a1),d0
00012AC6 3228 000C                  		move.w	$C(a0),d1
00012ACA B240                       		cmp.w	d0,d1
00012ACC 6400                       		bcc.s	loc_12998
00012ACE 0641 0010                  		addi.w	#$10,d1
00012AD2 B240                       		cmp.w	d0,d1
00012AD4 6500                       		bcs.s	loc_12998
00012AD6 7001                       		moveq	#1,d0
00012AD8 4E75                       		rts	
00012ADA                            ; ===========================================================================
00012ADA                            
00012ADA                            loc_12998:
00012ADA 7000                       		moveq	#0,d0
00012ADC 4E75                       		rts	
00012ADE                            ; ===========================================================================
00012ADE                            Ani_obj64:
00012ADE                            	include "_anim\obj64.asm"
00012ADE                            ; ---------------------------------------------------------------------------
00012ADE                            ; Animation script - bubbles (LZ)
00012ADE                            ; ---------------------------------------------------------------------------
00012ADE 0000                       		dc.w byte_129AA-Ani_obj64
00012AE0 0000                       		dc.w byte_129B0-Ani_obj64
00012AE2 0000                       		dc.w byte_129B6-Ani_obj64
00012AE4 0000                       		dc.w byte_129BE-Ani_obj64
00012AE6 0000                       		dc.w byte_129BE-Ani_obj64
00012AE8 0000                       		dc.w byte_129C0-Ani_obj64
00012AEA 0000                       		dc.w byte_129C6-Ani_obj64
00012AEC 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012AF2 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012AF8 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012B00 04FC                       byte_129BE:	dc.b 4,	$FC
00012B02 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012B08 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012B0E 00                         		even
00012B0E 00                         		even
00012B0E                            
00012B0E                            ; ---------------------------------------------------------------------------
00012B0E                            ; Sprite mappings - bubbles (LZ)
00012B0E                            ; ---------------------------------------------------------------------------
00012B0E                            Map_obj64:
00012B0E                            	include "_maps\obj64.asm"
00012B0E                            ; ---------------------------------------------------------------------------
00012B0E                            ; Sprite mappings - bubbles (LZ)
00012B0E                            ; ---------------------------------------------------------------------------
00012B0E 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012B12 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012B16 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012B1A 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012B1E 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012B22 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012B26 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012B2A 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012B2E 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012B32 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012B36 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012B3A 0000                       		dc.w byte_12A9C-Map_obj64
00012B3C 01                         byte_129FA:	dc.b 1
00012B3D FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012B42 01                         byte_12A00:	dc.b 1
00012B43 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012B48 01                         byte_12A06:	dc.b 1
00012B49 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012B4E 01                         byte_12A0C:	dc.b 1
00012B4F F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012B54 01                         byte_12A12:	dc.b 1
00012B55 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012B5A 01                         byte_12A18:	dc.b 1
00012B5B F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012B60 01                         byte_12A1E:	dc.b 1
00012B61 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012B66 04                         byte_12A24:	dc.b 4
00012B67 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012B6C F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012B71 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012B76 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012B7B 04                         byte_12A39:	dc.b 4
00012B7C F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012B81 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012B86 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012B8B 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012B90 01                         byte_12A4E:	dc.b 1
00012B91 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012B96 01                         byte_12A54:	dc.b 1
00012B97 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012B9C 01                         byte_12A5A:	dc.b 1
00012B9D F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012BA2 01                         byte_12A60:	dc.b 1
00012BA3 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012BA8 01                         byte_12A66:	dc.b 1
00012BA9 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012BAE 01                         byte_12A6C:	dc.b 1
00012BAF F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012BB4 01                         byte_12A72:	dc.b 1
00012BB5 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012BBA 01                         byte_12A78:	dc.b 1
00012BBB F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012BC0 01                         byte_12A7E:	dc.b 1
00012BC1 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012BC6 01                         byte_12A84:	dc.b 1
00012BC7 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012BCC 01                         byte_12A8A:	dc.b 1
00012BCD F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012BD2 01                         byte_12A90:	dc.b 1
00012BD3 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00012BD8 01                         byte_12A96:	dc.b 1
00012BD9 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012BDE 00                         byte_12A9C:	dc.b 0
00012BE0 00                         		even
00012BE0 00                         		even
00012BE0                            
00012BE0                            ; ===========================================================================
00012BE0                            ; ---------------------------------------------------------------------------
00012BE0                            ; Object 65 - waterfalls (LZ)
00012BE0                            ; ---------------------------------------------------------------------------
00012BE0                            
00012BE0                            Obj65:					; XREF: Obj_Index
00012BE0 7000                       		moveq	#0,d0
00012BE2 1028 0024                  		move.b	$24(a0),d0
00012BE6 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012BEA 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00012BEE                            ; ===========================================================================
00012BEE 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00012BF0 0000                       		dc.w Obj65_Animate-Obj65_Index
00012BF2 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00012BF4 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00012BF6 0000                       		dc.w loc_12B36-Obj65_Index
00012BF8                            ; ===========================================================================
00012BF8                            
00012BF8                            Obj65_Main:				; XREF: Obj65_Index
00012BF8 5828 0024                  		addq.b	#4,$24(a0)
00012BFC 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00012C04 317C 4259 0002             		move.w	#$4259,2(a0)
00012C0A 0028 0004 0001             		ori.b	#4,1(a0)
00012C10 117C 0018 0019             		move.b	#$18,$19(a0)
00012C16 117C 0001 0018             		move.b	#1,$18(a0)
00012C1C 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C20 6A00                       		bpl.s	loc_12AE6
00012C22 08E8 0007 0002             		bset	#7,2(a0)
00012C28                            
00012C28                            loc_12AE6:
00012C28 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00012C2C 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00012C30 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00012C34 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00012C36 4228 0018                  		clr.b	$18(a0)
00012C3A 5528 0024                  		subq.b	#2,$24(a0)
00012C3E 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00012C44 6700                       		beq.s	loc_12B0A	; if not, branch
00012C46 117C 0006 0024             		move.b	#6,$24(a0)
00012C4C                            
00012C4C                            loc_12B0A:
00012C4C 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00012C52 6700                       		beq.s	Obj65_Animate	; if not, branch
00012C54 117C 0008 0024             		move.b	#8,$24(a0)
00012C5A                            
00012C5A                            Obj65_Animate:				; XREF: Obj65_Index
00012C5A 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00012C60 4EB9 0000 A826             		jsr	AnimateSprite
00012C66                            
00012C66                            Obj65_ChkDel:				; XREF: Obj65_Index
00012C66 6000 CBB4                  		bra.w	MarkObjGone
00012C6A                            ; ===========================================================================
00012C6A                            
00012C6A                            Obj65_FixHeight:			; XREF: Obj65_Index
00012C6A 3038 F646                  		move.w	($FFFFF646).w,d0
00012C6E 0440 0010                  		subi.w	#$10,d0
00012C72 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00012C76 60E2                       		bra.s	Obj65_Animate
00012C78                            ; ===========================================================================
00012C78                            
00012C78                            loc_12B36:				; XREF: Obj65_Index
00012C78 08A8 0007 0002             		bclr	#7,2(a0)
00012C7E 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00012C84 6600                       		bne.s	Obj65_Animate2
00012C86 08E8 0007 0002             		bset	#7,2(a0)
00012C8C                            
00012C8C                            Obj65_Animate2:
00012C8C 60CC                       		bra.s	Obj65_Animate
00012C8E                            ; ===========================================================================
00012C8E                            Ani_obj65:
00012C8E                            	include "_anim\obj65.asm"
00012C8E                            ; ---------------------------------------------------------------------------
00012C8E                            ; Animation script - waterfall (LZ)
00012C8E                            ; ---------------------------------------------------------------------------
00012C8E 0000                       		dc.w byte_12B4E-Ani_obj65
00012C90 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00012C96 00                         		even
00012C96 00                         		even
00012C96                            
00012C96                            ; ---------------------------------------------------------------------------
00012C96                            ; Sprite mappings - waterfalls (LZ)
00012C96                            ; ---------------------------------------------------------------------------
00012C96                            Map_obj65:
00012C96                            	include "_maps\obj65.asm"
00012C96                            ; ---------------------------------------------------------------------------
00012C96                            ; Sprite mappings - waterfalls (LZ)
00012C96                            ; ---------------------------------------------------------------------------
00012C96 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00012C9A 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00012C9E 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00012CA2 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00012CA6 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00012CAA 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00012CAE 01                         byte_12B6C:	dc.b 1
00012CAF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00012CB4 02                         byte_12B72:	dc.b 2
00012CB5 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00012CBA 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00012CBF 02                         byte_12B7D:	dc.b 2
00012CC0 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012CC5 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012CCA 01                         byte_12B88:	dc.b 1
00012CCB F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00012CD0 02                         byte_12B8E:	dc.b 2
00012CD1 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012CD6 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012CDB 01                         byte_12B99:	dc.b 1
00012CDC F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00012CE1 01                         byte_12B9F:	dc.b 1
00012CE2 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00012CE7 01                         byte_12BA5:	dc.b 1
00012CE8 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00012CED 02                         byte_12BAB:	dc.b 2
00012CEE F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00012CF3 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00012CF8 02                         byte_12BB6:	dc.b 2
00012CF9 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00012CFE F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00012D03 02                         byte_12BC1:	dc.b 2
00012D04 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00012D09 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00012D0E 02                         byte_12BCC:	dc.b 2
00012D0F F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00012D14 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00012D1A 00                         		even
00012D1A 00                         		even
00012D1A                            
00012D1A                            ; ===========================================================================
00012D1A                            ; ---------------------------------------------------------------------------
00012D1A                            ; Object 01 - Sonic
00012D1A                            ; ---------------------------------------------------------------------------
00012D1A                            
00012D1A                            Obj01:					; XREF: Obj_Index
00012D1A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00012D1E 6700                       		beq.s	Obj01_Normal	; if not, branch
00012D20 4EF9 0000 0000             		jmp	DebugMode
00012D26                            ; ===========================================================================
00012D26                            
00012D26                            Obj01_Normal:
00012D26 7000                       		moveq	#0,d0
00012D28 1028 0024                  		move.b	$24(a0),d0
00012D2C 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00012D30 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00012D34                            ; ===========================================================================
00012D34 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00012D36 0000                       		dc.w Obj01_Control-Obj01_Index
00012D38 0000                       		dc.w Obj01_Hurt-Obj01_Index
00012D3A 0000                       		dc.w Obj01_Death-Obj01_Index
00012D3C 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00012D3E                            ; ===========================================================================
00012D3E                            
00012D3E                            Obj01_Main:				; XREF: Obj01_Index
00012D3E 5428 0024                  		addq.b	#2,$24(a0)
00012D42 117C 0013 0016             		move.b	#$13,$16(a0)
00012D48 117C 0009 0017             		move.b	#9,$17(a0)
00012D4E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00012D56 317C 0780 0002             		move.w	#$780,2(a0)
00012D5C 117C 0002 0018             		move.b	#2,$18(a0)
00012D62 117C 0018 0019             		move.b	#$18,$19(a0)
00012D68 117C 0004 0001             		move.b	#4,1(a0)
00012D6E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00012D74 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00012D7A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00012D80                            
00012D80                            Obj01_Control:				; XREF: Obj01_Index
00012D80 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00012D84 6700                       		beq.s	loc_12C58	; if not, branch
00012D86 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00012D8C 6700                       		beq.s	loc_12C58	; if not, branch
00012D8E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00012D94 4238 F7CC                  		clr.b	($FFFFF7CC).w
00012D98 4E75                       		rts	
00012D9A                            ; ===========================================================================
00012D9A                            
00012D9A                            loc_12C58:
00012D9A 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00012D9E 6600                       		bne.s	loc_12C64	; if yes, branch
00012DA0 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00012DA6                            
00012DA6                            loc_12C64:
00012DA6 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00012DAC 6600                       		bne.s	loc_12C7E	; if yes, branch
00012DAE 7000                       		moveq	#0,d0
00012DB0 1028 0022                  		move.b	$22(a0),d0
00012DB4 0240 0006                  		andi.w	#6,d0
00012DB8 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00012DBC 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00012DC0                            
00012DC0                            loc_12C7E:
00012DC0 6100                       		bsr.s	Sonic_Display
00012DC2 6100 0000                  		bsr.w	Sonic_RecordPos
00012DC6 6100 0000                  		bsr.w	Sonic_Water
00012DCA 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00012DD0 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00012DD6 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00012DDA 6700                       		beq.s	loc_12CA6
00012DDC 4A28 001C                  		tst.b	$1C(a0)
00012DE0 6600                       		bne.s	loc_12CA6
00012DE2 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00012DE8                            
00012DE8                            loc_12CA6:
00012DE8 6100 0000                  		bsr.w	Sonic_Animate
00012DEC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012DF0 6B00                       		bmi.s	loc_12CB6
00012DF2 4EB9 0000 0000             		jsr	TouchResponse
00012DF8                            
00012DF8                            loc_12CB6:
00012DF8 6100 0000                  		bsr.w	Sonic_Loops
00012DFC 6100 0000                  		bsr.w	LoadSonicDynPLC
00012E00 4E75                       		rts	
00012E02                            ; ===========================================================================
00012E02 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00012E04 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00012E06 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00012E08 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00012E0A                            ; ---------------------------------------------------------------------------
00012E0A                            ; Music	to play	after invincibility wears off
00012E0A                            ; ---------------------------------------------------------------------------
00012E0A                            ; ===========================================================================
00012E0A                            
00012E0A                            Sonic_Display:				; XREF: loc_12C7E
00012E0A 3028 0030                  		move.w	$30(a0),d0
00012E0E 6700                       		beq.s	Obj01_Display
00012E10 5368 0030                  		subq.w	#1,$30(a0)
00012E14 E648                       		lsr.w	#3,d0
00012E16 6400                       		bcc.s	Obj01_ChkInvin
00012E18                            
00012E18                            Obj01_Display:
00012E18 4EBA A95A                  		jsr	DisplaySprite
00012E1C                            
00012E1C                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00012E1C                             
00012E1C                            Obj01_ChkInvin:
00012E1C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00012E20 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00012E24 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00012E28 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00012E2C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00012E30 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00012E34 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00012E38 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00012E3C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00012E42 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00012E46 7000                       		moveq	#0,d0
00012E48 1038 FE10                  		move.b	($FFFFFE10).w,d0
00012E4C                             
00012E4C 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00012E52 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00012E54 43F9 0000 3798             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00012E5A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00012E5C                             
00012E5C                            Obj01_GetBgm2:
00012E5C 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00012E62 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00012E64 43F9 0000 37A0             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00012E6A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00012E6C                             
00012E6C                            Obj01_GetBgm3:
00012E6C 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00012E72 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00012E74 43F9 0000 37A6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00012E7A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00012E7C                             
00012E7C                            Obj01_GetBgm4:
00012E7C 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00012E82 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00012E84 43F9 0000 37AC             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00012E8A                             
00012E8A                            Obj01_PlayMusic:
00012E8A 1031 0000                  		move.b	(a1,d0.w),d0
00012E8E 4EB9 0000 1396             		jsr	(PlaySound).l	; play normal music
00012E94                             
00012E94                            ; NineKode ends here.
00012E94                            
00012E94                            Obj01_RmvInvin:
00012E94 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00012E9A                            
00012E9A                            Obj01_ChkShoes:
00012E9A 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00012E9E 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00012EA0 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00012EA4 6700                       		beq.s	Obj01_ExitChk
00012EA6 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00012EAA 6600                       		bne.s	Obj01_ExitChk
00012EAC 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012EB2 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012EB8 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012EBE 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00012EC4 303C 00E3                  		move.w	#$E3,d0
00012EC8 4EF9 0000 1396             		jmp	(PlaySound).l	; run music at normal speed
00012ECE                            ; ===========================================================================
00012ECE                            
00012ECE                            Obj01_ExitChk:
00012ECE 4E75                       		rts	
00012ED0                            
00012ED0                            ; ---------------------------------------------------------------------------
00012ED0                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00012ED0                            ; ---------------------------------------------------------------------------
00012ED0                            
00012ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012ED0                            
00012ED0                            
00012ED0                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00012ED0 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00012ED4 43F8 CB00                  		lea	($FFFFCB00).w,a1
00012ED8 43F1 0000                  		lea	(a1,d0.w),a1
00012EDC 32E8 0008                  		move.w	8(a0),(a1)+
00012EE0 32E8 000C                  		move.w	$C(a0),(a1)+
00012EE4 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00012EE8 4E75                       		rts	
00012EEA                            ; End of function Sonic_RecordPos
00012EEA                            
00012EEA                            ; ---------------------------------------------------------------------------
00012EEA                            ; Subroutine for Sonic when he's underwater
00012EEA                            ; ---------------------------------------------------------------------------
00012EEA                            
00012EEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012EEA                            
00012EEA                            
00012EEA                            Sonic_Water:				; XREF: loc_12C7E
00012EEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00012EF0 6700                       		beq.s	Obj01_InWater	; if yes, branch
00012EF2                            
00012EF2                            locret_12D80:
00012EF2 4E75                       		rts	
00012EF4                            ; ===========================================================================
00012EF4                            
00012EF4                            Obj01_InWater:
00012EF4 3038 F646                  		move.w	($FFFFF646).w,d0
00012EF8 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00012EFC 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00012EFE 08E8 0006 0022             		bset	#6,$22(a0)
00012F04 66EC                       		bne.s	locret_12D80
00012F06 6100 0000                  		bsr.w	ResumeMusic
00012F0A 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00012F10 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00012F16 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00012F1C 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00012F22 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00012F28 E0E8 0010                  		asr	$10(a0)
00012F2C E0E8 0012                  		asr	$12(a0)
00012F30 E0E8 0012                  		asr	$12(a0)
00012F34 67BC                       		beq.s	locret_12D80
00012F36 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012F3C 303C 00AA                  		move.w	#$AA,d0
00012F40 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play splash sound
00012F46                            ; ===========================================================================
00012F46                            
00012F46                            Obj01_OutWater:
00012F46 08A8 0006 0022             		bclr	#6,$22(a0)
00012F4C 67A4                       		beq.s	locret_12D80
00012F4E 6100 0000                  		bsr.w	ResumeMusic
00012F52 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012F58 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012F5E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012F64 E1E8 0012                  		asl	$12(a0)
00012F68 6700 FF88                  		beq.w	locret_12D80
00012F6C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012F72 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00012F78 6E00                       		bgt.s	loc_12E0E
00012F7A 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00012F80                            
00012F80                            loc_12E0E:
00012F80 303C 00AA                  		move.w	#$AA,d0
00012F84 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play splash sound
00012F8A                            ; End of function Sonic_Water
00012F8A                            
00012F8A                            ; ===========================================================================
00012F8A                            ; ---------------------------------------------------------------------------
00012F8A                            ; Modes	for controlling	Sonic
00012F8A                            ; ---------------------------------------------------------------------------
00012F8A                            
00012F8A                            Obj01_MdNormal:				; XREF: Obj01_Modes
00012F8A 6100 0000                  		bsr.w	Sonic_Jump
00012F8E 6100 0000                  		bsr.w	Sonic_SlopeResist
00012F92 6100 0000                  		bsr.w	Sonic_Move
00012F96 6100 0000                  		bsr.w	Sonic_Roll
00012F9A 6100 0000                  		bsr.w	Sonic_LevelBound
00012F9E 4EBA A7AE                  		jsr	SpeedToPos
00012FA2 6100 0000                  		bsr.w	Sonic_AnglePos
00012FA6 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012FAA 4E75                       		rts	
00012FAC                            ; ===========================================================================
00012FAC                            
00012FAC                            Obj01_MdJump:				; XREF: Obj01_Modes
00012FAC 6100 0000                  		bsr.w	Sonic_JumpHeight
00012FB0 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012FB4 6100 0000                  		bsr.w	Sonic_LevelBound
00012FB8 4EBA A768                  		jsr	ObjectFall
00012FBC 0828 0006 0022             		btst	#6,$22(a0)
00012FC2 6700                       		beq.s	loc_12E5C
00012FC4 0468 0028 0012             		subi.w	#$28,$12(a0)
00012FCA                            
00012FCA                            loc_12E5C:
00012FCA 6100 0000                  		bsr.w	Sonic_JumpAngle
00012FCE 6100 0000                  		bsr.w	Sonic_Floor
00012FD2 4E75                       		rts	
00012FD4                            ; ===========================================================================
00012FD4                            
00012FD4                            Obj01_MdRoll:				; XREF: Obj01_Modes
00012FD4 6100 0000                  		bsr.w	Sonic_Jump
00012FD8 6100 0000                  		bsr.w	Sonic_RollRepel
00012FDC 6100 0000                  		bsr.w	Sonic_RollSpeed
00012FE0 6100 0000                  		bsr.w	Sonic_LevelBound
00012FE4 4EBA A768                  		jsr	SpeedToPos
00012FE8 6100 0000                  		bsr.w	Sonic_AnglePos
00012FEC 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012FF0 4E75                       		rts	
00012FF2                            ; ===========================================================================
00012FF2                            
00012FF2                            Obj01_MdJump2:				; XREF: Obj01_Modes
00012FF2 6100 0000                  		bsr.w	Sonic_JumpHeight
00012FF6 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012FFA 6100 0000                  		bsr.w	Sonic_LevelBound
00012FFE 4EBA A722                  		jsr	ObjectFall
00013002 0828 0006 0022             		btst	#6,$22(a0)
00013008 6700                       		beq.s	loc_12EA6
0001300A 0468 0028 0012             		subi.w	#$28,$12(a0)
00013010                            
00013010                            loc_12EA6:
00013010 6100 0000                  		bsr.w	Sonic_JumpAngle
00013014 6100 0000                  		bsr.w	Sonic_Floor
00013018 4E75                       		rts	
0001301A                            ; ---------------------------------------------------------------------------
0001301A                            ; Subroutine to	make Sonic walk/run
0001301A                            ; ---------------------------------------------------------------------------
0001301A                            
0001301A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001301A                            
0001301A                            
0001301A                            Sonic_Move:				; XREF: Obj01_MdNormal
0001301A 3C38 F760                  		move.w	($FFFFF760).w,d6
0001301E 3A38 F762                  		move.w	($FFFFF762).w,d5
00013022 3838 F764                  		move.w	($FFFFF764).w,d4
00013026 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001302A 6600 0000                  		bne.w	loc_12FEE
0001302E 4A68 003E                  		tst.w	$3E(a0)
00013032 6600 0000                  		bne.w	Obj01_ResetScr
00013036 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001303C 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001303E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013044 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013046 6100 0000                  		bsr.w	Sonic_MoveLeft
0001304A                            
0001304A                            Obj01_NotLeft:
0001304A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013050 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013052 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013058 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
0001305A 6100 0000                  		bsr.w	Sonic_MoveLeft
0001305E 6000                       		bra.s	Obj01_NotRight
00013060                            
00013060                            Obj01_MoveRight:
00013060 6100 0000                  		bsr.w	Sonic_MoveRight
00013064                            
00013064                            Obj01_NotRight:
00013064 1028 0026                  		move.b	$26(a0),d0
00013068 0600 0020                  		addi.b	#$20,d0
0001306C 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013070 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013074 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013078 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001307C 08A8 0005 0022             		bclr	#5,$22(a0)
00013082 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013088 0828 0003 0022             		btst	#3,$22(a0)
0001308E 6700                       		beq.s	Sonic_Balance
00013090 7000                       		moveq	#0,d0
00013092 1028 003D                  		move.b	$3D(a0),d0
00013096 ED48                       		lsl.w	#6,d0
00013098 43F8 D000                  		lea	($FFFFD000).w,a1
0001309C 43F1 0000                  		lea	(a1,d0.w),a1
000130A0 4A29 0022                  		tst.b	$22(a1)
000130A4 6B00                       		bmi.s	Sonic_LookUp
000130A6 7200                       		moveq	#0,d1
000130A8 1229 0019                  		move.b	$19(a1),d1
000130AC 3401                       		move.w	d1,d2
000130AE D442                       		add.w	d2,d2
000130B0 5942                       		subq.w	#4,d2
000130B2 D268 0008                  		add.w	8(a0),d1
000130B6 9269 0008                  		sub.w	8(a1),d1
000130BA 0C41 0004                  		cmpi.w	#4,d1
000130BE 6D00                       		blt.s	loc_12F6A
000130C0 B242                       		cmp.w	d2,d1
000130C2 6C00                       		bge.s	loc_12F5A
000130C4 6000                       		bra.s	Sonic_LookUp
000130C6                            ; ===========================================================================
000130C6                            
000130C6                            Sonic_Balance:
000130C6 4EB9 0000 0000             		jsr	ObjHitFloor
000130CC 0C41 000C                  		cmpi.w	#$C,d1
000130D0 6D00                       		blt.s	Sonic_LookUp
000130D2 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000130D8 6600                       		bne.s	loc_12F62
000130DA                            
000130DA                            loc_12F5A:
000130DA 08A8 0000 0022             		bclr	#0,$22(a0)
000130E0 6000                       		bra.s	loc_12F70
000130E2                            ; ===========================================================================
000130E2                            
000130E2                            loc_12F62:
000130E2 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000130E8 6600                       		bne.s	Sonic_LookUp
000130EA                            
000130EA                            loc_12F6A:
000130EA 08E8 0000 0022             		bset	#0,$22(a0)
000130F0                            
000130F0                            loc_12F70:
000130F0 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000130F6 6000                       		bra.s	Obj01_ResetScr
000130F8                            ; ===========================================================================
000130F8                            
000130F8                            Sonic_LookUp:
000130F8 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000130FE 6700                       		beq.s	Sonic_Duck	; if not, branch
00013100 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013106 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001310C 6700                       		beq.s	loc_12FC2
0001310E 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013112 6000                       		bra.s	loc_12FC2
00013114                            ; ===========================================================================
00013114                            
00013114                            Sonic_Duck:
00013114 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001311A 6700                       		beq.s	Obj01_ResetScr	; if not, branch
0001311C 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013122 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013128 6700                       		beq.s	loc_12FC2
0001312A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001312E 6000                       		bra.s	loc_12FC2
00013130                            ; ===========================================================================
00013130                            
00013130                            Obj01_ResetScr:
00013130 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013136 6700                       		beq.s	loc_12FC2	; if yes, branch
00013138 6400                       		bcc.s	loc_12FBE
0001313A 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001313E                            
0001313E                            loc_12FBE:
0001313E 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013142                            
00013142                            loc_12FC2:
00013142 1038 F602                  		move.b	($FFFFF602).w,d0
00013146 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
0001314A 6600                       		bne.s	loc_12FEE	; if yes, branch
0001314C 3028 0014                  		move.w	$14(a0),d0
00013150 6700                       		beq.s	loc_12FEE
00013152 6B00                       		bmi.s	loc_12FE2
00013154 9045                       		sub.w	d5,d0
00013156 6400                       		bcc.s	loc_12FDC
00013158 303C 0000                  		move.w	#0,d0
0001315C                            
0001315C                            loc_12FDC:
0001315C 3140 0014                  		move.w	d0,$14(a0)
00013160 6000                       		bra.s	loc_12FEE
00013162                            ; ===========================================================================
00013162                            
00013162                            loc_12FE2:
00013162 D045                       		add.w	d5,d0
00013164 6400                       		bcc.s	loc_12FEA
00013166 303C 0000                  		move.w	#0,d0
0001316A                            
0001316A                            loc_12FEA:
0001316A 3140 0014                  		move.w	d0,$14(a0)
0001316E                            
0001316E                            loc_12FEE:
0001316E 1028 0026                  		move.b	$26(a0),d0
00013172 4EB9 0000 29DA             		jsr	(CalcSine).l
00013178 C3E8 0014                  		muls.w	$14(a0),d1
0001317C E081                       		asr.l	#8,d1
0001317E 3141 0010                  		move.w	d1,$10(a0)
00013182 C1E8 0014                  		muls.w	$14(a0),d0
00013186 E080                       		asr.l	#8,d0
00013188 3140 0012                  		move.w	d0,$12(a0)
0001318C                            
0001318C                            loc_1300C:
0001318C 1028 0026                  		move.b	$26(a0),d0
00013190 0600 0040                  		addi.b	#$40,d0
00013194 6B00                       		bmi.s	locret_1307C
00013196 123C 0040                  		move.b	#$40,d1
0001319A 4A68 0014                  		tst.w	$14(a0)
0001319E 6700                       		beq.s	locret_1307C
000131A0 6B00                       		bmi.s	loc_13024
000131A2 4441                       		neg.w	d1
000131A4                            
000131A4                            loc_13024:
000131A4 1028 0026                  		move.b	$26(a0),d0
000131A8 D001                       		add.b	d1,d0
000131AA 3F00                       		move.w	d0,-(sp)
000131AC 6100 0000                  		bsr.w	Sonic_WalkSpeed
000131B0 301F                       		move.w	(sp)+,d0
000131B2 4A41                       		tst.w	d1
000131B4 6A00                       		bpl.s	locret_1307C
000131B6 E141                       		asl.w	#8,d1
000131B8 0600 0020                  		addi.b	#$20,d0
000131BC 0200 00C0                  		andi.b	#$C0,d0
000131C0 6700                       		beq.s	loc_13078
000131C2 0C00 0040                  		cmpi.b	#$40,d0
000131C6 6700                       		beq.s	loc_13066
000131C8 0C00 0080                  		cmpi.b	#$80,d0
000131CC 6700                       		beq.s	loc_13060
000131CE D368 0010                  		add.w	d1,$10(a0)
000131D2 08E8 0005 0022             		bset	#5,$22(a0)
000131D8 317C 0000 0014             		move.w	#0,$14(a0)
000131DE 4E75                       		rts	
000131E0                            ; ===========================================================================
000131E0                            
000131E0                            loc_13060:
000131E0 9368 0012                  		sub.w	d1,$12(a0)
000131E4 4E75                       		rts	
000131E6                            ; ===========================================================================
000131E6                            
000131E6                            loc_13066:
000131E6 9368 0010                  		sub.w	d1,$10(a0)
000131EA 08E8 0005 0022             		bset	#5,$22(a0)
000131F0 317C 0000 0014             		move.w	#0,$14(a0)
000131F6 4E75                       		rts	
000131F8                            ; ===========================================================================
000131F8                            
000131F8                            loc_13078:
000131F8 D368 0012                  		add.w	d1,$12(a0)
000131FC                            
000131FC                            locret_1307C:
000131FC 4E75                       		rts	
000131FE                            ; End of function Sonic_Move
000131FE                            
000131FE                            
000131FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000131FE                            
000131FE                            
000131FE                            Sonic_MoveLeft:				; XREF: Sonic_Move
000131FE 3028 0014                  		move.w	$14(a0),d0
00013202 6700                       		beq.s	loc_13086
00013204 6A00                       		bpl.s	loc_130B2
00013206                            
00013206                            loc_13086:
00013206 08E8 0000 0022             		bset	#0,$22(a0)
0001320C 6600                       		bne.s	loc_1309A
0001320E 08A8 0005 0022             		bclr	#5,$22(a0)
00013214 117C 0001 001D             		move.b	#1,$1D(a0)
0001321A                            
0001321A                            loc_1309A:
0001321A 9045                       		sub.w	d5,d0
0001321C 3206                       		move.w	d6,d1
0001321E 4441                       		neg.w	d1
00013220 B041                       		cmp.w	d1,d0
00013222 6E00                       		bgt.s	loc_130A6
00013224 3001                       		move.w	d1,d0
00013226                            
00013226                            loc_130A6:
00013226 3140 0014                  		move.w	d0,$14(a0)
0001322A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013230 4E75                       		rts	
00013232                            ; ===========================================================================
00013232                            
00013232                            loc_130B2:				; XREF: Sonic_MoveLeft
00013232 9044                       		sub.w	d4,d0
00013234 6400                       		bcc.s	loc_130BA
00013236 303C FF80                  		move.w	#-$80,d0
0001323A                            
0001323A                            loc_130BA:
0001323A 3140 0014                  		move.w	d0,$14(a0)
0001323E 1028 0026                  		move.b	$26(a0),d0
00013242 0600 0020                  		addi.b	#$20,d0
00013246 0200 00C0                  		andi.b	#$C0,d0
0001324A 6600                       		bne.s	locret_130E8
0001324C 0C40 0400                  		cmpi.w	#$400,d0
00013250 6D00                       		blt.s	locret_130E8
00013252 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013258 08A8 0000 0022             		bclr	#0,$22(a0)
0001325E 303C 00A4                  		move.w	#$A4,d0
00013262 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stopping sound
00013268                            
00013268                            locret_130E8:
00013268 4E75                       		rts	
0001326A                            ; End of function Sonic_MoveLeft
0001326A                            
0001326A                            
0001326A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001326A                            
0001326A                            
0001326A                            Sonic_MoveRight:			; XREF: Sonic_Move
0001326A 3028 0014                  		move.w	$14(a0),d0
0001326E 6B00                       		bmi.s	loc_13118
00013270 08A8 0000 0022             		bclr	#0,$22(a0)
00013276 6700                       		beq.s	loc_13104
00013278 08A8 0005 0022             		bclr	#5,$22(a0)
0001327E 117C 0001 001D             		move.b	#1,$1D(a0)
00013284                            
00013284                            loc_13104:
00013284 D045                       		add.w	d5,d0
00013286 B046                       		cmp.w	d6,d0
00013288 6D00                       		blt.s	loc_1310C
0001328A 3006                       		move.w	d6,d0
0001328C                            
0001328C                            loc_1310C:
0001328C 3140 0014                  		move.w	d0,$14(a0)
00013290 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013296 4E75                       		rts	
00013298                            ; ===========================================================================
00013298                            
00013298                            loc_13118:				; XREF: Sonic_MoveRight
00013298 D044                       		add.w	d4,d0
0001329A 6400                       		bcc.s	loc_13120
0001329C 303C 0080                  		move.w	#$80,d0
000132A0                            
000132A0                            loc_13120:
000132A0 3140 0014                  		move.w	d0,$14(a0)
000132A4 1028 0026                  		move.b	$26(a0),d0
000132A8 0600 0020                  		addi.b	#$20,d0
000132AC 0200 00C0                  		andi.b	#$C0,d0
000132B0 6600                       		bne.s	locret_1314E
000132B2 0C40 FC00                  		cmpi.w	#-$400,d0
000132B6 6E00                       		bgt.s	locret_1314E
000132B8 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000132BE 08E8 0000 0022             		bset	#0,$22(a0)
000132C4 303C 00A4                  		move.w	#$A4,d0
000132C8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stopping sound
000132CE                            
000132CE                            locret_1314E:
000132CE 4E75                       		rts	
000132D0                            ; End of function Sonic_MoveRight
000132D0                            
000132D0                            ; ---------------------------------------------------------------------------
000132D0                            ; Subroutine to	change Sonic's speed as he rolls
000132D0                            ; ---------------------------------------------------------------------------
000132D0                            
000132D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132D0                            
000132D0                            
000132D0                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000132D0 3C38 F760                  		move.w	($FFFFF760).w,d6
000132D4 E346                       		asl.w	#1,d6
000132D6 3A38 F762                  		move.w	($FFFFF762).w,d5
000132DA E245                       		asr.w	#1,d5
000132DC 3838 F764                  		move.w	($FFFFF764).w,d4
000132E0 E444                       		asr.w	#2,d4
000132E2 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000132E6 6600 0000                  		bne.w	loc_131CC
000132EA 4A68 003E                  		tst.w	$3E(a0)
000132EE 6600                       		bne.s	loc_13188
000132F0 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000132F6 6700                       		beq.s	loc_1317C	; if not, branch
000132F8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000132FE 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013300 6100 0000                  		bsr.w	Sonic_RollLeft
00013304                            
00013304                            loc_1317C:
00013304 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001330A 6700                       		beq.s	loc_13188	; if not, branch
0001330C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013312 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013314 6100 0000                  		bsr.w	Sonic_RollLeft
00013318 6000                       		bra.s	loc_13188
0001331A                            
0001331A                            SonicRS_RollRight:
0001331A 6100 0000                  		bsr.w	Sonic_RollRight
0001331E                            
0001331E                            loc_13188:
0001331E 3028 0014                  		move.w	$14(a0),d0
00013322 6700                       		beq.s	loc_131AA
00013324 6B00                       		bmi.s	loc_1319E
00013326 9045                       		sub.w	d5,d0
00013328 6400                       		bcc.s	loc_13198
0001332A 303C 0000                  		move.w	#0,d0
0001332E                            
0001332E                            loc_13198:
0001332E 3140 0014                  		move.w	d0,$14(a0)
00013332 6000                       		bra.s	loc_131AA
00013334                            ; ===========================================================================
00013334                            
00013334                            loc_1319E:				; XREF: Sonic_RollSpeed
00013334 D045                       		add.w	d5,d0
00013336 6400                       		bcc.s	loc_131A6
00013338 303C 0000                  		move.w	#0,d0
0001333C                            
0001333C                            loc_131A6:
0001333C 3140 0014                  		move.w	d0,$14(a0)
00013340                            
00013340                            loc_131AA:
00013340 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013344 6600                       		bne.s	loc_131CC	; if yes, branch
00013346 08A8 0002 0022             		bclr	#2,$22(a0)
0001334C 117C 0013 0016             		move.b	#$13,$16(a0)
00013352 117C 0009 0017             		move.b	#9,$17(a0)
00013358 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001335E 5B68 000C                  		subq.w	#5,$C(a0)
00013362                            
00013362                            loc_131CC:
00013362 1028 0026                  		move.b	$26(a0),d0
00013366 4EB9 0000 29DA             		jsr	(CalcSine).l
0001336C C1E8 0014                  		muls.w	$14(a0),d0
00013370 E080                       		asr.l	#8,d0
00013372 3140 0012                  		move.w	d0,$12(a0)
00013376 C3E8 0014                  		muls.w	$14(a0),d1
0001337A E081                       		asr.l	#8,d1
0001337C 0C41 1000                  		cmpi.w	#$1000,d1
00013380 6F00                       		ble.s	loc_131F0
00013382 323C 1000                  		move.w	#$1000,d1
00013386                            
00013386                            loc_131F0:
00013386 0C41 F000                  		cmpi.w	#-$1000,d1
0001338A 6C00                       		bge.s	loc_131FA
0001338C 323C F000                  		move.w	#-$1000,d1
00013390                            
00013390                            loc_131FA:
00013390 3141 0010                  		move.w	d1,$10(a0)
00013394 6000 FDF6                  		bra.w	loc_1300C
00013398                            ; End of function Sonic_RollSpeed
00013398                            
00013398                            
00013398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013398                            
00013398                            
00013398                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013398 3028 0014                  		move.w	$14(a0),d0
0001339C 6700                       		beq.s	loc_1320A
0001339E 6A00                       		bpl.s	loc_13218
000133A0                            
000133A0                            loc_1320A:
000133A0 08E8 0000 0022             		bset	#0,$22(a0)
000133A6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000133AC 4E75                       		rts	
000133AE                            ; ===========================================================================
000133AE                            
000133AE                            loc_13218:
000133AE 9044                       		sub.w	d4,d0
000133B0 6400                       		bcc.s	loc_13220
000133B2 303C FF80                  		move.w	#-$80,d0
000133B6                            
000133B6                            loc_13220:
000133B6 3140 0014                  		move.w	d0,$14(a0)
000133BA 4E75                       		rts	
000133BC                            ; End of function Sonic_RollLeft
000133BC                            
000133BC                            
000133BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000133BC                            
000133BC                            
000133BC                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000133BC 3028 0014                  		move.w	$14(a0),d0
000133C0 6B00                       		bmi.s	loc_1323A
000133C2 08A8 0000 0022             		bclr	#0,$22(a0)
000133C8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000133CE 4E75                       		rts	
000133D0                            ; ===========================================================================
000133D0                            
000133D0                            loc_1323A:
000133D0 D044                       		add.w	d4,d0
000133D2 6400                       		bcc.s	loc_13242
000133D4 303C 0080                  		move.w	#$80,d0
000133D8                            
000133D8                            loc_13242:
000133D8 3140 0014                  		move.w	d0,$14(a0)
000133DC 4E75                       		rts	
000133DE                            ; End of function Sonic_RollRight
000133DE                            
000133DE                            ; ---------------------------------------------------------------------------
000133DE                            ; Subroutine to	change Sonic's direction while jumping
000133DE                            ; ---------------------------------------------------------------------------
000133DE                            
000133DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000133DE                            
000133DE                            
000133DE                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
000133DE 3C38 F760                  		move.w	($FFFFF760).w,d6
000133E2 3A38 F762                  		move.w	($FFFFF762).w,d5
000133E6 E345                       		asl.w	#1,d5
000133E8 0828 0004 0022             		btst	#4,$22(a0)
000133EE 6600                       		bne.s	Obj01_ResetScr2
000133F0 3028 0010                  		move.w	$10(a0),d0
000133F4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000133FA 6700                       		beq.s	loc_13278	; if not, branch
000133FC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013402 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013404 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013408 6E00                       		bgt.s	loc_13278
0001340A 3001                       		move.w	d1,d0
0001340C                            
0001340C                            loc_13278:
0001340C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013412 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013414 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001341A 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
0001341C 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013420 6E00                       		bgt.s	Obj01_JumpMove
00013422 3001                       		move.w	d1,d0
00013424 6000                       		bra.s	Obj01_JumpMove
00013426                            
00013426                            SonicCJD_JumpLeft:
00013426 08E8 0000 0022             		bset	#0,$22(a0)
0001342C 9045                       		sub.w	d5,d0
0001342E 3206                       		move.w	d6,d1
00013430 4441                       		neg.w	d1
00013432 B041                       		cmp.w	d1,d0
00013434                            		; bgt.s	loc_13278
00013434                            		; move.w	d1,d0
00013434 4E75                       		rts
00013436                            
00013436                            SonicCJD_JumpRight:
00013436 08A8 0000 0022             		bclr	#0,$22(a0)
0001343C D045                       		add.w	d5,d0
0001343E B046                       		cmp.w	d6,d0
00013440 6D00                       		blt.s	Obj01_JumpMove
00013442 3006                       		move.w	d6,d0
00013444                            
00013444                            Obj01_JumpMove:
00013444 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013448                            
00013448                            Obj01_ResetScr2:
00013448 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001344E 6700                       		beq.s	loc_132A4	; if yes, branch
00013450 6400                       		bcc.s	loc_132A0
00013452 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013456                            
00013456                            loc_132A0:
00013456 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001345A                            
0001345A                            loc_132A4:
0001345A 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013460 6500                       		bcs.s	locret_132D2	; if yes, branch
00013462 3028 0010                  		move.w	$10(a0),d0
00013466 3200                       		move.w	d0,d1
00013468 EA41                       		asr.w	#5,d1
0001346A 6700                       		beq.s	locret_132D2
0001346C 6B00                       		bmi.s	loc_132C6
0001346E 9041                       		sub.w	d1,d0
00013470 6400                       		bcc.s	loc_132C0
00013472 303C 0000                  		move.w	#0,d0
00013476                            
00013476                            loc_132C0:
00013476 3140 0010                  		move.w	d0,$10(a0)
0001347A 4E75                       		rts	
0001347C                            ; ===========================================================================
0001347C                            
0001347C                            loc_132C6:
0001347C 9041                       		sub.w	d1,d0
0001347E 6500                       		bcs.s	loc_132CE
00013480 303C 0000                  		move.w	#0,d0
00013484                            
00013484                            loc_132CE:
00013484 3140 0010                  		move.w	d0,$10(a0)
00013488                            
00013488                            locret_132D2:
00013488 4E75                       		rts	
0001348A                            ; End of function Sonic_ChgJumpDir
0001348A                            
0001348A                            ; ===========================================================================
0001348A                            ; ---------------------------------------------------------------------------
0001348A                            ; Unused subroutine to squash Sonic
0001348A                            ; ---------------------------------------------------------------------------
0001348A 1028 0026                  		move.b	$26(a0),d0
0001348E 0600 0020                  		addi.b	#$20,d0
00013492 0200 00C0                  		andi.b	#$C0,d0
00013496 6600                       		bne.s	locret_13302
00013498 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001349C 4A41                       		tst.w	d1
0001349E 6A00                       		bpl.s	locret_13302
000134A0 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000134A6 317C 0000 0010             		move.w	#0,$10(a0)
000134AC 317C 0000 0012             		move.w	#0,$12(a0)
000134B2 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000134B8                            
000134B8                            locret_13302:
000134B8 4E75                       		rts	
000134BA                            ; ---------------------------------------------------------------------------
000134BA                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000134BA                            ; ---------------------------------------------------------------------------
000134BA                            
000134BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134BA                            
000134BA                            
000134BA                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000134BA 2228 0008                  		move.l	8(a0),d1
000134BE 3028 0010                  		move.w	$10(a0),d0
000134C2 48C0                       		ext.l	d0
000134C4 E180                       		asl.l	#8,d0
000134C6 D280                       		add.l	d0,d1
000134C8 4841                       		swap	d1
000134CA 3038 F728                  		move.w	($FFFFF728).w,d0
000134CE 0640 0010                  		addi.w	#$10,d0
000134D2 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000134D4 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000134D6 3038 F72A                  		move.w	($FFFFF72A).w,d0
000134DA 0640 0128                  		addi.w	#$128,d0
000134DE 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000134E2 6600                       		bne.s	loc_13332
000134E4 0640 0040                  		addi.w	#$40,d0
000134E8                            
000134E8                            loc_13332:
000134E8 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000134EA 6300                       		bls.s	Boundary_Sides	; if yes, branch
000134EC                            
000134EC                            loc_13336:
000134EC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000134F0 0640 00E0                  		addi.w	#$E0,d0
000134F4 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
000134F8 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
000134FA 4E75                       		rts	
000134FC                            ; ===========================================================================
000134FC                            
000134FC                            Boundary_Bottom:
000134FC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013502 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013506 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
0001350C 6500 0000                  		bcs.w	KillSonic
00013510 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013514 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001351A 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013520 4E75                       		rts	
00013522                            ; ===========================================================================
00013522                            
00013522                            Boundary_Sides:
00013522 3140 0008                  		move.w	d0,8(a0)
00013526 317C 0000 000A             		move.w	#0,$A(a0)
0001352C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013532 317C 0000 0014             		move.w	#0,$14(a0)
00013538 60B2                       		bra.s	loc_13336
0001353A                            ; End of function Sonic_LevelBound
0001353A                            
0001353A                            ; ---------------------------------------------------------------------------
0001353A                            ; Subroutine allowing Sonic to roll when he's moving
0001353A                            ; ---------------------------------------------------------------------------
0001353A                            
0001353A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001353A                            
0001353A                            
0001353A                            Sonic_Roll:				; XREF: Obj01_MdNormal
0001353A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001353E 6600                       		bne.s	Obj01_NoRoll
00013540 3028 0014                  		move.w	$14(a0),d0
00013544 6A00                       		bpl.s	loc_13392
00013546 4440                       		neg.w	d0
00013548                            
00013548                            loc_13392:
00013548 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
0001354C 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
0001354E 1038 F602                  		move.b	($FFFFF602).w,d0
00013552 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013556 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013558 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001355E 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013560                            
00013560                            Obj01_NoRoll:
00013560 4E75                       		rts	
00013562                            ; ===========================================================================
00013562                            
00013562                            Obj01_ChkRoll:
00013562 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013568 6700                       		beq.s	Obj01_DoRoll	; if not, branch
0001356A 4E75                       		rts	
0001356C                            ; ===========================================================================
0001356C                            
0001356C                            Obj01_DoRoll:
0001356C 08E8 0002 0022             		bset	#2,$22(a0)
00013572 117C 000E 0016             		move.b	#$E,$16(a0)
00013578 117C 0007 0017             		move.b	#7,$17(a0)
0001357E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013584 5A68 000C                  		addq.w	#5,$C(a0)
00013588 303C 00BE                  		move.w	#$BE,d0
0001358C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rolling sound
00013592 4A68 0014                  		tst.w	$14(a0)
00013596 6600                       		bne.s	locret_133E8
00013598 317C 0200 0014             		move.w	#$200,$14(a0)
0001359E                            
0001359E                            locret_133E8:
0001359E 4E75                       		rts	
000135A0                            ; End of function Sonic_Roll
000135A0                            
000135A0                            ; ---------------------------------------------------------------------------
000135A0                            ; Subroutine allowing Sonic to jump
000135A0                            ; ---------------------------------------------------------------------------
000135A0                            
000135A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135A0                            
000135A0                            
000135A0                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000135A0 1038 F603                  		move.b	($FFFFF603).w,d0
000135A4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000135A8 6700 0000                  		beq.w	locret_1348E	; if not, branch
000135AC 7000                       		moveq	#0,d0
000135AE 1028 0026                  		move.b	$26(a0),d0
000135B2 0600 0080                  		addi.b	#$80,d0
000135B6 6100 0000                  		bsr.w	sub_14D48
000135BA 0C41 0006                  		cmpi.w	#6,d1
000135BE 6D00 0000                  		blt.w	locret_1348E
000135C2 343C 0680                  		move.w	#$680,d2
000135C6 0828 0006 0022             		btst	#6,$22(a0)
000135CC 6700                       		beq.s	loc_1341C
000135CE 343C 0380                  		move.w	#$380,d2
000135D2                            
000135D2                            loc_1341C:
000135D2 7000                       		moveq	#0,d0
000135D4 1028 0026                  		move.b	$26(a0),d0
000135D8 0400 0040                  		subi.b	#$40,d0
000135DC 4EB9 0000 29DA             		jsr	(CalcSine).l
000135E2 C3C2                       		muls.w	d2,d1
000135E4 E081                       		asr.l	#8,d1
000135E6 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
000135EA C1C2                       		muls.w	d2,d0
000135EC E080                       		asr.l	#8,d0
000135EE D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
000135F2 08E8 0001 0022             		bset	#1,$22(a0)
000135F8 08A8 0005 0022             		bclr	#5,$22(a0)
000135FE 588F                       		addq.l	#4,sp
00013600 117C 0001 003C             		move.b	#1,$3C(a0)
00013606 4228 0038                  		clr.b	$38(a0)
0001360A 303C 00A0                  		move.w	#$A0,d0
0001360E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play jumping sound
00013614 117C 0013 0016             		move.b	#$13,$16(a0)
0001361A 117C 0009 0017             		move.b	#9,$17(a0)
00013620 0828 0002 0022             		btst	#2,$22(a0)
00013626 6600                       		bne.s	loc_13490
00013628 117C 000E 0016             		move.b	#$E,$16(a0)
0001362E 117C 0007 0017             		move.b	#7,$17(a0)
00013634 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
0001363A 08E8 0002 0022             		bset	#2,$22(a0)
00013640 5A68 000C                  		addq.w	#5,$C(a0)
00013644                            
00013644                            locret_1348E:
00013644 4E75                       		rts	
00013646                            ; ===========================================================================
00013646                            
00013646                            loc_13490:
00013646 08E8 0004 0022             		bset	#4,$22(a0)
0001364C 4E75                       		rts	
0001364E                            ; End of function Sonic_Jump
0001364E                            
0001364E                            
0001364E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001364E                            
0001364E                            
0001364E                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001364E 4A28 003C                  		tst.b	$3C(a0)
00013652 6700                       		beq.s	loc_134C4
00013654 323C FC00                  		move.w	#-$400,d1
00013658 0828 0006 0022             		btst	#6,$22(a0)
0001365E 6700                       		beq.s	loc_134AE
00013660 323C FE00                  		move.w	#-$200,d1
00013664                            
00013664                            loc_134AE:
00013664 B268 0012                  		cmp.w	$12(a0),d1
00013668 6F00                       		ble.s	locret_134C2
0001366A 1038 F602                  		move.b	($FFFFF602).w,d0
0001366E 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013672 6600                       		bne.s	locret_134C2	; if yes, branch
00013674 3141 0012                  		move.w	d1,$12(a0)
00013678                            
00013678                            locret_134C2:
00013678 4E75                       		rts	
0001367A                            ; ===========================================================================
0001367A                            
0001367A                            loc_134C4:
0001367A 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013680 6C00                       		bge.s	locret_134D2
00013682 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013688                            
00013688                            locret_134D2:
00013688 4E75                       		rts	
0001368A                            ; End of function Sonic_JumpHeight
0001368A                            
0001368A                            ; ---------------------------------------------------------------------------
0001368A                            ; Subroutine to	slow Sonic walking up a	slope
0001368A                            ; ---------------------------------------------------------------------------
0001368A                            
0001368A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001368A                            
0001368A                            
0001368A                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
0001368A 1028 0026                  		move.b	$26(a0),d0
0001368E 0600 0060                  		addi.b	#$60,d0
00013692 0C00 00C0                  		cmpi.b	#$C0,d0
00013696 6400                       		bcc.s	locret_13508
00013698 1028 0026                  		move.b	$26(a0),d0
0001369C 4EB9 0000 29DA             		jsr	(CalcSine).l
000136A2 C1FC 0020                  		muls.w	#$20,d0
000136A6 E080                       		asr.l	#8,d0
000136A8 4A68 0014                  		tst.w	$14(a0)
000136AC 6700                       		beq.s	locret_13508
000136AE 6B00                       		bmi.s	loc_13504
000136B0 4A40                       		tst.w	d0
000136B2 6700                       		beq.s	locret_13502
000136B4 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
000136B8                            
000136B8                            locret_13502:
000136B8 4E75                       		rts	
000136BA                            ; ===========================================================================
000136BA                            
000136BA                            loc_13504:
000136BA D168 0014                  		add.w	d0,$14(a0)
000136BE                            
000136BE                            locret_13508:
000136BE 4E75                       		rts	
000136C0                            ; End of function Sonic_SlopeResist
000136C0                            
000136C0                            ; ---------------------------------------------------------------------------
000136C0                            ; Subroutine to	push Sonic down	a slope	while he's rolling
000136C0                            ; ---------------------------------------------------------------------------
000136C0                            
000136C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136C0                            
000136C0                            
000136C0                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
000136C0 1028 0026                  		move.b	$26(a0),d0
000136C4 0600 0060                  		addi.b	#$60,d0
000136C8 0C00 00C0                  		cmpi.b	#-$40,d0
000136CC 6400                       		bcc.s	locret_13544
000136CE 1028 0026                  		move.b	$26(a0),d0
000136D2 4EB9 0000 29DA             		jsr	(CalcSine).l
000136D8 C1FC 0050                  		muls.w	#$50,d0
000136DC E080                       		asr.l	#8,d0
000136DE 4A68 0014                  		tst.w	$14(a0)
000136E2 6B00                       		bmi.s	loc_1353A
000136E4 4A40                       		tst.w	d0
000136E6 6A00                       		bpl.s	loc_13534
000136E8 E480                       		asr.l	#2,d0
000136EA                            
000136EA                            loc_13534:
000136EA D168 0014                  		add.w	d0,$14(a0)
000136EE 4E75                       		rts	
000136F0                            ; ===========================================================================
000136F0                            
000136F0                            loc_1353A:
000136F0 4A40                       		tst.w	d0
000136F2 6B00                       		bmi.s	loc_13540
000136F4 E480                       		asr.l	#2,d0
000136F6                            
000136F6                            loc_13540:
000136F6 D168 0014                  		add.w	d0,$14(a0)
000136FA                            
000136FA                            locret_13544:
000136FA 4E75                       		rts	
000136FC                            ; End of function Sonic_RollRepel
000136FC                            
000136FC                            ; ---------------------------------------------------------------------------
000136FC                            ; Subroutine to	push Sonic down	a slope
000136FC                            ; ---------------------------------------------------------------------------
000136FC                            
000136FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136FC                            
000136FC                            
000136FC                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
000136FC 4E71                       		nop	
000136FE 4A28 0038                  		tst.b	$38(a0)
00013702 6600                       		bne.s	locret_13580
00013704 4A68 003E                  		tst.w	$3E(a0)
00013708 6600                       		bne.s	loc_13582
0001370A 1028 0026                  		move.b	$26(a0),d0
0001370E 0600 0020                  		addi.b	#$20,d0
00013712 0200 00C0                  		andi.b	#$C0,d0
00013716 6700                       		beq.s	locret_13580
00013718 3028 0014                  		move.w	$14(a0),d0
0001371C 6A00                       		bpl.s	loc_1356A
0001371E 4440                       		neg.w	d0
00013720                            
00013720                            loc_1356A:
00013720 0C40 0280                  		cmpi.w	#$280,d0
00013724 6400                       		bcc.s	locret_13580
00013726 4268 0014                  		clr.w	$14(a0)
0001372A 08E8 0001 0022             		bset	#1,$22(a0)
00013730 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013736                            
00013736                            locret_13580:
00013736 4E75                       		rts	
00013738                            ; ===========================================================================
00013738                            
00013738                            loc_13582:
00013738 5368 003E                  		subq.w	#1,$3E(a0)
0001373C 4E75                       		rts	
0001373E                            ; End of function Sonic_SlopeRepel
0001373E                            
0001373E                            ; ---------------------------------------------------------------------------
0001373E                            ; Subroutine to	return Sonic's angle to 0 as he jumps
0001373E                            ; ---------------------------------------------------------------------------
0001373E                            
0001373E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001373E                            
0001373E                            
0001373E                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001373E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013742 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013744 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013746                            
00013746 5400                       		addq.b	#2,d0		; increase angle
00013748 6400                       		bcc.s	loc_13596
0001374A 7000                       		moveq	#0,d0
0001374C                            
0001374C                            loc_13596:
0001374C 6000                       		bra.s	loc_1359E
0001374E                            ; ===========================================================================
0001374E                            
0001374E                            loc_13598:
0001374E 5500                       		subq.b	#2,d0		; decrease angle
00013750 6400                       		bcc.s	loc_1359E
00013752 7000                       		moveq	#0,d0
00013754                            
00013754                            loc_1359E:
00013754 1140 0026                  		move.b	d0,$26(a0)
00013758                            
00013758                            locret_135A2:
00013758 4E75                       		rts	
0001375A                            ; End of function Sonic_JumpAngle
0001375A                            
0001375A                            ; ---------------------------------------------------------------------------
0001375A                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001375A                            ; ---------------------------------------------------------------------------
0001375A                            
0001375A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001375A                            
0001375A                            
0001375A                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
0001375A 3228 0010                  		move.w	$10(a0),d1
0001375E 3428 0012                  		move.w	$12(a0),d2
00013762 4EB9 0000 2CA8             		jsr	(CalcAngle).l
00013768 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
0001376C 0400 0020                  		subi.b	#$20,d0
00013770 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013774 0200 00C0                  		andi.b	#$C0,d0
00013778 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001377C 0C00 0040                  		cmpi.b	#$40,d0
00013780 6700 0000                  		beq.w	loc_13680
00013784 0C00 0080                  		cmpi.b	#$80,d0
00013788 6700 0000                  		beq.w	loc_136E2
0001378C 0C00 00C0                  		cmpi.b	#-$40,d0
00013790 6700 0000                  		beq.w	loc_1373E
00013794 6100 0000                  		bsr.w	Sonic_HitWall
00013798 4A41                       		tst.w	d1
0001379A 6A00                       		bpl.s	loc_135F0
0001379C 9368 0008                  		sub.w	d1,8(a0)
000137A0 317C 0000 0010             		move.w	#0,$10(a0)
000137A6                            
000137A6                            loc_135F0:
000137A6 6100 0000                  		bsr.w	sub_14EB4
000137AA 4A41                       		tst.w	d1
000137AC 6A00                       		bpl.s	loc_13602
000137AE D368 0008                  		add.w	d1,8(a0)
000137B2 317C 0000 0010             		move.w	#0,$10(a0)
000137B8                            
000137B8                            loc_13602:
000137B8 6100 0000                  		bsr.w	Sonic_HitFloor
000137BC 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000137C0 4A41                       		tst.w	d1
000137C2 6A00                       		bpl.s	locret_1367E
000137C4 1428 0012                  		move.b	$12(a0),d2
000137C8 5002                       		addq.b	#8,d2
000137CA 4402                       		neg.b	d2
000137CC B202                       		cmp.b	d2,d1
000137CE 6C00                       		bge.s	loc_1361E
000137D0 B002                       		cmp.b	d2,d0
000137D2 6D00                       		blt.s	locret_1367E
000137D4                            
000137D4                            loc_1361E:
000137D4 D368 000C                  		add.w	d1,$C(a0)
000137D8 1143 0026                  		move.b	d3,$26(a0)
000137DC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000137E0 117C 0000 001C             		move.b	#0,$1C(a0)
000137E6 1003                       		move.b	d3,d0
000137E8 0600 0020                  		addi.b	#$20,d0
000137EC 0200 0040                  		andi.b	#$40,d0
000137F0 6600                       		bne.s	loc_1365C
000137F2 1003                       		move.b	d3,d0
000137F4 0600 0010                  		addi.b	#$10,d0
000137F8 0200 0020                  		andi.b	#$20,d0
000137FC 6700                       		beq.s	loc_1364E
000137FE E0E8 0012                  		asr	$12(a0)
00013802 6000                       		bra.s	loc_13670
00013804                            ; ===========================================================================
00013804                            
00013804                            loc_1364E:
00013804 317C 0000 0012             		move.w	#0,$12(a0)
0001380A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013810 4E75                       		rts	
00013812                            ; ===========================================================================
00013812                            
00013812                            loc_1365C:
00013812 317C 0000 0010             		move.w	#0,$10(a0)
00013818 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
0001381E 6F00                       		ble.s	loc_13670
00013820 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013826                            
00013826                            loc_13670:
00013826 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001382C 4A03                       		tst.b	d3
0001382E 6A00                       		bpl.s	locret_1367E
00013830 4468 0014                  		neg.w	$14(a0)
00013834                            
00013834                            locret_1367E:
00013834 4E75                       		rts	
00013836                            ; ===========================================================================
00013836                            
00013836                            loc_13680:
00013836 6100 0000                  		bsr.w	Sonic_HitWall
0001383A 4A41                       		tst.w	d1
0001383C 6A00                       		bpl.s	loc_1369A
0001383E 9368 0008                  		sub.w	d1,8(a0)
00013842 317C 0000 0010             		move.w	#0,$10(a0)
00013848 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001384E 4E75                       		rts	
00013850                            ; ===========================================================================
00013850                            
00013850                            loc_1369A:
00013850 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013854 4A41                       		tst.w	d1
00013856 6A00                       		bpl.s	loc_136B4
00013858 9368 000C                  		sub.w	d1,$C(a0)
0001385C 4A68 0012                  		tst.w	$12(a0)
00013860 6A00                       		bpl.s	locret_136B2
00013862 317C 0000 0012             		move.w	#0,$12(a0)
00013868                            
00013868                            locret_136B2:
00013868 4E75                       		rts	
0001386A                            ; ===========================================================================
0001386A                            
0001386A                            loc_136B4:
0001386A 4A68 0012                  		tst.w	$12(a0)
0001386E 6B00                       		bmi.s	locret_136E0
00013870 6100 0000                  		bsr.w	Sonic_HitFloor
00013874 4A41                       		tst.w	d1
00013876 6A00                       		bpl.s	locret_136E0
00013878 D368 000C                  		add.w	d1,$C(a0)
0001387C 1143 0026                  		move.b	d3,$26(a0)
00013880 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013884 117C 0000 001C             		move.b	#0,$1C(a0)
0001388A 317C 0000 0012             		move.w	#0,$12(a0)
00013890 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013896                            
00013896                            locret_136E0:
00013896 4E75                       		rts	
00013898                            ; ===========================================================================
00013898                            
00013898                            loc_136E2:
00013898 6100 0000                  		bsr.w	Sonic_HitWall
0001389C 4A41                       		tst.w	d1
0001389E 6A00                       		bpl.s	loc_136F4
000138A0 9368 0008                  		sub.w	d1,8(a0)
000138A4 317C 0000 0010             		move.w	#0,$10(a0)
000138AA                            
000138AA                            loc_136F4:
000138AA 6100 0000                  		bsr.w	sub_14EB4
000138AE 4A41                       		tst.w	d1
000138B0 6A00                       		bpl.s	loc_13706
000138B2 D368 0008                  		add.w	d1,8(a0)
000138B6 317C 0000 0010             		move.w	#0,$10(a0)
000138BC                            
000138BC                            loc_13706:
000138BC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000138C0 4A41                       		tst.w	d1
000138C2 6A00                       		bpl.s	locret_1373C
000138C4 9368 000C                  		sub.w	d1,$C(a0)
000138C8 1003                       		move.b	d3,d0
000138CA 0600 0020                  		addi.b	#$20,d0
000138CE 0200 0040                  		andi.b	#$40,d0
000138D2 6600                       		bne.s	loc_13726
000138D4 317C 0000 0012             		move.w	#0,$12(a0)
000138DA 4E75                       		rts	
000138DC                            ; ===========================================================================
000138DC                            
000138DC                            loc_13726:
000138DC 1143 0026                  		move.b	d3,$26(a0)
000138E0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000138E4 3168 0012 0014             		move.w	$12(a0),$14(a0)
000138EA 4A03                       		tst.b	d3
000138EC 6A00                       		bpl.s	locret_1373C
000138EE 4468 0014                  		neg.w	$14(a0)
000138F2                            
000138F2                            locret_1373C:
000138F2 4E75                       		rts	
000138F4                            ; ===========================================================================
000138F4                            
000138F4                            loc_1373E:
000138F4 6100 0000                  		bsr.w	sub_14EB4
000138F8 4A41                       		tst.w	d1
000138FA 6A00                       		bpl.s	loc_13758
000138FC D368 0008                  		add.w	d1,8(a0)
00013900 317C 0000 0010             		move.w	#0,$10(a0)
00013906 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001390C 4E75                       		rts	
0001390E                            ; ===========================================================================
0001390E                            
0001390E                            loc_13758:
0001390E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013912 4A41                       		tst.w	d1
00013914 6A00                       		bpl.s	loc_13772
00013916 9368 000C                  		sub.w	d1,$C(a0)
0001391A 4A68 0012                  		tst.w	$12(a0)
0001391E 6A00                       		bpl.s	locret_13770
00013920 317C 0000 0012             		move.w	#0,$12(a0)
00013926                            
00013926                            locret_13770:
00013926 4E75                       		rts	
00013928                            ; ===========================================================================
00013928                            
00013928                            loc_13772:
00013928 4A68 0012                  		tst.w	$12(a0)
0001392C 6B00                       		bmi.s	locret_1379E
0001392E 6100 0000                  		bsr.w	Sonic_HitFloor
00013932 4A41                       		tst.w	d1
00013934 6A00                       		bpl.s	locret_1379E
00013936 D368 000C                  		add.w	d1,$C(a0)
0001393A 1143 0026                  		move.b	d3,$26(a0)
0001393E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013942 117C 0000 001C             		move.b	#0,$1C(a0)
00013948 317C 0000 0012             		move.w	#0,$12(a0)
0001394E 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013954                            
00013954                            locret_1379E:
00013954 4E75                       		rts	
00013956                            ; End of function Sonic_Floor
00013956                            
00013956                            ; ---------------------------------------------------------------------------
00013956                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013956                            ; ---------------------------------------------------------------------------
00013956                            
00013956                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013956                            
00013956                            
00013956                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013956 0828 0004 0022             		btst	#4,$22(a0)
0001395C 6700                       		beq.s	loc_137AE
0001395E 4E71                       		nop	
00013960 4E71                       		nop	
00013962 4E71                       		nop	
00013964                            
00013964                            loc_137AE:
00013964 08A8 0005 0022             		bclr	#5,$22(a0)
0001396A 08A8 0001 0022             		bclr	#1,$22(a0)
00013970 08A8 0004 0022             		bclr	#4,$22(a0)
00013976 0828 0002 0022             		btst	#2,$22(a0)
0001397C 6700                       		beq.s	loc_137E4
0001397E 08A8 0002 0022             		bclr	#2,$22(a0)
00013984 117C 0013 0016             		move.b	#$13,$16(a0)
0001398A 117C 0009 0017             		move.b	#9,$17(a0)
00013990 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013996 5B68 000C                  		subq.w	#5,$C(a0)
0001399A                            
0001399A                            loc_137E4:
0001399A 117C 0000 003C             		move.b	#0,$3C(a0)
000139A0 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000139A6 4E75                       		rts	
000139A8                            ; End of function Sonic_ResetOnFloor
000139A8                            
000139A8                            ; ===========================================================================
000139A8                            ; ---------------------------------------------------------------------------
000139A8                            ; Sonic	when he	gets hurt
000139A8                            ; ---------------------------------------------------------------------------
000139A8                            
000139A8                            Obj01_Hurt:				; XREF: Obj01_Index
000139A8 4EBA 9DA4                  		jsr	SpeedToPos
000139AC 0668 0030 0012             		addi.w	#$30,$12(a0)
000139B2 0828 0006 0022             		btst	#6,$22(a0)
000139B8 6700                       		beq.s	loc_1380C
000139BA 0468 0020 0012             		subi.w	#$20,$12(a0)
000139C0                            
000139C0                            loc_1380C:
000139C0 6100 0000                  		bsr.w	Sonic_HurtStop
000139C4 6100 FAF4                  		bsr.w	Sonic_LevelBound
000139C8 6100 F506                  		bsr.w	Sonic_RecordPos
000139CC 6100 0000                  		bsr.w	Sonic_Animate
000139D0 6100 0000                  		bsr.w	LoadSonicDynPLC
000139D4 4EFA 9D9E                  		jmp	DisplaySprite
000139D8                            
000139D8                            ; ---------------------------------------------------------------------------
000139D8                            ; Subroutine to	stop Sonic falling after he's been hurt
000139D8                            ; ---------------------------------------------------------------------------
000139D8                            
000139D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139D8                            
000139D8                            
000139D8                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000139D8 3038 F72E                  		move.w	($FFFFF72E).w,d0
000139DC 0640 00E0                  		addi.w	#$E0,d0
000139E0 B068 000C                  		cmp.w	$C(a0),d0
000139E4 6500 0000                  		bcs.w	KillSonic
000139E8 6100 FD70                  		bsr.w	Sonic_Floor
000139EC 0828 0001 0022             		btst	#1,$22(a0)
000139F2 6600                       		bne.s	locret_13860
000139F4 7000                       		moveq	#0,d0
000139F6 3140 0012                  		move.w	d0,$12(a0)
000139FA 3140 0010                  		move.w	d0,$10(a0)
000139FE 3140 0014                  		move.w	d0,$14(a0)
00013A02 117C 0000 001C             		move.b	#0,$1C(a0)
00013A08 5528 0024                  		subq.b	#2,$24(a0)
00013A0C 317C 0078 0030             		move.w	#$78,$30(a0)
00013A12                            
00013A12                            locret_13860:
00013A12 4E75                       		rts	
00013A14                            ; End of function Sonic_HurtStop
00013A14                            
00013A14                            ; ===========================================================================
00013A14                            ; ---------------------------------------------------------------------------
00013A14                            ; Sonic	when he	dies
00013A14                            ; ---------------------------------------------------------------------------
00013A14                            
00013A14                            Obj01_Death:				; XREF: Obj01_Index
00013A14 6100 0000                  		bsr.w	GameOver
00013A18 4EBA 9D08                  		jsr	ObjectFall
00013A1C 6100 F4B2                  		bsr.w	Sonic_RecordPos
00013A20 6100 0000                  		bsr.w	Sonic_Animate
00013A24 6100 0000                  		bsr.w	LoadSonicDynPLC
00013A28 4EFA 9D4A                  		jmp	DisplaySprite
00013A2C                            
00013A2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A2C                            
00013A2C                            
00013A2C                            GameOver:				; XREF: Obj01_Death
00013A2C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013A30 0640 0100                  		addi.w	#$100,d0
00013A34 B068 000C                  		cmp.w	$C(a0),d0
00013A38 6400 0000                  		bcc.w	locret_13900
00013A3C 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013A42 5428 0024                  		addq.b	#2,$24(a0)
00013A46 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013A4A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013A4E 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013A52 6600                       		bne.s	loc_138D4
00013A54 317C 0000 003A             		move.w	#0,$3A(a0)
00013A5A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013A60 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013A66 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013A6C 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013A70                            
00013A70                            loc_138C2:
00013A70 303C 008F                  		move.w	#$8F,d0
00013A74 4EB9 0000 1396             		jsr	(PlaySound).l	; play game over music
00013A7A 7003                       		moveq	#3,d0
00013A7C 4EF9 0000 1580             		jmp	(LoadPLC).l	; load game over patterns
00013A82                            ; ===========================================================================
00013A82                            
00013A82                            loc_138D4:
00013A82 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013A88 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013A8C 6700                       		beq.s	locret_13900	; if not, branch
00013A8E 317C 0000 003A             		move.w	#0,$3A(a0)
00013A94 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013A9A 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013AA0 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013AA6 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013AAC 60C2                       		bra.s	loc_138C2
00013AAE                            ; ===========================================================================
00013AAE                            
00013AAE                            locret_13900:
00013AAE 4E75                       		rts	
00013AB0                            ; End of function GameOver
00013AB0                            
00013AB0                            ; ===========================================================================
00013AB0                            ; ---------------------------------------------------------------------------
00013AB0                            ; Sonic	when the level is restarted
00013AB0                            ; ---------------------------------------------------------------------------
00013AB0                            
00013AB0                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013AB0 4A68 003A                  		tst.w	$3A(a0)
00013AB4 6700                       		beq.s	locret_13914
00013AB6 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013ABA 6600                       		bne.s	locret_13914
00013ABC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013AC2                            
00013AC2                            locret_13914:
00013AC2 4E75                       		rts	
00013AC4                            
00013AC4                            ; ---------------------------------------------------------------------------
00013AC4                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013AC4                            ; ---------------------------------------------------------------------------
00013AC4                            
00013AC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AC4                            
00013AC4                            
00013AC4                            Sonic_Loops:				; XREF: Obj01_Control
00013AC4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013ACA 6700                       		beq.s	loc_13926	; if yes, branch
00013ACC 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013AD0 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013AD4                            
00013AD4                            loc_13926:
00013AD4 3028 000C                  		move.w	$C(a0),d0
00013AD8 E248                       		lsr.w	#1,d0
00013ADA 0240 0380                  		andi.w	#$380,d0
00013ADE 1228 0008                  		move.b	8(a0),d1
00013AE2 0241 007F                  		andi.w	#$7F,d1
00013AE6 D041                       		add.w	d1,d0
00013AE8 43F8 A400                  		lea	($FFFFA400).w,a1
00013AEC 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013AF0 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013AF4 6700 FA6C                  		beq.w	Obj01_ChkRoll
00013AF8 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013AFC 6700 FA64                  		beq.w	Obj01_ChkRoll
00013B00 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013B04 6700                       		beq.s	loc_13976
00013B06 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013B0A 6700                       		beq.s	loc_13966
00013B0C 08A8 0006 0001             		bclr	#6,1(a0)
00013B12 4E75                       		rts	
00013B14                            ; ===========================================================================
00013B14                            
00013B14                            loc_13966:
00013B14 0828 0001 0022             		btst	#1,$22(a0)
00013B1A 6700                       		beq.s	loc_13976
00013B1C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013B22 4E75                       		rts	
00013B24                            ; ===========================================================================
00013B24                            
00013B24                            loc_13976:
00013B24 3428 0008                  		move.w	8(a0),d2
00013B28 0C02 002C                  		cmpi.b	#$2C,d2
00013B2C 6400                       		bcc.s	loc_13988
00013B2E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013B34 4E75                       		rts	
00013B36                            ; ===========================================================================
00013B36                            
00013B36                            loc_13988:
00013B36 0C02 00E0                  		cmpi.b	#-$20,d2
00013B3A 6500                       		bcs.s	loc_13996
00013B3C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013B42 4E75                       		rts	
00013B44                            ; ===========================================================================
00013B44                            
00013B44                            loc_13996:
00013B44 0828 0006 0001             		btst	#6,1(a0)
00013B4A 6600                       		bne.s	loc_139B2
00013B4C 1228 0026                  		move.b	$26(a0),d1
00013B50 6700                       		beq.s	locret_139C2
00013B52 0C01 0080                  		cmpi.b	#-$80,d1
00013B56 6200                       		bhi.s	locret_139C2
00013B58 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013B5E 4E75                       		rts	
00013B60                            ; ===========================================================================
00013B60                            
00013B60                            loc_139B2:
00013B60 1228 0026                  		move.b	$26(a0),d1
00013B64 0C01 0080                  		cmpi.b	#-$80,d1
00013B68 6300                       		bls.s	locret_139C2
00013B6A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013B70                            
00013B70                            locret_139C2:
00013B70 4E75                       		rts	
00013B72                            ; End of function Sonic_Loops
00013B72                            
00013B72                            ; ---------------------------------------------------------------------------
00013B72                            ; Subroutine to	animate	Sonic's sprites
00013B72                            ; ---------------------------------------------------------------------------
00013B72                            
00013B72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B72                            
00013B72                            
00013B72                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013B72 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013B78 7000                       		moveq	#0,d0
00013B7A 1028 001C                  		move.b	$1C(a0),d0
00013B7E B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013B82 6700                       		beq.s	SAnim_Do	; if not, branch
00013B84 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013B88 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013B8E 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013B94                            
00013B94                            SAnim_Do:
00013B94 D040                       		add.w	d0,d0
00013B96 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013B9A 1011                       		move.b	(a1),d0
00013B9C 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013B9E 1228 0022                  		move.b	$22(a0),d1
00013BA2 0201 0001                  		andi.b	#1,d1
00013BA6 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013BAC 8328 0001                  		or.b	d1,1(a0)
00013BB0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013BB4 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013BB6 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013BBA                            
00013BBA                            SAnim_Do2:
00013BBA 7200                       		moveq	#0,d1
00013BBC 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013BC0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00013BC4 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00013BC6                            
00013BC6                            SAnim_Next:
00013BC6 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013BCA 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013BCE                            
00013BCE                            SAnim_Delay:
00013BCE 4E75                       		rts	
00013BD0                            ; ===========================================================================
00013BD0                            
00013BD0                            SAnim_End_FF:
00013BD0 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00013BD2 6600                       		bne.s	SAnim_End_FE	; if not, branch
00013BD4 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00013BDA 1029 0001                  		move.b	1(a1),d0	; read sprite number
00013BDE 60E6                       		bra.s	SAnim_Next
00013BE0                            ; ===========================================================================
00013BE0                            
00013BE0                            SAnim_End_FE:
00013BE0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00013BE2 6600                       		bne.s	SAnim_End_FD	; if not, branch
00013BE4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00013BE8 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00013BEC 9200                       		sub.b	d0,d1
00013BEE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00013BF2 60D2                       		bra.s	SAnim_Next
00013BF4                            ; ===========================================================================
00013BF4                            
00013BF4                            SAnim_End_FD:
00013BF4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00013BF6 6600                       		bne.s	SAnim_End	; if not, branch
00013BF8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00013BFE                            
00013BFE                            SAnim_End:
00013BFE 4E75                       		rts	
00013C00                            ; ===========================================================================
00013C00                            
00013C00                            SAnim_WalkRun:				; XREF: SAnim_Do
00013C00 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013C04 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00013C06 5200                       		addq.b	#1,d0		; is animation walking/running?
00013C08 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00013C0C 7200                       		moveq	#0,d1
00013C0E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013C12 1428 0022                  		move.b	$22(a0),d2
00013C16 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00013C1A 6600                       		bne.s	loc_13A70	; if yes, branch
00013C1C 4600                       		not.b	d0		; reverse angle
00013C1E                            
00013C1E                            loc_13A70:
00013C1E 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00013C22 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00013C24 7203                       		moveq	#3,d1
00013C26                            
00013C26                            loc_13A78:
00013C26 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013C2C B302                       		eor.b	d1,d2
00013C2E 8528 0001                  		or.b	d2,1(a0)
00013C32 0828 0005 0022             		btst	#5,$22(a0)
00013C38 6600 0000                  		bne.w	SAnim_Push
00013C3C E808                       		lsr.b	#4,d0		; divide angle by $10
00013C3E 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00013C42 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013C46 6A00                       		bpl.s	loc_13A9C
00013C48 4442                       		neg.w	d2
00013C4A                            
00013C4A                            loc_13A9C:
00013C4A 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00013C50 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00013C54 6400                       		bcc.s	loc_13AB4	; if yes, branch
00013C56 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00013C5C 1200                       		move.b	d0,d1
00013C5E E209                       		lsr.b	#1,d1
00013C60 D001                       		add.b	d1,d0
00013C62                            
00013C62                            loc_13AB4:
00013C62 D000                       		add.b	d0,d0
00013C64 1600                       		move.b	d0,d3
00013C66 4442                       		neg.w	d2
00013C68 0642 0800                  		addi.w	#$800,d2
00013C6C 6A00                       		bpl.s	loc_13AC2
00013C6E 7400                       		moveq	#0,d2
00013C70                            
00013C70                            loc_13AC2:
00013C70 E04A                       		lsr.w	#8,d2
00013C72 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013C76 6100 FF42                  		bsr.w	SAnim_Do2
00013C7A D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00013C7E 4E75                       		rts	
00013C80                            ; ===========================================================================
00013C80                            
00013C80                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00013C80 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00013C82 6600                       		bne.s	SAnim_Push	; if not, branch
00013C84 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013C88 6A00                       		bpl.s	loc_13ADE
00013C8A 4442                       		neg.w	d2
00013C8C                            
00013C8C                            loc_13ADE:
00013C8C 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00013C92 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00013C96 6400                       		bcc.s	loc_13AF0	; if yes, branch
00013C98 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00013C9E                            
00013C9E                            loc_13AF0:
00013C9E 4442                       		neg.w	d2
00013CA0 0642 0400                  		addi.w	#$400,d2
00013CA4 6A00                       		bpl.s	loc_13AFA
00013CA6 7400                       		moveq	#0,d2
00013CA8                            
00013CA8                            loc_13AFA:
00013CA8 E04A                       		lsr.w	#8,d2
00013CAA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013CAE 1228 0022                  		move.b	$22(a0),d1
00013CB2 0201 0001                  		andi.b	#1,d1
00013CB6 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013CBC 8328 0001                  		or.b	d1,1(a0)
00013CC0 6000 FEF8                  		bra.w	SAnim_Do2
00013CC4                            ; ===========================================================================
00013CC4                            
00013CC4                            SAnim_Push:				; XREF: SAnim_RollJump
00013CC4 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013CC8 6B00                       		bmi.s	loc_13B1E
00013CCA 4442                       		neg.w	d2
00013CCC                            
00013CCC                            loc_13B1E:
00013CCC 0642 0800                  		addi.w	#$800,d2
00013CD0 6A00                       		bpl.s	loc_13B26
00013CD2 7400                       		moveq	#0,d2
00013CD4                            
00013CD4                            loc_13B26:
00013CD4 EC4A                       		lsr.w	#6,d2
00013CD6 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013CDA 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00013CE0 1228 0022                  		move.b	$22(a0),d1
00013CE4 0201 0001                  		andi.b	#1,d1
00013CE8 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013CEE 8328 0001                  		or.b	d1,1(a0)
00013CF2 6000 FEC6                  		bra.w	SAnim_Do2
00013CF6                            ; End of function Sonic_Animate
00013CF6                            
00013CF6                            ; ===========================================================================
00013CF6                            SonicAniData:
00013CF6                            	include "_anim\Sonic.asm"
00013CF6                            ; ---------------------------------------------------------------------------
00013CF6                            ; Animation script - Sonic
00013CF6                            ; ---------------------------------------------------------------------------
00013CF6 0000                       		dc.w SonAni_Walk-SonicAniData
00013CF8 0000                       		dc.w SonAni_Run-SonicAniData
00013CFA 0000                       		dc.w SonAni_Roll-SonicAniData
00013CFC 0000                       		dc.w SonAni_Roll2-SonicAniData
00013CFE 0000                       		dc.w SonAni_Push-SonicAniData
00013D00 0000                       		dc.w SonAni_Wait-SonicAniData
00013D02 0000                       		dc.w SonAni_Balance-SonicAniData
00013D04 0000                       		dc.w SonAni_LookUp-SonicAniData
00013D06 0000                       		dc.w SonAni_Duck-SonicAniData
00013D08 0000                       		dc.w SonAni_Warp1-SonicAniData
00013D0A 0000                       		dc.w SonAni_Warp2-SonicAniData
00013D0C 0000                       		dc.w SonAni_Warp3-SonicAniData
00013D0E 0000                       		dc.w SonAni_Warp4-SonicAniData
00013D10 0000                       		dc.w SonAni_Stop-SonicAniData
00013D12 0000                       		dc.w SonAni_Float1-SonicAniData
00013D14 0000                       		dc.w SonAni_Float2-SonicAniData
00013D16 0000                       		dc.w SonAni_Spring-SonicAniData
00013D18 0000                       		dc.w SonAni_LZHang-SonicAniData
00013D1A 0000                       		dc.w SonAni_Leap1-SonicAniData
00013D1C 0000                       		dc.w SonAni_Leap2-SonicAniData
00013D1E 0000                       		dc.w SonAni_Surf-SonicAniData
00013D20 0000                       		dc.w SonAni_Bubble-SonicAniData
00013D22 0000                       		dc.w SonAni_Death1-SonicAniData
00013D24 0000                       		dc.w SonAni_Drown-SonicAniData
00013D26 0000                       		dc.w SonAni_Death2-SonicAniData
00013D28 0000                       		dc.w SonAni_Shrink-SonicAniData
00013D2A 0000                       		dc.w SonAni_Hurt-SonicAniData
00013D2C 0000                       		dc.w SonAni_LZSlide-SonicAniData
00013D2E 0000                       		dc.w SonAni_Blank-SonicAniData
00013D30 0000                       		dc.w SonAni_Float3-SonicAniData
00013D32 0000                       		dc.w SonAni_Float4-SonicAniData
00013D34 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00013D3C FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00013D44 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00013D4C FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00013D54 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00013D5C 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00013D72 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00013D76 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00013D7A 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00013D7E 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00013D82 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00013D86 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00013D8A 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00013D8E 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00013D92 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00013D96 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00013D9E 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00013DA2 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00013DA6 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00013DAC 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00013DB2 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00013DB6 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00013DBE 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00013DC2 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00013DC6 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00013DCA 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00013DD4 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00013DD8 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00013DDC 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00013DE0 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00013DE8 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00013DEC                            		even
00013DEC                            		even
00013DEC                            
00013DEC                            ; ---------------------------------------------------------------------------
00013DEC                            ; Sonic	pattern	loading	subroutine
00013DEC                            ; ---------------------------------------------------------------------------
00013DEC                            
00013DEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DEC                            
00013DEC                            
00013DEC                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00013DEC 7000                       		moveq	#0,d0
00013DEE 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00013DF2 B038 F766                  		cmp.b	($FFFFF766).w,d0
00013DF6 6700                       		beq.s	locret_13C96
00013DF8 11C0 F766                  		move.b	d0,($FFFFF766).w
00013DFC 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00013E02 D040                       		add.w	d0,d0
00013E04 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013E08 7200                       		moveq	#0,d1
00013E0A 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00013E0C 5301                       		subq.b	#1,d1
00013E0E 6B00                       		bmi.s	locret_13C96
00013E10 47F8 C800                  		lea	($FFFFC800).w,a3
00013E14 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00013E1A                            
00013E1A                            SPLC_ReadEntry:
00013E1A 7400                       		moveq	#0,d2
00013E1C 141A                       		move.b	(a2)+,d2
00013E1E 3002                       		move.w	d2,d0
00013E20 E808                       		lsr.b	#4,d0
00013E22 E14A                       		lsl.w	#8,d2
00013E24 141A                       		move.b	(a2)+,d2
00013E26 EB4A                       		lsl.w	#5,d2
00013E28 43F9 0000 0000             		lea	(Art_Sonic).l,a1
00013E2E D3C2                       		adda.l	d2,a1
00013E30                            
00013E30                            SPLC_LoadTile:
00013E30 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00013E34 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00013E38 47EB 0020                  		lea	$20(a3),a3	; next tile
00013E3C 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00013E40                            
00013E40 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00013E44                            
00013E44                            locret_13C96:
00013E44 4E75                       		rts	
00013E46                            ; End of function LoadSonicDynPLC
00013E46                            
00013E46                            ; ===========================================================================
00013E46                            ; ---------------------------------------------------------------------------
00013E46                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00013E46                            ; ---------------------------------------------------------------------------
00013E46                            
00013E46                            Obj0A:					; XREF: Obj_Index
00013E46 7000                       		moveq	#0,d0
00013E48 1028 0024                  		move.b	$24(a0),d0
00013E4C 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00013E50 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00013E54                            ; ===========================================================================
00013E54 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00013E58 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00013E5C 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00013E60 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00013E64 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00013E66                            ; ===========================================================================
00013E66                            
00013E66                            Obj0A_Main:				; XREF: Obj0A_Index
00013E66 5428 0024                  		addq.b	#2,$24(a0)
00013E6A 217C 0001 2B0E 0004        		move.l	#Map_obj64,4(a0)
00013E72 317C 8348 0002             		move.w	#$8348,2(a0)
00013E78 117C 0084 0001             		move.b	#$84,1(a0)
00013E7E 117C 0010 0019             		move.b	#$10,$19(a0)
00013E84 117C 0001 0018             		move.b	#1,$18(a0)
00013E8A 1028 0028                  		move.b	$28(a0),d0
00013E8E 6A00                       		bpl.s	loc_13D00
00013E90 5028 0024                  		addq.b	#8,$24(a0)
00013E94 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00013E9C 317C 0440 0002             		move.w	#$440,2(a0)
00013EA2 0240 007F                  		andi.w	#$7F,d0
00013EA6 1140 0033                  		move.b	d0,$33(a0)
00013EAA 6000 0000                  		bra.w	Obj0A_Countdown
00013EAE                            ; ===========================================================================
00013EAE                            
00013EAE                            loc_13D00:
00013EAE 1140 001C                  		move.b	d0,$1C(a0)
00013EB2 3168 0008 0030             		move.w	8(a0),$30(a0)
00013EB8 317C FF78 0012             		move.w	#-$88,$12(a0)
00013EBE                            
00013EBE                            Obj0A_Animate:				; XREF: Obj0A_Index
00013EBE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013EC4 4EB9 0000 A826             		jsr	AnimateSprite
00013ECA                            
00013ECA                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00013ECA 3038 F646                  		move.w	($FFFFF646).w,d0
00013ECE B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00013ED2 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00013ED4 117C 0006 0024             		move.b	#6,$24(a0)
00013EDA 5E28 001C                  		addq.b	#7,$1C(a0)
00013EDE 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00013EE4 6700                       		beq.s	Obj0A_Display
00013EE6 6000                       		bra.s	Obj0A_Display
00013EE8                            ; ===========================================================================
00013EE8                            
00013EE8                            Obj0A_Wobble:
00013EE8 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013EEC 6700                       		beq.s	loc_13D44
00013EEE 5868 0030                  		addq.w	#4,$30(a0)
00013EF2                            
00013EF2                            loc_13D44:
00013EF2 1028 0026                  		move.b	$26(a0),d0
00013EF6 5228 0026                  		addq.b	#1,$26(a0)
00013EFA 0240 007F                  		andi.w	#$7F,d0
00013EFE 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013F04 1031 0000                  		move.b	(a1,d0.w),d0
00013F08 4880                       		ext.w	d0
00013F0A D068 0030                  		add.w	$30(a0),d0
00013F0E 3140 0008                  		move.w	d0,8(a0)
00013F12 6100                       		bsr.s	Obj0A_ShowNumber
00013F14 4EBA 9838                  		jsr	SpeedToPos
00013F18 4A28 0001                  		tst.b	1(a0)
00013F1C 6A00                       		bpl.s	Obj0A_Delete
00013F1E 4EFA 9854                  		jmp	DisplaySprite
00013F22                            ; ===========================================================================
00013F22                            
00013F22                            Obj0A_Delete:
00013F22 4EFA 988C                  		jmp	DeleteObject
00013F26                            ; ===========================================================================
00013F26                            
00013F26                            Obj0A_Display:				; XREF: Obj0A_Index
00013F26 6100                       		bsr.s	Obj0A_ShowNumber
00013F28 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013F2E 4EB9 0000 A826             		jsr	AnimateSprite
00013F34 4EFA 983E                  		jmp	DisplaySprite
00013F38                            ; ===========================================================================
00013F38                            
00013F38                            Obj0A_Delete2:				; XREF: Obj0A_Index
00013F38 4EFA 9876                  		jmp	DeleteObject
00013F3C                            ; ===========================================================================
00013F3C                            
00013F3C                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00013F3C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00013F42 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00013F44 5368 0038                  		subq.w	#1,$38(a0)
00013F48 6600                       		bne.s	Obj0A_Display2
00013F4A 117C 000E 0024             		move.b	#$E,$24(a0)
00013F50 5E28 001C                  		addq.b	#7,$1C(a0)
00013F54 60D0                       		bra.s	Obj0A_Display
00013F56                            ; ===========================================================================
00013F56                            
00013F56                            Obj0A_Display2:
00013F56 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013F5C 4EB9 0000 A826             		jsr	AnimateSprite
00013F62 4A28 0001                  		tst.b	1(a0)
00013F66 6A00                       		bpl.s	Obj0A_Delete3
00013F68 4EFA 980A                  		jmp	DisplaySprite
00013F6C                            ; ===========================================================================
00013F6C                            
00013F6C                            Obj0A_Delete3:
00013F6C 4EFA 9842                  		jmp	DeleteObject
00013F70                            ; ===========================================================================
00013F70                            
00013F70                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00013F70 4A68 0038                  		tst.w	$38(a0)
00013F74 6700                       		beq.s	locret_13E1A
00013F76 5368 0038                  		subq.w	#1,$38(a0)
00013F7A 6600                       		bne.s	locret_13E1A
00013F7C 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00013F82 6400                       		bcc.s	locret_13E1A
00013F84 317C 000F 0038             		move.w	#$F,$38(a0)
00013F8A 4268 0012                  		clr.w	$12(a0)
00013F8E 117C 0080 0001             		move.b	#$80,1(a0)
00013F94 3028 0008                  		move.w	8(a0),d0
00013F98 9078 F700                  		sub.w	($FFFFF700).w,d0
00013F9C 0640 0080                  		addi.w	#$80,d0
00013FA0 3140 0008                  		move.w	d0,8(a0)
00013FA4 3028 000C                  		move.w	$C(a0),d0
00013FA8 9078 F704                  		sub.w	($FFFFF704).w,d0
00013FAC 0640 0080                  		addi.w	#$80,d0
00013FB0 3140 000A                  		move.w	d0,$A(a0)
00013FB4 117C 000C 0024             		move.b	#$C,$24(a0)
00013FBA                            
00013FBA                            locret_13E1A:
00013FBA 4E75                       		rts	
00013FBC                            ; ===========================================================================
00013FBC                            Obj0A_WobbleData:
00013FBC 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00013FCD 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00013FDE 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00013FEF 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00013FFF FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001400C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014019 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014026 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014033 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001403C                            ; ===========================================================================
0001403C                            
0001403C                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001403C 4A68 002C                  		tst.w	$2C(a0)
00014040 6600 0000                  		bne.w	loc_13F86
00014044 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001404A 6400 0000                  		bcc.w	locret_1408C
0001404E 0838 0006 D022             		btst	#6,($FFFFD022).w
00014054 6700 0000                  		beq.w	locret_1408C
00014058 5368 0038                  		subq.w	#1,$38(a0)
0001405C 6A00 0000                  		bpl.w	loc_13FAC
00014060 317C 003B 0038             		move.w	#59,$38(a0)
00014066 317C 0001 0036             		move.w	#1,$36(a0)
0001406C 4EB9 0000 29B4             		jsr	(RandomNumber).l
00014072 0240 0001                  		andi.w	#1,d0
00014076 1140 0034                  		move.b	d0,$34(a0)
0001407A 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001407E 0C40 0019                  		cmpi.w	#$19,d0
00014082 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014084 0C40 0014                  		cmpi.w	#$14,d0
00014088 6700                       		beq.s	Obj0A_WarnSound
0001408A 0C40 000F                  		cmpi.w	#$F,d0
0001408E 6700                       		beq.s	Obj0A_WarnSound
00014090 0C40 000C                  		cmpi.w	#$C,d0
00014094 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014096 6600                       		bne.s	loc_13F02
00014098 303C 0092                  		move.w	#$92,d0
0001409C 4EB9 0000 1396             		jsr	(PlaySound).l	; play countdown music
000140A2                            
000140A2                            loc_13F02:
000140A2 5328 0032                  		subq.b	#1,$32(a0)
000140A6 6A00                       		bpl.s	Obj0A_ReduceAir
000140A8 1168 0033 0032             		move.b	$33(a0),$32(a0)
000140AE 08E8 0007 0036             		bset	#7,$36(a0)
000140B4 6000                       		bra.s	Obj0A_ReduceAir
000140B6                            ; ===========================================================================
000140B6                            
000140B6                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000140B6 303C 00C2                  		move.w	#$C2,d0
000140BA 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000140C0                            
000140C0                            Obj0A_ReduceAir:
000140C0 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000140C4 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000140C8 6100 0000                  		bsr.w	ResumeMusic
000140CC 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000140D2 303C 00B2                  		move.w	#$B2,d0
000140D6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play drowning sound
000140DC 117C 000A 0034             		move.b	#$A,$34(a0)
000140E2 317C 0001 0036             		move.w	#1,$36(a0)
000140E8 317C 0078 002C             		move.w	#$78,$2C(a0)
000140EE 2F08                       		move.l	a0,-(sp)
000140F0 41F8 D000                  		lea	($FFFFD000).w,a0
000140F4 6100 F860                  		bsr.w	Sonic_ResetOnFloor
000140F8 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000140FE 08E8 0001 0022             		bset	#1,$22(a0)
00014104 08E8 0007 0002             		bset	#7,2(a0)
0001410A 317C 0000 0012             		move.w	#0,$12(a0)
00014110 317C 0000 0010             		move.w	#0,$10(a0)
00014116 317C 0000 0014             		move.w	#0,$14(a0)
0001411C 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014122 205F                       		movea.l	(sp)+,a0
00014124 4E75                       		rts	
00014126                            ; ===========================================================================
00014126                            
00014126                            loc_13F86:
00014126 5368 002C                  		subq.w	#1,$2C(a0)
0001412A 6600                       		bne.s	loc_13F94
0001412C 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014132 4E75                       		rts	
00014134                            ; ===========================================================================
00014134                            
00014134                            loc_13F94:
00014134 2F08                       		move.l	a0,-(sp)
00014136 41F8 D000                  		lea	($FFFFD000).w,a0
0001413A 4EBA 9612                  		jsr	SpeedToPos
0001413E 0668 0010 0012             		addi.w	#$10,$12(a0)
00014144 205F                       		movea.l	(sp)+,a0
00014146 6000                       		bra.s	loc_13FAC
00014148                            ; ===========================================================================
00014148                            
00014148                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014148 6000                       		bra.s	Obj0A_MakeItem
0001414A                            ; ===========================================================================
0001414A                            
0001414A                            loc_13FAC:
0001414A 4A68 0036                  		tst.w	$36(a0)
0001414E 6700 0000                  		beq.w	locret_1408C
00014152 5368 003A                  		subq.w	#1,$3A(a0)
00014156 6A00 0000                  		bpl.w	locret_1408C
0001415A                            
0001415A                            Obj0A_MakeItem:
0001415A 4EB9 0000 29B4             		jsr	(RandomNumber).l
00014160 0240 000F                  		andi.w	#$F,d0
00014164 3140 003A                  		move.w	d0,$3A(a0)
00014168 4EBA 9A90                  		jsr	SingleObjLoad
0001416C 6600 0000                  		bne.w	locret_1408C
00014170 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014174 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001417A 7006                       		moveq	#6,d0
0001417C 0838 0000 D022             		btst	#0,($FFFFD022).w
00014182 6700                       		beq.s	loc_13FF2
00014184 4440                       		neg.w	d0
00014186 137C 0040 0026             		move.b	#$40,$26(a1)
0001418C                            
0001418C                            loc_13FF2:
0001418C D169 0008                  		add.w	d0,8(a1)
00014190 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014196 137C 0006 0028             		move.b	#6,$28(a1)
0001419C 4A68 002C                  		tst.w	$2C(a0)
000141A0 6700 0000                  		beq.w	loc_1403E
000141A4 0268 0007 003A             		andi.w	#7,$3A(a0)
000141AA 0668 0000 003A             		addi.w	#0,$3A(a0)
000141B0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000141B4 0440 000C                  		subi.w	#$C,d0
000141B8 3340 000C                  		move.w	d0,$C(a1)
000141BC 4EB9 0000 29B4             		jsr	(RandomNumber).l
000141C2 1340 0026                  		move.b	d0,$26(a1)
000141C6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000141CA 0200 0003                  		andi.b	#3,d0
000141CE 6600                       		bne.s	loc_14082
000141D0 137C 000E 0028             		move.b	#$E,$28(a1)
000141D6 6000                       		bra.s	loc_14082
000141D8                            ; ===========================================================================
000141D8                            
000141D8                            loc_1403E:
000141D8 0828 0007 0036             		btst	#7,$36(a0)
000141DE 6700                       		beq.s	loc_14082
000141E0 3438 FE14                  		move.w	($FFFFFE14).w,d2
000141E4 E24A                       		lsr.w	#1,d2
000141E6 4EB9 0000 29B4             		jsr	(RandomNumber).l
000141EC 0240 0003                  		andi.w	#3,d0
000141F0 6600                       		bne.s	loc_1406A
000141F2 08E8 0006 0036             		bset	#6,$36(a0)
000141F8 6600                       		bne.s	loc_14082
000141FA 1342 0028                  		move.b	d2,$28(a1)
000141FE 337C 001C 0038             		move.w	#$1C,$38(a1)
00014204                            
00014204                            loc_1406A:
00014204 4A28 0034                  		tst.b	$34(a0)
00014208 6600                       		bne.s	loc_14082
0001420A 08E8 0006 0036             		bset	#6,$36(a0)
00014210 6600                       		bne.s	loc_14082
00014212 1342 0028                  		move.b	d2,$28(a1)
00014216 337C 001C 0038             		move.w	#$1C,$38(a1)
0001421C                            
0001421C                            loc_14082:
0001421C 5328 0034                  		subq.b	#1,$34(a0)
00014220 6A00                       		bpl.s	locret_1408C
00014222 4268 0036                  		clr.w	$36(a0)
00014226                            
00014226                            locret_1408C:
00014226 4E75                       		rts	
00014228                            
00014228                            ; ---------------------------------------------------------------------------
00014228                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014228                            ; ---------------------------------------------------------------------------
00014228                            
00014228                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014228                            
00014228                            
00014228                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014228 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001422E                             
0001422E                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
0001422E                             
0001422E 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014232                             
00014232 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014238 6600                       		bne.s	Air_GetBgm2	; if not, branch
0001423A 43F9 0000 3798             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014240 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014242                             
00014242                            Air_GetBgm2:
00014242 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014248 6600                       		bne.s	Air_GetBgm3	; if not, branch
0001424A 43F9 0000 37A0             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014250 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014252                             
00014252                            Air_GetBgm3:
00014252 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014258 6600                       		bne.s	Air_GetBgm4	; if not, branch
0001425A 43F9 0000 37A6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014260 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014262                             
00014262                            Air_GetBgm4:
00014262 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014268 6600                       		bne.s	Air_PlayMusic	; if not, branch
0001426A 43F9 0000 37AC             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014270                             
00014270                            Air_PlayMusic:
00014270 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014274                             
00014274                            loc_140A6:
00014274 4EB9 0000 1396             		jsr	(PlaySound).l
0001427A                             
0001427A                            ; NineKode ends here
0001427A                            
0001427A                            loc_140AC:
0001427A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014280 4238 D372                  		clr.b	($FFFFD372).w
00014284 4E75                       		rts	
00014286                            ; End of function ResumeMusic
00014286                            
00014286                            ; ===========================================================================
00014286                            Ani_obj0A:
00014286                            	include "_anim\obj0A.asm"
00014286                            ; ---------------------------------------------------------------------------
00014286                            ; Animation script - countdown numbers and bubbles (LZ)
00014286                            ; ---------------------------------------------------------------------------
00014286 0000                       		dc.w byte_140D6-Ani_obj0A
00014288 0000                       		dc.w byte_140E0-Ani_obj0A
0001428A 0000                       		dc.w byte_140EA-Ani_obj0A
0001428C 0000                       		dc.w byte_140F4-Ani_obj0A
0001428E 0000                       		dc.w byte_140FE-Ani_obj0A
00014290 0000                       		dc.w byte_14108-Ani_obj0A
00014292 0000                       		dc.w byte_14112-Ani_obj0A
00014294 0000                       		dc.w byte_14118-Ani_obj0A
00014296 0000                       		dc.w byte_14120-Ani_obj0A
00014298 0000                       		dc.w byte_14128-Ani_obj0A
0001429A 0000                       		dc.w byte_14130-Ani_obj0A
0001429C 0000                       		dc.w byte_14138-Ani_obj0A
0001429E 0000                       		dc.w byte_14140-Ani_obj0A
000142A0 0000                       		dc.w byte_14148-Ani_obj0A
000142A2 0000                       		dc.w byte_1414A-Ani_obj0A
000142A4 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000142AE 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000142B8 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000142C2 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000142CC 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000142D6 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000142E0 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000142E6 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000142EE 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000142F6 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000142FE 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014306 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001430E 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014316 0EFC                       byte_14148:	dc.b $E, $FC
00014318 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001431E                            		even
0001431E                            		even
0001431E                            
0001431E                            ; ---------------------------------------------------------------------------
0001431E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001431E                            ; ---------------------------------------------------------------------------
0001431E                            Map_obj0A:
0001431E                            	include "_maps\obj0A.asm"
0001431E                            ; ---------------------------------------------------------------------------
0001431E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001431E                            ; ---------------------------------------------------------------------------
0001431E 0000                       		dc.w byte_14152-Map_obj0A
00014320 01                         byte_14152:	dc.b 1
00014321 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014326                            		even
00014326                            		even
00014326                            
00014326                            ; ===========================================================================
00014326                            ; ---------------------------------------------------------------------------
00014326                            ; Object 38 - shield and invincibility stars
00014326                            ; ---------------------------------------------------------------------------
00014326                            
00014326                            Obj38:					; XREF: Obj_Index
00014326 7000                       		moveq	#0,d0
00014328 1028 0024                  		move.b	$24(a0),d0
0001432C 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014330 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014334                            ; ===========================================================================
00014334 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014336 0000                       		dc.w Obj38_Shield-Obj38_Index
00014338 0000                       		dc.w Obj38_Stars-Obj38_Index
0001433A                            ; ===========================================================================
0001433A                            
0001433A                            Obj38_Main:				; XREF: Obj38_Index
0001433A 5428 0024                  		addq.b	#2,$24(a0)
0001433E 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014346 117C 0004 0001             		move.b	#4,1(a0)
0001434C 117C 0001 0018             		move.b	#1,$18(a0)
00014352 117C 0010 0019             		move.b	#$10,$19(a0)
00014358 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001435C 6600                       		bne.s	Obj38_DoStars	; if not, branch
0001435E 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014364 4E75                       		rts	
00014366                            ; ===========================================================================
00014366                            
00014366                            Obj38_DoStars:
00014366 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
0001436A 317C 055C 0002             		move.w	#$55C,2(a0)
00014370 4E75                       		rts	
00014372                            ; ===========================================================================
00014372                            
00014372                            Obj38_Shield:				; XREF: Obj38_Index
00014372 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014376 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014378 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001437C 6700                       		beq.s	Obj38_Delete	; if not, branch
0001437E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014384 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001438A 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014390 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014396 4EB9 0000 A826             		jsr	AnimateSprite
0001439C 4EFA 93D6                  		jmp	DisplaySprite
000143A0                            ; ===========================================================================
000143A0                            
000143A0                            Obj38_RmvShield:
000143A0 4E75                       		rts	
000143A2                            ; ===========================================================================
000143A2                            
000143A2                            Obj38_Delete:
000143A2 4EFA 940C                  		jmp	DeleteObject
000143A6                            ; ===========================================================================
000143A6                            
000143A6                            Obj38_Stars:				; XREF: Obj38_Index
000143A6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000143AA 6700                       		beq.s	Obj38_Delete2	; if not, branch
000143AC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000143B0 1228 001C                  		move.b	$1C(a0),d1
000143B4 5301                       		subq.b	#1,d1
000143B6 6000                       		bra.s	Obj38_StarTrail
000143B8                            ; ===========================================================================
000143B8 E909                       		lsl.b	#4,d1
000143BA 5801                       		addq.b	#4,d1
000143BC 9001                       		sub.b	d1,d0
000143BE 1228 0030                  		move.b	$30(a0),d1
000143C2 9001                       		sub.b	d1,d0
000143C4 5801                       		addq.b	#4,d1
000143C6 0201 000F                  		andi.b	#$F,d1
000143CA 1141 0030                  		move.b	d1,$30(a0)
000143CE 6000                       		bra.s	Obj38_StarTrail2a
000143D0                            ; ===========================================================================
000143D0                            
000143D0                            Obj38_StarTrail:			; XREF: Obj38_Stars
000143D0 E709                       		lsl.b	#3,d1
000143D2 1401                       		move.b	d1,d2
000143D4 D201                       		add.b	d1,d1
000143D6 D202                       		add.b	d2,d1
000143D8 5801                       		addq.b	#4,d1
000143DA 9001                       		sub.b	d1,d0
000143DC 1228 0030                  		move.b	$30(a0),d1
000143E0 9001                       		sub.b	d1,d0
000143E2 5801                       		addq.b	#4,d1
000143E4 0C01 0018                  		cmpi.b	#$18,d1
000143E8 6500                       		bcs.s	Obj38_StarTrail2
000143EA 7200                       		moveq	#0,d1
000143EC                            
000143EC                            Obj38_StarTrail2:
000143EC 1141 0030                  		move.b	d1,$30(a0)
000143F0                            
000143F0                            Obj38_StarTrail2a:
000143F0 43F8 CB00                  		lea	($FFFFCB00).w,a1
000143F4 43F1 0000                  		lea	(a1,d0.w),a1
000143F8 3159 0008                  		move.w	(a1)+,8(a0)
000143FC 3159 000C                  		move.w	(a1)+,$C(a0)
00014400 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014406 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001440C 4EB9 0000 A826             		jsr	AnimateSprite
00014412 4EFA 9360                  		jmp	DisplaySprite
00014416                            ; ===========================================================================
00014416                            
00014416                            Obj38_Delete2:				; XREF: Obj38_Stars
00014416 4EFA 9398                  		jmp	DeleteObject
0001441A                            ; ===========================================================================
0001441A                            ; ---------------------------------------------------------------------------
0001441A                            ; Object 4A - special stage entry from beta
0001441A                            ; ---------------------------------------------------------------------------
0001441A                            
0001441A                            Obj4A:					; XREF: Obj_Index
0001441A 7000                       		moveq	#0,d0
0001441C 1028 0024                  		move.b	$24(a0),d0
00014420 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014424 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014428                            ; ===========================================================================
00014428 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001442A 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001442C 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
0001442E                            ; ===========================================================================
0001442E                            
0001442E                            Obj4A_Main:				; XREF: Obj4A_Index
0001442E 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014432 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014434 4E75                       		rts	
00014436                            ; ===========================================================================
00014436                            
00014436                            Obj4A_Main2:
00014436 5428 0024                  		addq.b	#2,$24(a0)
0001443A 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014442 117C 0004 0001             		move.b	#4,1(a0)
00014448 117C 0001 0018             		move.b	#1,$18(a0)
0001444E 117C 0038 0019             		move.b	#$38,$19(a0)
00014454 317C 0541 0002             		move.w	#$541,2(a0)
0001445A 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014460                            
00014460                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014460 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014466 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001446C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014472 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014478 4EB9 0000 A826             		jsr	AnimateSprite
0001447E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014484 6600                       		bne.s	Obj4A_Display
00014486 4A38 D000                  		tst.b	($FFFFD000).w
0001448A 6700                       		beq.s	Obj4A_Display
0001448C 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014492 303C 00A8                  		move.w	#$A8,d0
00014496 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
0001449C                            
0001449C                            Obj4A_Display:
0001449C 4EFA 92D6                  		jmp	DisplaySprite
000144A0                            ; ===========================================================================
000144A0                            
000144A0                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000144A0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000144A4 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000144A6 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000144AC 4EFA 9302                  		jmp	DeleteObject
000144B0                            ; ===========================================================================
000144B0                            
000144B0                            Obj4A_Wait:
000144B0 4E75                       		rts	
000144B2                            ; ===========================================================================
000144B2                            ; ---------------------------------------------------------------------------
000144B2                            ; Object 08 - water splash (LZ)
000144B2                            ; ---------------------------------------------------------------------------
000144B2                            
000144B2                            Obj08:					; XREF: Obj_Index
000144B2 7000                       		moveq	#0,d0
000144B4 1028 0024                  		move.b	$24(a0),d0
000144B8 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000144BC 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000144C0                            ; ===========================================================================
000144C0 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000144C2 0000                       		dc.w Obj08_Display-Obj08_Index
000144C4 0000                       		dc.w Obj08_Delete-Obj08_Index
000144C6                            ; ===========================================================================
000144C6                            
000144C6                            Obj08_Main:				; XREF: Obj08_Index
000144C6 5428 0024                  		addq.b	#2,$24(a0)
000144CA 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000144D2 0028 0004 0001             		ori.b	#4,1(a0)
000144D8 117C 0001 0018             		move.b	#1,$18(a0)
000144DE 117C 0010 0019             		move.b	#$10,$19(a0)
000144E4 317C 4259 0002             		move.w	#$4259,2(a0)
000144EA 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
000144F0                            
000144F0                            Obj08_Display:				; XREF: Obj08_Index
000144F0 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
000144F6 43F9 0000 0000             		lea	(Ani_obj08).l,a1
000144FC 4EB9 0000 A826             		jsr	AnimateSprite
00014502 4EFA 9270                  		jmp	DisplaySprite
00014506                            ; ===========================================================================
00014506                            
00014506                            Obj08_Delete:				; XREF: Obj08_Index
00014506 4EFA 92A8                  		jmp	DeleteObject	; delete when animation	is complete
0001450A                            ; ===========================================================================
0001450A                            Ani_obj38:
0001450A                            	include "_anim\obj38.asm"
0001450A                            ; ---------------------------------------------------------------------------
0001450A                            ; Animation script - shield and invincibility stars
0001450A                            ; ---------------------------------------------------------------------------
0001450A 0000                       		dc.w byte_14356-Ani_obj38
0001450C 0000                       		dc.w byte_1435E-Ani_obj38
0001450E 0000                       		dc.w byte_14364-Ani_obj38
00014510 0000                       		dc.w byte_1437E-Ani_obj38
00014512 0000                       		dc.w byte_14398-Ani_obj38
00014514 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001451C 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014522 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014533 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001453C 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001454D 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014556 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014567 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014570                            		even
00014570                            		even
00014570                            
00014570                            ; ---------------------------------------------------------------------------
00014570                            ; Sprite mappings - shield and invincibility stars
00014570                            ; ---------------------------------------------------------------------------
00014570                            Map_obj38:
00014570                            	include "_maps\obj38.asm"
00014570                            ; ---------------------------------------------------------------------------
00014570                            ; Sprite mappings - shield and invincibility stars
00014570                            ; ---------------------------------------------------------------------------
00014570 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014574 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014578 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
0001457C 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014580 04                         byte_143C2:	dc.b 4
00014581 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014586 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
0001458B 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014590 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014595 04                         byte_143D7:	dc.b 4
00014596 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
0001459B E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000145A0 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000145A5 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000145AA 04                         byte_143EC:	dc.b 4
000145AB E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000145B0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000145B5 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000145BA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000145BF 04                         byte_14401:	dc.b 4
000145C0 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000145C5 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000145CA 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000145CF 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000145D4 04                         byte_14416:	dc.b 4
000145D5 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000145DA E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000145DF 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000145E4 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000145E9 04                         byte_1442B:	dc.b 4
000145EA E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000145EF E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000145F4 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000145F9 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000145FE 04                         byte_14440:	dc.b 4
000145FF E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014604 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014609 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0001460E 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014614 00                         		even
00014614 00                         		even
00014614                            
00014614                            Ani_obj4A:
00014614                            	include "_anim\obj4A.asm"
00014614                            ; ---------------------------------------------------------------------------
00014614                            ; Animation script - special stage entry effect from beta
00014614                            ; ---------------------------------------------------------------------------
00014614 0000                       		dc.w byte_14458-Ani_obj4A
00014616 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
0001462A                            		even
0001462A                            		even
0001462A                            
0001462A                            ; ---------------------------------------------------------------------------
0001462A                            ; Sprite mappings - special stage entry	from beta
0001462A                            ; ---------------------------------------------------------------------------
0001462A                            Map_obj4A:
0001462A                            	include "_maps\obj4A.asm"
0001462A                            ; ---------------------------------------------------------------------------
0001462A                            ; Sprite mappings - special stage entry	from beta
0001462A                            ; ---------------------------------------------------------------------------
0001462A 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
0001462E 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014632 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014636 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
0001463A 03                         byte_1447C:	dc.b 3
0001463B F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014640 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014645 0800 1000 08               		dc.b 8,	0, $10,	0, 8
0001464A 03                         byte_1448C:	dc.b 3
0001464B F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014650 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014655 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
0001465A 05                         byte_1449C:	dc.b 5
0001465B E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014660 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014665 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
0001466A 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001466F 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014674 09                         byte_144B6:	dc.b 9
00014675 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
0001467A F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001467F 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014684 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014689 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001468E F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014693 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014698 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001469D F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000146A2 12                         byte_144E4:	dc.b $12
000146A3 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000146A8 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000146AD F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000146B2 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000146B7 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000146BC 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000146C1 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000146C6 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000146CB 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000146D0 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000146D5 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000146DA 0800 0029 20               		dc.b 8,	0, 0, $29, $20
000146DF F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
000146E4 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
000146E9 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
000146EE F800 1826 30               		dc.b $F8, 0, $18, $26, $30
000146F3 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
000146F8 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
000146FD 11                         byte_1453F:	dc.b $11
000146FE F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014703 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014708 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001470D 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014712 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014717 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001471C 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014721 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014726 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001472B 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014730 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014735 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001473A F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001473F 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014744 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014749 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001474E 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014753 09                         byte_14595:	dc.b 9
00014754 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014759 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001475E 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014763 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014768 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001476D FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014772 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014777 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001477C 04                         		dc.b 4
0001477D 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014782                            		even
00014782                            		even
00014782                            
00014782                            Ani_obj08:
00014782                            	include "_anim\obj08.asm"
00014782                            ; ---------------------------------------------------------------------------
00014782                            ; Animation script - water splash (LZ)
00014782                            ; ---------------------------------------------------------------------------
00014782 0000                       		dc.w byte_145C6-Ani_obj08
00014784 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
0001478A                            		even
0001478A                            		even
0001478A                            
0001478A                            ; ---------------------------------------------------------------------------
0001478A                            ; Sprite mappings - water splash (LZ)
0001478A                            ; ---------------------------------------------------------------------------
0001478A                            Map_obj08:
0001478A                            	include "_maps\obj08.asm"
0001478A                            ; ---------------------------------------------------------------------------
0001478A                            ; Sprite mappings - water splash (LZ)
0001478A                            ; ---------------------------------------------------------------------------
0001478A 0000                       		dc.w byte_145D2-Map_obj08
0001478C 0000                       		dc.w byte_145DD-Map_obj08
0001478E 0000                       		dc.w byte_145E8-Map_obj08
00014790 02                         byte_145D2:	dc.b 2
00014791 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014796 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001479B 02                         byte_145DD:	dc.b 2
0001479C E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000147A1 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000147A6 01                         byte_145E8:	dc.b 1
000147A7 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000147AC                            		even
000147AC                            		even
000147AC                            
000147AC                            ; ---------------------------------------------------------------------------
000147AC                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000147AC                            ; ---------------------------------------------------------------------------
000147AC                            
000147AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000147AC                            
000147AC                            
000147AC                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000147AC 0828 0003 0022             		btst	#3,$22(a0)
000147B2 6700                       		beq.s	loc_14602
000147B4 7000                       		moveq	#0,d0
000147B6 11C0 F768                  		move.b	d0,($FFFFF768).w
000147BA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000147BE 4E75                       		rts	
000147C0                            ; ===========================================================================
000147C0                            
000147C0                            loc_14602:
000147C0 7003                       		moveq	#3,d0
000147C2 11C0 F768                  		move.b	d0,($FFFFF768).w
000147C6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000147CA 1028 0026                  		move.b	$26(a0),d0
000147CE 0600 0020                  		addi.b	#$20,d0
000147D2 6A00                       		bpl.s	loc_14624
000147D4 1028 0026                  		move.b	$26(a0),d0
000147D8 6A00                       		bpl.s	loc_1461E
000147DA 5300                       		subq.b	#1,d0
000147DC                            
000147DC                            loc_1461E:
000147DC 0600 0020                  		addi.b	#$20,d0
000147E0 6000                       		bra.s	loc_14630
000147E2                            ; ===========================================================================
000147E2                            
000147E2                            loc_14624:
000147E2 1028 0026                  		move.b	$26(a0),d0
000147E6 6A00                       		bpl.s	loc_1462C
000147E8 5200                       		addq.b	#1,d0
000147EA                            
000147EA                            loc_1462C:
000147EA 0600 001F                  		addi.b	#$1F,d0
000147EE                            
000147EE                            loc_14630:
000147EE 0200 00C0                  		andi.b	#$C0,d0
000147F2 0C00 0040                  		cmpi.b	#$40,d0
000147F6 6700 0000                  		beq.w	Sonic_WalkVertL
000147FA 0C00 0080                  		cmpi.b	#$80,d0
000147FE 6700 0000                  		beq.w	Sonic_WalkCeiling
00014802 0C00 00C0                  		cmpi.b	#$C0,d0
00014806 6700 0000                  		beq.w	Sonic_WalkVertR
0001480A 3428 000C                  		move.w	$C(a0),d2
0001480E 3628 0008                  		move.w	8(a0),d3
00014812 7000                       		moveq	#0,d0
00014814 1028 0016                  		move.b	$16(a0),d0
00014818 4880                       		ext.w	d0
0001481A D440                       		add.w	d0,d2
0001481C 1028 0017                  		move.b	$17(a0),d0
00014820 4880                       		ext.w	d0
00014822 D640                       		add.w	d0,d3
00014824 49F8 F768                  		lea	($FFFFF768).w,a4
00014828 367C 0010                  		movea.w	#$10,a3
0001482C 3C3C 0000                  		move.w	#0,d6
00014830 7A0D                       		moveq	#$D,d5
00014832 6100 0000                  		bsr.w	FindFloor
00014836 3F01                       		move.w	d1,-(sp)
00014838 3428 000C                  		move.w	$C(a0),d2
0001483C 3628 0008                  		move.w	8(a0),d3
00014840 7000                       		moveq	#0,d0
00014842 1028 0016                  		move.b	$16(a0),d0
00014846 4880                       		ext.w	d0
00014848 D440                       		add.w	d0,d2
0001484A 1028 0017                  		move.b	$17(a0),d0
0001484E 4880                       		ext.w	d0
00014850 4440                       		neg.w	d0
00014852 D640                       		add.w	d0,d3
00014854 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014858 367C 0010                  		movea.w	#$10,a3
0001485C 3C3C 0000                  		move.w	#0,d6
00014860 7A0D                       		moveq	#$D,d5
00014862 6100 0000                  		bsr.w	FindFloor
00014866 301F                       		move.w	(sp)+,d0
00014868 6100 0000                  		bsr.w	Sonic_Angle
0001486C 4A41                       		tst.w	d1
0001486E 6700                       		beq.s	locret_146BE
00014870 6A00                       		bpl.s	loc_146C0
00014872 0C41 FFF2                  		cmpi.w	#-$E,d1
00014876 6D00                       		blt.s	locret_146E6
00014878 D368 000C                  		add.w	d1,$C(a0)
0001487C                            
0001487C                            locret_146BE:
0001487C 4E75                       		rts	
0001487E                            ; ===========================================================================
0001487E                            
0001487E                            loc_146C0:
0001487E 0C41 000E                  		cmpi.w	#$E,d1
00014882 6E00                       		bgt.s	loc_146CC
00014884                            
00014884                            loc_146C6:
00014884 D368 000C                  		add.w	d1,$C(a0)
00014888 4E75                       		rts	
0001488A                            ; ===========================================================================
0001488A                            
0001488A                            loc_146CC:
0001488A 4A28 0038                  		tst.b	$38(a0)
0001488E 66F4                       		bne.s	loc_146C6
00014890 08E8 0001 0022             		bset	#1,$22(a0)
00014896 08A8 0005 0022             		bclr	#5,$22(a0)
0001489C 117C 0001 001D             		move.b	#1,$1D(a0)
000148A2 4E75                       		rts	
000148A4                            ; ===========================================================================
000148A4                            
000148A4                            locret_146E6:
000148A4 4E75                       		rts	
000148A6                            ; End of function Sonic_AnglePos
000148A6                            
000148A6                            ; ===========================================================================
000148A6 2428 0008                  		move.l	8(a0),d2
000148AA 3028 0010                  		move.w	$10(a0),d0
000148AE 48C0                       		ext.l	d0
000148B0 E180                       		asl.l	#8,d0
000148B2 9480                       		sub.l	d0,d2
000148B4 2142 0008                  		move.l	d2,8(a0)
000148B8 303C 0038                  		move.w	#$38,d0
000148BC 48C0                       		ext.l	d0
000148BE E180                       		asl.l	#8,d0
000148C0 9680                       		sub.l	d0,d3
000148C2 2143 000C                  		move.l	d3,$C(a0)
000148C6 4E75                       		rts	
000148C8                            ; ===========================================================================
000148C8                            
000148C8                            locret_1470A:
000148C8 4E75                       		rts	
000148CA                            ; ===========================================================================
000148CA 2628 000C                  		move.l	$C(a0),d3
000148CE 3028 0012                  		move.w	$12(a0),d0
000148D2 0440 0038                  		subi.w	#$38,d0
000148D6 3140 0012                  		move.w	d0,$12(a0)
000148DA 48C0                       		ext.l	d0
000148DC E180                       		asl.l	#8,d0
000148DE 9680                       		sub.l	d0,d3
000148E0 2143 000C                  		move.l	d3,$C(a0)
000148E4 4E75                       		rts	
000148E6 4E75                       		rts	
000148E8                            ; ===========================================================================
000148E8 2428 0008                  		move.l	8(a0),d2
000148EC 2628 000C                  		move.l	$C(a0),d3
000148F0 3028 0010                  		move.w	$10(a0),d0
000148F4 48C0                       		ext.l	d0
000148F6 E180                       		asl.l	#8,d0
000148F8 9480                       		sub.l	d0,d2
000148FA 3028 0012                  		move.w	$12(a0),d0
000148FE 48C0                       		ext.l	d0
00014900 E180                       		asl.l	#8,d0
00014902 9680                       		sub.l	d0,d3
00014904 2142 0008                  		move.l	d2,8(a0)
00014908 2143 000C                  		move.l	d3,$C(a0)
0001490C 4E75                       		rts	
0001490E                            
0001490E                            ; ---------------------------------------------------------------------------
0001490E                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001490E                            ; ---------------------------------------------------------------------------
0001490E                            
0001490E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001490E                            
0001490E                            
0001490E                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001490E 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014912 B240                       		cmp.w	d0,d1
00014914 6F00                       		ble.s	loc_1475E
00014916 1438 F768                  		move.b	($FFFFF768).w,d2
0001491A 3200                       		move.w	d0,d1
0001491C                            
0001491C                            loc_1475E:
0001491C 0802 0000                  		btst	#0,d2
00014920 6600                       		bne.s	loc_1476A
00014922 1142 0026                  		move.b	d2,$26(a0)
00014926 4E75                       		rts	
00014928                            ; ===========================================================================
00014928                            
00014928                            loc_1476A:
00014928 1428 0026                  		move.b	$26(a0),d2
0001492C 0602 0020                  		addi.b	#$20,d2
00014930 0202 00C0                  		andi.b	#$C0,d2
00014934 1142 0026                  		move.b	d2,$26(a0)
00014938 4E75                       		rts	
0001493A                            ; End of function Sonic_Angle
0001493A                            
0001493A                            ; ---------------------------------------------------------------------------
0001493A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001493A                            ; ---------------------------------------------------------------------------
0001493A                            
0001493A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001493A                            
0001493A                            
0001493A                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
0001493A 3428 000C                  		move.w	$C(a0),d2
0001493E 3628 0008                  		move.w	8(a0),d3
00014942 7000                       		moveq	#0,d0
00014944 1028 0017                  		move.b	$17(a0),d0
00014948 4880                       		ext.w	d0
0001494A 4440                       		neg.w	d0
0001494C D440                       		add.w	d0,d2
0001494E 1028 0016                  		move.b	$16(a0),d0
00014952 4880                       		ext.w	d0
00014954 D640                       		add.w	d0,d3
00014956 49F8 F768                  		lea	($FFFFF768).w,a4
0001495A 367C 0010                  		movea.w	#$10,a3
0001495E 3C3C 0000                  		move.w	#0,d6
00014962 7A0D                       		moveq	#$D,d5
00014964 6100 0000                  		bsr.w	FindWall
00014968 3F01                       		move.w	d1,-(sp)
0001496A 3428 000C                  		move.w	$C(a0),d2
0001496E 3628 0008                  		move.w	8(a0),d3
00014972 7000                       		moveq	#0,d0
00014974 1028 0017                  		move.b	$17(a0),d0
00014978 4880                       		ext.w	d0
0001497A D440                       		add.w	d0,d2
0001497C 1028 0016                  		move.b	$16(a0),d0
00014980 4880                       		ext.w	d0
00014982 D640                       		add.w	d0,d3
00014984 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014988 367C 0010                  		movea.w	#$10,a3
0001498C 3C3C 0000                  		move.w	#0,d6
00014990 7A0D                       		moveq	#$D,d5
00014992 6100 0000                  		bsr.w	FindWall
00014996 301F                       		move.w	(sp)+,d0
00014998 6100 FF74                  		bsr.w	Sonic_Angle
0001499C 4A41                       		tst.w	d1
0001499E 6700                       		beq.s	locret_147F0
000149A0 6A00                       		bpl.s	loc_147F2
000149A2 0C41 FFF2                  		cmpi.w	#-$E,d1
000149A6 6D00 FF20                  		blt.w	locret_1470A
000149AA D368 0008                  		add.w	d1,8(a0)
000149AE                            
000149AE                            locret_147F0:
000149AE 4E75                       		rts	
000149B0                            ; ===========================================================================
000149B0                            
000149B0                            loc_147F2:
000149B0 0C41 000E                  		cmpi.w	#$E,d1
000149B4 6E00                       		bgt.s	loc_147FE
000149B6                            
000149B6                            loc_147F8:
000149B6 D368 0008                  		add.w	d1,8(a0)
000149BA 4E75                       		rts	
000149BC                            ; ===========================================================================
000149BC                            
000149BC                            loc_147FE:
000149BC 4A28 0038                  		tst.b	$38(a0)
000149C0 66F4                       		bne.s	loc_147F8
000149C2 08E8 0001 0022             		bset	#1,$22(a0)
000149C8 08A8 0005 0022             		bclr	#5,$22(a0)
000149CE 117C 0001 001D             		move.b	#1,$1D(a0)
000149D4 4E75                       		rts	
000149D6                            ; End of function Sonic_WalkVertR
000149D6                            
000149D6                            ; ---------------------------------------------------------------------------
000149D6                            ; Subroutine allowing Sonic to walk upside-down
000149D6                            ; ---------------------------------------------------------------------------
000149D6                            
000149D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149D6                            
000149D6                            
000149D6                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000149D6 3428 000C                  		move.w	$C(a0),d2
000149DA 3628 0008                  		move.w	8(a0),d3
000149DE 7000                       		moveq	#0,d0
000149E0 1028 0016                  		move.b	$16(a0),d0
000149E4 4880                       		ext.w	d0
000149E6 9440                       		sub.w	d0,d2
000149E8 0A42 000F                  		eori.w	#$F,d2
000149EC 1028 0017                  		move.b	$17(a0),d0
000149F0 4880                       		ext.w	d0
000149F2 D640                       		add.w	d0,d3
000149F4 49F8 F768                  		lea	($FFFFF768).w,a4
000149F8 367C FFF0                  		movea.w	#-$10,a3
000149FC 3C3C 1000                  		move.w	#$1000,d6
00014A00 7A0D                       		moveq	#$D,d5
00014A02 6100 0000                  		bsr.w	FindFloor
00014A06 3F01                       		move.w	d1,-(sp)
00014A08 3428 000C                  		move.w	$C(a0),d2
00014A0C 3628 0008                  		move.w	8(a0),d3
00014A10 7000                       		moveq	#0,d0
00014A12 1028 0016                  		move.b	$16(a0),d0
00014A16 4880                       		ext.w	d0
00014A18 9440                       		sub.w	d0,d2
00014A1A 0A42 000F                  		eori.w	#$F,d2
00014A1E 1028 0017                  		move.b	$17(a0),d0
00014A22 4880                       		ext.w	d0
00014A24 9640                       		sub.w	d0,d3
00014A26 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014A2A 367C FFF0                  		movea.w	#-$10,a3
00014A2E 3C3C 1000                  		move.w	#$1000,d6
00014A32 7A0D                       		moveq	#$D,d5
00014A34 6100 0000                  		bsr.w	FindFloor
00014A38 301F                       		move.w	(sp)+,d0
00014A3A 6100 FED2                  		bsr.w	Sonic_Angle
00014A3E 4A41                       		tst.w	d1
00014A40 6700                       		beq.s	locret_14892
00014A42 6A00                       		bpl.s	loc_14894
00014A44 0C41 FFF2                  		cmpi.w	#-$E,d1
00014A48 6D00 FE5A                  		blt.w	locret_146E6
00014A4C 9368 000C                  		sub.w	d1,$C(a0)
00014A50                            
00014A50                            locret_14892:
00014A50 4E75                       		rts	
00014A52                            ; ===========================================================================
00014A52                            
00014A52                            loc_14894:
00014A52 0C41 000E                  		cmpi.w	#$E,d1
00014A56 6E00                       		bgt.s	loc_148A0
00014A58                            
00014A58                            loc_1489A:
00014A58 9368 000C                  		sub.w	d1,$C(a0)
00014A5C 4E75                       		rts	
00014A5E                            ; ===========================================================================
00014A5E                            
00014A5E                            loc_148A0:
00014A5E 4A28 0038                  		tst.b	$38(a0)
00014A62 66F4                       		bne.s	loc_1489A
00014A64 08E8 0001 0022             		bset	#1,$22(a0)
00014A6A 08A8 0005 0022             		bclr	#5,$22(a0)
00014A70 117C 0001 001D             		move.b	#1,$1D(a0)
00014A76 4E75                       		rts	
00014A78                            ; End of function Sonic_WalkCeiling
00014A78                            
00014A78                            ; ---------------------------------------------------------------------------
00014A78                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014A78                            ; ---------------------------------------------------------------------------
00014A78                            
00014A78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A78                            
00014A78                            
00014A78                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014A78 3428 000C                  		move.w	$C(a0),d2
00014A7C 3628 0008                  		move.w	8(a0),d3
00014A80 7000                       		moveq	#0,d0
00014A82 1028 0017                  		move.b	$17(a0),d0
00014A86 4880                       		ext.w	d0
00014A88 9440                       		sub.w	d0,d2
00014A8A 1028 0016                  		move.b	$16(a0),d0
00014A8E 4880                       		ext.w	d0
00014A90 9640                       		sub.w	d0,d3
00014A92 0A43 000F                  		eori.w	#$F,d3
00014A96 49F8 F768                  		lea	($FFFFF768).w,a4
00014A9A 367C FFF0                  		movea.w	#-$10,a3
00014A9E 3C3C 0800                  		move.w	#$800,d6
00014AA2 7A0D                       		moveq	#$D,d5
00014AA4 6100 0000                  		bsr.w	FindWall
00014AA8 3F01                       		move.w	d1,-(sp)
00014AAA 3428 000C                  		move.w	$C(a0),d2
00014AAE 3628 0008                  		move.w	8(a0),d3
00014AB2 7000                       		moveq	#0,d0
00014AB4 1028 0017                  		move.b	$17(a0),d0
00014AB8 4880                       		ext.w	d0
00014ABA D440                       		add.w	d0,d2
00014ABC 1028 0016                  		move.b	$16(a0),d0
00014AC0 4880                       		ext.w	d0
00014AC2 9640                       		sub.w	d0,d3
00014AC4 0A43 000F                  		eori.w	#$F,d3
00014AC8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014ACC 367C FFF0                  		movea.w	#-$10,a3
00014AD0 3C3C 0800                  		move.w	#$800,d6
00014AD4 7A0D                       		moveq	#$D,d5
00014AD6 6100 0000                  		bsr.w	FindWall
00014ADA 301F                       		move.w	(sp)+,d0
00014ADC 6100 FE30                  		bsr.w	Sonic_Angle
00014AE0 4A41                       		tst.w	d1
00014AE2 6700                       		beq.s	locret_14934
00014AE4 6A00                       		bpl.s	loc_14936
00014AE6 0C41 FFF2                  		cmpi.w	#-$E,d1
00014AEA 6D00 FDDC                  		blt.w	locret_1470A
00014AEE 9368 0008                  		sub.w	d1,8(a0)
00014AF2                            
00014AF2                            locret_14934:
00014AF2 4E75                       		rts	
00014AF4                            ; ===========================================================================
00014AF4                            
00014AF4                            loc_14936:
00014AF4 0C41 000E                  		cmpi.w	#$E,d1
00014AF8 6E00                       		bgt.s	loc_14942
00014AFA                            
00014AFA                            loc_1493C:
00014AFA 9368 0008                  		sub.w	d1,8(a0)
00014AFE 4E75                       		rts	
00014B00                            ; ===========================================================================
00014B00                            
00014B00                            loc_14942:
00014B00 4A28 0038                  		tst.b	$38(a0)
00014B04 66F4                       		bne.s	loc_1493C
00014B06 08E8 0001 0022             		bset	#1,$22(a0)
00014B0C 08A8 0005 0022             		bclr	#5,$22(a0)
00014B12 117C 0001 001D             		move.b	#1,$1D(a0)
00014B18 4E75                       		rts	
00014B1A                            ; End of function Sonic_WalkVertL
00014B1A                            
00014B1A                            ; ---------------------------------------------------------------------------
00014B1A                            ; Subroutine to	find which tile	the object is standing on
00014B1A                            ; ---------------------------------------------------------------------------
00014B1A                            
00014B1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B1A                            
00014B1A                            
00014B1A                            Floor_ChkTile:				; XREF: FindFloor; et al
00014B1A 3002                       		move.w	d2,d0
00014B1C E248                       		lsr.w	#1,d0
00014B1E 0240 0380                  		andi.w	#$380,d0
00014B22 3203                       		move.w	d3,d1
00014B24 E049                       		lsr.w	#8,d1
00014B26 0241 007F                  		andi.w	#$7F,d1
00014B2A D041                       		add.w	d1,d0
00014B2C 72FF                       		moveq	#-1,d1
00014B2E 43F8 A400                  		lea	($FFFFA400).w,a1
00014B32 1231 0000                  		move.b	(a1,d0.w),d1
00014B36 6700                       		beq.s	loc_14996
00014B38 6B00                       		bmi.s	loc_1499A
00014B3A 5301                       		subq.b	#1,d1
00014B3C 4881                       		ext.w	d1
00014B3E EE59                       		ror.w	#7,d1
00014B40 3002                       		move.w	d2,d0
00014B42 D040                       		add.w	d0,d0
00014B44 0240 01E0                  		andi.w	#$1E0,d0
00014B48 D240                       		add.w	d0,d1
00014B4A 3003                       		move.w	d3,d0
00014B4C E648                       		lsr.w	#3,d0
00014B4E 0240 001E                  		andi.w	#$1E,d0
00014B52 D240                       		add.w	d0,d1
00014B54                            
00014B54                            loc_14996:
00014B54 2241                       		movea.l	d1,a1
00014B56 4E75                       		rts	
00014B58                            ; ===========================================================================
00014B58                            
00014B58                            loc_1499A:
00014B58 0241 007F                  		andi.w	#$7F,d1
00014B5C 0828 0006 0001             		btst	#6,1(a0)
00014B62 6700                       		beq.s	loc_149B2
00014B64 5241                       		addq.w	#1,d1
00014B66 0C41 0029                  		cmpi.w	#$29,d1
00014B6A 6600                       		bne.s	loc_149B2
00014B6C 323C 0051                  		move.w	#$51,d1
00014B70                            
00014B70                            loc_149B2:
00014B70 5301                       		subq.b	#1,d1
00014B72 EE59                       		ror.w	#7,d1
00014B74 3002                       		move.w	d2,d0
00014B76 D040                       		add.w	d0,d0
00014B78 0240 01E0                  		andi.w	#$1E0,d0
00014B7C D240                       		add.w	d0,d1
00014B7E 3003                       		move.w	d3,d0
00014B80 E648                       		lsr.w	#3,d0
00014B82 0240 001E                  		andi.w	#$1E,d0
00014B86 D240                       		add.w	d0,d1
00014B88 2241                       		movea.l	d1,a1
00014B8A 4E75                       		rts	
00014B8C                            ; End of function Floor_ChkTile
00014B8C                            
00014B8C                            
00014B8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B8C                            
00014B8C                            
00014B8C                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014B8C 618C                       		bsr.s	Floor_ChkTile
00014B8E 3011                       		move.w	(a1),d0
00014B90 3800                       		move.w	d0,d4
00014B92 0240 07FF                  		andi.w	#$7FF,d0
00014B96 6700                       		beq.s	loc_149DE
00014B98 0B04                       		btst	d5,d4
00014B9A 6600                       		bne.s	loc_149EC
00014B9C                            
00014B9C                            loc_149DE:
00014B9C D44B                       		add.w	a3,d2
00014B9E 6100 0000                  		bsr.w	FindFloor2
00014BA2 944B                       		sub.w	a3,d2
00014BA4 0641 0010                  		addi.w	#$10,d1
00014BA8 4E75                       		rts	
00014BAA                            ; ===========================================================================
00014BAA                            
00014BAA                            loc_149EC:
00014BAA 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014BAE 1032 0000                  		move.b	(a2,d0.w),d0
00014BB2 0240 00FF                  		andi.w	#$FF,d0
00014BB6 67E4                       		beq.s	loc_149DE
00014BB8 45F9 0000 0000             		lea	(AngleMap).l,a2
00014BBE 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014BC2 E948                       		lsl.w	#4,d0
00014BC4 3203                       		move.w	d3,d1
00014BC6 0804 000B                  		btst	#$B,d4
00014BCA 6700                       		beq.s	loc_14A12
00014BCC 4641                       		not.w	d1
00014BCE 4414                       		neg.b	(a4)
00014BD0                            
00014BD0                            loc_14A12:
00014BD0 0804 000C                  		btst	#$C,d4
00014BD4 6700                       		beq.s	loc_14A22
00014BD6 0614 0040                  		addi.b	#$40,(a4)
00014BDA 4414                       		neg.b	(a4)
00014BDC 0414 0040                  		subi.b	#$40,(a4)
00014BE0                            
00014BE0                            loc_14A22:
00014BE0 0241 000F                  		andi.w	#$F,d1
00014BE4 D240                       		add.w	d0,d1
00014BE6 45F9 0000 0000             		lea	(CollArray1).l,a2
00014BEC 1032 1000                  		move.b	(a2,d1.w),d0
00014BF0 4880                       		ext.w	d0
00014BF2 BD44                       		eor.w	d6,d4
00014BF4 0804 000C                  		btst	#$C,d4
00014BF8 6700                       		beq.s	loc_14A3E
00014BFA 4440                       		neg.w	d0
00014BFC                            
00014BFC                            loc_14A3E:
00014BFC 4A40                       		tst.w	d0
00014BFE 679C                       		beq.s	loc_149DE
00014C00 6B00                       		bmi.s	loc_14A5A
00014C02 0C00 0010                  		cmpi.b	#$10,d0
00014C06 6700                       		beq.s	loc_14A66
00014C08 3202                       		move.w	d2,d1
00014C0A 0241 000F                  		andi.w	#$F,d1
00014C0E D041                       		add.w	d1,d0
00014C10 323C 000F                  		move.w	#$F,d1
00014C14 9240                       		sub.w	d0,d1
00014C16 4E75                       		rts	
00014C18                            ; ===========================================================================
00014C18                            
00014C18                            loc_14A5A:
00014C18 3202                       		move.w	d2,d1
00014C1A 0241 000F                  		andi.w	#$F,d1
00014C1E D041                       		add.w	d1,d0
00014C20 6A00 FF7A                  		bpl.w	loc_149DE
00014C24                            
00014C24                            loc_14A66:
00014C24 944B                       		sub.w	a3,d2
00014C26 6100 0000                  		bsr.w	FindFloor2
00014C2A D44B                       		add.w	a3,d2
00014C2C 0441 0010                  		subi.w	#$10,d1
00014C30 4E75                       		rts	
00014C32                            ; End of function FindFloor
00014C32                            
00014C32                            
00014C32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C32                            
00014C32                            
00014C32                            FindFloor2:				; XREF: FindFloor
00014C32 6100 FEE6                  		bsr.w	Floor_ChkTile
00014C36 3011                       		move.w	(a1),d0
00014C38 3800                       		move.w	d0,d4
00014C3A 0240 07FF                  		andi.w	#$7FF,d0
00014C3E 6700                       		beq.s	loc_14A86
00014C40 0B04                       		btst	d5,d4
00014C42 6600                       		bne.s	loc_14A94
00014C44                            
00014C44                            loc_14A86:
00014C44 323C 000F                  		move.w	#$F,d1
00014C48 3002                       		move.w	d2,d0
00014C4A 0240 000F                  		andi.w	#$F,d0
00014C4E 9240                       		sub.w	d0,d1
00014C50 4E75                       		rts	
00014C52                            ; ===========================================================================
00014C52                            
00014C52                            loc_14A94:
00014C52 2478 F796                  		movea.l	($FFFFF796).w,a2
00014C56 1032 0000                  		move.b	(a2,d0.w),d0
00014C5A 0240 00FF                  		andi.w	#$FF,d0
00014C5E 67E4                       		beq.s	loc_14A86
00014C60 45F9 0000 0000             		lea	(AngleMap).l,a2
00014C66 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014C6A E948                       		lsl.w	#4,d0
00014C6C 3203                       		move.w	d3,d1
00014C6E 0804 000B                  		btst	#$B,d4
00014C72 6700                       		beq.s	loc_14ABA
00014C74 4641                       		not.w	d1
00014C76 4414                       		neg.b	(a4)
00014C78                            
00014C78                            loc_14ABA:
00014C78 0804 000C                  		btst	#$C,d4
00014C7C 6700                       		beq.s	loc_14ACA
00014C7E 0614 0040                  		addi.b	#$40,(a4)
00014C82 4414                       		neg.b	(a4)
00014C84 0414 0040                  		subi.b	#$40,(a4)
00014C88                            
00014C88                            loc_14ACA:
00014C88 0241 000F                  		andi.w	#$F,d1
00014C8C D240                       		add.w	d0,d1
00014C8E 45F9 0000 0000             		lea	(CollArray1).l,a2
00014C94 1032 1000                  		move.b	(a2,d1.w),d0
00014C98 4880                       		ext.w	d0
00014C9A BD44                       		eor.w	d6,d4
00014C9C 0804 000C                  		btst	#$C,d4
00014CA0 6700                       		beq.s	loc_14AE6
00014CA2 4440                       		neg.w	d0
00014CA4                            
00014CA4                            loc_14AE6:
00014CA4 4A40                       		tst.w	d0
00014CA6 679C                       		beq.s	loc_14A86
00014CA8 6B00                       		bmi.s	loc_14AFC
00014CAA 3202                       		move.w	d2,d1
00014CAC 0241 000F                  		andi.w	#$F,d1
00014CB0 D041                       		add.w	d1,d0
00014CB2 323C 000F                  		move.w	#$F,d1
00014CB6 9240                       		sub.w	d0,d1
00014CB8 4E75                       		rts	
00014CBA                            ; ===========================================================================
00014CBA                            
00014CBA                            loc_14AFC:
00014CBA 3202                       		move.w	d2,d1
00014CBC 0241 000F                  		andi.w	#$F,d1
00014CC0 D041                       		add.w	d1,d0
00014CC2 6A00 FF80                  		bpl.w	loc_14A86
00014CC6 4641                       		not.w	d1
00014CC8 4E75                       		rts	
00014CCA                            ; End of function FindFloor2
00014CCA                            
00014CCA                            
00014CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CCA                            
00014CCA                            
00014CCA                            FindWall:				; XREF: Sonic_WalkVertR; et al
00014CCA 6100 FE4E                  		bsr.w	Floor_ChkTile
00014CCE 3011                       		move.w	(a1),d0
00014CD0 3800                       		move.w	d0,d4
00014CD2 0240 07FF                  		andi.w	#$7FF,d0
00014CD6 6700                       		beq.s	loc_14B1E
00014CD8 0B04                       		btst	d5,d4
00014CDA 6600                       		bne.s	loc_14B2C
00014CDC                            
00014CDC                            loc_14B1E:
00014CDC D64B                       		add.w	a3,d3
00014CDE 6100 0000                  		bsr.w	FindWall2
00014CE2 964B                       		sub.w	a3,d3
00014CE4 0641 0010                  		addi.w	#$10,d1
00014CE8 4E75                       		rts	
00014CEA                            ; ===========================================================================
00014CEA                            
00014CEA                            loc_14B2C:
00014CEA 2478 F796                  		movea.l	($FFFFF796).w,a2
00014CEE 1032 0000                  		move.b	(a2,d0.w),d0
00014CF2 0240 00FF                  		andi.w	#$FF,d0
00014CF6 67E4                       		beq.s	loc_14B1E
00014CF8 45F9 0000 0000             		lea	(AngleMap).l,a2
00014CFE 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014D02 E948                       		lsl.w	#4,d0
00014D04 3202                       		move.w	d2,d1
00014D06 0804 000C                  		btst	#$C,d4
00014D0A 6700                       		beq.s	loc_14B5A
00014D0C 4641                       		not.w	d1
00014D0E 0614 0040                  		addi.b	#$40,(a4)
00014D12 4414                       		neg.b	(a4)
00014D14 0414 0040                  		subi.b	#$40,(a4)
00014D18                            
00014D18                            loc_14B5A:
00014D18 0804 000B                  		btst	#$B,d4
00014D1C 6700                       		beq.s	loc_14B62
00014D1E 4414                       		neg.b	(a4)
00014D20                            
00014D20                            loc_14B62:
00014D20 0241 000F                  		andi.w	#$F,d1
00014D24 D240                       		add.w	d0,d1
00014D26 45F9 0000 0000             		lea	(CollArray2).l,a2
00014D2C 1032 1000                  		move.b	(a2,d1.w),d0
00014D30 4880                       		ext.w	d0
00014D32 BD44                       		eor.w	d6,d4
00014D34 0804 000B                  		btst	#$B,d4
00014D38 6700                       		beq.s	loc_14B7E
00014D3A 4440                       		neg.w	d0
00014D3C                            
00014D3C                            loc_14B7E:
00014D3C 4A40                       		tst.w	d0
00014D3E 679C                       		beq.s	loc_14B1E
00014D40 6B00                       		bmi.s	loc_14B9A
00014D42 0C00 0010                  		cmpi.b	#$10,d0
00014D46 6700                       		beq.s	loc_14BA6
00014D48 3203                       		move.w	d3,d1
00014D4A 0241 000F                  		andi.w	#$F,d1
00014D4E D041                       		add.w	d1,d0
00014D50 323C 000F                  		move.w	#$F,d1
00014D54 9240                       		sub.w	d0,d1
00014D56 4E75                       		rts	
00014D58                            ; ===========================================================================
00014D58                            
00014D58                            loc_14B9A:
00014D58 3203                       		move.w	d3,d1
00014D5A 0241 000F                  		andi.w	#$F,d1
00014D5E D041                       		add.w	d1,d0
00014D60 6A00 FF7A                  		bpl.w	loc_14B1E
00014D64                            
00014D64                            loc_14BA6:
00014D64 964B                       		sub.w	a3,d3
00014D66 6100 0000                  		bsr.w	FindWall2
00014D6A D64B                       		add.w	a3,d3
00014D6C 0441 0010                  		subi.w	#$10,d1
00014D70 4E75                       		rts	
00014D72                            ; End of function FindWall
00014D72                            
00014D72                            
00014D72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D72                            
00014D72                            
00014D72                            FindWall2:				; XREF: FindWall
00014D72 6100 FDA6                  		bsr.w	Floor_ChkTile
00014D76 3011                       		move.w	(a1),d0
00014D78 3800                       		move.w	d0,d4
00014D7A 0240 07FF                  		andi.w	#$7FF,d0
00014D7E 6700                       		beq.s	loc_14BC6
00014D80 0B04                       		btst	d5,d4
00014D82 6600                       		bne.s	loc_14BD4
00014D84                            
00014D84                            loc_14BC6:
00014D84 323C 000F                  		move.w	#$F,d1
00014D88 3003                       		move.w	d3,d0
00014D8A 0240 000F                  		andi.w	#$F,d0
00014D8E 9240                       		sub.w	d0,d1
00014D90 4E75                       		rts	
00014D92                            ; ===========================================================================
00014D92                            
00014D92                            loc_14BD4:
00014D92 2478 F796                  		movea.l	($FFFFF796).w,a2
00014D96 1032 0000                  		move.b	(a2,d0.w),d0
00014D9A 0240 00FF                  		andi.w	#$FF,d0
00014D9E 67E4                       		beq.s	loc_14BC6
00014DA0 45F9 0000 0000             		lea	(AngleMap).l,a2
00014DA6 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014DAA E948                       		lsl.w	#4,d0
00014DAC 3202                       		move.w	d2,d1
00014DAE 0804 000C                  		btst	#$C,d4
00014DB2 6700                       		beq.s	loc_14C02
00014DB4 4641                       		not.w	d1
00014DB6 0614 0040                  		addi.b	#$40,(a4)
00014DBA 4414                       		neg.b	(a4)
00014DBC 0414 0040                  		subi.b	#$40,(a4)
00014DC0                            
00014DC0                            loc_14C02:
00014DC0 0804 000B                  		btst	#$B,d4
00014DC4 6700                       		beq.s	loc_14C0A
00014DC6 4414                       		neg.b	(a4)
00014DC8                            
00014DC8                            loc_14C0A:
00014DC8 0241 000F                  		andi.w	#$F,d1
00014DCC D240                       		add.w	d0,d1
00014DCE 45F9 0000 0000             		lea	(CollArray2).l,a2
00014DD4 1032 1000                  		move.b	(a2,d1.w),d0
00014DD8 4880                       		ext.w	d0
00014DDA BD44                       		eor.w	d6,d4
00014DDC 0804 000B                  		btst	#$B,d4
00014DE0 6700                       		beq.s	loc_14C26
00014DE2 4440                       		neg.w	d0
00014DE4                            
00014DE4                            loc_14C26:
00014DE4 4A40                       		tst.w	d0
00014DE6 679C                       		beq.s	loc_14BC6
00014DE8 6B00                       		bmi.s	loc_14C3C
00014DEA 3203                       		move.w	d3,d1
00014DEC 0241 000F                  		andi.w	#$F,d1
00014DF0 D041                       		add.w	d1,d0
00014DF2 323C 000F                  		move.w	#$F,d1
00014DF6 9240                       		sub.w	d0,d1
00014DF8 4E75                       		rts	
00014DFA                            ; ===========================================================================
00014DFA                            
00014DFA                            loc_14C3C:
00014DFA 3203                       		move.w	d3,d1
00014DFC 0241 000F                  		andi.w	#$F,d1
00014E00 D041                       		add.w	d1,d0
00014E02 6A00 FF80                  		bpl.w	loc_14BC6
00014E06 4641                       		not.w	d1
00014E08 4E75                       		rts	
00014E0A                            ; End of function FindWall2
00014E0A                            
00014E0A                            ; ---------------------------------------------------------------------------
00014E0A                            ; Unused floor/wall subroutine - logs something	to do with collision
00014E0A                            ; ---------------------------------------------------------------------------
00014E0A                            
00014E0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E0A                            
00014E0A                            
00014E0A                            FloorLog_Unk:				; XREF: Level
00014E0A 4E75                       		rts	
00014E0C                            
00014E0C 43F9 0000 0000             		lea	(CollArray1).l,a1
00014E12 45F9 0000 0000             		lea	(CollArray1).l,a2
00014E18 363C 00FF                  		move.w	#$FF,d3
00014E1C                            
00014E1C                            loc_14C5E:
00014E1C 7A10                       		moveq	#$10,d5
00014E1E 343C 000F                  		move.w	#$F,d2
00014E22                            
00014E22                            loc_14C64:
00014E22 7800                       		moveq	#0,d4
00014E24 323C 000F                  		move.w	#$F,d1
00014E28                            
00014E28                            loc_14C6A:
00014E28 3019                       		move.w	(a1)+,d0
00014E2A EAA8                       		lsr.l	d5,d0
00014E2C D944                       		addx.w	d4,d4
00014E2E 51C9 FFF8                  		dbf	d1,loc_14C6A
00014E32                            
00014E32 34C4                       		move.w	d4,(a2)+
00014E34 92FC 0020                  		suba.w	#$20,a1
00014E38 5345                       		subq.w	#1,d5
00014E3A 51CA FFE6                  		dbf	d2,loc_14C64
00014E3E                            
00014E3E D2FC 0020                  		adda.w	#$20,a1
00014E42 51CB FFD8                  		dbf	d3,loc_14C5E
00014E46                            
00014E46 43F9 0000 0000             		lea	(CollArray1).l,a1
00014E4C 45F9 0000 0000             		lea	(CollArray2).l,a2
00014E52 6100                       		bsr.s	FloorLog_Unk2
00014E54 43F9 0000 0000             		lea	(CollArray1).l,a1
00014E5A 45F9 0000 0000             		lea	(CollArray1).l,a2
00014E60                            
00014E60                            ; End of function FloorLog_Unk
00014E60                            
00014E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E60                            
00014E60                            
00014E60                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00014E60 363C 0FFF                  		move.w	#$FFF,d3
00014E64                            
00014E64                            loc_14CA6:
00014E64 7400                       		moveq	#0,d2
00014E66 323C 000F                  		move.w	#$F,d1
00014E6A 3019                       		move.w	(a1)+,d0
00014E6C 6700                       		beq.s	loc_14CD4
00014E6E 6B00                       		bmi.s	loc_14CBE
00014E70                            
00014E70                            loc_14CB2:
00014E70 E248                       		lsr.w	#1,d0
00014E72 6400                       		bcc.s	loc_14CB8
00014E74 5202                       		addq.b	#1,d2
00014E76                            
00014E76                            loc_14CB8:
00014E76 51C9 FFF8                  		dbf	d1,loc_14CB2
00014E7A                            
00014E7A 6000                       		bra.s	loc_14CD6
00014E7C                            ; ===========================================================================
00014E7C                            
00014E7C                            loc_14CBE:
00014E7C 0C40 FFFF                  		cmpi.w	#-1,d0
00014E80 6700                       		beq.s	loc_14CD0
00014E82                            
00014E82                            loc_14CC4:
00014E82 E348                       		lsl.w	#1,d0
00014E84 6400                       		bcc.s	loc_14CCA
00014E86 5302                       		subq.b	#1,d2
00014E88                            
00014E88                            loc_14CCA:
00014E88 51C9 FFF8                  		dbf	d1,loc_14CC4
00014E8C                            
00014E8C 6000                       		bra.s	loc_14CD6
00014E8E                            ; ===========================================================================
00014E8E                            
00014E8E                            loc_14CD0:
00014E8E 303C 0010                  		move.w	#$10,d0
00014E92                            
00014E92                            loc_14CD4:
00014E92 3400                       		move.w	d0,d2
00014E94                            
00014E94                            loc_14CD6:
00014E94 14C2                       		move.b	d2,(a2)+
00014E96 51CB FFCC                  		dbf	d3,loc_14CA6
00014E9A                            
00014E9A 4E75                       		rts	
00014E9C                            
00014E9C                            ; End of function FloorLog_Unk2
00014E9C                            
00014E9C                            
00014E9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E9C                            
00014E9C                            
00014E9C                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00014E9C 2628 0008                  		move.l	8(a0),d3
00014EA0 2428 000C                  		move.l	$C(a0),d2
00014EA4 3228 0010                  		move.w	$10(a0),d1
00014EA8 48C1                       		ext.l	d1
00014EAA E181                       		asl.l	#8,d1
00014EAC D681                       		add.l	d1,d3
00014EAE 3228 0012                  		move.w	$12(a0),d1
00014EB2 48C1                       		ext.l	d1
00014EB4 E181                       		asl.l	#8,d1
00014EB6 D481                       		add.l	d1,d2
00014EB8 4842                       		swap	d2
00014EBA 4843                       		swap	d3
00014EBC 11C0 F768                  		move.b	d0,($FFFFF768).w
00014EC0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014EC4 1200                       		move.b	d0,d1
00014EC6 0600 0020                  		addi.b	#$20,d0
00014ECA 6A00                       		bpl.s	loc_14D1A
00014ECC 1001                       		move.b	d1,d0
00014ECE 6A00                       		bpl.s	loc_14D14
00014ED0 5300                       		subq.b	#1,d0
00014ED2                            
00014ED2                            loc_14D14:
00014ED2 0600 0020                  		addi.b	#$20,d0
00014ED6 6000                       		bra.s	loc_14D24
00014ED8                            ; ===========================================================================
00014ED8                            
00014ED8                            loc_14D1A:
00014ED8 1001                       		move.b	d1,d0
00014EDA 6A00                       		bpl.s	loc_14D20
00014EDC 5200                       		addq.b	#1,d0
00014EDE                            
00014EDE                            loc_14D20:
00014EDE 0600 001F                  		addi.b	#$1F,d0
00014EE2                            
00014EE2                            loc_14D24:
00014EE2 0200 00C0                  		andi.b	#$C0,d0
00014EE6 6700 0000                  		beq.w	loc_14DF0
00014EEA 0C00 0080                  		cmpi.b	#$80,d0
00014EEE 6700 0000                  		beq.w	loc_14F7C
00014EF2 0201 0038                  		andi.b	#$38,d1
00014EF6 6600                       		bne.s	loc_14D3C
00014EF8 5042                       		addq.w	#8,d2
00014EFA                            
00014EFA                            loc_14D3C:
00014EFA 0C00 0040                  		cmpi.b	#$40,d0
00014EFE 6700 0000                  		beq.w	loc_1504A
00014F02 6000 0000                  		bra.w	loc_14EBC
00014F06                            
00014F06                            ; End of function Sonic_WalkSpeed
00014F06                            
00014F06                            
00014F06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F06                            
00014F06                            
00014F06                            sub_14D48:				; XREF: Sonic_Jump
00014F06 11C0 F768                  		move.b	d0,($FFFFF768).w
00014F0A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014F0E 0600 0020                  		addi.b	#$20,d0
00014F12 0200 00C0                  		andi.b	#$C0,d0
00014F16 0C00 0040                  		cmpi.b	#$40,d0
00014F1A 6700 0000                  		beq.w	loc_14FD6
00014F1E 0C00 0080                  		cmpi.b	#$80,d0
00014F22 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00014F26 0C00 00C0                  		cmpi.b	#$C0,d0
00014F2A 6700 0000                  		beq.w	sub_14E50
00014F2E                            
00014F2E                            ; End of function sub_14D48
00014F2E                            
00014F2E                            ; ---------------------------------------------------------------------------
00014F2E                            ; Subroutine to	make Sonic land	on the floor after jumping
00014F2E                            ; ---------------------------------------------------------------------------
00014F2E                            
00014F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F2E                            
00014F2E                            
00014F2E                            Sonic_HitFloor:				; XREF: Sonic_Floor
00014F2E 3428 000C                  		move.w	$C(a0),d2
00014F32 3628 0008                  		move.w	8(a0),d3
00014F36 7000                       		moveq	#0,d0
00014F38 1028 0016                  		move.b	$16(a0),d0
00014F3C 4880                       		ext.w	d0
00014F3E D440                       		add.w	d0,d2
00014F40 1028 0017                  		move.b	$17(a0),d0
00014F44 4880                       		ext.w	d0
00014F46 D640                       		add.w	d0,d3
00014F48 49F8 F768                  		lea	($FFFFF768).w,a4
00014F4C 367C 0010                  		movea.w	#$10,a3
00014F50 3C3C 0000                  		move.w	#0,d6
00014F54 7A0D                       		moveq	#$D,d5
00014F56 6100 FC34                  		bsr.w	FindFloor
00014F5A 3F01                       		move.w	d1,-(sp)
00014F5C 3428 000C                  		move.w	$C(a0),d2
00014F60 3628 0008                  		move.w	8(a0),d3
00014F64 7000                       		moveq	#0,d0
00014F66 1028 0016                  		move.b	$16(a0),d0
00014F6A 4880                       		ext.w	d0
00014F6C D440                       		add.w	d0,d2
00014F6E 1028 0017                  		move.b	$17(a0),d0
00014F72 4880                       		ext.w	d0
00014F74 9640                       		sub.w	d0,d3
00014F76 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F7A 367C 0010                  		movea.w	#$10,a3
00014F7E 3C3C 0000                  		move.w	#0,d6
00014F82 7A0D                       		moveq	#$D,d5
00014F84 6100 FC06                  		bsr.w	FindFloor
00014F88 301F                       		move.w	(sp)+,d0
00014F8A 143C 0000                  		move.b	#0,d2
00014F8E                            
00014F8E                            loc_14DD0:
00014F8E 1638 F76A                  		move.b	($FFFFF76A).w,d3
00014F92 B240                       		cmp.w	d0,d1
00014F94 6F00                       		ble.s	loc_14DDE
00014F96 1638 F768                  		move.b	($FFFFF768).w,d3
00014F9A C141                       		exg	d0,d1
00014F9C                            
00014F9C                            loc_14DDE:
00014F9C 0803 0000                  		btst	#0,d3
00014FA0 6700                       		beq.s	locret_14DE6
00014FA2 1602                       		move.b	d2,d3
00014FA4                            
00014FA4                            locret_14DE6:
00014FA4 4E75                       		rts	
00014FA6                            
00014FA6                            ; End of function Sonic_HitFloor
00014FA6                            
00014FA6                            ; ===========================================================================
00014FA6 3428 000C                  		move.w	$C(a0),d2
00014FAA 3628 0008                  		move.w	8(a0),d3
00014FAE                            
00014FAE                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00014FAE 0642 000A                  		addi.w	#$A,d2
00014FB2 49F8 F768                  		lea	($FFFFF768).w,a4
00014FB6 367C 0010                  		movea.w	#$10,a3
00014FBA 3C3C 0000                  		move.w	#0,d6
00014FBE 7A0E                       		moveq	#$E,d5
00014FC0 6100 FBCA                  		bsr.w	FindFloor
00014FC4 143C 0000                  		move.b	#0,d2
00014FC8                            
00014FC8                            loc_14E0A:				; XREF: sub_14EB4
00014FC8 1638 F768                  		move.b	($FFFFF768).w,d3
00014FCC 0803 0000                  		btst	#0,d3
00014FD0 6700                       		beq.s	locret_14E16
00014FD2 1602                       		move.b	d2,d3
00014FD4                            
00014FD4                            locret_14E16:
00014FD4 4E75                       		rts	
00014FD6                            
00014FD6                            ; ---------------------------------------------------------------------------
00014FD6                            ; Subroutine allowing objects to interact with the floor
00014FD6                            ; ---------------------------------------------------------------------------
00014FD6                            
00014FD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FD6                            
00014FD6                            
00014FD6                            ObjHitFloor:
00014FD6 3628 0008                  		move.w	8(a0),d3
00014FDA                            
00014FDA                            ; End of function ObjHitFloor
00014FDA                            
00014FDA                            
00014FDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FDA                            
00014FDA                            
00014FDA                            ObjHitFloor2:
00014FDA 3428 000C                  		move.w	$C(a0),d2
00014FDE 7000                       		moveq	#0,d0
00014FE0 1028 0016                  		move.b	$16(a0),d0
00014FE4 4880                       		ext.w	d0
00014FE6 D440                       		add.w	d0,d2
00014FE8 49F8 F768                  		lea	($FFFFF768).w,a4
00014FEC 18BC 0000                  		move.b	#0,(a4)
00014FF0 367C 0010                  		movea.w	#$10,a3
00014FF4 3C3C 0000                  		move.w	#0,d6
00014FF8 7A0D                       		moveq	#$D,d5
00014FFA 6100 FB90                  		bsr.w	FindFloor
00014FFE 1638 F768                  		move.b	($FFFFF768).w,d3
00015002 0803 0000                  		btst	#0,d3
00015006 6700                       		beq.s	locret_14E4E
00015008 163C 0000                  		move.b	#0,d3
0001500C                            
0001500C                            locret_14E4E:
0001500C 4E75                       		rts	
0001500E                            ; End of function ObjHitFloor2
0001500E                            
0001500E                            
0001500E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001500E                            
0001500E                            
0001500E                            sub_14E50:				; XREF: sub_14D48
0001500E 3428 000C                  		move.w	$C(a0),d2
00015012 3628 0008                  		move.w	8(a0),d3
00015016 7000                       		moveq	#0,d0
00015018 1028 0017                  		move.b	$17(a0),d0
0001501C 4880                       		ext.w	d0
0001501E 9440                       		sub.w	d0,d2
00015020 1028 0016                  		move.b	$16(a0),d0
00015024 4880                       		ext.w	d0
00015026 D640                       		add.w	d0,d3
00015028 49F8 F768                  		lea	($FFFFF768).w,a4
0001502C 367C 0010                  		movea.w	#$10,a3
00015030 3C3C 0000                  		move.w	#0,d6
00015034 7A0E                       		moveq	#$E,d5
00015036 6100 FC92                  		bsr.w	FindWall
0001503A 3F01                       		move.w	d1,-(sp)
0001503C 3428 000C                  		move.w	$C(a0),d2
00015040 3628 0008                  		move.w	8(a0),d3
00015044 7000                       		moveq	#0,d0
00015046 1028 0017                  		move.b	$17(a0),d0
0001504A 4880                       		ext.w	d0
0001504C D440                       		add.w	d0,d2
0001504E 1028 0016                  		move.b	$16(a0),d0
00015052 4880                       		ext.w	d0
00015054 D640                       		add.w	d0,d3
00015056 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001505A 367C 0010                  		movea.w	#$10,a3
0001505E 3C3C 0000                  		move.w	#0,d6
00015062 7A0E                       		moveq	#$E,d5
00015064 6100 FC64                  		bsr.w	FindWall
00015068 301F                       		move.w	(sp)+,d0
0001506A 143C 00C0                  		move.b	#-$40,d2
0001506E 6000 FF1E                  		bra.w	loc_14DD0
00015072                            
00015072                            ; End of function sub_14E50
00015072                            
00015072                            
00015072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015072                            
00015072                            
00015072                            sub_14EB4:				; XREF: Sonic_Floor
00015072 3428 000C                  		move.w	$C(a0),d2
00015076 3628 0008                  		move.w	8(a0),d3
0001507A                            
0001507A                            loc_14EBC:
0001507A 0643 000A                  		addi.w	#$A,d3
0001507E 49F8 F768                  		lea	($FFFFF768).w,a4
00015082 367C 0010                  		movea.w	#$10,a3
00015086 3C3C 0000                  		move.w	#0,d6
0001508A 7A0E                       		moveq	#$E,d5
0001508C 6100 FC3C                  		bsr.w	FindWall
00015090 143C 00C0                  		move.b	#-$40,d2
00015094 6000 FF32                  		bra.w	loc_14E0A
00015098                            
00015098                            ; End of function sub_14EB4
00015098                            
00015098                            ; ---------------------------------------------------------------------------
00015098                            ; Subroutine to	detect when an object hits a wall to its right
00015098                            ; ---------------------------------------------------------------------------
00015098                            
00015098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015098                            
00015098                            
00015098                            ObjHitWallRight:
00015098 D668 0008                  		add.w	8(a0),d3
0001509C 3428 000C                  		move.w	$C(a0),d2
000150A0 49F8 F768                  		lea	($FFFFF768).w,a4
000150A4 18BC 0000                  		move.b	#0,(a4)
000150A8 367C 0010                  		movea.w	#$10,a3
000150AC 3C3C 0000                  		move.w	#0,d6
000150B0 7A0E                       		moveq	#$E,d5
000150B2 6100 FC16                  		bsr.w	FindWall
000150B6 1638 F768                  		move.b	($FFFFF768).w,d3
000150BA 0803 0000                  		btst	#0,d3
000150BE 6700                       		beq.s	locret_14F06
000150C0 163C 00C0                  		move.b	#-$40,d3
000150C4                            
000150C4                            locret_14F06:
000150C4 4E75                       		rts	
000150C6                            
000150C6                            ; End of function ObjHitWallRight
000150C6                            
000150C6                            ; ---------------------------------------------------------------------------
000150C6                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000150C6                            ; touches them
000150C6                            ; ---------------------------------------------------------------------------
000150C6                            
000150C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150C6                            
000150C6                            
000150C6                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000150C6 3428 000C                  		move.w	$C(a0),d2
000150CA 3628 0008                  		move.w	8(a0),d3
000150CE 7000                       		moveq	#0,d0
000150D0 1028 0016                  		move.b	$16(a0),d0
000150D4 4880                       		ext.w	d0
000150D6 9440                       		sub.w	d0,d2
000150D8 0A42 000F                  		eori.w	#$F,d2
000150DC 1028 0017                  		move.b	$17(a0),d0
000150E0 4880                       		ext.w	d0
000150E2 D640                       		add.w	d0,d3
000150E4 49F8 F768                  		lea	($FFFFF768).w,a4
000150E8 367C FFF0                  		movea.w	#-$10,a3
000150EC 3C3C 1000                  		move.w	#$1000,d6
000150F0 7A0E                       		moveq	#$E,d5
000150F2 6100 FA98                  		bsr.w	FindFloor
000150F6 3F01                       		move.w	d1,-(sp)
000150F8 3428 000C                  		move.w	$C(a0),d2
000150FC 3628 0008                  		move.w	8(a0),d3
00015100 7000                       		moveq	#0,d0
00015102 1028 0016                  		move.b	$16(a0),d0
00015106 4880                       		ext.w	d0
00015108 9440                       		sub.w	d0,d2
0001510A 0A42 000F                  		eori.w	#$F,d2
0001510E 1028 0017                  		move.b	$17(a0),d0
00015112 4880                       		ext.w	d0
00015114 9640                       		sub.w	d0,d3
00015116 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001511A 367C FFF0                  		movea.w	#-$10,a3
0001511E 3C3C 1000                  		move.w	#$1000,d6
00015122 7A0E                       		moveq	#$E,d5
00015124 6100 FA66                  		bsr.w	FindFloor
00015128 301F                       		move.w	(sp)+,d0
0001512A 143C 0080                  		move.b	#-$80,d2
0001512E 6000 FE5E                  		bra.w	loc_14DD0
00015132                            ; End of function Sonic_DontRunOnWalls
00015132                            
00015132                            ; ===========================================================================
00015132 3428 000C                  		move.w	$C(a0),d2
00015136 3628 0008                  		move.w	8(a0),d3
0001513A                            
0001513A                            loc_14F7C:
0001513A 0442 000A                  		subi.w	#$A,d2
0001513E 0A42 000F                  		eori.w	#$F,d2
00015142 49F8 F768                  		lea	($FFFFF768).w,a4
00015146 367C FFF0                  		movea.w	#-$10,a3
0001514A 3C3C 1000                  		move.w	#$1000,d6
0001514E 7A0E                       		moveq	#$E,d5
00015150 6100 FA3A                  		bsr.w	FindFloor
00015154 143C 0080                  		move.b	#-$80,d2
00015158 6000 FE6E                  		bra.w	loc_14E0A
0001515C                            
0001515C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001515C                            
0001515C                            
0001515C                            ObjHitCeiling:
0001515C 3428 000C                  		move.w	$C(a0),d2
00015160 3628 0008                  		move.w	8(a0),d3
00015164 7000                       		moveq	#0,d0
00015166 1028 0016                  		move.b	$16(a0),d0
0001516A 4880                       		ext.w	d0
0001516C 9440                       		sub.w	d0,d2
0001516E 0A42 000F                  		eori.w	#$F,d2
00015172 49F8 F768                  		lea	($FFFFF768).w,a4
00015176 367C FFF0                  		movea.w	#-$10,a3
0001517A 3C3C 1000                  		move.w	#$1000,d6
0001517E 7A0E                       		moveq	#$E,d5
00015180 6100 FA0A                  		bsr.w	FindFloor
00015184 1638 F768                  		move.b	($FFFFF768).w,d3
00015188 0803 0000                  		btst	#0,d3
0001518C 6700                       		beq.s	locret_14FD4
0001518E 163C 0080                  		move.b	#-$80,d3
00015192                            
00015192                            locret_14FD4:
00015192 4E75                       		rts	
00015194                            ; End of function ObjHitCeiling
00015194                            
00015194                            ; ===========================================================================
00015194                            
00015194                            loc_14FD6:				; XREF: sub_14D48
00015194 3428 000C                  		move.w	$C(a0),d2
00015198 3628 0008                  		move.w	8(a0),d3
0001519C 7000                       		moveq	#0,d0
0001519E 1028 0017                  		move.b	$17(a0),d0
000151A2 4880                       		ext.w	d0
000151A4 9440                       		sub.w	d0,d2
000151A6 1028 0016                  		move.b	$16(a0),d0
000151AA 4880                       		ext.w	d0
000151AC 9640                       		sub.w	d0,d3
000151AE 0A43 000F                  		eori.w	#$F,d3
000151B2 49F8 F768                  		lea	($FFFFF768).w,a4
000151B6 367C FFF0                  		movea.w	#-$10,a3
000151BA 3C3C 0800                  		move.w	#$800,d6
000151BE 7A0E                       		moveq	#$E,d5
000151C0 6100 FB08                  		bsr.w	FindWall
000151C4 3F01                       		move.w	d1,-(sp)
000151C6 3428 000C                  		move.w	$C(a0),d2
000151CA 3628 0008                  		move.w	8(a0),d3
000151CE 7000                       		moveq	#0,d0
000151D0 1028 0017                  		move.b	$17(a0),d0
000151D4 4880                       		ext.w	d0
000151D6 D440                       		add.w	d0,d2
000151D8 1028 0016                  		move.b	$16(a0),d0
000151DC 4880                       		ext.w	d0
000151DE 9640                       		sub.w	d0,d3
000151E0 0A43 000F                  		eori.w	#$F,d3
000151E4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000151E8 367C FFF0                  		movea.w	#-$10,a3
000151EC 3C3C 0800                  		move.w	#$800,d6
000151F0 7A0E                       		moveq	#$E,d5
000151F2 6100 FAD6                  		bsr.w	FindWall
000151F6 301F                       		move.w	(sp)+,d0
000151F8 143C 0040                  		move.b	#$40,d2
000151FC 6000 FD90                  		bra.w	loc_14DD0
00015200                            
00015200                            ; ---------------------------------------------------------------------------
00015200                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015200                            ; ---------------------------------------------------------------------------
00015200                            
00015200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015200                            
00015200                            
00015200                            Sonic_HitWall:				; XREF: Sonic_Floor
00015200 3428 000C                  		move.w	$C(a0),d2
00015204 3628 0008                  		move.w	8(a0),d3
00015208                            
00015208                            loc_1504A:
00015208 0443 000A                  		subi.w	#$A,d3
0001520C 0A43 000F                  		eori.w	#$F,d3
00015210 49F8 F768                  		lea	($FFFFF768).w,a4
00015214 367C FFF0                  		movea.w	#-$10,a3
00015218 3C3C 0800                  		move.w	#$800,d6
0001521C 7A0E                       		moveq	#$E,d5
0001521E 6100 FAAA                  		bsr.w	FindWall
00015222 143C 0040                  		move.b	#$40,d2
00015226 6000 FDA0                  		bra.w	loc_14E0A
0001522A                            ; End of function Sonic_HitWall
0001522A                            
0001522A                            ; ---------------------------------------------------------------------------
0001522A                            ; Subroutine to	detect when an object hits a wall to its left
0001522A                            ; ---------------------------------------------------------------------------
0001522A                            
0001522A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001522A                            
0001522A                            
0001522A                            ObjHitWallLeft:
0001522A D668 0008                  		add.w	8(a0),d3
0001522E 3428 000C                  		move.w	$C(a0),d2
00015232 49F8 F768                  		lea	($FFFFF768).w,a4
00015236 18BC 0000                  		move.b	#0,(a4)
0001523A 367C FFF0                  		movea.w	#-$10,a3
0001523E 3C3C 0800                  		move.w	#$800,d6
00015242 7A0E                       		moveq	#$E,d5
00015244 6100 FA84                  		bsr.w	FindWall
00015248 1638 F768                  		move.b	($FFFFF768).w,d3
0001524C 0803 0000                  		btst	#0,d3
00015250 6700                       		beq.s	locret_15098
00015252 163C 0040                  		move.b	#$40,d3
00015256                            
00015256                            locret_15098:
00015256 4E75                       		rts	
00015258                            ; End of function ObjHitWallLeft
00015258                            
00015258                            ; ===========================================================================
00015258                            ; ---------------------------------------------------------------------------
00015258                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015258                            ; ---------------------------------------------------------------------------
00015258                            
00015258                            Obj66:					; XREF: Obj_Index
00015258 7000                       		moveq	#0,d0
0001525A 1028 0024                  		move.b	$24(a0),d0
0001525E 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015262 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015266                            ; ===========================================================================
00015266 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015268 0000                       		dc.w Obj66_Action-Obj66_Index
0001526A 0000                       		dc.w Obj66_Display-Obj66_Index
0001526C 0000                       		dc.w Obj66_Release-Obj66_Index
0001526E                            ; ===========================================================================
0001526E                            
0001526E                            Obj66_Main:				; XREF: Obj66_Index
0001526E 5428 0024                  		addq.b	#2,$24(a0)
00015272 323C 0001                  		move.w	#1,d1
00015276 2248                       		movea.l	a0,a1
00015278 6000                       		bra.s	Obj66_MakeItem
0001527A                            ; ===========================================================================
0001527A                            
0001527A                            Obj66_Loop:
0001527A 6100 897E                  		bsr.w	SingleObjLoad
0001527E 6600                       		bne.s	loc_150FE
00015280 12BC 0066                  		move.b	#$66,0(a1)
00015284 5829 0024                  		addq.b	#4,$24(a1)
00015288 3368 0008 0008             		move.w	8(a0),8(a1)
0001528E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015294 137C 0003 0018             		move.b	#3,$18(a1)
0001529A 137C 0010 001A             		move.b	#$10,$1A(a1)
000152A0                            
000152A0                            Obj66_MakeItem:				; XREF: Obj66_Main
000152A0 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000152A8 337C 4348 0002             		move.w	#$4348,2(a1)
000152AE 0029 0004 0001             		ori.b	#4,1(a1)
000152B4 137C 0038 0019             		move.b	#$38,$19(a1)
000152BA                            
000152BA                            loc_150FE:
000152BA 51C9 FFBE                  		dbf	d1,Obj66_Loop
000152BE                            
000152BE 117C 0030 0019             		move.b	#$30,$19(a0)
000152C4 117C 0004 0018             		move.b	#4,$18(a0)
000152CA 317C 003C 0030             		move.w	#$3C,$30(a0)
000152D0 117C 0001 0034             		move.b	#1,$34(a0)
000152D6 1168 0028 0038             		move.b	$28(a0),$38(a0)
000152DC                            
000152DC                            Obj66_Action:				; XREF: Obj66_Index
000152DC 6100 0000                  		bsr.w	Obj66_ChkSwitch
000152E0 4A28 0001                  		tst.b	1(a0)
000152E4 6A00 0000                  		bpl.w	Obj66_Display
000152E8 323C 0030                  		move.w	#$30,d1
000152EC 3401                       		move.w	d1,d2
000152EE 3602                       		move.w	d2,d3
000152F0 5243                       		addq.w	#1,d3
000152F2 3828 0008                  		move.w	8(a0),d4
000152F6 6100 A84C                  		bsr.w	SolidObject
000152FA 0828 0005 0022             		btst	#5,$22(a0)
00015300 6700 0000                  		beq.w	Obj66_Display
00015304 43F8 D000                  		lea	($FFFFD000).w,a1
00015308 720E                       		moveq	#$E,d1
0001530A 3029 0008                  		move.w	8(a1),d0
0001530E B068 0008                  		cmp.w	8(a0),d0
00015312 6500                       		bcs.s	Obj66_GrabSonic
00015314 7207                       		moveq	#7,d1
00015316                            
00015316                            Obj66_GrabSonic:
00015316 B228 001A                  		cmp.b	$1A(a0),d1
0001531A 6600                       		bne.s	Obj66_Display
0001531C 1141 0032                  		move.b	d1,$32(a0)
00015320 5828 0024                  		addq.b	#4,$24(a0)
00015324 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001532A 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015330 337C 0800 0014             		move.w	#$800,$14(a1)
00015336 337C 0000 0010             		move.w	#0,$10(a1)
0001533C 337C 0000 0012             		move.w	#0,$12(a1)
00015342 08A8 0005 0022             		bclr	#5,$22(a0)
00015348 08A9 0005 0022             		bclr	#5,$22(a1)
0001534E 08E9 0001 0022             		bset	#1,$22(a1)
00015354 3429 0008                  		move.w	8(a1),d2
00015358 3629 000C                  		move.w	$C(a1),d3
0001535C 6100 0000                  		bsr.w	Obj66_ChgPos
00015360 D569 0008                  		add.w	d2,8(a1)
00015364 D769 000C                  		add.w	d3,$C(a1)
00015368 E0E9 0008                  		asr	8(a1)
0001536C E0E9 000C                  		asr	$C(a1)
00015370                            
00015370                            Obj66_Display:				; XREF: Obj66_Index
00015370 6000 A4AA                  		bra.w	MarkObjGone
00015374                            ; ===========================================================================
00015374                            
00015374                            Obj66_Release:				; XREF: Obj66_Index
00015374 1028 001A                  		move.b	$1A(a0),d0
00015378 0C00 0004                  		cmpi.b	#4,d0
0001537C 6700                       		beq.s	loc_151C8
0001537E 0C00 0007                  		cmpi.b	#7,d0
00015382 6600                       		bne.s	loc_151F8
00015384                            
00015384                            loc_151C8:
00015384 B028 0032                  		cmp.b	$32(a0),d0
00015388 6700                       		beq.s	loc_151F8
0001538A 43F8 D000                  		lea	($FFFFD000).w,a1
0001538E 337C 0000 0010             		move.w	#0,$10(a1)
00015394 337C 0800 0012             		move.w	#$800,$12(a1)
0001539A 0C00 0004                  		cmpi.b	#4,d0
0001539E 6700                       		beq.s	loc_151F0
000153A0 337C 0800 0010             		move.w	#$800,$10(a1)
000153A6 337C 0800 0012             		move.w	#$800,$12(a1)
000153AC                            
000153AC                            loc_151F0:
000153AC 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000153B0 5928 0024                  		subq.b	#4,$24(a0)
000153B4                            
000153B4                            loc_151F8:
000153B4 6100                       		bsr.s	Obj66_ChkSwitch
000153B6 6100                       		bsr.s	Obj66_ChgPos
000153B8 6000 A462                  		bra.w	MarkObjGone
000153BC                            
000153BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153BC                            
000153BC                            
000153BC                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000153BC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000153C0 7000                       		moveq	#0,d0
000153C2 1028 0038                  		move.b	$38(a0),d0
000153C6 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000153CC 6700                       		beq.s	loc_15224	; if not, branch
000153CE 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000153D2 6600                       		bne.s	Obj66_Animate	; if yes, branch
000153D4 4428 0034                  		neg.b	$34(a0)
000153D8 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000153DE 6000                       		bra.s	Obj66_Animate
000153E0                            ; ===========================================================================
000153E0                            
000153E0                            loc_15224:
000153E0 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000153E4                            
000153E4                            Obj66_Animate:
000153E4 5328 001E                  		subq.b	#1,$1E(a0)
000153E8 6A00                       		bpl.s	locret_15246
000153EA 117C 0007 001E             		move.b	#7,$1E(a0)
000153F0 1228 0034                  		move.b	$34(a0),d1
000153F4 1028 001A                  		move.b	$1A(a0),d0
000153F8 D001                       		add.b	d1,d0
000153FA 0200 000F                  		andi.b	#$F,d0
000153FE 1140 001A                  		move.b	d0,$1A(a0)
00015402                            
00015402                            locret_15246:
00015402 4E75                       		rts	
00015404                            ; End of function Obj66_ChkSwitch
00015404                            
00015404                            
00015404                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015404                            
00015404                            
00015404                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015404 43F8 D000                  		lea	($FFFFD000).w,a1
00015408 7000                       		moveq	#0,d0
0001540A 1028 001A                  		move.b	$1A(a0),d0
0001540E D040                       		add.w	d0,d0
00015410 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015414 101A                       		move.b	(a2)+,d0
00015416 4880                       		ext.w	d0
00015418 D068 0008                  		add.w	8(a0),d0
0001541C 3340 0008                  		move.w	d0,8(a1)
00015420 101A                       		move.b	(a2)+,d0
00015422 4880                       		ext.w	d0
00015424 D068 000C                  		add.w	$C(a0),d0
00015428 3340 000C                  		move.w	d0,$C(a1)
0001542C 4E75                       		rts	
0001542E                            ; End of function Obj66_ChgPos
0001542E                            
0001542E                            ; ===========================================================================
0001542E E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015432 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015436 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001543A 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001543E 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015442 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015446 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001544A E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001544E                            ; ---------------------------------------------------------------------------
0001544E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001544E                            ; ---------------------------------------------------------------------------
0001544E                            Map_obj66:
0001544E                            	include "_maps\obj66.asm"
0001544E                            ; ---------------------------------------------------------------------------
0001544E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001544E                            ; ---------------------------------------------------------------------------
0001544E 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015452 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015456 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
0001545A 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
0001545E 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015462 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015466 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
0001546A 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
0001546E 0000                       		dc.w byte_154A4-Map_obj66
00015470 06                         byte_152B4:	dc.b 6
00015471 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015476 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001547B E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015480 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015485 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
0001548A 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001548F 06                         byte_152D3:	dc.b 6
00015490 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015495 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
0001549A F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
0001549F F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000154A4 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000154A9 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000154AE 06                         byte_152F2:	dc.b 6
000154AF 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000154B4 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000154B9 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000154BE 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000154C3 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000154C8 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000154CD 06                         byte_15311:	dc.b 6
000154CE 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000154D3 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000154D8 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000154DD 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000154E2 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000154E7 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
000154EC 06                         byte_15330:	dc.b 6
000154ED 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
000154F2 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
000154F7 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000154FC 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015501 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015506 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001550B 06                         byte_1534F:	dc.b 6
0001550C 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015511 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015516 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001551B 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015520 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015525 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001552A 06                         byte_1536E:	dc.b 6
0001552B 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015530 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015535 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001553A 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001553F 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015544 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015549 06                         byte_1538D:	dc.b 6
0001554A 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001554F F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015554 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015559 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001555E 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015563 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015568 06                         byte_153AC:	dc.b 6
00015569 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001556E 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015573 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015578 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001557D 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015582 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015587 06                         byte_153CB:	dc.b 6
00015588 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001558D E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015592 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015597 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001559C F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000155A1 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000155A6 06                         byte_153EA:	dc.b 6
000155A7 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000155AC E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000155B1 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000155B6 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000155BB E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000155C0 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000155C5 06                         byte_15409:	dc.b 6
000155C6 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000155CB D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000155D0 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000155D5 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000155DA E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000155DF E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000155E4 06                         byte_15428:	dc.b 6
000155E5 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
000155EA D005 1845 08               		dc.b $D0, 5, $18, $45, 8
000155EF C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
000155F4 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000155F9 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000155FE E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015603 06                         byte_15447:	dc.b 6
00015604 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015609 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001560E CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015613 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015618 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001561D E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015622 06                         byte_15466:	dc.b 6
00015623 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015628 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
0001562D D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015632 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015637 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001563C E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015641 06                         byte_15485:	dc.b 6
00015642 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015647 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001564C DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015651 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015656 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001565B F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015660 0C                         byte_154A4:	dc.b $C
00015661 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015666 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001566B E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015670 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015675 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001567A E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001567F 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015684 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015689 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001568E 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015693 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015698 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001569E 00                         		even
0001569E 00                         		even
0001569E                            
0001569E                            ; ===========================================================================
0001569E                            ; ---------------------------------------------------------------------------
0001569E                            ; Object 67 - disc that	you run	around (SBZ)
0001569E                            ; ---------------------------------------------------------------------------
0001569E                            
0001569E                            Obj67:					; XREF: Obj_Index
0001569E 7000                       		moveq	#0,d0
000156A0 1028 0024                  		move.b	$24(a0),d0
000156A4 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
000156A8 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
000156AC                            ; ===========================================================================
000156AC 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
000156AE 0000                       		dc.w Obj67_Action-Obj67_Index
000156B0                            ; ===========================================================================
000156B0                            
000156B0                            Obj67_Main:				; XREF: Obj67_Index
000156B0 5428 0024                  		addq.b	#2,$24(a0)
000156B4 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
000156BC 317C C344 0002             		move.w	#$C344,2(a0)
000156C2 117C 0004 0001             		move.b	#4,1(a0)
000156C8 117C 0004 0018             		move.b	#4,$18(a0)
000156CE 117C 0008 0019             		move.b	#8,$19(a0)
000156D4 3168 0008 0032             		move.w	8(a0),$32(a0)
000156DA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000156E0 117C 0018 0034             		move.b	#$18,$34(a0)
000156E6 117C 0048 0038             		move.b	#$48,$38(a0)
000156EC 1228 0028                  		move.b	$28(a0),d1	; get object type
000156F0 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000156F4 6700                       		beq.s	loc_15546
000156F6 117C 0010 0034             		move.b	#$10,$34(a0)
000156FC 117C 0038 0038             		move.b	#$38,$38(a0)
00015702                            
00015702                            loc_15546:
00015702 1228 0028                  		move.b	$28(a0),d1	; get object type
00015706 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001570A 4881                       		ext.w	d1
0001570C E741                       		asl.w	#3,d1
0001570E 3141 0036                  		move.w	d1,$36(a0)
00015712 1028 0022                  		move.b	$22(a0),d0
00015716 E418                       		ror.b	#2,d0
00015718 0200 00C0                  		andi.b	#-$40,d0
0001571C 1140 0026                  		move.b	d0,$26(a0)
00015720                            
00015720                            Obj67_Action:				; XREF: Obj67_Index
00015720 6100 0000                  		bsr.w	Obj67_MoveSonic
00015724 6100 0000                  		bsr.w	Obj67_MoveSpot
00015728 6000 0000                  		bra.w	Obj67_ChkDel
0001572C                            ; ===========================================================================
0001572C                            
0001572C                            Obj67_MoveSonic:			; XREF: Obj67_Action
0001572C 7400                       		moveq	#0,d2
0001572E 1428 0038                  		move.b	$38(a0),d2
00015732 3602                       		move.w	d2,d3
00015734 D643                       		add.w	d3,d3
00015736 43F8 D000                  		lea	($FFFFD000).w,a1
0001573A 3029 0008                  		move.w	8(a1),d0
0001573E 9068 0032                  		sub.w	$32(a0),d0
00015742 D042                       		add.w	d2,d0
00015744 B043                       		cmp.w	d3,d0
00015746 6400                       		bcc.s	loc_155A8
00015748 3229 000C                  		move.w	$C(a1),d1
0001574C 9268 0030                  		sub.w	$30(a0),d1
00015750 D242                       		add.w	d2,d1
00015752 B243                       		cmp.w	d3,d1
00015754 6400                       		bcc.s	loc_155A8
00015756 0829 0001 0022             		btst	#1,$22(a1)
0001575C 6700                       		beq.s	loc_155B8
0001575E 4228 003A                  		clr.b	$3A(a0)
00015762 4E75                       		rts	
00015764                            ; ===========================================================================
00015764                            
00015764                            loc_155A8:
00015764 4A28 003A                  		tst.b	$3A(a0)
00015768 6700                       		beq.s	locret_155B6
0001576A 4229 0038                  		clr.b	$38(a1)
0001576E 4228 003A                  		clr.b	$3A(a0)
00015772                            
00015772                            locret_155B6:
00015772 4E75                       		rts	
00015774                            ; ===========================================================================
00015774                            
00015774                            loc_155B8:
00015774 4A28 003A                  		tst.b	$3A(a0)
00015778 6600                       		bne.s	loc_155E2
0001577A 117C 0001 003A             		move.b	#1,$3A(a0)
00015780 0829 0002 0022             		btst	#2,$22(a1)
00015786 6600                       		bne.s	loc_155D0
00015788 4229 001C                  		clr.b	$1C(a1)
0001578C                            
0001578C                            loc_155D0:
0001578C 08A9 0005 0022             		bclr	#5,$22(a1)
00015792 137C 0001 001D             		move.b	#1,$1D(a1)
00015798 137C 0001 0038             		move.b	#1,$38(a1)
0001579E                            
0001579E                            loc_155E2:
0001579E 3029 0014                  		move.w	$14(a1),d0
000157A2 4A68 0036                  		tst.w	$36(a0)
000157A6 6A00                       		bpl.s	loc_15608
000157A8 0C40 FC00                  		cmpi.w	#-$400,d0
000157AC 6F00                       		ble.s	loc_155FA
000157AE 337C FC00 0014             		move.w	#-$400,$14(a1)
000157B4 4E75                       		rts	
000157B6                            ; ===========================================================================
000157B6                            
000157B6                            loc_155FA:
000157B6 0C40 F100                  		cmpi.w	#-$F00,d0
000157BA 6C00                       		bge.s	locret_15606
000157BC 337C F100 0014             		move.w	#-$F00,$14(a1)
000157C2                            
000157C2                            locret_15606:
000157C2 4E75                       		rts	
000157C4                            ; ===========================================================================
000157C4                            
000157C4                            loc_15608:
000157C4 0C40 0400                  		cmpi.w	#$400,d0
000157C8 6C00                       		bge.s	loc_15616
000157CA 337C 0400 0014             		move.w	#$400,$14(a1)
000157D0 4E75                       		rts	
000157D2                            ; ===========================================================================
000157D2                            
000157D2                            loc_15616:
000157D2 0C40 0F00                  		cmpi.w	#$F00,d0
000157D6 6F00                       		ble.s	locret_15622
000157D8 337C 0F00 0014             		move.w	#$F00,$14(a1)
000157DE                            
000157DE                            locret_15622:
000157DE 4E75                       		rts	
000157E0                            ; ===========================================================================
000157E0                            
000157E0                            Obj67_MoveSpot:				; XREF: Obj67_Action
000157E0 3028 0036                  		move.w	$36(a0),d0
000157E4 D168 0026                  		add.w	d0,$26(a0)
000157E8 1028 0026                  		move.b	$26(a0),d0
000157EC 4EB9 0000 29DA             		jsr	(CalcSine).l
000157F2 3428 0030                  		move.w	$30(a0),d2
000157F6 3628 0032                  		move.w	$32(a0),d3
000157FA 7800                       		moveq	#0,d4
000157FC 1828 0034                  		move.b	$34(a0),d4
00015800 E14C                       		lsl.w	#8,d4
00015802 2A04                       		move.l	d4,d5
00015804 C9C0                       		muls.w	d0,d4
00015806 4844                       		swap	d4
00015808 CBC1                       		muls.w	d1,d5
0001580A 4845                       		swap	d5
0001580C D842                       		add.w	d2,d4
0001580E DA43                       		add.w	d3,d5
00015810 3144 000C                  		move.w	d4,$C(a0)
00015814 3145 0008                  		move.w	d5,8(a0)
00015818 4E75                       		rts	
0001581A                            ; ===========================================================================
0001581A                            
0001581A                            Obj67_ChkDel:				; XREF: Obj67_Action
0001581A 3028 0032                  		move.w	$32(a0),d0
0001581E 0240 FF80                  		andi.w	#-$80,d0
00015822 3238 F700                  		move.w	($FFFFF700).w,d1
00015826 0441 0080                  		subi.w	#$80,d1
0001582A 0241 FF80                  		andi.w	#-$80,d1
0001582E 9041                       		sub.w	d1,d0
00015830 0C40 0280                  		cmpi.w	#$280,d0
00015834 6200                       		bhi.s	Obj67_Delete
00015836 4EF9 0000 D774             		jmp	DisplaySprite
0001583C                            ; ===========================================================================
0001583C                            
0001583C                            Obj67_Delete:
0001583C 4EF9 0000 D7B0             		jmp	DeleteObject
00015842                            ; ===========================================================================
00015842                            ; ---------------------------------------------------------------------------
00015842                            ; Sprite mappings - disc that you run around (SBZ)
00015842                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015842                            ; part of the level tiles.)
00015842                            ; ---------------------------------------------------------------------------
00015842                            Map_obj67:
00015842                            	include "_maps\obj67.asm"
00015842                            ; ---------------------------------------------------------------------------
00015842                            ; Sprite mappings - disc that you run around (SBZ)
00015842                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015842                            ; part of the level tiles.)
00015842                            ; ---------------------------------------------------------------------------
00015842 0000                       		dc.w byte_15688-Map_obj67
00015844 01                         byte_15688:	dc.b 1
00015845 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001584A                            		even
0001584A                            		even
0001584A                            
0001584A                            ; ===========================================================================
0001584A                            ; ---------------------------------------------------------------------------
0001584A                            ; Object 68 - conveyor belts (SBZ)
0001584A                            ; ---------------------------------------------------------------------------
0001584A                            
0001584A                            Obj68:					; XREF: Obj_Index
0001584A 7000                       		moveq	#0,d0
0001584C 1028 0024                  		move.b	$24(a0),d0
00015850 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015854 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015858                            ; ===========================================================================
00015858 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
0001585A 0000                       		dc.w Obj68_Action-Obj68_Index
0001585C                            ; ===========================================================================
0001585C                            
0001585C                            Obj68_Main:				; XREF: Obj68_Index
0001585C 5428 0024                  		addq.b	#2,$24(a0)
00015860 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015866 1228 0028                  		move.b	$28(a0),d1	; get object type
0001586A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001586E 6700                       		beq.s	loc_156BA	; if zero, branch
00015870 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015876                            
00015876                            loc_156BA:
00015876 1228 0028                  		move.b	$28(a0),d1	; get object type
0001587A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001587E 4881                       		ext.w	d1
00015880 E841                       		asr.w	#4,d1
00015882 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015886                            
00015886                            Obj68_Action:				; XREF: Obj68_Index
00015886 6100                       		bsr.s	Obj68_MoveSonic
00015888 3028 0008                  		move.w	8(a0),d0
0001588C 0240 FF80                  		andi.w	#$FF80,d0
00015890 3238 F700                  		move.w	($FFFFF700).w,d1
00015894 0441 0080                  		subi.w	#$80,d1
00015898 0241 FF80                  		andi.w	#$FF80,d1
0001589C 9041                       		sub.w	d1,d0
0001589E 0C40 0280                  		cmpi.w	#$280,d0
000158A2 6200                       		bhi.s	Obj68_Delete
000158A4 4E75                       		rts	
000158A6                            ; ===========================================================================
000158A6                            
000158A6                            Obj68_Delete:
000158A6 4EF9 0000 D7B0             		jmp	DeleteObject
000158AC                            ; ===========================================================================
000158AC                            
000158AC                            Obj68_MoveSonic:			; XREF: Obj68_Action
000158AC 7400                       		moveq	#0,d2
000158AE 1428 0038                  		move.b	$38(a0),d2
000158B2 3602                       		move.w	d2,d3
000158B4 D643                       		add.w	d3,d3
000158B6 43F8 D000                  		lea	($FFFFD000).w,a1
000158BA 3029 0008                  		move.w	8(a1),d0
000158BE 9068 0008                  		sub.w	8(a0),d0
000158C2 D042                       		add.w	d2,d0
000158C4 B043                       		cmp.w	d3,d0
000158C6 6400                       		bcc.s	locret_1572E
000158C8 3229 000C                  		move.w	$C(a1),d1
000158CC 9268 000C                  		sub.w	$C(a0),d1
000158D0 0641 0030                  		addi.w	#$30,d1
000158D4 0C41 0030                  		cmpi.w	#$30,d1
000158D8 6400                       		bcc.s	locret_1572E
000158DA 0829 0001 0022             		btst	#1,$22(a1)
000158E0 6600                       		bne.s	locret_1572E
000158E2 3028 0036                  		move.w	$36(a0),d0
000158E6 D169 0008                  		add.w	d0,8(a1)
000158EA                            
000158EA                            locret_1572E:
000158EA 4E75                       		rts	
000158EC                            
000158EC                            ; ===========================================================================
000158EC                            ; ---------------------------------------------------------------------------
000158EC                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000158EC                            ; ---------------------------------------------------------------------------
000158EC                            
000158EC                            Obj69:					; XREF: Obj_Index
000158EC 7000                       		moveq	#0,d0
000158EE 1028 0024                  		move.b	$24(a0),d0
000158F2 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
000158F6 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000158FA                            ; ===========================================================================
000158FA 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000158FC 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000158FE 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015900                            ; ===========================================================================
00015900                            
00015900                            Obj69_Main:				; XREF: Obj69_Index
00015900 5428 0024                  		addq.b	#2,$24(a0)
00015904 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0001590C 317C 4492 0002             		move.w	#$4492,2(a0)
00015912 0028 0004 0001             		ori.b	#4,1(a0)
00015918 117C 0080 0019             		move.b	#$80,$19(a0)
0001591E 7000                       		moveq	#0,d0
00015920 1028 0028                  		move.b	$28(a0),d0
00015924 0240 000F                  		andi.w	#$F,d0
00015928 C0FC 003C                  		mulu.w	#$3C,d0
0001592C 3140 0032                  		move.w	d0,$32(a0)
00015930 4A28 0028                  		tst.b	$28(a0)
00015934 6A00                       		bpl.s	Obj69_Trapdoor
00015936 5428 0024                  		addq.b	#2,$24(a0)
0001593A 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015942 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015948 117C 0010 0019             		move.b	#$10,$19(a0)
0001594E 117C 0002 001C             		move.b	#2,$1C(a0)
00015954 7000                       		moveq	#0,d0
00015956 1028 0028                  		move.b	$28(a0),d0	; get object type
0001595A 3200                       		move.w	d0,d1
0001595C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015960 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015964 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015968 3140 0032                  		move.w	d0,$32(a0)
0001596C 0241 0070                  		andi.w	#$70,d1
00015970 0641 0010                  		addi.w	#$10,d1
00015974 E549                       		lsl.w	#2,d1
00015976 5341                       		subq.w	#1,d1
00015978 3141 0036                  		move.w	d1,$36(a0)
0001597C 6000                       		bra.s	Obj69_Spinner
0001597E                            ; ===========================================================================
0001597E                            
0001597E                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001597E 5368 0030                  		subq.w	#1,$30(a0)
00015982 6A00                       		bpl.s	Obj69_Animate
00015984 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001598A 0868 0000 001C             		bchg	#0,$1C(a0)
00015990 4A28 0001                  		tst.b	1(a0)
00015994 6A00                       		bpl.s	Obj69_Animate
00015996 303C 00BB                  		move.w	#$BB,d0
0001599A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play door sound
000159A0                            
000159A0                            Obj69_Animate:
000159A0 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000159A6 4EB9 0000 A826             		jsr	AnimateSprite
000159AC 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000159B0 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000159B2 323C 004B                  		move.w	#$4B,d1
000159B6 343C 000C                  		move.w	#$C,d2
000159BA 3602                       		move.w	d2,d3
000159BC 5243                       		addq.w	#1,d3
000159BE 3828 0008                  		move.w	8(a0),d4
000159C2 6100 A180                  		bsr.w	SolidObject
000159C6 6000 9E54                  		bra.w	MarkObjGone
000159CA                            ; ===========================================================================
000159CA                            
000159CA                            Obj69_NotSolid:
000159CA 0828 0003 0022             		btst	#3,$22(a0)
000159D0 6700                       		beq.s	Obj69_Display
000159D2 43F8 D000                  		lea	($FFFFD000).w,a1
000159D6 08A9 0003 0022             		bclr	#3,$22(a1)
000159DC 08A8 0003 0022             		bclr	#3,$22(a0)
000159E2 4228 0025                  		clr.b	$25(a0)
000159E6                            
000159E6                            Obj69_Display:
000159E6 6000 9E34                  		bra.w	MarkObjGone
000159EA                            ; ===========================================================================
000159EA                            
000159EA                            Obj69_Spinner:				; XREF: Obj69_Index
000159EA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000159EE C068 0036                  		and.w	$36(a0),d0
000159F2 6600                       		bne.s	Obj69_Delay
000159F4 117C 0001 0034             		move.b	#1,$34(a0)
000159FA                            
000159FA                            Obj69_Delay:
000159FA 4A28 0034                  		tst.b	$34(a0)
000159FE 6700                       		beq.s	Obj69_Animate2
00015A00 5368 0030                  		subq.w	#1,$30(a0)
00015A04 6A00                       		bpl.s	Obj69_Animate2
00015A06 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015A0C 4228 0034                  		clr.b	$34(a0)
00015A10 0868 0000 001C             		bchg	#0,$1C(a0)
00015A16                            
00015A16                            Obj69_Animate2:
00015A16 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015A1C 4EB9 0000 A826             		jsr	AnimateSprite
00015A22 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015A26 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015A28 323C 001B                  		move.w	#$1B,d1
00015A2C 343C 0007                  		move.w	#7,d2
00015A30 3602                       		move.w	d2,d3
00015A32 5243                       		addq.w	#1,d3
00015A34 3828 0008                  		move.w	8(a0),d4
00015A38 6100 A10A                  		bsr.w	SolidObject
00015A3C 6000 9DDE                  		bra.w	MarkObjGone
00015A40                            ; ===========================================================================
00015A40                            
00015A40                            Obj69_NotSolid2:
00015A40 0828 0003 0022             		btst	#3,$22(a0)
00015A46 6700                       		beq.s	Obj69_Display2
00015A48 43F8 D000                  		lea	($FFFFD000).w,a1
00015A4C 08A9 0003 0022             		bclr	#3,$22(a1)
00015A52 08A8 0003 0022             		bclr	#3,$22(a0)
00015A58 4228 0025                  		clr.b	$25(a0)
00015A5C                            
00015A5C                            Obj69_Display2:
00015A5C 6000 9DBE                  		bra.w	MarkObjGone
00015A60                            ; ===========================================================================
00015A60                            Ani_obj69:
00015A60                            	include "_anim\obj69.asm"
00015A60                            ; ---------------------------------------------------------------------------
00015A60                            ; Animation script - trapdoor (SBZ)
00015A60                            ; ---------------------------------------------------------------------------
00015A60 0000                       		dc.w byte_158AC-Ani_obj69
00015A62 0000                       		dc.w byte_158B2-Ani_obj69
00015A64 0000                       		dc.w byte_158B8-Ani_obj69
00015A66 0000                       		dc.w byte_158CC-Ani_obj69
00015A68 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015A6E 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015A74 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015A81 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015A88 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015A95 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015A9C                            		even
00015A9C                            		even
00015A9C                            
00015A9C                            ; ---------------------------------------------------------------------------
00015A9C                            ; Sprite mappings - trapdoor (SBZ)
00015A9C                            ; ---------------------------------------------------------------------------
00015A9C                            Map_obj69:
00015A9C                            	include "_maps\obj69.asm"
00015A9C                            ; ---------------------------------------------------------------------------
00015A9C                            ; Sprite mappings - trapdoor (SBZ)
00015A9C                            ; ---------------------------------------------------------------------------
00015A9C 0000                       		dc.w byte_158E6-Map_obj69
00015A9E 0000                       		dc.w byte_158FB-Map_obj69
00015AA0 0000                       		dc.w byte_15924-Map_obj69
00015AA2 04                         byte_158E6:	dc.b 4
00015AA3 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015AA8 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015AAD F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015AB2 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015AB7 08                         byte_158FB:	dc.b 8
00015AB8 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015ABD 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015AC2 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015AC7 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015ACC F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015AD1 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015AD6 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015ADB 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015AE0 04                         byte_15924:	dc.b 4
00015AE1 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015AE6 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015AEB 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015AF0 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015AF6 00                         		even
00015AF6 00                         		even
00015AF6                            
00015AF6                            ; ---------------------------------------------------------------------------
00015AF6                            ; Sprite mappings - spinning platforms (SBZ)
00015AF6                            ; ---------------------------------------------------------------------------
00015AF6                            Map_obj69a:
00015AF6                            	include "_maps\obj69a.asm"
00015AF6                            ; ---------------------------------------------------------------------------
00015AF6                            ; Sprite mappings - spinning platforms (SBZ)
00015AF6                            ; ---------------------------------------------------------------------------
00015AF6 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015AFA 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015AFE 0000                       		dc.w byte_15970-Map_obj69a
00015B00 02                         byte_15944:	dc.b 2
00015B01 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015B06 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015B0B 02                         byte_1594F:	dc.b 2
00015B0C F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015B11 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015B16 02                         byte_1595A:	dc.b 2
00015B17 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015B1C 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015B21 02                         byte_15965:	dc.b 2
00015B22 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015B27 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015B2C 02                         byte_15970:	dc.b 2
00015B2D F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015B32 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015B38 00                         		even
00015B38 00                         		even
00015B38                            
00015B38                            ; ===========================================================================
00015B38                            ; ---------------------------------------------------------------------------
00015B38                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015B38                            ; ---------------------------------------------------------------------------
00015B38                            
00015B38                            Obj6A:					; XREF: Obj_Index
00015B38 7000                       		moveq	#0,d0
00015B3A 1028 0024                  		move.b	$24(a0),d0
00015B3E 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015B42 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015B46                            ; ===========================================================================
00015B46 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015B48 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015B4A                            ; ===========================================================================
00015B4A                            
00015B4A                            Obj6A_Main:				; XREF: Obj6A_Index
00015B4A 5428 0024                  		addq.b	#2,$24(a0)
00015B4E 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015B56 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015B5C 117C 0004 0001             		move.b	#4,1(a0)
00015B62 117C 0004 0018             		move.b	#4,$18(a0)
00015B68 117C 0020 0019             		move.b	#$20,$19(a0)
00015B6E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015B74 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015B7A 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015B80 6400                       		bcc.s	Obj6A_Action
00015B82 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015B88                            
00015B88                            Obj6A_Action:				; XREF: Obj6A_Index
00015B88 7000                       		moveq	#0,d0
00015B8A 1028 0028                  		move.b	$28(a0),d0
00015B8E 0240 0007                  		andi.w	#7,d0
00015B92 D040                       		add.w	d0,d0
00015B94 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015B98 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015B9C 3028 003A                  		move.w	$3A(a0),d0
00015BA0 0240 FF80                  		andi.w	#$FF80,d0
00015BA4 3238 F700                  		move.w	($FFFFF700).w,d1
00015BA8 0441 0080                  		subi.w	#$80,d1
00015BAC 0241 FF80                  		andi.w	#$FF80,d1
00015BB0 9041                       		sub.w	d1,d0
00015BB2 0C40 0280                  		cmpi.w	#$280,d0
00015BB6 6200                       		bhi.s	Obj6A_Delete
00015BB8 4EF9 0000 D774             		jmp	DisplaySprite
00015BBE                            ; ===========================================================================
00015BBE                            
00015BBE                            Obj6A_Delete:
00015BBE 4EF9 0000 D7B0             		jmp	DeleteObject
00015BC4                            ; ===========================================================================
00015BC4 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00015BC8 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00015BCC 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00015BCE                            ; ===========================================================================
00015BCE                            
00015BCE                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00015BCE 4E75                       		rts	
00015BD0                            ; ===========================================================================
00015BD0                            
00015BD0                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015BD0 323C 0060                  		move.w	#$60,d1
00015BD4 7000                       		moveq	#0,d0
00015BD6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00015BDA 0828 0000 0022             		btst	#0,$22(a0)
00015BE0 6700                       		beq.s	Obj6A_Animate01
00015BE2 4440                       		neg.w	d0
00015BE4 D041                       		add.w	d1,d0
00015BE6                            
00015BE6                            Obj6A_Animate01:
00015BE6 3228 003A                  		move.w	$3A(a0),d1
00015BEA 9240                       		sub.w	d0,d1
00015BEC 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00015BF0 5328 001E                  		subq.b	#1,$1E(a0)
00015BF4 6A00                       		bpl.s	loc_15A46
00015BF6 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00015BFC 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00015C02                            
00015C02                            loc_15A46:
00015C02 4A28 0001                  		tst.b	1(a0)
00015C06 6A00                       		bpl.s	locret_15A60
00015C08 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015C0C 0240 000F                  		andi.w	#$F,d0
00015C10 6600                       		bne.s	locret_15A60
00015C12 303C 00B0                  		move.w	#$B0,d0
00015C16 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015C1C                            
00015C1C                            locret_15A60:
00015C1C 4E75                       		rts	
00015C1E                            ; ===========================================================================
00015C1E                            
00015C1E                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00015C1E 323C 0030                  		move.w	#$30,d1
00015C22 7000                       		moveq	#0,d0
00015C24 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015C28 0828 0000 0022             		btst	#0,$22(a0)
00015C2E 6700                       		beq.s	Obj6A_Animate02
00015C30 4440                       		neg.w	d0
00015C32 0640 0080                  		addi.w	#$80,d0
00015C36                            
00015C36                            Obj6A_Animate02:
00015C36 3228 0038                  		move.w	$38(a0),d1
00015C3A 9240                       		sub.w	d0,d1
00015C3C 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00015C40 5328 001E                  		subq.b	#1,$1E(a0)
00015C44 6A00                       		bpl.s	loc_15A96
00015C46 117C 0002 001E             		move.b	#2,$1E(a0)
00015C4C 0868 0000 001A             		bchg	#0,$1A(a0)
00015C52                            
00015C52                            loc_15A96:
00015C52 4A28 0001                  		tst.b	1(a0)
00015C56 6A00                       		bpl.s	locret_15AB0
00015C58 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015C5C 0C00 0018                  		cmpi.b	#$18,d0
00015C60 6600                       		bne.s	locret_15AB0
00015C62 303C 00B0                  		move.w	#$B0,d0
00015C66 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015C6C                            
00015C6C                            locret_15AB0:
00015C6C 4E75                       		rts	
00015C6E                            ; ===========================================================================
00015C6E                            
00015C6E                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00015C6E 4A28 003D                  		tst.b	$3D(a0)
00015C72 6600                       		bne.s	Obj6A_Animate03
00015C74 3038 D008                  		move.w	($FFFFD008).w,d0
00015C78 0440 00C0                  		subi.w	#$C0,d0
00015C7C 6500                       		bcs.s	loc_15B02
00015C7E 9068 0008                  		sub.w	8(a0),d0
00015C82 6500                       		bcs.s	loc_15B02
00015C84 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015C88 0440 0080                  		subi.w	#$80,d0
00015C8C B068 000C                  		cmp.w	$C(a0),d0
00015C90 6400                       		bcc.s	locret_15B04
00015C92 0640 0100                  		addi.w	#$100,d0
00015C96 B068 000C                  		cmp.w	$C(a0),d0
00015C9A 6500                       		bcs.s	locret_15B04
00015C9C 117C 0001 003D             		move.b	#1,$3D(a0)
00015CA2 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00015CA8 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015CAE 117C 0002 001A             		move.b	#2,$1A(a0)
00015CB4 303C 00B0                  		move.w	#$B0,d0
00015CB8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015CBE                            
00015CBE                            loc_15B02:
00015CBE 588F                       		addq.l	#4,sp
00015CC0                            
00015CC0                            locret_15B04:
00015CC0 4E75                       		rts	
00015CC2                            ; ===========================================================================
00015CC2                            
00015CC2                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00015CC2 4EB9 0000 D74E             		jsr	SpeedToPos
00015CC8 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015CCE 5328 001E                  		subq.b	#1,$1E(a0)
00015CD2 6A00                       		bpl.s	locret_15B24
00015CD4 117C 0002 001E             		move.b	#2,$1E(a0)
00015CDA 0868 0000 001A             		bchg	#0,$1A(a0)
00015CE0                            
00015CE0                            locret_15B24:
00015CE0 4E75                       		rts	
00015CE2                            ; ===========================================================================
00015CE2                            
00015CE2                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00015CE2 4A28 003D                  		tst.b	$3D(a0)
00015CE6 6600                       		bne.s	Obj6A_Animate04
00015CE8 3038 D008                  		move.w	($FFFFD008).w,d0
00015CEC 0640 00E0                  		addi.w	#$E0,d0
00015CF0 9068 0008                  		sub.w	8(a0),d0
00015CF4 6400                       		bcc.s	loc_15B74
00015CF6 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015CFA 0440 0080                  		subi.w	#$80,d0
00015CFE B068 000C                  		cmp.w	$C(a0),d0
00015D02 6400                       		bcc.s	locret_15B76
00015D04 0640 0100                  		addi.w	#$100,d0
00015D08 B068 000C                  		cmp.w	$C(a0),d0
00015D0C 6500                       		bcs.s	locret_15B76
00015D0E 117C 0001 003D             		move.b	#1,$3D(a0)
00015D14 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00015D1A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015D20 117C 0002 001A             		move.b	#2,$1A(a0)
00015D26 303C 00B0                  		move.w	#$B0,d0
00015D2A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015D30                            
00015D30                            loc_15B74:
00015D30 588F                       		addq.l	#4,sp
00015D32                            
00015D32                            locret_15B76:
00015D32 4E75                       		rts	
00015D34                            ; ===========================================================================
00015D34                            
00015D34                            Obj6A_Animate04:
00015D34 4EB9 0000 D74E             		jsr	SpeedToPos
00015D3A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015D40 5328 001E                  		subq.b	#1,$1E(a0)
00015D44 6A00                       		bpl.s	locret_15B96
00015D46 117C 0002 001E             		move.b	#2,$1E(a0)
00015D4C 0868 0000 001A             		bchg	#0,$1A(a0)
00015D52                            
00015D52                            locret_15B96:
00015D52 4E75                       		rts	
00015D54                            ; ===========================================================================
00015D54                            ; ---------------------------------------------------------------------------
00015D54                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015D54                            ; ---------------------------------------------------------------------------
00015D54                            Map_obj6A:
00015D54                            	include "_maps\obj6A.asm"
00015D54                            ; ---------------------------------------------------------------------------
00015D54                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015D54                            ; ---------------------------------------------------------------------------
00015D54 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00015D58 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00015D5C 07                         byte_15BA0:	dc.b 7
00015D5D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015D62 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015D67 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015D6C E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015D71 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015D76 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015D7B 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015D80 07                         byte_15BC4:	dc.b 7
00015D81 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015D86 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015D8B E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015D90 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015D95 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015D9A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015D9F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015DA4 04                         byte_15BE8:	dc.b 4
00015DA5 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015DAA E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015DAF 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015DB4 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015DB9 04                         byte_15BFD:	dc.b 4
00015DBA E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015DBF E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015DC4 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015DC9 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015DCE                            		even
00015DCE                            		even
00015DCE                            
00015DCE                            ; ===========================================================================
00015DCE                            ; ---------------------------------------------------------------------------
00015DCE                            ; Object 6B - stomper (SBZ)
00015DCE                            ; ---------------------------------------------------------------------------
00015DCE                            
00015DCE                            Obj6B:					; XREF: Obj_Index
00015DCE 7000                       		moveq	#0,d0
00015DD0 1028 0024                  		move.b	$24(a0),d0
00015DD4 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00015DD8 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00015DDC                            ; ===========================================================================
00015DDC 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00015DDE 0000                       		dc.w Obj6B_Action-Obj6B_Index
00015DE0                            
00015DE0 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00015DE4 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00015DE8 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00015DEC 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00015DF0 8040 0005                  		dc.b  $80, $40,	  0,   5
00015DF4                            ; ===========================================================================
00015DF4                            
00015DF4                            Obj6B_Main:				; XREF: Obj6B_Index
00015DF4 5428 0024                  		addq.b	#2,$24(a0)
00015DF8 7000                       		moveq	#0,d0
00015DFA 1028 0028                  		move.b	$28(a0),d0
00015DFE E448                       		lsr.w	#2,d0
00015E00 0240 001C                  		andi.w	#$1C,d0
00015E04 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00015E08 115B 0019                  		move.b	(a3)+,$19(a0)
00015E0C 115B 0016                  		move.b	(a3)+,$16(a0)
00015E10 E448                       		lsr.w	#2,d0
00015E12 1140 001A                  		move.b	d0,$1A(a0)
00015E16 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00015E1E 317C 22C0 0002             		move.w	#$22C0,2(a0)
00015E24 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00015E2A 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00015E2C 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00015E32 6700                       		beq.s	Obj6B_SBZ3
00015E34                            
00015E34                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00015E34 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015E38 7000                       		moveq	#0,d0
00015E3A 1028 0023                  		move.b	$23(a0),d0
00015E3E 6700                       		beq.s	Obj6B_Delete
00015E40 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015E46                            
00015E46                            Obj6B_Delete:
00015E46 4EF9 0000 D7B0             		jmp	DeleteObject
00015E4C                            ; ===========================================================================
00015E4C                            
00015E4C                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00015E4C 317C 41F0 0002             		move.w	#$41F0,2(a0)
00015E52 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00015E58 6600                       		bne.s	Obj6B_SBZ12
00015E5A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015E5E 7000                       		moveq	#0,d0
00015E60 1028 0023                  		move.b	$23(a0),d0
00015E64 6700                       		beq.s	Obj6B_SBZ12
00015E66 0832 0000 0002             		btst	#0,2(a2,d0.w)
00015E6C 6700                       		beq.s	Obj6B_SBZ12
00015E6E 4238 F7CB                  		clr.b	($FFFFF7CB).w
00015E72 60C0                       		bra.s	Obj6B_ChkGone
00015E74                            ; ===========================================================================
00015E74                            
00015E74                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00015E74 0028 0004 0001             		ori.b	#4,1(a0)
00015E7A 117C 0004 0018             		move.b	#4,$18(a0)
00015E80 3168 0008 0034             		move.w	8(a0),$34(a0)
00015E86 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015E8C 7000                       		moveq	#0,d0
00015E8E 101B                       		move.b	(a3)+,d0
00015E90 3140 003C                  		move.w	d0,$3C(a0)
00015E94 7000                       		moveq	#0,d0
00015E96 1028 0028                  		move.b	$28(a0),d0
00015E9A 6A00                       		bpl.s	Obj6B_Action
00015E9C 0200 000F                  		andi.b	#$F,d0
00015EA0 1140 003E                  		move.b	d0,$3E(a0)
00015EA4 1153 0028                  		move.b	(a3),$28(a0)
00015EA8 0C13 0005                  		cmpi.b	#5,(a3)
00015EAC 6600                       		bne.s	Obj6B_ChkGone2
00015EAE 08E8 0004 0001             		bset	#4,1(a0)
00015EB4                            
00015EB4                            Obj6B_ChkGone2:
00015EB4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015EB8 7000                       		moveq	#0,d0
00015EBA 1028 0023                  		move.b	$23(a0),d0
00015EBE 6700                       		beq.s	Obj6B_Action
00015EC0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015EC6                            
00015EC6                            Obj6B_Action:				; XREF: Obj6B_Index
00015EC6 3F28 0008                  		move.w	8(a0),-(sp)
00015ECA 7000                       		moveq	#0,d0
00015ECC 1028 0028                  		move.b	$28(a0),d0
00015ED0 0240 000F                  		andi.w	#$F,d0
00015ED4 D040                       		add.w	d0,d0
00015ED6 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00015EDA 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00015EDE 381F                       		move.w	(sp)+,d4
00015EE0 4A28 0001                  		tst.b	1(a0)
00015EE4 6A00                       		bpl.s	Obj6B_ChkDel
00015EE6 7200                       		moveq	#0,d1
00015EE8 1228 0019                  		move.b	$19(a0),d1
00015EEC 0641 000B                  		addi.w	#$B,d1
00015EF0 7400                       		moveq	#0,d2
00015EF2 1428 0016                  		move.b	$16(a0),d2
00015EF6 3602                       		move.w	d2,d3
00015EF8 5243                       		addq.w	#1,d3
00015EFA 6100 9C48                  		bsr.w	SolidObject
00015EFE                            
00015EFE                            Obj6B_ChkDel:
00015EFE 3028 0034                  		move.w	$34(a0),d0
00015F02 0240 FF80                  		andi.w	#$FF80,d0
00015F06 3238 F700                  		move.w	($FFFFF700).w,d1
00015F0A 0441 0080                  		subi.w	#$80,d1
00015F0E 0241 FF80                  		andi.w	#$FF80,d1
00015F12 9041                       		sub.w	d1,d0
00015F14 0C40 0280                  		cmpi.w	#$280,d0
00015F18 6200                       		bhi.s	loc_15D64
00015F1A 4EF9 0000 D774             		jmp	DisplaySprite
00015F20                            ; ===========================================================================
00015F20                            
00015F20                            loc_15D64:
00015F20 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00015F26 6600                       		bne.s	Obj6B_Delete2
00015F28 4238 F7CB                  		clr.b	($FFFFF7CB).w
00015F2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015F30 7000                       		moveq	#0,d0
00015F32 1028 0023                  		move.b	$23(a0),d0
00015F36 6700                       		beq.s	Obj6B_Delete2
00015F38 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015F3E                            
00015F3E                            Obj6B_Delete2:
00015F3E 4EF9 0000 D7B0             		jmp	DeleteObject
00015F44                            ; ===========================================================================
00015F44 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00015F48 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00015F4C 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00015F50                            ; ===========================================================================
00015F50                            
00015F50                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00015F50 4E75                       		rts	
00015F52                            ; ===========================================================================
00015F52                            
00015F52                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00015F52 4A28 0038                  		tst.b	$38(a0)
00015F56 6600                       		bne.s	loc_15DB4
00015F58 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015F5C 7000                       		moveq	#0,d0
00015F5E 1028 003E                  		move.b	$3E(a0),d0
00015F62 0832 0000 0000             		btst	#0,(a2,d0.w)
00015F68 6700                       		beq.s	loc_15DC2
00015F6A 117C 0001 0038             		move.b	#1,$38(a0)
00015F70                            
00015F70                            loc_15DB4:
00015F70 3028 003C                  		move.w	$3C(a0),d0
00015F74 B068 003A                  		cmp.w	$3A(a0),d0
00015F78 6700                       		beq.s	loc_15DE0
00015F7A 5468 003A                  		addq.w	#2,$3A(a0)
00015F7E                            
00015F7E                            loc_15DC2:
00015F7E 3028 003A                  		move.w	$3A(a0),d0
00015F82 0828 0000 0022             		btst	#0,$22(a0)
00015F88 6700                       		beq.s	loc_15DD4
00015F8A 4440                       		neg.w	d0
00015F8C 0640 0080                  		addi.w	#$80,d0
00015F90                            
00015F90                            loc_15DD4:
00015F90 3228 0034                  		move.w	$34(a0),d1
00015F94 9240                       		sub.w	d0,d1
00015F96 3141 0008                  		move.w	d1,8(a0)
00015F9A 4E75                       		rts	
00015F9C                            ; ===========================================================================
00015F9C                            
00015F9C                            loc_15DE0:
00015F9C 5228 0028                  		addq.b	#1,$28(a0)
00015FA0 317C 00B4 0036             		move.w	#$B4,$36(a0)
00015FA6 4228 0038                  		clr.b	$38(a0)
00015FAA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015FAE 7000                       		moveq	#0,d0
00015FB0 1028 0023                  		move.b	$23(a0),d0
00015FB4 67C8                       		beq.s	loc_15DC2
00015FB6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00015FBC 60C0                       		bra.s	loc_15DC2
00015FBE                            ; ===========================================================================
00015FBE                            
00015FBE                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00015FBE 4A28 0038                  		tst.b	$38(a0)
00015FC2 6600                       		bne.s	loc_15E14
00015FC4 5368 0036                  		subq.w	#1,$36(a0)
00015FC8 6600                       		bne.s	loc_15E1E
00015FCA 117C 0001 0038             		move.b	#1,$38(a0)
00015FD0                            
00015FD0                            loc_15E14:
00015FD0 4A68 003A                  		tst.w	$3A(a0)
00015FD4 6700                       		beq.s	loc_15E3C
00015FD6 5568 003A                  		subq.w	#2,$3A(a0)
00015FDA                            
00015FDA                            loc_15E1E:
00015FDA 3028 003A                  		move.w	$3A(a0),d0
00015FDE 0828 0000 0022             		btst	#0,$22(a0)
00015FE4 6700                       		beq.s	loc_15E30
00015FE6 4440                       		neg.w	d0
00015FE8 0640 0080                  		addi.w	#$80,d0
00015FEC                            
00015FEC                            loc_15E30:
00015FEC 3228 0034                  		move.w	$34(a0),d1
00015FF0 9240                       		sub.w	d0,d1
00015FF2 3141 0008                  		move.w	d1,8(a0)
00015FF6 4E75                       		rts	
00015FF8                            ; ===========================================================================
00015FF8                            
00015FF8                            loc_15E3C:
00015FF8 5328 0028                  		subq.b	#1,$28(a0)
00015FFC 4228 0038                  		clr.b	$38(a0)
00016000 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016004 7000                       		moveq	#0,d0
00016006 1028 0023                  		move.b	$23(a0),d0
0001600A 67CE                       		beq.s	loc_15E1E
0001600C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016012 60C6                       		bra.s	loc_15E1E
00016014                            ; ===========================================================================
00016014                            
00016014                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016014 4A28 0038                  		tst.b	$38(a0)
00016018 6600                       		bne.s	loc_15E7C
0001601A 4A68 003A                  		tst.w	$3A(a0)
0001601E 6700                       		beq.s	loc_15E6A
00016020 5368 003A                  		subq.w	#1,$3A(a0)
00016024 6000                       		bra.s	loc_15E8E
00016026                            ; ===========================================================================
00016026                            
00016026                            loc_15E6A:
00016026 5368 0036                  		subq.w	#1,$36(a0)
0001602A 6A00                       		bpl.s	loc_15E8E
0001602C 317C 003C 0036             		move.w	#$3C,$36(a0)
00016032 117C 0001 0038             		move.b	#1,$38(a0)
00016038                            
00016038                            loc_15E7C:
00016038 5068 003A                  		addq.w	#8,$3A(a0)
0001603C 3028 003A                  		move.w	$3A(a0),d0
00016040 B068 003C                  		cmp.w	$3C(a0),d0
00016044 6600                       		bne.s	loc_15E8E
00016046 4228 0038                  		clr.b	$38(a0)
0001604A                            
0001604A                            loc_15E8E:
0001604A 3028 003A                  		move.w	$3A(a0),d0
0001604E 0828 0000 0022             		btst	#0,$22(a0)
00016054 6700                       		beq.s	loc_15EA0
00016056 4440                       		neg.w	d0
00016058 0640 0038                  		addi.w	#$38,d0
0001605C                            
0001605C                            loc_15EA0:
0001605C 3228 0030                  		move.w	$30(a0),d1
00016060 D240                       		add.w	d0,d1
00016062 3141 000C                  		move.w	d1,$C(a0)
00016066 4E75                       		rts	
00016068                            ; ===========================================================================
00016068                            
00016068                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016068 4A28 0038                  		tst.b	$38(a0)
0001606C 6600                       		bne.s	loc_15ED0
0001606E 4A68 003A                  		tst.w	$3A(a0)
00016072 6700                       		beq.s	loc_15EBE
00016074 5168 003A                  		subq.w	#8,$3A(a0)
00016078 6000                       		bra.s	loc_15EF0
0001607A                            ; ===========================================================================
0001607A                            
0001607A                            loc_15EBE:
0001607A 5368 0036                  		subq.w	#1,$36(a0)
0001607E 6A00                       		bpl.s	loc_15EF0
00016080 317C 003C 0036             		move.w	#$3C,$36(a0)
00016086 117C 0001 0038             		move.b	#1,$38(a0)
0001608C                            
0001608C                            loc_15ED0:
0001608C 3028 003A                  		move.w	$3A(a0),d0
00016090 B068 003C                  		cmp.w	$3C(a0),d0
00016094 6700                       		beq.s	loc_15EE0
00016096 5068 003A                  		addq.w	#8,$3A(a0)
0001609A 6000                       		bra.s	loc_15EF0
0001609C                            ; ===========================================================================
0001609C                            
0001609C                            loc_15EE0:
0001609C 5368 0036                  		subq.w	#1,$36(a0)
000160A0 6A00                       		bpl.s	loc_15EF0
000160A2 317C 003C 0036             		move.w	#$3C,$36(a0)
000160A8 4228 0038                  		clr.b	$38(a0)
000160AC                            
000160AC                            loc_15EF0:
000160AC 3028 003A                  		move.w	$3A(a0),d0
000160B0 0828 0000 0022             		btst	#0,$22(a0)
000160B6 6700                       		beq.s	loc_15F02
000160B8 4440                       		neg.w	d0
000160BA 0640 0038                  		addi.w	#$38,d0
000160BE                            
000160BE                            loc_15F02:
000160BE 3228 0030                  		move.w	$30(a0),d1
000160C2 D240                       		add.w	d0,d1
000160C4 3141 000C                  		move.w	d1,$C(a0)
000160C8 4E75                       		rts	
000160CA                            ; ===========================================================================
000160CA                            
000160CA                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000160CA 4A28 0038                  		tst.b	$38(a0)
000160CE 6600                       		bne.s	loc_15F3E
000160D0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000160D4 7000                       		moveq	#0,d0
000160D6 1028 003E                  		move.b	$3E(a0),d0
000160DA 0832 0000 0000             		btst	#0,(a2,d0.w)
000160E0 6700                       		beq.s	locret_15F5C
000160E2 117C 0001 0038             		move.b	#1,$38(a0)
000160E8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000160EC 7000                       		moveq	#0,d0
000160EE 1028 0023                  		move.b	$23(a0),d0
000160F2 6700                       		beq.s	loc_15F3E
000160F4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000160FA                            
000160FA                            loc_15F3E:
000160FA 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016102 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001610A 3168 0008 0034             		move.w	8(a0),$34(a0)
00016110 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016116 6700                       		beq.s	loc_15F5E
00016118                            
00016118                            locret_15F5C:
00016118 4E75                       		rts	
0001611A                            ; ===========================================================================
0001611A                            
0001611A                            loc_15F5E:
0001611A 4228 0028                  		clr.b	$28(a0)
0001611E 4228 0038                  		clr.b	$38(a0)
00016122 4E75                       		rts	
00016124                            ; ===========================================================================
00016124                            ; ---------------------------------------------------------------------------
00016124                            ; Sprite mappings - stomper and	platforms (SBZ)
00016124                            ; ---------------------------------------------------------------------------
00016124                            Map_obj6B:
00016124                            	include "_maps\obj6B.asm"
00016124                            ; ---------------------------------------------------------------------------
00016124                            ; Sprite mappings - stomper and	platforms (SBZ)
00016124                            ; ---------------------------------------------------------------------------
00016124 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016128 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001612C 0000                       		dc.w byte_15FB0-Map_obj6B
0001612E 04                         byte_15F72:	dc.b 4
0001612F F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016134 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016139 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001613E F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016143 08                         byte_15F87:	dc.b 8
00016144 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016149 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001614E E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016153 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016158 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001615D 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016162 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016167 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001616C 0E                         byte_15FB0:	dc.b $E
0001616D C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016172 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016177 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001617C C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016181 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016186 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
0001618B C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016190 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016195 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
0001619A E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001619F E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000161A4 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000161A9 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000161AE 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000161B4 00                         		even
000161B4 00                         		even
000161B4                            
000161B4                            ; ===========================================================================
000161B4                            ; ---------------------------------------------------------------------------
000161B4                            ; Object 6C - vanishing	platforms (SBZ)
000161B4                            ; ---------------------------------------------------------------------------
000161B4                            
000161B4                            Obj6C:					; XREF: Obj_Index
000161B4 7000                       		moveq	#0,d0
000161B6 1028 0024                  		move.b	$24(a0),d0
000161BA 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000161BE 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000161C2                            ; ===========================================================================
000161C2 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000161C4 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000161C6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000161C8 0000                       		dc.w loc_16068-Obj6C_Index
000161CA                            ; ===========================================================================
000161CA                            
000161CA                            Obj6C_Main:				; XREF: Obj6C_Index
000161CA 5C28 0024                  		addq.b	#6,$24(a0)
000161CE 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000161D6 317C 44C3 0002             		move.w	#$44C3,2(a0)
000161DC 0028 0004 0001             		ori.b	#4,1(a0)
000161E2 117C 0010 0019             		move.b	#$10,$19(a0)
000161E8 117C 0004 0018             		move.b	#4,$18(a0)
000161EE 7000                       		moveq	#0,d0
000161F0 1028 0028                  		move.b	$28(a0),d0	; get object type
000161F4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000161F8 5240                       		addq.w	#1,d0		; add 1
000161FA EF48                       		lsl.w	#7,d0		; multiply by $80
000161FC 3200                       		move.w	d0,d1
000161FE 5340                       		subq.w	#1,d0
00016200 3140 0030                  		move.w	d0,$30(a0)
00016204 3140 0032                  		move.w	d0,$32(a0)
00016208 7000                       		moveq	#0,d0
0001620A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001620E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016212 0641 0080                  		addi.w	#$80,d1
00016216 C0C1                       		mulu.w	d1,d0
00016218 E088                       		lsr.l	#8,d0
0001621A 3140 0036                  		move.w	d0,$36(a0)
0001621E 5341                       		subq.w	#1,d1
00016220 3141 0038                  		move.w	d1,$38(a0)
00016224                            
00016224                            loc_16068:				; XREF: Obj6C_Index
00016224 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016228 9068 0036                  		sub.w	$36(a0),d0
0001622C C068 0038                  		and.w	$38(a0),d0
00016230 6600                       		bne.s	Obj6C_Animate
00016232 5928 0024                  		subq.b	#4,$24(a0)
00016236 6000                       		bra.s	Obj6C_Vanish
00016238                            ; ===========================================================================
00016238                            
00016238                            Obj6C_Animate:
00016238 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001623E 4EB9 0000 A826             		jsr	AnimateSprite
00016244 6000 95D6                  		bra.w	MarkObjGone
00016248                            ; ===========================================================================
00016248                            
00016248                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016248 5368 0030                  		subq.w	#1,$30(a0)
0001624C 6A00                       		bpl.s	loc_160AA
0001624E 317C 007F 0030             		move.w	#127,$30(a0)
00016254 4A28 001C                  		tst.b	$1C(a0)
00016258 6700                       		beq.s	loc_160A4
0001625A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016260                            
00016260                            loc_160A4:
00016260 0868 0000 001C             		bchg	#0,$1C(a0)
00016266                            
00016266                            loc_160AA:
00016266 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001626C 4EB9 0000 A826             		jsr	AnimateSprite
00016272 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016278 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
0001627A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016280 6600                       		bne.s	loc_160D6
00016282 7200                       		moveq	#0,d1
00016284 1228 0019                  		move.b	$19(a0),d1
00016288 4EB9 0000 758A             		jsr	(PlatformObject).l
0001628E 6000 958C                  		bra.w	MarkObjGone
00016292                            ; ===========================================================================
00016292                            
00016292                            loc_160D6:
00016292 7200                       		moveq	#0,d1
00016294 1228 0019                  		move.b	$19(a0),d1
00016298 4EB9 0000 76FE             		jsr	(ExitPlatform).l
0001629E 3428 0008                  		move.w	8(a0),d2
000162A2 4EB9 0000 7C68             		jsr	(MvSonicOnPtfm2).l
000162A8 6000 9572                  		bra.w	MarkObjGone
000162AC                            ; ===========================================================================
000162AC                            
000162AC                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000162AC 0828 0003 0022             		btst	#3,$22(a0)
000162B2 6700                       		beq.s	Obj6C_Display
000162B4 43F8 D000                  		lea	($FFFFD000).w,a1
000162B8 08A9 0003 0022             		bclr	#3,$22(a1)
000162BE 08A8 0003 0022             		bclr	#3,$22(a0)
000162C4 117C 0002 0024             		move.b	#2,$24(a0)
000162CA 4228 0025                  		clr.b	$25(a0)
000162CE                            
000162CE                            Obj6C_Display:
000162CE 6000 954C                  		bra.w	MarkObjGone
000162D2                            ; ===========================================================================
000162D2                            Ani_obj6C:
000162D2                            	include "_anim\obj6C.asm"
000162D2                            ; ---------------------------------------------------------------------------
000162D2                            ; Animation script - vanishing platforms (SBZ)
000162D2                            ; ---------------------------------------------------------------------------
000162D2 0000                       		dc.w byte_1611A-Ani_obj6C
000162D4 0000                       		dc.w byte_16122-Ani_obj6C
000162D6 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000162DE 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000162E6                            		even
000162E6                            		even
000162E6                            
000162E6                            ; ---------------------------------------------------------------------------
000162E6                            ; Sprite mappings - vanishing platforms	(SBZ)
000162E6                            ; ---------------------------------------------------------------------------
000162E6                            Map_obj6C:
000162E6                            	include "_maps\obj6C.asm"
000162E6                            ; ---------------------------------------------------------------------------
000162E6                            ; Sprite mappings - vanishing platforms	(SBZ)
000162E6                            ; ---------------------------------------------------------------------------
000162E6 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
000162EA 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
000162EE 01                         byte_16132:	dc.b 1
000162EF F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000162F4 01                         byte_16138:	dc.b 1
000162F5 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000162FA 01                         byte_1613E:	dc.b 1
000162FB F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016300 00                         byte_16144:	dc.b 0
00016302 00                         		even
00016302 00                         		even
00016302                            
00016302                            ; ===========================================================================
00016302                            ; ---------------------------------------------------------------------------
00016302                            ; Object 6E - electrocution orbs (SBZ)
00016302                            ; ---------------------------------------------------------------------------
00016302                            
00016302                            Obj6E:					; XREF: Obj_Index
00016302 7000                       		moveq	#0,d0
00016304 1028 0024                  		move.b	$24(a0),d0
00016308 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001630C 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016310                            ; ===========================================================================
00016310 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016312 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016314                            ; ===========================================================================
00016314                            
00016314                            Obj6E_Main:				; XREF: Obj6E_Index
00016314 5428 0024                  		addq.b	#2,$24(a0)
00016318 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016320 317C 047E 0002             		move.w	#$47E,2(a0)
00016326 0028 0004 0001             		ori.b	#4,1(a0)
0001632C 117C 0028 0019             		move.b	#$28,$19(a0)
00016332 7000                       		moveq	#0,d0
00016334 1028 0028                  		move.b	$28(a0),d0	; read object type
00016338 E948                       		lsl.w	#4,d0		; multiply by $10
0001633A 5340                       		subq.w	#1,d0
0001633C 3140 0034                  		move.w	d0,$34(a0)
00016340                            
00016340                            Obj6E_Shock:				; XREF: Obj6E_Index
00016340 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016344 C068 0034                  		and.w	$34(a0),d0
00016348 6600                       		bne.s	Obj6E_Animate
0001634A 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016350 4A28 0001                  		tst.b	1(a0)
00016354 6A00                       		bpl.s	Obj6E_Animate
00016356 303C 00B1                  		move.w	#$B1,d0
0001635A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play electricity sound
00016360                            
00016360                            Obj6E_Animate:
00016360 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016366 4EB9 0000 A826             		jsr	AnimateSprite
0001636C 117C 0000 0020             		move.b	#0,$20(a0)
00016372 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016378 6600                       		bne.s	Obj6E_Display	; if not, branch
0001637A 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016380                            
00016380                            Obj6E_Display:
00016380 6000 949A                  		bra.w	MarkObjGone
00016384                            ; ===========================================================================
00016384                            Ani_obj6E:
00016384                            	include "_anim\obj6E.asm"
00016384                            ; ---------------------------------------------------------------------------
00016384                            ; Animation script - electrocution orbs (SBZ)
00016384                            ; ---------------------------------------------------------------------------
00016384 0000                       		dc.w byte_161CC-Ani_obj6E
00016386 0000                       		dc.w byte_161D0-Ani_obj6E
00016388 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
0001638C 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
0001639C                            		even
0001639C                            		even
0001639C                            
0001639C                            ; ---------------------------------------------------------------------------
0001639C                            ; Sprite mappings - electrocution orbs (SBZ)
0001639C                            ; ---------------------------------------------------------------------------
0001639C                            Map_obj6E:
0001639C                            	include "_maps\obj6E.asm"
0001639C                            ; ---------------------------------------------------------------------------
0001639C                            ; Sprite mappings - electrocution orbs (SBZ)
0001639C                            ; ---------------------------------------------------------------------------
0001639C 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
000163A0 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
000163A4 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
000163A8 02                         byte_161EC:	dc.b 2
000163A9 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000163AE 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000163B3 03                         byte_161F7:	dc.b 3
000163B4 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000163B9 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000163BE 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000163C3 05                         byte_16207:	dc.b 5
000163C4 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000163C9 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000163CE 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000163D3 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000163D8 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000163DD 04                         byte_16221:	dc.b 4
000163DE F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000163E3 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000163E8 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000163ED F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000163F2 06                         byte_16236:	dc.b 6
000163F3 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000163F8 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000163FD F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00016402 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00016407 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
0001640C F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00016411 04                         byte_16255:	dc.b 4
00016412 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016417 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001641C F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00016421 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00016426                            		even
00016426                            		even
00016426                            
00016426                            ; ===========================================================================
00016426                            ; ---------------------------------------------------------------------------
00016426                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016426                            ; ---------------------------------------------------------------------------
00016426                            
00016426                            Obj6F:					; XREF: Obj_Index
00016426 7000                       		moveq	#0,d0
00016428 1028 0024                  		move.b	$24(a0),d0
0001642C 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016430 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016434 3028 0030                  		move.w	$30(a0),d0
00016438 0240 FF80                  		andi.w	#$FF80,d0
0001643C 3238 F700                  		move.w	($FFFFF700).w,d1
00016440 0441 0080                  		subi.w	#$80,d1
00016444 0241 FF80                  		andi.w	#$FF80,d1
00016448 9041                       		sub.w	d1,d0
0001644A 0C40 0280                  		cmpi.w	#$280,d0
0001644E 6200                       		bhi.s	loc_1629A
00016450                            
00016450                            Obj6F_Display:
00016450 4EF9 0000 D774             		jmp	DisplaySprite
00016456                            ; ===========================================================================
00016456                            
00016456                            loc_1629A:
00016456 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001645C 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
0001645E 0C40 FF80                  		cmpi.w	#-$80,d0
00016462 64EC                       		bcc.s	Obj6F_Display
00016464                            
00016464                            Obj6F_Act1or2:
00016464 1028 002F                  		move.b	$2F(a0),d0
00016468 6A00                       		bpl.s	Obj6F_Delete
0001646A 0240 007F                  		andi.w	#$7F,d0
0001646E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016472 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016478                            
00016478                            Obj6F_Delete:
00016478 4EF9 0000 D7B0             		jmp	DeleteObject
0001647E                            ; ===========================================================================
0001647E 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016480 0000                       		dc.w loc_163D8-Obj6F_Index
00016482                            ; ===========================================================================
00016482                            
00016482                            Obj6F_Main:				; XREF: Obj6F_Index
00016482 1028 0028                  		move.b	$28(a0),d0
00016486 6B00 0000                  		bmi.w	loc_16380
0001648A 5428 0024                  		addq.b	#2,$24(a0)
0001648E 217C 0001 5AF6 0004        		move.l	#Map_obj69a,4(a0)
00016496 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001649C 117C 0010 0019             		move.b	#$10,$19(a0)
000164A2 0028 0004 0001             		ori.b	#4,1(a0)
000164A8 117C 0004 0018             		move.b	#4,$18(a0)
000164AE 7000                       		moveq	#0,d0
000164B0 1028 0028                  		move.b	$28(a0),d0
000164B4 3200                       		move.w	d0,d1
000164B6 E648                       		lsr.w	#3,d0
000164B8 0240 001E                  		andi.w	#$1E,d0
000164BC 45FA 0000                  		lea	off_164A6(pc),a2
000164C0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000164C4 315A 0038                  		move.w	(a2)+,$38(a0)
000164C8 315A 0030                  		move.w	(a2)+,$30(a0)
000164CC 214A 003C                  		move.l	a2,$3C(a0)
000164D0 0241 000F                  		andi.w	#$F,d1
000164D4 E549                       		lsl.w	#2,d1
000164D6 1141 0038                  		move.b	d1,$38(a0)
000164DA 117C 0004 003A             		move.b	#4,$3A(a0)
000164E0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000164E4 6700                       		beq.s	loc_16356
000164E6 117C 0001 003B             		move.b	#1,$3B(a0)
000164EC 4428 003A                  		neg.b	$3A(a0)
000164F0 7200                       		moveq	#0,d1
000164F2 1228 0038                  		move.b	$38(a0),d1
000164F6 D228 003A                  		add.b	$3A(a0),d1
000164FA B228 0039                  		cmp.b	$39(a0),d1
000164FE 6500                       		bcs.s	loc_16352
00016500 1001                       		move.b	d1,d0
00016502 7200                       		moveq	#0,d1
00016504 4A00                       		tst.b	d0
00016506 6A00                       		bpl.s	loc_16352
00016508 1228 0039                  		move.b	$39(a0),d1
0001650C 5901                       		subq.b	#4,d1
0001650E                            
0001650E                            loc_16352:
0001650E 1141 0038                  		move.b	d1,$38(a0)
00016512                            
00016512                            loc_16356:
00016512 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016518 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001651E 4A41                       		tst.w	d1
00016520 6600                       		bne.s	loc_1636C
00016522 117C 0001 001C             		move.b	#1,$1C(a0)
00016528                            
00016528                            loc_1636C:
00016528 0C41 0008                  		cmpi.w	#8,d1
0001652C 6600                       		bne.s	loc_16378
0001652E 117C 0000 001C             		move.b	#0,$1C(a0)
00016534                            
00016534                            loc_16378:
00016534 6100 C186                  		bsr.w	Obj63_ChangeDir
00016538 6000 0000                  		bra.w	loc_163D8
0001653C                            ; ===========================================================================
0001653C                            
0001653C                            loc_16380:				; XREF: Obj6F_Main
0001653C 1140 002F                  		move.b	d0,$2F(a0)
00016540 0240 007F                  		andi.w	#$7F,d0
00016544 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016548 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001654E 6700                       		beq.s	loc_1639A
00016550 4EF9 0000 D7B0             		jmp	DeleteObject
00016556                            ; ===========================================================================
00016556                            
00016556                            loc_1639A:
00016556 D040                       		add.w	d0,d0
00016558 0240 001E                  		andi.w	#$1E,d0
0001655C 0640 0080                  		addi.w	#$80,d0
00016560 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016566 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001656A 321A                       		move.w	(a2)+,d1
0001656C 2248                       		movea.l	a0,a1
0001656E 6000                       		bra.s	Obj6F_LoadPform
00016570                            ; ===========================================================================
00016570                            
00016570                            Obj6F_Loop:
00016570 4EB9 0000 DBFA             		jsr	SingleObjLoad
00016576 6600                       		bne.s	loc_163D0
00016578                            
00016578                            Obj6F_LoadPform:			; XREF: loc_1639A
00016578 12BC 006F                  		move.b	#$6F,0(a1)
0001657C 335A 0008                  		move.w	(a2)+,8(a1)
00016580 335A 000C                  		move.w	(a2)+,$C(a1)
00016584 301A                       		move.w	(a2)+,d0
00016586 1340 0028                  		move.b	d0,$28(a1)
0001658A                            
0001658A                            loc_163D0:
0001658A 51C9 FFE4                  		dbf	d1,Obj6F_Loop
0001658E                            
0001658E 588F                       		addq.l	#4,sp
00016590 4E75                       		rts	
00016592                            ; ===========================================================================
00016592                            
00016592                            loc_163D8:				; XREF: Obj6F_Index
00016592 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016598 4EB9 0000 A826             		jsr	AnimateSprite
0001659E 4A28 001A                  		tst.b	$1A(a0)
000165A2 6600                       		bne.s	loc_16404
000165A4 3F28 0008                  		move.w	8(a0),-(sp)
000165A8 6100 0000                  		bsr.w	loc_16424
000165AC 323C 001B                  		move.w	#$1B,d1
000165B0 343C 0007                  		move.w	#7,d2
000165B4 3602                       		move.w	d2,d3
000165B6 5243                       		addq.w	#1,d3
000165B8 381F                       		move.w	(sp)+,d4
000165BA 6000 9588                  		bra.w	SolidObject
000165BE                            ; ===========================================================================
000165BE                            
000165BE                            loc_16404:
000165BE 0828 0003 0022             		btst	#3,$22(a0)
000165C4 6700                       		beq.s	loc_16420
000165C6 43F8 D000                  		lea	($FFFFD000).w,a1
000165CA 08A9 0003 0022             		bclr	#3,$22(a1)
000165D0 08A8 0003 0022             		bclr	#3,$22(a0)
000165D6 4228 0025                  		clr.b	$25(a0)
000165DA                            
000165DA                            loc_16420:
000165DA 6000 0002                  		bra.w	*+4
000165DE                            
000165DE                            loc_16424:
000165DE 3028 0008                  		move.w	8(a0),d0
000165E2 B068 0034                  		cmp.w	$34(a0),d0
000165E6 6600                       		bne.s	loc_16484
000165E8 3028 000C                  		move.w	$C(a0),d0
000165EC B068 0036                  		cmp.w	$36(a0),d0
000165F0 6600                       		bne.s	loc_16484
000165F2 7200                       		moveq	#0,d1
000165F4 1228 0038                  		move.b	$38(a0),d1
000165F8 D228 003A                  		add.b	$3A(a0),d1
000165FC B228 0039                  		cmp.b	$39(a0),d1
00016600 6500                       		bcs.s	loc_16456
00016602 1001                       		move.b	d1,d0
00016604 7200                       		moveq	#0,d1
00016606 4A00                       		tst.b	d0
00016608 6A00                       		bpl.s	loc_16456
0001660A 1228 0039                  		move.b	$39(a0),d1
0001660E 5901                       		subq.b	#4,d1
00016610                            
00016610                            loc_16456:
00016610 1141 0038                  		move.b	d1,$38(a0)
00016614 2268 003C                  		movea.l	$3C(a0),a1
00016618 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001661E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016624 4A41                       		tst.w	d1
00016626 6600                       		bne.s	loc_16474
00016628 117C 0001 001C             		move.b	#1,$1C(a0)
0001662E                            
0001662E                            loc_16474:
0001662E 0C41 0008                  		cmpi.w	#8,d1
00016632 6600                       		bne.s	loc_16480
00016634 117C 0000 001C             		move.b	#0,$1C(a0)
0001663A                            
0001663A                            loc_16480:
0001663A 6100 C080                  		bsr.w	Obj63_ChangeDir
0001663E                            
0001663E                            loc_16484:
0001663E 4EF9 0000 D74E             		jmp	SpeedToPos
00016644                            ; ===========================================================================
00016644                            Ani_obj6F:
00016644                            	include "_anim\obj6F.asm"
00016644                            ; ---------------------------------------------------------------------------
00016644                            ; Animation script - platform on conveyor belt (SBZ)
00016644                            ; ---------------------------------------------------------------------------
00016644 0000                       		dc.w byte_1648E-Ani_obj6F
00016646 0000                       		dc.w byte_164A2-Ani_obj6F
00016648 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016655 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
0001665C 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016660 00                         		even
00016660 00                         		even
00016660                            
00016660 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016666 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001666C 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016680 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016694 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000166A8 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000166BC 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000166D0 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
000166E4                            ; ===========================================================================
000166E4                            ; ---------------------------------------------------------------------------
000166E4                            ; Object 70 - large girder block (SBZ)
000166E4                            ; ---------------------------------------------------------------------------
000166E4                            
000166E4                            Obj70:					; XREF: Obj_Index
000166E4 7000                       		moveq	#0,d0
000166E6 1028 0024                  		move.b	$24(a0),d0
000166EA 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
000166EE 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
000166F2                            ; ===========================================================================
000166F2 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
000166F4 0000                       		dc.w Obj70_Action-Obj70_Index
000166F6                            ; ===========================================================================
000166F6                            
000166F6                            Obj70_Main:				; XREF: Obj70_Index
000166F6 5428 0024                  		addq.b	#2,$24(a0)
000166FA 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016702 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016708 0028 0004 0001             		ori.b	#4,1(a0)
0001670E 117C 0004 0018             		move.b	#4,$18(a0)
00016714 117C 0060 0019             		move.b	#$60,$19(a0)
0001671A 117C 0018 0016             		move.b	#$18,$16(a0)
00016720 3168 0008 0032             		move.w	8(a0),$32(a0)
00016726 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001672C 6100 0000                  		bsr.w	Obj70_Move2
00016730                            
00016730                            Obj70_Action:				; XREF: Obj70_Index
00016730 3F28 0008                  		move.w	8(a0),-(sp)
00016734 4A68 003A                  		tst.w	$3A(a0)
00016738 6700                       		beq.s	Obj70_Move
0001673A 5368 003A                  		subq.w	#1,$3A(a0)
0001673E 6600                       		bne.s	Obj70_Solid
00016740                            
00016740                            Obj70_Move:
00016740 4EB9 0000 D74E             		jsr	SpeedToPos
00016746 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
0001674A 6600                       		bne.s	Obj70_Solid	; if time remains, branch
0001674C 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016750                            
00016750                            Obj70_Solid:
00016750 381F                       		move.w	(sp)+,d4
00016752 4A28 0001                  		tst.b	1(a0)
00016756 6A00                       		bpl.s	Obj70_ChkDel
00016758 7200                       		moveq	#0,d1
0001675A 1228 0019                  		move.b	$19(a0),d1
0001675E 0641 000B                  		addi.w	#$B,d1
00016762 7400                       		moveq	#0,d2
00016764 1428 0016                  		move.b	$16(a0),d2
00016768 3602                       		move.w	d2,d3
0001676A 5243                       		addq.w	#1,d3
0001676C 6100 93D6                  		bsr.w	SolidObject
00016770                            
00016770                            Obj70_ChkDel:
00016770 3028 0032                  		move.w	$32(a0),d0
00016774 0240 FF80                  		andi.w	#$FF80,d0
00016778 3238 F700                  		move.w	($FFFFF700).w,d1
0001677C 0441 0080                  		subi.w	#$80,d1
00016780 0241 FF80                  		andi.w	#$FF80,d1
00016784 9041                       		sub.w	d1,d0
00016786 0C40 0280                  		cmpi.w	#$280,d0
0001678A 6200                       		bhi.s	Obj70_Delete
0001678C 4EF9 0000 D774             		jmp	DisplaySprite
00016792                            ; ===========================================================================
00016792                            
00016792                            Obj70_Delete:
00016792 4EF9 0000 D7B0             		jmp	DeleteObject
00016798                            ; ===========================================================================
00016798                            
00016798                            Obj70_Move2:				; XREF: Obj70_Main
00016798 1028 0038                  		move.b	$38(a0),d0
0001679C 0240 0018                  		andi.w	#$18,d0
000167A0 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000167A6 43F1 0000                  		lea	(a1,d0.w),a1
000167AA 3159 0010                  		move.w	(a1)+,$10(a0)
000167AE 3159 0012                  		move.w	(a1)+,$12(a0)
000167B2 3159 0034                  		move.w	(a1)+,$34(a0)
000167B6 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
000167BA 317C 0007 003A             		move.w	#7,$3A(a0)
000167C0 4E75                       		rts	
000167C2                            ; ===========================================================================
000167C2 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
000167CA 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
000167D2 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
000167DA 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
000167E2                            ; ---------------------------------------------------------------------------
000167E2                            ; Sprite mappings - large girder block (SBZ)
000167E2                            ; ---------------------------------------------------------------------------
000167E2                            Map_obj70:
000167E2                            	include "_maps\obj70.asm"
000167E2                            ; ---------------------------------------------------------------------------
000167E2                            ; Sprite mappings - large girder block (SBZ)
000167E2                            ; ---------------------------------------------------------------------------
000167E2 0000                       		dc.w byte_1662A-Map_obj70
000167E4 0C                         byte_1662A:	dc.b $C
000167E5 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
000167EA 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
000167EF E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
000167F4 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000167F9 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000167FE 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016803 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016808 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001680D E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016812 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016817 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001681C 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016822 00                         		even
00016822 00                         		even
00016822                            
00016822                            ; ===========================================================================
00016822                            ; ---------------------------------------------------------------------------
00016822                            ; Object 72 - teleporter (SBZ)
00016822                            ; ---------------------------------------------------------------------------
00016822                            
00016822                            Obj72:					; XREF: Obj_Index
00016822 7000                       		moveq	#0,d0
00016824 1028 0024                  		move.b	$24(a0),d0
00016828 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
0001682C 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016830 3028 0008                  		move.w	8(a0),d0
00016834 0240 FF80                  		andi.w	#$FF80,d0
00016838 3238 F700                  		move.w	($FFFFF700).w,d1
0001683C 0441 0080                  		subi.w	#$80,d1
00016840 0241 FF80                  		andi.w	#$FF80,d1
00016844 9041                       		sub.w	d1,d0
00016846 0C40 0280                  		cmpi.w	#$280,d0
0001684A 6200                       		bhi.s	Obj72_Delete
0001684C 4E75                       		rts	
0001684E                            ; ===========================================================================
0001684E                            
0001684E                            Obj72_Delete:
0001684E 4EF9 0000 D7B0             		jmp	DeleteObject
00016854                            ; ===========================================================================
00016854 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016856 0000                       		dc.w loc_166C8-Obj72_Index
00016858 0000                       		dc.w loc_1675E-Obj72_Index
0001685A 0000                       		dc.w loc_16798-Obj72_Index
0001685C                            ; ===========================================================================
0001685C                            
0001685C                            Obj72_Main:				; XREF: Obj72_Index
0001685C 5428 0024                  		addq.b	#2,$24(a0)
00016860 1028 0028                  		move.b	$28(a0),d0
00016864 D040                       		add.w	d0,d0
00016866 0240 001E                  		andi.w	#$1E,d0
0001686A 45FA 0000                  		lea	Obj72_Data(pc),a2
0001686E D4F2 0000                  		adda.w	(a2,d0.w),a2
00016872 315A 003A                  		move.w	(a2)+,$3A(a0)
00016876 214A 003C                  		move.l	a2,$3C(a0)
0001687A 315A 0036                  		move.w	(a2)+,$36(a0)
0001687E 315A 0038                  		move.w	(a2)+,$38(a0)
00016882                            
00016882                            loc_166C8:				; XREF: Obj72_Index
00016882 43F8 D000                  		lea	($FFFFD000).w,a1
00016886 3029 0008                  		move.w	8(a1),d0
0001688A 9068 0008                  		sub.w	8(a0),d0
0001688E 0828 0000 0022             		btst	#0,$22(a0)
00016894 6700                       		beq.s	loc_166E0
00016896 0640 000F                  		addi.w	#$F,d0
0001689A                            
0001689A                            loc_166E0:
0001689A 0C40 0010                  		cmpi.w	#$10,d0
0001689E 6400                       		bcc.s	locret_1675C
000168A0 3229 000C                  		move.w	$C(a1),d1
000168A4 9268 000C                  		sub.w	$C(a0),d1
000168A8 0641 0020                  		addi.w	#$20,d1
000168AC 0C41 0040                  		cmpi.w	#$40,d1
000168B0 6400                       		bcc.s	locret_1675C
000168B2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000168B6 6600                       		bne.s	locret_1675C
000168B8 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000168BE 6600                       		bne.s	loc_1670E
000168C0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000168C6 6500                       		bcs.s	locret_1675C
000168C8                            
000168C8                            loc_1670E:
000168C8 5428 0024                  		addq.b	#2,$24(a0)
000168CC 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000168D2 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000168D8 337C 0800 0014             		move.w	#$800,$14(a1)
000168DE 337C 0000 0010             		move.w	#0,$10(a1)
000168E4 337C 0000 0012             		move.w	#0,$12(a1)
000168EA 08A8 0005 0022             		bclr	#5,$22(a0)
000168F0 08A9 0005 0022             		bclr	#5,$22(a1)
000168F6 08E9 0001 0022             		bset	#1,$22(a1)
000168FC 3368 0008 0008             		move.w	8(a0),8(a1)
00016902 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016908 4228 0032                  		clr.b	$32(a0)
0001690C 303C 00BE                  		move.w	#$BE,d0
00016910 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016916                            
00016916                            locret_1675C:
00016916 4E75                       		rts	
00016918                            ; ===========================================================================
00016918                            
00016918                            loc_1675E:				; XREF: Obj72_Index
00016918 43F8 D000                  		lea	($FFFFD000).w,a1
0001691C 1028 0032                  		move.b	$32(a0),d0
00016920 5428 0032                  		addq.b	#2,$32(a0)
00016924 4EB9 0000 29DA             		jsr	(CalcSine).l
0001692A EA40                       		asr.w	#5,d0
0001692C 3428 000C                  		move.w	$C(a0),d2
00016930 9440                       		sub.w	d0,d2
00016932 3342 000C                  		move.w	d2,$C(a1)
00016936 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001693C 6600                       		bne.s	locret_16796
0001693E 6100 0000                  		bsr.w	sub_1681C
00016942 5428 0024                  		addq.b	#2,$24(a0)
00016946 303C 00BC                  		move.w	#$BC,d0
0001694A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play teleport sound
00016950                            
00016950                            locret_16796:
00016950 4E75                       		rts	
00016952                            ; ===========================================================================
00016952                            
00016952                            loc_16798:				; XREF: Obj72_Index
00016952 588F                       		addq.l	#4,sp
00016954 43F8 D000                  		lea	($FFFFD000).w,a1
00016958 5328 002E                  		subq.b	#1,$2E(a0)
0001695C 6A00                       		bpl.s	loc_167DA
0001695E 3368 0036 0008             		move.w	$36(a0),8(a1)
00016964 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001696A 7200                       		moveq	#0,d1
0001696C 1228 003A                  		move.b	$3A(a0),d1
00016970 5801                       		addq.b	#4,d1
00016972 B228 003B                  		cmp.b	$3B(a0),d1
00016976 6500                       		bcs.s	loc_167C2
00016978 7200                       		moveq	#0,d1
0001697A 6000                       		bra.s	loc_16800
0001697C                            ; ===========================================================================
0001697C                            
0001697C                            loc_167C2:
0001697C 1141 003A                  		move.b	d1,$3A(a0)
00016980 2468 003C                  		movea.l	$3C(a0),a2
00016984 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001698A 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016990 6000 0000                  		bra.w	sub_1681C
00016994                            ; ===========================================================================
00016994                            
00016994                            loc_167DA:
00016994 2429 0008                  		move.l	8(a1),d2
00016998 2629 000C                  		move.l	$C(a1),d3
0001699C 3029 0010                  		move.w	$10(a1),d0
000169A0 48C0                       		ext.l	d0
000169A2 E180                       		asl.l	#8,d0
000169A4 D480                       		add.l	d0,d2
000169A6 3029 0012                  		move.w	$12(a1),d0
000169AA 48C0                       		ext.l	d0
000169AC E180                       		asl.l	#8,d0
000169AE D680                       		add.l	d0,d3
000169B0 2342 0008                  		move.l	d2,8(a1)
000169B4 2343 000C                  		move.l	d3,$C(a1)
000169B8 4E75                       		rts	
000169BA                            ; ===========================================================================
000169BA                            
000169BA                            loc_16800:
000169BA 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000169C0 4228 0024                  		clr.b	$24(a0)
000169C4 4238 F7C8                  		clr.b	($FFFFF7C8).w
000169C8 337C 0000 0010             		move.w	#0,$10(a1)
000169CE 337C 0200 0012             		move.w	#$200,$12(a1)
000169D4 4E75                       		rts	
000169D6                            
000169D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169D6                            
000169D6                            
000169D6                            sub_1681C:
000169D6 7000                       		moveq	#0,d0
000169D8 343C 1000                  		move.w	#$1000,d2
000169DC 3028 0036                  		move.w	$36(a0),d0
000169E0 9069 0008                  		sub.w	8(a1),d0
000169E4 6C00                       		bge.s	loc_16830
000169E6 4440                       		neg.w	d0
000169E8 4442                       		neg.w	d2
000169EA                            
000169EA                            loc_16830:
000169EA 7200                       		moveq	#0,d1
000169EC 363C 1000                  		move.w	#$1000,d3
000169F0 3228 0038                  		move.w	$38(a0),d1
000169F4 9269 000C                  		sub.w	$C(a1),d1
000169F8 6C00                       		bge.s	loc_16844
000169FA 4441                       		neg.w	d1
000169FC 4443                       		neg.w	d3
000169FE                            
000169FE                            loc_16844:
000169FE B240                       		cmp.w	d0,d1
00016A00 6500                       		bcs.s	loc_1687A
00016A02 7200                       		moveq	#0,d1
00016A04 3228 0038                  		move.w	$38(a0),d1
00016A08 9269 000C                  		sub.w	$C(a1),d1
00016A0C 4841                       		swap	d1
00016A0E 83C3                       		divs.w	d3,d1
00016A10 7000                       		moveq	#0,d0
00016A12 3028 0036                  		move.w	$36(a0),d0
00016A16 9069 0008                  		sub.w	8(a1),d0
00016A1A 6700                       		beq.s	loc_16866
00016A1C 4840                       		swap	d0
00016A1E 81C1                       		divs.w	d1,d0
00016A20                            
00016A20                            loc_16866:
00016A20 3340 0010                  		move.w	d0,$10(a1)
00016A24 3343 0012                  		move.w	d3,$12(a1)
00016A28 4A41                       		tst.w	d1
00016A2A 6A00                       		bpl.s	loc_16874
00016A2C 4441                       		neg.w	d1
00016A2E                            
00016A2E                            loc_16874:
00016A2E 3141 002E                  		move.w	d1,$2E(a0)
00016A32 4E75                       		rts	
00016A34                            ; ===========================================================================
00016A34                            
00016A34                            loc_1687A:
00016A34 7000                       		moveq	#0,d0
00016A36 3028 0036                  		move.w	$36(a0),d0
00016A3A 9069 0008                  		sub.w	8(a1),d0
00016A3E 4840                       		swap	d0
00016A40 81C2                       		divs.w	d2,d0
00016A42 7200                       		moveq	#0,d1
00016A44 3228 0038                  		move.w	$38(a0),d1
00016A48 9269 000C                  		sub.w	$C(a1),d1
00016A4C 6700                       		beq.s	loc_16898
00016A4E 4841                       		swap	d1
00016A50 83C0                       		divs.w	d0,d1
00016A52                            
00016A52                            loc_16898:
00016A52 3341 0012                  		move.w	d1,$12(a1)
00016A56 3342 0010                  		move.w	d2,$10(a1)
00016A5A 4A40                       		tst.w	d0
00016A5C 6A00                       		bpl.s	loc_168A6
00016A5E 4440                       		neg.w	d0
00016A60                            
00016A60                            loc_168A6:
00016A60 3140 002E                  		move.w	d0,$2E(a0)
00016A64 4E75                       		rts	
00016A66                            ; End of function sub_1681C
00016A66                            
00016A66                            ; ===========================================================================
00016A66 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016A6C 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016A72 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016A76 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016A7C 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016A82 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016A88 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016A8E 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016A94 0884 0298 0894             		dc.w $884, $298, $894
00016A9A 0270 0894 0190             		dc.w $270, $894, $190
00016AA0 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016AA6 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016AAC 1184 0498 1158             		dc.w $1184, $498, $1158
00016AB2 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016AB8 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016ABE 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016AC4 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016ACA 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016AD0 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016AD6 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016ADC 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016AE2 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016AE8 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016AEE                            ; ===========================================================================
00016AEE                            ; ---------------------------------------------------------------------------
00016AEE                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016AEE                            ; ---------------------------------------------------------------------------
00016AEE                            
00016AEE                            Obj78:					; XREF: Obj_Index
00016AEE 7000                       		moveq	#0,d0
00016AF0 1028 0024                  		move.b	$24(a0),d0
00016AF4 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016AF8 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016AFC                            ; ===========================================================================
00016AFC 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016AFE 0000                       		dc.w Obj78_Action-Obj78_Index
00016B00 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016B02 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016B04 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016B06 0000                       		dc.w Obj78_Delete-Obj78_Index
00016B08 0000                       		dc.w loc_16CC0-Obj78_Index
00016B0A                            ; ===========================================================================
00016B0A                            
00016B0A                            locret_16950:
00016B0A 4E75                       		rts	
00016B0C                            ; ===========================================================================
00016B0C                            
00016B0C                            Obj78_Main:				; XREF: Obj78_Index
00016B0C 117C 0007 0016             		move.b	#7,$16(a0)
00016B12 117C 0008 0017             		move.b	#8,$17(a0)
00016B18 4EB9 0000 D722             		jsr	ObjectFall
00016B1E 4EBA E4B6                  		jsr	ObjHitFloor
00016B22 4A41                       		tst.w	d1
00016B24 6AE4                       		bpl.s	locret_16950
00016B26 D368 000C                  		add.w	d1,$C(a0)
00016B2A 4268 0012                  		clr.w	$12(a0)
00016B2E 5428 0024                  		addq.b	#2,$24(a0)
00016B32 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016B3A 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016B40 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016B46 6700                       		beq.s	loc_16996
00016B48 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016B4E                            
00016B4E                            loc_16996:
00016B4E 0228 0003 0001             		andi.b	#3,1(a0)
00016B54 0028 0004 0001             		ori.b	#4,1(a0)
00016B5A 1168 0001 0022             		move.b	1(a0),$22(a0)
00016B60 117C 0004 0018             		move.b	#4,$18(a0)
00016B66 117C 0008 0019             		move.b	#8,$19(a0)
00016B6C 117C 000B 0020             		move.b	#$B,$20(a0)
00016B72 3428 0008                  		move.w	8(a0),d2
00016B76 7A0C                       		moveq	#$C,d5
00016B78 0828 0000 0022             		btst	#0,$22(a0)
00016B7E 6700                       		beq.s	loc_169CA
00016B80 4445                       		neg.w	d5
00016B82                            
00016B82                            loc_169CA:
00016B82 1C3C 0004                  		move.b	#4,d6
00016B86 7600                       		moveq	#0,d3
00016B88 7804                       		moveq	#4,d4
00016B8A 2448                       		movea.l	a0,a2
00016B8C 7202                       		moveq	#2,d1
00016B8E                            
00016B8E                            Obj78_LoadBody:
00016B8E 4EB9 0000 DC10             		jsr	SingleObjLoad2
00016B94 6600                       		bne.s	Obj78_QuitLoad
00016B96 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016B9A 1346 0024                  		move.b	d6,$24(a1)
00016B9E 5406                       		addq.b	#2,d6
00016BA0 2368 0004 0004             		move.l	4(a0),4(a1)
00016BA6 3368 0002 0002             		move.w	2(a0),2(a1)
00016BAC 137C 0005 0018             		move.b	#5,$18(a1)
00016BB2 137C 0008 0019             		move.b	#8,$19(a1)
00016BB8 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016BBE D445                       		add.w	d5,d2
00016BC0 3342 0008                  		move.w	d2,8(a1)
00016BC4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016BCA 1368 0022 0022             		move.b	$22(a0),$22(a1)
00016BD0 1368 0022 0001             		move.b	$22(a0),1(a1)
00016BD6 137C 0008 001A             		move.b	#8,$1A(a1)
00016BDC 234A 003C                  		move.l	a2,$3C(a1)
00016BE0 1344 003C                  		move.b	d4,$3C(a1)
00016BE4 5804                       		addq.b	#4,d4
00016BE6 2449                       		movea.l	a1,a2
00016BE8                            
00016BE8                            Obj78_QuitLoad:
00016BE8 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00016BEC                            
00016BEC 117C 0007 002A             		move.b	#7,$2A(a0)
00016BF2 4228 003C                  		clr.b	$3C(a0)
00016BF6                            
00016BF6                            Obj78_Action:				; XREF: Obj78_Index
00016BF6 4A28 0022                  		tst.b	$22(a0)
00016BFA 6B00 0000                  		bmi.w	loc_16C96
00016BFE 7000                       		moveq	#0,d0
00016C00 1028 0025                  		move.b	$25(a0),d0
00016C04 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00016C08 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00016C0C 1228 002B                  		move.b	$2B(a0),d1
00016C10 6A00                       		bpl.s	Obj78_Display
00016C12 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016C18 1028 0026                  		move.b	$26(a0),d0
00016C1C 0240 007F                  		andi.w	#$7F,d0
00016C20 5828 0026                  		addq.b	#4,$26(a0)
00016C24 1031 0000                  		move.b	(a1,d0.w),d0
00016C28 6A00                       		bpl.s	Obj78_AniHead
00016C2A 08A8 0007 002B             		bclr	#7,$2B(a0)
00016C30 6000                       		bra.s	Obj78_Display
00016C32                            ; ===========================================================================
00016C32                            
00016C32                            Obj78_AniHead:
00016C32 0201 0010                  		andi.b	#$10,d1
00016C36 D001                       		add.b	d1,d0
00016C38 1140 001A                  		move.b	d0,$1A(a0)
00016C3C                            
00016C3C                            Obj78_Display:
00016C3C 3028 0008                  		move.w	8(a0),d0
00016C40 0240 FF80                  		andi.w	#$FF80,d0
00016C44 3238 F700                  		move.w	($FFFFF700).w,d1
00016C48 0441 0080                  		subi.w	#$80,d1
00016C4C 0241 FF80                  		andi.w	#$FF80,d1
00016C50 9041                       		sub.w	d1,d0
00016C52 0C40 0280                  		cmpi.w	#$280,d0
00016C56 6200 0000                  		bhi.w	Obj78_ChkGone
00016C5A 4EF9 0000 D774             		jmp	DisplaySprite
00016C60                            ; ===========================================================================
00016C60                            
00016C60                            Obj78_ChkGone:
00016C60 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016C64 7000                       		moveq	#0,d0
00016C66 1028 0023                  		move.b	$23(a0),d0
00016C6A 6700                       		beq.s	loc_16ABC
00016C6C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016C72                            
00016C72                            loc_16ABC:
00016C72 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00016C78 4E75                       		rts	
00016C7A                            ; ===========================================================================
00016C7A                            
00016C7A                            Obj78_Delete:				; XREF: Obj78_Index
00016C7A 4EF9 0000 D7B0             		jmp	DeleteObject
00016C80                            ; ===========================================================================
00016C80 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00016C82 0000                       		dc.w loc_16B02-Obj78_Index2
00016C84                            ; ===========================================================================
00016C84                            
00016C84                            Obj78_Move:				; XREF: Obj78_Index2
00016C84 5328 002A                  		subq.b	#1,$2A(a0)
00016C88 6B00                       		bmi.s	Obj78_Move2
00016C8A 4E75                       		rts	
00016C8C                            ; ===========================================================================
00016C8C                            
00016C8C                            Obj78_Move2:
00016C8C 5428 0025                  		addq.b	#2,$25(a0)
00016C90 117C 0010 002A             		move.b	#$10,$2A(a0)
00016C96 317C FF40 0010             		move.w	#-$C0,$10(a0)
00016C9C 317C 0040 0014             		move.w	#$40,$14(a0)
00016CA2 0868 0004 002B             		bchg	#4,$2B(a0)
00016CA8 6600                       		bne.s	loc_16AFC
00016CAA 4268 0010                  		clr.w	$10(a0)
00016CAE 4468 0014                  		neg.w	$14(a0)
00016CB2                            
00016CB2                            loc_16AFC:
00016CB2 08E8 0007 002B             		bset	#7,$2B(a0)
00016CB8                            
00016CB8                            loc_16B02:				; XREF: Obj78_Index2
00016CB8 5328 002A                  		subq.b	#1,$2A(a0)
00016CBC 6B00                       		bmi.s	loc_16B5E
00016CBE 2F28 0008                  		move.l	8(a0),-(sp)
00016CC2 2428 0008                  		move.l	8(a0),d2
00016CC6 3028 0010                  		move.w	$10(a0),d0
00016CCA 0828 0000 0022             		btst	#0,$22(a0)
00016CD0 6700                       		beq.s	loc_16B1E
00016CD2 4440                       		neg.w	d0
00016CD4                            
00016CD4                            loc_16B1E:
00016CD4 48C0                       		ext.l	d0
00016CD6 E180                       		asl.l	#8,d0
00016CD8 D480                       		add.l	d0,d2
00016CDA 2142 0008                  		move.l	d2,8(a0)
00016CDE 4EBA E2F6                  		jsr	ObjHitFloor
00016CE2 241F                       		move.l	(sp)+,d2
00016CE4 0C41 FFF8                  		cmpi.w	#-8,d1
00016CE8 6D00                       		blt.s	loc_16B70
00016CEA 0C41 000C                  		cmpi.w	#$C,d1
00016CEE 6C00                       		bge.s	loc_16B70
00016CF0 D368 000C                  		add.w	d1,$C(a0)
00016CF4 4842                       		swap	d2
00016CF6 B468 0008                  		cmp.w	8(a0),d2
00016CFA 6700                       		beq.s	locret_16B5C
00016CFC 7000                       		moveq	#0,d0
00016CFE 1028 003C                  		move.b	$3C(a0),d0
00016D02 5228 003C                  		addq.b	#1,$3C(a0)
00016D06 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016D0C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016D10                            
00016D10                            locret_16B5C:
00016D10 4E75                       		rts	
00016D12                            ; ===========================================================================
00016D12                            
00016D12                            loc_16B5E:
00016D12 5528 0025                  		subq.b	#2,$25(a0)
00016D16 117C 0007 002A             		move.b	#7,$2A(a0)
00016D1C 317C 0000 0010             		move.w	#0,$10(a0)
00016D22 4E75                       		rts	
00016D24                            ; ===========================================================================
00016D24                            
00016D24                            loc_16B70:
00016D24 2142 0008                  		move.l	d2,8(a0)
00016D28 0868 0000 0022             		bchg	#0,$22(a0)
00016D2E 1168 0022 0001             		move.b	$22(a0),1(a0)
00016D34 7000                       		moveq	#0,d0
00016D36 1028 003C                  		move.b	$3C(a0),d0
00016D3A 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00016D40 5228 003C                  		addq.b	#1,$3C(a0)
00016D44 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016D4A 4E75                       		rts	
00016D4C                            ; ===========================================================================
00016D4C                            
00016D4C                            Obj78_BodySeg2:				; XREF: Obj78_Index
00016D4C 2268 003C                  		movea.l	$3C(a0),a1
00016D50 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016D56 6A00                       		bpl.s	Obj78_BodySeg1
00016D58 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016D5E 1028 0026                  		move.b	$26(a0),d0
00016D62 0240 007F                  		andi.w	#$7F,d0
00016D66 5828 0026                  		addq.b	#4,$26(a0)
00016D6A 4A31 0004                  		tst.b	4(a1,d0.w)
00016D6E 6A00                       		bpl.s	Obj78_AniBody
00016D70 5828 0026                  		addq.b	#4,$26(a0)
00016D74                            
00016D74                            Obj78_AniBody:
00016D74 1031 0000                  		move.b	(a1,d0.w),d0
00016D78 5000                       		addq.b	#8,d0
00016D7A 1140 001A                  		move.b	d0,$1A(a0)
00016D7E                            
00016D7E                            Obj78_BodySeg1:				; XREF: Obj78_Index
00016D7E 2268 003C                  		movea.l	$3C(a0),a1
00016D82 4A28 0022                  		tst.b	$22(a0)
00016D86 6B00 0000                  		bmi.w	loc_16C90
00016D8A 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016D90 1169 0025 0025             		move.b	$25(a1),$25(a0)
00016D96 6700 0000                  		beq.w	loc_16C64
00016D9A 3169 0014 0014             		move.w	$14(a1),$14(a0)
00016DA0 3029 0010                  		move.w	$10(a1),d0
00016DA4 D069 0014                  		add.w	$14(a1),d0
00016DA8 3140 0010                  		move.w	d0,$10(a0)
00016DAC 2428 0008                  		move.l	8(a0),d2
00016DB0 2602                       		move.l	d2,d3
00016DB2 3028 0010                  		move.w	$10(a0),d0
00016DB6 0828 0000 0022             		btst	#0,$22(a0)
00016DBC 6700                       		beq.s	loc_16C0C
00016DBE 4440                       		neg.w	d0
00016DC0                            
00016DC0                            loc_16C0C:
00016DC0 48C0                       		ext.l	d0
00016DC2 E180                       		asl.l	#8,d0
00016DC4 D480                       		add.l	d0,d2
00016DC6 2142 0008                  		move.l	d2,8(a0)
00016DCA 4843                       		swap	d3
00016DCC B668 0008                  		cmp.w	8(a0),d3
00016DD0 6700                       		beq.s	loc_16C64
00016DD2 7000                       		moveq	#0,d0
00016DD4 1028 003C                  		move.b	$3C(a0),d0
00016DD8 1231 002C                  		move.b	$2C(a1,d0.w),d1
00016DDC 0C01 0080                  		cmpi.b	#-$80,d1
00016DE0 6600                       		bne.s	loc_16C50
00016DE2 4843                       		swap	d3
00016DE4 2143 0008                  		move.l	d3,8(a0)
00016DE8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016DEC 0868 0000 0022             		bchg	#0,$22(a0)
00016DF2 1168 0022 0001             		move.b	$22(a0),1(a0)
00016DF8 5228 003C                  		addq.b	#1,$3C(a0)
00016DFC 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016E02 6000                       		bra.s	loc_16C64
00016E04                            ; ===========================================================================
00016E04                            
00016E04                            loc_16C50:
00016E04 4881                       		ext.w	d1
00016E06 D368 000C                  		add.w	d1,$C(a0)
00016E0A 5228 003C                  		addq.b	#1,$3C(a0)
00016E0E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016E14 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016E18                            
00016E18                            loc_16C64:
00016E18 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00016E1E 6700                       		beq.s	loc_16C90
00016E20 0C11 0027                  		cmpi.b	#$27,0(a1)
00016E24 6700                       		beq.s	loc_16C7C
00016E26 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00016E2C 6600                       		bne.s	loc_16C82
00016E2E                            
00016E2E                            loc_16C7C:
00016E2E 117C 000A 0024             		move.b	#$A,$24(a0)
00016E34                            
00016E34                            loc_16C82:
00016E34 4EF9 0000 D774             		jmp	DisplaySprite
00016E3A                            
00016E3A                            ; ===========================================================================
00016E3A FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00016E42                            ; ===========================================================================
00016E42                            
00016E42                            loc_16C90:
00016E42 08E9 0007 0022             		bset	#7,$22(a1)
00016E48                            
00016E48                            loc_16C96:
00016E48 7000                       		moveq	#0,d0
00016E4A 1028 0024                  		move.b	$24(a0),d0
00016E4E 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00016E52 0828 0000 0022             		btst	#0,$22(a0)
00016E58 6700                       		beq.s	loc_16CAA
00016E5A 4440                       		neg.w	d0
00016E5C                            
00016E5C                            loc_16CAA:
00016E5C 3140 0010                  		move.w	d0,$10(a0)
00016E60 317C FC00 0012             		move.w	#-$400,$12(a0)
00016E66 117C 000C 0024             		move.b	#$C,$24(a0)
00016E6C 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00016E72                            
00016E72                            loc_16CC0:				; XREF: Obj78_Index
00016E72 4EB9 0000 D722             		jsr	ObjectFall
00016E78 4A68 0012                  		tst.w	$12(a0)
00016E7C 6B00                       		bmi.s	loc_16CE0
00016E7E 4EBA E156                  		jsr	ObjHitFloor
00016E82 4A41                       		tst.w	d1
00016E84 6A00                       		bpl.s	loc_16CE0
00016E86 D368 000C                  		add.w	d1,$C(a0)
00016E8A 317C FC00 0012             		move.w	#-$400,$12(a0)
00016E90                            
00016E90                            loc_16CE0:
00016E90 4A28 0001                  		tst.b	1(a0)
00016E94 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00016E98 4EF9 0000 D774             		jmp	DisplaySprite
00016E9E                            ; ===========================================================================
00016E9E                            Ani_obj78:
00016E9E                            	include "_anim\obj78.asm"
00016E9E                            ; ---------------------------------------------------------------------------
00016E9E                            ; Animation script - Caterkiller enemy (uses non-standard format)
00016E9E                            ; ---------------------------------------------------------------------------
00016E9E 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00016EAE 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00016EBE 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00016ECE 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00016EDE 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00016EEE 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00016EFE 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00016F0E 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00016F1E                            	even
00016F1E                            	even
00016F1E                            
00016F1E                            ; ---------------------------------------------------------------------------
00016F1E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00016F1E                            ; ---------------------------------------------------------------------------
00016F1E                            Map_obj78:
00016F1E                            	include "_maps\obj78.asm"
00016F1E                            ; ---------------------------------------------------------------------------
00016F1E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00016F1E                            ; ---------------------------------------------------------------------------
00016F1E 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00016F22 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00016F26 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00016F2A 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00016F2E 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00016F32 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00016F36 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00016F3A 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00016F3E 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00016F42 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00016F46 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00016F4A 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00016F4E 01                         byte_16D9E:	dc.b 1
00016F4F F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00016F54 01                         byte_16DA4:	dc.b 1
00016F55 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00016F5A 01                         byte_16DAA:	dc.b 1
00016F5B F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00016F60 01                         byte_16DB0:	dc.b 1
00016F61 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00016F66 01                         byte_16DB6:	dc.b 1
00016F67 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00016F6C 01                         byte_16DBC:	dc.b 1
00016F6D ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00016F72 01                         byte_16DC2:	dc.b 1
00016F73 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00016F78 01                         byte_16DC8:	dc.b 1
00016F79 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00016F7E 01                         byte_16DCE:	dc.b 1
00016F7F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00016F84 01                         byte_16DD4:	dc.b 1
00016F85 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00016F8A 01                         byte_16DDA:	dc.b 1
00016F8B F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00016F90 01                         byte_16DE0:	dc.b 1
00016F91 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00016F96 01                         byte_16DE6:	dc.b 1
00016F97 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00016F9C 01                         byte_16DEC:	dc.b 1
00016F9D F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00016FA2 01                         byte_16DF2:	dc.b 1
00016FA3 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00016FA8 01                         byte_16DF8:	dc.b 1
00016FA9 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00016FAE 01                         byte_16DFE:	dc.b 1
00016FAF F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00016FB4 01                         byte_16E04:	dc.b 1
00016FB5 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00016FBA 01                         byte_16E0A:	dc.b 1
00016FBB F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00016FC0 01                         byte_16E10:	dc.b 1
00016FC1 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00016FC6 01                         byte_16E16:	dc.b 1
00016FC7 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00016FCC 01                         byte_16E1C:	dc.b 1
00016FCD ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00016FD2 01                         byte_16E22:	dc.b 1
00016FD3 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00016FD8 01                         byte_16E28:	dc.b 1
00016FD9 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00016FDE                            		even
00016FDE                            		even
00016FDE                            
00016FDE                            ; ===========================================================================
00016FDE                            ; ---------------------------------------------------------------------------
00016FDE                            ; Object 79 - lamppost
00016FDE                            ; ---------------------------------------------------------------------------
00016FDE                            
00016FDE                            Obj79:					; XREF: Obj_Index
00016FDE 7000                       		moveq	#0,d0
00016FE0 1028 0024                  		move.b	$24(a0),d0
00016FE4 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00016FE8 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00016FEC 4EFA 882E                  		jmp	MarkObjGone
00016FF0                            ; ===========================================================================
00016FF0 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00016FF2 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00016FF4 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00016FF6 0000                       		dc.w Obj79_Twirl-Obj79_Index
00016FF8                            ; ===========================================================================
00016FF8                            
00016FF8                            Obj79_Main:				; XREF: Obj79_Index
00016FF8 5428 0024                  		addq.b	#2,$24(a0)
00016FFC 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017004 317C 07A0 0002             		move.w	#$7A0,2(a0)
0001700A 117C 0004 0001             		move.b	#4,1(a0)
00017010 117C 0008 0019             		move.b	#8,$19(a0)
00017016 117C 0005 0018             		move.b	#5,$18(a0)
0001701C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017020 7000                       		moveq	#0,d0
00017022 1028 0023                  		move.b	$23(a0),d0
00017026 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001702C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017032 6600                       		bne.s	Obj79_RedLamp
00017034 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017038 0201 007F                  		andi.b	#$7F,d1
0001703C 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017040 0202 007F                  		andi.b	#$7F,d2
00017044 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017046 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017048                            
00017048                            Obj79_RedLamp:
00017048 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001704E 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017054 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001705A 4E75                       		rts	
0001705C                            ; ===========================================================================
0001705C                            
0001705C                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001705C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017060 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017064 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017068 6B00 0000                  		bmi.w	locret_16F90
0001706C 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017070 0201 007F                  		andi.b	#$7F,d1
00017074 1428 0028                  		move.b	$28(a0),d2
00017078 0202 007F                  		andi.b	#$7F,d2
0001707C B202                       		cmp.b	d2,d1
0001707E 6500                       		bcs.s	Obj79_HitLamp
00017080 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017084 7000                       		moveq	#0,d0
00017086 1028 0023                  		move.b	$23(a0),d0
0001708A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017090 117C 0004 0024             		move.b	#4,$24(a0)
00017096 117C 0003 001A             		move.b	#3,$1A(a0)
0001709C 6000 0000                  		bra.w	locret_16F90
000170A0                            ; ===========================================================================
000170A0                            
000170A0                            Obj79_HitLamp:
000170A0 3038 D008                  		move.w	($FFFFD008).w,d0
000170A4 9068 0008                  		sub.w	8(a0),d0
000170A8 5040                       		addq.w	#8,d0
000170AA 0C40 0010                  		cmpi.w	#$10,d0
000170AE 6400 0000                  		bcc.w	locret_16F90
000170B2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000170B6 9068 000C                  		sub.w	$C(a0),d0
000170BA 0640 0040                  		addi.w	#$40,d0
000170BE 0C40 0068                  		cmpi.w	#$68,d0
000170C2 6400                       		bcc.s	locret_16F90
000170C4 303C 00A1                  		move.w	#$A1,d0
000170C8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lamppost sound
000170CE 5428 0024                  		addq.b	#2,$24(a0)
000170D2 4EB9 0000 DBFA             		jsr	SingleObjLoad
000170D8 6600                       		bne.s	loc_16F76
000170DA 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000170DE 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000170E4 3368 0008 0030             		move.w	8(a0),$30(a1)
000170EA 3368 000C 0032             		move.w	$C(a0),$32(a1)
000170F0 0469 0018 0032             		subi.w	#$18,$32(a1)
000170F6 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000170FE 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017104 137C 0004 0001             		move.b	#4,1(a1)
0001710A 137C 0008 0019             		move.b	#8,$19(a1)
00017110 137C 0004 0018             		move.b	#4,$18(a1)
00017116 137C 0002 001A             		move.b	#2,$1A(a1)
0001711C 337C 0020 0036             		move.w	#$20,$36(a1)
00017122                            
00017122                            loc_16F76:
00017122 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017128 6100 0000                  		bsr.w	Obj79_StoreInfo
0001712C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017130 7000                       		moveq	#0,d0
00017132 1028 0023                  		move.b	$23(a0),d0
00017136 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001713C                            
0001713C                            locret_16F90:
0001713C 4E75                       		rts	
0001713E                            ; ===========================================================================
0001713E                            
0001713E                            Obj79_AfterHit:				; XREF: Obj79_Index
0001713E 4E75                       		rts	
00017140                            ; ===========================================================================
00017140                            
00017140                            Obj79_Twirl:				; XREF: Obj79_Index
00017140 5368 0036                  		subq.w	#1,$36(a0)
00017144 6A00                       		bpl.s	loc_16FA0
00017146 117C 0004 0024             		move.b	#4,$24(a0)
0001714C                            
0001714C                            loc_16FA0:
0001714C 1028 0026                  		move.b	$26(a0),d0
00017150 0428 0010 0026             		subi.b	#$10,$26(a0)
00017156 0400 0040                  		subi.b	#$40,d0
0001715A 4EB9 0000 29DA             		jsr	(CalcSine).l
00017160 C3FC 0C00                  		muls.w	#$C00,d1
00017164 4841                       		swap	d1
00017166 D268 0030                  		add.w	$30(a0),d1
0001716A 3141 0008                  		move.w	d1,8(a0)
0001716E C1FC 0C00                  		muls.w	#$C00,d0
00017172 4840                       		swap	d0
00017174 D068 0032                  		add.w	$32(a0),d0
00017178 3140 000C                  		move.w	d0,$C(a0)
0001717C 4E75                       		rts	
0001717E                            ; ===========================================================================
0001717E                            ; ---------------------------------------------------------------------------
0001717E                            ; Subroutine to	store information when you hit a lamppost
0001717E                            ; ---------------------------------------------------------------------------
0001717E                            
0001717E                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001717E 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017184 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
0001718A 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017190 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017196 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
0001719C 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000171A2 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000171A8 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000171AE 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000171B4 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000171BA 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000171C0 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000171C6 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000171CC 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000171D2 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000171D8 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000171DE 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000171E4 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000171EA 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000171F0 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000171F6 4E75                       		rts	
000171F8                            
000171F8                            ; ---------------------------------------------------------------------------
000171F8                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000171F8                            ; ---------------------------------------------------------------------------
000171F8                            
000171F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000171F8                            
000171F8                            
000171F8                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000171F8 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000171FE 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017204 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001720A 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017210 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017216 4278 FE20                  		clr.w	($FFFFFE20).w
0001721A 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001721E 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017224 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001722A 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001722E 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017234 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001723A 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017240 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017246 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001724C 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017252 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017258 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
0001725E 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017264 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
0001726A 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017270 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017276 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001727C 6600                       		bne.s	loc_170E4
0001727E 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017284 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001728A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017290                            
00017290                            loc_170E4:
00017290 4A38 FE30                  		tst.b	($FFFFFE30).w
00017294 6A00                       		bpl.s	locret_170F6
00017296 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001729A 0440 00A0                  		subi.w	#$A0,d0
0001729E 31C0 F728                  		move.w	d0,($FFFFF728).w
000172A2                            
000172A2                            locret_170F6:
000172A2 4E75                       		rts	
000172A4                            ; End of function Obj79_LoadInfo
000172A4                            
000172A4                            ; ===========================================================================
000172A4                            ; ---------------------------------------------------------------------------
000172A4                            ; Sprite mappings - lamppost
000172A4                            ; ---------------------------------------------------------------------------
000172A4                            Map_obj79:
000172A4                            	include "_maps\obj79.asm"
000172A4                            ; ---------------------------------------------------------------------------
000172A4                            ; Sprite mappings - lamppost
000172A4                            ; ---------------------------------------------------------------------------
000172A4 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000172A8 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000172AC 06                         byte_17100:	dc.b 6
000172AD E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000172B2 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000172B7 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000172BC F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000172C1 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000172C6 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000172CB 04                         byte_1711F:	dc.b 4
000172CC E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000172D1 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000172D6 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000172DB F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000172E0 02                         byte_17134:	dc.b 2
000172E1 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
000172E6 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
000172EB 06                         byte_1713F:	dc.b 6
000172EC E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000172F1 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000172F6 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000172FB F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017300 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017305 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001730A                            		even
0001730A                            		even
0001730A                            
0001730A                            ; ===========================================================================
0001730A                            ; ---------------------------------------------------------------------------
0001730A                            ; Object 7D - hidden points at the end of a level
0001730A                            ; ---------------------------------------------------------------------------
0001730A                            
0001730A                            Obj7D:					; XREF: Obj_Index
0001730A 7000                       		moveq	#0,d0
0001730C 1028 0024                  		move.b	$24(a0),d0
00017310 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017314 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017318                            ; ===========================================================================
00017318 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001731A 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001731C                            ; ===========================================================================
0001731C                            
0001731C                            Obj7D_Main:				; XREF: Obj7D_Index
0001731C 7410                       		moveq	#$10,d2
0001731E 3602                       		move.w	d2,d3
00017320 D643                       		add.w	d3,d3
00017322 43F8 D000                  		lea	($FFFFD000).w,a1
00017326 3029 0008                  		move.w	8(a1),d0
0001732A 9068 0008                  		sub.w	8(a0),d0
0001732E D042                       		add.w	d2,d0
00017330 B043                       		cmp.w	d3,d0
00017332 6400                       		bcc.s	Obj7D_ChkDel
00017334 3229 000C                  		move.w	$C(a1),d1
00017338 9268 000C                  		sub.w	$C(a0),d1
0001733C D242                       		add.w	d2,d1
0001733E B243                       		cmp.w	d3,d1
00017340 6400                       		bcc.s	Obj7D_ChkDel
00017342 4A78 FE08                  		tst.w	($FFFFFE08).w
00017346 6600                       		bne.s	Obj7D_ChkDel
00017348 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001734C 6600                       		bne.s	Obj7D_ChkDel
0001734E 5428 0024                  		addq.b	#2,$24(a0)
00017352 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
0001735A 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017360 0028 0004 0001             		ori.b	#4,1(a0)
00017366 117C 0000 0018             		move.b	#0,$18(a0)
0001736C 117C 0010 0019             		move.b	#$10,$19(a0)
00017372 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017378 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
0001737E 303C 00C9                  		move.w	#$C9,d0
00017382 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play bonus sound
00017388 7000                       		moveq	#0,d0
0001738A 1028 0028                  		move.b	$28(a0),d0
0001738E D040                       		add.w	d0,d0
00017390 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017394 4EB9 0000 0000             		jsr	AddPoints
0001739A                            
0001739A                            Obj7D_ChkDel:
0001739A 3028 0008                  		move.w	8(a0),d0
0001739E 0240 FF80                  		andi.w	#$FF80,d0
000173A2 3238 F700                  		move.w	($FFFFF700).w,d1
000173A6 0441 0080                  		subi.w	#$80,d1
000173AA 0241 FF80                  		andi.w	#$FF80,d1
000173AE 9041                       		sub.w	d1,d0
000173B0 0C40 0280                  		cmpi.w	#$280,d0
000173B4 6200                       		bhi.s	Obj7D_Delete
000173B6 4E75                       		rts	
000173B8                            ; ===========================================================================
000173B8                            
000173B8                            Obj7D_Delete:
000173B8 4EF9 0000 D7B0             		jmp	DeleteObject
000173BE                            ; ===========================================================================
000173BE 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000173C0 03E8                       		dc.w 1000
000173C2 0064                       		dc.w 100
000173C4 0001                       		dc.w 1
000173C6                            ; ===========================================================================
000173C6                            
000173C6                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000173C6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000173CA 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000173CC 3028 0008                  		move.w	8(a0),d0
000173D0 0240 FF80                  		andi.w	#-$80,d0
000173D4 3238 F700                  		move.w	($FFFFF700).w,d1
000173D8 0441 0080                  		subi.w	#$80,d1
000173DC 0241 FF80                  		andi.w	#-$80,d1
000173E0 9041                       		sub.w	d1,d0
000173E2 0C40 0280                  		cmpi.w	#$280,d0
000173E6 6200                       		bhi.s	Obj7D_Delete2
000173E8 4EF9 0000 D774             		jmp	DisplaySprite
000173EE                            ; ===========================================================================
000173EE                            
000173EE                            Obj7D_Delete2:
000173EE 4EF9 0000 D7B0             		jmp	DeleteObject
000173F4                            ; ===========================================================================
000173F4                            ; ---------------------------------------------------------------------------
000173F4                            ; Sprite mappings - hidden points at the end of	a level
000173F4                            ; ---------------------------------------------------------------------------
000173F4                            Map_obj7D:
000173F4                            	include "_maps\obj7D.asm"
000173F4                            ; ---------------------------------------------------------------------------
000173F4                            ; Sprite mappings - hidden points at the end of	a level
000173F4                            ; ---------------------------------------------------------------------------
000173F4 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
000173F8 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
000173FC 00                         byte_17250:	dc.b 0
000173FD 01                         byte_17251:	dc.b 1
000173FE F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017403 01                         byte_17257:	dc.b 1
00017404 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017409 01                         byte_1725D:	dc.b 1
0001740A F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017410 00                         		even
00017410 00                         		even
00017410                            
00017410                            ; ===========================================================================
00017410                            ; ---------------------------------------------------------------------------
00017410                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017410                            ; ---------------------------------------------------------------------------
00017410                            
00017410                            Obj8A:					; XREF: Obj_Index
00017410 7000                       		moveq	#0,d0
00017412 1028 0024                  		move.b	$24(a0),d0
00017416 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001741A 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001741E                            ; ===========================================================================
0001741E 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017420 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017422                            ; ===========================================================================
00017422                            
00017422                            Obj8A_Main:				; XREF: Obj8A_Index
00017422 5428 0024                  		addq.b	#2,$24(a0)
00017426 317C 0120 0008             		move.w	#$120,8(a0)
0001742C 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017432 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001743A 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017440 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017444 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017448 117C 0000 0001             		move.b	#0,1(a0)
0001744E 117C 0000 0018             		move.b	#0,$18(a0)
00017454 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
0001745A 6600                       		bne.s	Obj8A_Display	; if not, branch
0001745C 317C 00A6 0002             		move.w	#$A6,2(a0)
00017462 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017468 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
0001746C 6700                       		beq.s	Obj8A_Display	; if not, branch
0001746E 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017474 6600                       		bne.s	Obj8A_Display	; if not, branch
00017476 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
0001747C 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017482 4EF9 0000 D7B0             		jmp	DeleteObject
00017488                            ; ===========================================================================
00017488                            
00017488                            Obj8A_Display:				; XREF: Obj8A_Index
00017488 4EF9 0000 D774             		jmp	DisplaySprite
0001748E                            ; ===========================================================================
0001748E                            ; ---------------------------------------------------------------------------
0001748E                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001748E                            ; ---------------------------------------------------------------------------
0001748E                            Map_obj8A:
0001748E                            	include "_maps\obj8A.asm"
0001748E                            ; --------------------------------------------------------------------------------
0001748E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001748E                            ; --------------------------------------------------------------------------------
0001748E                            
0001748E                            SME_MD8yg:	
0001748E 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
00017492 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
00017496 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
0001749A 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
0001749E 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
000174A2 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
000174A4 0E                         SME_MD8yg_16:	dc.b $E	
000174A5 F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
000174AA F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
000174AF F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
000174B4 F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
000174B9 F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
000174BE F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
000174C3 F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
000174C8 F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
000174CD F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
000174D2 F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
000174D7 F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
000174DC F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
000174E1 F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
000174E6 F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
000174EB 10                         SME_MD8yg_5D:	dc.b $10	
000174EC D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
000174F1 D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
000174F6 D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
000174FB D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
00017500 D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
00017505 D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
0001750A D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
0001750F D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
00017514 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
00017519 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
0001751E 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
00017523 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
00017528 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
0001752D 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
00017532 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
00017537 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
0001753C 0A                         SME_MD8yg_AE:	dc.b $A	
0001753D D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
00017542 D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
00017547 D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
0001754C D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
00017551 D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
00017556 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
0001755B D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
00017560 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
00017565 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
0001756A 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
0001756F 18                         SME_MD8yg_E1:	dc.b $18	
00017570 D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
00017575 D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
0001757A D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
0001757F D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
00017584 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017589 D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
0001758E D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
00017593 D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
00017598 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
0001759D D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
000175A2 D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
000175A7 D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
000175AC D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
000175B1 D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
000175B6 D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
000175BB 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
000175C0 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
000175C5 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
000175CA 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
000175CF 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
000175D4 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
000175D9 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
000175DE 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
000175E3 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
000175E8 14                         SME_MD8yg_15A:	dc.b $14	
000175E9 D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
000175EE D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
000175F3 D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
000175F8 D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
000175FD D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
00017602 D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
00017607 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
0001760C 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
00017611 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
00017616 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
0001761B 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
00017620 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
00017625 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
0001762A 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
0001762F 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
00017634 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
00017639 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
0001763E 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
00017643 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
00017648 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
0001764D 1A                         SME_MD8yg_1BF:	dc.b $1A	
0001764E D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
00017653 D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
00017658 D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
0001765D D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
00017662 D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017667 D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
0001766C D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017671 D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017676 D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
0001767B D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
00017680 D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
00017685 D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
0001768A 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
0001768F 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
00017694 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
00017699 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
0001769E 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
000176A3 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
000176A8 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
000176AD 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
000176B2 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
000176B7 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
000176BC 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
000176C1 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
000176C6 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
000176CB 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
000176D0 17                         SME_MD8yg_242:	dc.b $17	
000176D1 D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
000176D6 D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
000176DB D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
000176E0 D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
000176E5 D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
000176EA D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
000176EF D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
000176F4 D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
000176F9 D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
000176FE D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
00017703 D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
00017708 D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
0001770D 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017712 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017717 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
0001771C 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
00017721 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
00017726 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
0001772B 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
00017730 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
00017735 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
0001773A 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
0001773F 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
00017744 1F                         SME_MD8yg_2B6:	dc.b $1F	
00017745 D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
0001774A D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
0001774F D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
00017754 D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
00017759 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
0001775E D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017763 D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
00017768 D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
0001776D D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
00017772 D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017777 D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
0001777C D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
00017781 D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017786 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
0001778B 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
00017790 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017795 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
0001779A 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
0001779F 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
000177A4 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
000177A9 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
000177AE 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
000177B3 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
000177B8 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
000177BD 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
000177C2 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
000177C7 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
000177CC 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
000177D1 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
000177D6 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
000177DB 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
000177E0 0F                         SME_MD8yg_352:	dc.b $F	
000177E1 F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
000177E6 F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
000177EB F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
000177F0 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
000177F5 F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
000177FA F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
000177FF F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
00017804 F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
00017809 F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
0001780E F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
00017813 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
00017818 F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
0001781D F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017822 F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017827 F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
0001782C 08                         SME_MD8yg_39E:	dc.b 8	
0001782D 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017832 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017837 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
0001783C 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
00017841 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
00017846 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
0001784B 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
00017850 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
00017855 17                         SME_MD8yg_3C7:	dc.b $17	
00017856 E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
0001785B D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017860 E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017865 E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
0001786A D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
0001786F D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017874 D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
00017879 E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
0001787E D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017883 D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
00017888 D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
0001788D D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017892 D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017897 E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
0001789C E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
000178A1 E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
000178A6 E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
000178AB E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
000178B0 F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
000178B5 F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
000178BA F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
000178BF D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
000178C4 F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
000178CA 00                         		even
000178CA 00                         		even
000178CA                            
000178CA                            ; ===========================================================================
000178CA                            ; ---------------------------------------------------------------------------
000178CA                            ; Object 3D - Eggman (GHZ)
000178CA                            ; ---------------------------------------------------------------------------
000178CA                            
000178CA                            Obj3D:					; XREF: Obj_Index
000178CA 7000                       		moveq	#0,d0
000178CC 1028 0024                  		move.b	$24(a0),d0
000178D0 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
000178D4 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
000178D8                            ; ===========================================================================
000178D8 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000178DA 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000178DC 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000178DE 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000178E0                            
000178E0 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000178E2 0401                       		dc.b 4,	1
000178E4 0607                       		dc.b 6,	7
000178E6                            ; ===========================================================================
000178E6                            
000178E6                            Obj3D_Main:				; XREF: Obj3D_Index
000178E6 45F9 0001 78E0             		lea	(Obj3D_ObjData).l,a2
000178EC 2248                       		movea.l	a0,a1
000178EE 7202                       		moveq	#2,d1
000178F0 6000                       		bra.s	Obj3D_LoadBoss
000178F2                            ; ===========================================================================
000178F2                            
000178F2                            Obj3D_Loop:
000178F2 4EB9 0000 DC10             		jsr	SingleObjLoad2
000178F8 6600                       		bne.s	loc_17772
000178FA                            
000178FA                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
000178FA 135A 0024                  		move.b	(a2)+,$24(a1)
000178FE 12BC 003D                  		move.b	#$3D,0(a1)
00017902 3368 0008 0008             		move.w	8(a0),8(a1)
00017908 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001790E 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017916 337C 0400 0002             		move.w	#$400,2(a1)
0001791C 137C 0004 0001             		move.b	#4,1(a1)
00017922 137C 0020 0019             		move.b	#$20,$19(a1)
00017928 137C 0003 0018             		move.b	#3,$18(a1)
0001792E 135A 001C                  		move.b	(a2)+,$1C(a1)
00017932 2348 0034                  		move.l	a0,$34(a1)
00017936 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001793A                            
0001793A                            loc_17772:
0001793A 3168 0008 0030             		move.w	8(a0),$30(a0)
00017940 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017946 117C 000F 0020             		move.b	#$F,$20(a0)
0001794C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017952                            
00017952                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017952 7000                       		moveq	#0,d0
00017954 1028 0025                  		move.b	$25(a0),d0
00017958 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001795C 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017960 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017966 4EB9 0000 A826             		jsr	AnimateSprite
0001796C 1028 0022                  		move.b	$22(a0),d0
00017970 0200 0003                  		andi.b	#3,d0
00017974 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001797A 8128 0001                  		or.b	d0,1(a0)
0001797E 4EF9 0000 D774             		jmp	DisplaySprite
00017984                            ; ===========================================================================
00017984 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017986 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017988 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001798A 0000                       		dc.w loc_17954-Obj3D_ShipIndex
0001798C 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
0001798E 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017990 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017992                            ; ===========================================================================
00017992                            
00017992                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017992 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00017998 6100 0000                  		bsr.w	BossMove
0001799C 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000179A2 6600                       		bne.s	loc_177E6
000179A4 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000179AA 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000179AE                            
000179AE                            loc_177E6:
000179AE 1028 003F                  		move.b	$3F(a0),d0
000179B2 4EB9 0000 29DA             		jsr	(CalcSine).l
000179B8 EC40                       		asr.w	#6,d0
000179BA D068 0038                  		add.w	$38(a0),d0
000179BE 3140 000C                  		move.w	d0,$C(a0)
000179C2 3168 0030 0008             		move.w	$30(a0),8(a0)
000179C8 5428 003F                  		addq.b	#2,$3F(a0)
000179CC 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000179D2 6400                       		bcc.s	locret_1784A
000179D4 4A28 0022                  		tst.b	$22(a0)
000179D8 6B00                       		bmi.s	loc_1784C
000179DA 4A28 0020                  		tst.b	$20(a0)
000179DE 6600                       		bne.s	locret_1784A
000179E0 4A28 003E                  		tst.b	$3E(a0)
000179E4 6600                       		bne.s	Obj3D_ShipFlash
000179E6 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000179EC 303C 00AC                  		move.w	#$AC,d0
000179F0 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
000179F6                            
000179F6                            Obj3D_ShipFlash:
000179F6 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000179FA 7000                       		moveq	#0,d0		; move 0 (black) to d0
000179FC 4A51                       		tst.w	(a1)
000179FE 6600                       		bne.s	loc_1783C
00017A00 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017A04                            
00017A04                            loc_1783C:
00017A04 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017A06 5328 003E                  		subq.b	#1,$3E(a0)
00017A0A 6600                       		bne.s	locret_1784A
00017A0C 117C 000F 0020             		move.b	#$F,$20(a0)
00017A12                            
00017A12                            locret_1784A:
00017A12 4E75                       		rts	
00017A14                            ; ===========================================================================
00017A14                            
00017A14                            loc_1784C:				; XREF: loc_177E6
00017A14 7064                       		moveq	#100,d0
00017A16 6100 0000                  		bsr.w	AddPoints
00017A1A 117C 0008 0025             		move.b	#8,$25(a0)
00017A20 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017A26 4E75                       		rts	
00017A28                            
00017A28                            ; ---------------------------------------------------------------------------
00017A28                            ; Defeated boss	subroutine
00017A28                            ; ---------------------------------------------------------------------------
00017A28                            
00017A28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A28                            
00017A28                            
00017A28                            BossDefeated:
00017A28 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017A2C 0200 0007                  		andi.b	#7,d0
00017A30 6600                       		bne.s	locret_178A2
00017A32 4EB9 0000 DBFA             		jsr	SingleObjLoad
00017A38 6600                       		bne.s	locret_178A2
00017A3A 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017A3E 3368 0008 0008             		move.w	8(a0),8(a1)
00017A44 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017A4A 4EB9 0000 29B4             		jsr	(RandomNumber).l
00017A50 3200                       		move.w	d0,d1
00017A52 7200                       		moveq	#0,d1
00017A54 1200                       		move.b	d0,d1
00017A56 E409                       		lsr.b	#2,d1
00017A58 0441 0020                  		subi.w	#$20,d1
00017A5C D369 0008                  		add.w	d1,8(a1)
00017A60 E048                       		lsr.w	#8,d0
00017A62 E608                       		lsr.b	#3,d0
00017A64 D169 000C                  		add.w	d0,$C(a1)
00017A68                            
00017A68                            locret_178A2:
00017A68 4E75                       		rts	
00017A6A                            ; End of function BossDefeated
00017A6A                            
00017A6A                            ; ---------------------------------------------------------------------------
00017A6A                            ; Subroutine to	move a boss
00017A6A                            ; ---------------------------------------------------------------------------
00017A6A                            
00017A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A6A                            
00017A6A                            
00017A6A                            BossMove:
00017A6A 2428 0030                  		move.l	$30(a0),d2
00017A6E 2628 0038                  		move.l	$38(a0),d3
00017A72 3028 0010                  		move.w	$10(a0),d0
00017A76 48C0                       		ext.l	d0
00017A78 E180                       		asl.l	#8,d0
00017A7A D480                       		add.l	d0,d2
00017A7C 3028 0012                  		move.w	$12(a0),d0
00017A80 48C0                       		ext.l	d0
00017A82 E180                       		asl.l	#8,d0
00017A84 D680                       		add.l	d0,d3
00017A86 2142 0030                  		move.l	d2,$30(a0)
00017A8A 2143 0038                  		move.l	d3,$38(a0)
00017A8E 4E75                       		rts	
00017A90                            ; End of function BossMove
00017A90                            
00017A90                            ; ===========================================================================
00017A90                            
00017A90                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017A90 317C FF00 0010             		move.w	#-$100,$10(a0)
00017A96 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017A9C 6100 FFCC                  		bsr.w	BossMove
00017AA0 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017AA6 6600                       		bne.s	loc_17916
00017AA8 317C 0000 0010             		move.w	#0,$10(a0)
00017AAE 317C 0000 0012             		move.w	#0,$12(a0)
00017AB4 5428 0025                  		addq.b	#2,$25(a0)
00017AB8 4EB9 0000 DC10             		jsr	SingleObjLoad2
00017ABE 6600                       		bne.s	loc_17910
00017AC0 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017AC4 3368 0030 0008             		move.w	$30(a0),8(a1)
00017ACA 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017AD0 2348 0034                  		move.l	a0,$34(a1)
00017AD4                            
00017AD4                            loc_17910:
00017AD4 317C 0077 003C             		move.w	#$77,$3C(a0)
00017ADA                            
00017ADA                            loc_17916:
00017ADA 6000 FED2                  		bra.w	loc_177E6
00017ADE                            ; ===========================================================================
00017ADE                            
00017ADE                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017ADE 5368 003C                  		subq.w	#1,$3C(a0)
00017AE2 6A00                       		bpl.s	Obj3D_Reverse
00017AE4 5428 0025                  		addq.b	#2,$25(a0)
00017AE8 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017AEE 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017AF4 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017AFA 6600                       		bne.s	Obj3D_Reverse
00017AFC 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017B02 317C 0040 0010             		move.w	#$40,$10(a0)
00017B08                            
00017B08                            Obj3D_Reverse:
00017B08 0828 0000 0022             		btst	#0,$22(a0)
00017B0E 6600                       		bne.s	loc_17950
00017B10 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017B14                            
00017B14                            loc_17950:
00017B14 6000 FE98                  		bra.w	loc_177E6
00017B18                            ; ===========================================================================
00017B18                            
00017B18                            loc_17954:				; XREF: Obj3D_ShipIndex
00017B18 5368 003C                  		subq.w	#1,$3C(a0)
00017B1C 6B00                       		bmi.s	loc_17960
00017B1E 6100 FF4A                  		bsr.w	BossMove
00017B22 6000                       		bra.s	loc_17976
00017B24                            ; ===========================================================================
00017B24                            
00017B24                            loc_17960:
00017B24 0868 0000 0022             		bchg	#0,$22(a0)
00017B2A 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017B30 5528 0025                  		subq.b	#2,$25(a0)
00017B34 317C 0000 0010             		move.w	#0,$10(a0)
00017B3A                            
00017B3A                            loc_17976:
00017B3A 6000 FE72                  		bra.w	loc_177E6
00017B3E                            ; ===========================================================================
00017B3E                            
00017B3E                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017B3E 5368 003C                  		subq.w	#1,$3C(a0)
00017B42 6B00                       		bmi.s	loc_17984
00017B44 6000 FEE2                  		bra.w	BossDefeated
00017B48                            ; ===========================================================================
00017B48                            
00017B48                            loc_17984:
00017B48 08E8 0000 0022             		bset	#0,$22(a0)
00017B4E 08A8 0007 0022             		bclr	#7,$22(a0)
00017B54 4268 0010                  		clr.w	$10(a0)
00017B58 5428 0025                  		addq.b	#2,$25(a0)
00017B5C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017B62 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017B66 6600                       		bne.s	locret_179AA
00017B68 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017B6E                            
00017B6E                            locret_179AA:
00017B6E 4E75                       		rts	
00017B70                            ; ===========================================================================
00017B70                            
00017B70                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017B70 5268 003C                  		addq.w	#1,$3C(a0)
00017B74 6700                       		beq.s	loc_179BC
00017B76 6A00                       		bpl.s	loc_179C2
00017B78 0668 0018 0012             		addi.w	#$18,$12(a0)
00017B7E 6000                       		bra.s	loc_179EE
00017B80                            ; ===========================================================================
00017B80                            
00017B80                            loc_179BC:
00017B80 4268 0012                  		clr.w	$12(a0)
00017B84 6000                       		bra.s	loc_179EE
00017B86                            ; ===========================================================================
00017B86                            
00017B86                            loc_179C2:
00017B86 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017B8C 6500                       		bcs.s	loc_179DA
00017B8E 6700                       		beq.s	loc_179E0
00017B90 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017B96 6500                       		bcs.s	loc_179EE
00017B98 5428 0025                  		addq.b	#2,$25(a0)
00017B9C 6000                       		bra.s	loc_179EE
00017B9E                            ; ===========================================================================
00017B9E                            
00017B9E                            loc_179DA:
00017B9E 5168 0012                  		subq.w	#8,$12(a0)
00017BA2 6000                       		bra.s	loc_179EE
00017BA4                            ; ===========================================================================
00017BA4                            
00017BA4                            loc_179E0:
00017BA4 4268 0012                  		clr.w	$12(a0)
00017BA8 303C 0081                  		move.w	#$81,d0
00017BAC 4EB9 0000 1396             		jsr	(PlaySound).l	; play GHZ music
00017BB2                            
00017BB2                            loc_179EE:
00017BB2 6100 FEB6                  		bsr.w	BossMove
00017BB6 6000 FDF6                  		bra.w	loc_177E6
00017BBA                            ; ===========================================================================
00017BBA                            
00017BBA                            loc_179F6:				; XREF: Obj3D_ShipIndex
00017BBA 317C 0400 0010             		move.w	#$400,$10(a0)
00017BC0 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017BC6 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00017BCC 6700                       		beq.s	loc_17A10
00017BCE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00017BD2 6000                       		bra.s	loc_17A16
00017BD4                            ; ===========================================================================
00017BD4                            
00017BD4                            loc_17A10:
00017BD4 4A28 0001                  		tst.b	1(a0)
00017BD8 6A00                       		bpl.s	Obj3D_ShipDel
00017BDA                            
00017BDA                            loc_17A16:
00017BDA 6100 FE8E                  		bsr.w	BossMove
00017BDE 6000 FDCE                  		bra.w	loc_177E6
00017BE2                            ; ===========================================================================
00017BE2                            
00017BE2                            Obj3D_ShipDel:
00017BE2 4EF9 0000 D7B0             		jmp	DeleteObject
00017BE8                            ; ===========================================================================
00017BE8                            
00017BE8                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00017BE8 7000                       		moveq	#0,d0
00017BEA 7201                       		moveq	#1,d1
00017BEC 2268 0034                  		movea.l	$34(a0),a1
00017BF0 1029 0025                  		move.b	$25(a1),d0
00017BF4 5900                       		subq.b	#4,d0
00017BF6 6600                       		bne.s	loc_17A3E
00017BF8 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00017BFE 6600                       		bne.s	loc_17A46
00017C00 7204                       		moveq	#4,d1
00017C02                            
00017C02                            loc_17A3E:
00017C02 5D00                       		subq.b	#6,d0
00017C04 6B00                       		bmi.s	loc_17A46
00017C06 720A                       		moveq	#$A,d1
00017C08 6000                       		bra.s	loc_17A5A
00017C0A                            ; ===========================================================================
00017C0A                            
00017C0A                            loc_17A46:
00017C0A 4A29 0020                  		tst.b	$20(a1)
00017C0E 6600                       		bne.s	loc_17A50
00017C10 7205                       		moveq	#5,d1
00017C12 6000                       		bra.s	loc_17A5A
00017C14                            ; ===========================================================================
00017C14                            
00017C14                            loc_17A50:
00017C14 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00017C1A 6500                       		bcs.s	loc_17A5A
00017C1C 7204                       		moveq	#4,d1
00017C1E                            
00017C1E                            loc_17A5A:
00017C1E 1141 001C                  		move.b	d1,$1C(a0)
00017C22 5500                       		subq.b	#2,d0
00017C24 6600                       		bne.s	Obj3D_FaceDisp
00017C26 117C 0006 001C             		move.b	#6,$1C(a0)
00017C2C 4A28 0001                  		tst.b	1(a0)
00017C30 6A00                       		bpl.s	Obj3D_FaceDel
00017C32                            
00017C32                            Obj3D_FaceDisp:
00017C32 6000                       		bra.s	Obj3D_Display
00017C34                            ; ===========================================================================
00017C34                            
00017C34                            Obj3D_FaceDel:
00017C34 4EF9 0000 D7B0             		jmp	DeleteObject
00017C3A                            ; ===========================================================================
00017C3A                            
00017C3A                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00017C3A 117C 0007 001C             		move.b	#7,$1C(a0)
00017C40 2268 0034                  		movea.l	$34(a0),a1
00017C44 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00017C4A 6600                       		bne.s	loc_17A96
00017C4C 117C 000B 001C             		move.b	#$B,$1C(a0)
00017C52 4A28 0001                  		tst.b	1(a0)
00017C56 6A00                       		bpl.s	Obj3D_FlameDel
00017C58 6000                       		bra.s	Obj3D_FlameDisp
00017C5A                            ; ===========================================================================
00017C5A                            
00017C5A                            loc_17A96:
00017C5A 3029 0010                  		move.w	$10(a1),d0
00017C5E 6700                       		beq.s	Obj3D_FlameDisp
00017C60 117C 0008 001C             		move.b	#8,$1C(a0)
00017C66                            
00017C66                            Obj3D_FlameDisp:
00017C66 6000                       		bra.s	Obj3D_Display
00017C68                            ; ===========================================================================
00017C68                            
00017C68                            Obj3D_FlameDel:
00017C68 4EF9 0000 D7B0             		jmp	DeleteObject
00017C6E                            ; ===========================================================================
00017C6E                            
00017C6E                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00017C6E 2268 0034                  		movea.l	$34(a0),a1
00017C72 3169 0008 0008             		move.w	8(a1),8(a0)
00017C78 3169 000C 000C             		move.w	$C(a1),$C(a0)
00017C7E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017C84 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017C8A 4EB9 0000 A826             		jsr	AnimateSprite
00017C90 1028 0022                  		move.b	$22(a0),d0
00017C94 0200 0003                  		andi.b	#3,d0
00017C98 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017C9E 8128 0001                  		or.b	d0,1(a0)
00017CA2 4EF9 0000 D774             		jmp	DisplaySprite
00017CA8                            ; ===========================================================================
00017CA8                            ; ---------------------------------------------------------------------------
00017CA8                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00017CA8                            ; ---------------------------------------------------------------------------
00017CA8                            
00017CA8                            Obj48:					; XREF: Obj_Index
00017CA8 7000                       		moveq	#0,d0
00017CAA 1028 0024                  		move.b	$24(a0),d0
00017CAE 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00017CB2 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00017CB6                            ; ===========================================================================
00017CB6 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00017CB8 0000                       		dc.w Obj48_Base-Obj48_Index
00017CBA 0000                       		dc.w Obj48_Display2-Obj48_Index
00017CBC 0000                       		dc.w loc_17C68-Obj48_Index
00017CBE 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00017CC0                            ; ===========================================================================
00017CC0                            
00017CC0                            Obj48_Main:				; XREF: Obj48_Index
00017CC0 5428 0024                  		addq.b	#2,$24(a0)
00017CC4 317C 4080 0026             		move.w	#$4080,$26(a0)
00017CCA 317C FE00 003E             		move.w	#-$200,$3E(a0)
00017CD0 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00017CD8 317C 046C 0002             		move.w	#$46C,2(a0)
00017CDE 45E8 0028                  		lea	$28(a0),a2
00017CE2 14FC 0000                  		move.b	#0,(a2)+
00017CE6 7205                       		moveq	#5,d1
00017CE8 2248                       		movea.l	a0,a1
00017CEA 6000                       		bra.s	loc_17B60
00017CEC                            ; ===========================================================================
00017CEC                            
00017CEC                            Obj48_MakeLinks:
00017CEC 4EB9 0000 DC10             		jsr	SingleObjLoad2
00017CF2 6600                       		bne.s	Obj48_MakeBall
00017CF4 3368 0008 0008             		move.w	8(a0),8(a1)
00017CFA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017D00 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00017D04 137C 0006 0024             		move.b	#6,$24(a1)
00017D0A 237C 0000 7D82 0004        		move.l	#Map_obj15,4(a1)
00017D12 337C 0380 0002             		move.w	#$380,2(a1)
00017D18 137C 0001 001A             		move.b	#1,$1A(a1)
00017D1E 5228 0028                  		addq.b	#1,$28(a0)
00017D22                            
00017D22                            loc_17B60:				; XREF: Obj48_Main
00017D22 3A09                       		move.w	a1,d5
00017D24 0445 D000                  		subi.w	#$D000,d5
00017D28 EC4D                       		lsr.w	#6,d5
00017D2A 0245 007F                  		andi.w	#$7F,d5
00017D2E 14C5                       		move.b	d5,(a2)+
00017D30 137C 0004 0001             		move.b	#4,1(a1)
00017D36 137C 0008 0019             		move.b	#8,$19(a1)
00017D3C 137C 0006 0018             		move.b	#6,$18(a1)
00017D42 2368 0034 0034             		move.l	$34(a0),$34(a1)
00017D48 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00017D4C                            
00017D4C                            Obj48_MakeBall:
00017D4C 137C 0008 0024             		move.b	#8,$24(a1)
00017D52 237C 0000 82E0 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00017D5A 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00017D60 137C 0001 001A             		move.b	#1,$1A(a1)
00017D66 137C 0005 0018             		move.b	#5,$18(a1)
00017D6C 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00017D72 4E75                       		rts	
00017D74                            ; ===========================================================================
00017D74                            
00017D74 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00017D7A                            
00017D7A                            ; ===========================================================================
00017D7A                            
00017D7A                            Obj48_Base:				; XREF: Obj48_Index
00017D7A 47F9 0001 7D74             		lea	(Obj48_PosData).l,a3
00017D80 45E8 0028                  		lea	$28(a0),a2
00017D84 7C00                       		moveq	#0,d6
00017D86 1C1A                       		move.b	(a2)+,d6
00017D88                            
00017D88                            loc_17BC6:
00017D88 7800                       		moveq	#0,d4
00017D8A 181A                       		move.b	(a2)+,d4
00017D8C ED4C                       		lsl.w	#6,d4
00017D8E 0684 00FF D000             		addi.l	#$FFD000,d4
00017D94 2244                       		movea.l	d4,a1
00017D96 101B                       		move.b	(a3)+,d0
00017D98 B029 003C                  		cmp.b	$3C(a1),d0
00017D9C 6700                       		beq.s	loc_17BE0
00017D9E 5229 003C                  		addq.b	#1,$3C(a1)
00017DA2                            
00017DA2                            loc_17BE0:
00017DA2 51CE FFE4                  		dbf	d6,loc_17BC6
00017DA6                            
00017DA6 B029 003C                  		cmp.b	$3C(a1),d0
00017DAA 6600                       		bne.s	loc_17BFA
00017DAC 2268 0034                  		movea.l	$34(a0),a1
00017DB0 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00017DB6 6600                       		bne.s	loc_17BFA
00017DB8 5428 0024                  		addq.b	#2,$24(a0)
00017DBC                            
00017DBC                            loc_17BFA:
00017DBC 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00017DC2 6700                       		beq.s	Obj48_Display
00017DC4 5268 0032                  		addq.w	#1,$32(a0)
00017DC8                            
00017DC8                            Obj48_Display:
00017DC8 6100 0000                  		bsr.w	sub_17C2A
00017DCC 1028 0026                  		move.b	$26(a0),d0
00017DD0 4EB9 0000 7CF4             		jsr	(Obj15_Move2).l
00017DD6 4EF9 0000 D774             		jmp	DisplaySprite
00017DDC                            ; ===========================================================================
00017DDC                            
00017DDC                            Obj48_Display2:				; XREF: Obj48_Index
00017DDC 6100 0000                  		bsr.w	sub_17C2A
00017DE0 4EB9 0000 7CB4             		jsr	(Obj48_Move).l
00017DE6 4EF9 0000 D774             		jmp	DisplaySprite
00017DEC                            
00017DEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DEC                            
00017DEC                            
00017DEC                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00017DEC 2268 0034                  		movea.l	$34(a0),a1
00017DF0 0628 0020 001B             		addi.b	#$20,$1B(a0)
00017DF6 6400                       		bcc.s	loc_17C3C
00017DF8 0868 0000 001A             		bchg	#0,$1A(a0)
00017DFE                            
00017DFE                            loc_17C3C:
00017DFE 3169 0008 003A             		move.w	8(a1),$3A(a0)
00017E04 3029 000C                  		move.w	$C(a1),d0
00017E08 D068 0032                  		add.w	$32(a0),d0
00017E0C 3140 0038                  		move.w	d0,$38(a0)
00017E10 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017E16 4A29 0022                  		tst.b	$22(a1)
00017E1A 6A00                       		bpl.s	locret_17C66
00017E1C 10BC 003F                  		move.b	#$3F,0(a0)
00017E20 117C 0000 0024             		move.b	#0,$24(a0)
00017E26                            
00017E26                            locret_17C66:
00017E26 4E75                       		rts	
00017E28                            ; End of function sub_17C2A
00017E28                            
00017E28                            ; ===========================================================================
00017E28                            
00017E28                            loc_17C68:				; XREF: Obj48_Index
00017E28 2268 0034                  		movea.l	$34(a0),a1
00017E2C 4A29 0022                  		tst.b	$22(a1)
00017E30 6A00                       		bpl.s	Obj48_Display3
00017E32 10BC 003F                  		move.b	#$3F,0(a0)
00017E36 117C 0000 0024             		move.b	#0,$24(a0)
00017E3C                            
00017E3C                            Obj48_Display3:
00017E3C 4EF9 0000 D774             		jmp	DisplaySprite
00017E42                            ; ===========================================================================
00017E42                            
00017E42                            Obj48_ChkVanish:			; XREF: Obj48_Index
00017E42 7000                       		moveq	#0,d0
00017E44 4A28 001A                  		tst.b	$1A(a0)
00017E48 6600                       		bne.s	Obj48_Vanish
00017E4A 5200                       		addq.b	#1,d0
00017E4C                            
00017E4C                            Obj48_Vanish:
00017E4C 1140 001A                  		move.b	d0,$1A(a0)
00017E50 2268 0034                  		movea.l	$34(a0),a1
00017E54 4A29 0022                  		tst.b	$22(a1)
00017E58 6A00                       		bpl.s	Obj48_Display4
00017E5A 117C 0000 0020             		move.b	#0,$20(a0)
00017E60 6100 FBC6                  		bsr.w	BossDefeated
00017E64 5328 003C                  		subq.b	#1,$3C(a0)
00017E68 6A00                       		bpl.s	Obj48_Display4
00017E6A 10BC 003F                  		move.b	#$3F,(a0)
00017E6E 117C 0000 0024             		move.b	#0,$24(a0)
00017E74                            
00017E74                            Obj48_Display4:
00017E74 4EF9 0000 D774             		jmp	DisplaySprite
00017E7A                            ; ===========================================================================
00017E7A                            Ani_Eggman:
00017E7A                            	include "_anim\Eggman.asm"
00017E7A                            ; ---------------------------------------------------------------------------
00017E7A                            ; Animation script - Eggman (bosses)
00017E7A                            ; ---------------------------------------------------------------------------
00017E7A 0000                       		dc.w byte_17CD4-Ani_Eggman
00017E7C 0000                       		dc.w byte_17CD8-Ani_Eggman
00017E7E 0000                       		dc.w byte_17CDC-Ani_Eggman
00017E80 0000                       		dc.w byte_17CE0-Ani_Eggman
00017E82 0000                       		dc.w byte_17CE4-Ani_Eggman
00017E84 0000                       		dc.w byte_17CE8-Ani_Eggman
00017E86 0000                       		dc.w byte_17CEC-Ani_Eggman
00017E88 0000                       		dc.w byte_17CF0-Ani_Eggman
00017E8A 0000                       		dc.w byte_17CF4-Ani_Eggman
00017E8C 0000                       		dc.w byte_17CF8-Ani_Eggman
00017E8E 0000                       		dc.w byte_17CFC-Ani_Eggman
00017E90 0000                       		dc.w byte_17D00-Ani_Eggman
00017E92 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00017E96 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00017E9A 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00017E9E 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00017EA2 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00017EA6 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00017EAA 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00017EAE 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00017EB2 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00017EB6 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00017EBA 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00017EBE 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00017ECA                            		even
00017ECA                            		even
00017ECA                            
00017ECA                            ; ---------------------------------------------------------------------------
00017ECA                            ; Sprite mappings - Eggman (boss levels)
00017ECA                            ; ---------------------------------------------------------------------------
00017ECA                            Map_Eggman:
00017ECA                            	include "_maps\Eggman.asm"
00017ECA                            Map_dc7e:
00017ECA 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00017ECC 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00017ECE 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00017ED0 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00017ED2 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00017ED4 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00017ED6 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00017ED8 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00017EDA 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00017EDC 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00017EDE 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00017EE0 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00017EE2 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00017EE4 06                         Map_dc7e_1A: 	dc.b $6
00017EE5 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00017EEA EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00017EEF FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00017EF4 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00017EF9 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00017EFE 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00017F03 02                         Map_dc7e_39: 	dc.b $2
00017F04 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00017F09 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00017F0E 02                         Map_dc7e_44: 	dc.b $2
00017F0F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00017F14 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00017F19 03                         Map_dc7e_4F: 	dc.b $3
00017F1A E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00017F1F EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00017F24 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00017F29 03                         Map_dc7e_5F: 	dc.b $3
00017F2A E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00017F2F EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00017F34 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00017F39 03                         Map_dc7e_6F: 	dc.b $3
00017F3A E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00017F3F EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00017F44 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00017F49 03                         Map_dc7e_7F: 	dc.b $3
00017F4A E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00017F4F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00017F54 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00017F59 04                         Map_dc7e_8F: 	dc.b $4
00017F5A E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00017F5F E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00017F64 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00017F69 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00017F6E 01                         Map_dc7e_A4: 	dc.b $1
00017F6F 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00017F74 01                         Map_dc7e_AA: 	dc.b $1
00017F75 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00017F7A 00                         Map_dc7e_B0: 	dc.b $0
00017F7B 02                         Map_dc7e_B1: 	dc.b $2
00017F7C 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00017F81 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00017F86 02                         Map_dc7e_BC: 	dc.b $2
00017F87 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00017F8C 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00017F92 00                         	even
00017F92 00                         	even
00017F92                            
00017F92                            ; ---------------------------------------------------------------------------
00017F92                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00017F92                            ; ---------------------------------------------------------------------------
00017F92                            Map_BossItems:
00017F92                            	include "_maps\Boss items.asm"
00017F92                            ; ---------------------------------------------------------------------------
00017F92                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00017F92                            ; ---------------------------------------------------------------------------
00017F92 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00017F96 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00017F9A 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00017F9E 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00017FA2 01                         byte_17DE4:	dc.b 1
00017FA3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017FA8 02                         byte_17DEA:	dc.b 2
00017FA9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00017FAE F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017FB3 00                         		dc.b 0
00017FB4 01                         byte_17DF6:	dc.b 1
00017FB5 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00017FBA 01                         byte_17DFC:	dc.b 1
00017FBB 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00017FC0 01                         byte_17E02:	dc.b 1
00017FC1 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00017FC6 04                         byte_17E08:	dc.b 4
00017FC7 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00017FCC F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00017FD1 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00017FD6 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00017FDB 00                         		dc.b 0
00017FDC 02                         byte_17E1E:	dc.b 2
00017FDD 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00017FE2 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00017FE7 00                         		dc.b 0
00017FE8 02                         byte_17E2A:	dc.b 2
00017FE9 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00017FEE 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00017FF4 00                         		even
00017FF4 00                         		even
00017FF4                            
00017FF4                            ; ===========================================================================
00017FF4                            ; ---------------------------------------------------------------------------
00017FF4                            ; Object 77 - Eggman (LZ)
00017FF4                            ; ---------------------------------------------------------------------------
00017FF4                            
00017FF4                            Obj77:					; XREF: Obj_Index
00017FF4 7000                       		moveq	#0,d0
00017FF6 1028 0024                  		move.b	$24(a0),d0
00017FFA 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00017FFE 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018002                            ; ===========================================================================
00018002 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00018004 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00018006 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00018008 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001800A                            
0001800A 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001800C 0401                       		dc.b 4,	1
0001800E 0607                       		dc.b 6,	7
00018010                            ; ===========================================================================
00018010                            
00018010                            Obj77_Main:				; XREF: Obj77_Index
00018010 317C 1E10 0008             		move.w	#$1E10,8(a0)
00018016 317C 05C0 000C             		move.w	#$5C0,$C(a0)
0001801C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018022 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018028 117C 000F 0020             		move.b	#$F,$20(a0)
0001802E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018034 117C 0004 0018             		move.b	#4,$18(a0)
0001803A 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001803E 2248                       		movea.l	a0,a1
00018040 7202                       		moveq	#2,d1
00018042 6000                       		bra.s	Obj77_LoadBoss
00018044                            ; ===========================================================================
00018044                            
00018044                            Obj77_Loop:
00018044 4EB9 0000 DC10             		jsr	SingleObjLoad2
0001804A 6600                       		bne.s	Obj77_ShipMain
0001804C 12BC 0077                  		move.b	#$77,0(a1)
00018050 3368 0008 0008             		move.w	8(a0),8(a1)
00018056 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001805C                            
0001805C                            Obj77_LoadBoss:				; XREF: Obj77_Main
0001805C 08A8 0000 0022             		bclr	#0,$22(a0)
00018062 4229 0025                  		clr.b	$25(a1)
00018066 135A 0024                  		move.b	(a2)+,$24(a1)
0001806A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001806E 1368 0018 0018             		move.b	$18(a0),$18(a1)
00018074 237C 0001 7ECA 0004        		move.l	#Map_Eggman,4(a1)
0001807C 337C 0400 0002             		move.w	#$400,2(a1)
00018082 137C 0004 0001             		move.b	#4,1(a1)
00018088 137C 0020 0019             		move.b	#$20,$19(a1)
0001808E 2348 0034                  		move.l	a0,$34(a1)
00018092 51C9 FFB0                  		dbf	d1,Obj77_Loop
00018096                            
00018096                            Obj77_ShipMain:
00018096 43F8 D000                  		lea	($FFFFD000).w,a1
0001809A 7000                       		moveq	#0,d0
0001809C 1028 0025                  		move.b	$25(a0),d0
000180A0 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000180A4 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000180A8 43F9 0001 7E7A             		lea	(Ani_Eggman).l,a1
000180AE 4EB9 0000 A826             		jsr	AnimateSprite
000180B4 7003                       		moveq	#3,d0
000180B6 C028 0022                  		and.b	$22(a0),d0
000180BA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000180C0 8128 0001                  		or.b	d0,1(a0)
000180C4 4EF9 0000 D774             		jmp	DisplaySprite
000180CA                            ; ===========================================================================
000180CA 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
000180CE 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000180D2 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000180D6 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000180DA                            ; ===========================================================================
000180DA                            
000180DA                            loc_17F1E:				; XREF: Obj77_ShipIndex
000180DA 3029 0008                  		move.w	8(a1),d0
000180DE 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000180E2 6500                       		bcs.s	loc_17F38
000180E4 317C FE80 0012             		move.w	#-$180,$12(a0)
000180EA 317C 0060 0010             		move.w	#$60,$10(a0)
000180F0 5428 0025                  		addq.b	#2,$25(a0)
000180F4                            
000180F4                            loc_17F38:
000180F4 6100 F974                  		bsr.w	BossMove
000180F8 3168 0038 000C             		move.w	$38(a0),$C(a0)
000180FE 3168 0030 0008             		move.w	$30(a0),8(a0)
00018104                            
00018104                            loc_17F48:
00018104 4A28 003D                  		tst.b	$3D(a0)
00018108 6600                       		bne.s	loc_17F8E
0001810A 4A28 0022                  		tst.b	$22(a0)
0001810E 6B00                       		bmi.s	loc_17F92
00018110 4A28 0020                  		tst.b	$20(a0)
00018114 6600                       		bne.s	locret_17F8C
00018116 4A28 003E                  		tst.b	$3E(a0)
0001811A 6600                       		bne.s	loc_17F70
0001811C 117C 0020 003E             		move.b	#$20,$3E(a0)
00018122 303C 00AC                  		move.w	#$AC,d0
00018126 4EB9 0000 139C             		jsr	(PlaySound_Special).l
0001812C                            
0001812C                            loc_17F70:
0001812C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018130 7000                       		moveq	#0,d0
00018132 4A51                       		tst.w	(a1)
00018134 6600                       		bne.s	loc_17F7E
00018136 303C 0EEE                  		move.w	#$EEE,d0
0001813A                            
0001813A                            loc_17F7E:
0001813A 3280                       		move.w	d0,(a1)
0001813C 5328 003E                  		subq.b	#1,$3E(a0)
00018140 6600                       		bne.s	locret_17F8C
00018142 117C 000F 0020             		move.b	#$F,$20(a0)
00018148                            
00018148                            locret_17F8C:
00018148 4E75                       		rts	
0001814A                            ; ===========================================================================
0001814A                            
0001814A                            loc_17F8E:				; XREF: loc_17F48
0001814A 6000 F8DC                  		bra.w	BossDefeated
0001814E                            ; ===========================================================================
0001814E                            
0001814E                            loc_17F92:				; XREF: loc_17F48
0001814E 7064                       		moveq	#100,d0
00018150 6100 0000                  		bsr.w	AddPoints
00018154 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001815A 4E75                       		rts	
0001815C                            ; ===========================================================================
0001815C                            
0001815C                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001815C 70FE                       		moveq	#-2,d0
0001815E 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00018164 6500                       		bcs.s	loc_17FB6
00018166 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001816C 4268 0010                  		clr.w	$10(a0)
00018170 5240                       		addq.w	#1,d0
00018172                            
00018172                            loc_17FB6:
00018172 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00018178 6E00                       		bgt.s	loc_17FCA
0001817A 317C 0500 0038             		move.w	#$500,$38(a0)
00018180 4268 0012                  		clr.w	$12(a0)
00018184 5240                       		addq.w	#1,d0
00018186                            
00018186                            loc_17FCA:
00018186 6600                       		bne.s	loc_17FDC
00018188 317C 0140 0010             		move.w	#$140,$10(a0)
0001818E 317C FE00 0012             		move.w	#-$200,$12(a0)
00018194 5428 0025                  		addq.b	#2,$25(a0)
00018198                            
00018198                            loc_17FDC:
00018198 6000 FF5A                  		bra.w	loc_17F38
0001819C                            ; ===========================================================================
0001819C                            
0001819C                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001819C 70FE                       		moveq	#-2,d0
0001819E 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000181A4 6500                       		bcs.s	loc_17FF6
000181A6 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000181AC 4268 0010                  		clr.w	$10(a0)
000181B0 5240                       		addq.w	#1,d0
000181B2                            
000181B2                            loc_17FF6:
000181B2 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
000181B8 6E00                       		bgt.s	loc_1800A
000181BA 317C 04C0 0038             		move.w	#$4C0,$38(a0)
000181C0 4268 0012                  		clr.w	$12(a0)
000181C4 5240                       		addq.w	#1,d0
000181C6                            
000181C6                            loc_1800A:
000181C6 6600                       		bne.s	loc_1801A
000181C8 317C FE80 0012             		move.w	#-$180,$12(a0)
000181CE 5428 0025                  		addq.b	#2,$25(a0)
000181D2 4228 003F                  		clr.b	$3F(a0)
000181D6                            
000181D6                            loc_1801A:
000181D6 6000 FF1C                  		bra.w	loc_17F38
000181DA                            ; ===========================================================================
000181DA                            
000181DA                            loc_1801E:				; XREF: Obj77_ShipIndex
000181DA 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000181E0 6E00                       		bgt.s	loc_1804E
000181E2 317C 0100 0038             		move.w	#$100,$38(a0)
000181E8 317C 0140 0010             		move.w	#$140,$10(a0)
000181EE 317C FF80 0012             		move.w	#-$80,$12(a0)
000181F4 4A28 003D                  		tst.b	$3D(a0)
000181F8 6700                       		beq.s	loc_18046
000181FA E1E8 0010                  		asl	$10(a0)
000181FE E1E8 0012                  		asl	$12(a0)
00018202                            
00018202                            loc_18046:
00018202 5428 0025                  		addq.b	#2,$25(a0)
00018206 6000 FEEC                  		bra.w	loc_17F38
0001820A                            ; ===========================================================================
0001820A                            
0001820A                            loc_1804E:
0001820A 08E8 0000 0022             		bset	#0,$22(a0)
00018210 5428 003F                  		addq.b	#2,$3F(a0)
00018214 1028 003F                  		move.b	$3F(a0),d0
00018218 4EB9 0000 29DA             		jsr	(CalcSine).l
0001821E 4A41                       		tst.w	d1
00018220 6A00                       		bpl.s	loc_1806C
00018222 08A8 0000 0022             		bclr	#0,$22(a0)
00018228                            
00018228                            loc_1806C:
00018228 E840                       		asr.w	#4,d0
0001822A 4840                       		swap	d0
0001822C 4240                       		clr.w	d0
0001822E D0A8 0030                  		add.l	$30(a0),d0
00018232 4840                       		swap	d0
00018234 3140 0008                  		move.w	d0,8(a0)
00018238 3028 0012                  		move.w	$12(a0),d0
0001823C 3238 D00C                  		move.w	($FFFFD00C).w,d1
00018240 9268 000C                  		sub.w	$C(a0),d1
00018244 6500                       		bcs.s	loc_180A2
00018246 0441 0048                  		subi.w	#$48,d1
0001824A 6500                       		bcs.s	loc_180A2
0001824C E240                       		asr.w	#1,d0
0001824E 0441 0028                  		subi.w	#$28,d1
00018252 6500                       		bcs.s	loc_180A2
00018254 E240                       		asr.w	#1,d0
00018256 0441 0028                  		subi.w	#$28,d1
0001825A 6500                       		bcs.s	loc_180A2
0001825C 7000                       		moveq	#0,d0
0001825E                            
0001825E                            loc_180A2:
0001825E 48C0                       		ext.l	d0
00018260 E180                       		asl.l	#8,d0
00018262 4A28 003D                  		tst.b	$3D(a0)
00018266 6700                       		beq.s	loc_180AE
00018268 D080                       		add.l	d0,d0
0001826A                            
0001826A                            loc_180AE:
0001826A D1A8 0038                  		add.l	d0,$38(a0)
0001826E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018274 6000 FE8E                  		bra.w	loc_17F48
00018278                            ; ===========================================================================
00018278                            
00018278                            loc_180BC:				; XREF: Obj77_ShipIndex
00018278 70FE                       		moveq	#-2,d0
0001827A 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00018280 6500                       		bcs.s	loc_180D2
00018282 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00018288 4268 0010                  		clr.w	$10(a0)
0001828C 5240                       		addq.w	#1,d0
0001828E                            
0001828E                            loc_180D2:
0001828E 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00018294 6E00                       		bgt.s	loc_180E6
00018296 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001829C 4268 0012                  		clr.w	$12(a0)
000182A0 5240                       		addq.w	#1,d0
000182A2                            
000182A2                            loc_180E6:
000182A2 6600                       		bne.s	loc_180F2
000182A4 5428 0025                  		addq.b	#2,$25(a0)
000182A8 08A8 0000 0022             		bclr	#0,$22(a0)
000182AE                            
000182AE                            loc_180F2:
000182AE 6000 FE44                  		bra.w	loc_17F38
000182B2                            ; ===========================================================================
000182B2                            
000182B2                            loc_180F6:				; XREF: Obj77_ShipIndex
000182B2 4A28 003D                  		tst.b	$3D(a0)
000182B6 6600                       		bne.s	loc_18112
000182B8 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
000182BE 6D00                       		blt.s	loc_18126
000182C0 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
000182C6 6E00                       		bgt.s	loc_18126
000182C8 117C 0032 003C             		move.b	#$32,$3C(a0)
000182CE                            
000182CE                            loc_18112:
000182CE 303C 0082                  		move.w	#$82,d0
000182D2 4EB9 0000 1396             		jsr	(PlaySound).l	; play LZ music
000182D8 08E8 0000 0022             		bset	#0,$22(a0)
000182DE 5428 0025                  		addq.b	#2,$25(a0)
000182E2                            
000182E2                            loc_18126:
000182E2 6000 FE10                  		bra.w	loc_17F38
000182E6                            ; ===========================================================================
000182E6                            
000182E6                            loc_1812A:				; XREF: Obj77_ShipIndex
000182E6 4A28 003D                  		tst.b	$3D(a0)
000182EA 6600                       		bne.s	loc_18136
000182EC 5328 003C                  		subq.b	#1,$3C(a0)
000182F0 6600                       		bne.s	loc_1814E
000182F2                            
000182F2                            loc_18136:
000182F2 4228 003C                  		clr.b	$3C(a0)
000182F6 317C 0400 0010             		move.w	#$400,$10(a0)
000182FC 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018302 4228 003D                  		clr.b	$3D(a0)
00018306 5428 0025                  		addq.b	#2,$25(a0)
0001830A                            
0001830A                            loc_1814E:
0001830A 6000 FDE8                  		bra.w	loc_17F38
0001830E                            ; ===========================================================================
0001830E                            
0001830E                            loc_18152:				; XREF: Obj77_ShipIndex
0001830E 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018314 6400                       		bcc.s	loc_18160
00018316 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001831A 6000                       		bra.s	loc_18166
0001831C                            ; ===========================================================================
0001831C                            
0001831C                            loc_18160:
0001831C 4A28 0001                  		tst.b	1(a0)
00018320 6A00                       		bpl.s	Obj77_ShipDel
00018322                            
00018322                            loc_18166:
00018322 6000 FDD0                  		bra.w	loc_17F38
00018326                            ; ===========================================================================
00018326                            
00018326                            Obj77_ShipDel:
00018326 4EF9 0000 D7B0             		jmp	DeleteObject
0001832C                            ; ===========================================================================
0001832C                            
0001832C                            Obj77_FaceMain:				; XREF: Obj77_Index
0001832C 2268 0034                  		movea.l	$34(a0),a1
00018330 1011                       		move.b	(a1),d0
00018332 B010                       		cmp.b	(a0),d0
00018334 6600                       		bne.s	Obj77_FaceDel
00018336 7000                       		moveq	#0,d0
00018338 1029 0025                  		move.b	$25(a1),d0
0001833C 7201                       		moveq	#1,d1
0001833E 4A28 003D                  		tst.b	$3D(a0)
00018342 6700                       		beq.s	loc_1818C
00018344 720A                       		moveq	#$A,d1
00018346 6000                       		bra.s	loc_181A0
00018348                            ; ===========================================================================
00018348                            
00018348                            loc_1818C:
00018348 4A29 0020                  		tst.b	$20(a1)
0001834C 6600                       		bne.s	loc_18196
0001834E 7205                       		moveq	#5,d1
00018350 6000                       		bra.s	loc_181A0
00018352                            ; ===========================================================================
00018352                            
00018352                            loc_18196:
00018352 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018358 6500                       		bcs.s	loc_181A0
0001835A 7204                       		moveq	#4,d1
0001835C                            
0001835C                            loc_181A0:
0001835C 1141 001C                  		move.b	d1,$1C(a0)
00018360 0C00 000E                  		cmpi.b	#$E,d0
00018364 6600                       		bne.s	loc_181B6
00018366 117C 0006 001C             		move.b	#6,$1C(a0)
0001836C 4A28 0001                  		tst.b	1(a0)
00018370 6A00                       		bpl.s	Obj77_FaceDel
00018372                            
00018372                            loc_181B6:
00018372 6000                       		bra.s	Obj77_Display
00018374                            ; ===========================================================================
00018374                            
00018374                            Obj77_FaceDel:
00018374 4EF9 0000 D7B0             		jmp	DeleteObject
0001837A                            ; ===========================================================================
0001837A                            
0001837A                            Obj77_FlameMain:			; XREF: Obj77_Index
0001837A 117C 0007 001C             		move.b	#7,$1C(a0)
00018380 2268 0034                  		movea.l	$34(a0),a1
00018384 1011                       		move.b	(a1),d0
00018386 B010                       		cmp.b	(a0),d0
00018388 6600                       		bne.s	Obj77_FlameDel
0001838A 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00018390 6600                       		bne.s	loc_181F0
00018392 117C 000B 001C             		move.b	#$B,$1C(a0)
00018398 4A28 0001                  		tst.b	1(a0)
0001839C 6A00                       		bpl.s	Obj77_FlameDel
0001839E 6000                       		bra.s	loc_181F0
000183A0                            ; ===========================================================================
000183A0 4A69 0010                  		tst.w	$10(a1)
000183A4 6700                       		beq.s	loc_181F0
000183A6 117C 0008 001C             		move.b	#8,$1C(a0)
000183AC                            
000183AC                            loc_181F0:
000183AC 6000                       		bra.s	Obj77_Display
000183AE                            ; ===========================================================================
000183AE                            
000183AE                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
000183AE 4EF9 0000 D7B0             		jmp	DeleteObject
000183B4                            ; ===========================================================================
000183B4                            
000183B4                            Obj77_Display:
000183B4 43F9 0001 7E7A             		lea	(Ani_Eggman).l,a1
000183BA 4EB9 0000 A826             		jsr	AnimateSprite
000183C0 2268 0034                  		movea.l	$34(a0),a1
000183C4 3169 0008 0008             		move.w	8(a1),8(a0)
000183CA 3169 000C 000C             		move.w	$C(a1),$C(a0)
000183D0 1169 0022 0022             		move.b	$22(a1),$22(a0)
000183D6 7003                       		moveq	#3,d0
000183D8 C028 0022                  		and.b	$22(a0),d0
000183DC 0228 00FC 0001             		andi.b	#-4,1(a0)
000183E2 8128 0001                  		or.b	d0,1(a0)
000183E6 4EF9 0000 D774             		jmp	DisplaySprite
000183EC                            ; ===========================================================================
000183EC                            ; ---------------------------------------------------------------------------
000183EC                            ; Object 73 - Eggman (MZ)
000183EC                            ; ---------------------------------------------------------------------------
000183EC                            
000183EC                            Obj73:					; XREF: Obj_Index
000183EC 7000                       		moveq	#0,d0
000183EE 1028 0024                  		move.b	$24(a0),d0
000183F2 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
000183F6 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
000183FA                            ; ===========================================================================
000183FA 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
000183FC 0000                       		dc.w Obj73_ShipMain-Obj73_Index
000183FE 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018400 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018402 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018404                            
00018404 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018407 0401 04                    		dc.b 4,	1, 4
0001840A 0607 04                    		dc.b 6,	7, 4
0001840D 0800 03                    		dc.b 8,	0, 3
00018410                            ; ===========================================================================
00018410                            
00018410                            Obj73_Main:				; XREF: Obj73_Index
00018410 3168 0008 0030             		move.w	8(a0),$30(a0)
00018416 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001841C 117C 000F 0020             		move.b	#$F,$20(a0)
00018422 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018428 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001842C 2248                       		movea.l	a0,a1
0001842E 7203                       		moveq	#3,d1
00018430 6000                       		bra.s	Obj73_LoadBoss
00018432                            ; ===========================================================================
00018432                            
00018432                            Obj73_Loop:
00018432 4EB9 0000 DC10             		jsr	SingleObjLoad2
00018438 6600                       		bne.s	Obj73_ShipMain
0001843A 12BC 0073                  		move.b	#$73,0(a1)
0001843E 3368 0008 0008             		move.w	8(a0),8(a1)
00018444 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001844A                            
0001844A                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001844A 08A8 0000 0022             		bclr	#0,$22(a0)
00018450 4229 0025                  		clr.b	$25(a1)
00018454 135A 0024                  		move.b	(a2)+,$24(a1)
00018458 135A 001C                  		move.b	(a2)+,$1C(a1)
0001845C 135A 0018                  		move.b	(a2)+,$18(a1)
00018460 237C 0001 7ECA 0004        		move.l	#Map_Eggman,4(a1)
00018468 337C 0400 0002             		move.w	#$400,2(a1)
0001846E 137C 0004 0001             		move.b	#4,1(a1)
00018474 137C 0020 0019             		move.b	#$20,$19(a1)
0001847A 2348 0034                  		move.l	a0,$34(a1)
0001847E 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018482                            
00018482                            Obj73_ShipMain:
00018482 7000                       		moveq	#0,d0
00018484 1028 0025                  		move.b	$25(a0),d0
00018488 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001848C 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018490 43F9 0001 7E7A             		lea	(Ani_Eggman).l,a1
00018496 4EB9 0000 A826             		jsr	AnimateSprite
0001849C 7003                       		moveq	#3,d0
0001849E C028 0022                  		and.b	$22(a0),d0
000184A2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000184A8 8128 0001                  		or.b	d0,1(a0)
000184AC 4EF9 0000 D774             		jmp	DisplaySprite
000184B2                            ; ===========================================================================
000184B2 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
000184B4 0000                       		dc.w loc_183AA-Obj73_ShipIndex
000184B6 0000                       		dc.w loc_184F6-Obj73_ShipIndex
000184B8 0000                       		dc.w loc_1852C-Obj73_ShipIndex
000184BA 0000                       		dc.w loc_18582-Obj73_ShipIndex
000184BC                            ; ===========================================================================
000184BC                            
000184BC                            loc_18302:				; XREF: Obj73_ShipIndex
000184BC 1028 003F                  		move.b	$3F(a0),d0
000184C0 5428 003F                  		addq.b	#2,$3F(a0)
000184C4 4EB9 0000 29DA             		jsr	(CalcSine).l
000184CA E440                       		asr.w	#2,d0
000184CC 3140 0012                  		move.w	d0,$12(a0)
000184D0 317C FF00 0010             		move.w	#-$100,$10(a0)
000184D6 6100 F592                  		bsr.w	BossMove
000184DA 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000184E0 6600                       		bne.s	loc_18334
000184E2 5428 0025                  		addq.b	#2,$25(a0)
000184E6 4228 0028                  		clr.b	$28(a0)
000184EA 42A8 0010                  		clr.l	$10(a0)
000184EE                            
000184EE                            loc_18334:
000184EE 4EB9 0000 29B4             		jsr	(RandomNumber).l
000184F4 1140 0034                  		move.b	d0,$34(a0)
000184F8                            
000184F8                            loc_1833E:
000184F8 3168 0038 000C             		move.w	$38(a0),$C(a0)
000184FE 3168 0030 0008             		move.w	$30(a0),8(a0)
00018504 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001850A 6400                       		bcc.s	locret_18390
0001850C 4A28 0022                  		tst.b	$22(a0)
00018510 6B00                       		bmi.s	loc_18392
00018512 4A28 0020                  		tst.b	$20(a0)
00018516 6600                       		bne.s	locret_18390
00018518 4A28 003E                  		tst.b	$3E(a0)
0001851C 6600                       		bne.s	loc_18374
0001851E 117C 0028 003E             		move.b	#$28,$3E(a0)
00018524 303C 00AC                  		move.w	#$AC,d0
00018528 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001852E                            
0001852E                            loc_18374:
0001852E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018532 7000                       		moveq	#0,d0
00018534 4A51                       		tst.w	(a1)
00018536 6600                       		bne.s	loc_18382
00018538 303C 0EEE                  		move.w	#$EEE,d0
0001853C                            
0001853C                            loc_18382:
0001853C 3280                       		move.w	d0,(a1)
0001853E 5328 003E                  		subq.b	#1,$3E(a0)
00018542 6600                       		bne.s	locret_18390
00018544 117C 000F 0020             		move.b	#$F,$20(a0)
0001854A                            
0001854A                            locret_18390:
0001854A 4E75                       		rts	
0001854C                            ; ===========================================================================
0001854C                            
0001854C                            loc_18392:				; XREF: loc_1833E
0001854C 7064                       		moveq	#100,d0
0001854E 6100 0000                  		bsr.w	AddPoints
00018552 117C 0004 0025             		move.b	#4,$25(a0)
00018558 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001855E 4268 0010                  		clr.w	$10(a0)
00018562 4E75                       		rts	
00018564                            ; ===========================================================================
00018564                            
00018564                            loc_183AA:				; XREF: Obj73_ShipIndex
00018564 7000                       		moveq	#0,d0
00018566 1028 0028                  		move.b	$28(a0),d0
0001856A 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001856E 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018572 0228 0006 0028             		andi.b	#6,$28(a0)
00018578 6000 FF7E                  		bra.w	loc_1833E
0001857C                            ; ===========================================================================
0001857C 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001857E 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018580 0000                       		dc.w loc_183CA-off_183C2
00018582 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018584                            ; ===========================================================================
00018584                            
00018584                            loc_183CA:				; XREF: off_183C2
00018584 4A68 0010                  		tst.w	$10(a0)
00018588 6600                       		bne.s	loc_183FE
0001858A 7040                       		moveq	#$40,d0
0001858C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018592 6700                       		beq.s	loc_183E6
00018594 6500                       		bcs.s	loc_183DE
00018596 4440                       		neg.w	d0
00018598                            
00018598                            loc_183DE:
00018598 3140 0012                  		move.w	d0,$12(a0)
0001859C 6000 F4CC                  		bra.w	BossMove
000185A0                            ; ===========================================================================
000185A0                            
000185A0                            loc_183E6:
000185A0 317C 0200 0010             		move.w	#$200,$10(a0)
000185A6 317C 0100 0012             		move.w	#$100,$12(a0)
000185AC 0828 0000 0022             		btst	#0,$22(a0)
000185B2 6600                       		bne.s	loc_183FE
000185B4 4468 0010                  		neg.w	$10(a0)
000185B8                            
000185B8                            loc_183FE:
000185B8 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
000185BE 6400                       		bcc.s	Obj73_MakeLava
000185C0 6100 F4A8                  		bsr.w	BossMove
000185C4 5968 0012                  		subq.w	#4,$12(a0)
000185C8                            
000185C8                            Obj73_MakeLava:
000185C8 5328 0034                  		subq.b	#1,$34(a0)
000185CC 6400                       		bcc.s	loc_1845C
000185CE 4EB9 0000 DBFA             		jsr	SingleObjLoad
000185D4 6600                       		bne.s	loc_1844A
000185D6 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
000185DA 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
000185E0 4EB9 0000 29B4             		jsr	(RandomNumber).l
000185E6 0280 0000 FFFF             		andi.l	#$FFFF,d0
000185EC 80FC 0050                  		divu.w	#$50,d0
000185F0 4840                       		swap	d0
000185F2 0640 1878                  		addi.w	#$1878,d0
000185F6 3340 0008                  		move.w	d0,8(a1)
000185FA EE09                       		lsr.b	#7,d1
000185FC 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018602                            
00018602                            loc_1844A:
00018602 4EB9 0000 29B4             		jsr	(RandomNumber).l
00018608 0200 001F                  		andi.b	#$1F,d0
0001860C 0600 0040                  		addi.b	#$40,d0
00018610 1140 0034                  		move.b	d0,$34(a0)
00018614                            
00018614                            loc_1845C:
00018614 0828 0000 0022             		btst	#0,$22(a0)
0001861A 6700                       		beq.s	loc_18474
0001861C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018622 6D00                       		blt.s	locret_1849C
00018624 317C 1910 0030             		move.w	#$1910,$30(a0)
0001862A 6000                       		bra.s	loc_18482
0001862C                            ; ===========================================================================
0001862C                            
0001862C                            loc_18474:
0001862C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018632 6E00                       		bgt.s	locret_1849C
00018634 317C 1830 0030             		move.w	#$1830,$30(a0)
0001863A                            
0001863A                            loc_18482:
0001863A 4268 0010                  		clr.w	$10(a0)
0001863E 317C FE80 0012             		move.w	#-$180,$12(a0)
00018644 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001864A 6400                       		bcc.s	loc_18498
0001864C 4468 0012                  		neg.w	$12(a0)
00018650                            
00018650                            loc_18498:
00018650 5428 0028                  		addq.b	#2,$28(a0)
00018654                            
00018654                            locret_1849C:
00018654 4E75                       		rts	
00018656                            ; ===========================================================================
00018656                            
00018656                            Obj73_MakeLava2:			; XREF: off_183C2
00018656 6100 F412                  		bsr.w	BossMove
0001865A 3028 0038                  		move.w	$38(a0),d0
0001865E 0440 022C                  		subi.w	#$22C,d0
00018662 6E00                       		bgt.s	locret_184F4
00018664 303C 022C                  		move.w	#$22C,d0
00018668 4A68 0012                  		tst.w	$12(a0)
0001866C 6700                       		beq.s	loc_184EA
0001866E 4268 0012                  		clr.w	$12(a0)
00018672 317C 0050 003C             		move.w	#$50,$3C(a0)
00018678 0868 0000 0022             		bchg	#0,$22(a0)
0001867E 4EB9 0000 DBFA             		jsr	SingleObjLoad
00018684 6600                       		bne.s	loc_184EA
00018686 3368 0030 0008             		move.w	$30(a0),8(a1)
0001868C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018692 0669 0018 000C             		addi.w	#$18,$C(a1)
00018698 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001869C 137C 0001 0028             		move.b	#1,$28(a1)
000186A2                            
000186A2                            loc_184EA:
000186A2 5368 003C                  		subq.w	#1,$3C(a0)
000186A6 6600                       		bne.s	locret_184F4
000186A8 5428 0028                  		addq.b	#2,$28(a0)
000186AC                            
000186AC                            locret_184F4:
000186AC 4E75                       		rts	
000186AE                            ; ===========================================================================
000186AE                            
000186AE                            loc_184F6:				; XREF: Obj73_ShipIndex
000186AE 5368 003C                  		subq.w	#1,$3C(a0)
000186B2 6B00                       		bmi.s	loc_18500
000186B4 6000 F372                  		bra.w	BossDefeated
000186B8                            ; ===========================================================================
000186B8                            
000186B8                            loc_18500:
000186B8 08E8 0000 0022             		bset	#0,$22(a0)
000186BE 08A8 0007 0022             		bclr	#7,$22(a0)
000186C4 4268 0010                  		clr.w	$10(a0)
000186C8 5428 0025                  		addq.b	#2,$25(a0)
000186CC 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000186D2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000186D6 6600                       		bne.s	locret_1852A
000186D8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000186DE 4268 0012                  		clr.w	$12(a0)
000186E2                            
000186E2                            locret_1852A:
000186E2 4E75                       		rts	
000186E4                            ; ===========================================================================
000186E4                            
000186E4                            loc_1852C:				; XREF: Obj73_ShipIndex
000186E4 5268 003C                  		addq.w	#1,$3C(a0)
000186E8 6700                       		beq.s	loc_18544
000186EA 6A00                       		bpl.s	loc_1854E
000186EC 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
000186F2 6400                       		bcc.s	loc_18544
000186F4 0668 0018 0012             		addi.w	#$18,$12(a0)
000186FA 6000                       		bra.s	loc_1857A
000186FC                            ; ===========================================================================
000186FC                            
000186FC                            loc_18544:
000186FC 4268 0012                  		clr.w	$12(a0)
00018700 4268 003C                  		clr.w	$3C(a0)
00018704 6000                       		bra.s	loc_1857A
00018706                            ; ===========================================================================
00018706                            
00018706                            loc_1854E:
00018706 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001870C 6500                       		bcs.s	loc_18566
0001870E 6700                       		beq.s	loc_1856C
00018710 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018716 6500                       		bcs.s	loc_1857A
00018718 5428 0025                  		addq.b	#2,$25(a0)
0001871C 6000                       		bra.s	loc_1857A
0001871E                            ; ===========================================================================
0001871E                            
0001871E                            loc_18566:
0001871E 5168 0012                  		subq.w	#8,$12(a0)
00018722 6000                       		bra.s	loc_1857A
00018724                            ; ===========================================================================
00018724                            
00018724                            loc_1856C:
00018724 4268 0012                  		clr.w	$12(a0)
00018728 303C 0083                  		move.w	#$83,d0
0001872C 4EB9 0000 1396             		jsr	(PlaySound).l	; play MZ music
00018732                            
00018732                            loc_1857A:
00018732 6100 F336                  		bsr.w	BossMove
00018736 6000 FDC0                  		bra.w	loc_1833E
0001873A                            ; ===========================================================================
0001873A                            
0001873A                            loc_18582:				; XREF: Obj73_ShipIndex
0001873A 317C 0500 0010             		move.w	#$500,$10(a0)
00018740 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018746 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001874C 6400                       		bcc.s	loc_1859C
0001874E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018752 6000                       		bra.s	loc_185A2
00018754                            ; ===========================================================================
00018754                            
00018754                            loc_1859C:
00018754 4A28 0001                  		tst.b	1(a0)
00018758 6A00                       		bpl.s	Obj73_ShipDel
0001875A                            
0001875A                            loc_185A2:
0001875A 6100 F30E                  		bsr.w	BossMove
0001875E 6000 FD98                  		bra.w	loc_1833E
00018762                            ; ===========================================================================
00018762                            
00018762                            Obj73_ShipDel:
00018762 4EF9 0000 D7B0             		jmp	DeleteObject
00018768                            ; ===========================================================================
00018768                            
00018768                            Obj73_FaceMain:				; XREF: Obj73_Index
00018768 7000                       		moveq	#0,d0
0001876A 7201                       		moveq	#1,d1
0001876C 2268 0034                  		movea.l	$34(a0),a1
00018770 1029 0025                  		move.b	$25(a1),d0
00018774 5540                       		subq.w	#2,d0
00018776 6600                       		bne.s	loc_185D2
00018778 0829 0001 0028             		btst	#1,$28(a1)
0001877E 6700                       		beq.s	loc_185DA
00018780 4A69 0012                  		tst.w	$12(a1)
00018784 6600                       		bne.s	loc_185DA
00018786 7204                       		moveq	#4,d1
00018788 6000                       		bra.s	loc_185EE
0001878A                            ; ===========================================================================
0001878A                            
0001878A                            loc_185D2:
0001878A 5500                       		subq.b	#2,d0
0001878C 6B00                       		bmi.s	loc_185DA
0001878E 720A                       		moveq	#$A,d1
00018790 6000                       		bra.s	loc_185EE
00018792                            ; ===========================================================================
00018792                            
00018792                            loc_185DA:
00018792 4A29 0020                  		tst.b	$20(a1)
00018796 6600                       		bne.s	loc_185E4
00018798 7205                       		moveq	#5,d1
0001879A 6000                       		bra.s	loc_185EE
0001879C                            ; ===========================================================================
0001879C                            
0001879C                            loc_185E4:
0001879C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000187A2 6500                       		bcs.s	loc_185EE
000187A4 7204                       		moveq	#4,d1
000187A6                            
000187A6                            loc_185EE:
000187A6 1141 001C                  		move.b	d1,$1C(a0)
000187AA 5900                       		subq.b	#4,d0
000187AC 6600                       		bne.s	loc_18602
000187AE 117C 0006 001C             		move.b	#6,$1C(a0)
000187B4 4A28 0001                  		tst.b	1(a0)
000187B8 6A00                       		bpl.s	Obj73_FaceDel
000187BA                            
000187BA                            loc_18602:
000187BA 6000                       		bra.s	Obj73_Display
000187BC                            ; ===========================================================================
000187BC                            
000187BC                            Obj73_FaceDel:
000187BC 4EF9 0000 D7B0             		jmp	DeleteObject
000187C2                            ; ===========================================================================
000187C2                            
000187C2                            Obj73_FlameMain:			; XREF: Obj73_Index
000187C2 117C 0007 001C             		move.b	#7,$1C(a0)
000187C8 2268 0034                  		movea.l	$34(a0),a1
000187CC 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000187D2 6D00                       		blt.s	loc_1862A
000187D4 117C 000B 001C             		move.b	#$B,$1C(a0)
000187DA 4A28 0001                  		tst.b	1(a0)
000187DE 6A00                       		bpl.s	Obj73_FlameDel
000187E0 6000                       		bra.s	loc_18636
000187E2                            ; ===========================================================================
000187E2                            
000187E2                            loc_1862A:
000187E2 4A69 0010                  		tst.w	$10(a1)
000187E6 6700                       		beq.s	loc_18636
000187E8 117C 0008 001C             		move.b	#8,$1C(a0)
000187EE                            
000187EE                            loc_18636:
000187EE 6000                       		bra.s	Obj73_Display
000187F0                            ; ===========================================================================
000187F0                            
000187F0                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
000187F0 4EF9 0000 D7B0             		jmp	DeleteObject
000187F6                            ; ===========================================================================
000187F6                            
000187F6                            Obj73_Display:
000187F6 43F9 0001 7E7A             		lea	(Ani_Eggman).l,a1
000187FC 4EB9 0000 A826             		jsr	AnimateSprite
00018802                            
00018802                            loc_1864A:
00018802 2268 0034                  		movea.l	$34(a0),a1
00018806 3169 0008 0008             		move.w	8(a1),8(a0)
0001880C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018812 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018818 7003                       		moveq	#3,d0
0001881A C028 0022                  		and.b	$22(a0),d0
0001881E 0228 00FC 0001             		andi.b	#-4,1(a0)
00018824 8128 0001                  		or.b	d0,1(a0)
00018828 4EF9 0000 D774             		jmp	DisplaySprite
0001882E                            ; ===========================================================================
0001882E                            
0001882E                            Obj73_TubeMain:				; XREF: Obj73_Index
0001882E 2268 0034                  		movea.l	$34(a0),a1
00018832 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018838 6600                       		bne.s	loc_18688
0001883A 4A28 0001                  		tst.b	1(a0)
0001883E 6A00                       		bpl.s	Obj73_TubeDel
00018840                            
00018840                            loc_18688:
00018840 217C 0001 7F92 0004        		move.l	#Map_BossItems,4(a0)
00018848 317C 246C 0002             		move.w	#$246C,2(a0)
0001884E 117C 0004 001A             		move.b	#4,$1A(a0)
00018854 60AC                       		bra.s	loc_1864A
00018856                            ; ===========================================================================
00018856                            
00018856                            Obj73_TubeDel:
00018856 4EF9 0000 D7B0             		jmp	DeleteObject
0001885C                            ; ===========================================================================
0001885C                            ; ---------------------------------------------------------------------------
0001885C                            ; Object 74 - lava that	Eggman drops (MZ)
0001885C                            ; ---------------------------------------------------------------------------
0001885C                            
0001885C                            Obj74:					; XREF: Obj_Index
0001885C 7000                       		moveq	#0,d0
0001885E 1028 0024                  		move.b	$24(a0),d0
00018862 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018866 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001886A 4EF9 0000 D774             		jmp	DisplaySprite
00018870                            ; ===========================================================================
00018870 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018872 0000                       		dc.w Obj74_Action-Obj74_Index
00018874 0000                       		dc.w loc_18886-Obj74_Index
00018876 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018878                            ; ===========================================================================
00018878                            
00018878                            Obj74_Main:				; XREF: Obj74_Index
00018878 117C 0008 0016             		move.b	#8,$16(a0)
0001887E 117C 0008 0017             		move.b	#8,$17(a0)
00018884 217C 0000 B438 0004        		move.l	#Map_obj14,4(a0)
0001888C 317C 0345 0002             		move.w	#$345,2(a0)
00018892 117C 0004 0001             		move.b	#4,1(a0)
00018898 117C 0005 0018             		move.b	#5,$18(a0)
0001889E 3168 000C 0038             		move.w	$C(a0),$38(a0)
000188A4 117C 0008 0019             		move.b	#8,$19(a0)
000188AA 5428 0024                  		addq.b	#2,$24(a0)
000188AE 4A28 0028                  		tst.b	$28(a0)
000188B2 6600                       		bne.s	loc_1870A
000188B4 117C 008B 0020             		move.b	#$8B,$20(a0)
000188BA 5428 0024                  		addq.b	#2,$24(a0)
000188BE 6000 0000                  		bra.w	loc_18886
000188C2                            ; ===========================================================================
000188C2                            
000188C2                            loc_1870A:
000188C2 117C 001E 0029             		move.b	#$1E,$29(a0)
000188C8 303C 00AE                  		move.w	#$AE,d0
000188CC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava sound
000188D2                            
000188D2                            Obj74_Action:				; XREF: Obj74_Index
000188D2 7000                       		moveq	#0,d0
000188D4 1028 0025                  		move.b	$25(a0),d0
000188D8 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
000188DC 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
000188E0 4EB9 0000 D74E             		jsr	SpeedToPos
000188E6 43F9 0000 E62E             		lea	(Ani_obj14).l,a1
000188EC 4EB9 0000 A826             		jsr	AnimateSprite
000188F2 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
000188F8 6200                       		bhi.s	Obj74_Delete
000188FA 4E75                       		rts	
000188FC                            ; ===========================================================================
000188FC                            
000188FC                            Obj74_Delete:
000188FC 4EF9 0000 D7B0             		jmp	DeleteObject
00018902                            ; ===========================================================================
00018902 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018904 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018906 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018908 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001890A                            ; ===========================================================================
0001890A                            
0001890A                            Obj74_Drop:				; XREF: Obj74_Index2
0001890A 08E8 0001 0022             		bset	#1,$22(a0)
00018910 5328 0029                  		subq.b	#1,$29(a0)
00018914 6A00                       		bpl.s	locret_18780
00018916 117C 008B 0020             		move.b	#$8B,$20(a0)
0001891C 4228 0028                  		clr.b	$28(a0)
00018920 0668 0018 0012             		addi.w	#$18,$12(a0)
00018926 08A8 0001 0022             		bclr	#1,$22(a0)
0001892C 6100 C6A8                  		bsr.w	ObjHitFloor
00018930 4A41                       		tst.w	d1
00018932 6A00                       		bpl.s	locret_18780
00018934 5428 0025                  		addq.b	#2,$25(a0)
00018938                            
00018938                            locret_18780:
00018938 4E75                       		rts	
0001893A                            ; ===========================================================================
0001893A                            
0001893A                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001893A 5568 000C                  		subq.w	#2,$C(a0)
0001893E 08E8 0007 0002             		bset	#7,2(a0)
00018944 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001894A 4268 0012                  		clr.w	$12(a0)
0001894E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018954 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001895A 117C 0003 0029             		move.b	#3,$29(a0)
00018960 4EB9 0000 DC10             		jsr	SingleObjLoad2
00018966 6600                       		bne.s	loc_187CA
00018968 47D1                       		lea	(a1),a3
0001896A 45D0                       		lea	(a0),a2
0001896C 7003                       		moveq	#3,d0
0001896E                            
0001896E                            Obj74_Loop:
0001896E 26DA                       		move.l	(a2)+,(a3)+
00018970 26DA                       		move.l	(a2)+,(a3)+
00018972 26DA                       		move.l	(a2)+,(a3)+
00018974 26DA                       		move.l	(a2)+,(a3)+
00018976 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001897A                            
0001897A 4469 0010                  		neg.w	$10(a1)
0001897E 5429 0025                  		addq.b	#2,$25(a1)
00018982                            
00018982                            loc_187CA:
00018982 5428 0025                  		addq.b	#2,$25(a0)
00018986 4E75                       		rts	
00018988                            
00018988                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018988                            
00018988                            
00018988                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018988 4EB9 0000 DC10             		jsr	SingleObjLoad2
0001898E 6600                       		bne.s	locret_187EE
00018990 3368 0008 0008             		move.w	8(a0),8(a1)
00018996 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001899C 12BC 0074                  		move.b	#$74,(a1)
000189A0 337C 0067 0028             		move.w	#$67,$28(a1)
000189A6                            
000189A6                            locret_187EE:
000189A6 4E75                       		rts	
000189A8                            ; End of function Obj74_Duplicate2
000189A8                            
000189A8                            ; ===========================================================================
000189A8                            
000189A8                            Obj74_Duplicate:			; XREF: Obj74_Index2
000189A8 6100 C62C                  		bsr.w	ObjHitFloor
000189AC 4A41                       		tst.w	d1
000189AE 6A00                       		bpl.s	loc_18826
000189B0 3028 0008                  		move.w	8(a0),d0
000189B4 0C40 1940                  		cmpi.w	#$1940,d0
000189B8 6E00                       		bgt.s	loc_1882C
000189BA 3228 0030                  		move.w	$30(a0),d1
000189BE B240                       		cmp.w	d0,d1
000189C0 6700                       		beq.s	loc_1881E
000189C2 0240 0010                  		andi.w	#$10,d0
000189C6 0241 0010                  		andi.w	#$10,d1
000189CA B240                       		cmp.w	d0,d1
000189CC 6700                       		beq.s	loc_1881E
000189CE 61B8                       		bsr.s	Obj74_Duplicate2
000189D0 3168 0008 0032             		move.w	8(a0),$32(a0)
000189D6                            
000189D6                            loc_1881E:
000189D6 3168 0008 0030             		move.w	8(a0),$30(a0)
000189DC 4E75                       		rts	
000189DE                            ; ===========================================================================
000189DE                            
000189DE                            loc_18826:
000189DE 5428 0025                  		addq.b	#2,$25(a0)
000189E2 4E75                       		rts	
000189E4                            ; ===========================================================================
000189E4                            
000189E4                            loc_1882C:
000189E4 5428 0024                  		addq.b	#2,$24(a0)
000189E8 4E75                       		rts	
000189EA                            ; ===========================================================================
000189EA                            
000189EA                            Obj74_FallEdge:				; XREF: Obj74_Index2
000189EA 08A8 0001 0022             		bclr	#1,$22(a0)
000189F0 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
000189F6 3028 0008                  		move.w	8(a0),d0
000189FA 9068 0032                  		sub.w	$32(a0),d0
000189FE 6A00                       		bpl.s	loc_1884A
00018A00 4440                       		neg.w	d0
00018A02                            
00018A02                            loc_1884A:
00018A02 0C40 0012                  		cmpi.w	#$12,d0
00018A06 6600                       		bne.s	loc_18856
00018A08 08A8 0007 0002             		bclr	#7,2(a0)
00018A0E                            
00018A0E                            loc_18856:
00018A0E 6100 C5C6                  		bsr.w	ObjHitFloor
00018A12 4A41                       		tst.w	d1
00018A14 6A00                       		bpl.s	locret_1887E
00018A16 5328 0029                  		subq.b	#1,$29(a0)
00018A1A 6700                       		beq.s	Obj74_Delete2
00018A1C 4268 0012                  		clr.w	$12(a0)
00018A20 3168 0032 0008             		move.w	$32(a0),8(a0)
00018A26 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018A2C 08E8 0007 0002             		bset	#7,2(a0)
00018A32 5528 0025                  		subq.b	#2,$25(a0)
00018A36                            
00018A36                            locret_1887E:
00018A36 4E75                       		rts	
00018A38                            ; ===========================================================================
00018A38                            
00018A38                            Obj74_Delete2:
00018A38 4EF9 0000 D7B0             		jmp	DeleteObject
00018A3E                            ; ===========================================================================
00018A3E                            
00018A3E                            loc_18886:				; XREF: Obj74_Index
00018A3E 08E8 0007 0002             		bset	#7,2(a0)
00018A44 5328 0029                  		subq.b	#1,$29(a0)
00018A48 6600                       		bne.s	Obj74_Animate
00018A4A 117C 0001 001C             		move.b	#1,$1C(a0)
00018A50 5968 000C                  		subq.w	#4,$C(a0)
00018A54 4228 0020                  		clr.b	$20(a0)
00018A58                            
00018A58                            Obj74_Animate:
00018A58 43F9 0000 E62E             		lea	(Ani_obj14).l,a1
00018A5E 4EF9 0000 A826             		jmp	AnimateSprite
00018A64                            ; ===========================================================================
00018A64                            
00018A64                            Obj74_Delete3:				; XREF: Obj74_Index
00018A64 4EF9 0000 D7B0             		jmp	DeleteObject
00018A6A                            ; ===========================================================================
00018A6A                            
00018A6A                            Obj7A_Delete:
00018A6A 4EF9 0000 D7B0             		jmp	DeleteObject
00018A70                            ; ===========================================================================
00018A70                            ; ---------------------------------------------------------------------------
00018A70                            ; Object 7A - Eggman (SLZ)
00018A70                            ; ---------------------------------------------------------------------------
00018A70                            
00018A70                            Obj7A:					; XREF: Obj_Index
00018A70 7000                       		moveq	#0,d0
00018A72 1028 0024                  		move.b	$24(a0),d0
00018A76 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018A7A 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018A7E                            ; ===========================================================================
00018A7E 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018A80 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018A82 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018A84 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018A86 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018A88                            
00018A88 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018A8B 0401 04                    		dc.b 4,	1, 4
00018A8E 0607 04                    		dc.b 6,	7, 4
00018A91 0800 03                    		dc.b 8,	0, 3
00018A94                            ; ===========================================================================
00018A94                            
00018A94                            Obj7A_Main:				; XREF: Obj7A_Index
00018A94 317C 2188 0008             		move.w	#$2188,8(a0)
00018A9A 317C 0228 000C             		move.w	#$228,$C(a0)
00018AA0 3168 0008 0030             		move.w	8(a0),$30(a0)
00018AA6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018AAC 117C 000F 0020             		move.b	#$F,$20(a0)
00018AB2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018AB8 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018ABC 2248                       		movea.l	a0,a1
00018ABE 7203                       		moveq	#3,d1
00018AC0 6000                       		bra.s	Obj7A_LoadBoss
00018AC2                            ; ===========================================================================
00018AC2                            
00018AC2                            Obj7A_Loop:
00018AC2 4EB9 0000 DC10             		jsr	SingleObjLoad2
00018AC8 6600                       		bne.s	loc_1895C
00018ACA 12BC 007A                  		move.b	#$7A,0(a1)
00018ACE 3368 0008 0008             		move.w	8(a0),8(a1)
00018AD4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018ADA                            
00018ADA                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018ADA 08A8 0000 0022             		bclr	#0,$22(a0)
00018AE0 4229 0025                  		clr.b	$25(a1)
00018AE4 135A 0024                  		move.b	(a2)+,$24(a1)
00018AE8 135A 001C                  		move.b	(a2)+,$1C(a1)
00018AEC 135A 0018                  		move.b	(a2)+,$18(a1)
00018AF0 237C 0001 7ECA 0004        		move.l	#Map_Eggman,4(a1)
00018AF8 337C 0400 0002             		move.w	#$400,2(a1)
00018AFE 137C 0004 0001             		move.b	#4,1(a1)
00018B04 137C 0020 0019             		move.b	#$20,$19(a1)
00018B0A 2348 0034                  		move.l	a0,$34(a1)
00018B0E 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018B12                            
00018B12                            loc_1895C:
00018B12 43F8 D040                  		lea	($FFFFD040).w,a1
00018B16 45E8 002A                  		lea	$2A(a0),a2
00018B1A 705E                       		moveq	#$5E,d0
00018B1C 723E                       		moveq	#$3E,d1
00018B1E                            
00018B1E                            loc_18968:
00018B1E B011                       		cmp.b	(a1),d0
00018B20 6600                       		bne.s	loc_18974
00018B22 4A29 0028                  		tst.b	$28(a1)
00018B26 6700                       		beq.s	loc_18974
00018B28 34C9                       		move.w	a1,(a2)+
00018B2A                            
00018B2A                            loc_18974:
00018B2A D2FC 0040                  		adda.w	#$40,a1
00018B2E 51C9 FFEE                  		dbf	d1,loc_18968
00018B32                            
00018B32                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018B32 7000                       		moveq	#0,d0
00018B34 1028 0025                  		move.b	$25(a0),d0
00018B38 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018B3C 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018B40 43F9 0001 7E7A             		lea	(Ani_Eggman).l,a1
00018B46 4EB9 0000 A826             		jsr	AnimateSprite
00018B4C 7003                       		moveq	#3,d0
00018B4E C028 0022                  		and.b	$22(a0),d0
00018B52 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018B58 8128 0001                  		or.b	d0,1(a0)
00018B5C 4EF9 0000 D774             		jmp	DisplaySprite
00018B62                            ; ===========================================================================
00018B62 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018B64 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018B66 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018B68 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018B6A 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018B6C 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018B6E                            ; ===========================================================================
00018B6E                            
00018B6E                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018B6E 317C FF00 0010             		move.w	#-$100,$10(a0)
00018B74 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018B7A 6400                       		bcc.s	loc_189CA
00018B7C 5428 0025                  		addq.b	#2,$25(a0)
00018B80                            
00018B80                            loc_189CA:
00018B80 6100 EEE8                  		bsr.w	BossMove
00018B84 1028 003F                  		move.b	$3F(a0),d0
00018B88 5428 003F                  		addq.b	#2,$3F(a0)
00018B8C 4EB9 0000 29DA             		jsr	(CalcSine).l
00018B92 EC40                       		asr.w	#6,d0
00018B94 D068 0038                  		add.w	$38(a0),d0
00018B98 3140 000C                  		move.w	d0,$C(a0)
00018B9C 3168 0030 0008             		move.w	$30(a0),8(a0)
00018BA2 6000                       		bra.s	loc_189FE
00018BA4                            ; ===========================================================================
00018BA4                            
00018BA4                            loc_189EE:
00018BA4 6100 EEC4                  		bsr.w	BossMove
00018BA8 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018BAE 3168 0030 0008             		move.w	$30(a0),8(a0)
00018BB4                            
00018BB4                            loc_189FE:
00018BB4 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00018BBA 6400                       		bcc.s	locret_18A44
00018BBC 4A28 0022                  		tst.b	$22(a0)
00018BC0 6B00                       		bmi.s	loc_18A46
00018BC2 4A28 0020                  		tst.b	$20(a0)
00018BC6 6600                       		bne.s	locret_18A44
00018BC8 4A28 003E                  		tst.b	$3E(a0)
00018BCC 6600                       		bne.s	loc_18A28
00018BCE 117C 0020 003E             		move.b	#$20,$3E(a0)
00018BD4 303C 00AC                  		move.w	#$AC,d0
00018BD8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018BDE                            
00018BDE                            loc_18A28:
00018BDE 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018BE2 7000                       		moveq	#0,d0
00018BE4 4A51                       		tst.w	(a1)
00018BE6 6600                       		bne.s	loc_18A36
00018BE8 303C 0EEE                  		move.w	#$EEE,d0
00018BEC                            
00018BEC                            loc_18A36:
00018BEC 3280                       		move.w	d0,(a1)
00018BEE 5328 003E                  		subq.b	#1,$3E(a0)
00018BF2 6600                       		bne.s	locret_18A44
00018BF4 117C 000F 0020             		move.b	#$F,$20(a0)
00018BFA                            
00018BFA                            locret_18A44:
00018BFA 4E75                       		rts	
00018BFC                            ; ===========================================================================
00018BFC                            
00018BFC                            loc_18A46:
00018BFC 7064                       		moveq	#100,d0
00018BFE 6100 0000                  		bsr.w	AddPoints
00018C02 117C 0006 0025             		move.b	#6,$25(a0)
00018C08 117C 0078 003C             		move.b	#$78,$3C(a0)
00018C0E 4268 0010                  		clr.w	$10(a0)
00018C12 4E75                       		rts	
00018C14                            ; ===========================================================================
00018C14                            
00018C14                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00018C14 3028 0030                  		move.w	$30(a0),d0
00018C18 317C 0200 0010             		move.w	#$200,$10(a0)
00018C1E 0828 0000 0022             		btst	#0,$22(a0)
00018C24 6600                       		bne.s	loc_18A7C
00018C26 4468 0010                  		neg.w	$10(a0)
00018C2A 0C40 2008                  		cmpi.w	#$2008,d0
00018C2E 6E00                       		bgt.s	loc_18A88
00018C30 6000                       		bra.s	loc_18A82
00018C32                            ; ===========================================================================
00018C32                            
00018C32                            loc_18A7C:
00018C32 0C40 2138                  		cmpi.w	#$2138,d0
00018C36 6D00                       		blt.s	loc_18A88
00018C38                            
00018C38                            loc_18A82:
00018C38 0868 0000 0022             		bchg	#0,$22(a0)
00018C3E                            
00018C3E                            loc_18A88:
00018C3E 3028 0008                  		move.w	8(a0),d0
00018C42 72FF                       		moveq	#-1,d1
00018C44 7402                       		moveq	#2,d2
00018C46 45E8 002A                  		lea	$2A(a0),a2
00018C4A 7828                       		moveq	#$28,d4
00018C4C 4A68 0010                  		tst.w	$10(a0)
00018C50 6A00                       		bpl.s	loc_18A9E
00018C52 4444                       		neg.w	d4
00018C54                            
00018C54                            loc_18A9E:
00018C54 321A                       		move.w	(a2)+,d1
00018C56 2641                       		movea.l	d1,a3
00018C58 082B 0003 0022             		btst	#3,$22(a3)
00018C5E 6600                       		bne.s	loc_18AB4
00018C60 362B 0008                  		move.w	8(a3),d3
00018C64 D644                       		add.w	d4,d3
00018C66 9640                       		sub.w	d0,d3
00018C68 6700                       		beq.s	loc_18AC0
00018C6A                            
00018C6A                            loc_18AB4:
00018C6A 51CA FFE8                  		dbf	d2,loc_18A9E
00018C6E                            
00018C6E 1142 0028                  		move.b	d2,$28(a0)
00018C72 6000 FF0C                  		bra.w	loc_189CA
00018C76                            ; ===========================================================================
00018C76                            
00018C76                            loc_18AC0:
00018C76 1142 0028                  		move.b	d2,$28(a0)
00018C7A 5428 0025                  		addq.b	#2,$25(a0)
00018C7E 117C 0028 003C             		move.b	#$28,$3C(a0)
00018C84 6000 FEFA                  		bra.w	loc_189CA
00018C88                            ; ===========================================================================
00018C88                            
00018C88                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00018C88 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00018C8E 6600                       		bne.s	loc_18B36
00018C90 70FF                       		moveq	#-1,d0
00018C92 1028 0028                  		move.b	$28(a0),d0
00018C96 4880                       		ext.w	d0
00018C98 6B00                       		bmi.s	loc_18B40
00018C9A 5540                       		subq.w	#2,d0
00018C9C 4440                       		neg.w	d0
00018C9E D040                       		add.w	d0,d0
00018CA0 43E8 002A                  		lea	$2A(a0),a1
00018CA4 3031 0000                  		move.w	(a1,d0.w),d0
00018CA8 2440                       		movea.l	d0,a2
00018CAA 43F8 D040                  		lea	($FFFFD040).w,a1
00018CAE 723E                       		moveq	#$3E,d1
00018CB0                            
00018CB0                            loc_18AFA:
00018CB0 B0A9 003C                  		cmp.l	$3C(a1),d0
00018CB4 6700                       		beq.s	loc_18B40
00018CB6 D2FC 0040                  		adda.w	#$40,a1
00018CBA 51C9 FFF4                  		dbf	d1,loc_18AFA
00018CBE                            
00018CBE 2F08                       		move.l	a0,-(sp)
00018CC0 41D2                       		lea	(a2),a0
00018CC2 4EB9 0000 DC10             		jsr	SingleObjLoad2
00018CC8 205F                       		movea.l	(sp)+,a0
00018CCA 6600                       		bne.s	loc_18B40
00018CCC 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00018CD0 3368 0008 0008             		move.w	8(a0),8(a1)
00018CD6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018CDC 0669 0020 000C             		addi.w	#$20,$C(a1)
00018CE2 136A 0022 0022             		move.b	$22(a2),$22(a1)
00018CE8 234A 003C                  		move.l	a2,$3C(a1)
00018CEC                            
00018CEC                            loc_18B36:
00018CEC 5328 003C                  		subq.b	#1,$3C(a0)
00018CF0 6700                       		beq.s	loc_18B40
00018CF2 6000 FEC0                  		bra.w	loc_189FE
00018CF6                            ; ===========================================================================
00018CF6                            
00018CF6                            loc_18B40:
00018CF6 5528 0025                  		subq.b	#2,$25(a0)
00018CFA 6000 FE84                  		bra.w	loc_189CA
00018CFE                            ; ===========================================================================
00018CFE                            
00018CFE                            loc_18B48:				; XREF: Obj7A_ShipIndex
00018CFE 5328 003C                  		subq.b	#1,$3C(a0)
00018D02 6B00                       		bmi.s	loc_18B52
00018D04 6000 ED22                  		bra.w	BossDefeated
00018D08                            ; ===========================================================================
00018D08                            
00018D08                            loc_18B52:
00018D08 5428 0025                  		addq.b	#2,$25(a0)
00018D0C 4268 0012                  		clr.w	$12(a0)
00018D10 08E8 0000 0022             		bset	#0,$22(a0)
00018D16 08A8 0007 0022             		bclr	#7,$22(a0)
00018D1C 4268 0010                  		clr.w	$10(a0)
00018D20 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00018D26 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018D2A 6600                       		bne.s	loc_18B7C
00018D2C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018D32                            
00018D32                            loc_18B7C:
00018D32 6000 FE80                  		bra.w	loc_189FE
00018D36                            ; ===========================================================================
00018D36                            
00018D36                            loc_18B80:				; XREF: Obj7A_ShipIndex
00018D36 5228 003C                  		addq.b	#1,$3C(a0)
00018D3A 6700                       		beq.s	loc_18B90
00018D3C 6A00                       		bpl.s	loc_18B96
00018D3E 0668 0018 0012             		addi.w	#$18,$12(a0)
00018D44 6000                       		bra.s	loc_18BC2
00018D46                            ; ===========================================================================
00018D46                            
00018D46                            loc_18B90:
00018D46 4268 0012                  		clr.w	$12(a0)
00018D4A 6000                       		bra.s	loc_18BC2
00018D4C                            ; ===========================================================================
00018D4C                            
00018D4C                            loc_18B96:
00018D4C 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00018D52 6500                       		bcs.s	loc_18BAE
00018D54 6700                       		beq.s	loc_18BB4
00018D56 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00018D5C 6500                       		bcs.s	loc_18BC2
00018D5E 5428 0025                  		addq.b	#2,$25(a0)
00018D62 6000                       		bra.s	loc_18BC2
00018D64                            ; ===========================================================================
00018D64                            
00018D64                            loc_18BAE:
00018D64 5168 0012                  		subq.w	#8,$12(a0)
00018D68 6000                       		bra.s	loc_18BC2
00018D6A                            ; ===========================================================================
00018D6A                            
00018D6A                            loc_18BB4:
00018D6A 4268 0012                  		clr.w	$12(a0)
00018D6E 303C 0084                  		move.w	#$84,d0
00018D72 4EB9 0000 1396             		jsr	(PlaySound).l	; play SLZ music
00018D78                            
00018D78                            loc_18BC2:
00018D78 6000 FE2A                  		bra.w	loc_189EE
00018D7C                            ; ===========================================================================
00018D7C                            
00018D7C                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00018D7C 317C 0400 0010             		move.w	#$400,$10(a0)
00018D82 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018D88 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00018D8E 6400                       		bcc.s	loc_18BE0
00018D90 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018D94 6000                       		bra.s	loc_18BE8
00018D96                            ; ===========================================================================
00018D96                            
00018D96                            loc_18BE0:
00018D96 4A28 0001                  		tst.b	1(a0)
00018D9A 6A00 FCCE                  		bpl.w	Obj7A_Delete
00018D9E                            
00018D9E                            loc_18BE8:
00018D9E 6100 ECCA                  		bsr.w	BossMove
00018DA2 6000 FDDC                  		bra.w	loc_189CA
00018DA6                            ; ===========================================================================
00018DA6                            
00018DA6                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00018DA6 7000                       		moveq	#0,d0
00018DA8 7201                       		moveq	#1,d1
00018DAA 2268 0034                  		movea.l	$34(a0),a1
00018DAE 1029 0025                  		move.b	$25(a1),d0
00018DB2 0C00 0006                  		cmpi.b	#6,d0
00018DB6 6B00                       		bmi.s	loc_18C06
00018DB8 720A                       		moveq	#$A,d1
00018DBA 6000                       		bra.s	loc_18C1A
00018DBC                            ; ===========================================================================
00018DBC                            
00018DBC                            loc_18C06:
00018DBC 4A29 0020                  		tst.b	$20(a1)
00018DC0 6600                       		bne.s	loc_18C10
00018DC2 7205                       		moveq	#5,d1
00018DC4 6000                       		bra.s	loc_18C1A
00018DC6                            ; ===========================================================================
00018DC6                            
00018DC6                            loc_18C10:
00018DC6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018DCC 6500                       		bcs.s	loc_18C1A
00018DCE 7204                       		moveq	#4,d1
00018DD0                            
00018DD0                            loc_18C1A:
00018DD0 1141 001C                  		move.b	d1,$1C(a0)
00018DD4 0C00 000A                  		cmpi.b	#$A,d0
00018DD8 6600                       		bne.s	loc_18C32
00018DDA 117C 0006 001C             		move.b	#6,$1C(a0)
00018DE0 4A28 0001                  		tst.b	1(a0)
00018DE4 6A00 FC84                  		bpl.w	Obj7A_Delete
00018DE8                            
00018DE8                            loc_18C32:
00018DE8 6000                       		bra.s	loc_18C6C
00018DEA                            ; ===========================================================================
00018DEA                            
00018DEA                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00018DEA 117C 0008 001C             		move.b	#8,$1C(a0)
00018DF0 2268 0034                  		movea.l	$34(a0),a1
00018DF4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018DFA 6600                       		bne.s	loc_18C56
00018DFC 4A28 0001                  		tst.b	1(a0)
00018E00 6A00 FC68                  		bpl.w	Obj7A_Delete
00018E04 117C 000B 001C             		move.b	#$B,$1C(a0)
00018E0A 6000                       		bra.s	loc_18C6C
00018E0C                            ; ===========================================================================
00018E0C                            
00018E0C                            loc_18C56:
00018E0C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018E12 6E00                       		bgt.s	loc_18C6C
00018E14 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00018E1A 6D00                       		blt.s	loc_18C6C
00018E1C 117C 0007 001C             		move.b	#7,$1C(a0)
00018E22                            
00018E22                            loc_18C6C:
00018E22 43F9 0001 7E7A             		lea	(Ani_Eggman).l,a1
00018E28 4EB9 0000 A826             		jsr	AnimateSprite
00018E2E                            
00018E2E                            loc_18C78:
00018E2E 2268 0034                  		movea.l	$34(a0),a1
00018E32 3169 0008 0008             		move.w	8(a1),8(a0)
00018E38 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018E3E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018E44 7003                       		moveq	#3,d0
00018E46 C028 0022                  		and.b	$22(a0),d0
00018E4A 0228 00FC 0001             		andi.b	#-4,1(a0)
00018E50 8128 0001                  		or.b	d0,1(a0)
00018E54 4EF9 0000 D774             		jmp	DisplaySprite
00018E5A                            ; ===========================================================================
00018E5A                            
00018E5A                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00018E5A 2268 0034                  		movea.l	$34(a0),a1
00018E5E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018E64 6600                       		bne.s	loc_18CB8
00018E66 4A28 0001                  		tst.b	1(a0)
00018E6A 6A00 FBFE                  		bpl.w	Obj7A_Delete
00018E6E                            
00018E6E                            loc_18CB8:
00018E6E 217C 0001 7F92 0004        		move.l	#Map_BossItems,4(a0)
00018E76 317C 246C 0002             		move.w	#$246C,2(a0)
00018E7C 117C 0003 001A             		move.b	#3,$1A(a0)
00018E82 60AA                       		bra.s	loc_18C78
00018E84                            ; ===========================================================================
00018E84                            ; ---------------------------------------------------------------------------
00018E84                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00018E84                            ; ---------------------------------------------------------------------------
00018E84                            
00018E84                            Obj7B:					; XREF: Obj_Index
00018E84 7000                       		moveq	#0,d0
00018E86 1028 0024                  		move.b	$24(a0),d0
00018E8A 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00018E8E 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00018E92 3028 0030                  		move.w	$30(a0),d0
00018E96 0240 FF80                  		andi.w	#$FF80,d0
00018E9A 3238 F700                  		move.w	($FFFFF700).w,d1
00018E9E 0441 0080                  		subi.w	#$80,d1
00018EA2 0241 FF80                  		andi.w	#$FF80,d1
00018EA6 9041                       		sub.w	d1,d0
00018EA8 6B00 FBC0                  		bmi.w	Obj7A_Delete
00018EAC 0C40 0280                  		cmpi.w	#$280,d0
00018EB0 6200 FBB8                  		bhi.w	Obj7A_Delete
00018EB4 4EF9 0000 D774             		jmp	DisplaySprite
00018EBA                            ; ===========================================================================
00018EBA 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00018EBC 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00018EBE 0000                       		dc.w loc_18DC6-Obj7B_Index
00018EC0 0000                       		dc.w loc_18EAA-Obj7B_Index
00018EC2 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00018EC4 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00018EC6                            ; ===========================================================================
00018EC6                            
00018EC6                            Obj7B_Main:				; XREF: Obj7B_Index
00018EC6 217C 0001 1B42 0004        		move.l	#Map_obj5Ea,4(a0)
00018ECE 317C 0518 0002             		move.w	#$518,2(a0)
00018ED4 117C 0001 001A             		move.b	#1,$1A(a0)
00018EDA 0028 0004 0001             		ori.b	#4,1(a0)
00018EE0 117C 0004 0018             		move.b	#4,$18(a0)
00018EE6 117C 008B 0020             		move.b	#$8B,$20(a0)
00018EEC 117C 000C 0019             		move.b	#$C,$19(a0)
00018EF2 2268 003C                  		movea.l	$3C(a0),a1
00018EF6 3169 0008 0030             		move.w	8(a1),$30(a0)
00018EFC 3169 000C 0034             		move.w	$C(a1),$34(a0)
00018F02 08E8 0000 0022             		bset	#0,$22(a0)
00018F08 3028 0008                  		move.w	8(a0),d0
00018F0C B069 0008                  		cmp.w	8(a1),d0
00018F10 6E00                       		bgt.s	loc_18D68
00018F12 08A8 0000 0022             		bclr	#0,$22(a0)
00018F18 117C 0002 003A             		move.b	#2,$3A(a0)
00018F1E                            
00018F1E                            loc_18D68:
00018F1E 5428 0024                  		addq.b	#2,$24(a0)
00018F22                            
00018F22                            Obj7B_Fall:				; XREF: Obj7B_Index
00018F22 4EB9 0000 D722             		jsr	ObjectFall
00018F28 2268 003C                  		movea.l	$3C(a0),a1
00018F2C 45F9 0000 0000             		lea	(word_19018).l,a2
00018F32 7000                       		moveq	#0,d0
00018F34 1029 001A                  		move.b	$1A(a1),d0
00018F38 3228 0008                  		move.w	8(a0),d1
00018F3C 9268 0030                  		sub.w	$30(a0),d1
00018F40 6400                       		bcc.s	loc_18D8E
00018F42 5440                       		addq.w	#2,d0
00018F44                            
00018F44                            loc_18D8E:
00018F44 D040                       		add.w	d0,d0
00018F46 3228 0034                  		move.w	$34(a0),d1
00018F4A D272 0000                  		add.w	(a2,d0.w),d1
00018F4E B268 000C                  		cmp.w	$C(a0),d1
00018F52 6E00                       		bgt.s	locret_18DC4
00018F54 2268 003C                  		movea.l	$3C(a0),a1
00018F58 7202                       		moveq	#2,d1
00018F5A 0828 0000 0022             		btst	#0,$22(a0)
00018F60 6700                       		beq.s	loc_18DAE
00018F62 7200                       		moveq	#0,d1
00018F64                            
00018F64                            loc_18DAE:
00018F64 317C 00F0 0028             		move.w	#$F0,$28(a0)
00018F6A 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00018F70 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00018F76 6000 0000                  		bra.w	loc_18FA2
00018F7A                            ; ===========================================================================
00018F7A                            
00018F7A                            locret_18DC4:
00018F7A 4E75                       		rts	
00018F7C                            ; ===========================================================================
00018F7C                            
00018F7C                            loc_18DC6:				; XREF: Obj7B_Index
00018F7C 2268 003C                  		movea.l	$3C(a0),a1
00018F80 7000                       		moveq	#0,d0
00018F82 1028 003A                  		move.b	$3A(a0),d0
00018F86 9029 003A                  		sub.b	$3A(a1),d0
00018F8A 6700                       		beq.s	loc_18E2A
00018F8C 6400                       		bcc.s	loc_18DDA
00018F8E 4400                       		neg.b	d0
00018F90                            
00018F90                            loc_18DDA:
00018F90 323C F7E8                  		move.w	#-$818,d1
00018F94 343C FEEC                  		move.w	#-$114,d2
00018F98 0C00 0001                  		cmpi.b	#1,d0
00018F9C 6700                       		beq.s	loc_18E00
00018F9E 323C F6A0                  		move.w	#-$960,d1
00018FA2 343C FF0C                  		move.w	#-$F4,d2
00018FA6 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00018FAC 6D00                       		blt.s	loc_18E00
00018FAE 323C F5E0                  		move.w	#-$A20,d1
00018FB2 343C FF80                  		move.w	#-$80,d2
00018FB6                            
00018FB6                            loc_18E00:
00018FB6 3141 0012                  		move.w	d1,$12(a0)
00018FBA 3142 0010                  		move.w	d2,$10(a0)
00018FBE 3028 0008                  		move.w	8(a0),d0
00018FC2 9068 0030                  		sub.w	$30(a0),d0
00018FC6 6400                       		bcc.s	loc_18E16
00018FC8 4468 0010                  		neg.w	$10(a0)
00018FCC                            
00018FCC                            loc_18E16:
00018FCC 117C 0001 001A             		move.b	#1,$1A(a0)
00018FD2 317C 0020 0028             		move.w	#$20,$28(a0)
00018FD8 5428 0024                  		addq.b	#2,$24(a0)
00018FDC 6000 0000                  		bra.w	loc_18EAA
00018FE0                            ; ===========================================================================
00018FE0                            
00018FE0                            loc_18E2A:				; XREF: loc_18DC6
00018FE0 45F9 0000 0000             		lea	(word_19018).l,a2
00018FE6 7000                       		moveq	#0,d0
00018FE8 1029 001A                  		move.b	$1A(a1),d0
00018FEC 343C 0028                  		move.w	#$28,d2
00018FF0 3228 0008                  		move.w	8(a0),d1
00018FF4 9268 0030                  		sub.w	$30(a0),d1
00018FF8 6400                       		bcc.s	loc_18E48
00018FFA 4442                       		neg.w	d2
00018FFC 5440                       		addq.w	#2,d0
00018FFE                            
00018FFE                            loc_18E48:
00018FFE D040                       		add.w	d0,d0
00019000 3228 0034                  		move.w	$34(a0),d1
00019004 D272 0000                  		add.w	(a2,d0.w),d1
00019008 3141 000C                  		move.w	d1,$C(a0)
0001900C D468 0030                  		add.w	$30(a0),d2
00019010 3142 0008                  		move.w	d2,8(a0)
00019014 4268 000E                  		clr.w	$E(a0)
00019018 4268 000A                  		clr.w	$A(a0)
0001901C 5368 0028                  		subq.w	#1,$28(a0)
00019020 6600                       		bne.s	loc_18E7A
00019022 317C 0020 0028             		move.w	#$20,$28(a0)
00019028 117C 0008 0024             		move.b	#8,$24(a0)
0001902E 4E75                       		rts	
00019030                            ; ===========================================================================
00019030                            
00019030                            loc_18E7A:
00019030 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019036 6600                       		bne.s	loc_18E88
00019038 117C 0005 001F             		move.b	#5,$1F(a0)
0001903E                            
0001903E                            loc_18E88:
0001903E 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019044 6600                       		bne.s	loc_18E96
00019046 117C 0002 001F             		move.b	#2,$1F(a0)
0001904C                            
0001904C                            loc_18E96:
0001904C 5328 001E                  		subq.b	#1,$1E(a0)
00019050 6E00                       		bgt.s	locret_18EA8
00019052 0868 0000 001A             		bchg	#0,$1A(a0)
00019058 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001905E                            
0001905E                            locret_18EA8:
0001905E 4E75                       		rts	
00019060                            ; ===========================================================================
00019060                            
00019060                            loc_18EAA:				; XREF: Obj7B_Index
00019060 43F8 D040                  		lea	($FFFFD040).w,a1
00019064 707A                       		moveq	#$7A,d0
00019066 7240                       		moveq	#$40,d1
00019068 743E                       		moveq	#$3E,d2
0001906A                            
0001906A                            loc_18EB4:
0001906A B011                       		cmp.b	(a1),d0
0001906C 6700                       		beq.s	loc_18EC0
0001906E D2C1                       		adda.w	d1,a1
00019070 51CA FFF8                  		dbf	d2,loc_18EB4
00019074                            
00019074 6000                       		bra.s	loc_18F38
00019076                            ; ===========================================================================
00019076                            
00019076                            loc_18EC0:
00019076 3029 0008                  		move.w	8(a1),d0
0001907A 3229 000C                  		move.w	$C(a1),d1
0001907E 3428 0008                  		move.w	8(a0),d2
00019082 3628 000C                  		move.w	$C(a0),d3
00019086 45FA 0000                  		lea	byte_19022(pc),a2
0001908A 47FA 0000                  		lea	byte_19026(pc),a3
0001908E 181A                       		move.b	(a2)+,d4
00019090 4884                       		ext.w	d4
00019092 D044                       		add.w	d4,d0
00019094 181B                       		move.b	(a3)+,d4
00019096 4884                       		ext.w	d4
00019098 D444                       		add.w	d4,d2
0001909A B440                       		cmp.w	d0,d2
0001909C 6500                       		bcs.s	loc_18F38
0001909E 181A                       		move.b	(a2)+,d4
000190A0 4884                       		ext.w	d4
000190A2 D044                       		add.w	d4,d0
000190A4 181B                       		move.b	(a3)+,d4
000190A6 4884                       		ext.w	d4
000190A8 D444                       		add.w	d4,d2
000190AA B042                       		cmp.w	d2,d0
000190AC 6500                       		bcs.s	loc_18F38
000190AE 181A                       		move.b	(a2)+,d4
000190B0 4884                       		ext.w	d4
000190B2 D244                       		add.w	d4,d1
000190B4 181B                       		move.b	(a3)+,d4
000190B6 4884                       		ext.w	d4
000190B8 D644                       		add.w	d4,d3
000190BA B641                       		cmp.w	d1,d3
000190BC 6500                       		bcs.s	loc_18F38
000190BE 181A                       		move.b	(a2)+,d4
000190C0 4884                       		ext.w	d4
000190C2 D244                       		add.w	d4,d1
000190C4 181B                       		move.b	(a3)+,d4
000190C6 4884                       		ext.w	d4
000190C8 D644                       		add.w	d4,d3
000190CA B243                       		cmp.w	d3,d1
000190CC 6500                       		bcs.s	loc_18F38
000190CE 5428 0024                  		addq.b	#2,$24(a0)
000190D2 4268 0028                  		clr.w	$28(a0)
000190D6 4229 0020                  		clr.b	$20(a1)
000190DA 5329 0021                  		subq.b	#1,$21(a1)
000190DE 6600                       		bne.s	loc_18F38
000190E0 08E9 0007 0022             		bset	#7,$22(a1)
000190E6 4268 0010                  		clr.w	$10(a0)
000190EA 4268 0012                  		clr.w	$12(a0)
000190EE                            
000190EE                            loc_18F38:
000190EE 4A68 0012                  		tst.w	$12(a0)
000190F2 6A00                       		bpl.s	loc_18F5C
000190F4 4EB9 0000 D722             		jsr	ObjectFall
000190FA 3028 0034                  		move.w	$34(a0),d0
000190FE 0440 002F                  		subi.w	#$2F,d0
00019102 B068 000C                  		cmp.w	$C(a0),d0
00019106 6E00                       		bgt.s	loc_18F58
00019108 4EB9 0000 D722             		jsr	ObjectFall
0001910E                            
0001910E                            loc_18F58:
0001910E 6000 FF20                  		bra.w	loc_18E7A
00019112                            ; ===========================================================================
00019112                            
00019112                            loc_18F5C:
00019112 4EB9 0000 D722             		jsr	ObjectFall
00019118 2268 003C                  		movea.l	$3C(a0),a1
0001911C 45F9 0000 0000             		lea	(word_19018).l,a2
00019122 7000                       		moveq	#0,d0
00019124 1029 001A                  		move.b	$1A(a1),d0
00019128 3228 0008                  		move.w	8(a0),d1
0001912C 9268 0030                  		sub.w	$30(a0),d1
00019130 6400                       		bcc.s	loc_18F7E
00019132 5440                       		addq.w	#2,d0
00019134                            
00019134                            loc_18F7E:
00019134 D040                       		add.w	d0,d0
00019136 3228 0034                  		move.w	$34(a0),d1
0001913A D272 0000                  		add.w	(a2,d0.w),d1
0001913E B268 000C                  		cmp.w	$C(a0),d1
00019142 6ECA                       		bgt.s	loc_18F58
00019144 2268 003C                  		movea.l	$3C(a0),a1
00019148 7202                       		moveq	#2,d1
0001914A 4A68 0010                  		tst.w	$10(a0)
0001914E 6B00                       		bmi.s	loc_18F9C
00019150 7200                       		moveq	#0,d1
00019152                            
00019152                            loc_18F9C:
00019152 317C 0000 0028             		move.w	#0,$28(a0)
00019158                            
00019158                            loc_18FA2:
00019158 1341 003A                  		move.b	d1,$3A(a1)
0001915C 1141 003A                  		move.b	d1,$3A(a0)
00019160 B229 001A                  		cmp.b	$1A(a1),d1
00019164 6700                       		beq.s	loc_19008
00019166 08A9 0003 0022             		bclr	#3,$22(a1)
0001916C 6700                       		beq.s	loc_19008
0001916E 4229 0025                  		clr.b	$25(a1)
00019172 137C 0002 0024             		move.b	#2,$24(a1)
00019178 45F8 D000                  		lea	($FFFFD000).w,a2
0001917C 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019182 446A 0012                  		neg.w	$12(a2)
00019186 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001918C 6600                       		bne.s	loc_18FDC
0001918E E0EA 0012                  		asr	$12(a2)
00019192                            
00019192                            loc_18FDC:
00019192 08EA 0001 0022             		bset	#1,$22(a2)
00019198 08AA 0003 0022             		bclr	#3,$22(a2)
0001919E 422A 003C                  		clr.b	$3C(a2)
000191A2 2F08                       		move.l	a0,-(sp)
000191A4 41D2                       		lea	(a2),a0
000191A6 4EBA A3BA                  		jsr	Obj01_ChkRoll
000191AA 205F                       		movea.l	(sp)+,a0
000191AC 157C 0002 0024             		move.b	#2,$24(a2)
000191B2 303C 00CC                  		move.w	#$CC,d0
000191B6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "spring" sound
000191BC                            
000191BC                            loc_19008:
000191BC 4268 0010                  		clr.w	$10(a0)
000191C0 4268 0012                  		clr.w	$12(a0)
000191C4 5428 0024                  		addq.b	#2,$24(a0)
000191C8 6000 FE66                  		bra.w	loc_18E7A
000191CC                            ; ===========================================================================
000191CC FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000191D6                            		even
000191D6 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
000191DA                            		even
000191DA 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
000191DE                            		even
000191DE                            ; ===========================================================================
000191DE                            
000191DE                            Obj7B_Explode:				; XREF: Obj7B_Index
000191DE 10BC 003F                  		move.b	#$3F,(a0)
000191E2 4228 0024                  		clr.b	$24(a0)
000191E6 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
000191EC 6700                       		beq.s	Obj7B_MakeFrag
000191EE 4E75                       		rts	
000191F0                            ; ===========================================================================
000191F0                            
000191F0                            Obj7B_MakeFrag:
000191F0 3168 0034 000C             		move.w	$34(a0),$C(a0)
000191F6 7203                       		moveq	#3,d1
000191F8 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
000191FC                            
000191FC                            Obj7B_Loop:
000191FC 4EB9 0000 DBFA             		jsr	SingleObjLoad
00019202 6600                       		bne.s	loc_1909A
00019204 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019208 137C 000A 0024             		move.b	#$A,$24(a1)
0001920E 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019216 137C 0003 0018             		move.b	#3,$18(a1)
0001921C 337C 0518 0002             		move.w	#$518,2(a1)
00019222 3368 0008 0008             		move.w	8(a0),8(a1)
00019228 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001922E 335A 0010                  		move.w	(a2)+,$10(a1)
00019232 335A 0012                  		move.w	(a2)+,$12(a1)
00019236 137C 0098 0020             		move.b	#$98,$20(a1)
0001923C 0029 0004 0001             		ori.b	#4,1(a1)
00019242 08E9 0007 0001             		bset	#7,1(a1)
00019248 137C 000C 0019             		move.b	#$C,$19(a1)
0001924E                            
0001924E                            loc_1909A:
0001924E 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019252                            
00019252 4E75                       		rts	
00019254                            ; ===========================================================================
00019254 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019258 FF60 FDC0                  		dc.w $FF60, $FDC0
0001925C 0100 FCC0                  		dc.w $100, $FCC0
00019260 00A0 FDC0                  		dc.w $A0, $FDC0
00019264                            ; ===========================================================================
00019264                            
00019264                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019264 4EB9 0000 D74E             		jsr	SpeedToPos
0001926A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019270 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019276 0668 0018 0012             		addi.w	#$18,$12(a0)
0001927C 7004                       		moveq	#4,d0
0001927E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019282 E448                       		lsr.w	#2,d0
00019284 1140 001A                  		move.b	d0,$1A(a0)
00019288 4A28 0001                  		tst.b	1(a0)
0001928C 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019290 4E75                       		rts	
00019292                            ; ===========================================================================
00019292                            ; ---------------------------------------------------------------------------
00019292                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019292                            ; ---------------------------------------------------------------------------
00019292                            Map_obj7B:
00019292                            	include "_maps\obj7B.asm"
00019292                            ; ---------------------------------------------------------------------------
00019292                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019292                            ; ---------------------------------------------------------------------------
00019292 0000                       		dc.w byte_190E2-Map_obj7B
00019294 0000                       		dc.w byte_190E8-Map_obj7B
00019296 01                         byte_190E2:	dc.b 1
00019297 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001929C 01                         byte_190E8:	dc.b 1
0001929D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000192A2                            		even
000192A2                            		even
000192A2                            
000192A2                            ; ===========================================================================
000192A2                            ; ---------------------------------------------------------------------------
000192A2                            ; Object 75 - Eggman (SYZ)
000192A2                            ; ---------------------------------------------------------------------------
000192A2                            
000192A2                            Obj75:					; XREF: Obj_Index
000192A2 7000                       		moveq	#0,d0
000192A4 1028 0024                  		move.b	$24(a0),d0
000192A8 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000192AC 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
000192B0                            ; ===========================================================================
000192B0 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
000192B2 0000                       		dc.w Obj75_ShipMain-Obj75_Index
000192B4 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000192B6 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000192B8 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000192BA                            
000192BA 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000192BD 0401 05                    		dc.b 4,	1, 5
000192C0 0607 05                    		dc.b 6,	7, 5
000192C3 0800 05                    		dc.b 8,	0, 5
000192C6                            ; ===========================================================================
000192C6                            
000192C6                            Obj75_Main:				; XREF: Obj75_Index
000192C6 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
000192CC 317C 04DA 000C             		move.w	#$4DA,$C(a0)
000192D2 3168 0008 0030             		move.w	8(a0),$30(a0)
000192D8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000192DE 117C 000F 0020             		move.b	#$F,$20(a0)
000192E4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000192EA 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
000192EE 2248                       		movea.l	a0,a1
000192F0 7203                       		moveq	#3,d1
000192F2 6000                       		bra.s	Obj75_LoadBoss
000192F4                            ; ===========================================================================
000192F4                            
000192F4                            Obj75_Loop:
000192F4 4EB9 0000 DC10             		jsr	SingleObjLoad2
000192FA 6600                       		bne.s	Obj75_ShipMain
000192FC 12BC 0075                  		move.b	#$75,(a1)
00019300 3368 0008 0008             		move.w	8(a0),8(a1)
00019306 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001930C                            
0001930C                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001930C 08A8 0000 0022             		bclr	#0,$22(a0)
00019312 4229 0025                  		clr.b	$25(a1)
00019316 135A 0024                  		move.b	(a2)+,$24(a1)
0001931A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001931E 135A 0018                  		move.b	(a2)+,$18(a1)
00019322 237C 0001 7ECA 0004        		move.l	#Map_Eggman,4(a1)
0001932A 337C 0400 0002             		move.w	#$400,2(a1)
00019330 137C 0004 0001             		move.b	#4,1(a1)
00019336 137C 0020 0019             		move.b	#$20,$19(a1)
0001933C 2348 0034                  		move.l	a0,$34(a1)
00019340 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019344                            
00019344                            Obj75_ShipMain:				; XREF: Obj75_Index
00019344 7000                       		moveq	#0,d0
00019346 1028 0025                  		move.b	$25(a0),d0
0001934A 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001934E 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019352 43F9 0001 7E7A             		lea	(Ani_Eggman).l,a1
00019358 4EB9 0000 A826             		jsr	AnimateSprite
0001935E 7003                       		moveq	#3,d0
00019360 C028 0022                  		and.b	$22(a0),d0
00019364 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001936A 8128 0001                  		or.b	d0,1(a0)
0001936E 4EF9 0000 D774             		jmp	DisplaySprite
00019374                            ; ===========================================================================
00019374 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019378 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001937C 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019380                            ; ===========================================================================
00019380                            
00019380                            loc_191CC:				; XREF: Obj75_ShipIndex
00019380 317C FF00 0010             		move.w	#-$100,$10(a0)
00019386 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001938C 6400                       		bcc.s	loc_191DE
0001938E 5428 0025                  		addq.b	#2,$25(a0)
00019392                            
00019392                            loc_191DE:
00019392 1028 003F                  		move.b	$3F(a0),d0
00019396 5428 003F                  		addq.b	#2,$3F(a0)
0001939A 4EB9 0000 29DA             		jsr	(CalcSine).l
000193A0 E440                       		asr.w	#2,d0
000193A2 3140 0012                  		move.w	d0,$12(a0)
000193A6                            
000193A6                            loc_191F2:
000193A6 6100 E6C2                  		bsr.w	BossMove
000193AA 3168 0038 000C             		move.w	$38(a0),$C(a0)
000193B0 3168 0030 0008             		move.w	$30(a0),8(a0)
000193B6                            
000193B6                            loc_19202:
000193B6 3028 0008                  		move.w	8(a0),d0
000193BA 0440 2C00                  		subi.w	#$2C00,d0
000193BE EA48                       		lsr.w	#5,d0
000193C0 1140 0034                  		move.b	d0,$34(a0)
000193C4 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000193CA 6400                       		bcc.s	locret_19256
000193CC 4A28 0022                  		tst.b	$22(a0)
000193D0 6B00                       		bmi.s	loc_19258
000193D2 4A28 0020                  		tst.b	$20(a0)
000193D6 6600                       		bne.s	locret_19256
000193D8 4A28 003E                  		tst.b	$3E(a0)
000193DC 6600                       		bne.s	loc_1923A
000193DE 117C 0020 003E             		move.b	#$20,$3E(a0)
000193E4 303C 00AC                  		move.w	#$AC,d0
000193E8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
000193EE                            
000193EE                            loc_1923A:
000193EE 43F8 FB22                  		lea	($FFFFFB22).w,a1
000193F2 7000                       		moveq	#0,d0
000193F4 4A51                       		tst.w	(a1)
000193F6 6600                       		bne.s	loc_19248
000193F8 303C 0EEE                  		move.w	#$EEE,d0
000193FC                            
000193FC                            loc_19248:
000193FC 3280                       		move.w	d0,(a1)
000193FE 5328 003E                  		subq.b	#1,$3E(a0)
00019402 6600                       		bne.s	locret_19256
00019404 117C 000F 0020             		move.b	#$F,$20(a0)
0001940A                            
0001940A                            locret_19256:
0001940A 4E75                       		rts	
0001940C                            ; ===========================================================================
0001940C                            
0001940C                            loc_19258:				; XREF: loc_19202
0001940C 7064                       		moveq	#100,d0
0001940E 6100 0000                  		bsr.w	AddPoints
00019412 117C 0006 0025             		move.b	#6,$25(a0)
00019418 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001941E 4268 0010                  		clr.w	$10(a0)
00019422 4E75                       		rts	
00019424                            ; ===========================================================================
00019424                            
00019424                            loc_19270:				; XREF: Obj75_ShipIndex
00019424 3028 0030                  		move.w	$30(a0),d0
00019428 317C 0140 0010             		move.w	#$140,$10(a0)
0001942E 0828 0000 0022             		btst	#0,$22(a0)
00019434 6600                       		bne.s	loc_1928E
00019436 4468 0010                  		neg.w	$10(a0)
0001943A 0C40 2C08                  		cmpi.w	#$2C08,d0
0001943E 6E00                       		bgt.s	loc_1929E
00019440 6000                       		bra.s	loc_19294
00019442                            ; ===========================================================================
00019442                            
00019442                            loc_1928E:
00019442 0C40 2D38                  		cmpi.w	#$2D38,d0
00019446 6D00                       		blt.s	loc_1929E
00019448                            
00019448                            loc_19294:
00019448 0868 0000 0022             		bchg	#0,$22(a0)
0001944E 4228 003D                  		clr.b	$3D(a0)
00019452                            
00019452                            loc_1929E:
00019452 0440 2C10                  		subi.w	#$2C10,d0
00019456 0240 001F                  		andi.w	#$1F,d0
0001945A 0440 001F                  		subi.w	#$1F,d0
0001945E 6A00                       		bpl.s	loc_192AE
00019460 4440                       		neg.w	d0
00019462                            
00019462                            loc_192AE:
00019462 5340                       		subq.w	#1,d0
00019464 6E00                       		bgt.s	loc_192E8
00019466 4A28 003D                  		tst.b	$3D(a0)
0001946A 6600                       		bne.s	loc_192E8
0001946C 3238 D008                  		move.w	($FFFFD008).w,d1
00019470 0441 2C00                  		subi.w	#$2C00,d1
00019474 EA41                       		asr.w	#5,d1
00019476 B228 0034                  		cmp.b	$34(a0),d1
0001947A 6600                       		bne.s	loc_192E8
0001947C 7000                       		moveq	#0,d0
0001947E 1028 0034                  		move.b	$34(a0),d0
00019482 EB40                       		asl.w	#5,d0
00019484 0640 2C10                  		addi.w	#$2C10,d0
00019488 3140 0030                  		move.w	d0,$30(a0)
0001948C 6100 0000                  		bsr.w	Obj75_FindBlocks
00019490 5428 0025                  		addq.b	#2,$25(a0)
00019494 4268 0028                  		clr.w	$28(a0)
00019498 4268 0010                  		clr.w	$10(a0)
0001949C                            
0001949C                            loc_192E8:
0001949C 6000 FEF4                  		bra.w	loc_191DE
000194A0                            ; ===========================================================================
000194A0                            
000194A0                            loc_192EC:				; XREF: Obj75_ShipIndex
000194A0 7000                       		moveq	#0,d0
000194A2 1028 0028                  		move.b	$28(a0),d0
000194A6 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
000194AA 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
000194AE                            ; ===========================================================================
000194AE 0000                       off_192FA:	dc.w loc_19302-off_192FA
000194B0 0000                       		dc.w loc_19348-off_192FA
000194B2 0000                       		dc.w loc_1938E-off_192FA
000194B4 0000                       		dc.w loc_193D0-off_192FA
000194B6                            ; ===========================================================================
000194B6                            
000194B6                            loc_19302:				; XREF: off_192FA
000194B6 317C 0180 0012             		move.w	#$180,$12(a0)
000194BC 3028 0038                  		move.w	$38(a0),d0
000194C0 0C40 0556                  		cmpi.w	#$556,d0
000194C4 6500                       		bcs.s	loc_19344
000194C6 317C 0556 0038             		move.w	#$556,$38(a0)
000194CC 4268 003C                  		clr.w	$3C(a0)
000194D0 70FF                       		moveq	#-1,d0
000194D2 3028 0036                  		move.w	$36(a0),d0
000194D6 6700                       		beq.s	loc_1933C
000194D8 2240                       		movea.l	d0,a1
000194DA 137C 00FF 0029             		move.b	#-1,$29(a1)
000194E0 117C 00FF 0029             		move.b	#-1,$29(a0)
000194E6 2348 0034                  		move.l	a0,$34(a1)
000194EA 317C 0032 003C             		move.w	#$32,$3C(a0)
000194F0                            
000194F0                            loc_1933C:
000194F0 4268 0012                  		clr.w	$12(a0)
000194F4 5428 0028                  		addq.b	#2,$28(a0)
000194F8                            
000194F8                            loc_19344:
000194F8 6000 FEAC                  		bra.w	loc_191F2
000194FC                            ; ===========================================================================
000194FC                            
000194FC                            loc_19348:				; XREF: off_192FA
000194FC 5368 003C                  		subq.w	#1,$3C(a0)
00019500 6A00                       		bpl.s	loc_19366
00019502 5428 0028                  		addq.b	#2,$28(a0)
00019506 317C F800 0012             		move.w	#-$800,$12(a0)
0001950C 4A68 0036                  		tst.w	$36(a0)
00019510 6600                       		bne.s	loc_19362
00019512 E0E8 0012                  		asr	$12(a0)
00019516                            
00019516                            loc_19362:
00019516 7000                       		moveq	#0,d0
00019518 6000                       		bra.s	loc_1937C
0001951A                            ; ===========================================================================
0001951A                            
0001951A                            loc_19366:
0001951A 7000                       		moveq	#0,d0
0001951C 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019522 6E00                       		bgt.s	loc_1937C
00019524 7002                       		moveq	#2,d0
00019526 0828 0001 003D             		btst	#1,$3D(a0)
0001952C 6700                       		beq.s	loc_1937C
0001952E 4440                       		neg.w	d0
00019530                            
00019530                            loc_1937C:
00019530 D068 0038                  		add.w	$38(a0),d0
00019534 3140 000C                  		move.w	d0,$C(a0)
00019538 3168 0030 0008             		move.w	$30(a0),8(a0)
0001953E 6000 FE76                  		bra.w	loc_19202
00019542                            ; ===========================================================================
00019542                            
00019542                            loc_1938E:				; XREF: off_192FA
00019542 303C 04DA                  		move.w	#$4DA,d0
00019546 4A68 0036                  		tst.w	$36(a0)
0001954A 6700                       		beq.s	loc_1939C
0001954C 0440 0018                  		subi.w	#$18,d0
00019550                            
00019550                            loc_1939C:
00019550 B068 0038                  		cmp.w	$38(a0),d0
00019554 6D00                       		blt.s	loc_193BE
00019556 317C 0008 003C             		move.w	#8,$3C(a0)
0001955C 4A68 0036                  		tst.w	$36(a0)
00019560 6700                       		beq.s	loc_193B4
00019562 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019568                            
00019568                            loc_193B4:
00019568 5428 0028                  		addq.b	#2,$28(a0)
0001956C 4268 0012                  		clr.w	$12(a0)
00019570 6000                       		bra.s	loc_193CC
00019572                            ; ===========================================================================
00019572                            
00019572                            loc_193BE:
00019572 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019578 6C00                       		bge.s	loc_193CC
0001957A 0668 000C 0012             		addi.w	#$C,$12(a0)
00019580                            
00019580                            loc_193CC:
00019580 6000 FE24                  		bra.w	loc_191F2
00019584                            ; ===========================================================================
00019584                            
00019584                            loc_193D0:				; XREF: off_192FA
00019584 5368 003C                  		subq.w	#1,$3C(a0)
00019588 6E00                       		bgt.s	loc_19406
0001958A 6B00                       		bmi.s	loc_193EE
0001958C 70FF                       		moveq	#-1,d0
0001958E 3028 0036                  		move.w	$36(a0),d0
00019592 6700                       		beq.s	loc_193E8
00019594 2240                       		movea.l	d0,a1
00019596 137C 000A 0029             		move.b	#$A,$29(a1)
0001959C                            
0001959C                            loc_193E8:
0001959C 4268 0036                  		clr.w	$36(a0)
000195A0 6000                       		bra.s	loc_19406
000195A2                            ; ===========================================================================
000195A2                            
000195A2                            loc_193EE:
000195A2 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
000195A8 6600                       		bne.s	loc_19406
000195AA 4228 0029                  		clr.b	$29(a0)
000195AE 5528 0025                  		subq.b	#2,$25(a0)
000195B2 117C 00FF 003D             		move.b	#-1,$3D(a0)
000195B8 6000                       		bra.s	loc_19446
000195BA                            ; ===========================================================================
000195BA                            
000195BA                            loc_19406:
000195BA 7001                       		moveq	#1,d0
000195BC 4A68 0036                  		tst.w	$36(a0)
000195C0 6700                       		beq.s	loc_19410
000195C2 7002                       		moveq	#2,d0
000195C4                            
000195C4                            loc_19410:
000195C4 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
000195CA 6700                       		beq.s	loc_19424
000195CC 6D00                       		blt.s	loc_1941C
000195CE 4440                       		neg.w	d0
000195D0                            
000195D0                            loc_1941C:
000195D0 4A68 0036                  		tst.w	$36(a0)
000195D4 D168 0038                  		add.w	d0,$38(a0)
000195D8                            
000195D8                            loc_19424:
000195D8 7000                       		moveq	#0,d0
000195DA 4A68 0036                  		tst.w	$36(a0)
000195DE 6700                       		beq.s	loc_19438
000195E0 7002                       		moveq	#2,d0
000195E2 0828 0000 003D             		btst	#0,$3D(a0)
000195E8 6700                       		beq.s	loc_19438
000195EA 4440                       		neg.w	d0
000195EC                            
000195EC                            loc_19438:
000195EC D068 0038                  		add.w	$38(a0),d0
000195F0 3140 000C                  		move.w	d0,$C(a0)
000195F4 3168 0030 0008             		move.w	$30(a0),8(a0)
000195FA                            
000195FA                            loc_19446:
000195FA 6000 FDBA                  		bra.w	loc_19202
000195FE                            
000195FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000195FE                            
000195FE                            
000195FE                            Obj75_FindBlocks:			; XREF: loc_192AE
000195FE 4268 0036                  		clr.w	$36(a0)
00019602 43F8 D040                  		lea	($FFFFD040).w,a1
00019606 703E                       		moveq	#$3E,d0
00019608 7276                       		moveq	#$76,d1
0001960A 1428 0034                  		move.b	$34(a0),d2
0001960E                            
0001960E                            Obj75_FindLoop:
0001960E B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019610 6600                       		bne.s	loc_1946A	; if not, branch
00019612 B429 0028                  		cmp.b	$28(a1),d2
00019616 6600                       		bne.s	loc_1946A
00019618 3149 0036                  		move.w	a1,$36(a0)
0001961C 6000                       		bra.s	locret_19472
0001961E                            ; ===========================================================================
0001961E                            
0001961E                            loc_1946A:
0001961E 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019622 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019626                            
00019626                            locret_19472:
00019626 4E75                       		rts	
00019628                            ; End of function Obj75_FindBlocks
00019628                            
00019628                            ; ===========================================================================
00019628                            
00019628                            loc_19474:				; XREF: Obj75_ShipIndex
00019628 5368 003C                  		subq.w	#1,$3C(a0)
0001962C 6B00                       		bmi.s	loc_1947E
0001962E 6000 E3F8                  		bra.w	BossDefeated
00019632                            ; ===========================================================================
00019632                            
00019632                            loc_1947E:
00019632 5428 0025                  		addq.b	#2,$25(a0)
00019636 4268 0012                  		clr.w	$12(a0)
0001963A 08E8 0000 0022             		bset	#0,$22(a0)
00019640 08A8 0007 0022             		bclr	#7,$22(a0)
00019646 4268 0010                  		clr.w	$10(a0)
0001964A 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019650 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019654 6600                       		bne.s	loc_194A8
00019656 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001965C                            
0001965C                            loc_194A8:
0001965C 6000 FD58                  		bra.w	loc_19202
00019660                            ; ===========================================================================
00019660                            
00019660                            loc_194AC:				; XREF: Obj75_ShipIndex
00019660 5268 003C                  		addq.w	#1,$3C(a0)
00019664 6700                       		beq.s	loc_194BC
00019666 6A00                       		bpl.s	loc_194C2
00019668 0668 0018 0012             		addi.w	#$18,$12(a0)
0001966E 6000                       		bra.s	loc_194EE
00019670                            ; ===========================================================================
00019670                            
00019670                            loc_194BC:
00019670 4268 0012                  		clr.w	$12(a0)
00019674 6000                       		bra.s	loc_194EE
00019676                            ; ===========================================================================
00019676                            
00019676                            loc_194C2:
00019676 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001967C 6500                       		bcs.s	loc_194DA
0001967E 6700                       		beq.s	loc_194E0
00019680 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019686 6500                       		bcs.s	loc_194EE
00019688 5428 0025                  		addq.b	#2,$25(a0)
0001968C 6000                       		bra.s	loc_194EE
0001968E                            ; ===========================================================================
0001968E                            
0001968E                            loc_194DA:
0001968E 5168 0012                  		subq.w	#8,$12(a0)
00019692 6000                       		bra.s	loc_194EE
00019694                            ; ===========================================================================
00019694                            
00019694                            loc_194E0:
00019694 4268 0012                  		clr.w	$12(a0)
00019698 303C 0085                  		move.w	#$85,d0
0001969C 4EB9 0000 1396             		jsr	(PlaySound).l	; play SYZ music
000196A2                            
000196A2                            loc_194EE:
000196A2 6000 FD02                  		bra.w	loc_191F2
000196A6                            ; ===========================================================================
000196A6                            
000196A6                            loc_194F2:				; XREF: Obj75_ShipIndex
000196A6 317C 0400 0010             		move.w	#$400,$10(a0)
000196AC 317C FFC0 0012             		move.w	#-$40,$12(a0)
000196B2 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
000196B8 6400                       		bcc.s	loc_1950C
000196BA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000196BE 6000                       		bra.s	loc_19512
000196C0                            ; ===========================================================================
000196C0                            
000196C0                            loc_1950C:
000196C0 4A28 0001                  		tst.b	1(a0)
000196C4 6A00                       		bpl.s	Obj75_ShipDelete
000196C6                            
000196C6                            loc_19512:
000196C6 6100 E3A2                  		bsr.w	BossMove
000196CA 6000 FCC6                  		bra.w	loc_191DE
000196CE                            ; ===========================================================================
000196CE                            
000196CE                            Obj75_ShipDelete:
000196CE 4EF9 0000 D7B0             		jmp	DeleteObject
000196D4                            ; ===========================================================================
000196D4                            
000196D4                            Obj75_FaceMain:				; XREF: Obj75_Index
000196D4 7201                       		moveq	#1,d1
000196D6 2268 0034                  		movea.l	$34(a0),a1
000196DA 7000                       		moveq	#0,d0
000196DC 1029 0025                  		move.b	$25(a1),d0
000196E0 303B 0000                  		move.w	off_19546(pc,d0.w),d0
000196E4 4EBB 0000                  		jsr	off_19546(pc,d0.w)
000196E8 1141 001C                  		move.b	d1,$1C(a0)
000196EC 1010                       		move.b	(a0),d0
000196EE B011                       		cmp.b	(a1),d0
000196F0 6600                       		bne.s	Obj75_FaceDelete
000196F2 6000                       		bra.s	loc_195BE
000196F4                            ; ===========================================================================
000196F4                            
000196F4                            Obj75_FaceDelete:
000196F4 4EF9 0000 D7B0             		jmp	DeleteObject
000196FA                            ; ===========================================================================
000196FA 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
000196FE 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019702 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019706                            ; ===========================================================================
00019706                            
00019706                            loc_19552:				; XREF: off_19546
00019706 720A                       		moveq	#$A,d1
00019708 4E75                       		rts	
0001970A                            ; ===========================================================================
0001970A                            
0001970A                            loc_19556:				; XREF: off_19546
0001970A 7206                       		moveq	#6,d1
0001970C 4E75                       		rts	
0001970E                            ; ===========================================================================
0001970E                            
0001970E                            loc_1955A:				; XREF: off_19546
0001970E 7000                       		moveq	#0,d0
00019710 1029 0028                  		move.b	$28(a1),d0
00019714 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019718 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001971C                            ; ===========================================================================
0001971C 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019720 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019724                            ; ===========================================================================
00019724                            
00019724                            loc_19570:				; XREF: off_19568
00019724 6000                       		bra.s	loc_19574
00019726                            ; ===========================================================================
00019726                            
00019726                            loc_19572:				; XREF: off_19568
00019726 7206                       		moveq	#6,d1
00019728                            
00019728                            loc_19574:				; XREF: off_19546
00019728 4A29 0020                  		tst.b	$20(a1)
0001972C 6600                       		bne.s	loc_1957E
0001972E 7205                       		moveq	#5,d1
00019730 4E75                       		rts	
00019732                            ; ===========================================================================
00019732                            
00019732                            loc_1957E:
00019732 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019738 6500                       		bcs.s	locret_19588
0001973A 7204                       		moveq	#4,d1
0001973C                            
0001973C                            locret_19588:
0001973C 4E75                       		rts	
0001973E                            ; ===========================================================================
0001973E                            
0001973E                            Obj75_FlameMain:			; XREF: Obj75_Index
0001973E 117C 0007 001C             		move.b	#7,$1C(a0)
00019744 2268 0034                  		movea.l	$34(a0),a1
00019748 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001974E 6600                       		bne.s	loc_195AA
00019750 117C 000B 001C             		move.b	#$B,$1C(a0)
00019756 4A28 0001                  		tst.b	1(a0)
0001975A 6A00                       		bpl.s	Obj75_FlameDelete
0001975C 6000                       		bra.s	loc_195B6
0001975E                            ; ===========================================================================
0001975E                            
0001975E                            loc_195AA:
0001975E 4A69 0010                  		tst.w	$10(a1)
00019762 6700                       		beq.s	loc_195B6
00019764 117C 0008 001C             		move.b	#8,$1C(a0)
0001976A                            
0001976A                            loc_195B6:
0001976A 6000                       		bra.s	loc_195BE
0001976C                            ; ===========================================================================
0001976C                            
0001976C                            Obj75_FlameDelete:
0001976C 4EF9 0000 D7B0             		jmp	DeleteObject
00019772                            ; ===========================================================================
00019772                            
00019772                            loc_195BE:
00019772 43F9 0001 7E7A             		lea	(Ani_Eggman).l,a1
00019778 4EB9 0000 A826             		jsr	AnimateSprite
0001977E 2268 0034                  		movea.l	$34(a0),a1
00019782 3169 0008 0008             		move.w	8(a1),8(a0)
00019788 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001978E                            
0001978E                            loc_195DA:
0001978E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019794 7003                       		moveq	#3,d0
00019796 C028 0022                  		and.b	$22(a0),d0
0001979A 0228 00FC 0001             		andi.b	#$FC,1(a0)
000197A0 8128 0001                  		or.b	d0,1(a0)
000197A4 4EF9 0000 D774             		jmp	DisplaySprite
000197AA                            ; ===========================================================================
000197AA                            
000197AA                            Obj75_SpikeMain:			; XREF: Obj75_Index
000197AA 217C 0001 7F92 0004        		move.l	#Map_BossItems,4(a0)
000197B2 317C 246C 0002             		move.w	#$246C,2(a0)
000197B8 117C 0005 001A             		move.b	#5,$1A(a0)
000197BE 2268 0034                  		movea.l	$34(a0),a1
000197C2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000197C8 6600                       		bne.s	loc_1961C
000197CA 4A28 0001                  		tst.b	1(a0)
000197CE 6A00                       		bpl.s	Obj75_SpikeDelete
000197D0                            
000197D0                            loc_1961C:
000197D0 3169 0008 0008             		move.w	8(a1),8(a0)
000197D6 3169 000C 000C             		move.w	$C(a1),$C(a0)
000197DC 3028 003C                  		move.w	$3C(a0),d0
000197E0 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000197E6 6600                       		bne.s	loc_19652
000197E8 0C29 0006 0028             		cmpi.b	#6,$28(a1)
000197EE 6700                       		beq.s	loc_1964C
000197F0 4A29 0028                  		tst.b	$28(a1)
000197F4 6600                       		bne.s	loc_19658
000197F6 0C40 0094                  		cmpi.w	#$94,d0
000197FA 6C00                       		bge.s	loc_19658
000197FC 5E40                       		addq.w	#7,d0
000197FE 6000                       		bra.s	loc_19658
00019800                            ; ===========================================================================
00019800                            
00019800                            loc_1964C:
00019800 4A69 003C                  		tst.w	$3C(a1)
00019804 6A00                       		bpl.s	loc_19658
00019806                            
00019806                            loc_19652:
00019806 4A40                       		tst.w	d0
00019808 6F00                       		ble.s	loc_19658
0001980A 5B40                       		subq.w	#5,d0
0001980C                            
0001980C                            loc_19658:
0001980C 3140 003C                  		move.w	d0,$3C(a0)
00019810 E440                       		asr.w	#2,d0
00019812 D168 000C                  		add.w	d0,$C(a0)
00019816 117C 0008 0019             		move.b	#8,$19(a0)
0001981C 117C 000C 0016             		move.b	#$C,$16(a0)
00019822 4228 0020                  		clr.b	$20(a0)
00019826 2268 0034                  		movea.l	$34(a0),a1
0001982A 4A29 0020                  		tst.b	$20(a1)
0001982E 6700                       		beq.s	loc_19688
00019830 4A29 0029                  		tst.b	$29(a1)
00019834 6600                       		bne.s	loc_19688
00019836 117C 0084 0020             		move.b	#$84,$20(a0)
0001983C                            
0001983C                            loc_19688:
0001983C 6000 FF50                  		bra.w	loc_195DA
00019840                            ; ===========================================================================
00019840                            
00019840                            Obj75_SpikeDelete:
00019840 4EF9 0000 D7B0             		jmp	DeleteObject
00019846                            ; ===========================================================================
00019846                            ; ---------------------------------------------------------------------------
00019846                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019846                            ; ---------------------------------------------------------------------------
00019846                            
00019846                            Obj76:					; XREF: Obj_Index
00019846 7000                       		moveq	#0,d0
00019848 1028 0024                  		move.b	$24(a0),d0
0001984C 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019850 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019854                            ; ===========================================================================
00019854 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019856 0000                       		dc.w Obj76_Action-Obj76_Index
00019858 0000                       		dc.w loc_19762-Obj76_Index
0001985A                            ; ===========================================================================
0001985A                            
0001985A                            Obj76_Main:				; XREF: Obj76_Index
0001985A 7800                       		moveq	#0,d4
0001985C 3A3C 2C10                  		move.w	#$2C10,d5
00019860 7C09                       		moveq	#9,d6
00019862 43D0                       		lea	(a0),a1
00019864 6000                       		bra.s	Obj76_MakeBlock
00019866                            ; ===========================================================================
00019866                            
00019866                            Obj76_Loop:
00019866 4EB9 0000 DBFA             		jsr	SingleObjLoad
0001986C 6600                       		bne.s	Obj76_ExitLoop
0001986E                            
0001986E                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001986E 12BC 0076                  		move.b	#$76,(a1)
00019872 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001987A 337C 4000 0002             		move.w	#$4000,2(a1)
00019880 137C 0004 0001             		move.b	#4,1(a1)
00019886 137C 0010 0019             		move.b	#$10,$19(a1)
0001988C 137C 0010 0016             		move.b	#$10,$16(a1)
00019892 137C 0003 0018             		move.b	#3,$18(a1)
00019898 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001989C 337C 0582 000C             		move.w	#$582,$C(a1)
000198A2 3344 0028                  		move.w	d4,$28(a1)
000198A6 0644 0101                  		addi.w	#$101,d4
000198AA 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
000198AE 5429 0024                  		addq.b	#2,$24(a1)
000198B2 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
000198B6                            
000198B6                            Obj76_ExitLoop:
000198B6 4E75                       		rts	
000198B8                            ; ===========================================================================
000198B8                            
000198B8                            Obj76_Action:				; XREF: Obj76_Index
000198B8 1028 0029                  		move.b	$29(a0),d0
000198BC B028 0028                  		cmp.b	$28(a0),d0
000198C0 6700                       		beq.s	Obj76_Solid
000198C2 4A00                       		tst.b	d0
000198C4 6B00                       		bmi.s	loc_19718
000198C6                            
000198C6                            loc_19712:
000198C6 6100 0000                  		bsr.w	Obj76_Break
000198CA 6000                       		bra.s	Obj76_Display
000198CC                            ; ===========================================================================
000198CC                            
000198CC                            loc_19718:
000198CC 2268 0034                  		movea.l	$34(a0),a1
000198D0 4A29 0021                  		tst.b	$21(a1)
000198D4 67F0                       		beq.s	loc_19712
000198D6 3169 0008 0008             		move.w	8(a1),8(a0)
000198DC 3169 000C 000C             		move.w	$C(a1),$C(a0)
000198E2 0668 002C 000C             		addi.w	#$2C,$C(a0)
000198E8 B2C8                       		cmpa.w	a0,a1
000198EA 6500                       		bcs.s	Obj76_Display
000198EC 3029 0012                  		move.w	$12(a1),d0
000198F0 48C0                       		ext.l	d0
000198F2 E080                       		asr.l	#8,d0
000198F4 D168 000C                  		add.w	d0,$C(a0)
000198F8 6000                       		bra.s	Obj76_Display
000198FA                            ; ===========================================================================
000198FA                            
000198FA                            Obj76_Solid:				; XREF: Obj76_Action
000198FA 323C 001B                  		move.w	#$1B,d1
000198FE 343C 0010                  		move.w	#$10,d2
00019902 363C 0011                  		move.w	#$11,d3
00019906 3828 0008                  		move.w	8(a0),d4
0001990A 4EB9 0000 FB44             		jsr	SolidObject
00019910                            
00019910                            Obj76_Display:				; XREF: Obj76_Action
00019910 4EF9 0000 D774             		jmp	DisplaySprite
00019916                            ; ===========================================================================
00019916                            
00019916                            loc_19762:				; XREF: Obj76_Index
00019916 4A28 0001                  		tst.b	1(a0)
0001991A 6A00                       		bpl.s	Obj76_Delete
0001991C 4EB9 0000 D722             		jsr	ObjectFall
00019922 4EF9 0000 D774             		jmp	DisplaySprite
00019928                            ; ===========================================================================
00019928                            
00019928                            Obj76_Delete:
00019928 4EF9 0000 D7B0             		jmp	DeleteObject
0001992E                            
0001992E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001992E                            
0001992E                            
0001992E                            Obj76_Break:				; XREF: Obj76_Action
0001992E 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019932 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019936 7801                       		moveq	#1,d4
00019938 7203                       		moveq	#3,d1
0001993A 7438                       		moveq	#$38,d2
0001993C 5428 0024                  		addq.b	#2,$24(a0)
00019940 117C 0008 0019             		move.b	#8,$19(a0)
00019946 117C 0008 0016             		move.b	#8,$16(a0)
0001994C 43D0                       		lea	(a0),a1
0001994E 6000                       		bra.s	Obj76_MakeFrag
00019950                            ; ===========================================================================
00019950                            
00019950                            Obj76_LoopFrag:
00019950 4EB9 0000 DC10             		jsr	SingleObjLoad2
00019956 6600                       		bne.s	loc_197D4
00019958                            
00019958                            Obj76_MakeFrag:
00019958 45D0                       		lea	(a0),a2
0001995A 47D1                       		lea	(a1),a3
0001995C 7603                       		moveq	#3,d3
0001995E                            
0001995E                            loc_197AA:
0001995E 26DA                       		move.l	(a2)+,(a3)+
00019960 26DA                       		move.l	(a2)+,(a3)+
00019962 26DA                       		move.l	(a2)+,(a3)+
00019964 26DA                       		move.l	(a2)+,(a3)+
00019966 51CB FFF6                  		dbf	d3,loc_197AA
0001996A                            
0001996A 335C 0010                  		move.w	(a4)+,$10(a1)
0001996E 335C 0012                  		move.w	(a4)+,$12(a1)
00019972 361D                       		move.w	(a5)+,d3
00019974 D769 0008                  		add.w	d3,8(a1)
00019978 361D                       		move.w	(a5)+,d3
0001997A D769 000C                  		add.w	d3,$C(a1)
0001997E 1344 001A                  		move.b	d4,$1A(a1)
00019982 5244                       		addq.w	#1,d4
00019984 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019988                            
00019988                            loc_197D4:
00019988 303C 00CB                  		move.w	#$CB,d0
0001998C 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play smashing sound
00019992                            ; End of function Obj76_Break
00019992                            
00019992                            ; ===========================================================================
00019992 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019996 0180 FE00                  		dc.w $180, $FE00
0001999A FF00 FF00                  		dc.w $FF00, $FF00
0001999E 0100 FF00                  		dc.w $100, $FF00
000199A2 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
000199A6 0010 0000                  		dc.w $10, 0
000199AA 0000 0010                  		dc.w 0,	$10
000199AE 0010 0010                  		dc.w $10, $10
000199B2                            ; ---------------------------------------------------------------------------
000199B2                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
000199B2                            ; ---------------------------------------------------------------------------
000199B2                            Map_obj76:
000199B2                            	include "_maps\obj76.asm"
000199B2                            ; ---------------------------------------------------------------------------
000199B2                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
000199B2                            ; ---------------------------------------------------------------------------
000199B2 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
000199B6 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
000199BA 0000                       		dc.w byte_19826-Map_obj76
000199BC 02                         byte_19808:	dc.b 2
000199BD F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
000199C2 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
000199C7 00                         		dc.b 0
000199C8 01                         byte_19814:	dc.b 1
000199C9 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
000199CE 01                         byte_1981A:	dc.b 1
000199CF F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
000199D4 01                         byte_19820:	dc.b 1
000199D5 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
000199DA 01                         byte_19826:	dc.b 1
000199DB F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
000199E0                            		even
000199E0                            		even
000199E0                            
000199E0                            ; ===========================================================================
000199E0                            
000199E0                            loc_1982C:				; XREF: loc_19C62; loc_19C80
000199E0 4EF9 0000 D7B0             		jmp	DeleteObject
000199E6                            ; ===========================================================================
000199E6                            ; ---------------------------------------------------------------------------
000199E6                            ; Object 82 - Eggman (SBZ2)
000199E6                            ; ---------------------------------------------------------------------------
000199E6                            
000199E6                            Obj82:					; XREF: Obj_Index
000199E6 7000                       		moveq	#0,d0
000199E8 1028 0024                  		move.b	$24(a0),d0
000199EC 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
000199F0 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
000199F4                            ; ===========================================================================
000199F4 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
000199F6 0000                       		dc.w Obj82_Eggman-Obj82_Index
000199F8 0000                       		dc.w Obj82_Switch-Obj82_Index
000199FA                            
000199FA 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
000199FD 0400 03                    		dc.b 4,	0, 3
00019A00                            ; ===========================================================================
00019A00                            
00019A00                            Obj82_Main:				; XREF: Obj82_Index
00019A00 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019A04 317C 2160 0008             		move.w	#$2160,8(a0)
00019A0A 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019A10 117C 000F 0020             		move.b	#$F,$20(a0)
00019A16 117C 0010 0021             		move.b	#$10,$21(a0)
00019A1C 08A8 0000 0022             		bclr	#0,$22(a0)
00019A22 4228 0025                  		clr.b	$25(a0)
00019A26 115A 0024                  		move.b	(a2)+,$24(a0)
00019A2A 115A 001C                  		move.b	(a2)+,$1C(a0)
00019A2E 115A 0018                  		move.b	(a2)+,$18(a0)
00019A32 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019A3A 317C 0400 0002             		move.w	#$400,2(a0)
00019A40 117C 0004 0001             		move.b	#4,1(a0)
00019A46 08E8 0007 0001             		bset	#7,1(a0)
00019A4C 117C 0020 0019             		move.b	#$20,$19(a0)
00019A52 4EB9 0000 DC10             		jsr	SingleObjLoad2
00019A58 6600                       		bne.s	Obj82_Eggman
00019A5A 2348 0034                  		move.l	a0,$34(a1)
00019A5E 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019A62 337C 2130 0008             		move.w	#$2130,8(a1)
00019A68 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019A6E 4228 0025                  		clr.b	$25(a0)
00019A72 135A 0024                  		move.b	(a2)+,$24(a1)
00019A76 135A 001C                  		move.b	(a2)+,$1C(a1)
00019A7A 135A 0018                  		move.b	(a2)+,$18(a1)
00019A7E 237C 0000 BF68 0004        		move.l	#Map_obj32,4(a1)
00019A86 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019A8C 137C 0004 0001             		move.b	#4,1(a1)
00019A92 08E9 0007 0001             		bset	#7,1(a1)
00019A98 137C 0010 0019             		move.b	#$10,$19(a1)
00019A9E 137C 0000 001A             		move.b	#0,$1A(a1)
00019AA4                            
00019AA4                            Obj82_Eggman:				; XREF: Obj82_Index
00019AA4 7000                       		moveq	#0,d0
00019AA6 1028 0025                  		move.b	$25(a0),d0
00019AAA 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019AAE 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019AB2 43FA 0000                  		lea	Ani_obj82(pc),a1
00019AB6 4EB9 0000 A826             		jsr	AnimateSprite
00019ABC 4EF9 0000 D774             		jmp	DisplaySprite
00019AC2                            ; ===========================================================================
00019AC2 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019AC4 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019AC6 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019AC8 0000                       		dc.w loc_19934-Obj82_EggIndex
00019ACA                            ; ===========================================================================
00019ACA                            
00019ACA                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019ACA 3028 0008                  		move.w	8(a0),d0
00019ACE 9078 D008                  		sub.w	($FFFFD008).w,d0
00019AD2 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019AD6 6400                       		bcc.s	loc_19934	; if not, branch
00019AD8 5428 0025                  		addq.b	#2,$25(a0)
00019ADC 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019AE2 117C 0001 001C             		move.b	#1,$1C(a0)
00019AE8                            
00019AE8                            loc_19934:				; XREF: Obj82_EggIndex
00019AE8 4EF9 0000 D74E             		jmp	SpeedToPos
00019AEE                            ; ===========================================================================
00019AEE                            
00019AEE                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019AEE 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019AF2 6600                       		bne.s	loc_19954	; if time remains, branch
00019AF4 5428 0025                  		addq.b	#2,$25(a0)
00019AF8 117C 0002 001C             		move.b	#2,$1C(a0)
00019AFE 5868 000C                  		addq.w	#4,$C(a0)
00019B02 317C 000F 003C             		move.w	#15,$3C(a0)
00019B08                            
00019B08                            loc_19954:
00019B08 60DE                       		bra.s	loc_19934
00019B0A                            ; ===========================================================================
00019B0A                            
00019B0A                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019B0A 5368 003C                  		subq.w	#1,$3C(a0)
00019B0E 6E00                       		bgt.s	loc_199D0
00019B10 6600                       		bne.s	loc_1996A
00019B12 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019B18 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019B1E                            
00019B1E                            loc_1996A:
00019B1E 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019B24 6E00                       		bgt.s	loc_19976
00019B26 4268 0010                  		clr.w	$10(a0)
00019B2A                            
00019B2A                            loc_19976:
00019B2A 0668 0024 0012             		addi.w	#$24,$12(a0)
00019B30 4A68 0012                  		tst.w	$12(a0)
00019B34 6B00                       		bmi.s	Obj82_FindBlocks
00019B36 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019B3C 6500                       		bcs.s	Obj82_FindBlocks
00019B3E 317C 5357 0028             		move.w	#$5357,$28(a0)
00019B44 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019B4A 6500                       		bcs.s	Obj82_FindBlocks
00019B4C 317C 059B 000C             		move.w	#$59B,$C(a0)
00019B52 4268 0012                  		clr.w	$12(a0)
00019B56                            
00019B56                            Obj82_FindBlocks:
00019B56 3028 0010                  		move.w	$10(a0),d0
00019B5A 8068 0012                  		or.w	$12(a0),d0
00019B5E 6600                       		bne.s	loc_199D0
00019B60 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019B64 703E                       		moveq	#$3E,d0
00019B66 7240                       		moveq	#$40,d1
00019B68                            
00019B68                            Obj82_FindLoop:	
00019B68 D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019B6A 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019B6E 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019B72                            
00019B72 6600                       		bne.s	loc_199D0
00019B74 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019B7A 5428 0025                  		addq.b	#2,$25(a0)
00019B7E 117C 0001 001C             		move.b	#1,$1C(a0)
00019B84                            
00019B84                            loc_199D0:
00019B84 6000 FF62                  		bra.w	loc_19934
00019B88                            ; ===========================================================================
00019B88                            
00019B88                            Obj82_Switch:				; XREF: Obj82_Index
00019B88 7000                       		moveq	#0,d0
00019B8A 1028 0025                  		move.b	$25(a0),d0
00019B8E 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019B92 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019B96                            ; ===========================================================================
00019B96 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019B98 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019B9A                            ; ===========================================================================
00019B9A                            
00019B9A                            loc_199E6:				; XREF: Obj82_SwIndex
00019B9A 2268 0034                  		movea.l	$34(a0),a1
00019B9E 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019BA4 6600                       		bne.s	Obj82_SwDisplay
00019BA6 117C 0001 001A             		move.b	#1,$1A(a0)
00019BAC 5428 0025                  		addq.b	#2,$25(a0)
00019BB0                            
00019BB0                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00019BB0 4EF9 0000 D774             		jmp	DisplaySprite
00019BB6                            ; ===========================================================================
00019BB6                            Ani_obj82:
00019BB6                            	include "_anim\obj82.asm"
00019BB6                            ; ---------------------------------------------------------------------------
00019BB6                            ; Animation script - Eggman (SBZ2)
00019BB6                            ; ---------------------------------------------------------------------------
00019BB6 0000                       		dc.w byte_19A10-Ani_obj82
00019BB8 0000                       		dc.w byte_19A14-Ani_obj82
00019BBA 0000                       		dc.w byte_19A18-Ani_obj82
00019BBC 0000                       		dc.w byte_19A20-Ani_obj82
00019BBE 0000                       		dc.w byte_19A24-Ani_obj82
00019BC0 0000                       		dc.w byte_19A2A-Ani_obj82
00019BC2 0000                       		dc.w byte_19A30-Ani_obj82
00019BC4 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
00019BC8 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
00019BCC 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
00019BD4 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
00019BD8 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00019BDE 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00019BE4 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
00019BE8                            		even
00019BE8                            		even
00019BE8                            
00019BE8                            ; ---------------------------------------------------------------------------
00019BE8                            ; Sprite mappings - Eggman (SBZ2)
00019BE8                            ; ---------------------------------------------------------------------------
00019BE8                            Map_obj82:
00019BE8                            	include "_maps\obj82.asm"
00019BE8                            ; ---------------------------------------------------------------------------
00019BE8                            ; Sprite mappings - Eggman (SBZ2)
00019BE8                            ; ---------------------------------------------------------------------------
00019BE8 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
00019BEC 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
00019BF0 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
00019BF4 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
00019BF8 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
00019BFC 0000                       		dc.w byte_19B4F-Map_obj82
00019BFE 03                         byte_19A4A:	dc.b 3
00019BFF FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019C04 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019C09 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019C0E 04                         byte_19A5A:	dc.b 4
00019C0F E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
00019C14 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019C19 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019C1E FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019C23 00                         		dc.b 0
00019C24 04                         byte_19A70:	dc.b 4
00019C25 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
00019C2A E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
00019C2F 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
00019C34 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
00019C39 00                         		dc.b 0
00019C3A 04                         byte_19A86:	dc.b 4
00019C3B F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
00019C40 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
00019C45 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
00019C4A EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
00019C4F 00                         		dc.b 0
00019C50 04                         byte_19A9C:	dc.b 4
00019C51 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019C56 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019C5B 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
00019C60 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019C65 00                         		dc.b 0
00019C66 04                         byte_19AB2:	dc.b 4
00019C67 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019C6C E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019C71 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019C76 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019C7B 00                         		dc.b 0
00019C7C 07                         byte_19AC8:	dc.b 7
00019C7D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019C82 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019C87 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019C8C 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019C91 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019C96 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
00019C9B F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
00019CA0 05                         byte_19AEC:	dc.b 5
00019CA1 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019CA6 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019CAB 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019CB0 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019CB5 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019CBA 06                         byte_19B06:	dc.b 6
00019CBB EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
00019CC0 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
00019CC5 0905 0844 00               		dc.b 9,	5, 8, $44, 0
00019CCA 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
00019CCF 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
00019CD4 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
00019CD9 00                         		dc.b 0
00019CDA 08                         byte_19B26:	dc.b 8
00019CDB E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019CE0 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019CE5 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019CEA 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019CEF E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
00019CF4 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
00019CF9 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
00019CFE 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
00019D03 03                         byte_19B4F:	dc.b 3
00019D04 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
00019D09 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
00019D0E EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
00019D14 00                         		even
00019D14 00                         		even
00019D14                            
00019D14                            ; ===========================================================================
00019D14                            ; ---------------------------------------------------------------------------
00019D14                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
00019D14                            ; ---------------------------------------------------------------------------
00019D14                            
00019D14                            Obj83:					; XREF: Obj_Index
00019D14 7000                       		moveq	#0,d0
00019D16 1028 0024                  		move.b	$24(a0),d0
00019D1A 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
00019D1E 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
00019D22                            ; ===========================================================================
00019D22 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
00019D24 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
00019D26 0000                       		dc.w loc_19C36-Obj83_Index
00019D28 0000                       		dc.w loc_19C62-Obj83_Index
00019D2A 0000                       		dc.w loc_19C72-Obj83_Index
00019D2C 0000                       		dc.w loc_19C80-Obj83_Index
00019D2E                            ; ===========================================================================
00019D2E                            
00019D2E                            Obj83_Main:				; XREF: Obj83_Index
00019D2E 317C 2080 0008             		move.w	#$2080,8(a0)
00019D34 317C 05D0 000C             		move.w	#$5D0,$C(a0)
00019D3A 117C 0080 0019             		move.b	#$80,$19(a0)
00019D40 117C 0010 0016             		move.b	#$10,$16(a0)
00019D46 117C 0004 0001             		move.b	#4,1(a0)
00019D4C 08E8 0007 0001             		bset	#7,1(a0)
00019D52 7800                       		moveq	#0,d4
00019D54 3A3C 2010                  		move.w	#$2010,d5
00019D58 7C07                       		moveq	#7,d6
00019D5A 45E8 0030                  		lea	$30(a0),a2
00019D5E                            
00019D5E                            Obj83_MakeBlock:
00019D5E 4EB9 0000 DBFA             		jsr	SingleObjLoad
00019D64 6600                       		bne.s	Obj83_ExitMake
00019D66 34C9                       		move.w	a1,(a2)+
00019D68 12BC 0083                  		move.b	#$83,(a1)	; load block object
00019D6C 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
00019D74 337C 4518 0002             		move.w	#$4518,2(a1)
00019D7A 137C 0004 0001             		move.b	#4,1(a1)
00019D80 137C 0010 0019             		move.b	#$10,$19(a1)
00019D86 137C 0010 0016             		move.b	#$10,$16(a1)
00019D8C 137C 0003 0018             		move.b	#3,$18(a1)
00019D92 3345 0008                  		move.w	d5,8(a1)	; set X	position
00019D96 337C 05D0 000C             		move.w	#$5D0,$C(a1)
00019D9C 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
00019DA0 137C 0008 0024             		move.b	#8,$24(a1)
00019DA6 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
00019DAA                            
00019DAA                            Obj83_ExitMake:
00019DAA 5428 0024                  		addq.b	#2,$24(a0)
00019DAE 4E75                       		rts	
00019DB0                            ; ===========================================================================
00019DB0                            
00019DB0                            Obj83_ChkBreak:				; XREF: Obj83_Index
00019DB0 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019DB6 6600                       		bne.s	Obj83_Solid	; if not, branch
00019DB8 4228 001A                  		clr.b	$1A(a0)
00019DBC 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
00019DC0                            
00019DC0                            Obj83_Solid:
00019DC0 7000                       		moveq	#0,d0
00019DC2 1028 001A                  		move.b	$1A(a0),d0
00019DC6 4400                       		neg.b	d0
00019DC8 4880                       		ext.w	d0
00019DCA 5040                       		addq.w	#8,d0
00019DCC E940                       		asl.w	#4,d0
00019DCE 383C 2100                  		move.w	#$2100,d4
00019DD2 9840                       		sub.w	d0,d4
00019DD4 1140 0019                  		move.b	d0,$19(a0)
00019DD8 3144 0008                  		move.w	d4,8(a0)
00019DDC 720B                       		moveq	#$B,d1
00019DDE D240                       		add.w	d0,d1
00019DE0 7410                       		moveq	#$10,d2
00019DE2 7611                       		moveq	#$11,d3
00019DE4 4EF9 0000 FB44             		jmp	SolidObject
00019DEA                            ; ===========================================================================
00019DEA                            
00019DEA                            loc_19C36:				; XREF: Obj83_Index
00019DEA 0428 000E 001E             		subi.b	#$E,$1E(a0)
00019DF0 6400                       		bcc.s	Obj83_Solid2
00019DF2 70FF                       		moveq	#-1,d0
00019DF4 1028 001A                  		move.b	$1A(a0),d0
00019DF8 4880                       		ext.w	d0
00019DFA D040                       		add.w	d0,d0
00019DFC 3030 0030                  		move.w	$30(a0,d0.w),d0
00019E00 2240                       		movea.l	d0,a1
00019E02 337C 474F 0028             		move.w	#$474F,$28(a1)
00019E08 5228 001A                  		addq.b	#1,$1A(a0)
00019E0C 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
00019E12 6700                       		beq.s	loc_19C62
00019E14                            
00019E14                            Obj83_Solid2:
00019E14 60AA                       		bra.s	Obj83_Solid
00019E16                            ; ===========================================================================
00019E16                            
00019E16                            loc_19C62:				; XREF: Obj83_Index
00019E16 08A8 0003 0022             		bclr	#3,$22(a0)
00019E1C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00019E22 6000 FBBC                  		bra.w	loc_1982C
00019E26                            ; ===========================================================================
00019E26                            
00019E26                            loc_19C72:				; XREF: Obj83_Index
00019E26 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019E2C 6700                       		beq.s	Obj83_Break	; if yes, branch
00019E2E 4EF9 0000 D774             		jmp	DisplaySprite
00019E34                            ; ===========================================================================
00019E34                            
00019E34                            loc_19C80:				; XREF: Obj83_Index
00019E34 4A28 0001                  		tst.b	1(a0)
00019E38 6A00 FBA6                  		bpl.w	loc_1982C
00019E3C 4EB9 0000 D722             		jsr	ObjectFall
00019E42 4EF9 0000 D774             		jmp	DisplaySprite
00019E48                            ; ===========================================================================
00019E48                            
00019E48                            Obj83_Break:				; XREF: loc_19C72
00019E48 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
00019E4C 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
00019E50 7801                       		moveq	#1,d4
00019E52 7203                       		moveq	#3,d1
00019E54 7438                       		moveq	#$38,d2
00019E56 5428 0024                  		addq.b	#2,$24(a0)
00019E5A 117C 0008 0019             		move.b	#8,$19(a0)
00019E60 117C 0008 0016             		move.b	#8,$16(a0)
00019E66 43D0                       		lea	(a0),a1
00019E68 6000                       		bra.s	Obj83_MakeFrag
00019E6A                            ; ===========================================================================
00019E6A                            
00019E6A                            Obj83_LoopFrag:
00019E6A 4EB9 0000 DC10             		jsr	SingleObjLoad2
00019E70 6600                       		bne.s	Obj83_BreakSnd
00019E72                            
00019E72                            Obj83_MakeFrag:				; XREF: Obj83_Break
00019E72 45D0                       		lea	(a0),a2
00019E74 47D1                       		lea	(a1),a3
00019E76 7603                       		moveq	#3,d3
00019E78                            
00019E78                            loc_19CC4:
00019E78 26DA                       		move.l	(a2)+,(a3)+
00019E7A 26DA                       		move.l	(a2)+,(a3)+
00019E7C 26DA                       		move.l	(a2)+,(a3)+
00019E7E 26DA                       		move.l	(a2)+,(a3)+
00019E80 51CB FFF6                  		dbf	d3,loc_19CC4
00019E84                            
00019E84 335C 0012                  		move.w	(a4)+,$12(a1)
00019E88 361D                       		move.w	(a5)+,d3
00019E8A D769 0008                  		add.w	d3,8(a1)
00019E8E 361D                       		move.w	(a5)+,d3
00019E90 D769 000C                  		add.w	d3,$C(a1)
00019E94 1344 001A                  		move.b	d4,$1A(a1)
00019E98 5244                       		addq.w	#1,d4
00019E9A 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
00019E9E                            
00019E9E                            Obj83_BreakSnd:
00019E9E 303C 00CB                  		move.w	#$CB,d0
00019EA2 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play smashing sound
00019EA8 4EF9 0000 D774             		jmp	DisplaySprite
00019EAE                            ; ===========================================================================
00019EAE 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
00019EB2 0120 00C0                  		dc.w $120, $C0
00019EB6 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
00019EBA 0010 0000                  		dc.w $10, 0
00019EBE 0000 0010                  		dc.w 0,	$10
00019EC2 0010 0010                  		dc.w $10, $10
00019EC6                            ; ---------------------------------------------------------------------------
00019EC6                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00019EC6                            ; ---------------------------------------------------------------------------
00019EC6                            Map_obj83:
00019EC6                            	include "_maps\obj83.asm"
00019EC6                            ; ---------------------------------------------------------------------------
00019EC6                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00019EC6                            ; ---------------------------------------------------------------------------
00019EC6 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
00019ECA 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
00019ECE 0000                       		dc.w byte_19D46-Map_obj83
00019ED0 01                         byte_19D1C:	dc.b 1
00019ED1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00019ED6 02                         byte_19D22:	dc.b 2
00019ED7 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
00019EDC F801 0004 00               		dc.b $F8, 1, 0,	4, 0
00019EE1 00                         		dc.b 0
00019EE2 02                         byte_19D2E:	dc.b 2
00019EE3 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00019EE8 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
00019EED 00                         		dc.b 0
00019EEE 02                         byte_19D3A:	dc.b 2
00019EEF F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
00019EF4 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
00019EF9 00                         		dc.b 0
00019EFA 02                         byte_19D46:	dc.b 2
00019EFB F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
00019F00 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
00019F06 00                         		even
00019F06 00                         		even
00019F06                            
00019F06                            ; ===========================================================================
00019F06                            ; ---------------------------------------------------------------------------
00019F06                            ; Object 85 - Eggman (FZ)
00019F06                            ; ---------------------------------------------------------------------------
00019F06                            
00019F06                            Obj85_Delete:
00019F06 4EF9 0000 D7B0             		jmp	DeleteObject
00019F0C                            ; ===========================================================================
00019F0C                            
00019F0C                            Obj85:					; XREF: Obj_Index
00019F0C 7000                       		moveq	#0,d0
00019F0E 1028 0024                  		move.b	$24(a0),d0
00019F12 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
00019F16 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
00019F1A                            ; ===========================================================================
00019F1A 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
00019F1C 0000                       		dc.w Obj85_Eggman-Obj85_Index
00019F1E 0000                       		dc.w loc_1A38E-Obj85_Index
00019F20 0000                       		dc.w loc_1A346-Obj85_Index
00019F22 0000                       		dc.w loc_1A2C6-Obj85_Index
00019F24 0000                       		dc.w loc_1A3AC-Obj85_Index
00019F26 0000                       		dc.w loc_1A264-Obj85_Index
00019F28                            
00019F28 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
00019F2E 0001 9BE8                  		dc.l Map_obj82		; mappings pointer
00019F32 25B0 0590 0300             		dc.w $25B0, $590, $300
00019F38 0000 0000                  		dc.l Map_obj84
00019F3C 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
00019F42 0000 0000                  		dc.l Map_FZBoss
00019F46 26E0 0596 0470             		dc.w $26E0, $596, $470
00019F4C 0001 9BE8                  		dc.l Map_obj82
00019F50 26E0 0596 0400             		dc.w $26E0, $596, $400
00019F56 0001 7ECA                  		dc.l Map_Eggman
00019F5A 26E0 0596 0400             		dc.w $26E0, $596, $400
00019F60 0001 7ECA                  		dc.l Map_Eggman
00019F64                            
00019F64 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
00019F69 0400 0112 08               		dc.b 4,	0, 1, $12, 8
00019F6E 0600 0300 00               		dc.b 6,	0, 3, 0, 0
00019F73 0800 0300 00               		dc.b 8,	0, 3, 0, 0
00019F78 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
00019F7D 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
00019F82                            ; ===========================================================================
00019F82                            
00019F82                            Obj85_Main:				; XREF: Obj85_Index
00019F82 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
00019F86 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
00019F8A 2248                       		movea.l	a0,a1
00019F8C 7205                       		moveq	#5,d1
00019F8E 6000                       		bra.s	Obj85_LoadBoss
00019F90                            ; ===========================================================================
00019F90                            
00019F90                            Obj85_Loop:
00019F90 4EB9 0000 DC10             		jsr	SingleObjLoad2
00019F96 6600                       		bne.s	loc_19E20
00019F98                            
00019F98                            Obj85_LoadBoss:				; XREF: Obj85_Main
00019F98 12BC 0085                  		move.b	#$85,(a1)
00019F9C 335A 0008                  		move.w	(a2)+,8(a1)
00019FA0 335A 000C                  		move.w	(a2)+,$C(a1)
00019FA4 335A 0002                  		move.w	(a2)+,2(a1)
00019FA8 235A 0004                  		move.l	(a2)+,4(a1)
00019FAC 135B 0024                  		move.b	(a3)+,$24(a1)
00019FB0 135B 001C                  		move.b	(a3)+,$1C(a1)
00019FB4 135B 0018                  		move.b	(a3)+,$18(a1)
00019FB8 135B 0017                  		move.b	(a3)+,$17(a1)
00019FBC 135B 0016                  		move.b	(a3)+,$16(a1)
00019FC0 137C 0004 0001             		move.b	#4,1(a1)
00019FC6 08E8 0007 0001             		bset	#7,1(a0)
00019FCC 2348 0034                  		move.l	a0,$34(a1)
00019FD0 51C9 FFBE                  		dbf	d1,Obj85_Loop
00019FD4                            
00019FD4                            loc_19E20:
00019FD4 45E8 0036                  		lea	$36(a0),a2
00019FD8 4EB9 0000 DBFA             		jsr	SingleObjLoad
00019FDE 6600                       		bne.s	loc_19E5A
00019FE0 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
00019FE4 3489                       		move.w	a1,(a2)
00019FE6 2348 0034                  		move.l	a0,$34(a1)
00019FEA 45E8 0038                  		lea	$38(a0),a2
00019FEE 7400                       		moveq	#0,d2
00019FF0 7203                       		moveq	#3,d1
00019FF2                            
00019FF2                            loc_19E3E:
00019FF2 4EB9 0000 DC10             		jsr	SingleObjLoad2
00019FF8 6600                       		bne.s	loc_19E5A
00019FFA 34C9                       		move.w	a1,(a2)+
00019FFC 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A000 2348 0034                  		move.l	a0,$34(a1)
0001A004 1342 0028                  		move.b	d2,$28(a1)
0001A008 5442                       		addq.w	#2,d2
0001A00A 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A00E                            
0001A00E                            loc_19E5A:
0001A00E 317C 0000 0034             		move.w	#0,$34(a0)
0001A014 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A01A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A020                            
0001A020                            Obj85_Eggman:				; XREF: Obj85_Index
0001A020 7000                       		moveq	#0,d0
0001A022 1028 0034                  		move.b	$34(a0),d0
0001A026 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A02A 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A02E 4EF9 0000 D774             		jmp	DisplaySprite
0001A034                            ; ===========================================================================
0001A034 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A038 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A03C 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A040 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A044                            ; ===========================================================================
0001A044                            
0001A044                            loc_19E90:				; XREF: off_19E80
0001A044 4AB8 F680                  		tst.l	($FFFFF680).w
0001A048 6600                       		bne.s	loc_19EA2
0001A04A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A050 6500                       		bcs.s	loc_19EA2
0001A052 5428 0034                  		addq.b	#2,$34(a0)
0001A056                            
0001A056                            loc_19EA2:
0001A056 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A05A 4E75                       		rts	
0001A05C                            ; ===========================================================================
0001A05C                            
0001A05C                            loc_19EA8:				; XREF: off_19E80
0001A05C 4A68 0030                  		tst.w	$30(a0)
0001A060 6A00                       		bpl.s	loc_19F10
0001A062 4268 0030                  		clr.w	$30(a0)
0001A066 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001A06C 0240 000C                  		andi.w	#$C,d0
0001A070 3200                       		move.w	d0,d1
0001A072 5441                       		addq.w	#2,d1
0001A074 4A80                       		tst.l	d0
0001A076 6A00                       		bpl.s	loc_19EC6
0001A078 C141                       		exg	d1,d0
0001A07A                            
0001A07A                            loc_19EC6:
0001A07A 43FA 0000                  		lea	word_19FD6(pc),a1
0001A07E 3031 0000                  		move.w	(a1,d0.w),d0
0001A082 3231 1000                  		move.w	(a1,d1.w),d1
0001A086 3140 0030                  		move.w	d0,$30(a0)
0001A08A 74FF                       		moveq	#-1,d2
0001A08C 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A090 2242                       		movea.l	d2,a1
0001A092 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A098 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A09E 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A0A2 2242                       		movea.l	d2,a1
0001A0A4 137C 0001 0029             		move.b	#1,$29(a1)
0001A0AA 337C 0000 0030             		move.w	#0,$30(a1)
0001A0B0 317C 0001 0032             		move.w	#1,$32(a0)
0001A0B6 4228 0035                  		clr.b	$35(a0)
0001A0BA 303C 00B7                  		move.w	#$B7,d0
0001A0BE 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A0C4                            
0001A0C4                            loc_19F10:
0001A0C4 4A68 0032                  		tst.w	$32(a0)
0001A0C8 6B00 0000                  		bmi.w	loc_19FA6
0001A0CC 08A8 0000 0022             		bclr	#0,$22(a0)
0001A0D2 3038 D008                  		move.w	($FFFFD008).w,d0
0001A0D6 9068 0008                  		sub.w	8(a0),d0
0001A0DA 6500                       		bcs.s	loc_19F2E
0001A0DC 08E8 0000 0022             		bset	#0,$22(a0)
0001A0E2                            
0001A0E2                            loc_19F2E:
0001A0E2 323C 002B                  		move.w	#$2B,d1
0001A0E6 343C 0014                  		move.w	#$14,d2
0001A0EA 363C 0014                  		move.w	#$14,d3
0001A0EE 3828 0008                  		move.w	8(a0),d4
0001A0F2 4EB9 0000 FB44             		jsr	SolidObject
0001A0F8 4A44                       		tst.w	d4
0001A0FA 6E00                       		bgt.s	loc_19F50
0001A0FC                            
0001A0FC                            loc_19F48:
0001A0FC 4A28 0035                  		tst.b	$35(a0)
0001A100 6600                       		bne.s	loc_19F88
0001A102 6000                       		bra.s	loc_19F96
0001A104                            ; ===========================================================================
0001A104                            
0001A104                            loc_19F50:
0001A104 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A108 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A10E 66EC                       		bne.s	loc_19F48
0001A110 303C 0300                  		move.w	#$300,d0
0001A114 0828 0000 0022             		btst	#0,$22(a0)
0001A11A 6600                       		bne.s	loc_19F6A
0001A11C 4440                       		neg.w	d0
0001A11E                            
0001A11E                            loc_19F6A:
0001A11E 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A122 4A28 0035                  		tst.b	$35(a0)
0001A126 6600                       		bne.s	loc_19F88
0001A128 5328 0021                  		subq.b	#1,$21(a0)
0001A12C 117C 0064 0035             		move.b	#$64,$35(a0)
0001A132 303C 00AC                  		move.w	#$AC,d0
0001A136 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A13C                            
0001A13C                            loc_19F88:
0001A13C 5328 0035                  		subq.b	#1,$35(a0)
0001A140 6700                       		beq.s	loc_19F96
0001A142 117C 0003 001C             		move.b	#3,$1C(a0)
0001A148 6000                       		bra.s	loc_19F9C
0001A14A                            ; ===========================================================================
0001A14A                            
0001A14A                            loc_19F96:
0001A14A 117C 0001 001C             		move.b	#1,$1C(a0)
0001A150                            
0001A150                            loc_19F9C:
0001A150 43FA FA64                  		lea	Ani_obj82(pc),a1
0001A154 4EF9 0000 A826             		jmp	AnimateSprite
0001A15A                            ; ===========================================================================
0001A15A                            
0001A15A                            loc_19FA6:
0001A15A 4A28 0021                  		tst.b	$21(a0)
0001A15E 6700                       		beq.s	loc_19FBC
0001A160 5428 0034                  		addq.b	#2,$34(a0)
0001A164 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A16A 4268 0032                  		clr.w	$32(a0)
0001A16E 4E75                       		rts	
0001A170                            ; ===========================================================================
0001A170                            
0001A170                            loc_19FBC:
0001A170 117C 0006 0034             		move.b	#6,$34(a0)
0001A176 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A17C 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A182 117C 0014 0016             		move.b	#$14,$16(a0)
0001A188 4E75                       		rts	
0001A18A                            ; ===========================================================================
0001A18A 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A19A                            ; ===========================================================================
0001A19A                            
0001A19A                            loc_19FE6:				; XREF: off_19E80
0001A19A 70FF                       		moveq	#-1,d0
0001A19C 3028 0036                  		move.w	$36(a0),d0
0001A1A0 2240                       		movea.l	d0,a1
0001A1A2 4A68 0030                  		tst.w	$30(a0)
0001A1A6 6A00                       		bpl.s	loc_1A000
0001A1A8 4268 0030                  		clr.w	$30(a0)
0001A1AC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A1B2 6100                       		bsr.s	loc_1A020
0001A1B4                            
0001A1B4                            loc_1A000:
0001A1B4 700F                       		moveq	#$F,d0
0001A1B6 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A1BA 6600                       		bne.s	loc_1A00A
0001A1BC 6100                       		bsr.s	loc_1A020
0001A1BE                            
0001A1BE                            loc_1A00A:
0001A1BE 4A68 0032                  		tst.w	$32(a0)
0001A1C2 6700                       		beq.s	locret_1A01E
0001A1C4 5528 0034                  		subq.b	#2,$34(a0)
0001A1C8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A1CE 4268 0032                  		clr.w	$32(a0)
0001A1D2                            
0001A1D2                            locret_1A01E:
0001A1D2 4E75                       		rts	
0001A1D4                            ; ===========================================================================
0001A1D4                            
0001A1D4                            loc_1A020:
0001A1D4 303C 00B1                  		move.w	#$B1,d0
0001A1D8 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A1DE                            ; ===========================================================================
0001A1DE                            
0001A1DE                            loc_1A02A:				; XREF: off_19E80
0001A1DE 117C 0030 0017             		move.b	#$30,$17(a0)
0001A1E4 08E8 0000 0022             		bset	#0,$22(a0)
0001A1EA 4EB9 0000 D74E             		jsr	SpeedToPos
0001A1F0 117C 0006 001A             		move.b	#6,$1A(a0)
0001A1F6 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A1FC 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A202 6500                       		bcs.s	loc_1A070
0001A204 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A20A 5428 0034                  		addq.b	#2,$34(a0)
0001A20E 117C 0020 0017             		move.b	#$20,$17(a0)
0001A214 317C 0100 0010             		move.w	#$100,$10(a0)
0001A21A 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A220 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A224                            
0001A224                            loc_1A070:
0001A224 6000 0000                  		bra.w	loc_1A166
0001A228                            ; ===========================================================================
0001A228                            
0001A228                            loc_1A074:				; XREF: off_19E80
0001A228 08E8 0000 0022             		bset	#0,$22(a0)
0001A22E 117C 0004 001C             		move.b	#4,$1C(a0)
0001A234 4EB9 0000 D74E             		jsr	SpeedToPos
0001A23A 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A240 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A246 6500                       		bcs.s	loc_1A09A
0001A248 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A24E                            
0001A24E                            loc_1A09A:
0001A24E 317C 0400 0010             		move.w	#$400,$10(a0)
0001A254 3028 0008                  		move.w	8(a0),d0
0001A258 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A25C 6A00                       		bpl.s	loc_1A0B4
0001A25E 317C 0500 0010             		move.w	#$500,$10(a0)
0001A264 6000 0000                  		bra.w	loc_1A0F2
0001A268                            ; ===========================================================================
0001A268                            
0001A268                            loc_1A0B4:
0001A268 0440 0070                  		subi.w	#$70,d0
0001A26C 6500                       		bcs.s	loc_1A0F2
0001A26E 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A274 5140                       		subq.w	#8,d0
0001A276 6500                       		bcs.s	loc_1A0F2
0001A278 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A27E 5140                       		subq.w	#8,d0
0001A280 6500                       		bcs.s	loc_1A0F2
0001A282 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A288 5140                       		subq.w	#8,d0
0001A28A 6500                       		bcs.s	loc_1A0F2
0001A28C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A292 5140                       		subq.w	#8,d0
0001A294 6500                       		bcs.s	loc_1A0F2
0001A296 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A29C 0440 0038                  		subi.w	#$38,d0
0001A2A0 6500                       		bcs.s	loc_1A0F2
0001A2A2 4268 0010                  		clr.w	$10(a0)
0001A2A6                            
0001A2A6                            loc_1A0F2:
0001A2A6 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A2AC 6500                       		bcs.s	loc_1A110
0001A2AE 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A2B4 317C 0240 0010             		move.w	#$240,$10(a0)
0001A2BA 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A2C0 5428 0034                  		addq.b	#2,$34(a0)
0001A2C4                            
0001A2C4                            loc_1A110:
0001A2C4 6000                       		bra.s	loc_1A15C
0001A2C6                            ; ===========================================================================
0001A2C6                            
0001A2C6                            loc_1A112:				; XREF: off_19E80
0001A2C6 4EB9 0000 D74E             		jsr	SpeedToPos
0001A2CC 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A2D2 6500                       		bcs.s	loc_1A124
0001A2D4 4268 0010                  		clr.w	$10(a0)
0001A2D8                            
0001A2D8                            loc_1A124:
0001A2D8 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A2DE 4A68 0012                  		tst.w	$12(a0)
0001A2E2 6B00                       		bmi.s	loc_1A142
0001A2E4 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A2EA 6500                       		bcs.s	loc_1A142
0001A2EC 317C 0592 000C             		move.w	#$592,$C(a0)
0001A2F2 4268 0012                  		clr.w	$12(a0)
0001A2F6                            
0001A2F6                            loc_1A142:
0001A2F6 3028 0010                  		move.w	$10(a0),d0
0001A2FA 8068 0012                  		or.w	$12(a0),d0
0001A2FE 6600                       		bne.s	loc_1A15C
0001A300 5428 0034                  		addq.b	#2,$34(a0)
0001A304 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A30A 117C 0001 0021             		move.b	#1,$21(a0)
0001A310                            
0001A310                            loc_1A15C:
0001A310 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001A314 4EB9 0000 A826             		jsr	AnimateSprite
0001A31A                            
0001A31A                            loc_1A166:
0001A31A 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A320 6C00                       		bge.s	loc_1A172
0001A322 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A326                            
0001A326                            loc_1A172:
0001A326 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A32C 6C00                       		bge.s	locret_1A190
0001A32E 323C 001B                  		move.w	#$1B,d1
0001A332 343C 0070                  		move.w	#$70,d2
0001A336 363C 0071                  		move.w	#$71,d3
0001A33A 3828 0008                  		move.w	8(a0),d4
0001A33E 4EF9 0000 FB44             		jmp	SolidObject
0001A344                            ; ===========================================================================
0001A344                            
0001A344                            locret_1A190:
0001A344 4E75                       		rts	
0001A346                            ; ===========================================================================
0001A346                            
0001A346                            loc_1A192:				; XREF: off_19E80
0001A346 217C 0001 7ECA 0004        		move.l	#Map_Eggman,4(a0)
0001A34E 317C 0400 0002             		move.w	#$400,2(a0)
0001A354 117C 0000 001C             		move.b	#0,$1C(a0)
0001A35A 08E8 0000 0022             		bset	#0,$22(a0)
0001A360 4EB9 0000 D74E             		jsr	SpeedToPos
0001A366 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A36C 6400                       		bcc.s	loc_1A1D0
0001A36E 317C 0180 0010             		move.w	#$180,$10(a0)
0001A374 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A37A 117C 000F 0020             		move.b	#$F,$20(a0)
0001A380 5428 0034                  		addq.b	#2,$34(a0)
0001A384                            
0001A384                            loc_1A1D0:
0001A384 6000 FF8A                  		bra.w	loc_1A15C
0001A388                            ; ===========================================================================
0001A388                            
0001A388                            loc_1A1D4:				; XREF: off_19E80
0001A388 08E8 0000 0022             		bset	#0,$22(a0)
0001A38E 4EB9 0000 D74E             		jsr	SpeedToPos
0001A394 4A68 0030                  		tst.w	$30(a0)
0001A398 6600                       		bne.s	loc_1A1FC
0001A39A 4A28 0020                  		tst.b	$20(a0)
0001A39E 6600                       		bne.s	loc_1A216
0001A3A0 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A3A6 303C 00AC                  		move.w	#$AC,d0
0001A3AA 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A3B0                            
0001A3B0                            loc_1A1FC:
0001A3B0 5368 0030                  		subq.w	#1,$30(a0)
0001A3B4 6600                       		bne.s	loc_1A216
0001A3B6 4A28 0022                  		tst.b	$22(a0)
0001A3BA 6A00                       		bpl.s	loc_1A210
0001A3BC 317C 0060 0012             		move.w	#$60,$12(a0)
0001A3C2 6000                       		bra.s	loc_1A216
0001A3C4                            ; ===========================================================================
0001A3C4                            
0001A3C4                            loc_1A210:
0001A3C4 117C 000F 0020             		move.b	#$F,$20(a0)
0001A3CA                            
0001A3CA                            loc_1A216:
0001A3CA 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A3D0 6D00                       		blt.s	loc_1A23A
0001A3D2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A3D8 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A3DE 4278 D014                  		clr.w	($FFFFD014).w
0001A3E2 4A68 0012                  		tst.w	$12(a0)
0001A3E6 6A00                       		bpl.s	loc_1A248
0001A3E8 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A3EE                            
0001A3EE                            loc_1A23A:
0001A3EE 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A3F4 6D00                       		blt.s	loc_1A248
0001A3F6 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A3FC                            
0001A3FC                            loc_1A248:
0001A3FC 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A402 6500                       		bcs.s	loc_1A260
0001A404 4A28 0001                  		tst.b	1(a0)
0001A408 6B00                       		bmi.s	loc_1A260
0001A40A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A410 6000 FAF4                  		bra.w	Obj85_Delete
0001A414                            ; ===========================================================================
0001A414                            
0001A414                            loc_1A260:
0001A414 6000 FEFA                  		bra.w	loc_1A15C
0001A418                            ; ===========================================================================
0001A418                            
0001A418                            loc_1A264:				; XREF: Obj85_Index
0001A418 2268 0034                  		movea.l	$34(a0),a1
0001A41C 1011                       		move.b	(a1),d0
0001A41E B010                       		cmp.b	(a0),d0
0001A420 6600 FAE4                  		bne.w	Obj85_Delete
0001A424 117C 0007 001C             		move.b	#7,$1C(a0)
0001A42A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A430 6C00                       		bge.s	loc_1A280
0001A432 6000                       		bra.s	loc_1A2A6
0001A434                            ; ===========================================================================
0001A434                            
0001A434                            loc_1A280:
0001A434 4A69 0010                  		tst.w	$10(a1)
0001A438 6700                       		beq.s	loc_1A28C
0001A43A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A440                            
0001A440                            loc_1A28C:
0001A440 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001A444 4EB9 0000 A826             		jsr	AnimateSprite
0001A44A                            
0001A44A                            loc_1A296:
0001A44A 2268 0034                  		movea.l	$34(a0),a1
0001A44E 3169 0008 0008             		move.w	8(a1),8(a0)
0001A454 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A45A                            
0001A45A                            loc_1A2A6:
0001A45A 2268 0034                  		movea.l	$34(a0),a1
0001A45E 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A464 7003                       		moveq	#3,d0
0001A466 C028 0022                  		and.b	$22(a0),d0
0001A46A 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A470 8128 0001                  		or.b	d0,1(a0)
0001A474 4EF9 0000 D774             		jmp	DisplaySprite
0001A47A                            ; ===========================================================================
0001A47A                            
0001A47A                            loc_1A2C6:				; XREF: Obj85_Index
0001A47A 2268 0034                  		movea.l	$34(a0),a1
0001A47E 1011                       		move.b	(a1),d0
0001A480 B010                       		cmp.b	(a0),d0
0001A482 6600 FA82                  		bne.w	Obj85_Delete
0001A486 0CA9 0001 7ECA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A48E 6700                       		beq.s	loc_1A2E4
0001A490 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A496 60C2                       		bra.s	loc_1A2A6
0001A498                            ; ===========================================================================
0001A498                            
0001A498                            loc_1A2E4:
0001A498 117C 0001 001C             		move.b	#1,$1C(a0)
0001A49E 4A29 0021                  		tst.b	$21(a1)
0001A4A2 6F00                       		ble.s	loc_1A312
0001A4A4 117C 0006 001C             		move.b	#6,$1C(a0)
0001A4AA 217C 0001 7ECA 0004        		move.l	#Map_Eggman,4(a0)
0001A4B2 317C 0400 0002             		move.w	#$400,2(a0)
0001A4B8 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001A4BC 4EB9 0000 A826             		jsr	AnimateSprite
0001A4C2 6000 FF86                  		bra.w	loc_1A296
0001A4C6                            ; ===========================================================================
0001A4C6                            
0001A4C6                            loc_1A312:
0001A4C6 4A28 0001                  		tst.b	1(a0)
0001A4CA 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A4CE 6100 D558                  		bsr.w	BossDefeated
0001A4D2 117C 0002 0018             		move.b	#2,$18(a0)
0001A4D8 117C 0000 001C             		move.b	#0,$1C(a0)
0001A4DE 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A4E6 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A4EC 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A4F0 4EB9 0000 A826             		jsr	AnimateSprite
0001A4F6 6000 FF52                  		bra.w	loc_1A296
0001A4FA                            ; ===========================================================================
0001A4FA                            
0001A4FA                            loc_1A346:				; XREF: Obj85_Index
0001A4FA 08E8 0000 0022             		bset	#0,$22(a0)
0001A500 2268 0034                  		movea.l	$34(a0),a1
0001A504 0CA9 0001 7ECA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A50C 6700                       		beq.s	loc_1A35E
0001A50E 6000 FF4A                  		bra.w	loc_1A2A6
0001A512                            ; ===========================================================================
0001A512                            
0001A512                            loc_1A35E:
0001A512 3169 0008 0008             		move.w	8(a1),8(a0)
0001A518 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A51E 4A28 001E                  		tst.b	$1E(a0)
0001A522 6600                       		bne.s	loc_1A376
0001A524 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A52A                            
0001A52A                            loc_1A376:
0001A52A 5328 001E                  		subq.b	#1,$1E(a0)
0001A52E 6E00                       		bgt.s	loc_1A38A
0001A530 5228 001A                  		addq.b	#1,$1A(a0)
0001A534 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A53A 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A53E                            
0001A53E                            loc_1A38A:
0001A53E 6000 FF0A                  		bra.w	loc_1A296
0001A542                            ; ===========================================================================
0001A542                            
0001A542                            loc_1A38E:				; XREF: Obj85_Index
0001A542 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A548 3038 D008                  		move.w	($FFFFD008).w,d0
0001A54C 9068 0008                  		sub.w	8(a0),d0
0001A550 6500                       		bcs.s	loc_1A3A6
0001A552 4A28 0001                  		tst.b	1(a0)
0001A556 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A55A                            
0001A55A                            loc_1A3A6:
0001A55A 4EF9 0000 D774             		jmp	DisplaySprite
0001A560                            ; ===========================================================================
0001A560                            
0001A560                            loc_1A3AC:				; XREF: Obj85_Index
0001A560 117C 0000 001A             		move.b	#0,$1A(a0)
0001A566 08E8 0000 0022             		bset	#0,$22(a0)
0001A56C 2268 0034                  		movea.l	$34(a0),a1
0001A570 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A576 6600                       		bne.s	loc_1A3D0
0001A578 0CA9 0001 7ECA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A580 6700 F984                  		beq.w	Obj85_Delete
0001A584                            
0001A584                            loc_1A3D0:
0001A584 6000 FED4                  		bra.w	loc_1A2A6
0001A588                            ; ===========================================================================
0001A588                            Ani_obj85:
0001A588                            	include "_anim\obj85.asm"
0001A588                            ; ---------------------------------------------------------------------------
0001A588                            ; Animation script - Eggman (FZ)
0001A588                            ; ---------------------------------------------------------------------------
0001A588 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A58A 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A58E                            		even
0001A58E                            		even
0001A58E                            
0001A58E                            Map_Eggman2:
0001A58E                            	include "_maps\Eggman2.asm"
0001A58E                            ; ---------------------------------------------------------------------------
0001A58E                            ; Sprite mappings - Eggman (FZ)
0001A58E                            ; ---------------------------------------------------------------------------
0001A58E 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A590 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A592 06                         byte_1A3DE:	dc.b 6
0001A593 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A598 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A59D EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A5A2 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A5A7 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A5AC 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A5B1 06                         byte_1A3FD:	dc.b 6
0001A5B2 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A5B7 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A5BC EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A5C1 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A5C6 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A5CB 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A5D0                            		even
0001A5D0                            		even
0001A5D0                            
0001A5D0                            Map_FZBoss:
0001A5D0                            	include "_maps\FZ boss.asm"
0001A5D0                            ; ---------------------------------------------------------------------------
0001A5D0                            ; Sprite mappings - boss (FZ)
0001A5D0                            ; ---------------------------------------------------------------------------
0001A5D0 0000                       		dc.w byte_1A422-Map_FZBoss
0001A5D2 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A5D4 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A5D6 02                         byte_1A422:	dc.b 2
0001A5D7 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001A5DC 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001A5E1 03                         byte_1A42D:	dc.b 3
0001A5E2 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001A5E7 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001A5EC 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001A5F1 02                         byte_1A43D:	dc.b 2
0001A5F2 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001A5F7 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001A5FC                            		even
0001A5FC                            		even
0001A5FC                            
0001A5FC                            ; ===========================================================================
0001A5FC                            
0001A5FC                            Obj84_Delete:
0001A5FC 4EF9 0000 D7B0             		jmp	DeleteObject
0001A602                            ; ===========================================================================
0001A602                            ; ---------------------------------------------------------------------------
0001A602                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001A602                            ; ---------------------------------------------------------------------------
0001A602                            
0001A602                            Obj84:					; XREF: Obj_Index
0001A602 7000                       		moveq	#0,d0
0001A604 1028 0024                  		move.b	$24(a0),d0
0001A608 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001A60C 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001A610                            ; ===========================================================================
0001A610 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001A612 0000                       		dc.w loc_1A4CE-Obj84_Index
0001A614 0000                       		dc.w loc_1A57E-Obj84_Index
0001A616                            
0001A616 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001A61A 2550 0620                  		dc.w $2550, $620
0001A61E 2490 04C0                  		dc.w $2490, $4C0
0001A622 2510 04C0                  		dc.w $2510, $4C0
0001A626                            ; ===========================================================================
0001A626                            
0001A626                            Obj84_Main:				; XREF: Obj84_Index
0001A626 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001A62A 7000                       		moveq	#0,d0
0001A62C 1028 0028                  		move.b	$28(a0),d0
0001A630 D040                       		add.w	d0,d0
0001A632 D2C0                       		adda.w	d0,a1
0001A634 117C 0004 0001             		move.b	#4,1(a0)
0001A63A 08E8 0007 0001             		bset	#7,1(a0)
0001A640 08E8 0004 0001             		bset	#4,1(a0)
0001A646 317C 0300 0002             		move.w	#$300,2(a0)
0001A64C 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001A654 3159 0008                  		move.w	(a1)+,8(a0)
0001A658 3151 000C                  		move.w	(a1),$C(a0)
0001A65C 3159 0038                  		move.w	(a1)+,$38(a0)
0001A660 117C 0020 0016             		move.b	#$20,$16(a0)
0001A666 117C 0060 0017             		move.b	#$60,$17(a0)
0001A66C 117C 0020 0019             		move.b	#$20,$19(a0)
0001A672 117C 0060 0016             		move.b	#$60,$16(a0)
0001A678 117C 0003 0018             		move.b	#3,$18(a0)
0001A67E 5428 0024                  		addq.b	#2,$24(a0)
0001A682                            
0001A682                            loc_1A4CE:				; XREF: Obj84_Index
0001A682 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A688 6F00                       		ble.s	loc_1A4DC
0001A68A 08E8 0001 0001             		bset	#1,1(a0)
0001A690                            
0001A690                            loc_1A4DC:
0001A690 42A8 003C                  		clr.l	$3C(a0)
0001A694 4A28 0029                  		tst.b	$29(a0)
0001A698 6700                       		beq.s	loc_1A4EA
0001A69A 5428 0024                  		addq.b	#2,$24(a0)
0001A69E                            
0001A69E                            loc_1A4EA:
0001A69E 2028 003C                  		move.l	$3C(a0),d0
0001A6A2 2228 0038                  		move.l	$38(a0),d1
0001A6A6 D280                       		add.l	d0,d1
0001A6A8 4841                       		swap	d1
0001A6AA 3141 000C                  		move.w	d1,$C(a0)
0001A6AE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001A6B4 6600                       		bne.s	loc_1A524
0001A6B6 4A68 0030                  		tst.w	$30(a0)
0001A6BA 6A00                       		bpl.s	loc_1A524
0001A6BC 70F6                       		moveq	#-$A,d0
0001A6BE 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A6C4 6F00                       		ble.s	loc_1A514
0001A6C6 700E                       		moveq	#$E,d0
0001A6C8                            
0001A6C8                            loc_1A514:
0001A6C8 D240                       		add.w	d0,d1
0001A6CA 2268 0034                  		movea.l	$34(a0),a1
0001A6CE 3341 000C                  		move.w	d1,$C(a1)
0001A6D2 3368 0008 0008             		move.w	8(a0),8(a1)
0001A6D8                            
0001A6D8                            loc_1A524:
0001A6D8 323C 002B                  		move.w	#$2B,d1
0001A6DC 343C 0060                  		move.w	#$60,d2
0001A6E0 363C 0061                  		move.w	#$61,d3
0001A6E4 3828 0008                  		move.w	8(a0),d4
0001A6E8 4EB9 0000 FB44             		jsr	SolidObject
0001A6EE 7000                       		moveq	#0,d0
0001A6F0 3228 003C                  		move.w	$3C(a0),d1
0001A6F4 6A00                       		bpl.s	loc_1A550
0001A6F6 4441                       		neg.w	d1
0001A6F8 5141                       		subq.w	#8,d1
0001A6FA 6500                       		bcs.s	loc_1A55C
0001A6FC 5200                       		addq.b	#1,d0
0001A6FE E841                       		asr.w	#4,d1
0001A700 D041                       		add.w	d1,d0
0001A702 6000                       		bra.s	loc_1A55C
0001A704                            ; ===========================================================================
0001A704                            
0001A704                            loc_1A550:
0001A704 0441 0027                  		subi.w	#$27,d1
0001A708 6500                       		bcs.s	loc_1A55C
0001A70A 5200                       		addq.b	#1,d0
0001A70C E841                       		asr.w	#4,d1
0001A70E D041                       		add.w	d1,d0
0001A710                            
0001A710                            loc_1A55C:
0001A710 1140 001A                  		move.b	d0,$1A(a0)
0001A714 3038 D008                  		move.w	($FFFFD008).w,d0
0001A718 9068 0008                  		sub.w	8(a0),d0
0001A71C 6B00                       		bmi.s	loc_1A578
0001A71E 0440 0140                  		subi.w	#$140,d0
0001A722 6B00                       		bmi.s	loc_1A578
0001A724 4A28 0001                  		tst.b	1(a0)
0001A728 6A00 FED2                  		bpl.w	Obj84_Delete
0001A72C                            
0001A72C                            loc_1A578:
0001A72C 4EF9 0000 D774             		jmp	DisplaySprite
0001A732                            ; ===========================================================================
0001A732                            
0001A732                            loc_1A57E:				; XREF: Obj84_Index
0001A732 7000                       		moveq	#0,d0
0001A734 1028 0028                  		move.b	$28(a0),d0
0001A738 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001A73C 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001A740 6000 FF5C                  		bra.w	loc_1A4EA
0001A744                            ; ===========================================================================
0001A744 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001A746 0000                       		dc.w loc_1A598-off_1A590
0001A748 0000                       		dc.w loc_1A604-off_1A590
0001A74A 0000                       		dc.w loc_1A604-off_1A590
0001A74C                            ; ===========================================================================
0001A74C                            
0001A74C                            loc_1A598:				; XREF: off_1A590
0001A74C 4A28 0029                  		tst.b	$29(a0)
0001A750 6600                       		bne.s	loc_1A5D4
0001A752 2268 0034                  		movea.l	$34(a0),a1
0001A756 4A29 0021                  		tst.b	$21(a1)
0001A75A 6600                       		bne.s	loc_1A5B4
0001A75C 6100 D2CA                  		bsr.w	BossDefeated
0001A760 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001A768                            
0001A768                            loc_1A5B4:
0001A768 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001A770 6400                       		bcc.s	locret_1A602
0001A772 42A8 003C                  		clr.l	$3C(a0)
0001A776 2268 0034                  		movea.l	$34(a0),a1
0001A77A 5369 0032                  		subq.w	#1,$32(a1)
0001A77E 4269 0030                  		clr.w	$30(a1)
0001A782 5528 0024                  		subq.b	#2,$24(a0)
0001A786 4E75                       		rts	
0001A788                            ; ===========================================================================
0001A788                            
0001A788                            loc_1A5D4:
0001A788 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001A78E 6C00                       		bge.s	loc_1A5E4
0001A790 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001A798                            
0001A798                            loc_1A5E4:
0001A798 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001A7A0 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001A7A6 6E00                       		bgt.s	locret_1A602
0001A7A8 4268 003E                  		clr.w	$3E(a0)
0001A7AC 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001A7B2 4228 0029                  		clr.b	$29(a0)
0001A7B6                            
0001A7B6                            locret_1A602:
0001A7B6 4E75                       		rts	
0001A7B8                            ; ===========================================================================
0001A7B8                            
0001A7B8                            loc_1A604:				; XREF: off_1A590
0001A7B8 08E8 0001 0001             		bset	#1,1(a0)
0001A7BE 4A28 0029                  		tst.b	$29(a0)
0001A7C2 6600                       		bne.s	loc_1A646
0001A7C4 2268 0034                  		movea.l	$34(a0),a1
0001A7C8 4A29 0021                  		tst.b	$21(a1)
0001A7CC 6600                       		bne.s	loc_1A626
0001A7CE 6100 D258                  		bsr.w	BossDefeated
0001A7D2 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001A7DA                            
0001A7DA                            loc_1A626:
0001A7DA 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001A7E2 6400                       		bcc.s	locret_1A674
0001A7E4 42A8 003C                  		clr.l	$3C(a0)
0001A7E8 2268 0034                  		movea.l	$34(a0),a1
0001A7EC 5369 0032                  		subq.w	#1,$32(a1)
0001A7F0 4269 0030                  		clr.w	$30(a1)
0001A7F4 5528 0024                  		subq.b	#2,$24(a0)
0001A7F8 4E75                       		rts	
0001A7FA                            ; ===========================================================================
0001A7FA                            
0001A7FA                            loc_1A646:
0001A7FA 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001A800 6D00                       		blt.s	loc_1A656
0001A802 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001A80A                            
0001A80A                            loc_1A656:
0001A80A 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001A812 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001A818 6D00                       		blt.s	locret_1A674
0001A81A 4268 003E                  		clr.w	$3E(a0)
0001A81E 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001A824 4228 0029                  		clr.b	$29(a0)
0001A828                            
0001A828                            locret_1A674:
0001A828 4E75                       		rts	
0001A82A                            ; ===========================================================================
0001A82A                            ; ---------------------------------------------------------------------------
0001A82A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001A82A                            ; ---------------------------------------------------------------------------
0001A82A                            Map_obj84:
0001A82A                            	include "_maps\obj84.asm"
0001A82A                            ; ---------------------------------------------------------------------------
0001A82A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001A82A                            ; ---------------------------------------------------------------------------
0001A82A 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001A82E 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001A832 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001A836 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001A83A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001A83E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001A842 06                         byte_1A68E:	dc.b 6
0001A843 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A848 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A84D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A852 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A857 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A85C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A861 08                         byte_1A6AD:	dc.b 8
0001A862 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A867 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A86C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A871 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A876 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A87B B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A880 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A885 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A88A 0A                         byte_1A6D6:	dc.b $A
0001A88B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A890 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A895 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A89A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A89F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A8A4 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A8A9 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A8AE D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A8B3 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A8B8 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A8BD 0C                         byte_1A709:	dc.b $C
0001A8BE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A8C3 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A8C8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A8CD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A8D2 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A8D7 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A8DC D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A8E1 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A8E6 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A8EB F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A8F0 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A8F5 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A8FA 0D                         byte_1A746:	dc.b $D
0001A8FB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A900 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A905 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A90A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A90F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A914 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A919 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A91E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A923 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A928 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A92D 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A932 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A937 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001A93C 0E                         byte_1A788:	dc.b $E
0001A93D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A942 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A947 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A94C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A951 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A956 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A95B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A960 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A965 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A96A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A96F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A974 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A979 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001A97E 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001A983 02                         byte_1A7CF:	dc.b 2
0001A984 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001A989 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001A98E                            		even
0001A98E                            		even
0001A98E                            
0001A98E                            ; ===========================================================================
0001A98E                            ; ---------------------------------------------------------------------------
0001A98E                            ; Object 86 - energy balls (FZ)
0001A98E                            ; ---------------------------------------------------------------------------
0001A98E                            
0001A98E                            Obj86:					; XREF: Obj_Index
0001A98E 7000                       		moveq	#0,d0
0001A990 1028 0024                  		move.b	$24(a0),d0
0001A994 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001A998 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001A99C                            ; ===========================================================================
0001A99C 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001A99E 0000                       		dc.w Obj86_Generator-Obj86_Index
0001A9A0 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001A9A2 0000                       		dc.w loc_1A962-Obj86_Index
0001A9A4 0000                       		dc.w loc_1A982-Obj86_Index
0001A9A6                            ; ===========================================================================
0001A9A6                            
0001A9A6                            Obj86_Main:				; XREF: Obj86_Index
0001A9A6 317C 2588 0008             		move.w	#$2588,8(a0)
0001A9AC 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A9B2 317C 0300 0002             		move.w	#$300,2(a0)
0001A9B8 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001A9C0 117C 0000 001C             		move.b	#0,$1C(a0)
0001A9C6 117C 0003 0018             		move.b	#3,$18(a0)
0001A9CC 117C 0008 0017             		move.b	#8,$17(a0)
0001A9D2 117C 0008 0016             		move.b	#8,$16(a0)
0001A9D8 117C 0004 0001             		move.b	#4,1(a0)
0001A9DE 08E8 0007 0001             		bset	#7,1(a0)
0001A9E4 5428 0024                  		addq.b	#2,$24(a0)
0001A9E8                            
0001A9E8                            Obj86_Generator:			; XREF: Obj86_Index
0001A9E8 2268 0034                  		movea.l	$34(a0),a1
0001A9EC 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001A9F2 6600                       		bne.s	loc_1A850
0001A9F4 10BC 003F                  		move.b	#$3F,(a0)
0001A9F8 117C 0000 0024             		move.b	#0,$24(a0)
0001A9FE 4EF9 0000 D774             		jmp	DisplaySprite
0001AA04                            ; ===========================================================================
0001AA04                            
0001AA04                            loc_1A850:
0001AA04 117C 0000 001C             		move.b	#0,$1C(a0)
0001AA0A 4A28 0029                  		tst.b	$29(a0)
0001AA0E 6700                       		beq.s	loc_1A86C
0001AA10 5428 0024                  		addq.b	#2,$24(a0)
0001AA14 117C 0001 001C             		move.b	#1,$1C(a0)
0001AA1A 117C 003E 0028             		move.b	#$3E,$28(a0)
0001AA20                            
0001AA20                            loc_1A86C:
0001AA20 323C 0013                  		move.w	#$13,d1
0001AA24 343C 0008                  		move.w	#8,d2
0001AA28 363C 0011                  		move.w	#$11,d3
0001AA2C 3828 0008                  		move.w	8(a0),d4
0001AA30 4EB9 0000 FB44             		jsr	SolidObject
0001AA36 3038 D008                  		move.w	($FFFFD008).w,d0
0001AA3A 9068 0008                  		sub.w	8(a0),d0
0001AA3E 6B00                       		bmi.s	loc_1A89A
0001AA40 0440 0140                  		subi.w	#$140,d0
0001AA44 6B00                       		bmi.s	loc_1A89A
0001AA46 4A28 0001                  		tst.b	1(a0)
0001AA4A 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AA4E                            
0001AA4E                            loc_1A89A:
0001AA4E 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AA52 4EB9 0000 A826             		jsr	AnimateSprite
0001AA58 4EF9 0000 D774             		jmp	DisplaySprite
0001AA5E                            ; ===========================================================================
0001AA5E                            
0001AA5E                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AA5E 4A28 0029                  		tst.b	$29(a0)
0001AA62 6700 0000                  		beq.w	loc_1A954
0001AA66 4228 0029                  		clr.b	$29(a0)
0001AA6A D068 0030                  		add.w	$30(a0),d0
0001AA6E 0240 001E                  		andi.w	#$1E,d0
0001AA72 D4C0                       		adda.w	d0,a2
0001AA74 5868 0030                  		addq.w	#4,$30(a0)
0001AA78 4268 0032                  		clr.w	$32(a0)
0001AA7C 7403                       		moveq	#3,d2
0001AA7E                            
0001AA7E                            Obj86_Loop:
0001AA7E 4EB9 0000 DC10             		jsr	SingleObjLoad2
0001AA84 6600 0000                  		bne.w	loc_1A954
0001AA88 12BC 0086                  		move.b	#$86,(a1)
0001AA8C 3368 0008 0008             		move.w	8(a0),8(a1)
0001AA92 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AA98 137C 0008 0024             		move.b	#8,$24(a1)
0001AA9E 337C 2300 0002             		move.w	#$2300,2(a1)
0001AAA4 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AAAC 137C 000C 0016             		move.b	#$C,$16(a1)
0001AAB2 137C 000C 0017             		move.b	#$C,$17(a1)
0001AAB8 137C 0000 0020             		move.b	#0,$20(a1)
0001AABE 137C 0003 0018             		move.b	#3,$18(a1)
0001AAC4 337C 003E 0028             		move.w	#$3E,$28(a1)
0001AACA 137C 0004 0001             		move.b	#4,1(a1)
0001AAD0 08E9 0007 0001             		bset	#7,1(a1)
0001AAD6 2348 0034                  		move.l	a0,$34(a1)
0001AADA 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001AAE0 3228 0032                  		move.w	$32(a0),d1
0001AAE4 C3FC FFB1                  		muls.w	#-$4F,d1
0001AAE8 0641 2578                  		addi.w	#$2578,d1
0001AAEC 0240 001F                  		andi.w	#$1F,d0
0001AAF0 0440 0010                  		subi.w	#$10,d0
0001AAF4 D041                       		add.w	d1,d0
0001AAF6 3340 0030                  		move.w	d0,$30(a1)
0001AAFA 5268 0032                  		addq.w	#1,$32(a0)
0001AAFE 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001AB04 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001AB08                            
0001AB08                            loc_1A954:
0001AB08 4A68 0032                  		tst.w	$32(a0)
0001AB0C 6600                       		bne.s	loc_1A95E
0001AB0E 5428 0024                  		addq.b	#2,$24(a0)
0001AB12                            
0001AB12                            loc_1A95E:
0001AB12 6000 FF0C                  		bra.w	loc_1A86C
0001AB16                            ; ===========================================================================
0001AB16                            
0001AB16                            loc_1A962:				; XREF: Obj86_Index
0001AB16 117C 0002 001C             		move.b	#2,$1C(a0)
0001AB1C 4A68 0038                  		tst.w	$38(a0)
0001AB20 6600                       		bne.s	loc_1A97E
0001AB22 117C 0002 0024             		move.b	#2,$24(a0)
0001AB28 2268 0034                  		movea.l	$34(a0),a1
0001AB2C 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AB32                            
0001AB32                            loc_1A97E:
0001AB32 6000 FEEC                  		bra.w	loc_1A86C
0001AB36                            ; ===========================================================================
0001AB36                            
0001AB36                            loc_1A982:				; XREF: Obj86_Index
0001AB36 7000                       		moveq	#0,d0
0001AB38 1028 0025                  		move.b	$25(a0),d0
0001AB3C 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AB40 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AB44 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AB48 4EB9 0000 A826             		jsr	AnimateSprite
0001AB4E 4EF9 0000 D774             		jmp	DisplaySprite
0001AB54                            ; ===========================================================================
0001AB54 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AB56 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AB58 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AB5A                            ; ===========================================================================
0001AB5A                            
0001AB5A                            loc_1A9A6:				; XREF: Obj86_Index2
0001AB5A 3028 0030                  		move.w	$30(a0),d0
0001AB5E 9068 0008                  		sub.w	8(a0),d0
0001AB62 E940                       		asl.w	#4,d0
0001AB64 3140 0010                  		move.w	d0,$10(a0)
0001AB68 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AB6E 5428 0025                  		addq.b	#2,$25(a0)
0001AB72 4E75                       		rts	
0001AB74                            ; ===========================================================================
0001AB74                            
0001AB74                            loc_1A9C0:				; XREF: Obj86_Index2
0001AB74 4A68 0010                  		tst.w	$10(a0)
0001AB78 6700                       		beq.s	loc_1A9E6
0001AB7A 4EB9 0000 D74E             		jsr	SpeedToPos
0001AB80 3028 0008                  		move.w	8(a0),d0
0001AB84 9068 0030                  		sub.w	$30(a0),d0
0001AB88 6400                       		bcc.s	loc_1A9E6
0001AB8A 4268 0010                  		clr.w	$10(a0)
0001AB8E D168 0008                  		add.w	d0,8(a0)
0001AB92 2268 0034                  		movea.l	$34(a0),a1
0001AB96 5369 0032                  		subq.w	#1,$32(a1)
0001AB9A                            
0001AB9A                            loc_1A9E6:
0001AB9A 117C 0000 001C             		move.b	#0,$1C(a0)
0001ABA0 5368 0028                  		subq.w	#1,$28(a0)
0001ABA4 6600                       		bne.s	locret_1AA1C
0001ABA6 5428 0025                  		addq.b	#2,$25(a0)
0001ABAA 117C 0001 001C             		move.b	#1,$1C(a0)
0001ABB0 117C 009A 0020             		move.b	#$9A,$20(a0)
0001ABB6 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001ABBC 7000                       		moveq	#0,d0
0001ABBE 3038 D008                  		move.w	($FFFFD008).w,d0
0001ABC2 9068 0008                  		sub.w	8(a0),d0
0001ABC6 3140 0010                  		move.w	d0,$10(a0)
0001ABCA 317C 0140 0012             		move.w	#$140,$12(a0)
0001ABD0                            
0001ABD0                            locret_1AA1C:
0001ABD0 4E75                       		rts	
0001ABD2                            ; ===========================================================================
0001ABD2                            
0001ABD2                            loc_1AA1E:				; XREF: Obj86_Index2
0001ABD2 4EB9 0000 D74E             		jsr	SpeedToPos
0001ABD8 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001ABDE 6400                       		bcc.s	loc_1AA34
0001ABE0 5368 0028                  		subq.w	#1,$28(a0)
0001ABE4 6700                       		beq.s	loc_1AA34
0001ABE6 4E75                       		rts	
0001ABE8                            ; ===========================================================================
0001ABE8                            
0001ABE8                            loc_1AA34:
0001ABE8 2268 0034                  		movea.l	$34(a0),a1
0001ABEC 5369 0038                  		subq.w	#1,$38(a1)
0001ABF0 6000 FA0A                  		bra.w	Obj84_Delete
0001ABF4                            ; ===========================================================================
0001ABF4                            Ani_obj86:
0001ABF4                            	include "_anim\obj86.asm"
0001ABF4                            ; ---------------------------------------------------------------------------
0001ABF4                            ; Animation script - energy ball launcher (FZ)
0001ABF4                            ; ---------------------------------------------------------------------------
0001ABF4 0000                       		dc.w byte_1AA46-Ani_obj86
0001ABF6 0000                       		dc.w byte_1AA4A-Ani_obj86
0001ABF8 0000                       		dc.w byte_1AA50-Ani_obj86
0001ABFA 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001ABFE 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001AC04 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001AC0A                            		even
0001AC0A                            		even
0001AC0A                            
0001AC0A                            ; ---------------------------------------------------------------------------
0001AC0A                            ; Sprite mappings - energy ball	launcher (FZ)
0001AC0A                            ; ---------------------------------------------------------------------------
0001AC0A                            Map_obj86:
0001AC0A                            	include "_maps\obj86.asm"
0001AC0A                            ; ---------------------------------------------------------------------------
0001AC0A                            ; Sprite mappings - energy ball	launcher (FZ)
0001AC0A                            ; ---------------------------------------------------------------------------
0001AC0A 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001AC0E 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001AC12 01                         byte_1AA5E:	dc.b 1
0001AC13 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001AC18 01                         byte_1AA64:	dc.b 1
0001AC19 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001AC1E 01                         byte_1AA6A:	dc.b 1
0001AC1F F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001AC24 01                         byte_1AA70:	dc.b 1
0001AC25 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001AC2A                            		even
0001AC2A                            		even
0001AC2A                            
0001AC2A                            Ani_obj86a:
0001AC2A                            	include "_anim\obj86a.asm"
0001AC2A                            ; ---------------------------------------------------------------------------
0001AC2A                            ; Animation script - energy balls (FZ)
0001AC2A                            ; ---------------------------------------------------------------------------
0001AC2A 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001AC2C 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001AC2E 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001AC3D 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001AC4C 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001AC50 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001AC5A                            		even
0001AC5A                            		even
0001AC5A                            
0001AC5A                            ; ---------------------------------------------------------------------------
0001AC5A                            ; Sprite mappings - energy balls (FZ)
0001AC5A                            ; ---------------------------------------------------------------------------
0001AC5A                            Map_obj86a:
0001AC5A                            	include "_maps\obj86a.asm"
0001AC5A                            ; ---------------------------------------------------------------------------
0001AC5A                            ; Sprite mappings - energy balls (FZ)
0001AC5A                            ; ---------------------------------------------------------------------------
0001AC5A 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001AC5E 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001AC62 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001AC66 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001AC6A 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001AC6E 0000                       		dc.w byte_1AB20-Map_obj86a
0001AC70 02                         byte_1AABC:	dc.b 2
0001AC71 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001AC76 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001AC7B 02                         byte_1AAC7:	dc.b 2
0001AC7C F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001AC81 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001AC86 02                         byte_1AAD2:	dc.b 2
0001AC87 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001AC8C 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001AC91 02                         byte_1AADD:	dc.b 2
0001AC92 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001AC97 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001AC9C 02                         byte_1AAE8:	dc.b 2
0001AC9D F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001ACA2 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001ACA7 02                         byte_1AAF3:	dc.b 2
0001ACA8 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001ACAD F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001ACB2 01                         byte_1AAFE:	dc.b 1
0001ACB3 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001ACB8 01                         byte_1AB04:	dc.b 1
0001ACB9 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001ACBE 02                         byte_1AB0A:	dc.b 2
0001ACBF F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001ACC4 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001ACC9 02                         byte_1AB15:	dc.b 2
0001ACCA F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001ACCF F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001ACD4 00                         byte_1AB20:	dc.b 0
0001ACD6 00                         		even
0001ACD6 00                         		even
0001ACD6                            
0001ACD6                            ; ===========================================================================
0001ACD6                            ; ---------------------------------------------------------------------------
0001ACD6                            ; Object 3E - prison capsule
0001ACD6                            ; ---------------------------------------------------------------------------
0001ACD6                            
0001ACD6                            Obj3E:					; XREF: Obj_Index
0001ACD6 7000                       		moveq	#0,d0
0001ACD8 1028 0024                  		move.b	$24(a0),d0
0001ACDC 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001ACE0 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001ACE4 3028 0008                  		move.w	8(a0),d0
0001ACE8 0240 FF80                  		andi.w	#$FF80,d0
0001ACEC 3238 F700                  		move.w	($FFFFF700).w,d1
0001ACF0 0441 0080                  		subi.w	#$80,d1
0001ACF4 0241 FF80                  		andi.w	#$FF80,d1
0001ACF8 9041                       		sub.w	d1,d0
0001ACFA 0C40 0280                  		cmpi.w	#$280,d0
0001ACFE 6200                       		bhi.s	Obj3E_Delete
0001AD00 4EF9 0000 D774             		jmp	DisplaySprite
0001AD06                            ; ===========================================================================
0001AD06                            
0001AD06                            Obj3E_Delete:
0001AD06 4EF9 0000 D7B0             		jmp	DeleteObject
0001AD0C                            ; ===========================================================================
0001AD0C 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001AD0E 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001AD10 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001AD12 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AD14 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AD16 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AD18 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001AD1A 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001AD1C                            
0001AD1C 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001AD20 040C 0501                  		dc.b 4,	$C, 5, 1
0001AD24 0610 0403                  		dc.b 6,	$10, 4,	3
0001AD28 0810 0305                  		dc.b 8,	$10, 3,	5
0001AD2C                            ; ===========================================================================
0001AD2C                            
0001AD2C                            Obj3E_Main:				; XREF: Obj3E_Index
0001AD2C 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001AD34 317C 049D 0002             		move.w	#$49D,2(a0)
0001AD3A 117C 0004 0001             		move.b	#4,1(a0)
0001AD40 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001AD46 7000                       		moveq	#0,d0
0001AD48 1028 0028                  		move.b	$28(a0),d0
0001AD4C E548                       		lsl.w	#2,d0
0001AD4E 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001AD52 1159 0024                  		move.b	(a1)+,$24(a0)
0001AD56 1159 0019                  		move.b	(a1)+,$19(a0)
0001AD5A 1159 0018                  		move.b	(a1)+,$18(a0)
0001AD5E 1159 001A                  		move.b	(a1)+,$1A(a0)
0001AD62 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001AD66 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001AD68 117C 0006 0020             		move.b	#6,$20(a0)
0001AD6E 117C 0008 0021             		move.b	#8,$21(a0)
0001AD74                            
0001AD74                            Obj3E_Not02:
0001AD74 4E75                       		rts	
0001AD76                            ; ===========================================================================
0001AD76                            
0001AD76                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001AD76 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001AD7C 6700                       		beq.s	Obj3E_ChkOpened
0001AD7E 323C 002B                  		move.w	#$2B,d1
0001AD82 343C 0018                  		move.w	#$18,d2
0001AD86 363C 0018                  		move.w	#$18,d3
0001AD8A 3828 0008                  		move.w	8(a0),d4
0001AD8E 4EF9 0000 FB44             		jmp	SolidObject
0001AD94                            ; ===========================================================================
0001AD94                            
0001AD94                            Obj3E_ChkOpened:
0001AD94 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001AD98 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001AD9A 4228 0025                  		clr.b	$25(a0)
0001AD9E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001ADA4 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001ADAA                            
0001ADAA                            Obj3E_DoOpen:
0001ADAA 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001ADB0 4E75                       		rts	
0001ADB2                            ; ===========================================================================
0001ADB2                            
0001ADB2                            Obj3E_Switched:				; XREF: Obj3E_Index
0001ADB2 323C 0017                  		move.w	#$17,d1
0001ADB6 343C 0008                  		move.w	#8,d2
0001ADBA 363C 0008                  		move.w	#8,d3
0001ADBE 3828 0008                  		move.w	8(a0),d4
0001ADC2 4EB9 0000 FB44             		jsr	SolidObject
0001ADC8 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001ADCE 4EB9 0000 A826             		jsr	AnimateSprite
0001ADD4 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001ADDA 4A28 0025                  		tst.b	$25(a0)
0001ADDE 6700                       		beq.s	locret_1AC60
0001ADE0 5068 000C                  		addq.w	#8,$C(a0)
0001ADE4 117C 000A 0024             		move.b	#$A,$24(a0)
0001ADEA 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001ADF0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001ADF4 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001ADF8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001ADFE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001AE04 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001AE06 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001AE0C 6000                       		bra.s	Obj3E_ContinueCode
0001AE0E                            
0001AE0E                            Obj3E_MoveLeft:
0001AE0E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001AE14                            
0001AE14                            Obj3E_ContinueCode:
0001AE14 4228 0025                  		clr.b	$25(a0)
0001AE18 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AE1E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001AE24                            
0001AE24                            locret_1AC60:
0001AE24 4E75                       		rts	
0001AE26                            ; ===========================================================================
0001AE26                            
0001AE26                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001AE26 7007                       		moveq	#7,d0
0001AE28 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001AE2C 6600                       		bne.s	loc_1ACA0
0001AE2E 4EB9 0000 DBFA             		jsr	SingleObjLoad
0001AE34 6600                       		bne.s	loc_1ACA0
0001AE36 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001AE3A 3368 0008 0008             		move.w	8(a0),8(a1)
0001AE40 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AE46 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001AE4C 7200                       		moveq	#0,d1
0001AE4E 1200                       		move.b	d0,d1
0001AE50 E409                       		lsr.b	#2,d1
0001AE52 0441 0020                  		subi.w	#$20,d1
0001AE56 D369 0008                  		add.w	d1,8(a1)
0001AE5A E048                       		lsr.w	#8,d0
0001AE5C E608                       		lsr.b	#3,d0
0001AE5E D169 000C                  		add.w	d0,$C(a1)
0001AE62                            
0001AE62                            loc_1ACA0:
0001AE62 5368 001E                  		subq.w	#1,$1E(a0)
0001AE66 6700                       		beq.s	Obj3E_MakeAnimal
0001AE68 4E75                       		rts	
0001AE6A                            ; ===========================================================================
0001AE6A                            
0001AE6A                            Obj3E_MakeAnimal:
0001AE6A 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001AE70 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001AE76 117C 0006 001A             		move.b	#6,$1A(a0)
0001AE7C 317C 0096 001E             		move.w	#$96,$1E(a0)
0001AE82 0668 0020 000C             		addi.w	#$20,$C(a0)
0001AE88 7C07                       		moveq	#7,d6
0001AE8A 3A3C 009A                  		move.w	#$9A,d5
0001AE8E 78E4                       		moveq	#-$1C,d4
0001AE90                            
0001AE90                            Obj3E_Loop:
0001AE90 4EB9 0000 DBFA             		jsr	SingleObjLoad
0001AE96 6600                       		bne.s	locret_1ACF8
0001AE98 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001AE9C 3368 0008 0008             		move.w	8(a0),8(a1)
0001AEA2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AEA8 D969 0008                  		add.w	d4,8(a1)
0001AEAC 5E44                       		addq.w	#7,d4
0001AEAE 3345 0036                  		move.w	d5,$36(a1)
0001AEB2 5145                       		subq.w	#8,d5
0001AEB4 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001AEB8                            
0001AEB8                            locret_1ACF8:
0001AEB8 4E75                       		rts	
0001AEBA                            ; ===========================================================================
0001AEBA                            
0001AEBA                            Obj3E_Animals:				; XREF: Obj3E_Index
0001AEBA 7007                       		moveq	#7,d0
0001AEBC C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001AEC0 6600                       		bne.s	loc_1AD38
0001AEC2 4EB9 0000 DBFA             		jsr	SingleObjLoad
0001AEC8 6600                       		bne.s	loc_1AD38
0001AECA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001AECE 3368 0008 0008             		move.w	8(a0),8(a1)
0001AED4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AEDA 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001AEE0 0240 001F                  		andi.w	#$1F,d0
0001AEE4 5D40                       		subq.w	#6,d0
0001AEE6 4A41                       		tst.w	d1
0001AEE8 6A00                       		bpl.s	loc_1AD2E
0001AEEA 4440                       		neg.w	d0
0001AEEC                            
0001AEEC                            loc_1AD2E:
0001AEEC D169 0008                  		add.w	d0,8(a1)
0001AEF0 337C 000C 0036             		move.w	#$C,$36(a1)
0001AEF6                            
0001AEF6                            loc_1AD38:
0001AEF6 5368 001E                  		subq.w	#1,$1E(a0)
0001AEFA 6600                       		bne.s	locret_1AD48
0001AEFC 5428 0024                  		addq.b	#2,$24(a0)
0001AF00 317C 00B4 001E             		move.w	#180,$1E(a0)
0001AF06                            
0001AF06                            locret_1AD48:
0001AF06 4E75                       		rts	
0001AF08                            ; ===========================================================================
0001AF08                            
0001AF08                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001AF08 703E                       		moveq	#$3E,d0
0001AF0A 7228                       		moveq	#$28,d1
0001AF0C 7440                       		moveq	#$40,d2
0001AF0E 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001AF12                            
0001AF12                            Obj3E_FindObj28:
0001AF12 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001AF14 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001AF16 D2C2                       		adda.w	d2,a1		; next object RAM
0001AF18 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001AF1C                            
0001AF1C 4EB9 0000 EE00             		jsr	GotThroughAct
0001AF22 4EF9 0000 D7B0             		jmp	DeleteObject
0001AF28                            ; ===========================================================================
0001AF28                            
0001AF28                            Obj3E_Obj28Found:
0001AF28 4E75                       		rts	
0001AF2A                            ; ===========================================================================
0001AF2A                            Ani_obj3E:
0001AF2A                            	include "_anim\obj3E.asm"
0001AF2A                            ; ---------------------------------------------------------------------------
0001AF2A                            ; Animation script - prison capsule
0001AF2A                            ; ---------------------------------------------------------------------------
0001AF2A 0000                       		dc.w byte_1AD70-Ani_obj3E
0001AF2C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001AF2E 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001AF32                            		even
0001AF32                            		even
0001AF32                            
0001AF32                            ; ---------------------------------------------------------------------------
0001AF32                            ; Sprite mappings - prison capsule
0001AF32                            ; ---------------------------------------------------------------------------
0001AF32                            Map_obj3E:
0001AF32                            	include "_maps\obj3E.asm"
0001AF32                            ; ---------------------------------------------------------------------------
0001AF32                            ; Sprite mappings - prison capsule
0001AF32                            ; ---------------------------------------------------------------------------
0001AF32 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001AF36 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001AF3A 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001AF3E 0000                       		dc.w byte_1ADE2-Map_obj3E
0001AF40 07                         byte_1AD82:	dc.b 7
0001AF41 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001AF46 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001AF4B E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001AF50 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001AF55 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001AF5A 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001AF5F 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001AF64 01                         byte_1ADA6:	dc.b 1
0001AF65 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001AF6A 06                         byte_1ADAC:	dc.b 6
0001AF6B 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001AF70 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001AF75 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001AF7A 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001AF7F 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001AF84 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001AF89 01                         byte_1ADCB:	dc.b 1
0001AF8A F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001AF8F 02                         byte_1ADD1:	dc.b 2
0001AF90 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001AF95 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001AF9A 01                         byte_1ADDC:	dc.b 1
0001AF9B F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001AFA0 00                         byte_1ADE2:	dc.b 0
0001AFA2 00                         		even
0001AFA2 00                         		even
0001AFA2                            
0001AFA2                            ; ---------------------------------------------------------------------------
0001AFA2                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001AFA2                            ; ---------------------------------------------------------------------------
0001AFA2                            
0001AFA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AFA2                            
0001AFA2                            
0001AFA2                            TouchResponse:				; XREF: Obj01
0001AFA2 4E71                       		nop	
0001AFA4 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001AFA8 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001AFAC 5142                       		subq.w	#8,d2
0001AFAE 7A00                       		moveq	#0,d5
0001AFB0 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001AFB4 5705                       		subq.b	#3,d5
0001AFB6 9645                       		sub.w	d5,d3
0001AFB8 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001AFBE 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001AFC0 0643 000C                  		addi.w	#$C,d3
0001AFC4 7A0A                       		moveq	#$A,d5
0001AFC6                            
0001AFC6                            Touch_NoDuck:
0001AFC6 383C 0010                  		move.w	#$10,d4
0001AFCA DA45                       		add.w	d5,d5
0001AFCC 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001AFD0 3C3C 005F                  		move.w	#$5F,d6
0001AFD4                            
0001AFD4                            Touch_Loop:
0001AFD4 4A29 0001                  		tst.b	1(a1)
0001AFD8 6A00                       		bpl.s	Touch_NextObj
0001AFDA 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001AFDE 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001AFE0                            
0001AFE0                            Touch_NextObj:
0001AFE0 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001AFE4 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001AFE8                            
0001AFE8 7000                       		moveq	#0,d0
0001AFEA 4E75                       		rts	
0001AFEC                            ; ===========================================================================
0001AFEC 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001AFEE 0C14                       		dc.b   $C, $14
0001AFF0 140C                       		dc.b  $14,  $C
0001AFF2 0410                       		dc.b	4, $10
0001AFF4 0C12                       		dc.b   $C, $12
0001AFF6 1010                       		dc.b  $10, $10
0001AFF8 0606                       		dc.b	6,   6
0001AFFA 180C                       		dc.b  $18,  $C
0001AFFC 0C10                       		dc.b   $C, $10
0001AFFE 100C                       		dc.b  $10,  $C
0001B000 0808                       		dc.b	8,   8
0001B002 1410                       		dc.b  $14, $10
0001B004 1408                       		dc.b  $14,   8
0001B006 0E0E                       		dc.b   $E,  $E
0001B008 1818                       		dc.b  $18, $18
0001B00A 2810                       		dc.b  $28, $10
0001B00C 1018                       		dc.b  $10, $18
0001B00E 0810                       		dc.b	8, $10
0001B010 2070                       		dc.b  $20, $70
0001B012 4020                       		dc.b  $40, $20
0001B014 8020                       		dc.b  $80, $20
0001B016 2020                       		dc.b  $20, $20
0001B018 0808                       		dc.b	8,   8
0001B01A 0404                       		dc.b	4,   4
0001B01C 2008                       		dc.b  $20,   8
0001B01E 0C0C                       		dc.b   $C,  $C
0001B020 0804                       		dc.b	8,   4
0001B022 1804                       		dc.b  $18,   4
0001B024 2804                       		dc.b  $28,   4
0001B026 0408                       		dc.b	4,   8
0001B028 0418                       		dc.b	4, $18
0001B02A 0428                       		dc.b	4, $28
0001B02C 0420                       		dc.b	4, $20
0001B02E 1818                       		dc.b  $18, $18
0001B030 0C18                       		dc.b   $C, $18
0001B032 4808                       		dc.b  $48,   8
0001B034                            ; ===========================================================================
0001B034                            
0001B034                            Touch_Height:				; XREF: TouchResponse
0001B034 0240 003F                  		andi.w	#$3F,d0
0001B038 D040                       		add.w	d0,d0
0001B03A 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B03E 7200                       		moveq	#0,d1
0001B040 121A                       		move.b	(a2)+,d1
0001B042 3029 0008                  		move.w	8(a1),d0
0001B046 9041                       		sub.w	d1,d0
0001B048 9042                       		sub.w	d2,d0
0001B04A 6400                       		bcc.s	loc_1AE98
0001B04C D241                       		add.w	d1,d1
0001B04E D041                       		add.w	d1,d0
0001B050 6500                       		bcs.s	Touch_Width
0001B052 6000 FF8C                  		bra.w	Touch_NextObj
0001B056                            ; ===========================================================================
0001B056                            
0001B056                            loc_1AE98:
0001B056 B044                       		cmp.w	d4,d0
0001B058 6200 FF86                  		bhi.w	Touch_NextObj
0001B05C                            
0001B05C                            Touch_Width:
0001B05C 7200                       		moveq	#0,d1
0001B05E 121A                       		move.b	(a2)+,d1
0001B060 3029 000C                  		move.w	$C(a1),d0
0001B064 9041                       		sub.w	d1,d0
0001B066 9043                       		sub.w	d3,d0
0001B068 6400                       		bcc.s	loc_1AEB6
0001B06A D241                       		add.w	d1,d1
0001B06C D240                       		add.w	d0,d1
0001B06E 6500                       		bcs.s	Touch_ChkValue
0001B070 6000 FF6E                  		bra.w	Touch_NextObj
0001B074                            ; ===========================================================================
0001B074                            
0001B074                            loc_1AEB6:
0001B074 B045                       		cmp.w	d5,d0
0001B076 6200 FF68                  		bhi.w	Touch_NextObj
0001B07A                            
0001B07A                            Touch_ChkValue:
0001B07A 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B07E 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B082 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B086 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B08A 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B08E 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B090 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B094                            
0001B094                            ; touch	response is $40-$7F
0001B094                            
0001B094 1029 0020                  		move.b	$20(a1),d0
0001B098 0200 003F                  		andi.b	#$3F,d0
0001B09C 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B0A0 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B0A2 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B0A8 6400 0000                  		bcc.w	locret_1AEF2
0001B0AC 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B0B0                            
0001B0B0                            locret_1AEF2:
0001B0B0 4E75                       		rts	
0001B0B2                            ; ===========================================================================
0001B0B2                            
0001B0B2                            Touch_Monitor:
0001B0B2 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B0B6 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B0B8 3028 000C                  		move.w	$C(a0),d0
0001B0BC 0440 0010                  		subi.w	#$10,d0
0001B0C0 B069 000C                  		cmp.w	$C(a1),d0
0001B0C4 6500                       		bcs.s	locret_1AF2E
0001B0C6 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B0CA 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B0D0 4A29 0025                  		tst.b	$25(a1)
0001B0D4 6600                       		bne.s	locret_1AF2E
0001B0D6 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B0DA 4E75                       		rts	
0001B0DC                            ; ===========================================================================
0001B0DC                            
0001B0DC                            loc_1AF1E:
0001B0DC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B0E2 6600                       		bne.s	locret_1AF2E
0001B0E4 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B0E8 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B0EC                            
0001B0EC                            locret_1AF2E:
0001B0EC 4E75                       		rts	
0001B0EE                            ; ===========================================================================
0001B0EE                            
0001B0EE                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B0EE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B0F2 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B0F4 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B0FA 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B0FE                            
0001B0FE                            loc_1AF40:
0001B0FE 4A29 0021                  		tst.b	$21(a1)
0001B102 6700                       		beq.s	Touch_KillEnemy
0001B104 4468 0010                  		neg.w	$10(a0)
0001B108 4468 0012                  		neg.w	$12(a0)
0001B10C E0E8 0010                  		asr	$10(a0)
0001B110 E0E8 0012                  		asr	$12(a0)
0001B114 137C 0000 0020             		move.b	#0,$20(a1)
0001B11A 5329 0021                  		subq.b	#1,$21(a1)
0001B11E 6600                       		bne.s	locret_1AF68
0001B120 08E9 0007 0022             		bset	#7,$22(a1)
0001B126                            
0001B126                            locret_1AF68:
0001B126 4E75                       		rts	
0001B128                            ; ===========================================================================
0001B128                            
0001B128                            Touch_KillEnemy:
0001B128 08E9 0007 0022             		bset	#7,$22(a1)
0001B12E 7000                       		moveq	#0,d0
0001B130 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B134 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B138 0C40 0006                  		cmpi.w	#6,d0
0001B13C 6500                       		bcs.s	loc_1AF82
0001B13E 7006                       		moveq	#6,d0
0001B140                            
0001B140                            loc_1AF82:
0001B140 3340 003E                  		move.w	d0,$3E(a1)
0001B144 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B148 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B14E 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B150 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B154 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B15A                            
0001B15A                            loc_1AF9C:
0001B15A 6100 0000                  		bsr.w	AddPoints
0001B15E 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B162 137C 0000 0024             		move.b	#0,$24(a1)
0001B168 4A68 0012                  		tst.w	$12(a0)
0001B16C 6B00                       		bmi.s	loc_1AFC2
0001B16E 3028 000C                  		move.w	$C(a0),d0
0001B172 B069 000C                  		cmp.w	$C(a1),d0
0001B176 6400                       		bcc.s	loc_1AFCA
0001B178 4468 0012                  		neg.w	$12(a0)
0001B17C 4E75                       		rts	
0001B17E                            ; ===========================================================================
0001B17E                            
0001B17E                            loc_1AFC2:
0001B17E 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B184 4E75                       		rts	
0001B186                            ; ===========================================================================
0001B186                            
0001B186                            loc_1AFCA:
0001B186 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B18C 4E75                       		rts	
0001B18E                            ; ===========================================================================
0001B18E 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B196                            ; ===========================================================================
0001B196                            
0001B196                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B196 08E9 0007 0022             		bset	#7,$22(a1)
0001B19C                            
0001B19C                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B19C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B1A0 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B1A2                            
0001B1A2                            loc_1AFE6:				; XREF: Touch_Hurt
0001B1A2 70FF                       		moveq	#-1,d0
0001B1A4 4E75                       		rts	
0001B1A6                            ; ===========================================================================
0001B1A6                            
0001B1A6                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B1A6 4E71                       		nop	
0001B1A8 4A68 0030                  		tst.w	$30(a0)
0001B1AC 66F4                       		bne.s	loc_1AFE6
0001B1AE 2449                       		movea.l	a1,a2
0001B1B0                            
0001B1B0                            ; End of function TouchResponse
0001B1B0                            ; continue straight to HurtSonic
0001B1B0                            
0001B1B0                            ; ---------------------------------------------------------------------------
0001B1B0                            ; Hurting Sonic	subroutine
0001B1B0                            ; ---------------------------------------------------------------------------
0001B1B0                            
0001B1B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B1B0                            
0001B1B0                            
0001B1B0                            HurtSonic:
0001B1B0 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B1B4 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B1B6 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B1BA 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B1BE 4EB9 0000 DBFA             		jsr	SingleObjLoad
0001B1C4 6600                       		bne.s	Hurt_Shield
0001B1C6 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B1CA 3368 0008 0008             		move.w	8(a0),8(a1)
0001B1D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B1D6                            
0001B1D6                            Hurt_Shield:
0001B1D6 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B1DC 117C 0004 0024             		move.b	#4,$24(a0)
0001B1E2 6100 8772                  		bsr.w	Sonic_ResetOnFloor
0001B1E6 08E8 0001 0022             		bset	#1,$22(a0)
0001B1EC 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B1F2 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B1F8 0828 0006 0022             		btst	#6,$22(a0)
0001B1FE 6700                       		beq.s	Hurt_Reverse
0001B200 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B206 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B20C                            
0001B20C                            Hurt_Reverse:
0001B20C 3028 0008                  		move.w	8(a0),d0
0001B210 B06A 0008                  		cmp.w	8(a2),d0
0001B214 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B216 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B21A                            
0001B21A                            Hurt_ChkSpikes:
0001B21A 317C 0000 0014             		move.w	#0,$14(a0)
0001B220 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B226 317C 0078 0030             		move.w	#$78,$30(a0)
0001B22C 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B230 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B234 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B236 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B23A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B23C 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B240                            
0001B240                            Hurt_Sound:
0001B240 4EB9 0000 139C             		jsr	(PlaySound_Special).l
0001B246 70FF                       		moveq	#-1,d0
0001B248 4E75                       		rts	
0001B24A                            ; ===========================================================================
0001B24A                            
0001B24A                            Hurt_NoRings:
0001B24A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B24E 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B252                            ; End of function HurtSonic
0001B252                            
0001B252                            ; ---------------------------------------------------------------------------
0001B252                            ; Subroutine to	kill Sonic
0001B252                            ; ---------------------------------------------------------------------------
0001B252                            
0001B252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B252                            
0001B252                            
0001B252                            KillSonic:
0001B252 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B256 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B258 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B25E 117C 0006 0024             		move.b	#6,$24(a0)
0001B264 6100 86F0                  		bsr.w	Sonic_ResetOnFloor
0001B268 08E8 0001 0022             		bset	#1,$22(a0)
0001B26E 317C F900 0012             		move.w	#-$700,$12(a0)
0001B274 317C 0000 0010             		move.w	#0,$10(a0)
0001B27A 317C 0000 0014             		move.w	#0,$14(a0)
0001B280 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B286 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B28C 08E8 0007 0002             		bset	#7,2(a0)
0001B292 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B296 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B29A 6600                       		bne.s	Kill_Sound
0001B29C 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B2A0                            
0001B2A0                            Kill_Sound:
0001B2A0 4EB9 0000 139C             		jsr	(PlaySound_Special).l
0001B2A6                            
0001B2A6                            Kill_NoDeath:
0001B2A6 70FF                       		moveq	#-1,d0
0001B2A8 4E75                       		rts	
0001B2AA                            ; End of function KillSonic
0001B2AA                            
0001B2AA                            
0001B2AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B2AA                            
0001B2AA                            
0001B2AA                            Touch_Special:				; XREF: Touch_ChkValue
0001B2AA 1229 0020                  		move.b	$20(a1),d1
0001B2AE 0201 003F                  		andi.b	#$3F,d1
0001B2B2 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B2B6 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B2B8 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B2BC 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B2BE 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B2C2 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B2C4 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B2C8 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B2CA 4E75                       		rts	
0001B2CC                            ; ===========================================================================
0001B2CC                            
0001B2CC                            Touch_CatKiller:			; XREF: Touch_Special
0001B2CC 6000 FEC8                  		bra.w	loc_1AFDA
0001B2D0                            ; ===========================================================================
0001B2D0                            
0001B2D0                            Touch_Yadrin:				; XREF: Touch_Special
0001B2D0 9A40                       		sub.w	d0,d5
0001B2D2 0C45 0008                  		cmpi.w	#8,d5
0001B2D6 6400                       		bcc.s	loc_1B144
0001B2D8 3029 0008                  		move.w	8(a1),d0
0001B2DC 5940                       		subq.w	#4,d0
0001B2DE 0829 0000 0022             		btst	#0,$22(a1)
0001B2E4 6700                       		beq.s	loc_1B130
0001B2E6 0440 0010                  		subi.w	#$10,d0
0001B2EA                            
0001B2EA                            loc_1B130:
0001B2EA 9042                       		sub.w	d2,d0
0001B2EC 6400                       		bcc.s	loc_1B13C
0001B2EE 0640 0018                  		addi.w	#$18,d0
0001B2F2 6500                       		bcs.s	loc_1B140
0001B2F4 6000                       		bra.s	loc_1B144
0001B2F6                            ; ===========================================================================
0001B2F6                            
0001B2F6                            loc_1B13C:
0001B2F6 B044                       		cmp.w	d4,d0
0001B2F8 6200                       		bhi.s	loc_1B144
0001B2FA                            
0001B2FA                            loc_1B140:
0001B2FA 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B2FE                            ; ===========================================================================
0001B2FE                            
0001B2FE                            loc_1B144:
0001B2FE 6000 FDEE                  		bra.w	Touch_Enemy
0001B302                            ; ===========================================================================
0001B302                            
0001B302                            Touch_D7orE1:				; XREF: Touch_Special
0001B302 5229 0021                  		addq.b	#1,$21(a1)
0001B306 4E75                       		rts	
0001B308                            ; End of function Touch_Special
0001B308                            
0001B308                            ; ---------------------------------------------------------------------------
0001B308                            ; Subroutine to	show the special stage layout
0001B308                            ; ---------------------------------------------------------------------------
0001B308                            
0001B308                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B308                            
0001B308                            
0001B308                            SS_ShowLayout:				; XREF: SpecialStage
0001B308 6100 0000                  		bsr.w	SS_AniWallsRings
0001B30C 6100 0000                  		bsr.w	SS_AniItems
0001B310 3F05                       		move.w	d5,-(sp)
0001B312 43F8 8000                  		lea	($FFFF8000).w,a1
0001B316 1038 F780                  		move.b	($FFFFF780).w,d0
0001B31A 0200 00FC                  		andi.b	#$FC,d0
0001B31E 4EB9 0000 29DA             		jsr	(CalcSine).l
0001B324 3800                       		move.w	d0,d4
0001B326 3A01                       		move.w	d1,d5
0001B328 C9FC 0018                  		muls.w	#$18,d4
0001B32C CBFC 0018                  		muls.w	#$18,d5
0001B330 7400                       		moveq	#0,d2
0001B332 3438 F700                  		move.w	($FFFFF700).w,d2
0001B336 84FC 0018                  		divu.w	#$18,d2
0001B33A 4842                       		swap	d2
0001B33C 4442                       		neg.w	d2
0001B33E 0642 FF4C                  		addi.w	#-$B4,d2
0001B342 7600                       		moveq	#0,d3
0001B344 3638 F704                  		move.w	($FFFFF704).w,d3
0001B348 86FC 0018                  		divu.w	#$18,d3
0001B34C 4843                       		swap	d3
0001B34E 4443                       		neg.w	d3
0001B350 0643 FF4C                  		addi.w	#-$B4,d3
0001B354 3E3C 000F                  		move.w	#$F,d7
0001B358                            
0001B358                            loc_1B19E:
0001B358 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B35C 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B360 4440                       		neg.w	d0
0001B362 C3C2                       		muls.w	d2,d1
0001B364 C1C3                       		muls.w	d3,d0
0001B366 2C00                       		move.l	d0,d6
0001B368 DC81                       		add.l	d1,d6
0001B36A 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B36E C1C2                       		muls.w	d2,d0
0001B370 C3C3                       		muls.w	d3,d1
0001B372 D280                       		add.l	d0,d1
0001B374 2406                       		move.l	d6,d2
0001B376 3C3C 000F                  		move.w	#$F,d6
0001B37A                            
0001B37A                            loc_1B1C0:
0001B37A 2002                       		move.l	d2,d0
0001B37C E080                       		asr.l	#8,d0
0001B37E 32C0                       		move.w	d0,(a1)+
0001B380 2001                       		move.l	d1,d0
0001B382 E080                       		asr.l	#8,d0
0001B384 32C0                       		move.w	d0,(a1)+
0001B386 D485                       		add.l	d5,d2
0001B388 D284                       		add.l	d4,d1
0001B38A 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B38E                            
0001B38E 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B392 0643 0018                  		addi.w	#$18,d3
0001B396 51CF FFC0                  		dbf	d7,loc_1B19E
0001B39A                            
0001B39A 3A1F                       		move.w	(sp)+,d5
0001B39C 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B3A2 7000                       		moveq	#0,d0
0001B3A4 3038 F704                  		move.w	($FFFFF704).w,d0
0001B3A8 80FC 0018                  		divu.w	#$18,d0
0001B3AC C0FC 0080                  		mulu.w	#$80,d0
0001B3B0 D1C0                       		adda.l	d0,a0
0001B3B2 7000                       		moveq	#0,d0
0001B3B4 3038 F700                  		move.w	($FFFFF700).w,d0
0001B3B8 80FC 0018                  		divu.w	#$18,d0
0001B3BC D0C0                       		adda.w	d0,a0
0001B3BE 49F8 8000                  		lea	($FFFF8000).w,a4
0001B3C2 3E3C 000F                  		move.w	#$F,d7
0001B3C6                            
0001B3C6                            loc_1B20C:
0001B3C6 3C3C 000F                  		move.w	#$F,d6
0001B3CA                            
0001B3CA                            loc_1B210:
0001B3CA 7000                       		moveq	#0,d0
0001B3CC 1018                       		move.b	(a0)+,d0
0001B3CE 6700                       		beq.s	loc_1B268
0001B3D0 0C00 004E                  		cmpi.b	#$4E,d0
0001B3D4 6200                       		bhi.s	loc_1B268
0001B3D6 3614                       		move.w	(a4),d3
0001B3D8 0643 0120                  		addi.w	#$120,d3
0001B3DC 0C43 0070                  		cmpi.w	#$70,d3
0001B3E0 6500                       		bcs.s	loc_1B268
0001B3E2 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B3E6 6400                       		bcc.s	loc_1B268
0001B3E8 342C 0002                  		move.w	2(a4),d2
0001B3EC 0642 00F0                  		addi.w	#$F0,d2
0001B3F0 0C42 0070                  		cmpi.w	#$70,d2
0001B3F4 6500                       		bcs.s	loc_1B268
0001B3F6 0C42 0170                  		cmpi.w	#$170,d2
0001B3FA 6400                       		bcc.s	loc_1B268
0001B3FC 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B402 E748                       		lsl.w	#3,d0
0001B404 4BF5 0000                  		lea	(a5,d0.w),a5
0001B408 225D                       		movea.l	(a5)+,a1
0001B40A 321D                       		move.w	(a5)+,d1
0001B40C D241                       		add.w	d1,d1
0001B40E D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B412 365D                       		movea.w	(a5)+,a3
0001B414 7200                       		moveq	#0,d1
0001B416 1219                       		move.b	(a1)+,d1
0001B418 5301                       		subq.b	#1,d1
0001B41A 6B00                       		bmi.s	loc_1B268
0001B41C 4EB9 0000 D8D2             		jsr	sub_D762
0001B422                            
0001B422                            loc_1B268:
0001B422 584C                       		addq.w	#4,a4
0001B424 51CE FFA4                  		dbf	d6,loc_1B210
0001B428                            
0001B428 41E8 0070                  		lea	$70(a0),a0
0001B42C 51CF FF98                  		dbf	d7,loc_1B20C
0001B430                            
0001B430 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B434 0C05 0050                  		cmpi.b	#$50,d5
0001B438 6700                       		beq.s	loc_1B288
0001B43A 24BC 0000 0000             		move.l	#0,(a2)
0001B440 4E75                       		rts	
0001B442                            ; ===========================================================================
0001B442                            
0001B442                            loc_1B288:
0001B442 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B448 4E75                       		rts	
0001B44A                            ; End of function SS_ShowLayout
0001B44A                            
0001B44A                            ; ---------------------------------------------------------------------------
0001B44A                            ; Subroutine to	animate	walls and rings	in the special stage
0001B44A                            ; ---------------------------------------------------------------------------
0001B44A                            
0001B44A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B44A                            
0001B44A                            
0001B44A                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B44A 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B450 7000                       		moveq	#0,d0
0001B452 1038 F780                  		move.b	($FFFFF780).w,d0
0001B456 E408                       		lsr.b	#2,d0
0001B458 0240 000F                  		andi.w	#$F,d0
0001B45C 7223                       		moveq	#$23,d1
0001B45E                            
0001B45E                            loc_1B2A4:
0001B45E 3280                       		move.w	d0,(a1)
0001B460 5049                       		addq.w	#8,a1
0001B462 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B466                            
0001B466 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B46C 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B470 6A00                       		bpl.s	loc_1B2C8
0001B472 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B478 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B47C 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B482                            
0001B482                            loc_1B2C8:
0001B482 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B488 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B48C 6A00                       		bpl.s	loc_1B2E4
0001B48E 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B494 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B498 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B49E                            
0001B49E                            loc_1B2E4:
0001B49E 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B4A2 1340 0138                  		move.b	d0,$138(a1)
0001B4A6 1340 0160                  		move.b	d0,$160(a1)
0001B4AA 1340 0148                  		move.b	d0,$148(a1)
0001B4AE 1340 0150                  		move.b	d0,$150(a1)
0001B4B2 1340 01D8                  		move.b	d0,$1D8(a1)
0001B4B6 1340 01E0                  		move.b	d0,$1E0(a1)
0001B4BA 1340 01E8                  		move.b	d0,$1E8(a1)
0001B4BE 1340 01F0                  		move.b	d0,$1F0(a1)
0001B4C2 1340 01F8                  		move.b	d0,$1F8(a1)
0001B4C6 1340 0200                  		move.b	d0,$200(a1)
0001B4CA 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B4CE 6A00                       		bpl.s	loc_1B326
0001B4D0 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B4D6 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B4DA 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B4E0                            
0001B4E0                            loc_1B326:
0001B4E0 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B4E4 1340 0168                  		move.b	d0,$168(a1)
0001B4E8 1340 0170                  		move.b	d0,$170(a1)
0001B4EC 1340 0178                  		move.b	d0,$178(a1)
0001B4F0 1340 0180                  		move.b	d0,$180(a1)
0001B4F4 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B4F8 6A00                       		bpl.s	loc_1B350
0001B4FA 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B500 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B504 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B50A                            
0001B50A                            loc_1B350:
0001B50A 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B510 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B516 7000                       		moveq	#0,d0
0001B518 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B51C D040                       		add.w	d0,d0
0001B51E 41F0 0000                  		lea	(a0,d0.w),a0
0001B522 3290                       		move.w	(a0),(a1)
0001B524 3368 0002 0008             		move.w	2(a0),8(a1)
0001B52A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B530 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B536 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B53C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B542 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B548 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B54E D0FC 0020                  		adda.w	#$20,a0
0001B552 D2FC 0048                  		adda.w	#$48,a1
0001B556 3290                       		move.w	(a0),(a1)
0001B558 3368 0002 0008             		move.w	2(a0),8(a1)
0001B55E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B564 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B56A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B570 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B576 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B57C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B582 D0FC 0020                  		adda.w	#$20,a0
0001B586 D2FC 0048                  		adda.w	#$48,a1
0001B58A 3290                       		move.w	(a0),(a1)
0001B58C 3368 0002 0008             		move.w	2(a0),8(a1)
0001B592 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B598 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B59E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B5A4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B5AA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B5B0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B5B6 D0FC 0020                  		adda.w	#$20,a0
0001B5BA D2FC 0048                  		adda.w	#$48,a1
0001B5BE 3290                       		move.w	(a0),(a1)
0001B5C0 3368 0002 0008             		move.w	2(a0),8(a1)
0001B5C6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B5CC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B5D2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B5D8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B5DE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B5E4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B5EA D0FC 0020                  		adda.w	#$20,a0
0001B5EE D2FC 0048                  		adda.w	#$48,a1
0001B5F2 4E75                       		rts	
0001B5F4                            ; End of function SS_AniWallsRings
0001B5F4                            
0001B5F4                            ; ===========================================================================
0001B5F4 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B604 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B614 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B624 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B634 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B644 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B654 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B664 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B674                            ; ---------------------------------------------------------------------------
0001B674                            ; Subroutine to	remove items when you collect them in the special stage
0001B674                            ; ---------------------------------------------------------------------------
0001B674                            
0001B674                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B674                            
0001B674                            
0001B674                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001B674 45F9 00FF 4400             		lea	($FF4400).l,a2
0001B67A 303C 001F                  		move.w	#$1F,d0
0001B67E                            
0001B67E                            loc_1B4C4:
0001B67E 4A12                       		tst.b	(a2)
0001B680 6700                       		beq.s	locret_1B4CE
0001B682 504A                       		addq.w	#8,a2
0001B684 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001B688                            
0001B688                            locret_1B4CE:
0001B688 4E75                       		rts	
0001B68A                            ; End of function SS_RemoveCollectedItem
0001B68A                            
0001B68A                            ; ---------------------------------------------------------------------------
0001B68A                            ; Subroutine to	animate	special	stage items when you touch them
0001B68A                            ; ---------------------------------------------------------------------------
0001B68A                            
0001B68A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B68A                            
0001B68A                            
0001B68A                            SS_AniItems:				; XREF: SS_ShowLayout
0001B68A 41F9 00FF 4400             		lea	($FF4400).l,a0
0001B690 3E3C 001F                  		move.w	#$1F,d7
0001B694                            
0001B694                            loc_1B4DA:
0001B694 7000                       		moveq	#0,d0
0001B696 1010                       		move.b	(a0),d0
0001B698 6700                       		beq.s	loc_1B4E8
0001B69A E548                       		lsl.w	#2,d0
0001B69C 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001B6A0 4E91                       		jsr	(a1)
0001B6A2                            
0001B6A2                            loc_1B4E8:
0001B6A2 5048                       		addq.w	#8,a0
0001B6A4                            
0001B6A4                            loc_1B4EA:
0001B6A4 51CF FFEE                  		dbf	d7,loc_1B4DA
0001B6A8                            
0001B6A8 4E75                       		rts	
0001B6AA                            ; End of function SS_AniItems
0001B6AA                            
0001B6AA                            ; ===========================================================================
0001B6AA 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001B6AE 0000 0000                  		dc.l SS_AniBumper
0001B6B2 0000 0000                  		dc.l SS_Ani1Up
0001B6B6 0000 0000                  		dc.l SS_AniReverse
0001B6BA 0000 0000                  		dc.l SS_AniEmeraldSparks
0001B6BE 0000 0000                  		dc.l SS_AniGlassBlock
0001B6C2                            ; ===========================================================================
0001B6C2                            
0001B6C2                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001B6C2 5328 0002                  		subq.b	#1,2(a0)
0001B6C6 6A00                       		bpl.s	locret_1B530
0001B6C8 117C 0005 0002             		move.b	#5,2(a0)
0001B6CE 7000                       		moveq	#0,d0
0001B6D0 1028 0003                  		move.b	3(a0),d0
0001B6D4 5228 0003                  		addq.b	#1,3(a0)
0001B6D8 2268 0004                  		movea.l	4(a0),a1
0001B6DC 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001B6E0 1280                       		move.b	d0,(a1)
0001B6E2 6600                       		bne.s	locret_1B530
0001B6E4 4290                       		clr.l	(a0)
0001B6E6 42A8 0004                  		clr.l	4(a0)
0001B6EA                            
0001B6EA                            locret_1B530:
0001B6EA 4E75                       		rts	
0001B6EC                            ; ===========================================================================
0001B6EC 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001B6F2                            ; ===========================================================================
0001B6F2                            
0001B6F2                            SS_AniBumper:				; XREF: SS_AniIndex
0001B6F2 5328 0002                  		subq.b	#1,2(a0)
0001B6F6 6A00                       		bpl.s	locret_1B566
0001B6F8 117C 0007 0002             		move.b	#7,2(a0)
0001B6FE 7000                       		moveq	#0,d0
0001B700 1028 0003                  		move.b	3(a0),d0
0001B704 5228 0003                  		addq.b	#1,3(a0)
0001B708 2268 0004                  		movea.l	4(a0),a1
0001B70C 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001B710 6600                       		bne.s	loc_1B564
0001B712 4290                       		clr.l	(a0)
0001B714 42A8 0004                  		clr.l	4(a0)
0001B718 12BC 0025                  		move.b	#$25,(a1)
0001B71C 4E75                       		rts	
0001B71E                            ; ===========================================================================
0001B71E                            
0001B71E                            loc_1B564:
0001B71E 1280                       		move.b	d0,(a1)
0001B720                            
0001B720                            locret_1B566:
0001B720 4E75                       		rts	
0001B722                            ; ===========================================================================
0001B722 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001B728                            ; ===========================================================================
0001B728                            
0001B728                            SS_Ani1Up:				; XREF: SS_AniIndex
0001B728 5328 0002                  		subq.b	#1,2(a0)
0001B72C 6A00                       		bpl.s	locret_1B596
0001B72E 117C 0005 0002             		move.b	#5,2(a0)
0001B734 7000                       		moveq	#0,d0
0001B736 1028 0003                  		move.b	3(a0),d0
0001B73A 5228 0003                  		addq.b	#1,3(a0)
0001B73E 2268 0004                  		movea.l	4(a0),a1
0001B742 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001B746 1280                       		move.b	d0,(a1)
0001B748 6600                       		bne.s	locret_1B596
0001B74A 4290                       		clr.l	(a0)
0001B74C 42A8 0004                  		clr.l	4(a0)
0001B750                            
0001B750                            locret_1B596:
0001B750 4E75                       		rts	
0001B752                            ; ===========================================================================
0001B752 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001B758                            ; ===========================================================================
0001B758                            
0001B758                            SS_AniReverse:				; XREF: SS_AniIndex
0001B758 5328 0002                  		subq.b	#1,2(a0)
0001B75C 6A00                       		bpl.s	locret_1B5CC
0001B75E 117C 0007 0002             		move.b	#7,2(a0)
0001B764 7000                       		moveq	#0,d0
0001B766 1028 0003                  		move.b	3(a0),d0
0001B76A 5228 0003                  		addq.b	#1,3(a0)
0001B76E 2268 0004                  		movea.l	4(a0),a1
0001B772 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001B776 6600                       		bne.s	loc_1B5CA
0001B778 4290                       		clr.l	(a0)
0001B77A 42A8 0004                  		clr.l	4(a0)
0001B77E 12BC 002B                  		move.b	#$2B,(a1)
0001B782 4E75                       		rts	
0001B784                            ; ===========================================================================
0001B784                            
0001B784                            loc_1B5CA:
0001B784 1280                       		move.b	d0,(a1)
0001B786                            
0001B786                            locret_1B5CC:
0001B786 4E75                       		rts	
0001B788                            ; ===========================================================================
0001B788 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001B78E                            ; ===========================================================================
0001B78E                            
0001B78E                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001B78E 5328 0002                  		subq.b	#1,2(a0)
0001B792 6A00                       		bpl.s	locret_1B60C
0001B794 117C 0005 0002             		move.b	#5,2(a0)
0001B79A 7000                       		moveq	#0,d0
0001B79C 1028 0003                  		move.b	3(a0),d0
0001B7A0 5228 0003                  		addq.b	#1,3(a0)
0001B7A4 2268 0004                  		movea.l	4(a0),a1
0001B7A8 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001B7AC 1280                       		move.b	d0,(a1)
0001B7AE 6600                       		bne.s	locret_1B60C
0001B7B0 4290                       		clr.l	(a0)
0001B7B2 42A8 0004                  		clr.l	4(a0)
0001B7B6 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001B7BC 303C 00A8                  		move.w	#$A8,d0
0001B7C0 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001B7C6                            
0001B7C6                            locret_1B60C:
0001B7C6 4E75                       		rts	
0001B7C8                            ; ===========================================================================
0001B7C8 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001B7CE                            ; ===========================================================================
0001B7CE                            
0001B7CE                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001B7CE 5328 0002                  		subq.b	#1,2(a0)
0001B7D2 6A00                       		bpl.s	locret_1B640
0001B7D4 117C 0001 0002             		move.b	#1,2(a0)
0001B7DA 7000                       		moveq	#0,d0
0001B7DC 1028 0003                  		move.b	3(a0),d0
0001B7E0 5228 0003                  		addq.b	#1,3(a0)
0001B7E4 2268 0004                  		movea.l	4(a0),a1
0001B7E8 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001B7EC 1280                       		move.b	d0,(a1)
0001B7EE 6600                       		bne.s	locret_1B640
0001B7F0 12A8 0004                  		move.b	4(a0),(a1)
0001B7F4 4290                       		clr.l	(a0)
0001B7F6 42A8 0004                  		clr.l	4(a0)
0001B7FA                            
0001B7FA                            locret_1B640:
0001B7FA 4E75                       		rts	
0001B7FC                            ; ===========================================================================
0001B7FC 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001B806                            ; ---------------------------------------------------------------------------
0001B806                            ; Special stage	layout pointers
0001B806                            ; ---------------------------------------------------------------------------
0001B806                            SS_LayoutIndex:
0001B806                            	include "_inc\Special stage layout pointers.asm"
0001B806                            ; ---------------------------------------------------------------------------
0001B806                            ; Special stage	layout pointers
0001B806                            ; ---------------------------------------------------------------------------
0001B806 0000 0000                  	dc.l SS_1
0001B80A 0000 0000                  	dc.l SS_2
0001B80E 0000 0000                  	dc.l SS_3
0001B812 0000 0000                  	dc.l SS_4
0001B816 0000 0000                  	dc.l SS_5
0001B81A 0000 0000                  	dc.l SS_6
0001B81E                            	even
0001B81E                            	even
0001B81E                            
0001B81E                            ; ---------------------------------------------------------------------------
0001B81E                            ; Special stage	start locations
0001B81E                            ; ---------------------------------------------------------------------------
0001B81E                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001B836                            		even
0001B836                            
0001B836                            ; ---------------------------------------------------------------------------
0001B836                            ; Subroutine to	load special stage layout
0001B836                            ; ---------------------------------------------------------------------------
0001B836                            
0001B836                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B836                            
0001B836                            
0001B836                            SS_Load:				; XREF: SpecialStage
0001B836 7000                       		moveq	#0,d0
0001B838 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001B83C 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001B840 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001B846 6500                       		bcs.s	SS_ChkEmldNum
0001B848 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001B84E                            
0001B84E                            SS_ChkEmldNum:
0001B84E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001B854 6700                       		beq.s	SS_LoadData	; if yes, branch
0001B856 7200                       		moveq	#0,d1
0001B858 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001B85C 5301                       		subq.b	#1,d1
0001B85E 6500                       		bcs.s	SS_LoadData
0001B860 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001B864                            
0001B864                            SS_ChkEmldLoop:	
0001B864 B033 1000                  		cmp.b	(a3,d1.w),d0
0001B868 6600                       		bne.s	SS_ChkEmldRepeat
0001B86A 60CA                       		bra.s	SS_Load
0001B86C                            ; ===========================================================================
0001B86C                            
0001B86C                            SS_ChkEmldRepeat:
0001B86C 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001B870                            
0001B870                            SS_LoadData:
0001B870 E548                       		lsl.w	#2,d0
0001B872 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001B876 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001B87A 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001B87E 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001B882 43F9 00FF 4000             		lea	($FF4000).l,a1
0001B888 303C 0000                  		move.w	#0,d0
0001B88C 4EB9 0000 171E             		jsr	(EniDec).l
0001B892 43F9 00FF 0000             		lea	($FF0000).l,a1
0001B898 303C 0FFF                  		move.w	#$FFF,d0
0001B89C                            
0001B89C                            SS_ClrRAM3:
0001B89C 4299                       		clr.l	(a1)+
0001B89E 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001B8A2                            
0001B8A2 43F9 00FF 1020             		lea	($FF1020).l,a1
0001B8A8 41F9 00FF 4000             		lea	($FF4000).l,a0
0001B8AE 723F                       		moveq	#$3F,d1
0001B8B0                            
0001B8B0                            loc_1B6F6:
0001B8B0 743F                       		moveq	#$3F,d2
0001B8B2                            
0001B8B2                            loc_1B6F8:
0001B8B2 12D8                       		move.b	(a0)+,(a1)+
0001B8B4 51CA FFFC                  		dbf	d2,loc_1B6F8
0001B8B8                            
0001B8B8 43E9 0040                  		lea	$40(a1),a1
0001B8BC 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001B8C0                            
0001B8C0 43F9 00FF 4008             		lea	($FF4008).l,a1
0001B8C6 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001B8CC 724D                       		moveq	#$4D,d1
0001B8CE                            
0001B8CE                            loc_1B714:
0001B8CE 22D8                       		move.l	(a0)+,(a1)+
0001B8D0 32FC 0000                  		move.w	#0,(a1)+
0001B8D4 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001B8DA 32D8                       		move.w	(a0)+,(a1)+
0001B8DC 51C9 FFF0                  		dbf	d1,loc_1B714
0001B8E0                            
0001B8E0 43F9 00FF 4400             		lea	($FF4400).l,a1
0001B8E6 323C 003F                  		move.w	#$3F,d1
0001B8EA                            
0001B8EA                            loc_1B730:
0001B8EA                            
0001B8EA 4299                       		clr.l	(a1)+
0001B8EC 51C9 FFFC                  		dbf	d1,loc_1B730
0001B8F0                            
0001B8F0 4E75                       		rts	
0001B8F2                            ; End of function SS_Load
0001B8F2                            
0001B8F2                            ; ===========================================================================
0001B8F2                            ; ---------------------------------------------------------------------------
0001B8F2                            ; Special stage	mappings and VRAM pointers
0001B8F2                            ; ---------------------------------------------------------------------------
0001B8F2                            SS_MapIndex:
0001B8F2                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001B8F2                            ; ---------------------------------------------------------------------------
0001B8F2                            ; Special stage	mappings and VRAM pointers
0001B8F2                            ; ---------------------------------------------------------------------------
0001B8F2 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001B8F6 0142                       	dc.w $142		; VRAM setting
0001B8F8 0000 0000                  	dc.l Map_SSWalls
0001B8FC 0142                       	dc.w $142
0001B8FE 0000 0000                  	dc.l Map_SSWalls
0001B902 0142                       	dc.w $142
0001B904 0000 0000                  	dc.l Map_SSWalls
0001B908 0142                       	dc.w $142
0001B90A 0000 0000                  	dc.l Map_SSWalls
0001B90E 0142                       	dc.w $142
0001B910 0000 0000                  	dc.l Map_SSWalls
0001B914 0142                       	dc.w $142
0001B916 0000 0000                  	dc.l Map_SSWalls
0001B91A 0142                       	dc.w $142
0001B91C 0000 0000                  	dc.l Map_SSWalls
0001B920 0142                       	dc.w $142
0001B922 0000 0000                  	dc.l Map_SSWalls
0001B926 0142                       	dc.w $142
0001B928 0000 0000                  	dc.l Map_SSWalls
0001B92C 2142                       	dc.w $2142
0001B92E 0000 0000                  	dc.l Map_SSWalls
0001B932 2142                       	dc.w $2142
0001B934 0000 0000                  	dc.l Map_SSWalls
0001B938 2142                       	dc.w $2142
0001B93A 0000 0000                  	dc.l Map_SSWalls
0001B93E 2142                       	dc.w $2142
0001B940 0000 0000                  	dc.l Map_SSWalls
0001B944 2142                       	dc.w $2142
0001B946 0000 0000                  	dc.l Map_SSWalls
0001B94A 2142                       	dc.w $2142
0001B94C 0000 0000                  	dc.l Map_SSWalls
0001B950 2142                       	dc.w $2142
0001B952 0000 0000                  	dc.l Map_SSWalls
0001B956 2142                       	dc.w $2142
0001B958 0000 0000                  	dc.l Map_SSWalls
0001B95C 2142                       	dc.w $2142
0001B95E 0000 0000                  	dc.l Map_SSWalls
0001B962 4142                       	dc.w $4142
0001B964 0000 0000                  	dc.l Map_SSWalls
0001B968 4142                       	dc.w $4142
0001B96A 0000 0000                  	dc.l Map_SSWalls
0001B96E 4142                       	dc.w $4142
0001B970 0000 0000                  	dc.l Map_SSWalls
0001B974 4142                       	dc.w $4142
0001B976 0000 0000                  	dc.l Map_SSWalls
0001B97A 4142                       	dc.w $4142
0001B97C 0000 0000                  	dc.l Map_SSWalls
0001B980 4142                       	dc.w $4142
0001B982 0000 0000                  	dc.l Map_SSWalls
0001B986 4142                       	dc.w $4142
0001B988 0000 0000                  	dc.l Map_SSWalls
0001B98C 4142                       	dc.w $4142
0001B98E 0000 0000                  	dc.l Map_SSWalls
0001B992 4142                       	dc.w $4142
0001B994 0000 0000                  	dc.l Map_SSWalls
0001B998 6142                       	dc.w $6142
0001B99A 0000 0000                  	dc.l Map_SSWalls
0001B99E 6142                       	dc.w $6142
0001B9A0 0000 0000                  	dc.l Map_SSWalls
0001B9A4 6142                       	dc.w $6142
0001B9A6 0000 0000                  	dc.l Map_SSWalls
0001B9AA 6142                       	dc.w $6142
0001B9AC 0000 0000                  	dc.l Map_SSWalls
0001B9B0 6142                       	dc.w $6142
0001B9B2 0000 0000                  	dc.l Map_SSWalls
0001B9B6 6142                       	dc.w $6142
0001B9B8 0000 0000                  	dc.l Map_SSWalls
0001B9BC 6142                       	dc.w $6142
0001B9BE 0000 0000                  	dc.l Map_SSWalls
0001B9C2 6142                       	dc.w $6142
0001B9C4 0000 0000                  	dc.l Map_SSWalls
0001B9C8 6142                       	dc.w $6142
0001B9CA 0000 EC68                  	dc.l Map_obj47
0001B9CE 023B                       	dc.w $23B
0001B9D0 0000 0000                  	dc.l Map_SS_R
0001B9D4 0570                       	dc.w $570
0001B9D6 0000 0000                  	dc.l Map_SS_R
0001B9DA 0251                       	dc.w $251
0001B9DC 0000 0000                  	dc.l Map_SS_R
0001B9E0 0370                       	dc.w $370
0001B9E2 0000 0000                  	dc.l Map_SS_Up
0001B9E6 0263                       	dc.w $263
0001B9E8 0000 0000                  	dc.l Map_SS_Down
0001B9EC 0263                       	dc.w $263
0001B9EE 0000 0000                  	dc.l Map_SS_R
0001B9F2 22F0                       	dc.w $22F0
0001B9F4 0000 0000                  	dc.l Map_SS_Glass
0001B9F8 0470                       	dc.w $470
0001B9FA 0000 0000                  	dc.l Map_SS_Glass
0001B9FE 05F0                       	dc.w $5F0
0001BA00 0000 0000                  	dc.l Map_SS_Glass
0001BA04 65F0                       	dc.w $65F0
0001BA06 0000 0000                  	dc.l Map_SS_Glass
0001BA0A 25F0                       	dc.w $25F0
0001BA0C 0000 0000                  	dc.l Map_SS_Glass
0001BA10 45F0                       	dc.w $45F0
0001BA12 0000 0000                  	dc.l Map_SS_R
0001BA16 02F0                       	dc.w $2F0
0001BA18 0100 EC68                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BA1C 023B                       	dc.w $23B
0001BA1E 0200 EC68                  	dc.l Map_obj47+$2000000
0001BA22 023B                       	dc.w $23B
0001BA24 0000 0000                  	dc.l Map_SS_R
0001BA28 0797                       	dc.w $797
0001BA2A 0000 0000                  	dc.l Map_SS_R
0001BA2E 07A0                       	dc.w $7A0
0001BA30 0000 0000                  	dc.l Map_SS_R
0001BA34 07A9                       	dc.w $7A9
0001BA36 0000 0000                  	dc.l Map_SS_R
0001BA3A 0797                       	dc.w $797
0001BA3C 0000 0000                  	dc.l Map_SS_R
0001BA40 07A0                       	dc.w $7A0
0001BA42 0000 0000                  	dc.l Map_SS_R
0001BA46 07A9                       	dc.w $7A9
0001BA48 0000 A0A0                  	dc.l Map_obj25
0001BA4C 27B2                       	dc.w $27B2
0001BA4E 0000 0000                  	dc.l Map_SS_Chaos3
0001BA52 0770                       	dc.w $770
0001BA54 0000 0000                  	dc.l Map_SS_Chaos3
0001BA58 2770                       	dc.w $2770
0001BA5A 0000 0000                  	dc.l Map_SS_Chaos3
0001BA5E 4770                       	dc.w $4770
0001BA60 0000 0000                  	dc.l Map_SS_Chaos3
0001BA64 6770                       	dc.w $6770
0001BA66 0000 0000                  	dc.l Map_SS_Chaos1
0001BA6A 0770                       	dc.w $770
0001BA6C 0000 0000                  	dc.l Map_SS_Chaos2
0001BA70 0770                       	dc.w $770
0001BA72 0000 0000                  	dc.l Map_SS_R
0001BA76 04F0                       	dc.w $4F0
0001BA78 0400 A0A0                  	dc.l Map_obj25+$4000000
0001BA7C 27B2                       	dc.w $27B2
0001BA7E 0500 A0A0                  	dc.l Map_obj25+$5000000
0001BA82 27B2                       	dc.w $27B2
0001BA84 0600 A0A0                  	dc.l Map_obj25+$6000000
0001BA88 27B2                       	dc.w $27B2
0001BA8A 0700 A0A0                  	dc.l Map_obj25+$7000000
0001BA8E 27B2                       	dc.w $27B2
0001BA90 0000 0000                  	dc.l Map_SS_Glass
0001BA94 23F0                       	dc.w $23F0
0001BA96 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BA9A 23F0                       	dc.w $23F0
0001BA9C 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BAA0 23F0                       	dc.w $23F0
0001BAA2 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BAA6 23F0                       	dc.w $23F0
0001BAA8 0000 0000                  	dc.l Map_SS_R+$2000000
0001BAAC 04F0                       	dc.w $4F0
0001BAAE 0000 0000                  	dc.l Map_SS_Glass
0001BAB2 05F0                       	dc.w $5F0
0001BAB4 0000 0000                  	dc.l Map_SS_Glass
0001BAB8 65F0                       	dc.w $65F0
0001BABA 0000 0000                  	dc.l Map_SS_Glass
0001BABE 25F0                       	dc.w $25F0
0001BAC0 0000 0000                  	dc.l Map_SS_Glass
0001BAC4 45F0                       	dc.w $45F0
0001BAC4 45F0                       	dc.w $45F0
0001BAC6                            
0001BAC6                            ; ---------------------------------------------------------------------------
0001BAC6                            ; Sprite mappings - special stage "R" block
0001BAC6                            ; ---------------------------------------------------------------------------
0001BAC6                            Map_SS_R:
0001BAC6                            	include "_maps\SSRblock.asm"
0001BAC6                            ; ---------------------------------------------------------------------------
0001BAC6                            ; Sprite mappings - special stage "R" block
0001BAC6                            ; ---------------------------------------------------------------------------
0001BAC6 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BACA 0000                       		dc.w byte_1B91E-Map_SS_R
0001BACC 01                         byte_1B912:	dc.b 1
0001BACD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BAD2 01                         byte_1B918:	dc.b 1
0001BAD3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BAD8 00                         byte_1B91E:	dc.b 0
0001BADA 00                         		even
0001BADA 00                         		even
0001BADA                            
0001BADA                            ; ---------------------------------------------------------------------------
0001BADA                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BADA                            ; ---------------------------------------------------------------------------
0001BADA                            Map_SS_Glass:
0001BADA                            	include "_maps\SSglassblock.asm"
0001BADA                            ; ---------------------------------------------------------------------------
0001BADA                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BADA                            ; ---------------------------------------------------------------------------
0001BADA 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BADE 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BAE2 01                         byte_1B928:	dc.b 1
0001BAE3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BAE8 01                         byte_1B92E:	dc.b 1
0001BAE9 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BAEE 01                         byte_1B934:	dc.b 1
0001BAEF F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BAF4 01                         byte_1B93A:	dc.b 1
0001BAF5 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BAFA                            		even
0001BAFA                            		even
0001BAFA                            
0001BAFA                            ; ---------------------------------------------------------------------------
0001BAFA                            ; Sprite mappings - special stage "UP" block
0001BAFA                            ; ---------------------------------------------------------------------------
0001BAFA                            Map_SS_Up:
0001BAFA                            	include "_maps\SSUPblock.asm"
0001BAFA                            ; ---------------------------------------------------------------------------
0001BAFA                            ; Sprite mappings - special stage "UP" block
0001BAFA                            ; ---------------------------------------------------------------------------
0001BAFA 0000                       		dc.w byte_1B944-Map_SS_Up
0001BAFC 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BAFE 01                         byte_1B944:	dc.b 1
0001BAFF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BB04 01                         byte_1B94A:	dc.b 1
0001BB05 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BB0A                            		even
0001BB0A                            		even
0001BB0A                            
0001BB0A                            ; ---------------------------------------------------------------------------
0001BB0A                            ; Sprite mappings - special stage "DOWN" block
0001BB0A                            ; ---------------------------------------------------------------------------
0001BB0A                            Map_SS_Down:
0001BB0A                            	include "_maps\SSDOWNblock.asm"
0001BB0A                            ; ---------------------------------------------------------------------------
0001BB0A                            ; Sprite mappings - special stage "DOWN" block
0001BB0A                            ; ---------------------------------------------------------------------------
0001BB0A 0000                       		dc.w byte_1B954-Map_SS_Down
0001BB0C 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BB0E 01                         byte_1B954:	dc.b 1
0001BB0F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BB14 01                         byte_1B95A:	dc.b 1
0001BB15 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BB1A                            		even
0001BB1A                            		even
0001BB1A                            
0001BB1A                            ; ---------------------------------------------------------------------------
0001BB1A                            ; Sprite mappings - special stage chaos	emeralds
0001BB1A                            ; ---------------------------------------------------------------------------
0001BB1A 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BB1C 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BB1E 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BB20 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BB22 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BB24 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BB26 01                         byte_1B96C:	dc.b 1
0001BB27 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BB2C 01                         byte_1B972:	dc.b 1
0001BB2D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BB32 01                         byte_1B978:	dc.b 1
0001BB33 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BB38 01                         byte_1B97E:	dc.b 1
0001BB39 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BB3E                            		even
0001BB3E                            ; ===========================================================================
0001BB3E                            ; ---------------------------------------------------------------------------
0001BB3E                            ; Object 09 - Sonic (special stage)
0001BB3E                            ; ---------------------------------------------------------------------------
0001BB3E                            
0001BB3E                            Obj09:					; XREF: Obj_Index
0001BB3E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BB42 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BB44 6100 0000                  		bsr.w	SS_FixCamera
0001BB48 6000 0000                  		bra.w	DebugMode
0001BB4C                            ; ===========================================================================
0001BB4C                            
0001BB4C                            Obj09_Normal:
0001BB4C 7000                       		moveq	#0,d0
0001BB4E 1028 0024                  		move.b	$24(a0),d0
0001BB52 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BB56 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BB5A                            ; ===========================================================================
0001BB5A 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BB5C 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BB5E 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BB60 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BB62                            ; ===========================================================================
0001BB62                            
0001BB62                            Obj09_Main:				; XREF: Obj09_Index
0001BB62 5428 0024                  		addq.b	#2,$24(a0)
0001BB66 117C 000E 0016             		move.b	#$E,$16(a0)
0001BB6C 117C 0007 0017             		move.b	#7,$17(a0)
0001BB72 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BB7A 317C 0780 0002             		move.w	#$780,2(a0)
0001BB80 117C 0004 0001             		move.b	#4,1(a0)
0001BB86 117C 0000 0018             		move.b	#0,$18(a0)
0001BB8C 117C 0002 001C             		move.b	#2,$1C(a0)
0001BB92 08E8 0002 0022             		bset	#2,$22(a0)
0001BB98 08E8 0001 0022             		bset	#1,$22(a0)
0001BB9E                            
0001BB9E                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001BB9E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001BBA2 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BBA4 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001BBAA 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BBAC 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001BBB2                            
0001BBB2                            Obj09_NoDebug:
0001BBB2 117C 0000 0030             		move.b	#0,$30(a0)
0001BBB8 7000                       		moveq	#0,d0
0001BBBA 1028 0022                  		move.b	$22(a0),d0
0001BBBE 0240 0002                  		andi.w	#2,d0
0001BBC2 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001BBC6 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001BBCA 4EBA 8220                  		jsr	LoadSonicDynPLC
0001BBCE 4EF9 0000 D774             		jmp	DisplaySprite
0001BBD4                            ; ===========================================================================
0001BBD4 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001BBD6 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001BBD8                            ; ===========================================================================
0001BBD8                            
0001BBD8                            Obj09_OnWall:				; XREF: Obj09_Modes
0001BBD8 6100 0000                  		bsr.w	Obj09_Jump
0001BBDC 6100 0000                  		bsr.w	Obj09_Move
0001BBE0 6100 0000                  		bsr.w	Obj09_Fall
0001BBE4 6000                       		bra.s	Obj09_Display
0001BBE6                            ; ===========================================================================
0001BBE6                            
0001BBE6                            Obj09_InAir:				; XREF: Obj09_Modes
0001BBE6 6100 0000                  		bsr.w	nullsub_2
0001BBEA 6100 0000                  		bsr.w	Obj09_Move
0001BBEE 6100 0000                  		bsr.w	Obj09_Fall
0001BBF2                            
0001BBF2                            Obj09_Display:				; XREF: Obj09_OnWall
0001BBF2 6100 0000                  		bsr.w	Obj09_ChkItems
0001BBF6 6100 0000                  		bsr.w	Obj09_ChkItems2
0001BBFA 4EB9 0000 D74E             		jsr	SpeedToPos
0001BC00 6100 0000                  		bsr.w	SS_FixCamera
0001BC04 3038 F780                  		move.w	($FFFFF780).w,d0
0001BC08 D078 F782                  		add.w	($FFFFF782).w,d0
0001BC0C 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BC10 4EB9 0001 3B72             		jsr	Sonic_Animate
0001BC16 4E75                       		rts	
0001BC18                            
0001BC18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC18                            
0001BC18                            
0001BC18                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001BC18 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001BC1E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001BC20 6100 0000                  		bsr.w	Obj09_MoveLeft
0001BC24                            
0001BC24                            Obj09_ChkRight:
0001BC24 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001BC2A 6700                       		beq.s	loc_1BA78	; if not, branch
0001BC2C 6100 0000                  		bsr.w	Obj09_MoveRight
0001BC30                            
0001BC30                            loc_1BA78:
0001BC30 1038 F602                  		move.b	($FFFFF602).w,d0
0001BC34 0200 000C                  		andi.b	#$C,d0
0001BC38 6600                       		bne.s	loc_1BAA8
0001BC3A 3028 0014                  		move.w	$14(a0),d0
0001BC3E 6700                       		beq.s	loc_1BAA8
0001BC40 6B00                       		bmi.s	loc_1BA9A
0001BC42 0440 000C                  		subi.w	#$C,d0
0001BC46 6400                       		bcc.s	loc_1BA94
0001BC48 303C 0000                  		move.w	#0,d0
0001BC4C                            
0001BC4C                            loc_1BA94:
0001BC4C 3140 0014                  		move.w	d0,$14(a0)
0001BC50 6000                       		bra.s	loc_1BAA8
0001BC52                            ; ===========================================================================
0001BC52                            
0001BC52                            loc_1BA9A:
0001BC52 0640 000C                  		addi.w	#$C,d0
0001BC56 6400                       		bcc.s	loc_1BAA4
0001BC58 303C 0000                  		move.w	#0,d0
0001BC5C                            
0001BC5C                            loc_1BAA4:
0001BC5C 3140 0014                  		move.w	d0,$14(a0)
0001BC60                            
0001BC60                            loc_1BAA8:
0001BC60 1038 F780                  		move.b	($FFFFF780).w,d0
0001BC64 0600 0020                  		addi.b	#$20,d0
0001BC68 0200 00C0                  		andi.b	#$C0,d0
0001BC6C 4400                       		neg.b	d0
0001BC6E 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BC74 C3E8 0014                  		muls.w	$14(a0),d1
0001BC78 D3A8 0008                  		add.l	d1,8(a0)
0001BC7C C1E8 0014                  		muls.w	$14(a0),d0
0001BC80 D1A8 000C                  		add.l	d0,$C(a0)
0001BC84 48E7 C000                  		movem.l	d0-d1,-(sp)
0001BC88 2428 000C                  		move.l	$C(a0),d2
0001BC8C 2628 0008                  		move.l	8(a0),d3
0001BC90 6100 0000                  		bsr.w	sub_1BCE8
0001BC94 6700                       		beq.s	loc_1BAF2
0001BC96 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BC9A 93A8 0008                  		sub.l	d1,8(a0)
0001BC9E 91A8 000C                  		sub.l	d0,$C(a0)
0001BCA2 317C 0000 0014             		move.w	#0,$14(a0)
0001BCA8 4E75                       		rts	
0001BCAA                            ; ===========================================================================
0001BCAA                            
0001BCAA                            loc_1BAF2:
0001BCAA 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BCAE 4E75                       		rts	
0001BCB0                            ; End of function Obj09_Move
0001BCB0                            
0001BCB0                            
0001BCB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCB0                            
0001BCB0                            
0001BCB0                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001BCB0 08E8 0000 0022             		bset	#0,$22(a0)
0001BCB6 3028 0014                  		move.w	$14(a0),d0
0001BCBA 6700                       		beq.s	loc_1BB06
0001BCBC 6A00                       		bpl.s	loc_1BB1A
0001BCBE                            
0001BCBE                            loc_1BB06:
0001BCBE 0440 000C                  		subi.w	#$C,d0
0001BCC2 0C40 F800                  		cmpi.w	#-$800,d0
0001BCC6 6E00                       		bgt.s	loc_1BB14
0001BCC8 303C F800                  		move.w	#-$800,d0
0001BCCC                            
0001BCCC                            loc_1BB14:
0001BCCC 3140 0014                  		move.w	d0,$14(a0)
0001BCD0 4E75                       		rts	
0001BCD2                            ; ===========================================================================
0001BCD2                            
0001BCD2                            loc_1BB1A:
0001BCD2 0440 0040                  		subi.w	#$40,d0
0001BCD6 6400                       		bcc.s	loc_1BB22
0001BCD8 4E71                       		nop	
0001BCDA                            
0001BCDA                            loc_1BB22:
0001BCDA 3140 0014                  		move.w	d0,$14(a0)
0001BCDE 4E75                       		rts	
0001BCE0                            ; End of function Obj09_MoveLeft
0001BCE0                            
0001BCE0                            
0001BCE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCE0                            
0001BCE0                            
0001BCE0                            Obj09_MoveRight:			; XREF: Obj09_Move
0001BCE0 08A8 0000 0022             		bclr	#0,$22(a0)
0001BCE6 3028 0014                  		move.w	$14(a0),d0
0001BCEA 6B00                       		bmi.s	loc_1BB48
0001BCEC 0640 000C                  		addi.w	#$C,d0
0001BCF0 0C40 0800                  		cmpi.w	#$800,d0
0001BCF4 6D00                       		blt.s	loc_1BB42
0001BCF6 303C 0800                  		move.w	#$800,d0
0001BCFA                            
0001BCFA                            loc_1BB42:
0001BCFA 3140 0014                  		move.w	d0,$14(a0)
0001BCFE 6000                       		bra.s	locret_1BB54
0001BD00                            ; ===========================================================================
0001BD00                            
0001BD00                            loc_1BB48:
0001BD00 0640 0040                  		addi.w	#$40,d0
0001BD04 6400                       		bcc.s	loc_1BB50
0001BD06 4E71                       		nop	
0001BD08                            
0001BD08                            loc_1BB50:
0001BD08 3140 0014                  		move.w	d0,$14(a0)
0001BD0C                            
0001BD0C                            locret_1BB54:
0001BD0C 4E75                       		rts	
0001BD0E                            ; End of function Obj09_MoveRight
0001BD0E                            
0001BD0E                            
0001BD0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD0E                            
0001BD0E                            
0001BD0E                            Obj09_Jump:				; XREF: Obj09_OnWall
0001BD0E 1038 F603                  		move.b	($FFFFF603).w,d0
0001BD12 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001BD16 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001BD18 1038 F780                  		move.b	($FFFFF780).w,d0
0001BD1C 0200 00FC                  		andi.b	#$FC,d0
0001BD20 4400                       		neg.b	d0
0001BD22 0400 0040                  		subi.b	#$40,d0
0001BD26 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BD2C C3FC 0680                  		muls.w	#$680,d1
0001BD30 E081                       		asr.l	#8,d1
0001BD32 3141 0010                  		move.w	d1,$10(a0)
0001BD36 C1FC 0680                  		muls.w	#$680,d0
0001BD3A E080                       		asr.l	#8,d0
0001BD3C 3140 0012                  		move.w	d0,$12(a0)
0001BD40 08E8 0001 0022             		bset	#1,$22(a0)
0001BD46 303C 00A0                  		move.w	#$A0,d0
0001BD4A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play jumping sound
0001BD50                            
0001BD50                            Obj09_NoJump:
0001BD50 4E75                       		rts	
0001BD52                            ; End of function Obj09_Jump
0001BD52                            
0001BD52                            
0001BD52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD52                            
0001BD52                            
0001BD52                            nullsub_2:				; XREF: Obj09_InAir
0001BD52 4E75                       		rts	
0001BD54                            ; End of function nullsub_2
0001BD54                            
0001BD54                            ; ===========================================================================
0001BD54                            ; ---------------------------------------------------------------------------
0001BD54                            ; unused subroutine to limit Sonic's upward vertical speed
0001BD54                            ; ---------------------------------------------------------------------------
0001BD54 323C FC00                  		move.w	#-$400,d1
0001BD58 B268 0012                  		cmp.w	$12(a0),d1
0001BD5C 6F00                       		ble.s	locret_1BBB4
0001BD5E 1038 F602                  		move.b	($FFFFF602).w,d0
0001BD62 0200 0070                  		andi.b	#$70,d0
0001BD66 6600                       		bne.s	locret_1BBB4
0001BD68 3141 0012                  		move.w	d1,$12(a0)
0001BD6C                            
0001BD6C                            locret_1BBB4:
0001BD6C 4E75                       		rts	
0001BD6E                            ; ---------------------------------------------------------------------------
0001BD6E                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001BD6E                            ; ---------------------------------------------------------------------------
0001BD6E                            
0001BD6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD6E                            
0001BD6E                            
0001BD6E                            SS_FixCamera:				; XREF: Obj09
0001BD6E 3428 000C                  		move.w	$C(a0),d2
0001BD72 3628 0008                  		move.w	8(a0),d3
0001BD76 3038 F700                  		move.w	($FFFFF700).w,d0
0001BD7A 0443 00A0                  		subi.w	#$A0,d3
0001BD7E 6500                       		bcs.s	loc_1BBCE
0001BD80 9043                       		sub.w	d3,d0
0001BD82 9178 F700                  		sub.w	d0,($FFFFF700).w
0001BD86                            
0001BD86                            loc_1BBCE:
0001BD86 3038 F704                  		move.w	($FFFFF704).w,d0
0001BD8A 0442 0070                  		subi.w	#$70,d2
0001BD8E 6500                       		bcs.s	locret_1BBDE
0001BD90 9042                       		sub.w	d2,d0
0001BD92 9178 F704                  		sub.w	d0,($FFFFF704).w
0001BD96                            
0001BD96                            locret_1BBDE:
0001BD96 4E75                       		rts	
0001BD98                            ; End of function SS_FixCamera
0001BD98                            
0001BD98                            ; ===========================================================================
0001BD98                            
0001BD98                            Obj09_ExitStage:			; XREF: Obj09_Index
0001BD98 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001BD9E 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001BDA4 6600                       		bne.s	loc_1BBF4
0001BDA6 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BDAC                            
0001BDAC                            loc_1BBF4:
0001BDAC 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001BDB2 6D00                       		blt.s	loc_1BC12
0001BDB4 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001BDBA 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001BDC0 5428 0024                  		addq.b	#2,$24(a0)
0001BDC4 317C 003C 0038             		move.w	#$3C,$38(a0)
0001BDCA                            
0001BDCA                            loc_1BC12:
0001BDCA 3038 F780                  		move.w	($FFFFF780).w,d0
0001BDCE D078 F782                  		add.w	($FFFFF782).w,d0
0001BDD2 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BDD6 4EB9 0001 3B72             		jsr	Sonic_Animate
0001BDDC 4EBA 800E                  		jsr	LoadSonicDynPLC
0001BDE0 6100 FF8C                  		bsr.w	SS_FixCamera
0001BDE4 4EF9 0000 D774             		jmp	DisplaySprite
0001BDEA                            ; ===========================================================================
0001BDEA                            
0001BDEA                            Obj09_Exit2:				; XREF: Obj09_Index
0001BDEA 5368 0038                  		subq.w	#1,$38(a0)
0001BDEE 6600                       		bne.s	loc_1BC40
0001BDF0 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BDF6                            
0001BDF6                            loc_1BC40:
0001BDF6 4EB9 0001 3B72             		jsr	Sonic_Animate
0001BDFC 4EB9 0001 3DEC             		jsr	LoadSonicDynPLC
0001BE02 6100 FF6A                  		bsr.w	SS_FixCamera
0001BE06 4EF9 0000 D774             		jmp	DisplaySprite
0001BE0C                            
0001BE0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE0C                            
0001BE0C                            
0001BE0C                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001BE0C 2428 000C                  		move.l	$C(a0),d2
0001BE10 2628 0008                  		move.l	8(a0),d3
0001BE14 1038 F780                  		move.b	($FFFFF780).w,d0
0001BE18 0200 00FC                  		andi.b	#$FC,d0
0001BE1C 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BE22 3828 0010                  		move.w	$10(a0),d4
0001BE26 48C4                       		ext.l	d4
0001BE28 E184                       		asl.l	#8,d4
0001BE2A C1FC 002A                  		muls.w	#$2A,d0
0001BE2E D084                       		add.l	d4,d0
0001BE30 3828 0012                  		move.w	$12(a0),d4
0001BE34 48C4                       		ext.l	d4
0001BE36 E184                       		asl.l	#8,d4
0001BE38 C3FC 002A                  		muls.w	#$2A,d1
0001BE3C D284                       		add.l	d4,d1
0001BE3E D680                       		add.l	d0,d3
0001BE40 6100 0000                  		bsr.w	sub_1BCE8
0001BE44 6700                       		beq.s	loc_1BCB0
0001BE46 9680                       		sub.l	d0,d3
0001BE48 7000                       		moveq	#0,d0
0001BE4A 3140 0010                  		move.w	d0,$10(a0)
0001BE4E 08A8 0001 0022             		bclr	#1,$22(a0)
0001BE54 D481                       		add.l	d1,d2
0001BE56 6100 0000                  		bsr.w	sub_1BCE8
0001BE5A 6700                       		beq.s	loc_1BCC6
0001BE5C 9481                       		sub.l	d1,d2
0001BE5E 7200                       		moveq	#0,d1
0001BE60 3141 0012                  		move.w	d1,$12(a0)
0001BE64 4E75                       		rts	
0001BE66                            ; ===========================================================================
0001BE66                            
0001BE66                            loc_1BCB0:
0001BE66 D481                       		add.l	d1,d2
0001BE68 6100 0000                  		bsr.w	sub_1BCE8
0001BE6C 6700                       		beq.s	loc_1BCD4
0001BE6E 9481                       		sub.l	d1,d2
0001BE70 7200                       		moveq	#0,d1
0001BE72 3141 0012                  		move.w	d1,$12(a0)
0001BE76 08A8 0001 0022             		bclr	#1,$22(a0)
0001BE7C                            
0001BE7C                            loc_1BCC6:
0001BE7C E080                       		asr.l	#8,d0
0001BE7E E081                       		asr.l	#8,d1
0001BE80 3140 0010                  		move.w	d0,$10(a0)
0001BE84 3141 0012                  		move.w	d1,$12(a0)
0001BE88 4E75                       		rts	
0001BE8A                            ; ===========================================================================
0001BE8A                            
0001BE8A                            loc_1BCD4:
0001BE8A E080                       		asr.l	#8,d0
0001BE8C E081                       		asr.l	#8,d1
0001BE8E 3140 0010                  		move.w	d0,$10(a0)
0001BE92 3141 0012                  		move.w	d1,$12(a0)
0001BE96 08E8 0001 0022             		bset	#1,$22(a0)
0001BE9C 4E75                       		rts	
0001BE9E                            ; End of function Obj09_Fall
0001BE9E                            
0001BE9E                            
0001BE9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE9E                            
0001BE9E                            
0001BE9E                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001BE9E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BEA4 7800                       		moveq	#0,d4
0001BEA6 4842                       		swap	d2
0001BEA8 3802                       		move.w	d2,d4
0001BEAA 4842                       		swap	d2
0001BEAC 0644 0044                  		addi.w	#$44,d4
0001BEB0 88FC 0018                  		divu.w	#$18,d4
0001BEB4 C8FC 0080                  		mulu.w	#$80,d4
0001BEB8 D3C4                       		adda.l	d4,a1
0001BEBA 7800                       		moveq	#0,d4
0001BEBC 4843                       		swap	d3
0001BEBE 3803                       		move.w	d3,d4
0001BEC0 4843                       		swap	d3
0001BEC2 0644 0014                  		addi.w	#$14,d4
0001BEC6 88FC 0018                  		divu.w	#$18,d4
0001BECA D2C4                       		adda.w	d4,a1
0001BECC 7A00                       		moveq	#0,d5
0001BECE 1819                       		move.b	(a1)+,d4
0001BED0 6100                       		bsr.s	sub_1BD30
0001BED2 1819                       		move.b	(a1)+,d4
0001BED4 6100                       		bsr.s	sub_1BD30
0001BED6 D2FC 007E                  		adda.w	#$7E,a1
0001BEDA 1819                       		move.b	(a1)+,d4
0001BEDC 6100                       		bsr.s	sub_1BD30
0001BEDE 1819                       		move.b	(a1)+,d4
0001BEE0 6100                       		bsr.s	sub_1BD30
0001BEE2 4A05                       		tst.b	d5
0001BEE4 4E75                       		rts	
0001BEE6                            ; End of function sub_1BCE8
0001BEE6                            
0001BEE6                            
0001BEE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEE6                            
0001BEE6                            
0001BEE6                            sub_1BD30:				; XREF: sub_1BCE8
0001BEE6 6700                       		beq.s	locret_1BD44
0001BEE8 0C04 0028                  		cmpi.b	#$28,d4
0001BEEC 6700                       		beq.s	locret_1BD44
0001BEEE 0C04 003A                  		cmpi.b	#$3A,d4
0001BEF2 6500                       		bcs.s	loc_1BD46
0001BEF4 0C04 004B                  		cmpi.b	#$4B,d4
0001BEF8 6400                       		bcc.s	loc_1BD46
0001BEFA                            
0001BEFA                            locret_1BD44:
0001BEFA 4E75                       		rts	
0001BEFC                            ; ===========================================================================
0001BEFC                            
0001BEFC                            loc_1BD46:
0001BEFC 1144 0030                  		move.b	d4,$30(a0)
0001BF00 2149 0032                  		move.l	a1,$32(a0)
0001BF04 7AFF                       		moveq	#-1,d5
0001BF06 4E75                       		rts	
0001BF08                            ; End of function sub_1BD30
0001BF08                            
0001BF08                            
0001BF08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF08                            
0001BF08                            
0001BF08                            Obj09_ChkItems:				; XREF: Obj09_Display
0001BF08 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BF0E 7800                       		moveq	#0,d4
0001BF10 3828 000C                  		move.w	$C(a0),d4
0001BF14 0644 0050                  		addi.w	#$50,d4
0001BF18 88FC 0018                  		divu.w	#$18,d4
0001BF1C C8FC 0080                  		mulu.w	#$80,d4
0001BF20 D3C4                       		adda.l	d4,a1
0001BF22 7800                       		moveq	#0,d4
0001BF24 3828 0008                  		move.w	8(a0),d4
0001BF28 0644 0020                  		addi.w	#$20,d4
0001BF2C 88FC 0018                  		divu.w	#$18,d4
0001BF30 D2C4                       		adda.w	d4,a1
0001BF32 1811                       		move.b	(a1),d4
0001BF34 6600                       		bne.s	Obj09_ChkCont
0001BF36 4A28 003A                  		tst.b	$3A(a0)
0001BF3A 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001BF3E 7800                       		moveq	#0,d4
0001BF40 4E75                       		rts	
0001BF42                            ; ===========================================================================
0001BF42                            
0001BF42                            Obj09_ChkCont:
0001BF42 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001BF46 6600                       		bne.s	Obj09_Chk1Up
0001BF48 6100 F72A                  		bsr.w	SS_RemoveCollectedItem
0001BF4C 6600                       		bne.s	Obj09_GetCont
0001BF4E 14BC 0001                  		move.b	#1,(a2)
0001BF52 2549 0004                  		move.l	a1,4(a2)
0001BF56                            
0001BF56                            Obj09_GetCont:
0001BF56 4EB9 0000 9D88             		jsr	CollectRing
0001BF5C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001BF62 6500                       		bcs.s	Obj09_NoCont
0001BF64 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001BF6A 6600                       		bne.s	Obj09_NoCont
0001BF6C 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001BF70 303C 00BF                  		move.w	#$BF,d0
0001BF74 4EB9 0000 1396             		jsr	(PlaySound).l	; play extra continue sound
0001BF7A                            
0001BF7A                            Obj09_NoCont:
0001BF7A 7800                       		moveq	#0,d4
0001BF7C 4E75                       		rts	
0001BF7E                            ; ===========================================================================
0001BF7E                            
0001BF7E                            Obj09_Chk1Up:
0001BF7E 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001BF82 6600                       		bne.s	Obj09_ChkEmer
0001BF84 6100 F6EE                  		bsr.w	SS_RemoveCollectedItem
0001BF88 6600                       		bne.s	Obj09_Get1Up
0001BF8A 14BC 0003                  		move.b	#3,(a2)
0001BF8E 2549 0004                  		move.l	a1,4(a2)
0001BF92                            
0001BF92                            Obj09_Get1Up:
0001BF92 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001BF96 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001BF9A 303C 0088                  		move.w	#$88,d0
0001BF9E 4EB9 0000 1396             		jsr	(PlaySound).l	; play extra life music
0001BFA4 7800                       		moveq	#0,d4
0001BFA6 4E75                       		rts	
0001BFA8                            ; ===========================================================================
0001BFA8                            
0001BFA8                            Obj09_ChkEmer:
0001BFA8 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001BFAC 6500                       		bcs.s	Obj09_ChkGhost
0001BFAE 0C04 0040                  		cmpi.b	#$40,d4
0001BFB2 6200                       		bhi.s	Obj09_ChkGhost
0001BFB4 6100 F6BE                  		bsr.w	SS_RemoveCollectedItem
0001BFB8 6600                       		bne.s	Obj09_GetEmer
0001BFBA 14BC 0005                  		move.b	#5,(a2)
0001BFBE 2549 0004                  		move.l	a1,4(a2)
0001BFC2                            
0001BFC2                            Obj09_GetEmer:
0001BFC2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001BFC8 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001BFCA 0404 003B                  		subi.b	#$3B,d4
0001BFCE 7000                       		moveq	#0,d0
0001BFD0 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001BFD4 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001BFD8 1584 0000                  		move.b	d4,(a2,d0.w)
0001BFDC 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001BFE0                            
0001BFE0                            Obj09_NoEmer:
0001BFE0 303C 0093                  		move.w	#$93,d0
0001BFE4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play emerald music
0001BFEA 7800                       		moveq	#0,d4
0001BFEC 4E75                       		rts	
0001BFEE                            ; ===========================================================================
0001BFEE                            
0001BFEE                            Obj09_ChkGhost:
0001BFEE 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001BFF2 6600                       		bne.s	Obj09_ChkGhostTag
0001BFF4 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001BFFA                            
0001BFFA                            Obj09_ChkGhostTag:
0001BFFA 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001BFFE 6600                       		bne.s	Obj09_NoGhost
0001C000 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C006 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C008 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C00E                            
0001C00E                            Obj09_NoGhost:
0001C00E 78FF                       		moveq	#-1,d4
0001C010 4E75                       		rts	
0001C012                            ; ===========================================================================
0001C012                            
0001C012                            Obj09_MakeGhostSolid:
0001C012 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C018 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C01A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C020 723F                       		moveq	#$3F,d1
0001C022                            
0001C022                            Obj09_GhostLoop2:
0001C022 743F                       		moveq	#$3F,d2
0001C024                            
0001C024                            Obj09_GhostLoop:
0001C024 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C028 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C02A 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C02E                            
0001C02E                            Obj09_NoReplace:
0001C02E 5249                       		addq.w	#1,a1
0001C030 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C034 43E9 0040                  		lea	$40(a1),a1
0001C038 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C03C                            
0001C03C                            Obj09_GhostNotSolid:
0001C03C 4228 003A                  		clr.b	$3A(a0)
0001C040 7800                       		moveq	#0,d4
0001C042 4E75                       		rts	
0001C044                            ; End of function Obj09_ChkItems
0001C044                            
0001C044                            
0001C044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C044                            
0001C044                            
0001C044                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C044 1028 0030                  		move.b	$30(a0),d0
0001C048 6600                       		bne.s	Obj09_ChkBumper
0001C04A 5328 0036                  		subq.b	#1,$36(a0)
0001C04E 6A00                       		bpl.s	loc_1BEA0
0001C050 117C 0000 0036             		move.b	#0,$36(a0)
0001C056                            
0001C056                            loc_1BEA0:
0001C056 5328 0037                  		subq.b	#1,$37(a0)
0001C05A 6A00                       		bpl.s	locret_1BEAC
0001C05C 117C 0000 0037             		move.b	#0,$37(a0)
0001C062                            
0001C062                            locret_1BEAC:
0001C062 4E75                       		rts	
0001C064                            ; ===========================================================================
0001C064                            
0001C064                            Obj09_ChkBumper:
0001C064 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C068 6600                       		bne.s	Obj09_GOAL
0001C06A 2228 0032                  		move.l	$32(a0),d1
0001C06E 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C074 3401                       		move.w	d1,d2
0001C076 0241 007F                  		andi.w	#$7F,d1
0001C07A C2FC 0018                  		mulu.w	#$18,d1
0001C07E 0441 0014                  		subi.w	#$14,d1
0001C082 EE4A                       		lsr.w	#7,d2
0001C084 0242 007F                  		andi.w	#$7F,d2
0001C088 C4FC 0018                  		mulu.w	#$18,d2
0001C08C 0442 0044                  		subi.w	#$44,d2
0001C090 9268 0008                  		sub.w	8(a0),d1
0001C094 9468 000C                  		sub.w	$C(a0),d2
0001C098 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0001C09E 4EB9 0000 29DA             		jsr	(CalcSine).l
0001C0A4 C3FC F900                  		muls.w	#-$700,d1
0001C0A8 E081                       		asr.l	#8,d1
0001C0AA 3141 0010                  		move.w	d1,$10(a0)
0001C0AE C1FC F900                  		muls.w	#-$700,d0
0001C0B2 E080                       		asr.l	#8,d0
0001C0B4 3140 0012                  		move.w	d0,$12(a0)
0001C0B8 08E8 0001 0022             		bset	#1,$22(a0)
0001C0BE 6100 F5B4                  		bsr.w	SS_RemoveCollectedItem
0001C0C2 6600                       		bne.s	Obj09_BumpSnd
0001C0C4 14BC 0002                  		move.b	#2,(a2)
0001C0C8 2028 0032                  		move.l	$32(a0),d0
0001C0CC 5380                       		subq.l	#1,d0
0001C0CE 2540 0004                  		move.l	d0,4(a2)
0001C0D2                            
0001C0D2                            Obj09_BumpSnd:
0001C0D2 303C 00B4                  		move.w	#$B4,d0
0001C0D6 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C0DC                            ; ===========================================================================
0001C0DC                            
0001C0DC                            Obj09_GOAL:
0001C0DC 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C0E0 6600                       		bne.s	Obj09_UPblock
0001C0E2 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C0E6 303C 00A8                  		move.w	#$A8,d0		; change item
0001C0EA 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C0F0 4E75                       		rts	
0001C0F2                            ; ===========================================================================
0001C0F2                            
0001C0F2                            Obj09_UPblock:
0001C0F2 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C0F6 6600                       		bne.s	Obj09_DOWNblock
0001C0F8 4A28 0036                  		tst.b	$36(a0)
0001C0FC 6600 0000                  		bne.w	Obj09_NoGlass
0001C100 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C106 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C10C 6700                       		beq.s	Obj09_UPsnd
0001C10E E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C112 2268 0032                  		movea.l	$32(a0),a1
0001C116 5389                       		subq.l	#1,a1
0001C118 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C11C                            
0001C11C                            Obj09_UPsnd:
0001C11C 303C 00A9                  		move.w	#$A9,d0
0001C120 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C126                            ; ===========================================================================
0001C126                            
0001C126                            Obj09_DOWNblock:
0001C126 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C12A 6600                       		bne.s	Obj09_Rblock
0001C12C 4A28 0036                  		tst.b	$36(a0)
0001C130 6600 0000                  		bne.w	Obj09_NoGlass
0001C134 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C13A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C140 6600                       		bne.s	Obj09_DOWNsnd
0001C142 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C146 2268 0032                  		movea.l	$32(a0),a1
0001C14A 5389                       		subq.l	#1,a1
0001C14C 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C150                            
0001C150                            Obj09_DOWNsnd:
0001C150 303C 00A9                  		move.w	#$A9,d0
0001C154 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C15A                            ; ===========================================================================
0001C15A                            
0001C15A                            Obj09_Rblock:
0001C15A 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C15E 6600                       		bne.s	Obj09_ChkGlass
0001C160 4A28 0037                  		tst.b	$37(a0)
0001C164 6600 0000                  		bne.w	Obj09_NoGlass
0001C168 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C16E 6100 F504                  		bsr.w	SS_RemoveCollectedItem
0001C172 6600                       		bne.s	Obj09_RevStage
0001C174 14BC 0004                  		move.b	#4,(a2)
0001C178 2028 0032                  		move.l	$32(a0),d0
0001C17C 5380                       		subq.l	#1,d0
0001C17E 2540 0004                  		move.l	d0,4(a2)
0001C182                            
0001C182                            Obj09_RevStage:
0001C182 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C186 303C 00A9                  		move.w	#$A9,d0
0001C18A 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play sound
0001C190                            ; ===========================================================================
0001C190                            
0001C190                            Obj09_ChkGlass:
0001C190 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C194 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C196 0C00 002E                  		cmpi.b	#$2E,d0
0001C19A 6700                       		beq.s	Obj09_Glass
0001C19C 0C00 002F                  		cmpi.b	#$2F,d0
0001C1A0 6700                       		beq.s	Obj09_Glass
0001C1A2 0C00 0030                  		cmpi.b	#$30,d0
0001C1A6 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C1A8                            
0001C1A8                            Obj09_Glass:
0001C1A8 6100 F4CA                  		bsr.w	SS_RemoveCollectedItem
0001C1AC 6600                       		bne.s	Obj09_GlassSnd
0001C1AE 14BC 0006                  		move.b	#6,(a2)
0001C1B2 2268 0032                  		movea.l	$32(a0),a1
0001C1B6 5389                       		subq.l	#1,a1
0001C1B8 2549 0004                  		move.l	a1,4(a2)
0001C1BC 1011                       		move.b	(a1),d0
0001C1BE 5200                       		addq.b	#1,d0		; change glass type when touched
0001C1C0 0C00 0030                  		cmpi.b	#$30,d0
0001C1C4 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C1C6 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C1C8                            
0001C1C8                            Obj09_GlassUpdate:
0001C1C8 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C1CC                            
0001C1CC                            Obj09_GlassSnd:
0001C1CC 303C 00BA                  		move.w	#$BA,d0
0001C1D0 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C1D6                            ; ===========================================================================
0001C1D6                            
0001C1D6                            Obj09_NoGlass:
0001C1D6 4E75                       		rts	
0001C1D8                            ; End of function Obj09_ChkItems2
0001C1D8                            
0001C1D8                            ; ===========================================================================
0001C1D8                            ; ---------------------------------------------------------------------------
0001C1D8                            ; Object 10 - blank
0001C1D8                            ; ---------------------------------------------------------------------------
0001C1D8                            
0001C1D8                            Obj10:					; XREF: Obj_Index
0001C1D8 4E75                       		rts	
0001C1DA                            ; ---------------------------------------------------------------------------
0001C1DA                            ; Subroutine to	animate	level graphics
0001C1DA                            ; ---------------------------------------------------------------------------
0001C1DA                            
0001C1DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1DA                            
0001C1DA                            
0001C1DA                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C1DA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C1DE 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C1E0 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C1E6 6100 0000                  		bsr.w	AniArt_GiantRing
0001C1EA 7000                       		moveq	#0,d0
0001C1EC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C1F0 D040                       		add.w	d0,d0
0001C1F2 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C1F6 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C1FA                            ; ===========================================================================
0001C1FA                            
0001C1FA                            AniArt_Pause:
0001C1FA 4E75                       		rts	
0001C1FC                            ; End of function AniArt_Load
0001C1FC                            
0001C1FC                            ; ===========================================================================
0001C1FC 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C200 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C204 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C208 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C20A                            ; ===========================================================================
0001C20A                            ; ---------------------------------------------------------------------------
0001C20A                            ; Animated pattern routine - Green Hill
0001C20A                            ; ---------------------------------------------------------------------------
0001C20A                            
0001C20A                            AniArt_GHZ:				; XREF: AniArt_Index
0001C20A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C20E 6A00                       		bpl.s	loc_1C08A
0001C210 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C216 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C21C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C220 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C224 0240 0001                  		andi.w	#1,d0
0001C228 6700                       		beq.s	loc_1C078
0001C22A 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C22E                            
0001C22E                            loc_1C078:
0001C22E 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C238 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C23C 6000 0000                  		bra.w	LoadTiles
0001C240                            ; ===========================================================================
0001C240                            
0001C240                            loc_1C08A:
0001C240 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C244 6A00                       		bpl.s	loc_1C0C0
0001C246 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C24C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C252 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C256 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C25A 0240 0001                  		andi.w	#1,d0
0001C25E 6700                       		beq.s	loc_1C0AE
0001C260 43E9 0200                  		lea	$200(a1),a1
0001C264                            
0001C264                            loc_1C0AE:
0001C264 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C26E 323C 000F                  		move.w	#$F,d1
0001C272 6000 0000                  		bra.w	LoadTiles
0001C276                            ; ===========================================================================
0001C276                            
0001C276                            loc_1C0C0:
0001C276 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C27A 6A00                       		bpl.s	locret_1C10C
0001C27C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C282 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C286 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C28A 0240 0003                  		andi.w	#3,d0
0001C28E 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C292 0800 0000                  		btst	#0,d0
0001C296 6600                       		bne.s	loc_1C0E8
0001C298 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C29E                            
0001C29E                            loc_1C0E8:
0001C29E EF48                       		lsl.w	#7,d0
0001C2A0 3200                       		move.w	d0,d1
0001C2A2 D040                       		add.w	d0,d0
0001C2A4 D041                       		add.w	d1,d0
0001C2A6 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C2B0 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C2B6 43F1 0000                  		lea	(a1,d0.w),a1
0001C2BA 323C 000B                  		move.w	#$B,d1
0001C2BE 6100 0000                  		bsr.w	LoadTiles
0001C2C2                            
0001C2C2                            locret_1C10C:
0001C2C2 4E75                       		rts	
0001C2C4                            ; ===========================================================================
0001C2C4 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C2C8                            ; ===========================================================================
0001C2C8                            ; ---------------------------------------------------------------------------
0001C2C8                            ; Animated pattern routine - Marble
0001C2C8                            ; ---------------------------------------------------------------------------
0001C2C8                            
0001C2C8                            AniArt_MZ:				; XREF: AniArt_Index
0001C2C8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C2CC 6A00                       		bpl.s	loc_1C150
0001C2CE 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C2D4 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C2DA 7000                       		moveq	#0,d0
0001C2DC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C2E0 5200                       		addq.b	#1,d0
0001C2E2 0C00 0003                  		cmpi.b	#3,d0
0001C2E6 6600                       		bne.s	loc_1C134
0001C2E8 7000                       		moveq	#0,d0
0001C2EA                            
0001C2EA                            loc_1C134:
0001C2EA 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C2EE C0FC 0100                  		mulu.w	#$100,d0
0001C2F2 D2C0                       		adda.w	d0,a1
0001C2F4 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C2FE 323C 0007                  		move.w	#7,d1
0001C302 6100 0000                  		bsr.w	LoadTiles
0001C306                            
0001C306                            loc_1C150:
0001C306 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C30A 6A00                       		bpl.s	loc_1C1AE
0001C30C 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C312 7000                       		moveq	#0,d0
0001C314 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C318 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C31E EE58                       		ror.w	#7,d0
0001C320 D8C0                       		adda.w	d0,a4
0001C322 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C32C 7600                       		moveq	#0,d3
0001C32E 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C332 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C336 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C33A 343C 0003                  		move.w	#3,d2
0001C33E                            
0001C33E                            loc_1C188:
0001C33E 3003                       		move.w	d3,d0
0001C340 D040                       		add.w	d0,d0
0001C342 0240 001E                  		andi.w	#$1E,d0
0001C346 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C34C 3033 0000                  		move.w	(a3,d0.w),d0
0001C350 47F3 0000                  		lea	(a3,d0.w),a3
0001C354 224C                       		movea.l	a4,a1
0001C356 323C 001F                  		move.w	#$1F,d1
0001C35A 4E93                       		jsr	(a3)
0001C35C 5843                       		addq.w	#4,d3
0001C35E 51CA FFDE                  		dbf	d2,loc_1C188
0001C362 4E75                       		rts	
0001C364                            ; ===========================================================================
0001C364                            
0001C364                            loc_1C1AE:
0001C364 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C368 6A00 0000                  		bpl.w	locret_1C1EA
0001C36C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C372 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C378 7000                       		moveq	#0,d0
0001C37A 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C37E 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C382 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C388 C0FC 00C0                  		mulu.w	#$C0,d0
0001C38C D2C0                       		adda.w	d0,a1
0001C38E 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C398 323C 0005                  		move.w	#5,d1
0001C39C 6000 0000                  		bra.w	LoadTiles
0001C3A0                            ; ===========================================================================
0001C3A0                            
0001C3A0                            locret_1C1EA:
0001C3A0 4E75                       		rts	
0001C3A2                            ; ===========================================================================
0001C3A2                            ; ---------------------------------------------------------------------------
0001C3A2                            ; Animated pattern routine - Scrap Brain
0001C3A2                            ; ---------------------------------------------------------------------------
0001C3A2                            
0001C3A2                            AniArt_SBZ:				; XREF: AniArt_Index
0001C3A2 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C3A6 6700                       		beq.s	loc_1C1F8
0001C3A8 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C3AC 6000                       		bra.s	loc_1C250
0001C3AE                            ; ===========================================================================
0001C3AE                            
0001C3AE                            loc_1C1F8:
0001C3AE 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C3B2 6A00                       		bpl.s	loc_1C250
0001C3B4 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C3BA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C3C0 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C3CA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C3CE 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C3D2 0240 0007                  		andi.w	#7,d0
0001C3D6 6700                       		beq.s	loc_1C234
0001C3D8 5340                       		subq.w	#1,d0
0001C3DA C0FC 0180                  		mulu.w	#$180,d0
0001C3DE 43F1 0000                  		lea	(a1,d0.w),a1
0001C3E2 323C 000B                  		move.w	#$B,d1
0001C3E6 6000 0000                  		bra.w	LoadTiles
0001C3EA                            ; ===========================================================================
0001C3EA                            
0001C3EA                            loc_1C234:
0001C3EA 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C3F0                            
0001C3F0                            loc_1C23A:
0001C3F0 323C 0005                  		move.w	#5,d1
0001C3F4 6100 0000                  		bsr.w	LoadTiles
0001C3F8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C3FE 323C 0005                  		move.w	#5,d1
0001C402 6000 0000                  		bra.w	LoadTiles
0001C406                            ; ===========================================================================
0001C406                            
0001C406                            loc_1C250:
0001C406 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C40A 6700                       		beq.s	loc_1C25C
0001C40C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C410 6000                       		bra.s	locret_1C2A0
0001C412                            ; ===========================================================================
0001C412                            
0001C412                            loc_1C25C:
0001C412 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C416 6A00                       		bpl.s	locret_1C2A0
0001C418 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C41E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C424 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C42E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C432 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C436 0240 0007                  		andi.w	#7,d0
0001C43A 6700                       		beq.s	loc_1C298
0001C43C 5340                       		subq.w	#1,d0
0001C43E C0FC 0180                  		mulu.w	#$180,d0
0001C442 43F1 0000                  		lea	(a1,d0.w),a1
0001C446 323C 000B                  		move.w	#$B,d1
0001C44A 6000 0000                  		bra.w	LoadTiles
0001C44E                            ; ===========================================================================
0001C44E                            
0001C44E                            loc_1C298:
0001C44E 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C454 609A                       		bra.s	loc_1C23A
0001C456                            ; ===========================================================================
0001C456                            
0001C456                            locret_1C2A0:
0001C456 4E75                       		rts	
0001C458                            ; ===========================================================================
0001C458                            ; ---------------------------------------------------------------------------
0001C458                            ; Animated pattern routine - ending sequence
0001C458                            ; ---------------------------------------------------------------------------
0001C458                            
0001C458                            AniArt_Ending:				; XREF: AniArt_Index
0001C458 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C45C 6A00                       		bpl.s	loc_1C2F4
0001C45E 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C464 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C46A 45F8 9400                  		lea	($FFFF9400).w,a2
0001C46E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C472 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C476 0240 0001                  		andi.w	#1,d0
0001C47A 6700                       		beq.s	loc_1C2CE
0001C47C 43E9 0200                  		lea	$200(a1),a1
0001C480 45EA 0200                  		lea	$200(a2),a2
0001C484                            
0001C484                            loc_1C2CE:
0001C484 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C48E 323C 000F                  		move.w	#$F,d1
0001C492 6100 0000                  		bsr.w	LoadTiles
0001C496 224A                       		movea.l	a2,a1
0001C498 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C4A2 323C 000F                  		move.w	#$F,d1
0001C4A6 6000 0000                  		bra.w	LoadTiles
0001C4AA                            ; ===========================================================================
0001C4AA                            
0001C4AA                            loc_1C2F4:
0001C4AA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C4AE 6A00                       		bpl.s	loc_1C33C
0001C4B0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C4B6 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C4BA 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C4BE 0240 0007                  		andi.w	#7,d0
0001C4C2 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C4C6 EF48                       		lsl.w	#7,d0
0001C4C8 3200                       		move.w	d0,d1
0001C4CA D040                       		add.w	d0,d0
0001C4CC D041                       		add.w	d1,d0
0001C4CE 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C4D8 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C4DE 43F1 0000                  		lea	(a1,d0.w),a1
0001C4E2 323C 000B                  		move.w	#$B,d1
0001C4E6 6000 0000                  		bra.w	LoadTiles
0001C4EA                            ; ===========================================================================
0001C4EA 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C4F2                            ; ===========================================================================
0001C4F2                            
0001C4F2                            loc_1C33C:
0001C4F2 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C4F6 6A00                       		bpl.s	loc_1C37A
0001C4F8 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C4FE 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C502 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C506 0240 0003                  		andi.w	#3,d0
0001C50A 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C50E E148                       		lsl.w	#8,d0
0001C510 D040                       		add.w	d0,d0
0001C512 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C51C 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C520 43F1 0000                  		lea	(a1,d0.w),a1
0001C524 323C 000F                  		move.w	#$F,d1
0001C528 6000 0000                  		bra.w	LoadTiles
0001C52C                            ; ===========================================================================
0001C52C 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C530                            ; ===========================================================================
0001C530                            
0001C530                            loc_1C37A:
0001C530 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C534 6A00                       		bpl.s	locret_1C3B4
0001C536 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C53C 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C540 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C544 0240 0003                  		andi.w	#3,d0
0001C548 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C54C E148                       		lsl.w	#8,d0
0001C54E D040                       		add.w	d0,d0
0001C550 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C55A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C55E 43F1 0000                  		lea	(a1,d0.w),a1
0001C562 323C 000F                  		move.w	#$F,d1
0001C566 6000 0000                  		bra.w	LoadTiles
0001C56A                            ; ===========================================================================
0001C56A                            
0001C56A                            locret_1C3B4:
0001C56A 4E75                       		rts	
0001C56C                            ; ===========================================================================
0001C56C                            
0001C56C                            AniArt_none:				; XREF: AniArt_Index
0001C56C 4E75                       		rts	
0001C56E                            
0001C56E                            ; ---------------------------------------------------------------------------
0001C56E                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C56E                            ; ---------------------------------------------------------------------------
0001C56E                            
0001C56E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C56E                            
0001C56E                            
0001C56E                            LoadTiles:
0001C56E 2C99                       		move.l	(a1)+,(a6)
0001C570 2C99                       		move.l	(a1)+,(a6)
0001C572 2C99                       		move.l	(a1)+,(a6)
0001C574 2C99                       		move.l	(a1)+,(a6)
0001C576 2C99                       		move.l	(a1)+,(a6)
0001C578 2C99                       		move.l	(a1)+,(a6)
0001C57A 2C99                       		move.l	(a1)+,(a6)
0001C57C 2C99                       		move.l	(a1)+,(a6)
0001C57E 51C9 FFEE                  		dbf	d1,LoadTiles
0001C582 4E75                       		rts	
0001C584                            ; End of function LoadTiles
0001C584                            
0001C584                            ; ===========================================================================
0001C584                            ; ---------------------------------------------------------------------------
0001C584                            ; Animated pattern routine - more Marble Zone
0001C584                            ; ---------------------------------------------------------------------------
0001C584 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C588 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C58C 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C590 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C594 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C598 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C59C 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C5A0 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C5A4                            ; ===========================================================================
0001C5A4                            
0001C5A4                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C5A4 2C91                       		move.l	(a1),(a6)
0001C5A6 43E9 0010                  		lea	$10(a1),a1
0001C5AA 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C5AE 4E75                       		rts	
0001C5B0                            ; ===========================================================================
0001C5B0                            
0001C5B0                            loc_1C3FA:				; XREF: AniArt_MZextra
0001C5B0 2029 0002                  		move.l	2(a1),d0
0001C5B4 1029 0001                  		move.b	1(a1),d0
0001C5B8 E098                       		ror.l	#8,d0
0001C5BA 2C80                       		move.l	d0,(a6)
0001C5BC 43E9 0010                  		lea	$10(a1),a1
0001C5C0 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001C5C4 4E75                       		rts	
0001C5C6                            ; ===========================================================================
0001C5C6                            
0001C5C6                            loc_1C410:				; XREF: AniArt_MZextra
0001C5C6 2CA9 0002                  		move.l	2(a1),(a6)
0001C5CA 43E9 0010                  		lea	$10(a1),a1
0001C5CE 51C9 FFF6                  		dbf	d1,loc_1C410
0001C5D2 4E75                       		rts	
0001C5D4                            ; ===========================================================================
0001C5D4                            
0001C5D4                            loc_1C41E:				; XREF: AniArt_MZextra
0001C5D4 2029 0004                  		move.l	4(a1),d0
0001C5D8 1029 0003                  		move.b	3(a1),d0
0001C5DC E098                       		ror.l	#8,d0
0001C5DE 2C80                       		move.l	d0,(a6)
0001C5E0 43E9 0010                  		lea	$10(a1),a1
0001C5E4 51C9 FFEE                  		dbf	d1,loc_1C41E
0001C5E8 4E75                       		rts	
0001C5EA                            ; ===========================================================================
0001C5EA                            
0001C5EA                            loc_1C434:				; XREF: AniArt_MZextra
0001C5EA 2CA9 0004                  		move.l	4(a1),(a6)
0001C5EE 43E9 0010                  		lea	$10(a1),a1
0001C5F2 51C9 FFF6                  		dbf	d1,loc_1C434
0001C5F6 4E75                       		rts	
0001C5F8                            ; ===========================================================================
0001C5F8                            
0001C5F8                            loc_1C442:				; XREF: AniArt_MZextra
0001C5F8 2029 0006                  		move.l	6(a1),d0
0001C5FC 1029 0005                  		move.b	5(a1),d0
0001C600 E098                       		ror.l	#8,d0
0001C602 2C80                       		move.l	d0,(a6)
0001C604 43E9 0010                  		lea	$10(a1),a1
0001C608 51C9 FFEE                  		dbf	d1,loc_1C442
0001C60C 4E75                       		rts	
0001C60E                            ; ===========================================================================
0001C60E                            
0001C60E                            loc_1C458:				; XREF: AniArt_MZextra
0001C60E 2CA9 0006                  		move.l	6(a1),(a6)
0001C612 43E9 0010                  		lea	$10(a1),a1
0001C616 51C9 FFF6                  		dbf	d1,loc_1C458
0001C61A 4E75                       		rts	
0001C61C                            ; ===========================================================================
0001C61C                            
0001C61C                            loc_1C466:				; XREF: AniArt_MZextra
0001C61C 2029 0008                  		move.l	8(a1),d0
0001C620 1029 0007                  		move.b	7(a1),d0
0001C624 E098                       		ror.l	#8,d0
0001C626 2C80                       		move.l	d0,(a6)
0001C628 43E9 0010                  		lea	$10(a1),a1
0001C62C 51C9 FFEE                  		dbf	d1,loc_1C466
0001C630 4E75                       		rts	
0001C632                            ; ===========================================================================
0001C632                            
0001C632                            loc_1C47C:				; XREF: AniArt_MZextra
0001C632 2CA9 0008                  		move.l	8(a1),(a6)
0001C636 43E9 0010                  		lea	$10(a1),a1
0001C63A 51C9 FFF6                  		dbf	d1,loc_1C47C
0001C63E 4E75                       		rts	
0001C640                            ; ===========================================================================
0001C640                            
0001C640                            loc_1C48A:				; XREF: AniArt_MZextra
0001C640 2029 000A                  		move.l	$A(a1),d0
0001C644 1029 0009                  		move.b	9(a1),d0
0001C648 E098                       		ror.l	#8,d0
0001C64A 2C80                       		move.l	d0,(a6)
0001C64C 43E9 0010                  		lea	$10(a1),a1
0001C650 51C9 FFEE                  		dbf	d1,loc_1C48A
0001C654 4E75                       		rts	
0001C656                            ; ===========================================================================
0001C656                            
0001C656                            loc_1C4A0:				; XREF: AniArt_MZextra
0001C656 2CA9 000A                  		move.l	$A(a1),(a6)
0001C65A 43E9 0010                  		lea	$10(a1),a1
0001C65E 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001C662 4E75                       		rts	
0001C664                            ; ===========================================================================
0001C664                            
0001C664                            loc_1C4AE:				; XREF: AniArt_MZextra
0001C664 2029 000C                  		move.l	$C(a1),d0
0001C668 1029 000B                  		move.b	$B(a1),d0
0001C66C E098                       		ror.l	#8,d0
0001C66E 2C80                       		move.l	d0,(a6)
0001C670 43E9 0010                  		lea	$10(a1),a1
0001C674 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001C678 4E75                       		rts	
0001C67A                            ; ===========================================================================
0001C67A                            
0001C67A                            loc_1C4C4:				; XREF: AniArt_MZextra
0001C67A 2CA9 000C                  		move.l	$C(a1),(a6)
0001C67E 43E9 0010                  		lea	$10(a1),a1
0001C682 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001C686 4E75                       		rts	
0001C688                            ; ===========================================================================
0001C688                            
0001C688                            loc_1C4D2:				; XREF: AniArt_MZextra
0001C688 2029 000C                  		move.l	$C(a1),d0
0001C68C E198                       		rol.l	#8,d0
0001C68E 1011                       		move.b	0(a1),d0
0001C690 2C80                       		move.l	d0,(a6)
0001C692 43E9 0010                  		lea	$10(a1),a1
0001C696 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001C69A 4E75                       		rts	
0001C69C                            ; ===========================================================================
0001C69C                            
0001C69C                            loc_1C4E8:				; XREF: AniArt_MZextra
0001C69C 3CA9 000E                  		move.w	$E(a1),(a6)
0001C6A0 3C91                       		move.w	0(a1),(a6)
0001C6A2 43E9 0010                  		lea	$10(a1),a1
0001C6A6 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001C6AA 4E75                       		rts	
0001C6AC                            ; ===========================================================================
0001C6AC                            
0001C6AC                            loc_1C4FA:				; XREF: AniArt_MZextra
0001C6AC 2011                       		move.l	0(a1),d0
0001C6AE 1029 000F                  		move.b	$F(a1),d0
0001C6B2 E098                       		ror.l	#8,d0
0001C6B4 2C80                       		move.l	d0,(a6)
0001C6B6 43E9 0010                  		lea	$10(a1),a1
0001C6BA 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001C6BE 4E75                       		rts	
0001C6C0                            
0001C6C0                            ; ---------------------------------------------------------------------------
0001C6C0                            ; Animated pattern routine - giant ring
0001C6C0                            ; ---------------------------------------------------------------------------
0001C6C0                            
0001C6C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6C0                            
0001C6C0                            
0001C6C0                            AniArt_GiantRing:			; XREF: AniArt_Load
0001C6C0 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001C6C4 6600                       		bne.s	loc_1C518
0001C6C6 4E75                       		rts	
0001C6C8                            ; ===========================================================================
0001C6C8                            
0001C6C8                            loc_1C518:
0001C6C8 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001C6CE 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001C6D4 7000                       		moveq	#0,d0
0001C6D6 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001C6DA 43F1 0000                  		lea	(a1,d0.w),a1
0001C6DE 0640 8000                  		addi.w	#$8000,d0
0001C6E2 E588                       		lsl.l	#2,d0
0001C6E4 E448                       		lsr.w	#2,d0
0001C6E6 0040 4000                  		ori.w	#$4000,d0
0001C6EA 4840                       		swap	d0
0001C6EC 2D40 0004                  		move.l	d0,4(a6)
0001C6F0 323C 000D                  		move.w	#$D,d1
0001C6F4 6000 FE78                  		bra.w	LoadTiles
0001C6F8                            ; End of function AniArt_GiantRing
0001C6F8                            
0001C6F8                            ; ===========================================================================
0001C6F8                            ; ---------------------------------------------------------------------------
0001C6F8                            ; Object 21 - SCORE, TIME, RINGS
0001C6F8                            ; ---------------------------------------------------------------------------
0001C6F8                            
0001C6F8                            Obj21:					; XREF: Obj_Index
0001C6F8 7000                       		moveq	#0,d0
0001C6FA 1028 0024                  		move.b	$24(a0),d0
0001C6FE 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001C702 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001C706                            ; ===========================================================================
0001C706 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001C708 0000                       		dc.w Obj21_Flash-Obj21_Index
0001C70A                            ; ===========================================================================
0001C70A                            
0001C70A                            Obj21_Main:				; XREF: Obj21_Main
0001C70A 5428 0024                  		addq.b	#2,$24(a0)
0001C70E 317C 0090 0008             		move.w	#$90,8(a0)
0001C714 317C 0108 000A             		move.w	#$108,$A(a0)
0001C71A 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001C722 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001C728 117C 0000 0001             		move.b	#0,1(a0)
0001C72E 117C 0000 0018             		move.b	#0,$18(a0)
0001C734                            
0001C734                            Obj21_Flash:				; XREF: Obj21_Main
0001C734 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001C738 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001C73A 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001C73E 4EF9 0000 D774             		jmp	DisplaySprite
0001C744                            ; ===========================================================================
0001C744                            
0001C744                            Obj21_Flash2:
0001C744 7000                       		moveq	#0,d0
0001C746 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001C74C 6600                       		bne.s	Obj21_Display
0001C74E 5240                       		addq.w	#1,d0		; make ring counter flash red
0001C750 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001C756 6600                       		bne.s	Obj21_Display	; if not, branch
0001C758 5440                       		addq.w	#2,d0		; make time counter flash red
0001C75A                            
0001C75A                            Obj21_Display:
0001C75A 1140 001A                  		move.b	d0,$1A(a0)
0001C75E 4EF9 0000 D774             		jmp	DisplaySprite
0001C764                            ; ===========================================================================
0001C764                            ; ---------------------------------------------------------------------------
0001C764                            ; Sprite mappings - SCORE, TIME, RINGS
0001C764                            ; ---------------------------------------------------------------------------
0001C764                            Map_obj21:
0001C764                            	include "_maps\obj21.asm"
0001C764                            ; ---------------------------------------------------------------------------
0001C764                            ; Sprite mappings - SCORE, TIME, RINGS
0001C764                            ; ---------------------------------------------------------------------------
0001C764 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001C768 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001C76C 0A                         byte_1C5BC:	dc.b $A
0001C76D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C772 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C777 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C77C 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C781 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C786 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C78B A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C790 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C795 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C79A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C79F 00                         		dc.b 0
0001C7A0 0A                         byte_1C5F0:	dc.b $A
0001C7A1 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C7A6 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C7AB 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C7B0 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C7B5 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C7BA A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C7BF A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C7C4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C7C9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C7CE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C7D3 00                         		dc.b 0
0001C7D4 0A                         byte_1C624:	dc.b $A
0001C7D5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C7DA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C7DF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C7E4 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C7E9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C7EE A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C7F3 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C7F8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C7FD 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C802 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C807 00                         		dc.b 0
0001C808 0A                         byte_1C658:	dc.b $A
0001C809 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C80E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C813 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C818 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C81D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C822 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C827 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C82C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C831 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C836 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C83C 00                         		even
0001C83C 00                         		even
0001C83C                            
0001C83C                            ; ---------------------------------------------------------------------------
0001C83C                            ; Add points subroutine
0001C83C                            ; ---------------------------------------------------------------------------
0001C83C                            
0001C83C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C83C                            
0001C83C                            
0001C83C                            AddPoints:
0001C83C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001C842 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001C846 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001C84A D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001C84C 223C 000F 423F             		move.l	#999999,d1
0001C852 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001C854 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001C858 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001C85A 2481                       		move.l	d1,(a2)
0001C85C                            
0001C85C                            loc_1C6AC:
0001C85C 2013                       		move.l	(a3),d0
0001C85E B092                       		cmp.l	(a2),d0
0001C860 6500 0000                  		bcs.w	locret_1C6B6
0001C864 2480                       		move.l	d0,(a2)
0001C866                            
0001C866                            locret_1C6B6:
0001C866 4E75                       		rts	
0001C868                            ; End of function AddPoints
0001C868                            
0001C868                            ; ---------------------------------------------------------------------------
0001C868                            ; Subroutine to	update the HUD
0001C868                            ; ---------------------------------------------------------------------------
0001C868                            
0001C868                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C868                            
0001C868                            
0001C868                            HudUpdate:
0001C868 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001C86C 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001C870 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001C874 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001C876 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001C87A 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001C880 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001C884 6100 0000                  		bsr.w	Hud_Score
0001C888                            
0001C888                            Hud_ChkRings:
0001C888 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001C88C 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001C88E 6A00                       		bpl.s	loc_1C6E4
0001C890 6100 0000                  		bsr.w	Hud_LoadZero
0001C894                            
0001C894                            loc_1C6E4:
0001C894 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001C898 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001C89E 7200                       		moveq	#0,d1
0001C8A0 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001C8A4 6100 0000                  		bsr.w	Hud_Rings
0001C8A8                            
0001C8A8                            Hud_ChkTime:
0001C8A8 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001C8AC 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001C8AE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C8B2 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001C8B4 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001C8B8 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001C8BE 6700                       		beq.s	TimeOver	; if yes, branch
0001C8C0 5221                       		addq.b	#1,-(a1)
0001C8C2 0C11 003C                  		cmpi.b	#60,(a1)
0001C8C6 6500                       		bcs.s	Hud_ChkLives
0001C8C8 12BC 0000                  		move.b	#0,(a1)
0001C8CC 5221                       		addq.b	#1,-(a1)
0001C8CE 0C11 003C                  		cmpi.b	#60,(a1)
0001C8D2 6500                       		bcs.s	loc_1C734
0001C8D4 12BC 0000                  		move.b	#0,(a1)
0001C8D8 5221                       		addq.b	#1,-(a1)
0001C8DA 0C11 0009                  		cmpi.b	#9,(a1)
0001C8DE 6500                       		bcs.s	loc_1C734
0001C8E0 12BC 0009                  		move.b	#9,(a1)
0001C8E4                            
0001C8E4                            loc_1C734:
0001C8E4 203C 5E40 0003             		move.l	#$5E400003,d0
0001C8EA 7200                       		moveq	#0,d1
0001C8EC 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001C8F0 6100 0000                  		bsr.w	Hud_Mins
0001C8F4 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001C8FA 7200                       		moveq	#0,d1
0001C8FC 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001C900 6100 0000                  		bsr.w	Hud_Secs
0001C904                            
0001C904                            Hud_ChkLives:
0001C904 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001C908 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001C90A 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001C90E 6100 0000                  		bsr.w	Hud_Lives
0001C912                            
0001C912                            Hud_ChkBonus:
0001C912 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001C916 6700                       		beq.s	Hud_End		; if not, branch
0001C918 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001C91C 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001C926 7200                       		moveq	#0,d1
0001C928 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001C92C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C930 7200                       		moveq	#0,d1
0001C932 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001C936 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C93A                            
0001C93A                            Hud_End:
0001C93A 4E75                       		rts	
0001C93C                            ; ===========================================================================
0001C93C                            
0001C93C                            TimeOver:				; XREF: Hud_ChkTime
0001C93C 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001C940 41F8 D000                  		lea	($FFFFD000).w,a0
0001C944 2448                       		movea.l	a0,a2
0001C946 6100 E90A                  		bsr.w	KillSonic
0001C94A 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001C950 4E75                       		rts	
0001C952                            ; ===========================================================================
0001C952                            
0001C952                            HudDebug:				; XREF: HudUpdate
0001C952 6100 0000                  		bsr.w	HudDb_XY
0001C956 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001C95A 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001C95C 6A00                       		bpl.s	HudDb_Rings
0001C95E 6100 0000                  		bsr.w	Hud_LoadZero
0001C962                            
0001C962                            HudDb_Rings:
0001C962 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001C966 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001C96C 7200                       		moveq	#0,d1
0001C96E 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001C972 6100 0000                  		bsr.w	Hud_Rings
0001C976                            
0001C976                            HudDb_ObjCount:
0001C976 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001C97C 7200                       		moveq	#0,d1
0001C97E 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001C982 6100 0000                  		bsr.w	Hud_Secs
0001C986 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001C98A 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001C98C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001C990 6100 0000                  		bsr.w	Hud_Lives
0001C994                            
0001C994                            HudDb_ChkBonus:
0001C994 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001C998 6700                       		beq.s	HudDb_End	; if not, branch
0001C99A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001C99E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001C9A8 7200                       		moveq	#0,d1
0001C9AA 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001C9AE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C9B2 7200                       		moveq	#0,d1
0001C9B4 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001C9B8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C9BC                            
0001C9BC                            HudDb_End:
0001C9BC 4E75                       		rts	
0001C9BE                            ; End of function HudUpdate
0001C9BE                            
0001C9BE                            ; ---------------------------------------------------------------------------
0001C9BE                            ; Subroutine to	load "0" on the	HUD
0001C9BE                            ; ---------------------------------------------------------------------------
0001C9BE                            
0001C9BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9BE                            
0001C9BE                            
0001C9BE                            Hud_LoadZero:				; XREF: HudUpdate
0001C9BE 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001C9C8 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001C9CC 343C 0002                  		move.w	#2,d2
0001C9D0 6000                       		bra.s	loc_1C83E
0001C9D2                            ; End of function Hud_LoadZero
0001C9D2                            
0001C9D2                            ; ---------------------------------------------------------------------------
0001C9D2                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001C9D2                            ; ---------------------------------------------------------------------------
0001C9D2                            
0001C9D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9D2                            
0001C9D2                            
0001C9D2                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001C9D2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C9D8 6100 0000                  		bsr.w	Hud_Lives
0001C9DC 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001C9E6 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001C9EA 343C 000E                  		move.w	#$E,d2
0001C9EE                            
0001C9EE                            loc_1C83E:				; XREF: Hud_LoadZero
0001C9EE 43FA 0000                  		lea	Art_Hud(pc),a1
0001C9F2                            
0001C9F2                            loc_1C842:
0001C9F2 323C 000F                  		move.w	#$F,d1
0001C9F6 101A                       		move.b	(a2)+,d0
0001C9F8 6B00                       		bmi.s	loc_1C85E
0001C9FA 4880                       		ext.w	d0
0001C9FC EB48                       		lsl.w	#5,d0
0001C9FE 47F1 0000                  		lea	(a1,d0.w),a3
0001CA02                            
0001CA02                            loc_1C852:
0001CA02 2C9B                       		move.l	(a3)+,(a6)
0001CA04 51C9 FFFC                  		dbf	d1,loc_1C852
0001CA08                            
0001CA08                            loc_1C858:
0001CA08 51CA FFE8                  		dbf	d2,loc_1C842
0001CA0C                            
0001CA0C 4E75                       		rts	
0001CA0E                            ; ===========================================================================
0001CA0E                            
0001CA0E                            loc_1C85E:
0001CA0E 2CBC 0000 0000             		move.l	#0,(a6)
0001CA14 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CA18                            
0001CA18 60EE                       		bra.s	loc_1C858
0001CA1A                            ; End of function Hud_Base
0001CA1A                            
0001CA1A                            ; ===========================================================================
0001CA1A 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CA26 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CA2A                            ; ---------------------------------------------------------------------------
0001CA2A                            ; Subroutine to	load debug mode	numbers	patterns
0001CA2A                            ; ---------------------------------------------------------------------------
0001CA2A                            
0001CA2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA2A                            
0001CA2A                            
0001CA2A                            HudDb_XY:				; XREF: HudDebug
0001CA2A 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CA34 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CA38 4841                       		swap	d1
0001CA3A 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CA3E 6100                       		bsr.s	HudDb_XY2
0001CA40 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CA44 4841                       		swap	d1
0001CA46 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CA4A                            ; End of function HudDb_XY
0001CA4A                            
0001CA4A                            
0001CA4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA4A                            
0001CA4A                            
0001CA4A                            HudDb_XY2:
0001CA4A 7C07                       		moveq	#7,d6
0001CA4C 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001CA52                            
0001CA52                            HudDb_XYLoop:
0001CA52 E959                       		rol.w	#4,d1
0001CA54 3401                       		move.w	d1,d2
0001CA56 0242 000F                  		andi.w	#$F,d2
0001CA5A 0C42 000A                  		cmpi.w	#$A,d2
0001CA5E 6500                       		bcs.s	loc_1C8B2
0001CA60 5E42                       		addq.w	#7,d2
0001CA62                            
0001CA62                            loc_1C8B2:
0001CA62 EB4A                       		lsl.w	#5,d2
0001CA64 47F1 2000                  		lea	(a1,d2.w),a3
0001CA68 2C9B                       		move.l	(a3)+,(a6)
0001CA6A 2C9B                       		move.l	(a3)+,(a6)
0001CA6C 2C9B                       		move.l	(a3)+,(a6)
0001CA6E 2C9B                       		move.l	(a3)+,(a6)
0001CA70 2C9B                       		move.l	(a3)+,(a6)
0001CA72 2C9B                       		move.l	(a3)+,(a6)
0001CA74 2C9B                       		move.l	(a3)+,(a6)
0001CA76 2C9B                       		move.l	(a3)+,(a6)
0001CA78 4841                       		swap	d1
0001CA7A 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CA7E                            
0001CA7E 4E75                       		rts	
0001CA80                            ; End of function HudDb_XY2
0001CA80                            
0001CA80                            ; ---------------------------------------------------------------------------
0001CA80                            ; Subroutine to	load rings numbers patterns
0001CA80                            ; ---------------------------------------------------------------------------
0001CA80                            
0001CA80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA80                            
0001CA80                            
0001CA80                            Hud_Rings:				; XREF: HudUpdate
0001CA80 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CA86 7C02                       		moveq	#2,d6
0001CA88 6000                       		bra.s	Hud_LoadArt
0001CA8A                            ; End of function Hud_Rings
0001CA8A                            
0001CA8A                            ; ---------------------------------------------------------------------------
0001CA8A                            ; Subroutine to	load score numbers patterns
0001CA8A                            ; ---------------------------------------------------------------------------
0001CA8A                            
0001CA8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA8A                            
0001CA8A                            
0001CA8A                            Hud_Score:				; XREF: HudUpdate
0001CA8A 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CA90 7C05                       		moveq	#5,d6
0001CA92                            
0001CA92                            Hud_LoadArt:
0001CA92 7800                       		moveq	#0,d4
0001CA94 43FA 0000                  		lea	Art_Hud(pc),a1
0001CA98                            
0001CA98                            Hud_ScoreLoop:
0001CA98 7400                       		moveq	#0,d2
0001CA9A 261A                       		move.l	(a2)+,d3
0001CA9C                            
0001CA9C                            loc_1C8EC:
0001CA9C 9283                       		sub.l	d3,d1
0001CA9E 6500                       		bcs.s	loc_1C8F4
0001CAA0 5242                       		addq.w	#1,d2
0001CAA2 60F8                       		bra.s	loc_1C8EC
0001CAA4                            ; ===========================================================================
0001CAA4                            
0001CAA4                            loc_1C8F4:
0001CAA4 D283                       		add.l	d3,d1
0001CAA6 4A42                       		tst.w	d2
0001CAA8 6700                       		beq.s	loc_1C8FE
0001CAAA 383C 0001                  		move.w	#1,d4
0001CAAE                            
0001CAAE                            loc_1C8FE:
0001CAAE 4A44                       		tst.w	d4
0001CAB0 6700                       		beq.s	loc_1C92C
0001CAB2 ED4A                       		lsl.w	#6,d2
0001CAB4 2D40 0004                  		move.l	d0,4(a6)
0001CAB8 47F1 2000                  		lea	(a1,d2.w),a3
0001CABC 2C9B                       		move.l	(a3)+,(a6)
0001CABE 2C9B                       		move.l	(a3)+,(a6)
0001CAC0 2C9B                       		move.l	(a3)+,(a6)
0001CAC2 2C9B                       		move.l	(a3)+,(a6)
0001CAC4 2C9B                       		move.l	(a3)+,(a6)
0001CAC6 2C9B                       		move.l	(a3)+,(a6)
0001CAC8 2C9B                       		move.l	(a3)+,(a6)
0001CACA 2C9B                       		move.l	(a3)+,(a6)
0001CACC 2C9B                       		move.l	(a3)+,(a6)
0001CACE 2C9B                       		move.l	(a3)+,(a6)
0001CAD0 2C9B                       		move.l	(a3)+,(a6)
0001CAD2 2C9B                       		move.l	(a3)+,(a6)
0001CAD4 2C9B                       		move.l	(a3)+,(a6)
0001CAD6 2C9B                       		move.l	(a3)+,(a6)
0001CAD8 2C9B                       		move.l	(a3)+,(a6)
0001CADA 2C9B                       		move.l	(a3)+,(a6)
0001CADC                            
0001CADC                            loc_1C92C:
0001CADC 0680 0040 0000             		addi.l	#$400000,d0
0001CAE2 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CAE6                            
0001CAE6 4E75                       		rts	
0001CAE8                            ; End of function Hud_Score
0001CAE8                            
0001CAE8                            ; ---------------------------------------------------------------------------
0001CAE8                            ; Subroutine to	load countdown numbers on the continue screen
0001CAE8                            ; ---------------------------------------------------------------------------
0001CAE8                            
0001CAE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAE8                            
0001CAE8                            
0001CAE8                            ContScrCounter:				; XREF: ContinueScreen
0001CAE8 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CAF2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CAF8 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CAFE 7C01                       		moveq	#1,d6
0001CB00 7800                       		moveq	#0,d4
0001CB02 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CB06                            
0001CB06                            ContScr_Loop:
0001CB06 7400                       		moveq	#0,d2
0001CB08 261A                       		move.l	(a2)+,d3
0001CB0A                            
0001CB0A                            loc_1C95A:
0001CB0A 9283                       		sub.l	d3,d1
0001CB0C 6500                       		bcs.s	loc_1C962
0001CB0E 5242                       		addq.w	#1,d2
0001CB10 60F8                       		bra.s	loc_1C95A
0001CB12                            ; ===========================================================================
0001CB12                            
0001CB12                            loc_1C962:
0001CB12 D283                       		add.l	d3,d1
0001CB14 ED4A                       		lsl.w	#6,d2
0001CB16 47F1 2000                  		lea	(a1,d2.w),a3
0001CB1A 2C9B                       		move.l	(a3)+,(a6)
0001CB1C 2C9B                       		move.l	(a3)+,(a6)
0001CB1E 2C9B                       		move.l	(a3)+,(a6)
0001CB20 2C9B                       		move.l	(a3)+,(a6)
0001CB22 2C9B                       		move.l	(a3)+,(a6)
0001CB24 2C9B                       		move.l	(a3)+,(a6)
0001CB26 2C9B                       		move.l	(a3)+,(a6)
0001CB28 2C9B                       		move.l	(a3)+,(a6)
0001CB2A 2C9B                       		move.l	(a3)+,(a6)
0001CB2C 2C9B                       		move.l	(a3)+,(a6)
0001CB2E 2C9B                       		move.l	(a3)+,(a6)
0001CB30 2C9B                       		move.l	(a3)+,(a6)
0001CB32 2C9B                       		move.l	(a3)+,(a6)
0001CB34 2C9B                       		move.l	(a3)+,(a6)
0001CB36 2C9B                       		move.l	(a3)+,(a6)
0001CB38 2C9B                       		move.l	(a3)+,(a6)
0001CB3A 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CB3E                            
0001CB3E 4E75                       		rts	
0001CB40                            ; End of function ContScrCounter
0001CB40                            
0001CB40                            ; ===========================================================================
0001CB40                            ; ---------------------------------------------------------------------------
0001CB40                            ; HUD counter sizes
0001CB40                            ; ---------------------------------------------------------------------------
0001CB40 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CB44 0000 2710                  Hud_10000:	dc.l 10000
0001CB48 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CB4C 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CB50 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CB54 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CB58                            
0001CB58                            ; ---------------------------------------------------------------------------
0001CB58                            ; Subroutine to	load time numbers patterns
0001CB58                            ; ---------------------------------------------------------------------------
0001CB58                            
0001CB58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB58                            
0001CB58                            
0001CB58                            Hud_Mins:				; XREF: Hud_ChkTime
0001CB58 45F9 0001 CB54             		lea	(Hud_1).l,a2
0001CB5E 7C00                       		moveq	#0,d6
0001CB60 6000                       		bra.s	loc_1C9BA
0001CB62                            ; End of function Hud_Mins
0001CB62                            
0001CB62                            
0001CB62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB62                            
0001CB62                            
0001CB62                            Hud_Secs:				; XREF: Hud_ChkTime
0001CB62 45F9 0001 CB50             		lea	(Hud_10).l,a2
0001CB68 7C01                       		moveq	#1,d6
0001CB6A                            
0001CB6A                            loc_1C9BA:
0001CB6A 7800                       		moveq	#0,d4
0001CB6C 43FA 0000                  		lea	Art_Hud(pc),a1
0001CB70                            
0001CB70                            Hud_TimeLoop:
0001CB70 7400                       		moveq	#0,d2
0001CB72 261A                       		move.l	(a2)+,d3
0001CB74                            
0001CB74                            loc_1C9C4:
0001CB74 9283                       		sub.l	d3,d1
0001CB76 6500                       		bcs.s	loc_1C9CC
0001CB78 5242                       		addq.w	#1,d2
0001CB7A 60F8                       		bra.s	loc_1C9C4
0001CB7C                            ; ===========================================================================
0001CB7C                            
0001CB7C                            loc_1C9CC:
0001CB7C D283                       		add.l	d3,d1
0001CB7E 4A42                       		tst.w	d2
0001CB80 6700                       		beq.s	loc_1C9D6
0001CB82 383C 0001                  		move.w	#1,d4
0001CB86                            
0001CB86                            loc_1C9D6:
0001CB86 ED4A                       		lsl.w	#6,d2
0001CB88 2D40 0004                  		move.l	d0,4(a6)
0001CB8C 47F1 2000                  		lea	(a1,d2.w),a3
0001CB90 2C9B                       		move.l	(a3)+,(a6)
0001CB92 2C9B                       		move.l	(a3)+,(a6)
0001CB94 2C9B                       		move.l	(a3)+,(a6)
0001CB96 2C9B                       		move.l	(a3)+,(a6)
0001CB98 2C9B                       		move.l	(a3)+,(a6)
0001CB9A 2C9B                       		move.l	(a3)+,(a6)
0001CB9C 2C9B                       		move.l	(a3)+,(a6)
0001CB9E 2C9B                       		move.l	(a3)+,(a6)
0001CBA0 2C9B                       		move.l	(a3)+,(a6)
0001CBA2 2C9B                       		move.l	(a3)+,(a6)
0001CBA4 2C9B                       		move.l	(a3)+,(a6)
0001CBA6 2C9B                       		move.l	(a3)+,(a6)
0001CBA8 2C9B                       		move.l	(a3)+,(a6)
0001CBAA 2C9B                       		move.l	(a3)+,(a6)
0001CBAC 2C9B                       		move.l	(a3)+,(a6)
0001CBAE 2C9B                       		move.l	(a3)+,(a6)
0001CBB0 0680 0040 0000             		addi.l	#$400000,d0
0001CBB6 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001CBBA                            
0001CBBA 4E75                       		rts	
0001CBBC                            ; End of function Hud_Secs
0001CBBC                            
0001CBBC                            ; ---------------------------------------------------------------------------
0001CBBC                            ; Subroutine to	load time/ring bonus numbers patterns
0001CBBC                            ; ---------------------------------------------------------------------------
0001CBBC                            
0001CBBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CBBC                            
0001CBBC                            
0001CBBC                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001CBBC 45F9 0001 CB48             		lea	(Hud_1000).l,a2
0001CBC2 7C03                       		moveq	#3,d6
0001CBC4 7800                       		moveq	#0,d4
0001CBC6 43FA 0000                  		lea	Art_Hud(pc),a1
0001CBCA                            
0001CBCA                            Hud_BonusLoop:
0001CBCA 7400                       		moveq	#0,d2
0001CBCC 261A                       		move.l	(a2)+,d3
0001CBCE                            
0001CBCE                            loc_1CA1E:
0001CBCE 9283                       		sub.l	d3,d1
0001CBD0 6500                       		bcs.s	loc_1CA26
0001CBD2 5242                       		addq.w	#1,d2
0001CBD4 60F8                       		bra.s	loc_1CA1E
0001CBD6                            ; ===========================================================================
0001CBD6                            
0001CBD6                            loc_1CA26:
0001CBD6 D283                       		add.l	d3,d1
0001CBD8 4A42                       		tst.w	d2
0001CBDA 6700                       		beq.s	loc_1CA30
0001CBDC 383C 0001                  		move.w	#1,d4
0001CBE0                            
0001CBE0                            loc_1CA30:
0001CBE0 4A44                       		tst.w	d4
0001CBE2 6700                       		beq.s	Hud_ClrBonus
0001CBE4 ED4A                       		lsl.w	#6,d2
0001CBE6 47F1 2000                  		lea	(a1,d2.w),a3
0001CBEA 2C9B                       		move.l	(a3)+,(a6)
0001CBEC 2C9B                       		move.l	(a3)+,(a6)
0001CBEE 2C9B                       		move.l	(a3)+,(a6)
0001CBF0 2C9B                       		move.l	(a3)+,(a6)
0001CBF2 2C9B                       		move.l	(a3)+,(a6)
0001CBF4 2C9B                       		move.l	(a3)+,(a6)
0001CBF6 2C9B                       		move.l	(a3)+,(a6)
0001CBF8 2C9B                       		move.l	(a3)+,(a6)
0001CBFA 2C9B                       		move.l	(a3)+,(a6)
0001CBFC 2C9B                       		move.l	(a3)+,(a6)
0001CBFE 2C9B                       		move.l	(a3)+,(a6)
0001CC00 2C9B                       		move.l	(a3)+,(a6)
0001CC02 2C9B                       		move.l	(a3)+,(a6)
0001CC04 2C9B                       		move.l	(a3)+,(a6)
0001CC06 2C9B                       		move.l	(a3)+,(a6)
0001CC08 2C9B                       		move.l	(a3)+,(a6)
0001CC0A                            
0001CC0A                            loc_1CA5A:
0001CC0A 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001CC0E                            
0001CC0E 4E75                       		rts	
0001CC10                            ; ===========================================================================
0001CC10                            
0001CC10                            Hud_ClrBonus:
0001CC10 7A0F                       		moveq	#$F,d5
0001CC12                            
0001CC12                            Hud_ClrBonusLoop:
0001CC12 2CBC 0000 0000             		move.l	#0,(a6)
0001CC18 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001CC1C                            
0001CC1C 60EC                       		bra.s	loc_1CA5A
0001CC1E                            ; End of function Hud_TimeRingBonus
0001CC1E                            
0001CC1E                            ; ---------------------------------------------------------------------------
0001CC1E                            ; Subroutine to	load uncompressed lives	counter	patterns
0001CC1E                            ; ---------------------------------------------------------------------------
0001CC1E                            
0001CC1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC1E                            
0001CC1E                            
0001CC1E                            Hud_Lives:				; XREF: Hud_ChkLives
0001CC1E 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001CC24 7200                       		moveq	#0,d1
0001CC26 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001CC2A 45F9 0001 CB50             		lea	(Hud_10).l,a2
0001CC30 7C01                       		moveq	#1,d6
0001CC32 7800                       		moveq	#0,d4
0001CC34 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001CC38                            
0001CC38                            Hud_LivesLoop:
0001CC38 2D40 0004                  		move.l	d0,4(a6)
0001CC3C 7400                       		moveq	#0,d2
0001CC3E 261A                       		move.l	(a2)+,d3
0001CC40                            
0001CC40                            loc_1CA90:
0001CC40 9283                       		sub.l	d3,d1
0001CC42 6500                       		bcs.s	loc_1CA98
0001CC44 5242                       		addq.w	#1,d2
0001CC46 60F8                       		bra.s	loc_1CA90
0001CC48                            ; ===========================================================================
0001CC48                            
0001CC48                            loc_1CA98:
0001CC48 D283                       		add.l	d3,d1
0001CC4A 4A42                       		tst.w	d2
0001CC4C 6700                       		beq.s	loc_1CAA2
0001CC4E 383C 0001                  		move.w	#1,d4
0001CC52                            
0001CC52                            loc_1CAA2:
0001CC52 4A44                       		tst.w	d4
0001CC54 6700                       		beq.s	Hud_ClrLives
0001CC56                            
0001CC56                            loc_1CAA6:
0001CC56 EB4A                       		lsl.w	#5,d2
0001CC58 47F1 2000                  		lea	(a1,d2.w),a3
0001CC5C 2C9B                       		move.l	(a3)+,(a6)
0001CC5E 2C9B                       		move.l	(a3)+,(a6)
0001CC60 2C9B                       		move.l	(a3)+,(a6)
0001CC62 2C9B                       		move.l	(a3)+,(a6)
0001CC64 2C9B                       		move.l	(a3)+,(a6)
0001CC66 2C9B                       		move.l	(a3)+,(a6)
0001CC68 2C9B                       		move.l	(a3)+,(a6)
0001CC6A 2C9B                       		move.l	(a3)+,(a6)
0001CC6C                            
0001CC6C                            loc_1CABC:
0001CC6C 0680 0040 0000             		addi.l	#$400000,d0
0001CC72 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001CC76                            
0001CC76 4E75                       		rts	
0001CC78                            ; ===========================================================================
0001CC78                            
0001CC78                            Hud_ClrLives:
0001CC78 4A46                       		tst.w	d6
0001CC7A 67DA                       		beq.s	loc_1CAA6
0001CC7C 7A07                       		moveq	#7,d5
0001CC7E                            
0001CC7E                            Hud_ClrLivesLoop:
0001CC7E 2CBC 0000 0000             		move.l	#0,(a6)
0001CC84 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001CC88 60E2                       		bra.s	loc_1CABC
0001CC8A                            ; End of function Hud_Lives
0001CC8A                            
0001CC8A                            ; ===========================================================================
0001CC8A                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001CF8A                            		even
0001CF8A                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D0CA                            		even
0001D0CA                            ; ===========================================================================
0001D0CA                            ; ---------------------------------------------------------------------------
0001D0CA                            ; When debug mode is currently in use
0001D0CA                            ; ---------------------------------------------------------------------------
0001D0CA                            
0001D0CA                            DebugMode:				; XREF: Obj01; Obj09
0001D0CA 7000                       		moveq	#0,d0
0001D0CC 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D0D0 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D0D4 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D0D8                            ; ===========================================================================
0001D0D8 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D0DA 0000                       		dc.w Debug_Skip-Debug_Index
0001D0DC                            ; ===========================================================================
0001D0DC                            
0001D0DC                            Debug_Main:				; XREF: Debug_Index
0001D0DC 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D0E0 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D0E6 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D0EC 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D0F2 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D0F8 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D0FE 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D104 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D10A 117C 0000 001A             		move.b	#0,$1A(a0)
0001D110 117C 0000 001C             		move.b	#0,$1C(a0)
0001D116 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D11C 6600                       		bne.s	Debug_Zone	; if not, branch
0001D11E 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D124 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D12A 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D12C 6000                       		bra.s	Debug_UseList
0001D12E                            ; ===========================================================================
0001D12E                            
0001D12E                            Debug_Zone:
0001D12E 7000                       		moveq	#0,d0
0001D130 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D134                            
0001D134                            Debug_UseList:
0001D134 45F9 0000 0000             		lea	(DebugList).l,a2
0001D13A D040                       		add.w	d0,d0
0001D13C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D140 3C1A                       		move.w	(a2)+,d6
0001D142 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D146 6200                       		bhi.s	loc_1CF9E
0001D148 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D14E                            
0001D14E                            loc_1CF9E:
0001D14E 6100 0000                  		bsr.w	Debug_ShowItem
0001D152 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D158 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D15E                            
0001D15E                            Debug_Skip:				; XREF: Debug_Index
0001D15E 7006                       		moveq	#6,d0
0001D160 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D166 6700                       		beq.s	loc_1CFBE
0001D168 7000                       		moveq	#0,d0
0001D16A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D16E                            
0001D16E                            loc_1CFBE:
0001D16E 45F9 0000 0000             		lea	(DebugList).l,a2
0001D174 D040                       		add.w	d0,d0
0001D176 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D17A 3C1A                       		move.w	(a2)+,d6
0001D17C 6100 0000                  		bsr.w	Debug_Control
0001D180 4EF9 0000 D774             		jmp	DisplaySprite
0001D186                            
0001D186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D186                            
0001D186                            
0001D186                            Debug_Control:
0001D186 7800                       		moveq	#0,d4
0001D188 323C 0001                  		move.w	#1,d1
0001D18C 1838 F605                  		move.b	($FFFFF605).w,d4
0001D190 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D194 6600                       		bne.s	loc_1D018	; if yes, branch
0001D196 1038 F604                  		move.b	($FFFFF604).w,d0
0001D19A 0240 000F                  		andi.w	#$F,d0
0001D19E 6600                       		bne.s	loc_1D000
0001D1A0 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D1A6 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D1AC 6000 0000                  		bra.w	Debug_BackItem
0001D1B0                            ; ===========================================================================
0001D1B0                            
0001D1B0                            loc_1D000:
0001D1B0 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D1B4 6600                       		bne.s	loc_1D01C
0001D1B6 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D1BC 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D1C0 6600                       		bne.s	loc_1D018
0001D1C2 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D1C8                            
0001D1C8                            loc_1D018:
0001D1C8 1838 F604                  		move.b	($FFFFF604).w,d4
0001D1CC                            
0001D1CC                            loc_1D01C:
0001D1CC 7200                       		moveq	#0,d1
0001D1CE 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D1D2 5241                       		addq.w	#1,d1
0001D1D4 4841                       		swap	d1
0001D1D6 E881                       		asr.l	#4,d1
0001D1D8 2428 000C                  		move.l	$C(a0),d2
0001D1DC 2628 0008                  		move.l	8(a0),d3
0001D1E0 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D1E4 6700                       		beq.s	loc_1D03C	; if not, branch
0001D1E6 9481                       		sub.l	d1,d2
0001D1E8 6400                       		bcc.s	loc_1D03C
0001D1EA 7400                       		moveq	#0,d2
0001D1EC                            
0001D1EC                            loc_1D03C:
0001D1EC 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D1F0 6700                       		beq.s	loc_1D052	; if not, branch
0001D1F2 D481                       		add.l	d1,d2
0001D1F4 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D1FA 6500                       		bcs.s	loc_1D052
0001D1FC 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D202                            
0001D202                            loc_1D052:
0001D202 0804 0002                  		btst	#2,d4
0001D206 6700                       		beq.s	loc_1D05E
0001D208 9681                       		sub.l	d1,d3
0001D20A 6400                       		bcc.s	loc_1D05E
0001D20C 7600                       		moveq	#0,d3
0001D20E                            
0001D20E                            loc_1D05E:
0001D20E 0804 0003                  		btst	#3,d4
0001D212 6700                       		beq.s	loc_1D066
0001D214 D681                       		add.l	d1,d3
0001D216                            
0001D216                            loc_1D066:
0001D216 2142 000C                  		move.l	d2,$C(a0)
0001D21A 2143 0008                  		move.l	d3,8(a0)
0001D21E                            
0001D21E                            Debug_BackItem:
0001D21E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D224 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D226 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D22C 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D22E 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D232 6400                       		bcc.s	Debug_NoLoop
0001D234 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D238 6000                       		bra.s	Debug_NoLoop
0001D23A                            ; ===========================================================================
0001D23A                            
0001D23A                            Debug_NextItem:
0001D23A 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D240 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D242 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D246 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D24A 6200                       		bhi.s	Debug_NoLoop
0001D24C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D252                            
0001D252                            Debug_NoLoop:
0001D252 6000 0000                  		bra.w	Debug_ShowItem
0001D256                            ; ===========================================================================
0001D256                            
0001D256                            Debug_MakeItem:
0001D256 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D25C 6700                       		beq.s	Debug_Exit	; if not, branch
0001D25E 4EB9 0000 DBFA             		jsr	SingleObjLoad
0001D264 6600                       		bne.s	Debug_Exit
0001D266 3368 0008 0008             		move.w	8(a0),8(a1)
0001D26C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D272 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D276 1368 0001 0001             		move.b	1(a0),1(a1)
0001D27C 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D282 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D288 7000                       		moveq	#0,d0
0001D28A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D28E E748                       		lsl.w	#3,d0
0001D290 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D296 4E75                       		rts	
0001D298                            ; ===========================================================================
0001D298                            
0001D298                            Debug_Exit:
0001D298 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D29E 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D2A0 7000                       		moveq	#0,d0
0001D2A2 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D2A6 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D2AE 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D2B4 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D2B8 3140 000A                  		move.w	d0,$A(a0)
0001D2BC 3140 000E                  		move.w	d0,$E(a0)
0001D2C0 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D2C6 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D2CC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D2D2 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D2D4 4278 F780                  		clr.w	($FFFFF780).w
0001D2D8 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D2DE 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D2E6 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D2EC 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D2F2 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D2F8 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D2FE                            
0001D2FE                            Debug_DoNothing:
0001D2FE 4E75                       		rts	
0001D300                            ; End of function Debug_Control
0001D300                            
0001D300                            
0001D300                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D300                            
0001D300                            
0001D300                            Debug_ShowItem:				; XREF: Debug_Main
0001D300 7000                       		moveq	#0,d0
0001D302 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D306 E748                       		lsl.w	#3,d0
0001D308 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D30E 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D314 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D31A 4E75                       		rts	
0001D31C                            ; End of function Debug_ShowItem
0001D31C                            
0001D31C                            ; ===========================================================================
0001D31C                            ; ---------------------------------------------------------------------------
0001D31C                            ; Debug	list pointers
0001D31C                            ; ---------------------------------------------------------------------------
0001D31C                            DebugList:
0001D31C                            	include "_inc\Debug list pointers.asm"
0001D31C                            ; ---------------------------------------------------------------------------
0001D31C                            ; Debug	list pointers
0001D31C                            ; ---------------------------------------------------------------------------
0001D31C 0000                       	dc.w Debug_GHZ-DebugList
0001D31E 0000                       	dc.w Debug_LZ-DebugList
0001D320 0000                       	dc.w Debug_MZ-DebugList
0001D322 0000                       	dc.w Debug_SLZ-DebugList
0001D324 0000                       	dc.w Debug_SYZ-DebugList
0001D326 0000                       	dc.w Debug_SBZ-DebugList
0001D328 0000                       	dc.w Debug_Ending-DebugList
0001D328 0000                       	dc.w Debug_Ending-DebugList
0001D32A                            
0001D32A                            ; ---------------------------------------------------------------------------
0001D32A                            ; Debug	list - Green Hill
0001D32A                            ; ---------------------------------------------------------------------------
0001D32A                            Debug_GHZ:
0001D32A                            	include "_inc\Debug list - GHZ.asm"
0001D32A                            ; ---------------------------------------------------------------------------
0001D32A                            ; Debug	list - Green Hill
0001D32A                            ; ---------------------------------------------------------------------------
0001D32A 0010                       	dc.w $10			; number of items in list
0001D32C 2500 A0A0                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D330 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D334 2600 A698                  	dc.l Map_obj26+$26000000
0001D338 0000 0680                  	dc.b 0,	0, 6, $80
0001D33C 1F00 9874                  	dc.l Map_obj1F+$1F000000
0001D340 0000 0400                  	dc.b 0,	0, 4, 0
0001D344 2200 9B54                  	dc.l Map_obj22+$22000000
0001D348 0000 0444                  	dc.b 0,	0, 4, $44
0001D34C 2B00 AC98                  	dc.l Map_obj2B+$2B000000
0001D350 0000 047B                  	dc.b 0,	0, 4, $7B
0001D354 3600 D15C                  	dc.l Map_obj36+$36000000
0001D358 0000 051B                  	dc.b 0,	0, 5, $1B
0001D35C 1800 8272                  	dc.l Map_obj18+$18000000
0001D360 0000 4000                  	dc.b 0,	0, $40,	0
0001D364 3B00 D282                  	dc.l Map_obj3B+$3B000000
0001D368 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D36C 4000 F90E                  	dc.l Map_obj40+$40000000
0001D370 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D374 4100 DE88                  	dc.l Map_obj41+$41000000
0001D378 0000 0523                  	dc.b 0,	0, 5, $23
0001D37C 4200 E0AE                  	dc.l Map_obj42+$42000000
0001D380 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D384 4400 E3BC                  	dc.l Map_obj44+$44000000
0001D388 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D38C 1900 82E0                  	dc.l Map_obj48+$19000000
0001D390 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D394 7901 72A4                  	dc.l Map_obj79+$79000000
0001D398 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D39C 4B00 A0E0                  	dc.l Map_obj4B+$4B000000
0001D3A0 0000 2400                  	dc.b 0,	0, $24,	0
0001D3A4 7D01 73F4                  	dc.l Map_obj7D+$7D000000
0001D3A8 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D3AC                            	even
0001D3AC                            	even
0001D3AC                            
0001D3AC                            ; ---------------------------------------------------------------------------
0001D3AC                            ; Debug	list - Labyrinth
0001D3AC                            ; ---------------------------------------------------------------------------
0001D3AC                            Debug_LZ:
0001D3AC                            	include "_inc\Debug list - LZ.asm"
0001D3AC                            ; ---------------------------------------------------------------------------
0001D3AC                            ; Debug	list - Labyrinth
0001D3AC                            ; ---------------------------------------------------------------------------
0001D3AC 0019                       	dc.w $19
0001D3AE 2500 A0A0                  	dc.l Map_obj25+$25000000
0001D3B2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D3B6 2600 A698                  	dc.l Map_obj26+$26000000
0001D3BA 0000 0680                  	dc.b 0,	0, 6, $80
0001D3BE 4100 DE88                  	dc.l Map_obj41+$41000000
0001D3C2 0000 0523                  	dc.b 0,	0, 5, $23
0001D3C6 2C00 AD3E                  	dc.l Map_obj2C+$2C000000
0001D3CA 0800 2486                  	dc.b 8,	0, $24,	$86
0001D3CE 2D00 AF2A                  	dc.l Map_obj2D+$2D000000
0001D3D2 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D3D6 1601 20EA                  	dc.l Map_obj16+$16000000
0001D3DA 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D3DE 1601 20EA                  	dc.l Map_obj16+$16000000
0001D3E2 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D3E6 3300 C3A8                  	dc.l Map_obj33+$33000000
0001D3EA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D3EE 3200 BF68                  	dc.l Map_obj32+$32000000
0001D3F2 0000 0513                  	dc.b 0,	0, 5, $13
0001D3F6 3600 D15C                  	dc.l Map_obj36+$36000000
0001D3FA 0000 051B                  	dc.b 0,	0, 5, $1B
0001D3FE 5201 020C                  	dc.l Map_obj52a+$52000000
0001D402 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D406 6101 2312                  	dc.l Map_obj61+$61000000
0001D40A 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D40E 6101 2312                  	dc.l Map_obj61+$61000000
0001D412 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D416 6101 2312                  	dc.l Map_obj61+$61000000
0001D41A 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D41E 6201 2466                  	dc.l Map_obj62+$62000000
0001D422 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D426 6101 2312                  	dc.l Map_obj61+$61000000
0001D42A 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D42E 6101 2312                  	dc.l Map_obj61+$61000000
0001D432 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D436 6301 27C8                  	dc.l Map_obj63+$63000000
0001D43A 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D43E 6001 2034                  	dc.l Map_obj60+$60000000
0001D442 0000 0467                  	dc.b 0,	0, 4, $67
0001D446 6401 2B0E                  	dc.l Map_obj64+$64000000
0001D44A 8413 8348                  	dc.b $84, $13, $83, $48
0001D44E 6501 2C96                  	dc.l Map_obj65+$65000000
0001D452 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D456 6501 2C96                  	dc.l Map_obj65+$65000000
0001D45A 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D45E 0B01 1484                  	dc.l Map_obj0B+$B000000
0001D462 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D466 0C01 1554                  	dc.l Map_obj0C+$C000000
0001D46A 0200 4328                  	dc.b 2,	0, $43,	$28
0001D46E 7901 72A4                  	dc.l Map_obj79+$79000000
0001D472 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D476                            	even
0001D476                            	even
0001D476                            
0001D476                            ; ---------------------------------------------------------------------------
0001D476                            ; Debug	list - Marble
0001D476                            ; ---------------------------------------------------------------------------
0001D476                            Debug_MZ:
0001D476                            	include "_inc\Debug list - MZ.asm"
0001D476                            ; ---------------------------------------------------------------------------
0001D476                            ; Debug	list - Marble
0001D476                            ; ---------------------------------------------------------------------------
0001D476 0012                       	dc.w $12
0001D478 2500 A0A0                  	dc.l Map_obj25+$25000000
0001D47C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D480 2600 A698                  	dc.l Map_obj26+$26000000
0001D484 0000 0680                  	dc.b 0,	0, 6, $80
0001D488 2200 9B54                  	dc.l Map_obj22+$22000000
0001D48C 0000 0444                  	dc.b 0,	0, 4, $44
0001D490 3600 D15C                  	dc.l Map_obj36+$36000000
0001D494 0000 051B                  	dc.b 0,	0, 5, $1B
0001D498 4100 DE88                  	dc.l Map_obj41+$41000000
0001D49C 0000 0523                  	dc.b 0,	0, 5, $23
0001D4A0 1300 B438                  	dc.l Map_obj14+$13000000
0001D4A4 0000 0345                  	dc.b 0,	0, 3, $45
0001D4A8 4600 EA6E                  	dc.l Map_obj46+$46000000
0001D4AC 0000 4000                  	dc.b 0,	0, $40,	0
0001D4B0 4C00 F3BA                  	dc.l Map_obj4C+$4C000000
0001D4B4 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D4B8 4E00 F69E                  	dc.l Map_obj4E+$4E000000
0001D4BC 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D4C0 3300 C3A8                  	dc.l Map_obj33+$33000000
0001D4C4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D4C8 5000 FA9C                  	dc.l Map_obj50+$50000000
0001D4CC 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D4D0 5100 FF40                  	dc.l Map_obj51+$51000000
0001D4D4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D4D8 5201 01B6                  	dc.l Map_obj52+$52000000
0001D4DC 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D4E0 5300 8878                  	dc.l Map_obj53+$53000000
0001D4E4 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D4E8 5400 F380                  	dc.l Map_obj54+$54000000
0001D4EC 0000 8680                  	dc.b 0,	0, $86,	$80
0001D4F0 5501 03AA                  	dc.l Map_obj55+$55000000
0001D4F4 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D4F8 7801 6F1E                  	dc.l Map_obj78+$78000000
0001D4FC 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D500 7901 72A4                  	dc.l Map_obj79+$79000000
0001D504 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D508                            	even
0001D508                            	even
0001D508                            
0001D508                            ; ---------------------------------------------------------------------------
0001D508                            ; Debug	list - Star Light
0001D508                            ; ---------------------------------------------------------------------------
0001D508                            Debug_SLZ:
0001D508                            	include "_inc\Debug list - SLZ.asm"
0001D508                            ; ---------------------------------------------------------------------------
0001D508                            ; Debug	list - Star Light
0001D508                            ; ---------------------------------------------------------------------------
0001D508 000F                       	dc.w $F
0001D50A 2500 A0A0                  	dc.l Map_obj25+$25000000
0001D50E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D512 2600 A698                  	dc.l Map_obj26+$26000000
0001D516 0000 0680                  	dc.b 0,	0, 6, $80
0001D51A 5901 0EAC                  	dc.l Map_obj59+$59000000
0001D51E 0000 4000                  	dc.b 0,	0, $40,	0
0001D522 5300 8878                  	dc.l Map_obj53+$53000000
0001D526 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D52A 1800 82D0                  	dc.l Map_obj18b+$18000000
0001D52E 0000 4000                  	dc.b 0,	0, $40,	0
0001D532 5A01 0FE6                  	dc.l Map_obj5A+$5A000000
0001D536 0000 4000                  	dc.b 0,	0, $40,	0
0001D53A 5B01 119E                  	dc.l Map_obj5B+$5B000000
0001D53E 0000 4000                  	dc.b 0,	0, $40,	0
0001D542 5D01 176E                  	dc.l Map_obj5D+$5D000000
0001D546 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D54A 5E01 1B00                  	dc.l Map_obj5E+$5E000000
0001D54E 0000 0374                  	dc.b 0,	0, 3, $74
0001D552 4100 DE88                  	dc.l Map_obj41+$41000000
0001D556 0000 0523                  	dc.b 0,	0, 5, $23
0001D55A 1300 B438                  	dc.l Map_obj14+$13000000
0001D55E 0000 0480                  	dc.b 0,	0, 4, $80
0001D562 1C00 8988                  	dc.l Map_obj1C+$1C000000
0001D566 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D56A 5F01 1D7E                  	dc.l Map_obj5F+$5F000000
0001D56E 0000 0400                  	dc.b 0,	0, 4, 0
0001D572 6001 2034                  	dc.l Map_obj60+$60000000
0001D576 0000 2429                  	dc.b 0,	0, $24,	$29
0001D57A 7901 72A4                  	dc.l Map_obj79+$79000000
0001D57E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D582                            	even
0001D582                            	even
0001D582                            
0001D582                            ; ---------------------------------------------------------------------------
0001D582                            ; Debug	list - Spring Yard
0001D582                            ; ---------------------------------------------------------------------------
0001D582                            Debug_SYZ:
0001D582                            	include "_inc\Debug list - SYZ.asm"
0001D582                            ; ---------------------------------------------------------------------------
0001D582                            ; Debug	list - Spring Yard
0001D582                            ; ---------------------------------------------------------------------------
0001D582 000F                       	dc.w $F
0001D584 2500 A0A0                  	dc.l Map_obj25+$25000000
0001D588 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D58C 2600 A698                  	dc.l Map_obj26+$26000000
0001D590 0000 0680                  	dc.b 0,	0, 6, $80
0001D594 3600 D15C                  	dc.l Map_obj36+$36000000
0001D598 0000 051B                  	dc.b 0,	0, 5, $1B
0001D59C 4100 DE88                  	dc.l Map_obj41+$41000000
0001D5A0 0000 0523                  	dc.b 0,	0, 5, $23
0001D5A4 4300 E30E                  	dc.l Map_obj43+$43000000
0001D5A8 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D5AC 1200 EAEC                  	dc.l Map_obj12+$12000000
0001D5B0 0000 0000                  	dc.b 0,	0, 0, 0
0001D5B4 4700 EC68                  	dc.l Map_obj47+$47000000
0001D5B8 0000 0380                  	dc.b 0,	0, 3, $80
0001D5BC 1F00 9874                  	dc.l Map_obj1F+$1F000000
0001D5C0 0000 0400                  	dc.b 0,	0, 4, 0
0001D5C4 2200 9B54                  	dc.l Map_obj22+$22000000
0001D5C8 0000 0444                  	dc.b 0,	0, 4, $44
0001D5CC 5000 FA9C                  	dc.l Map_obj50+$50000000
0001D5D0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D5D4 1800 82BE                  	dc.l Map_obj18a+$18000000
0001D5D8 0000 4000                  	dc.b 0,	0, $40,	0
0001D5DC 5601 086C                  	dc.l Map_obj56+$56000000
0001D5E0 0000 4000                  	dc.b 0,	0, $40,	0
0001D5E4 3200 BF68                  	dc.l Map_obj32+$32000000
0001D5E8 0000 0513                  	dc.b 0,	0, 5, $13
0001D5EC 7801 6F1E                  	dc.l Map_obj78+$78000000
0001D5F0 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D5F4 7901 72A4                  	dc.l Map_obj79+$79000000
0001D5F8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D5FC                            	even
0001D5FC                            	even
0001D5FC                            
0001D5FC                            ; ---------------------------------------------------------------------------
0001D5FC                            ; Debug	list - Scrap Brain
0001D5FC                            ; ---------------------------------------------------------------------------
0001D5FC                            Debug_SBZ:
0001D5FC                            	include "_inc\Debug list - SBZ.asm"
0001D5FC                            ; ---------------------------------------------------------------------------
0001D5FC                            ; Debug	list - Scrap Brain
0001D5FC                            ; ---------------------------------------------------------------------------
0001D5FC 001D                       	dc.w $1D
0001D5FE 2500 A0A0                  	dc.l Map_obj25+$25000000
0001D602 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D606 2600 A698                  	dc.l Map_obj26+$26000000
0001D60A 0000 0680                  	dc.b 0,	0, 6, $80
0001D60E 5F01 1D7E                  	dc.l Map_obj5F+$5F000000
0001D612 0000 0400                  	dc.b 0,	0, 4, 0
0001D616 6001 2034                  	dc.l Map_obj60+$60000000
0001D61A 0000 0429                  	dc.b 0,	0, 4, $29
0001D61E 7801 6F1E                  	dc.l Map_obj78+$78000000
0001D622 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001D626 1501 0C08                  	dc.l Map_obj15b+$15000000
0001D62A 0702 4391                  	dc.b 7,	2, $43,	$91
0001D62E 6701 5842                  	dc.l Map_obj67+$67000000
0001D632 E000 C344                  	dc.b $E0, 0, $C3, $44
0001D636 5201 01B6                  	dc.l Map_obj52+$52000000
0001D63A 2802 22C0                  	dc.b $28, 2, $22, $C0
0001D63E 3200 BF68                  	dc.l Map_obj32+$32000000
0001D642 0000 0513                  	dc.b 0,	0, 5, $13
0001D646 6901 5A9C                  	dc.l Map_obj69+$69000000
0001D64A 0300 4492                  	dc.b 3,	0, $44,	$92
0001D64E 6901 5AF6                  	dc.l Map_obj69a+$69000000
0001D652 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001D656 6A01 5D54                  	dc.l Map_obj6A+$6A000000
0001D65A 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001D65E 5300 8878                  	dc.l Map_obj53+$53000000
0001D662 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001D666 5201 01B6                  	dc.l Map_obj52+$52000000
0001D66A 3903 4460                  	dc.b $39, 3, $44, $60
0001D66E 6B01 6124                  	dc.l Map_obj6B+$6B000000
0001D672 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001D676 2A00 8B1E                  	dc.l Map_obj2A+$2A000000
0001D67A 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001D67E 6B01 6124                  	dc.l Map_obj6B+$6B000000
0001D682 1301 22C0                  	dc.b $13, 1, $22, $C0
0001D686 6A01 5D54                  	dc.l Map_obj6A+$6A000000
0001D68A 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001D68E 6B01 6124                  	dc.l Map_obj6B+$6B000000
0001D692 2401 22C0                  	dc.b $24, 1, $22, $C0
0001D696 6A01 5D54                  	dc.l Map_obj6A+$6A000000
0001D69A 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001D69E 6B01 6124                  	dc.l Map_obj6B+$6B000000
0001D6A2 3401 22C0                  	dc.b $34, 1, $22, $C0
0001D6A6 6C01 62E6                  	dc.l Map_obj6C+$6C000000
0001D6AA 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001D6AE 6D00 E75E                  	dc.l Map_obj6D+$6D000000
0001D6B2 6400 83D9                  	dc.b $64, 0, $83, $D9
0001D6B6 6D00 E75E                  	dc.l Map_obj6D+$6D000000
0001D6BA 640B 83D9                  	dc.b $64, $B, $83, $D9
0001D6BE 6E01 639C                  	dc.l Map_obj6E+$6E000000
0001D6C2 0400 047E                  	dc.b 4,	0, 4, $7E
0001D6C6 7001 67E2                  	dc.l Map_obj70+$70000000
0001D6CA 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001D6CE 7101 1614                  	dc.l Map_obj71+$71000000
0001D6D2 1100 8680                  	dc.b $11, 0, $86, $80
0001D6D6 1E00 8F8C                  	dc.l Map_obj1E+$1E000000
0001D6DA 0400 2302                  	dc.b 4,	0, $23,	2
0001D6DE 7901 72A4                  	dc.l Map_obj79+$79000000
0001D6E2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D6E6                            	even
0001D6E6                            	even
0001D6E6                            
0001D6E6                            ; ---------------------------------------------------------------------------
0001D6E6                            ; Debug	list - ending sequence / special stage
0001D6E6                            ; ---------------------------------------------------------------------------
0001D6E6                            Debug_Ending:
0001D6E6                            	include "_inc\Debug list - Ending and SS.asm"
0001D6E6                            ; ---------------------------------------------------------------------------
0001D6E6                            ; Debug	list - ending sequence / special stage
0001D6E6                            ; ---------------------------------------------------------------------------
0001D6E6 000D                       	dc.w $D
0001D6E8 2500 A0A0                  	dc.l Map_obj25+$25000000
0001D6EC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D6F0 4700 EC68                  	dc.l Map_obj47+$47000000
0001D6F4 0000 0380                  	dc.b 0,	0, 3, $80
0001D6F8 2800 95A6                  	dc.l Map_obj28a+$28000000
0001D6FC 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001D700 2800 95A6                  	dc.l Map_obj28a+$28000000
0001D704 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001D708 2800 95A6                  	dc.l Map_obj28a+$28000000
0001D70C 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001D710 2800 958E                  	dc.l Map_obj28+$28000000
0001D714 0D00 0553                  	dc.b $D, 0, 5, $53
0001D718 2800 958E                  	dc.l Map_obj28+$28000000
0001D71C 0E00 0553                  	dc.b $E, 0, 5, $53
0001D720 2800 958E                  	dc.l Map_obj28+$28000000
0001D724 0F00 0573                  	dc.b $F, 0, 5, $73
0001D728 2800 958E                  	dc.l Map_obj28+$28000000
0001D72C 1000 0573                  	dc.b $10, 0, 5,	$73
0001D730 2800 95A6                  	dc.l Map_obj28a+$28000000
0001D734 1100 0585                  	dc.b $11, 0, 5,	$85
0001D738 2800 95BE                  	dc.l Map_obj28b+$28000000
0001D73C 1200 0593                  	dc.b $12, 0, 5,	$93
0001D740 2800 95A6                  	dc.l Map_obj28a+$28000000
0001D744 1300 0565                  	dc.b $13, 0, 5,	$65
0001D748 2800 95BE                  	dc.l Map_obj28b+$28000000
0001D74C 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001D750                            	even
0001D750                            	even
0001D750                            
0001D750                            ; ---------------------------------------------------------------------------
0001D750                            ; Main level load blocks
0001D750                            ; ---------------------------------------------------------------------------
0001D750                            MainLoadBlocks:
0001D750                            	include "_inc\Main level load blocks.asm"
0001D750                            ; ---------------------------------------------------------------------------
0001D750                            ; Main level load blocks
0001D750                            ;
0001D750                            ; ===FORMAT===
0001D750                            ; level	patterns + (1st	PLC num	* 10^6)
0001D750                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001D750                            ; 256x256 mappings
0001D750                            ; blank, music (unused), pal index (unused), pal index
0001D750                            ; ---------------------------------------------------------------------------
0001D750 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001D754 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001D758 0000 0000                  	dc.l Blk256_GHZ
0001D75C 0081 0404                  	dc.b 0,	$81, 4,	4
0001D760 0000 0000                  	dc.l Nem_LZ+$6000000
0001D764 0000 0000                  	dc.l Blk16_LZ+$7000000
0001D768 0000 0000                  	dc.l Blk256_LZ
0001D76C 0082 0505                  	dc.b 0,	$82, 5,	5
0001D770 0000 0000                  	dc.l Nem_MZ+$8000000
0001D774 0000 0000                  	dc.l Blk16_MZ+$9000000
0001D778 0000 0000                  	dc.l Blk256_MZ
0001D77C 0083 0606                  	dc.b 0,	$83, 6,	6
0001D780 0000 0000                  	dc.l Nem_SLZ+$A000000
0001D784 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001D788 0000 0000                  	dc.l Blk256_SLZ
0001D78C 0084 0707                  	dc.b 0,	$84, 7,	7
0001D790 0000 0000                  	dc.l Nem_SYZ+$C000000
0001D794 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001D798 0000 0000                  	dc.l Blk256_SYZ
0001D79C 0085 0808                  	dc.b 0,	$85, 8,	8
0001D7A0 0000 0000                  	dc.l Nem_SBZ+$E000000
0001D7A4 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001D7A8 0000 0000                  	dc.l Blk256_SBZ
0001D7AC 0086 0909                  	dc.b 0,	$86, 9,	9
0001D7B0 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001D7B4 0000 0000                  	dc.l Blk16_GHZ
0001D7B8 0000 0000                  	dc.l Blk256_GHZ
0001D7BC 0086 1313                  	dc.b 0,	$86, $13, $13
0001D7C0                            	even
0001D7C0                            	even
0001D7C0                            
0001D7C0                            ; ---------------------------------------------------------------------------
0001D7C0                            ; Pattern load cues
0001D7C0                            ; ---------------------------------------------------------------------------
0001D7C0                            ArtLoadCues:
0001D7C0                            	include "_inc\Pattern load cues.asm"
0001D7C0                            ; ---------------------------------------------------------------------------
0001D7C0                            ; Pattern load cues - index
0001D7C0                            ; ---------------------------------------------------------------------------
0001D7C0 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001D7C4 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001D7C8 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001D7CC 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001D7D0 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001D7D4 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001D7D8 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001D7DC 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001D7E0 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001D7E4 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001D7E8 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001D7EC 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001D7F0 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001D7F4 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001D7F8 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001D7FC 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001D800                            ; ---------------------------------------------------------------------------
0001D800                            ; Pattern load cues - standard block 1
0001D800                            ; ---------------------------------------------------------------------------
0001D800 0004                       PLC_Main:	dc.w 4
0001D802 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001D806 F400                       		dc.w $F400
0001D808 0000 0000                  		dc.l Nem_Hud		; HUD
0001D80C D940                       		dc.w $D940
0001D80E 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001D812 FA80                       		dc.w $FA80
0001D814 0000 0000                  		dc.l Nem_Ring		; rings
0001D818 F640                       		dc.w $F640
0001D81A 0000 0000                  		dc.l Nem_Points		; points from enemy
0001D81E F2E0                       		dc.w $F2E0
0001D820                            ; ---------------------------------------------------------------------------
0001D820                            ; Pattern load cues - standard block 2
0001D820                            ; ---------------------------------------------------------------------------
0001D820 0002                       PLC_Main2:	dc.w 2
0001D822 0000 0000                  		dc.l Nem_Monitors	; monitors
0001D826 D000                       		dc.w $D000
0001D828 0000 0000                  		dc.l Nem_Shield		; shield
0001D82C A820                       		dc.w $A820
0001D82E 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001D832 AB80                       		dc.w $AB80
0001D834                            ; ---------------------------------------------------------------------------
0001D834                            ; Pattern load cues - explosion
0001D834                            ; ---------------------------------------------------------------------------
0001D834 0000                       PLC_Explode:	dc.w 0
0001D836 0000 0000                  		dc.l Nem_Explode	; explosion
0001D83A B400                       		dc.w $B400
0001D83C                            ; ---------------------------------------------------------------------------
0001D83C                            ; Pattern load cues - game/time	over
0001D83C                            ; ---------------------------------------------------------------------------
0001D83C 0000                       PLC_GameOver:	dc.w 0
0001D83E 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001D842 ABC0                       		dc.w $ABC0
0001D844                            ; ---------------------------------------------------------------------------
0001D844                            ; Pattern load cues - Green Hill
0001D844                            ; ---------------------------------------------------------------------------
0001D844 000B                       PLC_GHZ:	dc.w $B
0001D846 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001D84A 0000                       		dc.w 0
0001D84C 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001D850 39A0                       		dc.w $39A0
0001D852 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001D856 6B00                       		dc.w $6B00
0001D858 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001D85C 7A00                       		dc.w $7A00
0001D85E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001D862 8000                       		dc.w $8000
0001D864 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D868 8880                       		dc.w $8880
0001D86A 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001D86E 8F60                       		dc.w $8F60
0001D870 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001D874 9360                       		dc.w $9360
0001D876 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001D87A 9E00                       		dc.w $9E00
0001D87C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D880 A360                       		dc.w $A360
0001D882 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D886 A460                       		dc.w $A460
0001D888 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D88C A660                       		dc.w $A660
0001D88E 0005                       PLC_GHZ2:	dc.w 5
0001D890 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001D894 7000                       		dc.w $7000
0001D896 0000 0000                  		dc.l Nem_Bridge		; bridge
0001D89A 71C0                       		dc.w $71C0
0001D89C 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001D8A0 7300                       		dc.w $7300
0001D8A2 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001D8A6 7540                       		dc.w $7540
0001D8A8 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001D8AC A1E0                       		dc.w $A1E0
0001D8AE 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001D8B2 6980                       		dc.w $6980
0001D8B4                            ; ---------------------------------------------------------------------------
0001D8B4                            ; Pattern load cues - Labyrinth
0001D8B4                            ; ---------------------------------------------------------------------------
0001D8B4 000B                       PLC_LZ:		dc.w $B
0001D8B6 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001D8BA 0000                       		dc.w 0
0001D8BC 0000 0000                  		dc.l Nem_LzBlock1	; block
0001D8C0 3C00                       		dc.w $3C00
0001D8C2 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001D8C6 3E00                       		dc.w $3E00
0001D8C8 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001D8CC 4B20                       		dc.w $4B20
0001D8CE 0000 0000                  		dc.l Nem_Water		; water	surface
0001D8D2 6000                       		dc.w $6000
0001D8D4 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001D8D8 6200                       		dc.w $6200
0001D8DA 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001D8DE 6500                       		dc.w $6500
0001D8E0 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001D8E4 6900                       		dc.w $6900
0001D8E6 0000 0000                  		dc.l Nem_LzBlock3	; block
0001D8EA 7780                       		dc.w $7780
0001D8EC 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001D8F0 7880                       		dc.w $7880
0001D8F2 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001D8F6 7980                       		dc.w $7980
0001D8F8 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001D8FC 94C0                       		dc.w $94C0
0001D8FE 000C                       PLC_LZ2:	dc.w $C
0001D900 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001D904 7BC0                       		dc.w $7BC0
0001D906 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001D90A 7CC0                       		dc.w $7CC0
0001D90C 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001D910 7EC0                       		dc.w $7EC0
0001D912 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001D916 5D20                       		dc.w $5D20
0001D918 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001D91C 8800                       		dc.w $8800
0001D91E 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001D922 89E0                       		dc.w $89E0
0001D924 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D928 8CE0                       		dc.w $8CE0
0001D92A 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001D92E 90C0                       		dc.w $90C0
0001D930 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D934 A1E0                       		dc.w $A1E0
0001D936 0000 0000                  		dc.l Nem_Cork		; cork block
0001D93A A000                       		dc.w $A000
0001D93C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D940 A360                       		dc.w $A360
0001D942 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D946 A460                       		dc.w $A460
0001D948 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D94C A660                       		dc.w $A660
0001D94E                            ; ---------------------------------------------------------------------------
0001D94E                            ; Pattern load cues - Marble
0001D94E                            ; ---------------------------------------------------------------------------
0001D94E 0009                       PLC_MZ:		dc.w 9
0001D950 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001D954 0000                       		dc.w 0
0001D956 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001D95A 6000                       		dc.w $6000
0001D95C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001D960 68A0                       		dc.w $68A0
0001D962 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001D966 7000                       		dc.w $7000
0001D968 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001D96C 71C0                       		dc.w $71C0
0001D96E 0000 0000                  		dc.l Nem_Lava		; lava
0001D972 7500                       		dc.w $7500
0001D974 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D978 8880                       		dc.w $8880
0001D97A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001D97E 8F60                       		dc.w $8F60
0001D980 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001D984 9700                       		dc.w $9700
0001D986 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D98A 9FE0                       		dc.w $9FE0
0001D98C 0004                       PLC_MZ2:	dc.w 4
0001D98E 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001D992 A260                       		dc.w $A260
0001D994 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D998 A360                       		dc.w $A360
0001D99A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D99E A460                       		dc.w $A460
0001D9A0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D9A4 A660                       		dc.w $A660
0001D9A6 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001D9AA 5700                       		dc.w $5700
0001D9AC                            ; ---------------------------------------------------------------------------
0001D9AC                            ; Pattern load cues - Star Light
0001D9AC                            ; ---------------------------------------------------------------------------
0001D9AC 0008                       PLC_SLZ:	dc.w 8
0001D9AE 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001D9B2 0000                       		dc.w 0
0001D9B4 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001D9B8 8000                       		dc.w $8000
0001D9BA 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D9BE 8520                       		dc.w $8520
0001D9C0 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001D9C4 9000                       		dc.w $9000
0001D9C6 0000 0000                  		dc.l Nem_SlzBlock	; block
0001D9CA 9C00                       		dc.w $9C00
0001D9CC 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001D9D0 A260                       		dc.w $A260
0001D9D2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D9D6 A360                       		dc.w $A360
0001D9D8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D9DC A460                       		dc.w $A460
0001D9DE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D9E2 A660                       		dc.w $A660
0001D9E4 0005                       PLC_SLZ2:	dc.w 5
0001D9E6 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001D9EA 6E80                       		dc.w $6E80
0001D9EC 0000 0000                  		dc.l Nem_Fan		; fan
0001D9F0 7400                       		dc.w $7400
0001D9F2 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001D9F6 7980                       		dc.w $7980
0001D9F8 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001D9FC 7B80                       		dc.w $7B80
0001D9FE 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DA02 9B00                       		dc.w $9B00
0001DA04 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DA08 9E00                       		dc.w $9E00
0001DA0A                            ; ---------------------------------------------------------------------------
0001DA0A                            ; Pattern load cues - Spring Yard
0001DA0A                            ; ---------------------------------------------------------------------------
0001DA0A 0004                       PLC_SYZ:	dc.w 4
0001DA0C 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DA10 0000                       		dc.w 0
0001DA12 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DA16 8000                       		dc.w $8000
0001DA18 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DA1C 8880                       		dc.w $8880
0001DA1E 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DA22 8F60                       		dc.w $8F60
0001DA24 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DA28 9700                       		dc.w $9700
0001DA2A 0007                       PLC_SYZ2:	dc.w 7
0001DA2C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DA30 7000                       		dc.w $7000
0001DA32 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DA36 72C0                       		dc.w $72C0
0001DA38 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DA3C 7740                       		dc.w $7740
0001DA3E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DA42 9FE0                       		dc.w $9FE0
0001DA44 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DA48 A1E0                       		dc.w $A1E0
0001DA4A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DA4E A360                       		dc.w $A360
0001DA50 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DA54 A460                       		dc.w $A460
0001DA56 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DA5A A660                       		dc.w $A660
0001DA5C                            ; ---------------------------------------------------------------------------
0001DA5C                            ; Pattern load cues - Scrap Brain
0001DA5C                            ; ---------------------------------------------------------------------------
0001DA5C 000B                       PLC_SBZ:	dc.w $B
0001DA5E 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DA62 0000                       		dc.w 0
0001DA64 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DA68 5800                       		dc.w $5800
0001DA6A 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DA6E 5D00                       		dc.w $5D00
0001DA70 0000 0000                  		dc.l Nem_Girder		; girder
0001DA74 5E00                       		dc.w $5E00
0001DA76 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DA7A 6040                       		dc.w $6040
0001DA7C 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DA80 6880                       		dc.w $6880
0001DA82 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DA86 6900                       		dc.w $6900
0001DA88 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DA8C 7220                       		dc.w $7220
0001DA8E 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DA92 76A0                       		dc.w $76A0
0001DA94 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DA98 7B20                       		dc.w $7B20
0001DA9A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DA9E 7EA0                       		dc.w $7EA0
0001DAA0 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DAA4 9860                       		dc.w $9860
0001DAA6 000C                       PLC_SBZ2:	dc.w $C
0001DAA8 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DAAC 5600                       		dc.w $5600
0001DAAE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DAB2 8000                       		dc.w $8000
0001DAB4 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DAB8 8520                       		dc.w $8520
0001DABA 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DABE 8C00                       		dc.w $8C00
0001DAC0 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DAC4 8DE0                       		dc.w $8DE0
0001DAC6 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DACA 8FC0                       		dc.w $8FC0
0001DACC 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DAD0 9240                       		dc.w $9240
0001DAD2 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DAD6 7F20                       		dc.w $7F20
0001DAD8 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DADC 9BE0                       		dc.w $9BE0
0001DADE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DAE2 A1E0                       		dc.w $A1E0
0001DAE4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DAE8 A360                       		dc.w $A360
0001DAEA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DAEE A460                       		dc.w $A460
0001DAF0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DAF4 A660                       		dc.w $A660
0001DAF6                            ; ---------------------------------------------------------------------------
0001DAF6                            ; Pattern load cues - title card
0001DAF6                            ; ---------------------------------------------------------------------------
0001DAF6 0000                       PLC_TitleCard:	dc.w 0
0001DAF8 0000 0000                  		dc.l Nem_TitleCard
0001DAFC B000                       		dc.w $B000
0001DAFE                            ; ---------------------------------------------------------------------------
0001DAFE                            ; Pattern load cues - act 3 boss
0001DAFE                            ; ---------------------------------------------------------------------------
0001DAFE 0005                       PLC_Boss:	dc.w 5
0001DB00 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DB04 8000                       		dc.w $8000
0001DB06 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DB0A 8D80                       		dc.w $8D80
0001DB0C 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DB10 93A0                       		dc.w $93A0
0001DB12 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DB16 A300                       		dc.w $A300
0001DB18 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DB1C A300                       		dc.w $A300
0001DB1E 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DB22 A540                       		dc.w $A540
0001DB24                            ; ---------------------------------------------------------------------------
0001DB24                            ; Pattern load cues - act 1/2 signpost
0001DB24                            ; ---------------------------------------------------------------------------
0001DB24 0002                       PLC_Signpost:	dc.w 2
0001DB26 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DB2A D000                       		dc.w $D000
0001DB2C 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DB30 96C0                       		dc.w $96C0
0001DB32 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DB36 8C40                       		dc.w $8C40
0001DB38                            ; ---------------------------------------------------------------------------
0001DB38                            ; Pattern load cues - beta special stage warp effect
0001DB38                            ; ---------------------------------------------------------------------------
0001DB38 0000                       PLC_Warp:	dc.w 0
0001DB3A 0000 0000                  		dc.l Nem_Warp
0001DB3E A820                       		dc.w $A820
0001DB40                            ; ---------------------------------------------------------------------------
0001DB40                            ; Pattern load cues - special stage
0001DB40                            ; ---------------------------------------------------------------------------
0001DB40 0010                       PLC_SpeStage:	dc.w $10
0001DB42 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DB46 0000                       		dc.w 0
0001DB48 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DB4C 0A20                       		dc.w $A20
0001DB4E 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DB52 2840                       		dc.w $2840
0001DB54 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DB58 4760                       		dc.w $4760
0001DB5A 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DB5E 4A20                       		dc.w $4A20
0001DB60 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DB64 4C60                       		dc.w $4C60
0001DB66 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DB6A 5E00                       		dc.w $5E00
0001DB6C 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DB70 6E00                       		dc.w $6E00
0001DB72 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DB76 7E00                       		dc.w $7E00
0001DB78 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DB7C 8E00                       		dc.w $8E00
0001DB7E 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DB82 9E00                       		dc.w $9E00
0001DB84 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DB88 AE00                       		dc.w $AE00
0001DB8A 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DB8E BE00                       		dc.w $BE00
0001DB90 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DB94 EE00                       		dc.w $EE00
0001DB96 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001DB9A F2E0                       		dc.w $F2E0
0001DB9C 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001DBA0 F400                       		dc.w $F400
0001DBA2 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001DBA6 F520                       		dc.w $F520
0001DBA8 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001DBAC F2E0                       		dc.w $F2E0
0001DBAE 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001DBB2 F400                       		dc.w $F400
0001DBB4 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001DBB8 F520                       		dc.w $F520
0001DBBA                            ; ---------------------------------------------------------------------------
0001DBBA                            ; Pattern load cues - GHZ animals
0001DBBA                            ; ---------------------------------------------------------------------------
0001DBBA 0001                       PLC_GHZAnimals:	dc.w 1
0001DBBC 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DBC0 B000                       		dc.w $B000
0001DBC2 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DBC6 B240                       		dc.w $B240
0001DBC8                            ; ---------------------------------------------------------------------------
0001DBC8                            ; Pattern load cues - LZ animals
0001DBC8                            ; ---------------------------------------------------------------------------
0001DBC8 0001                       PLC_LZAnimals:	dc.w 1
0001DBCA 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DBCE B000                       		dc.w $B000
0001DBD0 0000 0000                  		dc.l Nem_Seal		; seal
0001DBD4 B240                       		dc.w $B240
0001DBD6                            ; ---------------------------------------------------------------------------
0001DBD6                            ; Pattern load cues - MZ animals
0001DBD6                            ; ---------------------------------------------------------------------------
0001DBD6 0001                       PLC_MZAnimals:	dc.w 1
0001DBD8 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DBDC B000                       		dc.w $B000
0001DBDE 0000 0000                  		dc.l Nem_Seal		; seal
0001DBE2 B240                       		dc.w $B240
0001DBE4                            ; ---------------------------------------------------------------------------
0001DBE4                            ; Pattern load cues - SLZ animals
0001DBE4                            ; ---------------------------------------------------------------------------
0001DBE4 0001                       PLC_SLZAnimals:	dc.w 1
0001DBE6 0000 0000                  		dc.l Nem_Pig		; pig
0001DBEA B000                       		dc.w $B000
0001DBEC 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DBF0 B240                       		dc.w $B240
0001DBF2                            ; ---------------------------------------------------------------------------
0001DBF2                            ; Pattern load cues - SYZ animals
0001DBF2                            ; ---------------------------------------------------------------------------
0001DBF2 0001                       PLC_SYZAnimals:	dc.w 1
0001DBF4 0000 0000                  		dc.l Nem_Pig		; pig
0001DBF8 B000                       		dc.w $B000
0001DBFA 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DBFE B240                       		dc.w $B240
0001DC00                            ; ---------------------------------------------------------------------------
0001DC00                            ; Pattern load cues - SBZ animals
0001DC00                            ; ---------------------------------------------------------------------------
0001DC00 0001                       PLC_SBZAnimals:	dc.w 1
0001DC02 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DC06 B000                       		dc.w $B000
0001DC08 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DC0C B240                       		dc.w $B240
0001DC0E                            ; ---------------------------------------------------------------------------
0001DC0E                            ; Pattern load cues - special stage results screen
0001DC0E                            ; ---------------------------------------------------------------------------
0001DC0E 0001                       PLC_SpeStResult:dc.w 1
0001DC10 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001DC14 A820                       		dc.w $A820
0001DC16 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001DC1A AA20                       		dc.w $AA20
0001DC1C                            ; ---------------------------------------------------------------------------
0001DC1C                            ; Pattern load cues - ending sequence
0001DC1C                            ; ---------------------------------------------------------------------------
0001DC1C 000E                       PLC_Ending:	dc.w $E
0001DC1E 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DC22 0000                       		dc.w 0
0001DC24 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DC28 39A0                       		dc.w $39A0
0001DC2A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DC2E 6B00                       		dc.w $6B00
0001DC30 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001DC34 7400                       		dc.w $7400
0001DC36 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DC3A 78A0                       		dc.w $78A0
0001DC3C 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001DC40 7C20                       		dc.w $7C20
0001DC42 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001DC46 A480                       		dc.w $A480
0001DC48 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DC4C AA60                       		dc.w $AA60
0001DC4E 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DC52 ACA0                       		dc.w $ACA0
0001DC54 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DC58 AE60                       		dc.w $AE60
0001DC5A 0000 0000                  		dc.l Nem_Seal		; seal
0001DC5E B0A0                       		dc.w $B0A0
0001DC60 0000 0000                  		dc.l Nem_Pig		; pig
0001DC64 B260                       		dc.w $B260
0001DC66 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DC6A B4A0                       		dc.w $B4A0
0001DC6C 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DC70 B660                       		dc.w $B660
0001DC72 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001DC76 B8A0                       		dc.w $B8A0
0001DC78                            ; ---------------------------------------------------------------------------
0001DC78                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001DC78                            ; ---------------------------------------------------------------------------
0001DC78 0002                       PLC_TryAgain:	dc.w 2
0001DC7A 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DC7E 78A0                       		dc.w $78A0
0001DC80 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001DC84 7C20                       		dc.w $7C20
0001DC86 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001DC8A B400                       		dc.w $B400
0001DC8C                            ; ---------------------------------------------------------------------------
0001DC8C                            ; Pattern load cues - Eggman on SBZ 2
0001DC8C                            ; ---------------------------------------------------------------------------
0001DC8C 0002                       PLC_EggmanSBZ2:	dc.w 2
0001DC8E 0000 0000                  		dc.l Nem_SbzBlock	; block
0001DC92 A300                       		dc.w $A300
0001DC94 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001DC98 8000                       		dc.w $8000
0001DC9A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DC9E 9400                       		dc.w $9400
0001DCA0                            ; ---------------------------------------------------------------------------
0001DCA0                            ; Pattern load cues - final boss
0001DCA0                            ; ---------------------------------------------------------------------------
0001DCA0 0004                       PLC_FZBoss:	dc.w 4
0001DCA2 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001DCA6 7400                       		dc.w $7400
0001DCA8 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001DCAC 6000                       		dc.w $6000
0001DCAE 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DCB2 8000                       		dc.w $8000
0001DCB4 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001DCB8 8E00                       		dc.w $8E00
0001DCBA 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DCBE A540                       		dc.w $A540
0001DCC0                            		even
0001DCC0                            		even
0001DCC0                            
0001DCC0                            		incbin	misc\padding.bin
0001DDAE                            		even
0001DDAE                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E210                            		even
0001E210                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E308                            		even
0001E308                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E41C                            		even
0001E41C                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F428                            		even
0001F428                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022584                            		even
00022584                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000225B8                            		even
000225B8                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022676                            		even
00022676                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00022B1E                            		even
00022B1E                            ; ---------------------------------------------------------------------------
00022B1E                            ; Sprite mappings - Sonic
00022B1E                            ; ---------------------------------------------------------------------------
00022B1E                            Map_Sonic:
00022B1E                            	include "_maps\Sonic.asm"
00022B1E                            Mappings:
00022B1E 0000                       Mappings_0: 	dc.w Mappings_B2-Mappings
00022B20 0000                       Mappings_2: 	dc.w Mappings_B3-Mappings
00022B22 0000                       Mappings_4: 	dc.w Mappings_BE-Mappings
00022B24 0000                       Mappings_6: 	dc.w Mappings_CE-Mappings
00022B26 0000                       Mappings_8: 	dc.w Mappings_DE-Mappings
00022B28 0000                       Mappings_A: 	dc.w Mappings_EE-Mappings
00022B2A 0000                       Mappings_C: 	dc.w Mappings_FE-Mappings
00022B2C 0000                       Mappings_E: 	dc.w Mappings_113-Mappings
00022B2E 0000                       Mappings_10: 	dc.w Mappings_11E-Mappings
00022B30 0000                       Mappings_12: 	dc.w Mappings_129-Mappings
00022B32 0000                       Mappings_14: 	dc.w Mappings_13E-Mappings
00022B34 0000                       Mappings_16: 	dc.w Mappings_149-Mappings
00022B36 0000                       Mappings_18: 	dc.w Mappings_159-Mappings
00022B38 0000                       Mappings_1A: 	dc.w Mappings_173-Mappings
00022B3A 0000                       Mappings_1C: 	dc.w Mappings_192-Mappings
00022B3C 0000                       Mappings_1E: 	dc.w Mappings_1A7-Mappings
00022B3E 0000                       Mappings_20: 	dc.w Mappings_1C1-Mappings
00022B40 0000                       Mappings_22: 	dc.w Mappings_1D6-Mappings
00022B42 0000                       Mappings_24: 	dc.w Mappings_1F0-Mappings
00022B44 0000                       Mappings_26: 	dc.w Mappings_205-Mappings
00022B46 0000                       Mappings_28: 	dc.w Mappings_210-Mappings
00022B48 0000                       Mappings_2A: 	dc.w Mappings_21B-Mappings
00022B4A 0000                       Mappings_2C: 	dc.w Mappings_230-Mappings
00022B4C 0000                       Mappings_2E: 	dc.w Mappings_23B-Mappings
00022B4E 0000                       Mappings_30: 	dc.w Mappings_24B-Mappings
00022B50 0000                       Mappings_32: 	dc.w Mappings_26A-Mappings
00022B52 0000                       Mappings_34: 	dc.w Mappings_289-Mappings
00022B54 0000                       Mappings_36: 	dc.w Mappings_29E-Mappings
00022B56 0000                       Mappings_38: 	dc.w Mappings_2B8-Mappings
00022B58 0000                       Mappings_3A: 	dc.w Mappings_2CD-Mappings
00022B5A 0000                       Mappings_3C: 	dc.w Mappings_2E7-Mappings
00022B5C 0000                       Mappings_3E: 	dc.w Mappings_2F2-Mappings
00022B5E 0000                       Mappings_40: 	dc.w Mappings_2FD-Mappings
00022B60 0000                       Mappings_42: 	dc.w Mappings_308-Mappings
00022B62 0000                       Mappings_44: 	dc.w Mappings_313-Mappings
00022B64 0000                       Mappings_46: 	dc.w Mappings_328-Mappings
00022B66 0000                       Mappings_48: 	dc.w Mappings_338-Mappings
00022B68 0000                       Mappings_4A: 	dc.w Mappings_34D-Mappings
00022B6A 0000                       Mappings_4C: 	dc.w Mappings_35D-Mappings
00022B6C 0000                       Mappings_4E: 	dc.w Mappings_368-Mappings
00022B6E 0000                       Mappings_50: 	dc.w Mappings_373-Mappings
00022B70 0000                       Mappings_52: 	dc.w Mappings_37E-Mappings
00022B72 0000                       Mappings_54: 	dc.w Mappings_389-Mappings
00022B74 0000                       Mappings_56: 	dc.w Mappings_39E-Mappings
00022B76 0000                       Mappings_58: 	dc.w Mappings_3A9-Mappings
00022B78 0000                       Mappings_5A: 	dc.w Mappings_3BE-Mappings
00022B7A 0000                       Mappings_5C: 	dc.w Mappings_3C9-Mappings
00022B7C 0000                       Mappings_5E: 	dc.w Mappings_3CF-Mappings
00022B7E 0000                       Mappings_60: 	dc.w Mappings_3D5-Mappings
00022B80 0000                       Mappings_62: 	dc.w Mappings_3DB-Mappings
00022B82 0000                       Mappings_64: 	dc.w Mappings_3E1-Mappings
00022B84 0000                       Mappings_66: 	dc.w Mappings_3E7-Mappings
00022B86 0000                       Mappings_68: 	dc.w Mappings_3F2-Mappings
00022B88 0000                       Mappings_6A: 	dc.w Mappings_3F8-Mappings
00022B8A 0000                       Mappings_6C: 	dc.w Mappings_403-Mappings
00022B8C 0000                       Mappings_6E: 	dc.w Mappings_409-Mappings
00022B8E 0000                       Mappings_70: 	dc.w Mappings_414-Mappings
00022B90 0000                       Mappings_72: 	dc.w Mappings_429-Mappings
00022B92 0000                       Mappings_74: 	dc.w Mappings_43E-Mappings
00022B94 0000                       Mappings_76: 	dc.w Mappings_44E-Mappings
00022B96 0000                       Mappings_78: 	dc.w Mappings_45E-Mappings
00022B98 0000                       Mappings_7A: 	dc.w Mappings_46E-Mappings
00022B9A 0000                       Mappings_7C: 	dc.w Mappings_479-Mappings
00022B9C 0000                       Mappings_7E: 	dc.w Mappings_489-Mappings
00022B9E 0000                       Mappings_80: 	dc.w Mappings_499-Mappings
00022BA0 0000                       Mappings_82: 	dc.w Mappings_4A9-Mappings
00022BA2 0000                       Mappings_84: 	dc.w Mappings_4BE-Mappings
00022BA4 0000                       Mappings_86: 	dc.w Mappings_4D3-Mappings
00022BA6 0000                       Mappings_88: 	dc.w Mappings_4ED-Mappings
00022BA8 0000                       Mappings_8A: 	dc.w Mappings_507-Mappings
00022BAA 0000                       Mappings_8C: 	dc.w Mappings_512-Mappings
00022BAC 0000                       Mappings_8E: 	dc.w Mappings_522-Mappings
00022BAE 0000                       Mappings_90: 	dc.w Mappings_52D-Mappings
00022BB0 0000                       Mappings_92: 	dc.w Mappings_53D-Mappings
00022BB2 0000                       Mappings_94: 	dc.w Mappings_548-Mappings
00022BB4 0000                       Mappings_96: 	dc.w Mappings_558-Mappings
00022BB6 0000                       Mappings_98: 	dc.w Mappings_568-Mappings
00022BB8 0000                       Mappings_9A: 	dc.w Mappings_582-Mappings
00022BBA 0000                       Mappings_9C: 	dc.w Mappings_59C-Mappings
00022BBC 0000                       Mappings_9E: 	dc.w Mappings_5A7-Mappings
00022BBE 0000                       Mappings_A0: 	dc.w Mappings_5B7-Mappings
00022BC0 0000                       Mappings_A2: 	dc.w Mappings_5BD-Mappings
00022BC2 0000                       Mappings_A4: 	dc.w Mappings_5C3-Mappings
00022BC4 0000                       Mappings_A6: 	dc.w Mappings_5C9-Mappings
00022BC6 0000                       Mappings_A8: 	dc.w Mappings_5D9-Mappings
00022BC8 0000                       Mappings_AA: 	dc.w Mappings_5E9-Mappings
00022BCA 0000                       Mappings_AC: 	dc.w Mappings_5F9-Mappings
00022BCC 0000                       Mappings_AE: 	dc.w Mappings_609-Mappings
00022BCE 0000                       Mappings_B0: 	dc.w Mappings_614-Mappings
00022BD0 00                         Mappings_B2: 	dc.b $0
00022BD1 02                         Mappings_B3: 	dc.b $2
00022BD2 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00022BD7 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00022BDC 03                         Mappings_BE: 	dc.b $3
00022BDD EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00022BE2 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00022BE7 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022BEC 03                         Mappings_CE: 	dc.b $3
00022BED EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00022BF2 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00022BF7 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022BFC 03                         Mappings_DE: 	dc.b $3
00022BFD EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00022C02 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00022C07 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022C0C 03                         Mappings_EE: 	dc.b $3
00022C0D EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00022C12 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00022C17 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022C1C 04                         Mappings_FE: 	dc.b $4
00022C1D EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00022C22 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00022C27 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00022C2C 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00022C31 02                         Mappings_113: 	dc.b $2
00022C32 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00022C37 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00022C3C 02                         Mappings_11E: 	dc.b $2
00022C3D ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00022C42 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00022C47 04                         Mappings_129: 	dc.b $4
00022C48 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00022C4D FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00022C52 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00022C57 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00022C5C 02                         Mappings_13E: 	dc.b $2
00022C5D EC09 0000 F3               	dc.b $EC, $9, $0, $0, $F3
00022C62 FC0E 0006 EB               	dc.b $FC, $E, $0, $6, $EB
00022C67 03                         Mappings_149: 	dc.b $3
00022C68 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00022C6D FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00022C72 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00022C77 05                         Mappings_159: 	dc.b $5
00022C78 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00022C7D EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00022C82 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00022C87 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00022C8C 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00022C91 06                         Mappings_173: 	dc.b $6
00022C92 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00022C97 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00022C9C FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00022CA1 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00022CA6 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00022CAB F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00022CB0 04                         Mappings_192: 	dc.b $4
00022CB1 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00022CB6 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00022CBB FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00022CC0 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00022CC5 05                         Mappings_1A7: 	dc.b $5
00022CC6 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00022CCB EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00022CD0 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00022CD5 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00022CDA 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00022CDF 04                         Mappings_1C1: 	dc.b $4
00022CE0 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00022CE5 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00022CEA FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00022CEF 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00022CF4 05                         Mappings_1D6: 	dc.b $5
00022CF5 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00022CFA ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00022CFF FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00022D04 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00022D09 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00022D0E 04                         Mappings_1F0: 	dc.b $4
00022D0F F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00022D14 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00022D19 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00022D1E 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00022D23 02                         Mappings_205: 	dc.b $2
00022D24 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00022D29 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00022D2E 02                         Mappings_210: 	dc.b $2
00022D2F F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00022D34 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00022D39 04                         Mappings_21B: 	dc.b $4
00022D3A F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00022D3F EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00022D44 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00022D49 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00022D4E 02                         Mappings_230: 	dc.b $2
00022D4F F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00022D54 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00022D59 03                         Mappings_23B: 	dc.b $3
00022D5A F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00022D5F EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00022D64 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00022D69 06                         Mappings_24B: 	dc.b $6
00022D6A FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00022D6F ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00022D74 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00022D79 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00022D7E 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00022D83 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00022D88 06                         Mappings_26A: 	dc.b $6
00022D89 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00022D8E E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00022D93 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00022D98 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00022D9D F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00022DA2 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00022DA7 04                         Mappings_289: 	dc.b $4
00022DA8 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00022DAD F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00022DB2 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00022DB7 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00022DBC 05                         Mappings_29E: 	dc.b $5
00022DBD FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00022DC2 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00022DC7 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00022DCC F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00022DD1 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00022DD6 04                         Mappings_2B8: 	dc.b $4
00022DD7 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00022DDC F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00022DE1 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00022DE6 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00022DEB 05                         Mappings_2CD: 	dc.b $5
00022DEC FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00022DF1 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00022DF6 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00022DFB 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00022E00 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00022E05 02                         Mappings_2E7: 	dc.b $2
00022E06 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00022E0B FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00022E10 02                         Mappings_2F2: 	dc.b $2
00022E11 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00022E16 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00022E1B 02                         Mappings_2FD: 	dc.b $2
00022E1C EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00022E21 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00022E26 02                         Mappings_308: 	dc.b $2
00022E27 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00022E2C FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00022E31 04                         Mappings_313: 	dc.b $4
00022E32 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00022E37 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00022E3C FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00022E41 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00022E46 03                         Mappings_328: 	dc.b $3
00022E47 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00022E4C EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00022E51 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00022E56 04                         Mappings_338: 	dc.b $4
00022E57 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00022E5C EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00022E61 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00022E66 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00022E6B 03                         Mappings_34D: 	dc.b $3
00022E6C EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00022E71 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00022E76 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00022E7B 02                         Mappings_35D: 	dc.b $2
00022E7C F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00022E81 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00022E86 02                         Mappings_368: 	dc.b $2
00022E87 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00022E8C F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00022E91 02                         Mappings_373: 	dc.b $2
00022E92 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00022E97 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00022E9C 02                         Mappings_37E: 	dc.b $2
00022E9D F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00022EA2 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00022EA7 04                         Mappings_389: 	dc.b $4
00022EA8 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00022EAD F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00022EB2 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00022EB7 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00022EBC 02                         Mappings_39E: 	dc.b $2
00022EBD F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00022EC2 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00022EC7 04                         Mappings_3A9: 	dc.b $4
00022EC8 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00022ECD F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00022ED2 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00022ED7 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00022EDC 02                         Mappings_3BE: 	dc.b $2
00022EDD F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00022EE2 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00022EE7 01                         Mappings_3C9: 	dc.b $1
00022EE8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022EED 01                         Mappings_3CF: 	dc.b $1
00022EEE F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022EF3 01                         Mappings_3D5: 	dc.b $1
00022EF4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022EF9 01                         Mappings_3DB: 	dc.b $1
00022EFA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022EFF 01                         Mappings_3E1: 	dc.b $1
00022F00 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022F05 02                         Mappings_3E7: 	dc.b $2
00022F06 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00022F0B F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00022F10 01                         Mappings_3F2: 	dc.b $1
00022F11 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022F16 02                         Mappings_3F8: 	dc.b $2
00022F17 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00022F1C 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00022F21 01                         Mappings_403: 	dc.b $1
00022F22 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022F27 02                         Mappings_409: 	dc.b $2
00022F28 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00022F2D FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00022F32 04                         Mappings_414: 	dc.b $4
00022F33 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00022F38 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00022F3D 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00022F42 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00022F47 04                         Mappings_429: 	dc.b $4
00022F48 F404 0000 FC               	dc.b $F4, $4, $0, $0, $FC
00022F4D FC0D 0002 F4               	dc.b $FC, $D, $0, $2, $F4
00022F52 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00022F57 0400 000D EC               	dc.b $4, $0, $0, $D, $EC
00022F5C 03                         Mappings_43E: 	dc.b $3
00022F5D EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
00022F62 F402 0803 00               	dc.b $F4, $2, $8, $3, $0
00022F67 F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
00022F6C 03                         Mappings_44E: 	dc.b $3
00022F6D EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
00022F72 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
00022F77 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
00022F7C 03                         Mappings_45E: 	dc.b $3
00022F7D F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00022F82 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00022F87 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00022F8C 02                         Mappings_46E: 	dc.b $2
00022F8D F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00022F92 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00022F97 03                         Mappings_479: 	dc.b $3
00022F98 F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
00022F9D FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
00022FA2 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00022FA7 03                         Mappings_489: 	dc.b $3
00022FA8 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00022FAD FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00022FB2 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00022FB7 03                         Mappings_499: 	dc.b $3
00022FB8 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00022FBD 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00022FC2 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00022FC7 04                         Mappings_4A9: 	dc.b $4
00022FC8 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00022FCD 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00022FD2 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00022FD7 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00022FDC 04                         Mappings_4BE: 	dc.b $4
00022FDD F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00022FE2 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00022FE7 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00022FEC F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00022FF1 05                         Mappings_4D3: 	dc.b $5
00022FF2 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00022FF7 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00022FFC 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00023001 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00023006 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002300B 05                         Mappings_4ED: 	dc.b $5
0002300C E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00023011 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00023016 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002301B 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00023020 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00023025 02                         Mappings_507: 	dc.b $2
00023026 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002302B 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00023030 03                         Mappings_512: 	dc.b $3
00023031 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00023036 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002303B 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00023040 02                         Mappings_522: 	dc.b $2
00023041 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00023046 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002304B 03                         Mappings_52D: 	dc.b $3
0002304C EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00023051 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00023056 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002305B 02                         Mappings_53D: 	dc.b $2
0002305C EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023061 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00023066 03                         Mappings_548: 	dc.b $3
00023067 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002306C 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00023071 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00023076 03                         Mappings_558: 	dc.b $3
00023077 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002307C E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00023081 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00023086 05                         Mappings_568: 	dc.b $5
00023087 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002308C E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00023091 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00023096 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002309B 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000230A0 05                         Mappings_582: 	dc.b $5
000230A1 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000230A6 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000230AB F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000230B0 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000230B5 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000230BA 02                         Mappings_59C: 	dc.b $2
000230BB EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000230C0 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
000230C5 03                         Mappings_5A7: 	dc.b $3
000230C6 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000230CB F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000230D0 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000230D5 01                         Mappings_5B7: 	dc.b $1
000230D6 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000230DB 01                         Mappings_5BD: 	dc.b $1
000230DC F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000230E1 01                         Mappings_5C3: 	dc.b $1
000230E2 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000230E7 03                         Mappings_5C9: 	dc.b $3
000230E8 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000230ED FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
000230F2 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
000230F7 03                         Mappings_5D9: 	dc.b $3
000230F8 F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
000230FD FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
00023102 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00023107 03                         Mappings_5E9: 	dc.b $3
00023108 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
0002310D F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00023112 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00023117 03                         Mappings_5F9: 	dc.b $3
00023118 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
0002311D FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00023122 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00023127 02                         Mappings_609: 	dc.b $2
00023128 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
0002312D F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00023132 02                         Mappings_614: 	dc.b $2
00023133 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00023138 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002313E 00                         	even
0002313E 00                         	even
0002313E                            
0002313E                            ; ---------------------------------------------------------------------------
0002313E                            ; Uncompressed graphics	loading	array for Sonic
0002313E                            ; ---------------------------------------------------------------------------
0002313E                            SonicDynPLC:
0002313E                            	include "_inc\Sonic dynamic pattern load cues.asm"
0002313E                            DPLCS:
0002313E 0000                       DPLCS_0: 	dc.w DPLCS_B2-DPLCS
00023140 0000                       DPLCS_2: 	dc.w DPLCS_B3-DPLCS
00023142 0000                       DPLCS_4: 	dc.w DPLCS_B8-DPLCS
00023144 0000                       DPLCS_6: 	dc.w DPLCS_BF-DPLCS
00023146 0000                       DPLCS_8: 	dc.w DPLCS_C6-DPLCS
00023148 0000                       DPLCS_A: 	dc.w DPLCS_CD-DPLCS
0002314A 0000                       DPLCS_C: 	dc.w DPLCS_D4-DPLCS
0002314C 0000                       DPLCS_E: 	dc.w DPLCS_DD-DPLCS
0002314E 0000                       DPLCS_10: 	dc.w DPLCS_E2-DPLCS
00023150 0000                       DPLCS_12: 	dc.w DPLCS_E7-DPLCS
00023152 0000                       DPLCS_14: 	dc.w DPLCS_F0-DPLCS
00023154 0000                       DPLCS_16: 	dc.w DPLCS_F5-DPLCS
00023156 0000                       DPLCS_18: 	dc.w DPLCS_FC-DPLCS
00023158 0000                       DPLCS_1A: 	dc.w DPLCS_107-DPLCS
0002315A 0000                       DPLCS_1C: 	dc.w DPLCS_114-DPLCS
0002315C 0000                       DPLCS_1E: 	dc.w DPLCS_11D-DPLCS
0002315E 0000                       DPLCS_20: 	dc.w DPLCS_128-DPLCS
00023160 0000                       DPLCS_22: 	dc.w DPLCS_131-DPLCS
00023162 0000                       DPLCS_24: 	dc.w DPLCS_13C-DPLCS
00023164 0000                       DPLCS_26: 	dc.w DPLCS_145-DPLCS
00023166 0000                       DPLCS_28: 	dc.w DPLCS_14A-DPLCS
00023168 0000                       DPLCS_2A: 	dc.w DPLCS_14F-DPLCS
0002316A 0000                       DPLCS_2C: 	dc.w DPLCS_158-DPLCS
0002316C 0000                       DPLCS_2E: 	dc.w DPLCS_15D-DPLCS
0002316E 0000                       DPLCS_30: 	dc.w DPLCS_164-DPLCS
00023170 0000                       DPLCS_32: 	dc.w DPLCS_171-DPLCS
00023172 0000                       DPLCS_34: 	dc.w DPLCS_17E-DPLCS
00023174 0000                       DPLCS_36: 	dc.w DPLCS_187-DPLCS
00023176 0000                       DPLCS_38: 	dc.w DPLCS_192-DPLCS
00023178 0000                       DPLCS_3A: 	dc.w DPLCS_19B-DPLCS
0002317A 0000                       DPLCS_3C: 	dc.w DPLCS_1A6-DPLCS
0002317C 0000                       DPLCS_3E: 	dc.w DPLCS_1AB-DPLCS
0002317E 0000                       DPLCS_40: 	dc.w DPLCS_1B0-DPLCS
00023180 0000                       DPLCS_42: 	dc.w DPLCS_1B5-DPLCS
00023182 0000                       DPLCS_44: 	dc.w DPLCS_1BA-DPLCS
00023184 0000                       DPLCS_46: 	dc.w DPLCS_1C3-DPLCS
00023186 0000                       DPLCS_48: 	dc.w DPLCS_1CA-DPLCS
00023188 0000                       DPLCS_4A: 	dc.w DPLCS_1D3-DPLCS
0002318A 0000                       DPLCS_4C: 	dc.w DPLCS_1DA-DPLCS
0002318C 0000                       DPLCS_4E: 	dc.w DPLCS_1DF-DPLCS
0002318E 0000                       DPLCS_50: 	dc.w DPLCS_1E4-DPLCS
00023190 0000                       DPLCS_52: 	dc.w DPLCS_1E9-DPLCS
00023192 0000                       DPLCS_54: 	dc.w DPLCS_1EE-DPLCS
00023194 0000                       DPLCS_56: 	dc.w DPLCS_1F7-DPLCS
00023196 0000                       DPLCS_58: 	dc.w DPLCS_1FC-DPLCS
00023198 0000                       DPLCS_5A: 	dc.w DPLCS_205-DPLCS
0002319A 0000                       DPLCS_5C: 	dc.w DPLCS_20A-DPLCS
0002319C 0000                       DPLCS_5E: 	dc.w DPLCS_20D-DPLCS
0002319E 0000                       DPLCS_60: 	dc.w DPLCS_210-DPLCS
000231A0 0000                       DPLCS_62: 	dc.w DPLCS_213-DPLCS
000231A2 0000                       DPLCS_64: 	dc.w DPLCS_216-DPLCS
000231A4 0000                       DPLCS_66: 	dc.w DPLCS_219-DPLCS
000231A6 0000                       DPLCS_68: 	dc.w DPLCS_21E-DPLCS
000231A8 0000                       DPLCS_6A: 	dc.w DPLCS_221-DPLCS
000231AA 0000                       DPLCS_6C: 	dc.w DPLCS_226-DPLCS
000231AC 0000                       DPLCS_6E: 	dc.w DPLCS_229-DPLCS
000231AE 0000                       DPLCS_70: 	dc.w DPLCS_22E-DPLCS
000231B0 0000                       DPLCS_72: 	dc.w DPLCS_237-DPLCS
000231B2 0000                       DPLCS_74: 	dc.w DPLCS_240-DPLCS
000231B4 0000                       DPLCS_76: 	dc.w DPLCS_247-DPLCS
000231B6 0000                       DPLCS_78: 	dc.w DPLCS_24E-DPLCS
000231B8 0000                       DPLCS_7A: 	dc.w DPLCS_255-DPLCS
000231BA 0000                       DPLCS_7C: 	dc.w DPLCS_258-DPLCS
000231BC 0000                       DPLCS_7E: 	dc.w DPLCS_25F-DPLCS
000231BE 0000                       DPLCS_80: 	dc.w DPLCS_266-DPLCS
000231C0 0000                       DPLCS_82: 	dc.w DPLCS_26D-DPLCS
000231C2 0000                       DPLCS_84: 	dc.w DPLCS_276-DPLCS
000231C4 0000                       DPLCS_86: 	dc.w DPLCS_27F-DPLCS
000231C6 0000                       DPLCS_88: 	dc.w DPLCS_28A-DPLCS
000231C8 0000                       DPLCS_8A: 	dc.w DPLCS_295-DPLCS
000231CA 0000                       DPLCS_8C: 	dc.w DPLCS_29A-DPLCS
000231CC 0000                       DPLCS_8E: 	dc.w DPLCS_2A1-DPLCS
000231CE 0000                       DPLCS_90: 	dc.w DPLCS_2A6-DPLCS
000231D0 0000                       DPLCS_92: 	dc.w DPLCS_2AD-DPLCS
000231D2 0000                       DPLCS_94: 	dc.w DPLCS_2B2-DPLCS
000231D4 0000                       DPLCS_96: 	dc.w DPLCS_2B9-DPLCS
000231D6 0000                       DPLCS_98: 	dc.w DPLCS_2C0-DPLCS
000231D8 0000                       DPLCS_9A: 	dc.w DPLCS_2CB-DPLCS
000231DA 0000                       DPLCS_9C: 	dc.w DPLCS_2D6-DPLCS
000231DC 0000                       DPLCS_9E: 	dc.w DPLCS_2DB-DPLCS
000231DE 0000                       DPLCS_A0: 	dc.w DPLCS_2E2-DPLCS
000231E0 0000                       DPLCS_A2: 	dc.w DPLCS_2E5-DPLCS
000231E2 0000                       DPLCS_A4: 	dc.w DPLCS_2E8-DPLCS
000231E4 0000                       DPLCS_A6: 	dc.w DPLCS_2EB-DPLCS
000231E6 0000                       DPLCS_A8: 	dc.w DPLCS_2F2-DPLCS
000231E8 0000                       DPLCS_AA: 	dc.w DPLCS_2F9-DPLCS
000231EA 0000                       DPLCS_AC: 	dc.w DPLCS_300-DPLCS
000231EC 0000                       DPLCS_AE: 	dc.w DPLCS_307-DPLCS
000231EE 0000                       DPLCS_B0: 	dc.w DPLCS_30C-DPLCS
000231F0 00                         DPLCS_B2: 	dc.b $0
000231F1 02                         DPLCS_B3: 	dc.b $2
000231F2 F000                       	dc.b $F0, $0
000231F4 1010                       	dc.b $10, $10
000231F6 03                         DPLCS_B8: 	dc.b $3
000231F7 5012                       	dc.b $50, $12
000231F9 5018                       	dc.b $50, $18
000231FB 201E                       	dc.b $20, $1E
000231FD 03                         DPLCS_BF: 	dc.b $3
000231FE 5021                       	dc.b $50, $21
00023200 5018                       	dc.b $50, $18
00023202 201E                       	dc.b $20, $1E
00023204 03                         DPLCS_C6: 	dc.b $3
00023205 5021                       	dc.b $50, $21
00023207 5018                       	dc.b $50, $18
00023209 2027                       	dc.b $20, $27
0002320B 03                         DPLCS_CD: 	dc.b $3
0002320C 802A                       	dc.b $80, $2A
0002320E 2033                       	dc.b $20, $33
00023210 2036                       	dc.b $20, $36
00023212 04                         DPLCS_D4: 	dc.b $4
00023213 7039                       	dc.b $70, $39
00023215 5041                       	dc.b $50, $41
00023217 5047                       	dc.b $50, $47
00023219 104D                       	dc.b $10, $4D
0002321B 02                         DPLCS_DD: 	dc.b $2
0002321C 7039                       	dc.b $70, $39
0002321E B04F                       	dc.b $B0, $4F
00023220 02                         DPLCS_E2: 	dc.b $2
00023221 505B                       	dc.b $50, $5B
00023223 8061                       	dc.b $80, $61
00023225 04                         DPLCS_E7: 	dc.b $4
00023226 505B                       	dc.b $50, $5B
00023228 506A                       	dc.b $50, $6A
0002322A 5070                       	dc.b $50, $70
0002322C 1076                       	dc.b $10, $76
0002322E 02                         DPLCS_F0: 	dc.b $2
0002322F 505B                       	dc.b $50, $5B
00023231 B078                       	dc.b $B0, $78
00023233 03                         DPLCS_F5: 	dc.b $3
00023234 7039                       	dc.b $70, $39
00023236 3084                       	dc.b $30, $84
00023238 5088                       	dc.b $50, $88
0002323A 05                         DPLCS_FC: 	dc.b $5
0002323B 508E                       	dc.b $50, $8E
0002323D 5094                       	dc.b $50, $94
0002323F 209A                       	dc.b $20, $9A
00023241 509D                       	dc.b $50, $9D
00023243 00A3                       	dc.b $0, $A3
00023245 06                         DPLCS_107: 	dc.b $6
00023246 508E                       	dc.b $50, $8E
00023248 10A4                       	dc.b $10, $A4
0002324A 30A6                       	dc.b $30, $A6
0002324C 50AA                       	dc.b $50, $AA
0002324E 30B0                       	dc.b $30, $B0
00023250 00B4                       	dc.b $0, $B4
00023252 04                         DPLCS_114: 	dc.b $4
00023253 50B5                       	dc.b $50, $B5
00023255 10BB                       	dc.b $10, $BB
00023257 70BD                       	dc.b $70, $BD
00023259 20C5                       	dc.b $20, $C5
0002325B 05                         DPLCS_11D: 	dc.b $5
0002325C 50C8                       	dc.b $50, $C8
0002325E 30CE                       	dc.b $30, $CE
00023260 70D2                       	dc.b $70, $D2
00023262 20DA                       	dc.b $20, $DA
00023264 10DD                       	dc.b $10, $DD
00023266 04                         DPLCS_128: 	dc.b $4
00023267 50C8                       	dc.b $50, $C8
00023269 10DF                       	dc.b $10, $DF
0002326B 70E1                       	dc.b $70, $E1
0002326D 20E9                       	dc.b $20, $E9
0002326F 05                         DPLCS_131: 	dc.b $5
00023270 508E                       	dc.b $50, $8E
00023272 10A4                       	dc.b $10, $A4
00023274 009A                       	dc.b $0, $9A
00023276 70EC                       	dc.b $70, $EC
00023278 20F4                       	dc.b $20, $F4
0002327A 04                         DPLCS_13C: 	dc.b $4
0002327B 70F7                       	dc.b $70, $F7
0002327D 50FF                       	dc.b $50, $FF
0002327F 1105                       	dc.b $11, $5
00023281 5107                       	dc.b $51, $7
00023283 02                         DPLCS_145: 	dc.b $2
00023284 70F7                       	dc.b $70, $F7
00023286 B10D                       	dc.b $B1, $D
00023288 02                         DPLCS_14A: 	dc.b $2
00023289 5119                       	dc.b $51, $19
0002328B 811F                       	dc.b $81, $1F
0002328D 04                         DPLCS_14F: 	dc.b $4
0002328E 5119                       	dc.b $51, $19
00023290 5128                       	dc.b $51, $28
00023292 112E                       	dc.b $11, $2E
00023294 5130                       	dc.b $51, $30
00023296 02                         DPLCS_158: 	dc.b $2
00023297 5119                       	dc.b $51, $19
00023299 B136                       	dc.b $B1, $36
0002329B 03                         DPLCS_15D: 	dc.b $3
0002329C 70F7                       	dc.b $70, $F7
0002329E 010D                       	dc.b $1, $D
000232A0 8142                       	dc.b $81, $42
000232A2 06                         DPLCS_164: 	dc.b $6
000232A3 514B                       	dc.b $51, $4B
000232A5 1151                       	dc.b $11, $51
000232A7 1153                       	dc.b $11, $53
000232A9 8155                       	dc.b $81, $55
000232AB 015E                       	dc.b $1, $5E
000232AD 015F                       	dc.b $1, $5F
000232AF 06                         DPLCS_171: 	dc.b $6
000232B0 514B                       	dc.b $51, $4B
000232B2 2160                       	dc.b $21, $60
000232B4 1163                       	dc.b $11, $63
000232B6 1165                       	dc.b $11, $65
000232B8 8167                       	dc.b $81, $67
000232BA 015E                       	dc.b $1, $5E
000232BC 04                         DPLCS_17E: 	dc.b $4
000232BD 5170                       	dc.b $51, $70
000232BF 1176                       	dc.b $11, $76
000232C1 8178                       	dc.b $81, $78
000232C3 1181                       	dc.b $11, $81
000232C5 05                         DPLCS_187: 	dc.b $5
000232C6 5183                       	dc.b $51, $83
000232C8 2189                       	dc.b $21, $89
000232CA 118C                       	dc.b $11, $8C
000232CC 718E                       	dc.b $71, $8E
000232CE 2196                       	dc.b $21, $96
000232D0 04                         DPLCS_192: 	dc.b $4
000232D1 5183                       	dc.b $51, $83
000232D3 1199                       	dc.b $11, $99
000232D5 819B                       	dc.b $81, $9B
000232D7 11A4                       	dc.b $11, $A4
000232D9 05                         DPLCS_19B: 	dc.b $5
000232DA 514B                       	dc.b $51, $4B
000232DC 81A6                       	dc.b $81, $A6
000232DE 1165                       	dc.b $11, $65
000232E0 11AF                       	dc.b $11, $AF
000232E2 015E                       	dc.b $1, $5E
000232E4 02                         DPLCS_1A6: 	dc.b $2
000232E5 51B1                       	dc.b $51, $B1
000232E7 B1B7                       	dc.b $B1, $B7
000232E9 02                         DPLCS_1AB: 	dc.b $2
000232EA 505B                       	dc.b $50, $5B
000232EC B1C3                       	dc.b $B1, $C3
000232EE 02                         DPLCS_1B0: 	dc.b $2
000232EF 51B1                       	dc.b $51, $B1
000232F1 B1CF                       	dc.b $B1, $CF
000232F3 02                         DPLCS_1B5: 	dc.b $2
000232F4 505B                       	dc.b $50, $5B
000232F6 B1DB                       	dc.b $B1, $DB
000232F8 04                         DPLCS_1BA: 	dc.b $4
000232F9 51E7                       	dc.b $51, $E7
000232FB 11ED                       	dc.b $11, $ED
000232FD B1EF                       	dc.b $B1, $EF
000232FF 01FB                       	dc.b $1, $FB
00023301 03                         DPLCS_1C3: 	dc.b $3
00023302 51FC                       	dc.b $51, $FC
00023304 1202                       	dc.b $12, $2
00023306 B204                       	dc.b $B2, $4
00023308 04                         DPLCS_1CA: 	dc.b $4
00023309 51E7                       	dc.b $51, $E7
0002330B 1210                       	dc.b $12, $10
0002330D B212                       	dc.b $B2, $12
0002330F 01FB                       	dc.b $1, $FB
00023311 03                         DPLCS_1D3: 	dc.b $3
00023312 51FC                       	dc.b $51, $FC
00023314 1202                       	dc.b $12, $2
00023316 B21E                       	dc.b $B2, $1E
00023318 02                         DPLCS_1DA: 	dc.b $2
00023319 522A                       	dc.b $52, $2A
0002331B B230                       	dc.b $B2, $30
0002331D 02                         DPLCS_1DF: 	dc.b $2
0002331E 5119                       	dc.b $51, $19
00023320 B23C                       	dc.b $B2, $3C
00023322 02                         DPLCS_1E4: 	dc.b $2
00023323 522A                       	dc.b $52, $2A
00023325 B248                       	dc.b $B2, $48
00023327 02                         DPLCS_1E9: 	dc.b $2
00023328 5119                       	dc.b $51, $19
0002332A B254                       	dc.b $B2, $54
0002332C 04                         DPLCS_1EE: 	dc.b $4
0002332D 5260                       	dc.b $52, $60
0002332F 1266                       	dc.b $12, $66
00023331 B268                       	dc.b $B2, $68
00023333 0274                       	dc.b $2, $74
00023335 02                         DPLCS_1F7: 	dc.b $2
00023336 7275                       	dc.b $72, $75
00023338 B27D                       	dc.b $B2, $7D
0002333A 04                         DPLCS_1FC: 	dc.b $4
0002333B 5260                       	dc.b $52, $60
0002333D 1289                       	dc.b $12, $89
0002333F B28B                       	dc.b $B2, $8B
00023341 0274                       	dc.b $2, $74
00023343 02                         DPLCS_205: 	dc.b $2
00023344 7275                       	dc.b $72, $75
00023346 B297                       	dc.b $B2, $97
00023348 01                         DPLCS_20A: 	dc.b $1
00023349 F2A3                       	dc.b $F2, $A3
0002334B 01                         DPLCS_20D: 	dc.b $1
0002334C F2B3                       	dc.b $F2, $B3
0002334E 01                         DPLCS_210: 	dc.b $1
0002334F F2C3                       	dc.b $F2, $C3
00023351 01                         DPLCS_213: 	dc.b $1
00023352 F2D3                       	dc.b $F2, $D3
00023354 01                         DPLCS_216: 	dc.b $1
00023355 F2E3                       	dc.b $F2, $E3
00023357 02                         DPLCS_219: 	dc.b $2
00023358 B2F3                       	dc.b $B2, $F3
0002335A 22FF                       	dc.b $22, $FF
0002335C 01                         DPLCS_21E: 	dc.b $1
0002335D F302                       	dc.b $F3, $2
0002335F 02                         DPLCS_221: 	dc.b $2
00023360 B312                       	dc.b $B3, $12
00023362 231E                       	dc.b $23, $1E
00023364 01                         DPLCS_226: 	dc.b $1
00023365 F321                       	dc.b $F3, $21
00023367 02                         DPLCS_229: 	dc.b $2
00023368 5331                       	dc.b $53, $31
0002336A B337                       	dc.b $B3, $37
0002336C 04                         DPLCS_22E: 	dc.b $4
0002336D 5343                       	dc.b $53, $43
0002336F 7349                       	dc.b $73, $49
00023371 1351                       	dc.b $13, $51
00023373 0353                       	dc.b $3, $53
00023375 04                         DPLCS_237: 	dc.b $4
00023376 1354                       	dc.b $13, $54
00023378 7356                       	dc.b $73, $56
0002337A 235E                       	dc.b $23, $5E
0002337C 0361                       	dc.b $3, $61
0002337E 03                         DPLCS_240: 	dc.b $3
0002337F 2362                       	dc.b $23, $62
00023381 2365                       	dc.b $23, $65
00023383 F368                       	dc.b $F3, $68
00023385 03                         DPLCS_247: 	dc.b $3
00023386 B378                       	dc.b $B3, $78
00023388 7384                       	dc.b $73, $84
0002338A 0078                       	dc.b $0, $78
0002338C 03                         DPLCS_24E: 	dc.b $3
0002338D 738C                       	dc.b $73, $8C
0002338F 3394                       	dc.b $33, $94
00023391 2398                       	dc.b $23, $98
00023393 01                         DPLCS_255: 	dc.b $1
00023394 839B                       	dc.b $83, $9B
00023396 03                         DPLCS_258: 	dc.b $3
00023397 73A4                       	dc.b $73, $A4
00023399 03AC                       	dc.b $3, $AC
0002339B 33AD                       	dc.b $33, $AD
0002339D 03                         DPLCS_25F: 	dc.b $3
0002339E 73B1                       	dc.b $73, $B1
000233A0 33B9                       	dc.b $33, $B9
000233A2 23BD                       	dc.b $23, $BD
000233A4 03                         DPLCS_266: 	dc.b $3
000233A5 B3C0                       	dc.b $B3, $C0
000233A7 13CC                       	dc.b $13, $CC
000233A9 03CE                       	dc.b $3, $CE
000233AB 04                         DPLCS_26D: 	dc.b $4
000233AC B3CF                       	dc.b $B3, $CF
000233AE 33DB                       	dc.b $33, $DB
000233B0 03DF                       	dc.b $3, $DF
000233B2 03E0                       	dc.b $3, $E0
000233B4 04                         DPLCS_276: 	dc.b $4
000233B5 B3E1                       	dc.b $B3, $E1
000233B7 33ED                       	dc.b $33, $ED
000233B9 03F1                       	dc.b $3, $F1
000233BB 03F2                       	dc.b $3, $F2
000233BD 05                         DPLCS_27F: 	dc.b $5
000233BE 83F3                       	dc.b $83, $F3
000233C0 13FC                       	dc.b $13, $FC
000233C2 53FE                       	dc.b $53, $FE
000233C4 1404                       	dc.b $14, $4
000233C6 0406                       	dc.b $4, $6
000233C8 05                         DPLCS_28A: 	dc.b $5
000233C9 8407                       	dc.b $84, $7
000233CB 1410                       	dc.b $14, $10
000233CD 53FE                       	dc.b $53, $FE
000233CF 1404                       	dc.b $14, $4
000233D1 0406                       	dc.b $4, $6
000233D3 02                         DPLCS_295: 	dc.b $2
000233D4 8412                       	dc.b $84, $12
000233D6 741B                       	dc.b $74, $1B
000233D8 03                         DPLCS_29A: 	dc.b $3
000233D9 8423                       	dc.b $84, $23
000233DB 242C                       	dc.b $24, $2C
000233DD 142F                       	dc.b $14, $2F
000233DF 02                         DPLCS_2A1: 	dc.b $2
000233E0 8431                       	dc.b $84, $31
000233E2 743A                       	dc.b $74, $3A
000233E4 03                         DPLCS_2A6: 	dc.b $3
000233E5 8423                       	dc.b $84, $23
000233E7 2442                       	dc.b $24, $42
000233E9 1445                       	dc.b $14, $45
000233EB 02                         DPLCS_2AD: 	dc.b $2
000233EC 5447                       	dc.b $54, $47
000233EE B44D                       	dc.b $B4, $4D
000233F0 03                         DPLCS_2B2: 	dc.b $3
000233F1 8459                       	dc.b $84, $59
000233F3 3462                       	dc.b $34, $62
000233F5 0466                       	dc.b $4, $66
000233F7 03                         DPLCS_2B9: 	dc.b $3
000233F8 7467                       	dc.b $74, $67
000233FA 146F                       	dc.b $14, $6F
000233FC B471                       	dc.b $B4, $71
000233FE 05                         DPLCS_2C0: 	dc.b $5
000233FF 747D                       	dc.b $74, $7D
00023401 1485                       	dc.b $14, $85
00023403 5487                       	dc.b $54, $87
00023405 348D                       	dc.b $34, $8D
00023407 0491                       	dc.b $4, $91
00023409 05                         DPLCS_2CB: 	dc.b $5
0002340A 7492                       	dc.b $74, $92
0002340C 1485                       	dc.b $14, $85
0002340E 549A                       	dc.b $54, $9A
00023410 348D                       	dc.b $34, $8D
00023412 0491                       	dc.b $4, $91
00023414 02                         DPLCS_2D6: 	dc.b $2
00023415 24A0                       	dc.b $24, $A0
00023417 F4A3                       	dc.b $F4, $A3
00023419 03                         DPLCS_2DB: 	dc.b $3
0002341A 24B3                       	dc.b $24, $B3
0002341C B4B6                       	dc.b $B4, $B6
0002341E 24C2                       	dc.b $24, $C2
00023420 01                         DPLCS_2E2: 	dc.b $1
00023421 B4C5                       	dc.b $B4, $C5
00023423 01                         DPLCS_2E5: 	dc.b $1
00023424 54D1                       	dc.b $54, $D1
00023426 01                         DPLCS_2E8: 	dc.b $1
00023427 14D7                       	dc.b $14, $D7
00023429 03                         DPLCS_2EB: 	dc.b $3
0002342A 738C                       	dc.b $73, $8C
0002342C 3394                       	dc.b $33, $94
0002342E 2398                       	dc.b $23, $98
00023430 03                         DPLCS_2F2: 	dc.b $3
00023431 73A4                       	dc.b $73, $A4
00023433 03AC                       	dc.b $3, $AC
00023435 33AD                       	dc.b $33, $AD
00023437 03                         DPLCS_2F9: 	dc.b $3
00023438 B4D9                       	dc.b $B4, $D9
0002343A 14E5                       	dc.b $14, $E5
0002343C 34E7                       	dc.b $34, $E7
0002343E 03                         DPLCS_300: 	dc.b $3
0002343F 54EB                       	dc.b $54, $EB
00023441 B4F1                       	dc.b $B4, $F1
00023443 1074                       	dc.b $10, $74
00023445 02                         DPLCS_307: 	dc.b $2
00023446 F4FD                       	dc.b $F4, $FD
00023448 250D                       	dc.b $25, $D
0002344A 02                         DPLCS_30C: 	dc.b $2
0002344B F510                       	dc.b $F5, $10
0002344D 1520                       	dc.b $15, $20
00023450 00                         	even
00023450 00                         	even
00023450                            
00023450                            ; ---------------------------------------------------------------------------
00023450                            ; Uncompressed graphics	- Sonic
00023450                            ; ---------------------------------------------------------------------------
00023450                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002D890                            		even
0002D890                            ; ---------------------------------------------------------------------------
0002D890                            ; Compressed graphics - various
0002D890                            ; ---------------------------------------------------------------------------
0002D890                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002D994                            		even
0002D994                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002D9CE                            		even
0002D9CE                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002DB64                            		even
0002DB64                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002DCAC                            		even
0002DCAC                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002DDB6                            		even
0002DDB6                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002DE08                            		even
0002DE08                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002E050                            		even
0002E050                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002E1D6                            		even
0002E1D6                            ; ---------------------------------------------------------------------------
0002E1D6                            ; Sprite mappings - walls of the special stage
0002E1D6                            ; ---------------------------------------------------------------------------
0002E1D6                            Map_SSWalls:
0002E1D6                            	include "_maps\SSwalls.asm"
0002E1D6                            ; ---------------------------------------------------------------------------
0002E1D6                            ; Sprite mappings - walls of the special stage
0002E1D6                            ; ---------------------------------------------------------------------------
0002E1D6 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002E1DA 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002E1DE 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002E1E2 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002E1E6 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002E1EA 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002E1EE 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002E1F2 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002E1F6 01                         byte_2C584:	dc.b 1
0002E1F7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002E1FC 01                         byte_2C58A:	dc.b 1
0002E1FD F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002E202 01                         byte_2C590:	dc.b 1
0002E203 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002E208 01                         byte_2C596:	dc.b 1
0002E209 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002E20E 01                         byte_2C59C:	dc.b 1
0002E20F F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002E214 01                         byte_2C5A2:	dc.b 1
0002E215 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002E21A 01                         byte_2C5A8:	dc.b 1
0002E21B F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002E220 01                         byte_2C5AE:	dc.b 1
0002E221 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002E226 01                         byte_2C5B4:	dc.b 1
0002E227 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002E22C 01                         byte_2C5BA:	dc.b 1
0002E22D F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002E232 01                         byte_2C5C0:	dc.b 1
0002E233 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002E238 01                         byte_2C5C6:	dc.b 1
0002E239 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002E23E 01                         byte_2C5CC:	dc.b 1
0002E23F F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002E244 01                         byte_2C5D2:	dc.b 1
0002E245 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002E24A 01                         byte_2C5D8:	dc.b 1
0002E24B F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002E250 01                         byte_2C5DE:	dc.b 1
0002E251 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002E256                            		even
0002E256                            		even
0002E256                            ; ---------------------------------------------------------------------------
0002E256                            ; Compressed graphics - special stage
0002E256                            ; ---------------------------------------------------------------------------
0002E256                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002EB8E                            		even
0002EB8E                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002ECC2                            		even
0002ECC2                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0002F952                            		even
0002F952                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0002FC52                            		even
0002FC52                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00030146                            		even
00030146                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00030234                            		even
00030234                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00030304                            		even
00030304                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000303FA                            		even
000303FA                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00030458                            		even
00030458                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000304EA                            		even
000304EA                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
000305AC                            		even
000305AC                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0003067A                            		even
0003067A                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00030746                            		even
00030746                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0003080E                            		even
0003080E                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000308D8                            		even
000308D8                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000309A8                            		even
000309A8                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00030B9C                            		even
00030B9C                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00030D04                            		even
00030D04                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00030DB4                            		even
00030DB4                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00030E8E                            		even
00030E8E                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00030F12                            		even
00030F12                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00031090                            		even
00031090                            ; ---------------------------------------------------------------------------
00031090                            ; Compressed graphics - GHZ stuff
00031090                            ; ---------------------------------------------------------------------------
00031090                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000310DA                            		even
000310DA                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000311F4                            		even
000311F4                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
000312E0                            		even
000312E0                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00031328                            		even
00031328                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000314C6                            		even
000314C6                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00031542                            		even
00031542                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00031756                            		even
00031756                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00031882                            		even
00031882                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
000319B0                            		even
000319B0                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00031A4E                            		even
00031A4E                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00031AAE                            		even
00031AAE                            ; ---------------------------------------------------------------------------
00031AAE                            ; Compressed graphics - LZ stuff
00031AAE                            ; ---------------------------------------------------------------------------
00031AAE                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00031BD2                            		even
00031BD2                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
000323C6                            		even
000323C6                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00032546                            		even
00032546                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
000326B0                            		even
000326B0                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00032D06                            		even
00032D06                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00032DBC                            		even
00032DBC                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00032E5E                            		even
00032E5E                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00032FBA                            		even
00032FBA                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003301E                            		even
0003301E                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00033170                            		even
00033170                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00033652                            		even
00033652                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
000337C2                            		even
000337C2                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00033A7A                            		even
00033A7A                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00033BB2                            		even
00033BB2                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00033CDC                            		even
00033CDC                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00033DEC                            		even
00033DEC                            ; ---------------------------------------------------------------------------
00033DEC                            ; Compressed graphics - MZ stuff
00033DEC                            ; ---------------------------------------------------------------------------
00033DEC                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003407A                            		even
0003407A                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00034138                            		even
00034138                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000341F0                            		even
000341F0                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00034244                            		even
00034244                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00034522                            		even
00034522                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00034E38                            		even
00034E38                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00034F9C                            		even
00034F9C                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00035024                            		even
00035024                            ; ---------------------------------------------------------------------------
00035024                            ; Compressed graphics - SLZ stuff
00035024                            ; ---------------------------------------------------------------------------
00035024                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00035260                            		even
00035260                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
000353A6                            		even
000353A6                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
000355EA                            		even
000355EA                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0003564C                            		even
0003564C                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003572E                            		even
0003572E                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00035910                            		even
00035910                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00035A1C                            		even
00035A1C                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00035AC0                            		even
00035AC0                            ; ---------------------------------------------------------------------------
00035AC0                            ; Compressed graphics - SYZ stuff
00035AC0                            ; ---------------------------------------------------------------------------
00035AC0                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00035C2A                            		even
00035C2A                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00035C8C                            		even
00035C8C                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00035D6E                            		even
00035D6E                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00035FFC                            		even
00035FFC                            ; ---------------------------------------------------------------------------
00035FFC                            ; Compressed graphics - SBZ stuff
00035FFC                            ; ---------------------------------------------------------------------------
00035FFC                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00036050                            		even
00036050                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000362EC                            		even
000362EC                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
000364F0                            		even
000364F0                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003668E                            		even
0003668E                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
000369BE                            		even
000369BE                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00036B9C                            		even
00036B9C                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00036BF4                            		even
00036BF4                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00036D74                            		even
00036D74                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00036E72                            		even
00036E72                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00036FFE                            		even
00036FFE                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003704E                            		even
0003704E                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
000370A6                            		even
000370A6                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
000371A2                            		even
000371A2                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
000372B8                            		even
000372B8                            ; ---------------------------------------------------------------------------
000372B8                            ; Compressed graphics - enemies
000372B8                            ; ---------------------------------------------------------------------------
000372B8                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00037678                            		even
00037678                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00037B66                            		even
00037B66                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00037F28 00                         		even
00037F28                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00038110                            		even
00038110                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
000387FA                            		even
000387FA                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00038A62                            		even
00038A62                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00038CEC                            		even
00038CEC                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00039210                            		even
00039210                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00039406                            		even
00039406                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00039A24                            		even
00039A24                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
00039E0C                            		even
00039E0C                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003A108                            		even
0003A108                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003A350                            		even
0003A350                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003A5E8                            		even
0003A5E8                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003A7C6                            		even
0003A7C6                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003A954                            		even
0003A954                            ; ---------------------------------------------------------------------------
0003A954                            ; Compressed graphics - various
0003A954                            ; ---------------------------------------------------------------------------
0003A954                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003AF62                            		even
0003AF62                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003B058                            		even
0003B058                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003B15E                            		even
0003B15E                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003B252                            		even
0003B252                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003B6AA                            		even
0003B6AA                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003BD10                            		even
0003BD10                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003BDC0                            		even
0003BDC0                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003BF52                            		even
0003BF52                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003C054                            		even
0003C054                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003C130                            		even
0003C130                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003C5AC                            		even
0003C5AC                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003C66C                            		even
0003C66C                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003C7E0                            		even
0003C7E0                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003CAE2                            		even
0003CAE2                            ; ---------------------------------------------------------------------------
0003CAE2                            ; Compressed graphics - continue screen
0003CAE2                            ; ---------------------------------------------------------------------------
0003CAE2                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003CD92                            		even
0003CD92                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003CFCC                            		even
0003CFCC                            ; ---------------------------------------------------------------------------
0003CFCC                            ; Compressed graphics - animals
0003CFCC                            ; ---------------------------------------------------------------------------
0003CFCC                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003D124                            		even
0003D124                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003D280                            		even
0003D280                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003D3FC                            		even
0003D3FC                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003D518                            		even
0003D518                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003D64E                            		even
0003D64E                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003D788                            		even
0003D788                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003D8E4                            		even
0003D8E4                            ; ---------------------------------------------------------------------------
0003D8E4                            ; Compressed graphics - primary patterns and block mappings
0003D8E4                            ; ---------------------------------------------------------------------------
0003D8E4                            Blk16_GHZ:	incbin	map16\ghz.bin
0003E1F8                            		even
0003E1F8                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0003F80A                            		even
0003F80A                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00040B9E                            		even
00040B9E                            Blk256_GHZ:	incbin	map256\ghz.bin
00042E96                            		even
00042E96                            Blk16_LZ:	incbin	map16\lz.bin
000431C0                            		even
000431C0                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00044D08                            		even
00044D08                            Blk256_LZ:	incbin	map256\lz.bin
000474F8                            		even
000474F8                            Blk16_MZ:	incbin	map16\mz.bin
00047D02                            		even
00047D02                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004A546                            		even
0004A546                            Blk256_MZ:	incbin	map256\mz.bin
0004BD06                            		even
0004BD06                            Blk16_SLZ:	incbin	map16\slz.bin
0004BFEC                            		even
0004BFEC                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004D10E                            		even
0004D10E                            Blk256_SLZ:	incbin	map256\slz.bin
0004D2C8                            		even
0004D2C8                            Blk16_SYZ:	incbin	map16\syz.bin
0004DB5C                            		even
0004DB5C                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000511CA                            		even
000511CA                            Blk256_SYZ:	incbin	map256\syz.bin
0005354C                            		even
0005354C                            Blk16_SBZ:	incbin	map16\sbz.bin
000543E6                            		even
000543E6                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
00056B92                            		even
00056B92                            Blk256_SBZ:	incbin	map256\sbz.bin
000595E2                            		even
000595E2                            ; ---------------------------------------------------------------------------
000595E2                            ; Compressed graphics - bosses and ending sequence
000595E2                            ; ---------------------------------------------------------------------------
000595E2                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00059DFC 00                         		even
00059DFC                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005A0E6                            		even
0005A0E6                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0005A96A                            		even
0005A96A                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0005B196                            		even
0005B196                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0005B8FE                            		even
0005B8FE                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005BE7E                            		even
0005BE7E                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005BF9E                            		even
0005BF9E                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005C19C                            		even
0005C19C                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0005D37A                            		even
0005D37A                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0005DCBE                            		even
0005DCBE                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0005E094                            		even
0005E094                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0005E624                            		even
0005E624                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0005E8AC                            		even
0005E8AC                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0005EEAA                            		even
0005EEAA                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0005F132                            		even
0005F132                            		incbin	misc\padding2.bin
0005F236                            		even
0005F236                            ; ---------------------------------------------------------------------------
0005F236                            ; Collision data
0005F236                            ; ---------------------------------------------------------------------------
0005F236                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0005F336                            		even
0005F336                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00060336                            		even
00060336                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00061336                            		even
00061336                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000614EE 00                         		even
000614EE                            Col_LZ:		incbin	collide\lz.bin		; LZ index
000615B6                            		even
000615B6                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00061746                            		even
00061746                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006193A                            		even
0006193A                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00061B2E                            		even
00061B2E                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00061D86                            		even
00061D86                            ; ---------------------------------------------------------------------------
00061D86                            ; Special layouts
00061D86                            ; ---------------------------------------------------------------------------
00061D86                            SS_1:		incbin	sslayout\1.bin
00062000                            		even
00062000                            SS_2:		incbin	sslayout\2.bin
00062412                            		even
00062412                            SS_3:		incbin	sslayout\3.bin
0006276E                            		even
0006276E                            SS_4:		incbin	sslayout\4.bin
00062C48                            		even
00062C48                            SS_5:		incbin	sslayout\5.bin
0006311A                            		even
0006311A                            SS_6:		incbin	sslayout\6.bin
0006342A                            		even
0006342A                            ; ---------------------------------------------------------------------------
0006342A                            ; Animated uncompressed graphics
0006342A                            ; ---------------------------------------------------------------------------
0006342A                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006362A                            		even
0006362A                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00063A2A                            		even
00063A2A                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00063EAA                            		even
00063EAA                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
000641AA                            		even
000641AA                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
000647AA                            		even
000647AA                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00064AAA                            		even
00064AAA                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006552A                            		even
0006552A                            
0006552A                            ; ---------------------------------------------------------------------------
0006552A                            ; Level	layout index
0006552A                            ; ---------------------------------------------------------------------------
0006552A 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00065530 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00065536 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006553C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00065542 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00065548 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006554E 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00065554 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006555A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00065560 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00065566 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006556C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00065572 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00065578 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006557E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00065584 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006558A 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00065590 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00065596 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006559C 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
000655A2 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
000655A8 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
000655AE 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
000655B4 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
000655BA 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000655C0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000655C6 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000655CC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000655D2                            
000655D2                            Level_GHZ1:	incbin	levels\ghz1.bin
000656C4                            		even
000656C4 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000656C8                            Level_GHZ2:	incbin	levels\ghz2.bin
00065790                            		even
00065790 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00065794                            Level_GHZ3:	incbin	levels\ghz3.bin
000658B6                            		even
000658B6                            Level_GHZbg:	incbin	levels\ghzbg.bin
000658D8                            		even
000658D8 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000658DC 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000658E0                            
000658E0                            Level_LZ1:	incbin	levels\lz1.bin
000659E2                            		even
000659E2                            Level_LZbg:	incbin	levels\lzbg.bin
00065AE4                            		even
00065AE4 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00065AE8                            Level_LZ2:	incbin	levels\lz2.bin
00065B82                            		even
00065B82 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00065B86                            Level_LZ3:	incbin	levels\lz3.bin
00065CA0                            		even
00065CA0 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00065CA4                            Level_SBZ3:	incbin	levels\sbz3.bin
00065D5E                            		even
00065D5E 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00065D62                            
00065D62                            Level_MZ1:	incbin	levels\mz1.bin
00065E00                            		even
00065E00                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00065E7A                            		even
00065E7A                            Level_MZ2:	incbin	levels\mz2.bin
00065F1E                            		even
00065F1E                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00065FB0                            		even
00065FB0 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00065FB4                            Level_MZ3:	incbin	levels\mz3.bin
00066096                            		even
00066096                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006613A                            		even
0006613A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006613E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00066142                            
00066142                            Level_SLZ1:	incbin	levels\slz1.bin
00066254                            		even
00066254                            Level_SLZbg:	incbin	levels\slzbg.bin
0006626E                            		even
0006626E                            Level_SLZ2:	incbin	levels\slz2.bin
0006635E                            		even
0006635E                            Level_SLZ3:	incbin	levels\slz3.bin
00066478                            		even
00066478 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006647C                            
0006647C                            Level_SYZ1:	incbin	levels\syz1.bin
00066538 00                         		even
00066538                            Level_SYZbg:	incbin	levels\syzbg.bin
00066572                            		even
00066572 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00066576                            Level_SYZ2:	incbin	levels\syz2.bin
0006667A                            		even
0006667A 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006667E                            Level_SYZ3:	incbin	levels\syz3.bin
000667D8 00                         		even
000667D8 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000667DC 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000667E0                            
000667E0                            Level_SBZ1:	incbin	levels\sbz1.bin
00066902                            		even
00066902                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00066940                            		even
00066940                            Level_SBZ2:	incbin	levels\sbz2.bin
00066A82                            		even
00066A82                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00066BEC                            		even
00066BEC 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00066BF0 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00066BF4                            Level_End:	incbin	levels\ending.bin
00066C24 00                         		even
00066C24 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00066C28                            
00066C28                            ; ---------------------------------------------------------------------------
00066C28                            ; Animated uncompressed giant ring graphics
00066C28                            ; ---------------------------------------------------------------------------
00066C28                            Art_BigRing:	incbin	artunc\bigring.bin
00067868                            		even
00067868                            
00067868                            		incbin	misc\padding3.bin
00067904                            		even
00067904                            
00067904                            ; ---------------------------------------------------------------------------
00067904                            ; Sprite locations index
00067904                            ; ---------------------------------------------------------------------------
00067904 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067908 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006790C 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067910 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067914 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067918 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006791C 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067920 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067924 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067928 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006792C 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067930 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067934 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067938 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006793C 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067940 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067944 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067948 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006794C 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067950 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067954 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067958 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006795C 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067960 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067964 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067968 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006796C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067970 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067974 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00067978 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006797C 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
00067980 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00067984 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00067988 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006798C 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
00067990 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00067994 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006799A                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
000681BC                            		even
000681BC                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00068270                            		even
00068270                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
000689B4                            		even
000689B4                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00068E22                            		even
00068E22                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00069164                            		even
00069164                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00069746                            		even
00069746                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00069BDE                            		even
00069BDE                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00069C10                            		even
00069C10                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00069C42                            		even
00069C42                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00069C74                            		even
00069C74                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00069CA6                            		even
00069CA6                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00069CF0                            		even
00069CF0                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00069D2E                            		even
00069D2E                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0006A09A                            		even
0006A09A                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0006A544                            		even
0006A544                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0006AABA                            		even
0006AABA                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0006AFFA                            		even
0006AFFA                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0006B462                            		even
0006B462                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006BA44                            		even
0006BA44                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0006C0B0                            		even
0006C0B0                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0006C61A                            		even
0006C61A                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0006CC20                            		even
0006CC20                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0006D35E                            		even
0006D35E                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0006DA3C                            		even
0006DA3C                            ObjPos_FZ:	incbin	objpos\fz.bin
0006DA4E                            		even
0006DA4E                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0006DA80                            		even
0006DA80                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0006DAB2                            		even
0006DAB2                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0006DAE4                            		even
0006DAE4                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0006DB16                            		even
0006DB16                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0006DB48                            		even
0006DB48                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0006DB80                            		even
0006DB80                            ObjPos_End:	incbin	objpos\ending.bin
0006DCDC                            		even
0006DCDC FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0006DCE2                            ; ---------------------------------------------------------------------------
0006DCE2                            		incbin	misc\padding4.bin
0006E30C                            		even
0006E30C                            
0006E30C 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0006E310 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0006E314 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0006E318 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0006E31C 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0006E320 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0006E324                            ; ---------------------------------------------------------------------------
0006E324                            ; PSG instruments used in music
0006E324                            ; ---------------------------------------------------------------------------
0006E324 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0006E330 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0006E33C 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0006E348                            PSG1:		incbin	sound\psg1.bin
0006E35F                            PSG2:		incbin	sound\psg2.bin
0006E366                            PSG3:		incbin	sound\psg3.bin
0006E377                            PSG4:		incbin	sound\psg4.bin
0006E382                            PSG6:		incbin	sound\psg6.bin
0006E391                            PSG5:		incbin	sound\psg5.bin
0006E3BB                            PSG7:		incbin	sound\psg7.bin
0006E3D7                            PSG8:		incbin	sound\psg8.bin
0006E3FF                            PSG9:		incbin	sound\psg9.bin
0006E410                            
0006E410 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0006E418                            ; ---------------------------------------------------------------------------
0006E418                            ; Music	Pointers
0006E418                            ; ---------------------------------------------------------------------------
0006E418 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0006E420 0000 0000 0000 0000        		dc.l Music83, Music84
0006E428 0000 0000 0000 0000        		dc.l Music85, Music86
0006E430 0000 0000 0000 0000        		dc.l Music87, Music88
0006E438 0000 0000 0000 0000        		dc.l Music89, Music8A
0006E440 0000 0000 0000 0000        		dc.l Music8B, Music8C
0006E448 0000 0000 0000 0000        		dc.l Music8D, Music8E
0006E450 0000 0000 0000 0000        		dc.l Music8F, Music90
0006E458 0000 0000 0000 0000        		dc.l Music91, Music92
0006E460 0000 0000 0000 0000        		dc.l Music93, Music94
0006E468 0000 0000 0000 0000        		dc.l Music95, Music96
0006E470 0000 0000 0000 0000        		dc.l Music97, Music98
0006E478 0000 0000 0000 0000        		dc.l Music99, Music9A
0006E480 0000 0000 0000 0000        		dc.l Music9B, Music9C
0006E488 0000 0000 0000 0000        		dc.l Music9D, Music9E
0006E490 0000 0000                  		dc.l Music9F
0006E494                            ; ---------------------------------------------------------------------------
0006E494                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0006E494                            ; ---------------------------------------------------------------------------
0006E494 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0006E4A4 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0006E4B4 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0006E4C4 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0006E4D4 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0006E4E4 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0006E4F4 9090 9090                  		dc.b $90, $90, $90, $90
0006E4F8                            
0006E4F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E4F8                            
0006E4F8                            
0006E4F8                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0006E4F8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0006E500 4E71                       		nop	
0006E502 4E71                       		nop	
0006E504 4E71                       		nop	
0006E506                            
0006E506                            loc_71B5A:
0006E506 0839 0000 00A1 1100        		btst	#0,($A11100).l
0006E50E 66F6                       		bne.s	loc_71B5A
0006E510                            
0006E510 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0006E518 6700                       		beq.s	loc_71B82
0006E51A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006E522 4E71                       		nop	
0006E524 4E71                       		nop	
0006E526 4E71                       		nop	
0006E528 4E71                       		nop	
0006E52A 4E71                       		nop	
0006E52C 60CA                       		bra.s	sub_71B4C
0006E52E                            ; ===========================================================================
0006E52E                            
0006E52E                            loc_71B82:
0006E52E 4DF9 00FF F000             		lea	($FFF000).l,a6
0006E534 422E 000E                  		clr.b	$E(a6)
0006E538 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0006E53C 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0006E540 532E 0001                  		subq.b	#1,1(a6)
0006E544 6600                       		bne.s	loc_71B9E
0006E546 4EBA 0000                  		jsr	sub_7260C(pc)
0006E54A                            
0006E54A                            loc_71B9E:
0006E54A 102E 0004                  		move.b	4(a6),d0
0006E54E 6700                       		beq.s	loc_71BA8
0006E550 4EBA 0000                  		jsr	sub_72504(pc)
0006E554                            
0006E554                            loc_71BA8:
0006E554 4A2E 0024                  		tst.b	$24(a6)
0006E558 6700                       		beq.s	loc_71BB2
0006E55A 4EBA 0000                  		jsr	sub_7267C(pc)
0006E55E                            
0006E55E                            loc_71BB2:
0006E55E 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0006E562 6700                       		beq.s	loc_71BBC	; if not, branch
0006E564 4EBA 0000                  		jsr	Sound_Play(pc)
0006E568                            
0006E568                            loc_71BBC:
0006E568 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006E56E 6700                       		beq.s	loc_71BC8
0006E570 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0006E574                            
0006E574                            loc_71BC8:
0006E574 4BEE 0040                  		lea	$40(a6),a5
0006E578 4A15                       		tst.b	(a5)
0006E57A 6A00                       		bpl.s	loc_71BD4
0006E57C 4EBA 0000                  		jsr	sub_71C4E(pc)
0006E580                            
0006E580                            loc_71BD4:
0006E580 422E 0008                  		clr.b	8(a6)
0006E584 7E05                       		moveq	#5,d7
0006E586                            
0006E586                            loc_71BDA:
0006E586 DAFC 0030                  		adda.w	#$30,a5
0006E58A 4A15                       		tst.b	(a5)
0006E58C 6A00                       		bpl.s	loc_71BE6
0006E58E 4EBA 0000                  		jsr	sub_71CCA(pc)
0006E592                            
0006E592                            loc_71BE6:
0006E592 51CF FFF2                  		dbf	d7,loc_71BDA
0006E596                            
0006E596 7E02                       		moveq	#2,d7
0006E598                            
0006E598                            loc_71BEC:
0006E598 DAFC 0030                  		adda.w	#$30,a5
0006E59C 4A15                       		tst.b	(a5)
0006E59E 6A00                       		bpl.s	loc_71BF8
0006E5A0 4EBA 0000                  		jsr	sub_72850(pc)
0006E5A4                            
0006E5A4                            loc_71BF8:
0006E5A4 51CF FFF2                  		dbf	d7,loc_71BEC
0006E5A8                            
0006E5A8 1D7C 0080 000E             		move.b	#$80,$E(a6)
0006E5AE 7E02                       		moveq	#2,d7
0006E5B0                            
0006E5B0                            loc_71C04:
0006E5B0 DAFC 0030                  		adda.w	#$30,a5
0006E5B4 4A15                       		tst.b	(a5)
0006E5B6 6A00                       		bpl.s	loc_71C10
0006E5B8 4EBA 0000                  		jsr	sub_71CCA(pc)
0006E5BC                            
0006E5BC                            loc_71C10:
0006E5BC 51CF FFF2                  		dbf	d7,loc_71C04
0006E5C0                            
0006E5C0 7E02                       		moveq	#2,d7
0006E5C2                            
0006E5C2                            loc_71C16:
0006E5C2 DAFC 0030                  		adda.w	#$30,a5
0006E5C6 4A15                       		tst.b	(a5)
0006E5C8 6A00                       		bpl.s	loc_71C22
0006E5CA 4EBA 0000                  		jsr	sub_72850(pc)
0006E5CE                            
0006E5CE                            loc_71C22:
0006E5CE 51CF FFF2                  		dbf	d7,loc_71C16
0006E5D2 1D7C 0040 000E             		move.b	#$40,$E(a6)
0006E5D8 DAFC 0030                  		adda.w	#$30,a5
0006E5DC 4A15                       		tst.b	(a5)
0006E5DE 6A00                       		bpl.s	loc_71C38
0006E5E0 4EBA 0000                  		jsr	sub_71CCA(pc)
0006E5E4                            
0006E5E4                            loc_71C38:
0006E5E4 DAFC 0030                  		adda.w	#$30,a5
0006E5E8 4A15                       		tst.b	(a5)
0006E5EA 6A00                       		bpl.s	loc_71C44
0006E5EC 4EBA 0000                  		jsr	sub_72850(pc)
0006E5F0                            
0006E5F0                            loc_71C44:
0006E5F0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006E5F8 4E75                       		rts	
0006E5FA                            ; End of function sub_71B4C
0006E5FA                            
0006E5FA                            
0006E5FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E5FA                            
0006E5FA                            
0006E5FA                            sub_71C4E:				; XREF: sub_71B4C
0006E5FA 532D 000E                  		subq.b	#1,$E(a5)
0006E5FE 6600                       		bne.s	locret_71CAA
0006E600 1D7C 0080 0008             		move.b	#$80,8(a6)
0006E606 286D 0004                  		movea.l	4(a5),a4
0006E60A                            
0006E60A                            loc_71C5E:
0006E60A 7A00                       		moveq	#0,d5
0006E60C 1A1C                       		move.b	(a4)+,d5
0006E60E 0C05 00E0                  		cmpi.b	#-$20,d5
0006E612 6500                       		bcs.s	loc_71C6E
0006E614 4EBA 0000                  		jsr	sub_72A5A(pc)
0006E618 60F0                       		bra.s	loc_71C5E
0006E61A                            ; ===========================================================================
0006E61A                            
0006E61A                            loc_71C6E:
0006E61A 4A05                       		tst.b	d5
0006E61C 6A00                       		bpl.s	loc_71C84
0006E61E 1B45 0010                  		move.b	d5,$10(a5)
0006E622 1A1C                       		move.b	(a4)+,d5
0006E624 6A00                       		bpl.s	loc_71C84
0006E626 534C                       		subq.w	#1,a4
0006E628 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006E62E 6000                       		bra.s	loc_71C88
0006E630                            ; ===========================================================================
0006E630                            
0006E630                            loc_71C84:
0006E630 4EBA 0000                  		jsr	sub_71D40(pc)
0006E634                            
0006E634                            loc_71C88:
0006E634 2B4C 0004                  		move.l	a4,4(a5)
0006E638 0815 0002                  		btst	#2,(a5)
0006E63C 6600                       		bne.s	locret_71CAA
0006E63E 7000                       		moveq	#0,d0
0006E640 102D 0010                  		move.b	$10(a5),d0
0006E644 0C00 0080                  		cmpi.b	#$80,d0
0006E648 6700                       		beq.s	locret_71CAA
0006E64A 0800 0003                  		btst	#3,d0
0006E64E 6600                       		bne.s	loc_71CAC
0006E650 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0006E656                            
0006E656                            locret_71CAA:
0006E656 4E75                       		rts	
0006E658                            ; ===========================================================================
0006E658                            
0006E658                            loc_71CAC:
0006E658 0400 0088                  		subi.b	#$88,d0
0006E65C 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0006E660 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0006E666 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0006E66E 4E75                       		rts	
0006E670                            ; End of function sub_71C4E
0006E670                            
0006E670                            ; ===========================================================================
0006E670 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0006E676                            
0006E676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E676                            
0006E676                            
0006E676                            sub_71CCA:				; XREF: sub_71B4C
0006E676 532D 000E                  		subq.b	#1,$E(a5)
0006E67A 6600                       		bne.s	loc_71CE0
0006E67C 0895 0004                  		bclr	#4,(a5)
0006E680 4EBA 0000                  		jsr	sub_71CEC(pc)
0006E684 4EBA 0000                  		jsr	sub_71E18(pc)
0006E688 6000 0000                  		bra.w	loc_726E2
0006E68C                            ; ===========================================================================
0006E68C                            
0006E68C                            loc_71CE0:
0006E68C 4EBA 0000                  		jsr	sub_71D9E(pc)
0006E690 4EBA 0000                  		jsr	sub_71DC6(pc)
0006E694 6000 0000                  		bra.w	loc_71E24
0006E698                            ; End of function sub_71CCA
0006E698                            
0006E698                            
0006E698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E698                            
0006E698                            
0006E698                            sub_71CEC:				; XREF: sub_71CCA
0006E698 286D 0004                  		movea.l	4(a5),a4
0006E69C 0895 0001                  		bclr	#1,(a5)
0006E6A0                            
0006E6A0                            loc_71CF4:
0006E6A0 7A00                       		moveq	#0,d5
0006E6A2 1A1C                       		move.b	(a4)+,d5
0006E6A4 0C05 00E0                  		cmpi.b	#-$20,d5
0006E6A8 6500                       		bcs.s	loc_71D04
0006E6AA 4EBA 0000                  		jsr	sub_72A5A(pc)
0006E6AE 60F0                       		bra.s	loc_71CF4
0006E6B0                            ; ===========================================================================
0006E6B0                            
0006E6B0                            loc_71D04:
0006E6B0 4EBA 0000                  		jsr	sub_726FE(pc)
0006E6B4 4A05                       		tst.b	d5
0006E6B6 6A00                       		bpl.s	loc_71D1A
0006E6B8 4EBA 0000                  		jsr	sub_71D22(pc)
0006E6BC 1A1C                       		move.b	(a4)+,d5
0006E6BE 6A00                       		bpl.s	loc_71D1A
0006E6C0 534C                       		subq.w	#1,a4
0006E6C2 6000 0000                  		bra.w	sub_71D60
0006E6C6                            ; ===========================================================================
0006E6C6                            
0006E6C6                            loc_71D1A:
0006E6C6 4EBA 0000                  		jsr	sub_71D40(pc)
0006E6CA 6000 0000                  		bra.w	sub_71D60
0006E6CE                            ; End of function sub_71CEC
0006E6CE                            
0006E6CE                            
0006E6CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E6CE                            
0006E6CE                            
0006E6CE                            sub_71D22:				; XREF: sub_71CEC
0006E6CE 0405 0080                  		subi.b	#$80,d5
0006E6D2 6700                       		beq.s	loc_71D58
0006E6D4 DA2D 0008                  		add.b	8(a5),d5
0006E6D8 0245 007F                  		andi.w	#$7F,d5
0006E6DC E34D                       		lsl.w	#1,d5
0006E6DE 41FA 0000                  		lea	word_72790(pc),a0
0006E6E2 3C30 5000                  		move.w	(a0,d5.w),d6
0006E6E6 3B46 0010                  		move.w	d6,$10(a5)
0006E6EA 4E75                       		rts	
0006E6EC                            ; End of function sub_71D22
0006E6EC                            
0006E6EC                            
0006E6EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E6EC                            
0006E6EC                            
0006E6EC                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0006E6EC 1005                       		move.b	d5,d0
0006E6EE 122D 0002                  		move.b	2(a5),d1
0006E6F2                            
0006E6F2                            loc_71D46:
0006E6F2 5301                       		subq.b	#1,d1
0006E6F4 6700                       		beq.s	loc_71D4E
0006E6F6 D005                       		add.b	d5,d0
0006E6F8 60F8                       		bra.s	loc_71D46
0006E6FA                            ; ===========================================================================
0006E6FA                            
0006E6FA                            loc_71D4E:
0006E6FA 1B40 000F                  		move.b	d0,$F(a5)
0006E6FE 1B40 000E                  		move.b	d0,$E(a5)
0006E702 4E75                       		rts	
0006E704                            ; End of function sub_71D40
0006E704                            
0006E704                            ; ===========================================================================
0006E704                            
0006E704                            loc_71D58:				; XREF: sub_71D22
0006E704 08D5 0001                  		bset	#1,(a5)
0006E708 426D 0010                  		clr.w	$10(a5)
0006E70C                            
0006E70C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E70C                            
0006E70C                            
0006E70C                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0006E70C 2B4C 0004                  		move.l	a4,4(a5)
0006E710 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006E716 0815 0004                  		btst	#4,(a5)
0006E71A 6600                       		bne.s	locret_71D9C
0006E71C 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0006E722 422D 000C                  		clr.b	$C(a5)
0006E726 0815 0003                  		btst	#3,(a5)
0006E72A 6700                       		beq.s	locret_71D9C
0006E72C 206D 0014                  		movea.l	$14(a5),a0
0006E730 1B58 0018                  		move.b	(a0)+,$18(a5)
0006E734 1B58 0019                  		move.b	(a0)+,$19(a5)
0006E738 1B58 001A                  		move.b	(a0)+,$1A(a5)
0006E73C 1018                       		move.b	(a0)+,d0
0006E73E E208                       		lsr.b	#1,d0
0006E740 1B40 001B                  		move.b	d0,$1B(a5)
0006E744 426D 001C                  		clr.w	$1C(a5)
0006E748                            
0006E748                            locret_71D9C:
0006E748 4E75                       		rts	
0006E74A                            ; End of function sub_71D60
0006E74A                            
0006E74A                            
0006E74A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E74A                            
0006E74A                            
0006E74A                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0006E74A 4A2D 0012                  		tst.b	$12(a5)
0006E74E 6700                       		beq.s	locret_71DC4
0006E750 532D 0012                  		subq.b	#1,$12(a5)
0006E754 6600                       		bne.s	locret_71DC4
0006E756 08D5 0001                  		bset	#1,(a5)
0006E75A 4A2D 0001                  		tst.b	1(a5)
0006E75E 6B00 0000                  		bmi.w	loc_71DBE
0006E762 4EBA 0000                  		jsr	sub_726FE(pc)
0006E766 584F                       		addq.w	#4,sp
0006E768 4E75                       		rts	
0006E76A                            ; ===========================================================================
0006E76A                            
0006E76A                            loc_71DBE:
0006E76A 4EBA 0000                  		jsr	sub_729A0(pc)
0006E76E 584F                       		addq.w	#4,sp
0006E770                            
0006E770                            locret_71DC4:
0006E770 4E75                       		rts	
0006E772                            ; End of function sub_71D9E
0006E772                            
0006E772                            
0006E772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E772                            
0006E772                            
0006E772                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0006E772 584F                       		addq.w	#4,sp
0006E774 0815 0003                  		btst	#3,(a5)
0006E778 6700                       		beq.s	locret_71E16
0006E77A 4A2D 0018                  		tst.b	$18(a5)
0006E77E 6700                       		beq.s	loc_71DDA
0006E780 532D 0018                  		subq.b	#1,$18(a5)
0006E784 4E75                       		rts	
0006E786                            ; ===========================================================================
0006E786                            
0006E786                            loc_71DDA:
0006E786 532D 0019                  		subq.b	#1,$19(a5)
0006E78A 6700                       		beq.s	loc_71DE2
0006E78C 4E75                       		rts	
0006E78E                            ; ===========================================================================
0006E78E                            
0006E78E                            loc_71DE2:
0006E78E 206D 0014                  		movea.l	$14(a5),a0
0006E792 1B68 0001 0019             		move.b	1(a0),$19(a5)
0006E798 4A2D 001B                  		tst.b	$1B(a5)
0006E79C 6600                       		bne.s	loc_71DFE
0006E79E 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0006E7A4 442D 001A                  		neg.b	$1A(a5)
0006E7A8 4E75                       		rts	
0006E7AA                            ; ===========================================================================
0006E7AA                            
0006E7AA                            loc_71DFE:
0006E7AA 532D 001B                  		subq.b	#1,$1B(a5)
0006E7AE 1C2D 001A                  		move.b	$1A(a5),d6
0006E7B2 4886                       		ext.w	d6
0006E7B4 DC6D 001C                  		add.w	$1C(a5),d6
0006E7B8 3B46 001C                  		move.w	d6,$1C(a5)
0006E7BC DC6D 0010                  		add.w	$10(a5),d6
0006E7C0 594F                       		subq.w	#4,sp
0006E7C2                            
0006E7C2                            locret_71E16:
0006E7C2 4E75                       		rts	
0006E7C4                            ; End of function sub_71DC6
0006E7C4                            
0006E7C4                            
0006E7C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E7C4                            
0006E7C4                            
0006E7C4                            sub_71E18:				; XREF: sub_71CCA
0006E7C4 0815 0001                  		btst	#1,(a5)
0006E7C8 6600                       		bne.s	locret_71E48
0006E7CA 3C2D 0010                  		move.w	$10(a5),d6
0006E7CE 6700                       		beq.s	loc_71E4A
0006E7D0                            
0006E7D0                            loc_71E24:				; XREF: sub_71CCA
0006E7D0 102D 001E                  		move.b	$1E(a5),d0
0006E7D4 4880                       		ext.w	d0
0006E7D6 DC40                       		add.w	d0,d6
0006E7D8 0815 0002                  		btst	#2,(a5)
0006E7DC 6600                       		bne.s	locret_71E48
0006E7DE 3206                       		move.w	d6,d1
0006E7E0 E049                       		lsr.w	#8,d1
0006E7E2 103C 00A4                  		move.b	#-$5C,d0
0006E7E6 4EBA 0000                  		jsr	sub_72722(pc)
0006E7EA 1206                       		move.b	d6,d1
0006E7EC 103C 00A0                  		move.b	#-$60,d0
0006E7F0 4EBA 0000                  		jsr	sub_72722(pc)
0006E7F4                            
0006E7F4                            locret_71E48:
0006E7F4 4E75                       		rts	
0006E7F6                            ; ===========================================================================
0006E7F6                            
0006E7F6                            loc_71E4A:
0006E7F6 08D5 0001                  		bset	#1,(a5)
0006E7FA 4E75                       		rts	
0006E7FC                            ; End of function sub_71E18
0006E7FC                            
0006E7FC                            ; ===========================================================================
0006E7FC                            
0006E7FC                            loc_71E50:				; XREF: sub_71B4C
0006E7FC 6B00                       		bmi.s	loc_71E94
0006E7FE 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0006E804 6700 0000                  		beq.w	loc_71EFE
0006E808 1D7C 0002 0003             		move.b	#2,3(a6)
0006E80E 7602                       		moveq	#2,d3
0006E810 103C 00B4                  		move.b	#-$4C,d0
0006E814 7200                       		moveq	#0,d1
0006E816                            
0006E816                            loc_71E6A:
0006E816 4EBA 0000                  		jsr	sub_7272E(pc)
0006E81A 4EBA 0000                  		jsr	sub_72764(pc)
0006E81E 5200                       		addq.b	#1,d0
0006E820 51CB FFF4                  		dbf	d3,loc_71E6A
0006E824                            
0006E824 7602                       		moveq	#2,d3
0006E826 7028                       		moveq	#$28,d0
0006E828                            
0006E828                            loc_71E7C:
0006E828 1203                       		move.b	d3,d1
0006E82A 4EBA 0000                  		jsr	sub_7272E(pc)
0006E82E 5801                       		addq.b	#4,d1
0006E830 4EBA 0000                  		jsr	sub_7272E(pc)
0006E834 51CB FFF2                  		dbf	d3,loc_71E7C
0006E838                            
0006E838 4EBA 0000                  		jsr	sub_729B6(pc)
0006E83C 6000 FDB2                  		bra.w	loc_71C44
0006E840                            ; ===========================================================================
0006E840                            
0006E840                            loc_71E94:				; XREF: loc_71E50
0006E840 422E 0003                  		clr.b	3(a6)
0006E844 7630                       		moveq	#$30,d3
0006E846 4BEE 0040                  		lea	$40(a6),a5
0006E84A 7806                       		moveq	#6,d4
0006E84C                            
0006E84C                            loc_71EA0:
0006E84C 0815 0007                  		btst	#7,(a5)
0006E850 6700                       		beq.s	loc_71EB8
0006E852 0815 0002                  		btst	#2,(a5)
0006E856 6600                       		bne.s	loc_71EB8
0006E858 103C 00B4                  		move.b	#-$4C,d0
0006E85C 122D 000A                  		move.b	$A(a5),d1
0006E860 4EBA 0000                  		jsr	sub_72722(pc)
0006E864                            
0006E864                            loc_71EB8:
0006E864 DAC3                       		adda.w	d3,a5
0006E866 51CC FFE4                  		dbf	d4,loc_71EA0
0006E86A                            
0006E86A 4BEE 0220                  		lea	$220(a6),a5
0006E86E 7802                       		moveq	#2,d4
0006E870                            
0006E870                            loc_71EC4:
0006E870 0815 0007                  		btst	#7,(a5)
0006E874 6700                       		beq.s	loc_71EDC
0006E876 0815 0002                  		btst	#2,(a5)
0006E87A 6600                       		bne.s	loc_71EDC
0006E87C 103C 00B4                  		move.b	#-$4C,d0
0006E880 122D 000A                  		move.b	$A(a5),d1
0006E884 4EBA 0000                  		jsr	sub_72722(pc)
0006E888                            
0006E888                            loc_71EDC:
0006E888 DAC3                       		adda.w	d3,a5
0006E88A 51CC FFE4                  		dbf	d4,loc_71EC4
0006E88E                            
0006E88E 4BEE 0340                  		lea	$340(a6),a5
0006E892 0815 0007                  		btst	#7,(a5)
0006E896 6700                       		beq.s	loc_71EFE
0006E898 0815 0002                  		btst	#2,(a5)
0006E89C 6600                       		bne.s	loc_71EFE
0006E89E 103C 00B4                  		move.b	#-$4C,d0
0006E8A2 122D 000A                  		move.b	$A(a5),d1
0006E8A6 4EBA 0000                  		jsr	sub_72722(pc)
0006E8AA                            
0006E8AA                            loc_71EFE:
0006E8AA 6000 FD44                  		bra.w	loc_71C44
0006E8AE                            
0006E8AE                            ; ---------------------------------------------------------------------------
0006E8AE                            ; Subroutine to	play a sound or	music track
0006E8AE                            ; ---------------------------------------------------------------------------
0006E8AE                            
0006E8AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E8AE                            
0006E8AE                            
0006E8AE                            Sound_Play:				; XREF: sub_71B4C
0006E8AE 2079 0006 E30C             		movea.l	(Go_SoundTypes).l,a0
0006E8B4 43EE 000A                  		lea	$A(a6),a1	; load music track number
0006E8B8 1616                       		move.b	0(a6),d3
0006E8BA 7802                       		moveq	#2,d4
0006E8BC                            
0006E8BC                            loc_71F12:
0006E8BC 1011                       		move.b	(a1),d0		; move track number to d0
0006E8BE 1200                       		move.b	d0,d1
0006E8C0 4219                       		clr.b	(a1)+
0006E8C2 0400 0081                  		subi.b	#$81,d0
0006E8C6 6500                       		bcs.s	loc_71F3E
0006E8C8 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006E8CE 6700                       		beq.s	loc_71F2C
0006E8D0 1D41 000A                  		move.b	d1,$A(a6)
0006E8D4 6000                       		bra.s	loc_71F3E
0006E8D6                            ; ===========================================================================
0006E8D6                            
0006E8D6                            loc_71F2C:
0006E8D6 0240 007F                  		andi.w	#$7F,d0
0006E8DA 1430 0000                  		move.b	(a0,d0.w),d2
0006E8DE B403                       		cmp.b	d3,d2
0006E8E0 6500                       		bcs.s	loc_71F3E
0006E8E2 1602                       		move.b	d2,d3
0006E8E4 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0006E8E8                            
0006E8E8                            loc_71F3E:
0006E8E8 51CC FFD2                  		dbf	d4,loc_71F12
0006E8EC                            
0006E8EC 4A03                       		tst.b	d3
0006E8EE 6B00                       		bmi.s	locret_71F4A
0006E8F0 1C83                       		move.b	d3,0(a6)
0006E8F2                            
0006E8F2                            locret_71F4A:
0006E8F2 4E75                       		rts	
0006E8F4                            ; End of function Sound_Play
0006E8F4                            
0006E8F4                            
0006E8F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E8F4                            
0006E8F4                            
0006E8F4                            Sound_ChkValue:				; XREF: sub_71B4C
0006E8F4 7E00                       		moveq	#0,d7
0006E8F6 1E2E 0009                  		move.b	9(a6),d7
0006E8FA 6700 0000                  		beq.w	Sound_E4
0006E8FE 6A00                       		bpl.s	locret_71F8C
0006E900 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0006E906 0C07 009F                  		cmpi.b	#$9F,d7
0006E90A 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0006E90E 0C07 00A0                  		cmpi.b	#$A0,d7
0006E912 6500 0000                  		bcs.w	locret_71F8C
0006E916 0C07 00CF                  		cmpi.b	#$CF,d7
0006E91A 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0006E91E 0C07 00D0                  		cmpi.b	#$D0,d7
0006E922 6500 0000                  		bcs.w	locret_71F8C
0006E926 0C07 00E0                  		cmpi.b	#$E0,d7
0006E92A 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0006E92E 0C07 00E4                  		cmpi.b	#$E4,d7
0006E932 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
0006E934                            
0006E934                            locret_71F8C:
0006E934 4E75                       		rts	
0006E936                            ; ===========================================================================
0006E936                            
0006E936                            Sound_E0toE4:				; XREF: Sound_ChkValue
0006E936 0407 00E0                  		subi.b	#$E0,d7
0006E93A E54F                       		lsl.w	#2,d7
0006E93C 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0006E940                            ; ===========================================================================
0006E940                            
0006E940                            Sound_ExIndex:
0006E940 6000 0000                  		bra.w	Sound_E0
0006E944                            ; ===========================================================================
0006E944 6000 0000                  		bra.w	Sound_E1
0006E948                            ; ===========================================================================
0006E948 6000 0000                  		bra.w	Sound_E2
0006E94C                            ; ===========================================================================
0006E94C 6000 0000                  		bra.w	Sound_E3
0006E950                            ; ===========================================================================
0006E950 6000 0000                  		bra.w	Sound_E4
0006E954                            ; ===========================================================================
0006E954                            ; ---------------------------------------------------------------------------
0006E954                            ; Play "Say-gaa" PCM sound
0006E954                            ; ---------------------------------------------------------------------------
0006E954                            
0006E954                            Sound_E1:				  
0006E954 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0006E95A 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0006E960 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0006E968                            PlayPCM_Loop:	  
0006E968 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0006E96E 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0006E972 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0006E976 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0006E978 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0006E97A 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0006E97E 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0006E984 4EB8 11F4                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0006E988 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0006E98E 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0006E990 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0006E992                            return_PlayPCM: 
0006E992 584F                       		addq.w	#4,sp 
0006E994 4E75                       		rts
0006E996                            ; ===========================================================================
0006E996                            ; ---------------------------------------------------------------------------
0006E996                            ; Play music track $81-$9F
0006E996                            ; ---------------------------------------------------------------------------
0006E996                            
0006E996                            Sound_81to9F:				; XREF: Sound_ChkValue
0006E996 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0006E99A 6600                       		bne.s	loc_72024	; if not, branch
0006E99C 4A2E 0027                  		tst.b	$27(a6)
0006E9A0 6600 0000                  		bne.w	loc_721B6
0006E9A4 4BEE 0040                  		lea	$40(a6),a5
0006E9A8 7009                       		moveq	#9,d0
0006E9AA                            
0006E9AA                            loc_71FE6:
0006E9AA 0895 0002                  		bclr	#2,(a5)
0006E9AE DAFC 0030                  		adda.w	#$30,a5
0006E9B2 51C8 FFF6                  		dbf	d0,loc_71FE6
0006E9B6                            
0006E9B6 4BEE 0220                  		lea	$220(a6),a5
0006E9BA 7005                       		moveq	#5,d0
0006E9BC                            
0006E9BC                            loc_71FF8:
0006E9BC 0895 0007                  		bclr	#7,(a5)
0006E9C0 DAFC 0030                  		adda.w	#$30,a5
0006E9C4 51C8 FFF6                  		dbf	d0,loc_71FF8
0006E9C8 4216                       		clr.b	0(a6)
0006E9CA 204E                       		movea.l	a6,a0
0006E9CC 43EE 03A0                  		lea	$3A0(a6),a1
0006E9D0 303C 0087                  		move.w	#$87,d0
0006E9D4                            
0006E9D4                            loc_72012:
0006E9D4 22D8                       		move.l	(a0)+,(a1)+
0006E9D6 51C8 FFFC                  		dbf	d0,loc_72012
0006E9DA                            
0006E9DA 1D7C 0080 0027             		move.b	#$80,$27(a6)
0006E9E0 4216                       		clr.b	0(a6)
0006E9E2 6000                       		bra.s	loc_7202C
0006E9E4                            ; ===========================================================================
0006E9E4                            
0006E9E4                            loc_72024:
0006E9E4 422E 0027                  		clr.b	$27(a6)
0006E9E8 422E 0026                  		clr.b	$26(a6)
0006E9EC                            
0006E9EC                            loc_7202C:
0006E9EC 4EBA 0000                  		jsr	sub_725CA(pc)
0006E9F0 2879 0006 E31C             		movea.l	(off_719A0).l,a4
0006E9F6 0407 0081                  		subi.b	#$81,d7
0006E9FA 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0006EA00 2879 0006 E314             		movea.l	(Go_MusicIndex).l,a4
0006EA06 E54F                       		lsl.w	#2,d7
0006EA08 2874 7000                  		movea.l	(a4,d7.w),a4
0006EA0C 7000                       		moveq	#0,d0
0006EA0E 3014                       		move.w	(a4),d0
0006EA10 D08C                       		add.l	a4,d0
0006EA12 2D40 0018                  		move.l	d0,$18(a6)
0006EA16 102C 0005                  		move.b	5(a4),d0
0006EA1A 1D40 0028                  		move.b	d0,$28(a6)
0006EA1E 4A2E 002A                  		tst.b	$2A(a6)
0006EA22 6700                       		beq.s	loc_72068
0006EA24 102E 0029                  		move.b	$29(a6),d0
0006EA28                            
0006EA28                            loc_72068:
0006EA28 1D40 0002                  		move.b	d0,2(a6)
0006EA2C 1D40 0001                  		move.b	d0,1(a6)
0006EA30 7200                       		moveq	#0,d1
0006EA32 264C                       		movea.l	a4,a3
0006EA34 5C4C                       		addq.w	#6,a4
0006EA36 7E00                       		moveq	#0,d7
0006EA38 1E2B 0002                  		move.b	2(a3),d7
0006EA3C 6700 0000                  		beq.w	loc_72114
0006EA40 5307                       		subq.b	#1,d7
0006EA42 123C 00C0                  		move.b	#-$40,d1
0006EA46 182B 0004                  		move.b	4(a3),d4
0006EA4A 7C30                       		moveq	#$30,d6
0006EA4C 1A3C 0001                  		move.b	#1,d5
0006EA50 43EE 0040                  		lea	$40(a6),a1
0006EA54 45FA 0000                  		lea	byte_721BA(pc),a2
0006EA58                            
0006EA58                            loc_72098:
0006EA58 08D1 0007                  		bset	#7,(a1)
0006EA5C 135A 0001                  		move.b	(a2)+,1(a1)
0006EA60 1344 0002                  		move.b	d4,2(a1)
0006EA64 1346 000D                  		move.b	d6,$D(a1)
0006EA68 1341 000A                  		move.b	d1,$A(a1)
0006EA6C 1345 000E                  		move.b	d5,$E(a1)
0006EA70 7000                       		moveq	#0,d0
0006EA72 301C                       		move.w	(a4)+,d0
0006EA74 D08B                       		add.l	a3,d0
0006EA76 2340 0004                  		move.l	d0,4(a1)
0006EA7A 335C 0008                  		move.w	(a4)+,8(a1)
0006EA7E D2C6                       		adda.w	d6,a1
0006EA80 51CF FFD6                  		dbf	d7,loc_72098
0006EA84 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0006EA8A 6600                       		bne.s	loc_720D8
0006EA8C 702B                       		moveq	#$2B,d0
0006EA8E 7200                       		moveq	#0,d1
0006EA90 4EBA 0000                  		jsr	sub_7272E(pc)
0006EA94 6000 0000                  		bra.w	loc_72114
0006EA98                            ; ===========================================================================
0006EA98                            
0006EA98                            loc_720D8:
0006EA98 7028                       		moveq	#$28,d0
0006EA9A 7206                       		moveq	#6,d1
0006EA9C 4EBA 0000                  		jsr	sub_7272E(pc)
0006EAA0 103C 0042                  		move.b	#$42,d0
0006EAA4 727F                       		moveq	#$7F,d1
0006EAA6 4EBA 0000                  		jsr	sub_72764(pc)
0006EAAA 103C 004A                  		move.b	#$4A,d0
0006EAAE 727F                       		moveq	#$7F,d1
0006EAB0 4EBA 0000                  		jsr	sub_72764(pc)
0006EAB4 103C 0046                  		move.b	#$46,d0
0006EAB8 727F                       		moveq	#$7F,d1
0006EABA 4EBA 0000                  		jsr	sub_72764(pc)
0006EABE 103C 004E                  		move.b	#$4E,d0
0006EAC2 727F                       		moveq	#$7F,d1
0006EAC4 4EBA 0000                  		jsr	sub_72764(pc)
0006EAC8 103C 00B6                  		move.b	#-$4A,d0
0006EACC 123C 00C0                  		move.b	#-$40,d1
0006EAD0 4EBA 0000                  		jsr	sub_72764(pc)
0006EAD4                            
0006EAD4                            loc_72114:
0006EAD4 7E00                       		moveq	#0,d7
0006EAD6 1E2B 0003                  		move.b	3(a3),d7
0006EADA 6700                       		beq.s	loc_72154
0006EADC 5307                       		subq.b	#1,d7
0006EADE 43EE 0190                  		lea	$190(a6),a1
0006EAE2 45FA 0000                  		lea	byte_721C2(pc),a2
0006EAE6                            
0006EAE6                            loc_72126:
0006EAE6 08D1 0007                  		bset	#7,(a1)
0006EAEA 135A 0001                  		move.b	(a2)+,1(a1)
0006EAEE 1344 0002                  		move.b	d4,2(a1)
0006EAF2 1346 000D                  		move.b	d6,$D(a1)
0006EAF6 1345 000E                  		move.b	d5,$E(a1)
0006EAFA 7000                       		moveq	#0,d0
0006EAFC 301C                       		move.w	(a4)+,d0
0006EAFE D08B                       		add.l	a3,d0
0006EB00 2340 0004                  		move.l	d0,4(a1)
0006EB04 335C 0008                  		move.w	(a4)+,8(a1)
0006EB08 101C                       		move.b	(a4)+,d0
0006EB0A 135C 000B                  		move.b	(a4)+,$B(a1)
0006EB0E D2C6                       		adda.w	d6,a1
0006EB10 51CF FFD4                  		dbf	d7,loc_72126
0006EB14                            
0006EB14                            loc_72154:
0006EB14 43EE 0220                  		lea	$220(a6),a1
0006EB18 7E05                       		moveq	#5,d7
0006EB1A                            
0006EB1A                            loc_7215A:
0006EB1A 4A11                       		tst.b	(a1)
0006EB1C 6A00 0000                  		bpl.w	loc_7217C
0006EB20 7000                       		moveq	#0,d0
0006EB22 1029 0001                  		move.b	1(a1),d0
0006EB26 6B00                       		bmi.s	loc_7216E
0006EB28 5500                       		subq.b	#2,d0
0006EB2A E508                       		lsl.b	#2,d0
0006EB2C 6000                       		bra.s	loc_72170
0006EB2E                            ; ===========================================================================
0006EB2E                            
0006EB2E                            loc_7216E:
0006EB2E E608                       		lsr.b	#3,d0
0006EB30                            
0006EB30                            loc_72170:
0006EB30 41FA 0000                  		lea	dword_722CC(pc),a0
0006EB34 2070 0000                  		movea.l	(a0,d0.w),a0
0006EB38 08D0 0002                  		bset	#2,(a0)
0006EB3C                            
0006EB3C                            loc_7217C:
0006EB3C D2C6                       		adda.w	d6,a1
0006EB3E 51CF FFDA                  		dbf	d7,loc_7215A
0006EB42                            
0006EB42 4A6E 0340                  		tst.w	$340(a6)
0006EB46 6A00                       		bpl.s	loc_7218E
0006EB48 08EE 0002 0100             		bset	#2,$100(a6)
0006EB4E                            
0006EB4E                            loc_7218E:
0006EB4E 4A6E 0370                  		tst.w	$370(a6)
0006EB52 6A00                       		bpl.s	loc_7219A
0006EB54 08EE 0002 01F0             		bset	#2,$1F0(a6)
0006EB5A                            
0006EB5A                            loc_7219A:
0006EB5A 4BEE 0070                  		lea	$70(a6),a5
0006EB5E 7805                       		moveq	#5,d4
0006EB60                            
0006EB60                            loc_721A0:
0006EB60 4EBA 0000                  		jsr	sub_726FE(pc)
0006EB64 DAC6                       		adda.w	d6,a5
0006EB66 51CC FFF8                  		dbf	d4,loc_721A0
0006EB6A 7802                       		moveq	#2,d4
0006EB6C                            
0006EB6C                            loc_721AC:
0006EB6C 4EBA 0000                  		jsr	sub_729A0(pc)
0006EB70 DAC6                       		adda.w	d6,a5
0006EB72 51CC FFF8                  		dbf	d4,loc_721AC
0006EB76                            
0006EB76                            loc_721B6:
0006EB76 584F                       		addq.w	#4,sp
0006EB78 4E75                       		rts	
0006EB7A                            ; ===========================================================================
0006EB7A 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0006EB82                            		even
0006EB82 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0006EB86                            		even
0006EB86                            ; ===========================================================================
0006EB86                            ; ---------------------------------------------------------------------------
0006EB86                            ; Play normal sound effect
0006EB86                            ; ---------------------------------------------------------------------------
0006EB86                            
0006EB86                            Sound_A0toCF:				; XREF: Sound_ChkValue
0006EB86 4A2E 0027                  		tst.b	$27(a6)
0006EB8A 6600 0000                  		bne.w	loc_722C6
0006EB8E 4A2E 0004                  		tst.b	4(a6)
0006EB92 6600 0000                  		bne.w	loc_722C6
0006EB96 4A2E 0024                  		tst.b	$24(a6)
0006EB9A 6600 0000                  		bne.w	loc_722C6
0006EB9E 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0006EBA2 6600                       		bne.s	Sound_notB5	; if not, branch
0006EBA4 4A2E 002B                  		tst.b	$2B(a6)
0006EBA8 6600                       		bne.s	loc_721EE
0006EBAA 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0006EBAE                            
0006EBAE                            loc_721EE:
0006EBAE 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0006EBB4                            
0006EBB4                            Sound_notB5:
0006EBB4 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0006EBB8 6600                       		bne.s	Sound_notA7	; if not, branch
0006EBBA 4A2E 002C                  		tst.b	$2C(a6)
0006EBBE 6600 0000                  		bne.w	locret_722C4
0006EBC2 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0006EBC8                            
0006EBC8                            Sound_notA7:
0006EBC8 2079 0006 E318             		movea.l	(Go_SoundIndex).l,a0
0006EBCE 0407 00A0                  		subi.b	#$A0,d7
0006EBD2 E54F                       		lsl.w	#2,d7
0006EBD4 2670 7000                  		movea.l	(a0,d7.w),a3
0006EBD8 224B                       		movea.l	a3,a1
0006EBDA 7200                       		moveq	#0,d1
0006EBDC 3219                       		move.w	(a1)+,d1
0006EBDE D28B                       		add.l	a3,d1
0006EBE0 1A19                       		move.b	(a1)+,d5
0006EBE2 1E19                       		move.b	(a1)+,d7
0006EBE4 5307                       		subq.b	#1,d7
0006EBE6 7C30                       		moveq	#$30,d6
0006EBE8                            
0006EBE8                            loc_72228:
0006EBE8 7600                       		moveq	#0,d3
0006EBEA 1629 0001                  		move.b	1(a1),d3
0006EBEE 1803                       		move.b	d3,d4
0006EBF0 6B00                       		bmi.s	loc_72244
0006EBF2 5543                       		subq.w	#2,d3
0006EBF4 E54B                       		lsl.w	#2,d3
0006EBF6 4BFA 0000                  		lea	dword_722CC(pc),a5
0006EBFA 2A75 3000                  		movea.l	(a5,d3.w),a5
0006EBFE 08D5 0002                  		bset	#2,(a5)
0006EC02 6000                       		bra.s	loc_7226E
0006EC04                            ; ===========================================================================
0006EC04                            
0006EC04                            loc_72244:
0006EC04 E64B                       		lsr.w	#3,d3
0006EC06 4BFA 0000                  		lea	dword_722CC(pc),a5
0006EC0A 2A75 3000                  		movea.l	(a5,d3.w),a5
0006EC0E 08D5 0002                  		bset	#2,(a5)
0006EC12 0C04 00C0                  		cmpi.b	#$C0,d4
0006EC16 6600                       		bne.s	loc_7226E
0006EC18 1004                       		move.b	d4,d0
0006EC1A 0000 001F                  		ori.b	#$1F,d0
0006EC1E 13C0 00C0 0011             		move.b	d0,($C00011).l
0006EC24 0840 0005                  		bchg	#5,d0
0006EC28 13C0 00C0 0011             		move.b	d0,($C00011).l
0006EC2E                            
0006EC2E                            loc_7226E:
0006EC2E 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0006EC32 244D                       		movea.l	a5,a2
0006EC34 700B                       		moveq	#$B,d0
0006EC36                            
0006EC36                            loc_72276:
0006EC36 429A                       		clr.l	(a2)+
0006EC38 51C8 FFFC                  		dbf	d0,loc_72276
0006EC3C                            
0006EC3C 3A99                       		move.w	(a1)+,(a5)
0006EC3E 1B45 0002                  		move.b	d5,2(a5)
0006EC42 7000                       		moveq	#0,d0
0006EC44 3019                       		move.w	(a1)+,d0
0006EC46 D08B                       		add.l	a3,d0
0006EC48 2B40 0004                  		move.l	d0,4(a5)
0006EC4C 3B59 0008                  		move.w	(a1)+,8(a5)
0006EC50 1B7C 0001 000E             		move.b	#1,$E(a5)
0006EC56 1B46 000D                  		move.b	d6,$D(a5)
0006EC5A 4A04                       		tst.b	d4
0006EC5C 6B00                       		bmi.s	loc_722A8
0006EC5E 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0006EC64 2B41 0020                  		move.l	d1,$20(a5)
0006EC68                            
0006EC68                            loc_722A8:
0006EC68 51CF FF7E                  		dbf	d7,loc_72228
0006EC6C                            
0006EC6C 4A2E 0250                  		tst.b	$250(a6)
0006EC70 6A00                       		bpl.s	loc_722B8
0006EC72 08EE 0002 0340             		bset	#2,$340(a6)
0006EC78                            
0006EC78                            loc_722B8:
0006EC78 4A2E 0310                  		tst.b	$310(a6)
0006EC7C 6A00                       		bpl.s	locret_722C4
0006EC7E 08EE 0002 0370             		bset	#2,$370(a6)
0006EC84                            
0006EC84                            locret_722C4:
0006EC84 4E75                       		rts	
0006EC86                            ; ===========================================================================
0006EC86                            
0006EC86                            loc_722C6:
0006EC86 4216                       		clr.b	0(a6)
0006EC88 4E75                       		rts	
0006EC8A                            ; ===========================================================================
0006EC8A 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0006EC8E 0000 0000                  		dc.l 0
0006EC92 00FF F100                  		dc.l $FFF100
0006EC96 00FF F130                  		dc.l $FFF130
0006EC9A 00FF F190                  		dc.l $FFF190
0006EC9E 00FF F1C0                  		dc.l $FFF1C0
0006ECA2 00FF F1F0                  		dc.l $FFF1F0
0006ECA6 00FF F1F0                  		dc.l $FFF1F0
0006ECAA 00FF F220                  dword_722EC:	dc.l $FFF220
0006ECAE 0000 0000                  		dc.l 0
0006ECB2 00FF F250                  		dc.l $FFF250
0006ECB6 00FF F280                  		dc.l $FFF280
0006ECBA 00FF F2B0                  		dc.l $FFF2B0
0006ECBE 00FF F2E0                  		dc.l $FFF2E0
0006ECC2 00FF F310                  		dc.l $FFF310
0006ECC6 00FF F310                  		dc.l $FFF310
0006ECCA                            ; ===========================================================================
0006ECCA                            ; ---------------------------------------------------------------------------
0006ECCA                            ; Play GHZ waterfall sound
0006ECCA                            ; ---------------------------------------------------------------------------
0006ECCA                            
0006ECCA                            Sound_D0toDF:				; XREF: Sound_ChkValue
0006ECCA 4A2E 0027                  		tst.b	$27(a6)
0006ECCE 6600 0000                  		bne.w	locret_723C6
0006ECD2 4A2E 0004                  		tst.b	4(a6)
0006ECD6 6600 0000                  		bne.w	locret_723C6
0006ECDA 4A2E 0024                  		tst.b	$24(a6)
0006ECDE 6600 0000                  		bne.w	locret_723C6
0006ECE2 2079 0006 E310             		movea.l	(Go_SoundD0).l,a0
0006ECE8 0407 00D0                  		subi.b	#$D0,d7
0006ECEC E54F                       		lsl.w	#2,d7
0006ECEE 2670 7000                  		movea.l	(a0,d7.w),a3
0006ECF2 224B                       		movea.l	a3,a1
0006ECF4 7000                       		moveq	#0,d0
0006ECF6 3019                       		move.w	(a1)+,d0
0006ECF8 D08B                       		add.l	a3,d0
0006ECFA 2D40 0020                  		move.l	d0,$20(a6)
0006ECFE 1A19                       		move.b	(a1)+,d5
0006ED00 1E19                       		move.b	(a1)+,d7
0006ED02 5307                       		subq.b	#1,d7
0006ED04 7C30                       		moveq	#$30,d6
0006ED06                            
0006ED06                            loc_72348:
0006ED06 1829 0001                  		move.b	1(a1),d4
0006ED0A 6B00                       		bmi.s	loc_7235A
0006ED0C 08EE 0002 0100             		bset	#2,$100(a6)
0006ED12 4BEE 0340                  		lea	$340(a6),a5
0006ED16 6000                       		bra.s	loc_72364
0006ED18                            ; ===========================================================================
0006ED18                            
0006ED18                            loc_7235A:
0006ED18 08EE 0002 01F0             		bset	#2,$1F0(a6)
0006ED1E 4BEE 0370                  		lea	$370(a6),a5
0006ED22                            
0006ED22                            loc_72364:
0006ED22 244D                       		movea.l	a5,a2
0006ED24 700B                       		moveq	#$B,d0
0006ED26                            
0006ED26                            loc_72368:
0006ED26 429A                       		clr.l	(a2)+
0006ED28 51C8 FFFC                  		dbf	d0,loc_72368
0006ED2C                            
0006ED2C 3A99                       		move.w	(a1)+,(a5)
0006ED2E 1B45 0002                  		move.b	d5,2(a5)
0006ED32 7000                       		moveq	#0,d0
0006ED34 3019                       		move.w	(a1)+,d0
0006ED36 D08B                       		add.l	a3,d0
0006ED38 2B40 0004                  		move.l	d0,4(a5)
0006ED3C 3B59 0008                  		move.w	(a1)+,8(a5)
0006ED40 1B7C 0001 000E             		move.b	#1,$E(a5)
0006ED46 1B46 000D                  		move.b	d6,$D(a5)
0006ED4A 4A04                       		tst.b	d4
0006ED4C 6B00                       		bmi.s	loc_72396
0006ED4E 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0006ED54                            
0006ED54                            loc_72396:
0006ED54 51CF FFB0                  		dbf	d7,loc_72348
0006ED58                            
0006ED58 4A2E 0250                  		tst.b	$250(a6)
0006ED5C 6A00                       		bpl.s	loc_723A6
0006ED5E 08EE 0002 0340             		bset	#2,$340(a6)
0006ED64                            
0006ED64                            loc_723A6:
0006ED64 4A2E 0310                  		tst.b	$310(a6)
0006ED68 6A00                       		bpl.s	locret_723C6
0006ED6A 08EE 0002 0370             		bset	#2,$370(a6)
0006ED70 0004 001F                  		ori.b	#$1F,d4
0006ED74 13C4 00C0 0011             		move.b	d4,($C00011).l
0006ED7A 0844 0005                  		bchg	#5,d4
0006ED7E 13C4 00C0 0011             		move.b	d4,($C00011).l
0006ED84                            
0006ED84                            locret_723C6:
0006ED84 4E75                       		rts	
0006ED86                            ; End of function Sound_ChkValue
0006ED86                            
0006ED86                            ; ===========================================================================
0006ED86 00FF F100                  		dc.l $FFF100
0006ED8A 00FF F1F0                  		dc.l $FFF1F0
0006ED8E 00FF F250                  		dc.l $FFF250
0006ED92 00FF F310                  		dc.l $FFF310
0006ED96 00FF F340                  		dc.l $FFF340
0006ED9A 00FF F370                  		dc.l $FFF370
0006ED9E                            
0006ED9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006ED9E                            
0006ED9E                            
0006ED9E                            Snd_FadeOut1:				; XREF: Sound_E0
0006ED9E 4216                       		clr.b	0(a6)
0006EDA0 4BEE 0220                  		lea	$220(a6),a5
0006EDA4 7E05                       		moveq	#5,d7
0006EDA6                            
0006EDA6                            loc_723EA:
0006EDA6 4A15                       		tst.b	(a5)
0006EDA8 6A00 0000                  		bpl.w	loc_72472
0006EDAC 0895 0007                  		bclr	#7,(a5)
0006EDB0 7600                       		moveq	#0,d3
0006EDB2 162D 0001                  		move.b	1(a5),d3
0006EDB6 6B00                       		bmi.s	loc_7243C
0006EDB8 4EBA 0000                  		jsr	sub_726FE(pc)
0006EDBC 0C03 0004                  		cmpi.b	#4,d3
0006EDC0 6600                       		bne.s	loc_72416
0006EDC2 4A2E 0340                  		tst.b	$340(a6)
0006EDC6 6A00                       		bpl.s	loc_72416
0006EDC8 4BEE 0340                  		lea	$340(a6),a5
0006EDCC 226E 0020                  		movea.l	$20(a6),a1
0006EDD0 6000                       		bra.s	loc_72428
0006EDD2                            ; ===========================================================================
0006EDD2                            
0006EDD2                            loc_72416:
0006EDD2 5503                       		subq.b	#2,d3
0006EDD4 E50B                       		lsl.b	#2,d3
0006EDD6 41FA FEB2                  		lea	dword_722CC(pc),a0
0006EDDA 264D                       		movea.l	a5,a3
0006EDDC 2A70 3000                  		movea.l	(a0,d3.w),a5
0006EDE0 226E 0018                  		movea.l	$18(a6),a1
0006EDE4                            
0006EDE4                            loc_72428:
0006EDE4 0895 0002                  		bclr	#2,(a5)
0006EDE8 08D5 0001                  		bset	#1,(a5)
0006EDEC 102D 000B                  		move.b	$B(a5),d0
0006EDF0 4EBA 0000                  		jsr	sub_72C4E(pc)
0006EDF4 2A4B                       		movea.l	a3,a5
0006EDF6 6000                       		bra.s	loc_72472
0006EDF8                            ; ===========================================================================
0006EDF8                            
0006EDF8                            loc_7243C:
0006EDF8 4EBA 0000                  		jsr	sub_729A0(pc)
0006EDFC 41EE 0370                  		lea	$370(a6),a0
0006EE00 0C03 00E0                  		cmpi.b	#$E0,d3
0006EE04 6700                       		beq.s	loc_7245A
0006EE06 0C03 00C0                  		cmpi.b	#$C0,d3
0006EE0A 6700                       		beq.s	loc_7245A
0006EE0C E60B                       		lsr.b	#3,d3
0006EE0E 41FA FE7A                  		lea	dword_722CC(pc),a0
0006EE12 2070 3000                  		movea.l	(a0,d3.w),a0
0006EE16                            
0006EE16                            loc_7245A:
0006EE16 0890 0002                  		bclr	#2,(a0)
0006EE1A 08D0 0001                  		bset	#1,(a0)
0006EE1E 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0006EE24 6600                       		bne.s	loc_72472
0006EE26 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0006EE2E                            
0006EE2E                            loc_72472:
0006EE2E DAFC 0030                  		adda.w	#$30,a5
0006EE32 51CF FF72                  		dbf	d7,loc_723EA
0006EE36                            
0006EE36 4E75                       		rts	
0006EE38                            ; End of function Snd_FadeOut1
0006EE38                            
0006EE38                            
0006EE38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EE38                            
0006EE38                            
0006EE38                            Snd_FadeOut2:				; XREF: Sound_E0
0006EE38 4BEE 0340                  		lea	$340(a6),a5
0006EE3C 4A15                       		tst.b	(a5)
0006EE3E 6A00                       		bpl.s	loc_724AE
0006EE40 0895 0007                  		bclr	#7,(a5)
0006EE44 0815 0002                  		btst	#2,(a5)
0006EE48 6600                       		bne.s	loc_724AE
0006EE4A 4EBA 0000                  		jsr	loc_7270A(pc)
0006EE4E 4BEE 0100                  		lea	$100(a6),a5
0006EE52 0895 0002                  		bclr	#2,(a5)
0006EE56 08D5 0001                  		bset	#1,(a5)
0006EE5A 4A15                       		tst.b	(a5)
0006EE5C 6A00                       		bpl.s	loc_724AE
0006EE5E 226E 0018                  		movea.l	$18(a6),a1
0006EE62 102D 000B                  		move.b	$B(a5),d0
0006EE66 4EBA 0000                  		jsr	sub_72C4E(pc)
0006EE6A                            
0006EE6A                            loc_724AE:
0006EE6A 4BEE 0370                  		lea	$370(a6),a5
0006EE6E 4A15                       		tst.b	(a5)
0006EE70 6A00                       		bpl.s	locret_724E4
0006EE72 0895 0007                  		bclr	#7,(a5)
0006EE76 0815 0002                  		btst	#2,(a5)
0006EE7A 6600                       		bne.s	locret_724E4
0006EE7C 4EBA 0000                  		jsr	loc_729A6(pc)
0006EE80 4BEE 01F0                  		lea	$1F0(a6),a5
0006EE84 0895 0002                  		bclr	#2,(a5)
0006EE88 08D5 0001                  		bset	#1,(a5)
0006EE8C 4A15                       		tst.b	(a5)
0006EE8E 6A00                       		bpl.s	locret_724E4
0006EE90 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0006EE96 6600                       		bne.s	locret_724E4
0006EE98 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0006EEA0                            
0006EEA0                            locret_724E4:
0006EEA0 4E75                       		rts	
0006EEA2                            ; End of function Snd_FadeOut2
0006EEA2                            
0006EEA2                            ; ===========================================================================
0006EEA2                            ; ---------------------------------------------------------------------------
0006EEA2                            ; Fade out music
0006EEA2                            ; ---------------------------------------------------------------------------
0006EEA2                            
0006EEA2                            Sound_E0:				; XREF: Sound_ExIndex
0006EEA2 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0006EEA6 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0006EEAA 1D7C 0003 0006             		move.b	#3,6(a6)
0006EEB0 1D7C 0028 0004             		move.b	#$28,4(a6)
0006EEB6 422E 0040                  		clr.b	$40(a6)
0006EEBA 422E 002A                  		clr.b	$2A(a6)
0006EEBE 4E75                       		rts	
0006EEC0                            
0006EEC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EEC0                            
0006EEC0                            
0006EEC0                            sub_72504:				; XREF: sub_71B4C
0006EEC0 102E 0006                  		move.b	6(a6),d0
0006EEC4 6700                       		beq.s	loc_72510
0006EEC6 532E 0006                  		subq.b	#1,6(a6)
0006EECA 4E75                       		rts	
0006EECC                            ; ===========================================================================
0006EECC                            
0006EECC                            loc_72510:
0006EECC 532E 0004                  		subq.b	#1,4(a6)
0006EED0 6700 0000                  		beq.w	Sound_E4
0006EED4 1D7C 0003 0006             		move.b	#3,6(a6)
0006EEDA 4BEE 0070                  		lea	$70(a6),a5
0006EEDE 7E05                       		moveq	#5,d7
0006EEE0                            
0006EEE0                            loc_72524:
0006EEE0 4A15                       		tst.b	(a5)
0006EEE2 6A00                       		bpl.s	loc_72538
0006EEE4 522D 0009                  		addq.b	#1,9(a5)
0006EEE8 6A00                       		bpl.s	loc_72534
0006EEEA 0895 0007                  		bclr	#7,(a5)
0006EEEE 6000                       		bra.s	loc_72538
0006EEF0                            ; ===========================================================================
0006EEF0                            
0006EEF0                            loc_72534:
0006EEF0 4EBA 0000                  		jsr	sub_72CB4(pc)
0006EEF4                            
0006EEF4                            loc_72538:
0006EEF4 DAFC 0030                  		adda.w	#$30,a5
0006EEF8 51CF FFE6                  		dbf	d7,loc_72524
0006EEFC                            
0006EEFC 7E02                       		moveq	#2,d7
0006EEFE                            
0006EEFE                            loc_72542:
0006EEFE 4A15                       		tst.b	(a5)
0006EF00 6A00                       		bpl.s	loc_72560
0006EF02 522D 0009                  		addq.b	#1,9(a5)
0006EF06 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0006EF0C 6500                       		bcs.s	loc_72558
0006EF0E 0895 0007                  		bclr	#7,(a5)
0006EF12 6000                       		bra.s	loc_72560
0006EF14                            ; ===========================================================================
0006EF14                            
0006EF14                            loc_72558:
0006EF14 1C2D 0009                  		move.b	9(a5),d6
0006EF18 4EBA 0000                  		jsr	sub_7296A(pc)
0006EF1C                            
0006EF1C                            loc_72560:
0006EF1C DAFC 0030                  		adda.w	#$30,a5
0006EF20 51CF FFDC                  		dbf	d7,loc_72542
0006EF24                            
0006EF24 4E75                       		rts	
0006EF26                            ; End of function sub_72504
0006EF26                            
0006EF26                            
0006EF26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EF26                            
0006EF26                            
0006EF26                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0006EF26 7602                       		moveq	#2,d3
0006EF28 7028                       		moveq	#$28,d0
0006EF2A                            
0006EF2A                            loc_7256E:
0006EF2A 1203                       		move.b	d3,d1
0006EF2C 4EBA 0000                  		jsr	sub_7272E(pc)
0006EF30 5801                       		addq.b	#4,d1
0006EF32 4EBA 0000                  		jsr	sub_7272E(pc)
0006EF36 51CB FFF2                  		dbf	d3,loc_7256E
0006EF3A                            
0006EF3A 7040                       		moveq	#$40,d0
0006EF3C 727F                       		moveq	#$7F,d1
0006EF3E 7802                       		moveq	#2,d4
0006EF40                            
0006EF40                            loc_72584:
0006EF40 7603                       		moveq	#3,d3
0006EF42                            
0006EF42                            loc_72586:
0006EF42 4EBA 0000                  		jsr	sub_7272E(pc)
0006EF46 4EBA 0000                  		jsr	sub_72764(pc)
0006EF4A 5840                       		addq.w	#4,d0
0006EF4C 51CB FFF4                  		dbf	d3,loc_72586
0006EF50                            
0006EF50 0400 000F                  		subi.b	#$F,d0
0006EF54 51CC FFEA                  		dbf	d4,loc_72584
0006EF58                            
0006EF58 4E75                       		rts	
0006EF5A                            ; End of function sub_7256A
0006EF5A                            
0006EF5A                            ; ===========================================================================
0006EF5A                            ; ---------------------------------------------------------------------------
0006EF5A                            ; Stop music
0006EF5A                            ; ---------------------------------------------------------------------------
0006EF5A                            
0006EF5A                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0006EF5A 702B                       		moveq	#$2B,d0
0006EF5C 123C 0080                  		move.b	#$80,d1
0006EF60 4EBA 0000                  		jsr	sub_7272E(pc)
0006EF64 7027                       		moveq	#$27,d0
0006EF66 7200                       		moveq	#0,d1
0006EF68 4EBA 0000                  		jsr	sub_7272E(pc)
0006EF6C 204E                       		movea.l	a6,a0
0006EF6E 303C 00E3                  		move.w	#$E3,d0
0006EF72                            
0006EF72                            loc_725B6:
0006EF72 4298                       		clr.l	(a0)+
0006EF74 51C8 FFFC                  		dbf	d0,loc_725B6
0006EF78                            
0006EF78 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0006EF7E 4EBA FFA6                  		jsr	sub_7256A(pc)
0006EF82 6000 0000                  		bra.w	sub_729B6
0006EF86                            
0006EF86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EF86                            
0006EF86                            
0006EF86                            sub_725CA:				; XREF: Sound_ChkValue
0006EF86 204E                       		movea.l	a6,a0
0006EF88 1216                       		move.b	0(a6),d1
0006EF8A 142E 0027                  		move.b	$27(a6),d2
0006EF8E 162E 002A                  		move.b	$2A(a6),d3
0006EF92 182E 0026                  		move.b	$26(a6),d4
0006EF96 3A2E 000A                  		move.w	$A(a6),d5
0006EF9A 303C 0087                  		move.w	#$87,d0
0006EF9E                            
0006EF9E                            loc_725E4:
0006EF9E 4298                       		clr.l	(a0)+
0006EFA0 51C8 FFFC                  		dbf	d0,loc_725E4
0006EFA4                            
0006EFA4 1C81                       		move.b	d1,0(a6)
0006EFA6 1D42 0027                  		move.b	d2,$27(a6)
0006EFAA 1D43 002A                  		move.b	d3,$2A(a6)
0006EFAE 1D44 0026                  		move.b	d4,$26(a6)
0006EFB2 3D45 000A                  		move.w	d5,$A(a6)
0006EFB6 1D7C 0080 0009             		move.b	#$80,9(a6)
0006EFBC 4EBA FF68                  		jsr	sub_7256A(pc)
0006EFC0 6000 0000                  		bra.w	sub_729B6
0006EFC4                            ; End of function sub_725CA
0006EFC4                            
0006EFC4                            
0006EFC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EFC4                            
0006EFC4                            
0006EFC4                            sub_7260C:				; XREF: sub_71B4C
0006EFC4 1D6E 0002 0001             		move.b	2(a6),1(a6)
0006EFCA 41EE 004E                  		lea	$4E(a6),a0
0006EFCE 7030                       		moveq	#$30,d0
0006EFD0 7209                       		moveq	#9,d1
0006EFD2                            
0006EFD2                            loc_7261A:
0006EFD2 5210                       		addq.b	#1,(a0)
0006EFD4 D0C0                       		adda.w	d0,a0
0006EFD6 51C9 FFFA                  		dbf	d1,loc_7261A
0006EFDA                            
0006EFDA 4E75                       		rts	
0006EFDC                            ; End of function sub_7260C
0006EFDC                            
0006EFDC                            ; ===========================================================================
0006EFDC                            ; ---------------------------------------------------------------------------
0006EFDC                            ; Speed	up music
0006EFDC                            ; ---------------------------------------------------------------------------
0006EFDC                            
0006EFDC                            Sound_E2:				; XREF: Sound_ExIndex
0006EFDC 4A2E 0027                  		tst.b	$27(a6)
0006EFE0 6600                       		bne.s	loc_7263E
0006EFE2 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0006EFE8 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0006EFEE 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0006EFF4 4E75                       		rts	
0006EFF6                            ; ===========================================================================
0006EFF6                            
0006EFF6                            loc_7263E:
0006EFF6 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0006EFFC 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0006F002 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0006F008 4E75                       		rts	
0006F00A                            ; ===========================================================================
0006F00A                            ; ---------------------------------------------------------------------------
0006F00A                            ; Change music back to normal speed
0006F00A                            ; ---------------------------------------------------------------------------
0006F00A                            
0006F00A                            Sound_E3:				; XREF: Sound_ExIndex
0006F00A 4A2E 0027                  		tst.b	$27(a6)
0006F00E 6600                       		bne.s	loc_7266A
0006F010 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0006F016 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0006F01C 422E 002A                  		clr.b	$2A(a6)
0006F020 4E75                       		rts	
0006F022                            ; ===========================================================================
0006F022                            
0006F022                            loc_7266A:
0006F022 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0006F028 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0006F02E 422E 03CA                  		clr.b	$3CA(a6)
0006F032 4E75                       		rts	
0006F034                            
0006F034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F034                            
0006F034                            
0006F034                            sub_7267C:				; XREF: sub_71B4C
0006F034 4A2E 0025                  		tst.b	$25(a6)
0006F038 6700                       		beq.s	loc_72688
0006F03A 532E 0025                  		subq.b	#1,$25(a6)
0006F03E 4E75                       		rts	
0006F040                            ; ===========================================================================
0006F040                            
0006F040                            loc_72688:
0006F040 4A2E 0026                  		tst.b	$26(a6)
0006F044 6700                       		beq.s	loc_726D6
0006F046 532E 0026                  		subq.b	#1,$26(a6)
0006F04A 1D7C 0002 0025             		move.b	#2,$25(a6)
0006F050 4BEE 0070                  		lea	$70(a6),a5
0006F054 7E05                       		moveq	#5,d7
0006F056                            
0006F056                            loc_7269E:
0006F056 4A15                       		tst.b	(a5)
0006F058 6A00                       		bpl.s	loc_726AA
0006F05A 532D 0009                  		subq.b	#1,9(a5)
0006F05E 4EBA 0000                  		jsr	sub_72CB4(pc)
0006F062                            
0006F062                            loc_726AA:
0006F062 DAFC 0030                  		adda.w	#$30,a5
0006F066 51CF FFEE                  		dbf	d7,loc_7269E
0006F06A 7E02                       		moveq	#2,d7
0006F06C                            
0006F06C                            loc_726B4:
0006F06C 4A15                       		tst.b	(a5)
0006F06E 6A00                       		bpl.s	loc_726CC
0006F070 532D 0009                  		subq.b	#1,9(a5)
0006F074 1C2D 0009                  		move.b	9(a5),d6
0006F078 0C06 0010                  		cmpi.b	#$10,d6
0006F07C 6500                       		bcs.s	loc_726C8
0006F07E 7C0F                       		moveq	#$F,d6
0006F080                            
0006F080                            loc_726C8:
0006F080 4EBA 0000                  		jsr	sub_7296A(pc)
0006F084                            
0006F084                            loc_726CC:
0006F084 DAFC 0030                  		adda.w	#$30,a5
0006F088 51CF FFE2                  		dbf	d7,loc_726B4
0006F08C 4E75                       		rts	
0006F08E                            ; ===========================================================================
0006F08E                            
0006F08E                            loc_726D6:
0006F08E 08AE 0002 0040             		bclr	#2,$40(a6)
0006F094 422E 0024                  		clr.b	$24(a6)
0006F098 4E75                       		rts	
0006F09A                            ; End of function sub_7267C
0006F09A                            
0006F09A                            ; ===========================================================================
0006F09A                            
0006F09A                            loc_726E2:				; XREF: sub_71CCA
0006F09A 0815 0001                  		btst	#1,(a5)
0006F09E 6600                       		bne.s	locret_726FC
0006F0A0 0815 0002                  		btst	#2,(a5)
0006F0A4 6600                       		bne.s	locret_726FC
0006F0A6 7028                       		moveq	#$28,d0
0006F0A8 122D 0001                  		move.b	1(a5),d1
0006F0AC 0001 00F0                  		ori.b	#-$10,d1
0006F0B0 6000 0000                  		bra.w	sub_7272E
0006F0B4                            ; ===========================================================================
0006F0B4                            
0006F0B4                            locret_726FC:
0006F0B4 4E75                       		rts	
0006F0B6                            
0006F0B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F0B6                            
0006F0B6                            
0006F0B6                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0006F0B6 0815 0004                  		btst	#4,(a5)
0006F0BA 6600                       		bne.s	locret_72714
0006F0BC 0815 0002                  		btst	#2,(a5)
0006F0C0 6600                       		bne.s	locret_72714
0006F0C2                            
0006F0C2                            loc_7270A:				; XREF: Snd_FadeOut2
0006F0C2 7028                       		moveq	#$28,d0
0006F0C4 122D 0001                  		move.b	1(a5),d1
0006F0C8 6000 0000                  		bra.w	sub_7272E
0006F0CC                            ; ===========================================================================
0006F0CC                            
0006F0CC                            locret_72714:
0006F0CC 4E75                       		rts	
0006F0CE                            ; End of function sub_726FE
0006F0CE                            
0006F0CE                            ; ===========================================================================
0006F0CE                            
0006F0CE                            loc_72716:				; XREF: sub_72A5A
0006F0CE 0815 0002                  		btst	#2,(a5)
0006F0D2 6600                       		bne.s	locret_72720
0006F0D4 6000 0000                  		bra.w	sub_72722
0006F0D8                            ; ===========================================================================
0006F0D8                            
0006F0D8                            locret_72720:
0006F0D8 4E75                       		rts	
0006F0DA                            
0006F0DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F0DA                            
0006F0DA                            
0006F0DA                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0006F0DA 082D 0002 0001             		btst	#2,1(a5)
0006F0E0 6600                       		bne.s	loc_7275A
0006F0E2 D02D 0001                  		add.b	1(a5),d0
0006F0E6                            ; End of function sub_72722
0006F0E6                            
0006F0E6                            
0006F0E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F0E6                            
0006F0E6                            
0006F0E6                            sub_7272E:				; XREF: loc_71E6A
0006F0E6 1439 00A0 4000             		move.b	($A04000).l,d2
0006F0EC 0802 0007                  		btst	#7,d2
0006F0F0 66F4                       		bne.s	sub_7272E
0006F0F2 13C0 00A0 4000             		move.b	d0,($A04000).l
0006F0F8 4E71                       		nop	
0006F0FA 4E71                       		nop	
0006F0FC 4E71                       		nop	
0006F0FE                            
0006F0FE                            loc_72746:
0006F0FE 1439 00A0 4000             		move.b	($A04000).l,d2
0006F104 0802 0007                  		btst	#7,d2
0006F108 66F4                       		bne.s	loc_72746
0006F10A                            
0006F10A 13C1 00A0 4001             		move.b	d1,($A04001).l
0006F110 4E75                       		rts	
0006F112                            ; End of function sub_7272E
0006F112                            
0006F112                            ; ===========================================================================
0006F112                            
0006F112                            loc_7275A:				; XREF: sub_72722
0006F112 142D 0001                  		move.b	1(a5),d2
0006F116 0882 0002                  		bclr	#2,d2
0006F11A D002                       		add.b	d2,d0
0006F11C                            
0006F11C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F11C                            
0006F11C                            
0006F11C                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0006F11C 1439 00A0 4000             		move.b	($A04000).l,d2
0006F122 0802 0007                  		btst	#7,d2
0006F126 66F4                       		bne.s	sub_72764
0006F128 13C0 00A0 4002             		move.b	d0,($A04002).l
0006F12E 4E71                       		nop	
0006F130 4E71                       		nop	
0006F132 4E71                       		nop	
0006F134                            
0006F134                            loc_7277C:
0006F134 1439 00A0 4000             		move.b	($A04000).l,d2
0006F13A 0802 0007                  		btst	#7,d2
0006F13E 66F4                       		bne.s	loc_7277C
0006F140                            
0006F140 13C1 00A0 4003             		move.b	d1,($A04003).l
0006F146 4E75                       		rts	
0006F148                            ; End of function sub_72764
0006F148                            
0006F148                            ; ===========================================================================
0006F148 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0006F15A 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0006F16C 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0006F17C 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0006F18C 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0006F19C 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0006F1AC 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0006F1BC 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0006F1CC 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0006F1DC 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0006F1EC 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0006F1FC 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0006F208                            
0006F208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F208                            
0006F208                            
0006F208                            sub_72850:				; XREF: sub_71B4C
0006F208 532D 000E                  		subq.b	#1,$E(a5)
0006F20C 6600                       		bne.s	loc_72866
0006F20E 0895 0004                  		bclr	#4,(a5)
0006F212 4EBA 0000                  		jsr	sub_72878(pc)
0006F216 4EBA 0000                  		jsr	sub_728DC(pc)
0006F21A 6000 0000                  		bra.w	loc_7292E
0006F21E                            ; ===========================================================================
0006F21E                            
0006F21E                            loc_72866:
0006F21E 4EBA F52A                  		jsr	sub_71D9E(pc)
0006F222 4EBA 0000                  		jsr	sub_72926(pc)
0006F226 4EBA F54A                  		jsr	sub_71DC6(pc)
0006F22A 4EBA 0000                  		jsr	sub_728E2(pc)
0006F22E 4E75                       		rts	
0006F230                            ; End of function sub_72850
0006F230                            
0006F230                            
0006F230                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F230                            
0006F230                            
0006F230                            sub_72878:				; XREF: sub_72850
0006F230 0895 0001                  		bclr	#1,(a5)
0006F234 286D 0004                  		movea.l	4(a5),a4
0006F238                            
0006F238                            loc_72880:
0006F238 7A00                       		moveq	#0,d5
0006F23A 1A1C                       		move.b	(a4)+,d5
0006F23C 0C05 00E0                  		cmpi.b	#$E0,d5
0006F240 6500                       		bcs.s	loc_72890
0006F242 4EBA 0000                  		jsr	sub_72A5A(pc)
0006F246 60F0                       		bra.s	loc_72880
0006F248                            ; ===========================================================================
0006F248                            
0006F248                            loc_72890:
0006F248 4A05                       		tst.b	d5
0006F24A 6A00                       		bpl.s	loc_728A4
0006F24C 4EBA 0000                  		jsr	sub_728AC(pc)
0006F250 1A1C                       		move.b	(a4)+,d5
0006F252 4A05                       		tst.b	d5
0006F254 6A00                       		bpl.s	loc_728A4
0006F256 534C                       		subq.w	#1,a4
0006F258 6000 F4B2                  		bra.w	sub_71D60
0006F25C                            ; ===========================================================================
0006F25C                            
0006F25C                            loc_728A4:
0006F25C 4EBA F48E                  		jsr	sub_71D40(pc)
0006F260 6000 F4AA                  		bra.w	sub_71D60
0006F264                            ; End of function sub_72878
0006F264                            
0006F264                            
0006F264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F264                            
0006F264                            
0006F264                            sub_728AC:				; XREF: sub_72878
0006F264 0405 0081                  		subi.b	#$81,d5
0006F268 6500                       		bcs.s	loc_728CA
0006F26A DA2D 0008                  		add.b	8(a5),d5
0006F26E 0245 007F                  		andi.w	#$7F,d5
0006F272 E34D                       		lsl.w	#1,d5
0006F274 41FA 0000                  		lea	word_729CE(pc),a0
0006F278 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0006F27E 6000 F48C                  		bra.w	sub_71D60
0006F282                            ; ===========================================================================
0006F282                            
0006F282                            loc_728CA:
0006F282 08D5 0001                  		bset	#1,(a5)
0006F286 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0006F28C 4EBA F47E                  		jsr	sub_71D60(pc)
0006F290 6000 0000                  		bra.w	sub_729A0
0006F294                            ; End of function sub_728AC
0006F294                            
0006F294                            
0006F294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F294                            
0006F294                            
0006F294                            sub_728DC:				; XREF: sub_72850
0006F294 3C2D 0010                  		move.w	$10(a5),d6
0006F298 6B00                       		bmi.s	loc_72920
0006F29A                            ; End of function sub_728DC
0006F29A                            
0006F29A                            
0006F29A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F29A                            
0006F29A                            
0006F29A                            sub_728E2:				; XREF: sub_72850
0006F29A 102D 001E                  		move.b	$1E(a5),d0
0006F29E 4880                       		ext.w	d0
0006F2A0 DC40                       		add.w	d0,d6
0006F2A2 0815 0002                  		btst	#2,(a5)
0006F2A6 6600                       		bne.s	locret_7291E
0006F2A8 0815 0001                  		btst	#1,(a5)
0006F2AC 6600                       		bne.s	locret_7291E
0006F2AE 102D 0001                  		move.b	1(a5),d0
0006F2B2 0C00 00E0                  		cmpi.b	#$E0,d0
0006F2B6 6600                       		bne.s	loc_72904
0006F2B8 103C 00C0                  		move.b	#$C0,d0
0006F2BC                            
0006F2BC                            loc_72904:
0006F2BC 3206                       		move.w	d6,d1
0006F2BE 0201 000F                  		andi.b	#$F,d1
0006F2C2 8001                       		or.b	d1,d0
0006F2C4 E84E                       		lsr.w	#4,d6
0006F2C6 0206 003F                  		andi.b	#$3F,d6
0006F2CA 13C0 00C0 0011             		move.b	d0,($C00011).l
0006F2D0 13C6 00C0 0011             		move.b	d6,($C00011).l
0006F2D6                            
0006F2D6                            locret_7291E:
0006F2D6 4E75                       		rts	
0006F2D8                            ; End of function sub_728E2
0006F2D8                            
0006F2D8                            ; ===========================================================================
0006F2D8                            
0006F2D8                            loc_72920:				; XREF: sub_728DC
0006F2D8 08D5 0001                  		bset	#1,(a5)
0006F2DC 4E75                       		rts	
0006F2DE                            
0006F2DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F2DE                            
0006F2DE                            
0006F2DE                            sub_72926:				; XREF: sub_72850
0006F2DE 4A2D 000B                  		tst.b	$B(a5)
0006F2E2 6700 0000                  		beq.w	locret_7298A
0006F2E6                            
0006F2E6                            loc_7292E:				; XREF: sub_72850
0006F2E6 1C2D 0009                  		move.b	9(a5),d6
0006F2EA 7000                       		moveq	#0,d0
0006F2EC 102D 000B                  		move.b	$B(a5),d0
0006F2F0 6700                       		beq.s	sub_7296A
0006F2F2 2079 0006 E320             		movea.l	(Go_PSGIndex).l,a0
0006F2F8 5340                       		subq.w	#1,d0
0006F2FA E548                       		lsl.w	#2,d0
0006F2FC 2070 0000                  		movea.l	(a0,d0.w),a0
0006F300 102D 000C                  		move.b	$C(a5),d0
0006F304 1030 0000                  		move.b	(a0,d0.w),d0
0006F308 522D 000C                  		addq.b	#1,$C(a5)
0006F30C 0800 0007                  		btst	#7,d0
0006F310 6700                       		beq.s	loc_72960
0006F312 0C00 0080                  		cmpi.b	#$80,d0
0006F316 6700                       		beq.s	loc_7299A
0006F318                            
0006F318                            loc_72960:
0006F318 DC40                       		add.w	d0,d6
0006F31A 0C06 0010                  		cmpi.b	#$10,d6
0006F31E 6500                       		bcs.s	sub_7296A
0006F320 7C0F                       		moveq	#$F,d6
0006F322                            ; End of function sub_72926
0006F322                            
0006F322                            
0006F322                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F322                            
0006F322                            
0006F322                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0006F322 0815 0001                  		btst	#1,(a5)
0006F326 6600                       		bne.s	locret_7298A
0006F328 0815 0002                  		btst	#2,(a5)
0006F32C 6600                       		bne.s	locret_7298A
0006F32E 0815 0004                  		btst	#4,(a5)
0006F332 6600                       		bne.s	loc_7298C
0006F334                            
0006F334                            loc_7297C:
0006F334 8C2D 0001                  		or.b	1(a5),d6
0006F338 0606 0010                  		addi.b	#$10,d6
0006F33C 13C6 00C0 0011             		move.b	d6,($C00011).l
0006F342                            
0006F342                            locret_7298A:
0006F342 4E75                       		rts	
0006F344                            ; ===========================================================================
0006F344                            
0006F344                            loc_7298C:
0006F344 4A2D 0013                  		tst.b	$13(a5)
0006F348 67EA                       		beq.s	loc_7297C
0006F34A 4A2D 0012                  		tst.b	$12(a5)
0006F34E 66E4                       		bne.s	loc_7297C
0006F350 4E75                       		rts	
0006F352                            ; End of function sub_7296A
0006F352                            
0006F352                            ; ===========================================================================
0006F352                            
0006F352                            loc_7299A:				; XREF: sub_72926
0006F352 532D 000C                  		subq.b	#1,$C(a5)
0006F356 4E75                       		rts	
0006F358                            
0006F358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F358                            
0006F358                            
0006F358                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0006F358 0815 0002                  		btst	#2,(a5)
0006F35C 6600                       		bne.s	locret_729B4
0006F35E                            
0006F35E                            loc_729A6:				; XREF: Snd_FadeOut2
0006F35E 102D 0001                  		move.b	1(a5),d0
0006F362 0000 001F                  		ori.b	#$1F,d0
0006F366 13C0 00C0 0011             		move.b	d0,($C00011).l
0006F36C                            
0006F36C                            locret_729B4:
0006F36C 4E75                       		rts	
0006F36E                            ; End of function sub_729A0
0006F36E                            
0006F36E                            
0006F36E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F36E                            
0006F36E                            
0006F36E                            sub_729B6:				; XREF: loc_71E7C
0006F36E 41F9 00C0 0011             		lea	($C00011).l,a0
0006F374 10BC 009F                  		move.b	#$9F,(a0)
0006F378 10BC 00BF                  		move.b	#$BF,(a0)
0006F37C 10BC 00DF                  		move.b	#$DF,(a0)
0006F380 10BC 00FF                  		move.b	#$FF,(a0)
0006F384 4E75                       		rts	
0006F386                            ; End of function sub_729B6
0006F386                            
0006F386                            ; ===========================================================================
0006F386 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0006F398 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0006F3AA 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0006F3BE 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0006F3D2 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0006F3E6 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0006F3FA 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0006F40E 0011 0000                  		dc.w $11, 0
0006F412                            
0006F412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F412                            
0006F412                            
0006F412                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0006F412 0445 00E0                  		subi.w	#$E0,d5
0006F416 E54D                       		lsl.w	#2,d5
0006F418 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0006F41C                            ; End of function sub_72A5A
0006F41C                            
0006F41C                            ; ===========================================================================
0006F41C                            
0006F41C                            loc_72A64:
0006F41C 6000 0000                  		bra.w	loc_72ACC
0006F420                            ; ===========================================================================
0006F420 6000 0000                  		bra.w	loc_72AEC
0006F424                            ; ===========================================================================
0006F424 6000 0000                  		bra.w	loc_72AF2
0006F428                            ; ===========================================================================
0006F428 6000 0000                  		bra.w	loc_72AF8
0006F42C                            ; ===========================================================================
0006F42C 6000 0000                  		bra.w	loc_72B14
0006F430                            ; ===========================================================================
0006F430 6000 0000                  		bra.w	loc_72B9E
0006F434                            ; ===========================================================================
0006F434 6000 0000                  		bra.w	loc_72BA4
0006F438                            ; ===========================================================================
0006F438 6000 0000                  		bra.w	loc_72BAE
0006F43C                            ; ===========================================================================
0006F43C 6000 0000                  		bra.w	loc_72BB4
0006F440                            ; ===========================================================================
0006F440 6000 0000                  		bra.w	loc_72BBE
0006F444                            ; ===========================================================================
0006F444 6000 0000                  		bra.w	loc_72BC6
0006F448                            ; ===========================================================================
0006F448 6000 0000                  		bra.w	loc_72BD0
0006F44C                            ; ===========================================================================
0006F44C 6000 0000                  		bra.w	loc_72BE6
0006F450                            ; ===========================================================================
0006F450 6000 0000                  		bra.w	loc_72BEE
0006F454                            ; ===========================================================================
0006F454 6000 0000                  		bra.w	loc_72BF4
0006F458                            ; ===========================================================================
0006F458 6000 0000                  		bra.w	loc_72C26
0006F45C                            ; ===========================================================================
0006F45C 6000 0000                  		bra.w	loc_72D30
0006F460                            ; ===========================================================================
0006F460 6000 0000                  		bra.w	loc_72D52
0006F464                            ; ===========================================================================
0006F464 6000 0000                  		bra.w	loc_72D58
0006F468                            ; ===========================================================================
0006F468 6000 0000                  		bra.w	loc_72E06
0006F46C                            ; ===========================================================================
0006F46C 6000 0000                  		bra.w	loc_72E20
0006F470                            ; ===========================================================================
0006F470 6000 0000                  		bra.w	loc_72E26
0006F474                            ; ===========================================================================
0006F474 6000 0000                  		bra.w	loc_72E2C
0006F478                            ; ===========================================================================
0006F478 6000 0000                  		bra.w	loc_72E38
0006F47C                            ; ===========================================================================
0006F47C 6000 0000                  		bra.w	loc_72E52
0006F480                            ; ===========================================================================
0006F480 6000 0000                  		bra.w	loc_72E64
0006F484                            ; ===========================================================================
0006F484                            
0006F484                            loc_72ACC:				; XREF: loc_72A64
0006F484 121C                       		move.b	(a4)+,d1
0006F486 4A2D 0001                  		tst.b	1(a5)
0006F48A 6B00                       		bmi.s	locret_72AEA
0006F48C 102D 000A                  		move.b	$A(a5),d0
0006F490 0200 0037                  		andi.b	#$37,d0
0006F494 8200                       		or.b	d0,d1
0006F496 1B41 000A                  		move.b	d1,$A(a5)
0006F49A 103C 00B4                  		move.b	#$B4,d0
0006F49E 6000 FC2E                  		bra.w	loc_72716
0006F4A2                            ; ===========================================================================
0006F4A2                            
0006F4A2                            locret_72AEA:
0006F4A2 4E75                       		rts	
0006F4A4                            ; ===========================================================================
0006F4A4                            
0006F4A4                            loc_72AEC:				; XREF: loc_72A64
0006F4A4 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0006F4A8 4E75                       		rts	
0006F4AA                            ; ===========================================================================
0006F4AA                            
0006F4AA                            loc_72AF2:				; XREF: loc_72A64
0006F4AA 1D5C 0007                  		move.b	(a4)+,7(a6)
0006F4AE 4E75                       		rts	
0006F4B0                            ; ===========================================================================
0006F4B0                            
0006F4B0                            loc_72AF8:				; XREF: loc_72A64
0006F4B0 7000                       		moveq	#0,d0
0006F4B2 102D 000D                  		move.b	$D(a5),d0
0006F4B6 2875 0000                  		movea.l	(a5,d0.w),a4
0006F4BA 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0006F4C2 544C                       		addq.w	#2,a4
0006F4C4 5800                       		addq.b	#4,d0
0006F4C6 1B40 000D                  		move.b	d0,$D(a5)
0006F4CA 4E75                       		rts	
0006F4CC                            ; ===========================================================================
0006F4CC                            
0006F4CC                            loc_72B14:				; XREF: loc_72A64
0006F4CC 204E                       		movea.l	a6,a0
0006F4CE 43EE 03A0                  		lea	$3A0(a6),a1
0006F4D2 303C 0087                  		move.w	#$87,d0
0006F4D6                            
0006F4D6                            loc_72B1E:
0006F4D6 20D9                       		move.l	(a1)+,(a0)+
0006F4D8 51C8 FFFC                  		dbf	d0,loc_72B1E
0006F4DC                            
0006F4DC 08EE 0002 0040             		bset	#2,$40(a6)
0006F4E2 264D                       		movea.l	a5,a3
0006F4E4 1C3C 0028                  		move.b	#$28,d6
0006F4E8 9C2E 0026                  		sub.b	$26(a6),d6
0006F4EC 7E05                       		moveq	#5,d7
0006F4EE 4BEE 0070                  		lea	$70(a6),a5
0006F4F2                            
0006F4F2                            loc_72B3A:
0006F4F2 0815 0007                  		btst	#7,(a5)
0006F4F6 6700                       		beq.s	loc_72B5C
0006F4F8 08D5 0001                  		bset	#1,(a5)
0006F4FC DD2D 0009                  		add.b	d6,9(a5)
0006F500 0815 0002                  		btst	#2,(a5)
0006F504 6600                       		bne.s	loc_72B5C
0006F506 7000                       		moveq	#0,d0
0006F508 102D 000B                  		move.b	$B(a5),d0
0006F50C 226E 0018                  		movea.l	$18(a6),a1
0006F510 4EBA 0000                  		jsr	sub_72C4E(pc)
0006F514                            
0006F514                            loc_72B5C:
0006F514 DAFC 0030                  		adda.w	#$30,a5
0006F518 51CF FFD8                  		dbf	d7,loc_72B3A
0006F51C                            
0006F51C 7E02                       		moveq	#2,d7
0006F51E                            
0006F51E                            loc_72B66:
0006F51E 0815 0007                  		btst	#7,(a5)
0006F522 6700                       		beq.s	loc_72B78
0006F524 08D5 0001                  		bset	#1,(a5)
0006F528 4EBA FE2E                  		jsr	sub_729A0(pc)
0006F52C DD2D 0009                  		add.b	d6,9(a5)
0006F530                            
0006F530                            loc_72B78:
0006F530 DAFC 0030                  		adda.w	#$30,a5
0006F534 51CF FFE8                  		dbf	d7,loc_72B66
0006F538 2A4B                       		movea.l	a3,a5
0006F53A 1D7C 0080 0024             		move.b	#$80,$24(a6)
0006F540 1D7C 0028 0026             		move.b	#$28,$26(a6)
0006F546 422E 0027                  		clr.b	$27(a6)
0006F54A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0006F552 504F                       		addq.w	#8,sp
0006F554 4E75                       		rts	
0006F556                            ; ===========================================================================
0006F556                            
0006F556                            loc_72B9E:				; XREF: loc_72A64
0006F556 1B5C 0002                  		move.b	(a4)+,2(a5)
0006F55A 4E75                       		rts	
0006F55C                            ; ===========================================================================
0006F55C                            
0006F55C                            loc_72BA4:				; XREF: loc_72A64
0006F55C 101C                       		move.b	(a4)+,d0
0006F55E D12D 0009                  		add.b	d0,9(a5)
0006F562 6000 0000                  		bra.w	sub_72CB4
0006F566                            ; ===========================================================================
0006F566                            
0006F566                            loc_72BAE:				; XREF: loc_72A64
0006F566 08D5 0004                  		bset	#4,(a5)
0006F56A 4E75                       		rts	
0006F56C                            ; ===========================================================================
0006F56C                            
0006F56C                            loc_72BB4:				; XREF: loc_72A64
0006F56C 1B54 0012                  		move.b	(a4),$12(a5)
0006F570 1B5C 0013                  		move.b	(a4)+,$13(a5)
0006F574 4E75                       		rts	
0006F576                            ; ===========================================================================
0006F576                            
0006F576                            loc_72BBE:				; XREF: loc_72A64
0006F576 101C                       		move.b	(a4)+,d0
0006F578 D12D 0008                  		add.b	d0,8(a5)
0006F57C 4E75                       		rts	
0006F57E                            ; ===========================================================================
0006F57E                            
0006F57E                            loc_72BC6:				; XREF: loc_72A64
0006F57E 1D54 0002                  		move.b	(a4),2(a6)
0006F582 1D5C 0001                  		move.b	(a4)+,1(a6)
0006F586 4E75                       		rts	
0006F588                            ; ===========================================================================
0006F588                            
0006F588                            loc_72BD0:				; XREF: loc_72A64
0006F588 41EE 0040                  		lea	$40(a6),a0
0006F58C 101C                       		move.b	(a4)+,d0
0006F58E 7230                       		moveq	#$30,d1
0006F590 7409                       		moveq	#9,d2
0006F592                            
0006F592                            loc_72BDA:
0006F592 1140 0002                  		move.b	d0,2(a0)
0006F596 D0C1                       		adda.w	d1,a0
0006F598 51CA FFF8                  		dbf	d2,loc_72BDA
0006F59C                            
0006F59C 4E75                       		rts	
0006F59E                            ; ===========================================================================
0006F59E                            
0006F59E                            loc_72BE6:				; XREF: loc_72A64
0006F59E 101C                       		move.b	(a4)+,d0
0006F5A0 D12D 0009                  		add.b	d0,9(a5)
0006F5A4 4E75                       		rts	
0006F5A6                            ; ===========================================================================
0006F5A6                            
0006F5A6                            loc_72BEE:				; XREF: loc_72A64
0006F5A6 422E 002C                  		clr.b	$2C(a6)
0006F5AA 4E75                       		rts	
0006F5AC                            ; ===========================================================================
0006F5AC                            
0006F5AC                            loc_72BF4:				; XREF: loc_72A64
0006F5AC 0895 0007                  		bclr	#7,(a5)
0006F5B0 0895 0004                  		bclr	#4,(a5)
0006F5B4 4EBA FB00                  		jsr	sub_726FE(pc)
0006F5B8 4A2E 0250                  		tst.b	$250(a6)
0006F5BC 6B00                       		bmi.s	loc_72C22
0006F5BE 264D                       		movea.l	a5,a3
0006F5C0 4BEE 0100                  		lea	$100(a6),a5
0006F5C4 226E 0018                  		movea.l	$18(a6),a1
0006F5C8 0895 0002                  		bclr	#2,(a5)
0006F5CC 08D5 0001                  		bset	#1,(a5)
0006F5D0 102D 000B                  		move.b	$B(a5),d0
0006F5D4 4EBA 0000                  		jsr	sub_72C4E(pc)
0006F5D8 2A4B                       		movea.l	a3,a5
0006F5DA                            
0006F5DA                            loc_72C22:
0006F5DA 504F                       		addq.w	#8,sp
0006F5DC 4E75                       		rts	
0006F5DE                            ; ===========================================================================
0006F5DE                            
0006F5DE                            loc_72C26:				; XREF: loc_72A64
0006F5DE 7000                       		moveq	#0,d0
0006F5E0 101C                       		move.b	(a4)+,d0
0006F5E2 1B40 000B                  		move.b	d0,$B(a5)
0006F5E6 0815 0002                  		btst	#2,(a5)
0006F5EA 6600 0000                  		bne.w	locret_72CAA
0006F5EE 226E 0018                  		movea.l	$18(a6),a1
0006F5F2 4A2E 000E                  		tst.b	$E(a6)
0006F5F6 6700                       		beq.s	sub_72C4E
0006F5F8 226D 0020                  		movea.l	$20(a5),a1
0006F5FC 4A2E 000E                  		tst.b	$E(a6)
0006F600 6B00                       		bmi.s	sub_72C4E
0006F602 226E 0020                  		movea.l	$20(a6),a1
0006F606                            
0006F606                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F606                            
0006F606                            
0006F606                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0006F606 5340                       		subq.w	#1,d0
0006F608 6B00                       		bmi.s	loc_72C5C
0006F60A 323C 0019                  		move.w	#$19,d1
0006F60E                            
0006F60E                            loc_72C56:
0006F60E D2C1                       		adda.w	d1,a1
0006F610 51C8 FFFC                  		dbf	d0,loc_72C56
0006F614                            
0006F614                            loc_72C5C:
0006F614 1219                       		move.b	(a1)+,d1
0006F616 1B41 001F                  		move.b	d1,$1F(a5)
0006F61A 1801                       		move.b	d1,d4
0006F61C 103C 00B0                  		move.b	#$B0,d0
0006F620 4EBA FAB8                  		jsr	sub_72722(pc)
0006F624 45FA 0000                  		lea	byte_72D18(pc),a2
0006F628 7613                       		moveq	#$13,d3
0006F62A                            
0006F62A                            loc_72C72:
0006F62A 101A                       		move.b	(a2)+,d0
0006F62C 1219                       		move.b	(a1)+,d1
0006F62E 4EBA FAAA                  		jsr	sub_72722(pc)
0006F632 51CB FFF6                  		dbf	d3,loc_72C72
0006F636 7A03                       		moveq	#3,d5
0006F638 0244 0007                  		andi.w	#7,d4
0006F63C 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0006F640 162D 0009                  		move.b	9(a5),d3
0006F644                            
0006F644                            loc_72C8C:
0006F644 101A                       		move.b	(a2)+,d0
0006F646 1219                       		move.b	(a1)+,d1
0006F648 E20C                       		lsr.b	#1,d4
0006F64A 6400                       		bcc.s	loc_72C96
0006F64C D203                       		add.b	d3,d1
0006F64E                            
0006F64E                            loc_72C96:
0006F64E 4EBA FA8A                  		jsr	sub_72722(pc)
0006F652 51CD FFF0                  		dbf	d5,loc_72C8C
0006F656 103C 00B4                  		move.b	#$B4,d0
0006F65A 122D 000A                  		move.b	$A(a5),d1
0006F65E 4EBA FA7A                  		jsr	sub_72722(pc)
0006F662                            
0006F662                            locret_72CAA:
0006F662 4E75                       		rts	
0006F664                            ; End of function sub_72C4E
0006F664                            
0006F664                            ; ===========================================================================
0006F664 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0006F66C                            
0006F66C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F66C                            
0006F66C                            
0006F66C                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0006F66C 0815 0002                  		btst	#2,(a5)
0006F670 6600                       		bne.s	locret_72D16
0006F672 7000                       		moveq	#0,d0
0006F674 102D 000B                  		move.b	$B(a5),d0
0006F678 226E 0018                  		movea.l	$18(a6),a1
0006F67C 4A2E 000E                  		tst.b	$E(a6)
0006F680 6700                       		beq.s	loc_72CD8
0006F682 226E 0020                  		movea.l	$20(a6),a1
0006F686 4A2E 000E                  		tst.b	$E(a6)
0006F68A 6B00                       		bmi.s	loc_72CD8
0006F68C 226E 0020                  		movea.l	$20(a6),a1
0006F690                            
0006F690                            loc_72CD8:
0006F690 5340                       		subq.w	#1,d0
0006F692 6B00                       		bmi.s	loc_72CE6
0006F694 323C 0019                  		move.w	#$19,d1
0006F698                            
0006F698                            loc_72CE0:
0006F698 D2C1                       		adda.w	d1,a1
0006F69A 51C8 FFFC                  		dbf	d0,loc_72CE0
0006F69E                            
0006F69E                            loc_72CE6:
0006F69E D2FC 0015                  		adda.w	#$15,a1
0006F6A2 45FA 0000                  		lea	byte_72D2C(pc),a2
0006F6A6 102D 001F                  		move.b	$1F(a5),d0
0006F6AA 0240 0007                  		andi.w	#7,d0
0006F6AE 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0006F6B2 162D 0009                  		move.b	9(a5),d3
0006F6B6 6B00                       		bmi.s	locret_72D16
0006F6B8 7A03                       		moveq	#3,d5
0006F6BA                            
0006F6BA                            loc_72D02:
0006F6BA 101A                       		move.b	(a2)+,d0
0006F6BC 1219                       		move.b	(a1)+,d1
0006F6BE E20C                       		lsr.b	#1,d4
0006F6C0 6400                       		bcc.s	loc_72D12
0006F6C2 D203                       		add.b	d3,d1
0006F6C4 6500                       		bcs.s	loc_72D12
0006F6C6 4EBA FA12                  		jsr	sub_72722(pc)
0006F6CA                            
0006F6CA                            loc_72D12:
0006F6CA 51CD FFEE                  		dbf	d5,loc_72D02
0006F6CE                            
0006F6CE                            locret_72D16:
0006F6CE 4E75                       		rts	
0006F6D0                            ; End of function sub_72CB4
0006F6D0                            
0006F6D0                            ; ===========================================================================
0006F6D0 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0006F6DA 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0006F6E4 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0006F6E8                            ; ===========================================================================
0006F6E8                            
0006F6E8                            loc_72D30:				; XREF: loc_72A64
0006F6E8 08D5 0003                  		bset	#3,(a5)
0006F6EC 2B4C 0014                  		move.l	a4,$14(a5)
0006F6F0 1B5C 0018                  		move.b	(a4)+,$18(a5)
0006F6F4 1B5C 0019                  		move.b	(a4)+,$19(a5)
0006F6F8 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0006F6FC 101C                       		move.b	(a4)+,d0
0006F6FE E208                       		lsr.b	#1,d0
0006F700 1B40 001B                  		move.b	d0,$1B(a5)
0006F704 426D 001C                  		clr.w	$1C(a5)
0006F708 4E75                       		rts	
0006F70A                            ; ===========================================================================
0006F70A                            
0006F70A                            loc_72D52:				; XREF: loc_72A64
0006F70A 08D5 0003                  		bset	#3,(a5)
0006F70E 4E75                       		rts	
0006F710                            ; ===========================================================================
0006F710                            
0006F710                            loc_72D58:				; XREF: loc_72A64
0006F710 0895 0007                  		bclr	#7,(a5)
0006F714 0895 0004                  		bclr	#4,(a5)
0006F718 4A2D 0001                  		tst.b	1(a5)
0006F71C 6B00                       		bmi.s	loc_72D74
0006F71E 4A2E 0008                  		tst.b	8(a6)
0006F722 6B00 0000                  		bmi.w	loc_72E02
0006F726 4EBA F98E                  		jsr	sub_726FE(pc)
0006F72A 6000                       		bra.s	loc_72D78
0006F72C                            ; ===========================================================================
0006F72C                            
0006F72C                            loc_72D74:
0006F72C 4EBA FC2A                  		jsr	sub_729A0(pc)
0006F730                            
0006F730                            loc_72D78:
0006F730 4A2E 000E                  		tst.b	$E(a6)
0006F734 6A00 0000                  		bpl.w	loc_72E02
0006F738 4216                       		clr.b	0(a6)
0006F73A 7000                       		moveq	#0,d0
0006F73C 102D 0001                  		move.b	1(a5),d0
0006F740 6B00                       		bmi.s	loc_72DCC
0006F742 41FA F546                  		lea	dword_722CC(pc),a0
0006F746 264D                       		movea.l	a5,a3
0006F748 0C00 0004                  		cmpi.b	#4,d0
0006F74C 6600                       		bne.s	loc_72DA8
0006F74E 4A2E 0340                  		tst.b	$340(a6)
0006F752 6A00                       		bpl.s	loc_72DA8
0006F754 4BEE 0340                  		lea	$340(a6),a5
0006F758 226E 0020                  		movea.l	$20(a6),a1
0006F75C 6000                       		bra.s	loc_72DB8
0006F75E                            ; ===========================================================================
0006F75E                            
0006F75E                            loc_72DA8:
0006F75E 5500                       		subq.b	#2,d0
0006F760 E508                       		lsl.b	#2,d0
0006F762 2A70 0000                  		movea.l	(a0,d0.w),a5
0006F766 4A15                       		tst.b	(a5)
0006F768 6A00                       		bpl.s	loc_72DC8
0006F76A 226E 0018                  		movea.l	$18(a6),a1
0006F76E                            
0006F76E                            loc_72DB8:
0006F76E 0895 0002                  		bclr	#2,(a5)
0006F772 08D5 0001                  		bset	#1,(a5)
0006F776 102D 000B                  		move.b	$B(a5),d0
0006F77A 4EBA FE8A                  		jsr	sub_72C4E(pc)
0006F77E                            
0006F77E                            loc_72DC8:
0006F77E 2A4B                       		movea.l	a3,a5
0006F780 6000                       		bra.s	loc_72E02
0006F782                            ; ===========================================================================
0006F782                            
0006F782                            loc_72DCC:
0006F782 41EE 0370                  		lea	$370(a6),a0
0006F786 4A10                       		tst.b	(a0)
0006F788 6A00                       		bpl.s	loc_72DE0
0006F78A 0C00 00E0                  		cmpi.b	#$E0,d0
0006F78E 6700                       		beq.s	loc_72DEA
0006F790 0C00 00C0                  		cmpi.b	#$C0,d0
0006F794 6700                       		beq.s	loc_72DEA
0006F796                            
0006F796                            loc_72DE0:
0006F796 41FA F4F2                  		lea	dword_722CC(pc),a0
0006F79A E608                       		lsr.b	#3,d0
0006F79C 2070 0000                  		movea.l	(a0,d0.w),a0
0006F7A0                            
0006F7A0                            loc_72DEA:
0006F7A0 0890 0002                  		bclr	#2,(a0)
0006F7A4 08D0 0001                  		bset	#1,(a0)
0006F7A8 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0006F7AE 6600                       		bne.s	loc_72E02
0006F7B0 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0006F7B8                            
0006F7B8                            loc_72E02:
0006F7B8 504F                       		addq.w	#8,sp
0006F7BA 4E75                       		rts	
0006F7BC                            ; ===========================================================================
0006F7BC                            
0006F7BC                            loc_72E06:				; XREF: loc_72A64
0006F7BC 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0006F7C2 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0006F7C6 0815 0002                  		btst	#2,(a5)
0006F7CA 6600                       		bne.s	locret_72E1E
0006F7CC 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0006F7D4                            
0006F7D4                            locret_72E1E:
0006F7D4 4E75                       		rts	
0006F7D6                            ; ===========================================================================
0006F7D6                            
0006F7D6                            loc_72E20:				; XREF: loc_72A64
0006F7D6 0895 0003                  		bclr	#3,(a5)
0006F7DA 4E75                       		rts	
0006F7DC                            ; ===========================================================================
0006F7DC                            
0006F7DC                            loc_72E26:				; XREF: loc_72A64
0006F7DC 1B5C 000B                  		move.b	(a4)+,$B(a5)
0006F7E0 4E75                       		rts	
0006F7E2                            ; ===========================================================================
0006F7E2                            
0006F7E2                            loc_72E2C:				; XREF: loc_72A64
0006F7E2 101C                       		move.b	(a4)+,d0
0006F7E4 E148                       		lsl.w	#8,d0
0006F7E6 101C                       		move.b	(a4)+,d0
0006F7E8 D8C0                       		adda.w	d0,a4
0006F7EA 534C                       		subq.w	#1,a4
0006F7EC 4E75                       		rts	
0006F7EE                            ; ===========================================================================
0006F7EE                            
0006F7EE                            loc_72E38:				; XREF: loc_72A64
0006F7EE 7000                       		moveq	#0,d0
0006F7F0 101C                       		move.b	(a4)+,d0
0006F7F2 121C                       		move.b	(a4)+,d1
0006F7F4 4A35 0024                  		tst.b	$24(a5,d0.w)
0006F7F8 6600                       		bne.s	loc_72E48
0006F7FA 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0006F7FE                            
0006F7FE                            loc_72E48:
0006F7FE 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0006F802 66DE                       		bne.s	loc_72E2C
0006F804 544C                       		addq.w	#2,a4
0006F806 4E75                       		rts	
0006F808                            ; ===========================================================================
0006F808                            
0006F808                            loc_72E52:				; XREF: loc_72A64
0006F808 7000                       		moveq	#0,d0
0006F80A 102D 000D                  		move.b	$D(a5),d0
0006F80E 5900                       		subq.b	#4,d0
0006F810 2B8C 0000                  		move.l	a4,(a5,d0.w)
0006F814 1B40 000D                  		move.b	d0,$D(a5)
0006F818 60C8                       		bra.s	loc_72E2C
0006F81A                            ; ===========================================================================
0006F81A                            
0006F81A                            loc_72E64:				; XREF: loc_72A64
0006F81A 103C 0088                  		move.b	#$88,d0
0006F81E 123C 000F                  		move.b	#$F,d1
0006F822 4EBA F8C2                  		jsr	sub_7272E(pc)
0006F826 103C 008C                  		move.b	#$8C,d0
0006F82A 123C 000F                  		move.b	#$F,d1
0006F82E 6000 F8B6                  		bra.w	sub_7272E
0006F832                            ; ===========================================================================
0006F832                            Kos_Z80:	incbin	sound\z80_1.bin
0006F8E2 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0006F8E4 21                         		dc.b $21
0006F8E5 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0006F8E7                            		incbin	sound\z80_2.bin
00070F92                            		even
00070F92                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00077792                            		even
00077792                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00081030                            		even
00081030                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000815BE                            		even
000815BE                            Music84:	include	sound\music84.asm ; Star Light Act 1
000815BE                            music84_Header:
000815BE =00000001                  smpsHeaderStartSong = 1
000815BE 0000                       	smpsHeaderVoice     music84_Voices
000815C0 0603                       	smpsHeaderChan      $06, $03
000815C2 0205                       	smpsHeaderTempo     $02, $05
000815C4                            
000815C8 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000815CC 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000815D0 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000815D4 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000815D8 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000815DC 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000815E2 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000815E8 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000815EE                            
000815EE                            ; FM1 Data
000815EE                            music84_FM1:
000815EE E0C0                       	smpsPan             panCenter, $00
000815F2 E107                       	smpsAlterNote       $07
000815F4 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000815F8 E106                       	smpsAlterNote       $06
000815FA 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000815FE E10B                       	smpsAlterNote       $0B
00081600 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00081606 E10C                       	smpsAlterNote       $0C
00081608 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008160B E10B                       	smpsAlterNote       $0B
0008160D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081610 E109                       	smpsAlterNote       $09
00081612 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00081617 E108                       	smpsAlterNote       $08
00081619 8001                       	dc.b	nRst, $01
0008161B E10B                       	smpsAlterNote       $0B
0008161D 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00081623 E107                       	smpsAlterNote       $07
00081625 9B03                       	dc.b	nD2, $03
00081627                            
00081627                            music84_Jump04:
00081627 E107                       	smpsAlterNote       $07
00081629 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008162D E10B                       	smpsAlterNote       $0B
0008162F A202 8001                  	dc.b	nA2, $02, nRst, $01
00081633 E107                       	smpsAlterNote       $07
00081635 9B03                       	dc.b	nD2, $03
00081637 E11A                       	smpsAlterNote       $1A
00081639 A301                       	dc.b	nBb2, $01
0008163B E1F2                       	smpsAlterNote       $F2
0008163D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081640 E1FF                       	smpsAlterNote       $FF
00081642 E701                       	dc.b	smpsNoAttack, $01
00081644 E111                       	smpsAlterNote       $11
00081646 E701                       	dc.b	smpsNoAttack, $01
00081648 E106                       	smpsAlterNote       $06
0008164A E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008164D E107                       	smpsAlterNote       $07
0008164F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081653 E108                       	smpsAlterNote       $08
00081655 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0008165D E109                       	smpsAlterNote       $09
0008165F A003                       	dc.b	nG2, $03
00081661 E10C                       	smpsAlterNote       $0C
00081663 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00081667 E1FD                       	smpsAlterNote       $FD
00081669 A401                       	dc.b	nB2, $01
0008166B E109                       	smpsAlterNote       $09
0008166D E701                       	dc.b	smpsNoAttack, $01
0008166F E106                       	smpsAlterNote       $06
00081671 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081674 E109                       	smpsAlterNote       $09
00081676 A007                       	dc.b	nG2, $07
00081678 E108                       	smpsAlterNote       $08
0008167A 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008167E E107                       	smpsAlterNote       $07
00081680 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00081686 E10B                       	smpsAlterNote       $0B
00081688 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008168C E107                       	smpsAlterNote       $07
0008168E 9B03                       	dc.b	nD2, $03
00081690 E11A                       	smpsAlterNote       $1A
00081692 A301                       	dc.b	nBb2, $01
00081694 E1F9                       	smpsAlterNote       $F9
00081696 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081699 E107                       	smpsAlterNote       $07
0008169B E701                       	dc.b	smpsNoAttack, $01
0008169D E111                       	smpsAlterNote       $11
0008169F E701                       	dc.b	smpsNoAttack, $01
000816A1 E106                       	smpsAlterNote       $06
000816A3 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000816A8 E107                       	smpsAlterNote       $07
000816AA 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000816B2 E1EC                       	smpsAlterNote       $EC
000816B4 A101                       	dc.b	nAb2, $01
000816B6 E108                       	smpsAlterNote       $08
000816B8 E701                       	dc.b	smpsNoAttack, $01
000816BA E116                       	smpsAlterNote       $16
000816BC E701                       	dc.b	smpsNoAttack, $01
000816BE E1F5                       	smpsAlterNote       $F5
000816C0 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000816C3 E10B                       	smpsAlterNote       $0B
000816C5 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000816C9 E107                       	smpsAlterNote       $07
000816CB 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000816D1 E109                       	smpsAlterNote       $09
000816D3 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000816D7 E10B                       	smpsAlterNote       $0B
000816D9 9603                       	dc.b	nA1, $03
000816DB E107                       	smpsAlterNote       $07
000816DD 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000816E3 E10B                       	smpsAlterNote       $0B
000816E5 A203 8001                  	dc.b	nA2, $03, nRst, $01
000816E9 E107                       	smpsAlterNote       $07
000816EB 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000816EF E11A                       	smpsAlterNote       $1A
000816F1 A301                       	dc.b	nBb2, $01
000816F3 E1F9                       	smpsAlterNote       $F9
000816F5 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000816F8 E107                       	smpsAlterNote       $07
000816FA E701                       	dc.b	smpsNoAttack, $01
000816FC E1FB                       	smpsAlterNote       $FB
000816FE E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081701 E106                       	smpsAlterNote       $06
00081703 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081707 E107                       	smpsAlterNote       $07
00081709 9B03                       	dc.b	nD2, $03
0008170B E108                       	smpsAlterNote       $08
0008170D 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00081713 E109                       	smpsAlterNote       $09
00081715 A002 8001                  	dc.b	nG2, $02, nRst, $01
00081719 E10C                       	smpsAlterNote       $0C
0008171B A303                       	dc.b	nBb2, $03
0008171D E1F0                       	smpsAlterNote       $F0
0008171F A401                       	dc.b	nB2, $01
00081721 E1FD                       	smpsAlterNote       $FD
00081723 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00081728 E106                       	smpsAlterNote       $06
0008172A 8001                       	dc.b	nRst, $01
0008172C E109                       	smpsAlterNote       $09
0008172E A006 8001                  	dc.b	nG2, $06, nRst, $01
00081732 E108                       	smpsAlterNote       $08
00081734 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00081738 E107                       	smpsAlterNote       $07
0008173A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081740 E10B                       	smpsAlterNote       $0B
00081742 A203                       	dc.b	nA2, $03
00081744 E107                       	smpsAlterNote       $07
00081746 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008174A E1F2                       	smpsAlterNote       $F2
0008174C A401                       	dc.b	nB2, $01
0008174E E1FF                       	smpsAlterNote       $FF
00081750 E701                       	dc.b	smpsNoAttack, $01
00081752 E107                       	smpsAlterNote       $07
00081754 E701                       	dc.b	smpsNoAttack, $01
00081756 E1FB                       	smpsAlterNote       $FB
00081758 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008175B E106                       	smpsAlterNote       $06
0008175D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081761 E107                       	smpsAlterNote       $07
00081763 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0008176D E117                       	smpsAlterNote       $17
0008176F A001                       	dc.b	nG2, $01
00081771 E1FA                       	smpsAlterNote       $FA
00081773 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00081776 E108                       	smpsAlterNote       $08
00081778 E701                       	dc.b	smpsNoAttack, $01
0008177A E1E7                       	smpsAlterNote       $E7
0008177C E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008177F E103                       	smpsAlterNote       $03
00081781 E701                       	dc.b	smpsNoAttack, $01
00081783 E10B                       	smpsAlterNote       $0B
00081785 E702                       	dc.b	smpsNoAttack, $02
00081787 E107                       	smpsAlterNote       $07
00081789 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00081791 E106                       	smpsAlterNote       $06
00081793 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00081799 E10C                       	smpsAlterNote       $0C
0008179B 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000817A1 E109                       	smpsAlterNote       $09
000817A3 9E03                       	dc.b	nF2, $03
000817A5 E10C                       	smpsAlterNote       $0C
000817A7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000817AB E1EA                       	smpsAlterNote       $EA
000817AD A201                       	dc.b	nA2, $01
000817AF E106                       	smpsAlterNote       $06
000817B1 E701                       	dc.b	smpsNoAttack, $01
000817B3 E1E2                       	smpsAlterNote       $E2
000817B5 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000817B8 E1F0                       	smpsAlterNote       $F0
000817BA E701                       	dc.b	smpsNoAttack, $01
000817BC E10C                       	smpsAlterNote       $0C
000817BE E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000817CA E116                       	smpsAlterNote       $16
000817CC 9C01                       	dc.b	nEb2, $01
000817CE E105                       	smpsAlterNote       $05
000817D0 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000817D3 E1F1                       	smpsAlterNote       $F1
000817D5 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000817D8 E1FF                       	smpsAlterNote       $FF
000817DA E701                       	dc.b	smpsNoAttack, $01
000817DC E109                       	smpsAlterNote       $09
000817DE E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000817E2 E10C                       	smpsAlterNote       $0C
000817E4 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000817F0 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000817F6 E109                       	smpsAlterNote       $09
000817F8 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000817FC E10C                       	smpsAlterNote       $0C
000817FE 9703                       	dc.b	nBb1, $03
00081800 E11A                       	smpsAlterNote       $1A
00081802 A101                       	dc.b	nAb2, $01
00081804 E1FB                       	smpsAlterNote       $FB
00081806 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081809 E10A                       	smpsAlterNote       $0A
0008180B E701                       	dc.b	smpsNoAttack, $01
0008180D E1E8                       	smpsAlterNote       $E8
0008180F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00081812 E106                       	smpsAlterNote       $06
00081814 E701                       	dc.b	smpsNoAttack, $01
00081816 E10C                       	smpsAlterNote       $0C
00081818 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00081824 E1F9                       	smpsAlterNote       $F9
00081826 9D01                       	dc.b	nE2, $01
00081828 E108                       	smpsAlterNote       $08
0008182A E701                       	dc.b	smpsNoAttack, $01
0008182C E1F6                       	smpsAlterNote       $F6
0008182E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00081831 E109                       	smpsAlterNote       $09
00081833 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00081837 E10C                       	smpsAlterNote       $0C
00081839 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00081845 E108                       	smpsAlterNote       $08
00081847 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008184D E106                       	smpsAlterNote       $06
0008184F A403 8001                  	dc.b	nB2, $03, nRst, $01
00081853 E108                       	smpsAlterNote       $08
00081855 9D03                       	dc.b	nE2, $03
00081857 E1EB                       	smpsAlterNote       $EB
00081859 A801                       	dc.b	nEb3, $01
0008185B E109                       	smpsAlterNote       $09
0008185D E701                       	dc.b	smpsNoAttack, $01
0008185F E1FA                       	smpsAlterNote       $FA
00081861 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00081864 E108                       	smpsAlterNote       $08
00081866 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00081872 E1E9                       	smpsAlterNote       $E9
00081874 A301                       	dc.b	nBb2, $01
00081876 E107                       	smpsAlterNote       $07
00081878 E701                       	dc.b	smpsNoAttack, $01
0008187A E1F0                       	smpsAlterNote       $F0
0008187C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008187F E1F7                       	smpsAlterNote       $F7
00081881 E701                       	dc.b	smpsNoAttack, $01
00081883 E107                       	smpsAlterNote       $07
00081885 E701                       	dc.b	smpsNoAttack, $01
00081887 E106                       	smpsAlterNote       $06
00081889 E701                       	dc.b	smpsNoAttack, $01
0008188B E108                       	smpsAlterNote       $08
0008188D 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00081893 E106                       	smpsAlterNote       $06
00081895 A403 8001                  	dc.b	nB2, $03, nRst, $01
00081899 E108                       	smpsAlterNote       $08
0008189B 9D03                       	dc.b	nE2, $03
0008189D E10B                       	smpsAlterNote       $0B
0008189F 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000818A7 E108                       	smpsAlterNote       $08
000818A9 9D03                       	dc.b	nE2, $03
000818AB E10B                       	smpsAlterNote       $0B
000818AD 9603 8001                  	dc.b	nA1, $03, nRst, $01
000818B1 E113                       	smpsAlterNote       $13
000818B3 A001                       	dc.b	nG2, $01
000818B5 E118                       	smpsAlterNote       $18
000818B7 E701                       	dc.b	smpsNoAttack, $01
000818B9 E1E9                       	smpsAlterNote       $E9
000818BB E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000818BE E1F3                       	smpsAlterNote       $F3
000818C0 E701                       	dc.b	smpsNoAttack, $01
000818C2 E1FD                       	smpsAlterNote       $FD
000818C4 E701                       	dc.b	smpsNoAttack, $01
000818C6 E102                       	smpsAlterNote       $02
000818C8 E701                       	dc.b	smpsNoAttack, $01
000818CA E107                       	smpsAlterNote       $07
000818CC 8001                       	dc.b	nRst, $01
000818CE E10B                       	smpsAlterNote       $0B
000818D0 9603                       	dc.b	nA1, $03
000818D2 E10C                       	smpsAlterNote       $0C
000818D4 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000818DA E10B                       	smpsAlterNote       $0B
000818DC 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000818E8 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000818EE E107                       	smpsAlterNote       $07
000818F0 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000818F6 E10B                       	smpsAlterNote       $0B
000818F8 A203                       	dc.b	nA2, $03
000818FA E107                       	smpsAlterNote       $07
000818FC 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081900 E1F2                       	smpsAlterNote       $F2
00081902 A401                       	dc.b	nB2, $01
00081904 E1FF                       	smpsAlterNote       $FF
00081906 E701                       	dc.b	smpsNoAttack, $01
00081908 E107                       	smpsAlterNote       $07
0008190A E701                       	dc.b	smpsNoAttack, $01
0008190C E1FB                       	smpsAlterNote       $FB
0008190E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081911 E106                       	smpsAlterNote       $06
00081913 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081917 E107                       	smpsAlterNote       $07
00081919 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008191D E108                       	smpsAlterNote       $08
0008191F 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00081925 E109                       	smpsAlterNote       $09
00081927 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008192B E10C                       	smpsAlterNote       $0C
0008192D A302 8001                  	dc.b	nBb2, $02, nRst, $01
00081931 E1F0                       	smpsAlterNote       $F0
00081933 A401                       	dc.b	nB2, $01
00081935 E109                       	smpsAlterNote       $09
00081937 E701                       	dc.b	smpsNoAttack, $01
00081939 E106                       	smpsAlterNote       $06
0008193B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008193E E109                       	smpsAlterNote       $09
00081940 A007                       	dc.b	nG2, $07
00081942 E108                       	smpsAlterNote       $08
00081944 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00081948 E107                       	smpsAlterNote       $07
0008194A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081950 E10B                       	smpsAlterNote       $0B
00081952 A202 8001                  	dc.b	nA2, $02, nRst, $01
00081956 E107                       	smpsAlterNote       $07
00081958 9B03                       	dc.b	nD2, $03
0008195A E11A                       	smpsAlterNote       $1A
0008195C A301                       	dc.b	nBb2, $01
0008195E E1F2                       	smpsAlterNote       $F2
00081960 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081963 E1FF                       	smpsAlterNote       $FF
00081965 E701                       	dc.b	smpsNoAttack, $01
00081967 E111                       	smpsAlterNote       $11
00081969 E701                       	dc.b	smpsNoAttack, $01
0008196B E106                       	smpsAlterNote       $06
0008196D E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00081970 E107                       	smpsAlterNote       $07
00081972 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008197E E117                       	smpsAlterNote       $17
00081980 A001                       	dc.b	nG2, $01
00081982 E1FA                       	smpsAlterNote       $FA
00081984 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00081987 E116                       	smpsAlterNote       $16
00081989 E701                       	dc.b	smpsNoAttack, $01
0008198B E1F5                       	smpsAlterNote       $F5
0008198D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081990 E103                       	smpsAlterNote       $03
00081992 E701                       	dc.b	smpsNoAttack, $01
00081994 E10B                       	smpsAlterNote       $0B
00081996 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008199A E107                       	smpsAlterNote       $07
0008199C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000819A2 E109                       	smpsAlterNote       $09
000819A4 9E03                       	dc.b	nF2, $03
000819A6 E10B                       	smpsAlterNote       $0B
000819A8 9603 8001                  	dc.b	nA1, $03, nRst, $01
000819AC E107                       	smpsAlterNote       $07
000819AE 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000819B4 E10B                       	smpsAlterNote       $0B
000819B6 A203 8001                  	dc.b	nA2, $03, nRst, $01
000819BA E107                       	smpsAlterNote       $07
000819BC 9B03                       	dc.b	nD2, $03
000819BE E11A                       	smpsAlterNote       $1A
000819C0 A301                       	dc.b	nBb2, $01
000819C2 E1F9                       	smpsAlterNote       $F9
000819C4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000819C7 E107                       	smpsAlterNote       $07
000819C9 E701                       	dc.b	smpsNoAttack, $01
000819CB E111                       	smpsAlterNote       $11
000819CD E701                       	dc.b	smpsNoAttack, $01
000819CF E106                       	smpsAlterNote       $06
000819D1 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000819D6 E107                       	smpsAlterNote       $07
000819D8 9B03                       	dc.b	nD2, $03
000819DA E108                       	smpsAlterNote       $08
000819DC 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000819E2 E109                       	smpsAlterNote       $09
000819E4 A003                       	dc.b	nG2, $03
000819E6 E10C                       	smpsAlterNote       $0C
000819E8 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000819EC E1FD                       	smpsAlterNote       $FD
000819EE A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000819F3 E106                       	smpsAlterNote       $06
000819F5 8001                       	dc.b	nRst, $01
000819F7 E109                       	smpsAlterNote       $09
000819F9 A006 8001                  	dc.b	nG2, $06, nRst, $01
000819FD E108                       	smpsAlterNote       $08
000819FF 9C03                       	dc.b	nEb2, $03
00081A01 E107                       	smpsAlterNote       $07
00081A03 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00081A09 E10B                       	smpsAlterNote       $0B
00081A0B A203 8001                  	dc.b	nA2, $03, nRst, $01
00081A0F E107                       	smpsAlterNote       $07
00081A11 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00081A15 E11A                       	smpsAlterNote       $1A
00081A17 A301                       	dc.b	nBb2, $01
00081A19 E1F9                       	smpsAlterNote       $F9
00081A1B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081A1E E107                       	smpsAlterNote       $07
00081A20 E701                       	dc.b	smpsNoAttack, $01
00081A22 E1FB                       	smpsAlterNote       $FB
00081A24 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081A27 E106                       	smpsAlterNote       $06
00081A29 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081A2D E107                       	smpsAlterNote       $07
00081A2F 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00081A37 E1EC                       	smpsAlterNote       $EC
00081A39 A101                       	dc.b	nAb2, $01
00081A3B E108                       	smpsAlterNote       $08
00081A3D E701                       	dc.b	smpsNoAttack, $01
00081A3F E1E7                       	smpsAlterNote       $E7
00081A41 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081A44 E1F5                       	smpsAlterNote       $F5
00081A46 E701                       	dc.b	smpsNoAttack, $01
00081A48 E10B                       	smpsAlterNote       $0B
00081A4A E702                       	dc.b	smpsNoAttack, $02
00081A4C E107                       	smpsAlterNote       $07
00081A4E 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00081A54 E106                       	smpsAlterNote       $06
00081A56 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00081A5C E10C                       	smpsAlterNote       $0C
00081A5E 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00081A66 E109                       	smpsAlterNote       $09
00081A68 9E03                       	dc.b	nF2, $03
00081A6A E10C                       	smpsAlterNote       $0C
00081A6C 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081A70 E1EA                       	smpsAlterNote       $EA
00081A72 A201                       	dc.b	nA2, $01
00081A74 E106                       	smpsAlterNote       $06
00081A76 E701                       	dc.b	smpsNoAttack, $01
00081A78 E114                       	smpsAlterNote       $14
00081A7A E701                       	dc.b	smpsNoAttack, $01
00081A7C E1F0                       	smpsAlterNote       $F0
00081A7E E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00081A81 E10C                       	smpsAlterNote       $0C
00081A83 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00081A8F 9703                       	dc.b	nBb1, $03
00081A91 E116                       	smpsAlterNote       $16
00081A93 9C01                       	dc.b	nEb2, $01
00081A95 E105                       	smpsAlterNote       $05
00081A97 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00081A9A E113                       	smpsAlterNote       $13
00081A9C E701                       	dc.b	smpsNoAttack, $01
00081A9E E1FF                       	smpsAlterNote       $FF
00081AA0 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00081AA3 E109                       	smpsAlterNote       $09
00081AA5 E703                       	dc.b	smpsNoAttack, $03
00081AA7 E10C                       	smpsAlterNote       $0C
00081AA9 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00081AB5 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00081ABD E109                       	smpsAlterNote       $09
00081ABF 9E03                       	dc.b	nF2, $03
00081AC1 E10C                       	smpsAlterNote       $0C
00081AC3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081AC7 E1EC                       	smpsAlterNote       $EC
00081AC9 A201                       	dc.b	nA2, $01
00081ACB E10A                       	smpsAlterNote       $0A
00081ACD E701                       	dc.b	smpsNoAttack, $01
00081ACF E1E8                       	smpsAlterNote       $E8
00081AD1 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00081AD4 E1F7                       	smpsAlterNote       $F7
00081AD6 E701                       	dc.b	smpsNoAttack, $01
00081AD8 E10C                       	smpsAlterNote       $0C
00081ADA E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00081AE6 E1EA                       	smpsAlterNote       $EA
00081AE8 9D01                       	dc.b	nE2, $01
00081AEA E108                       	smpsAlterNote       $08
00081AEC E701                       	dc.b	smpsNoAttack, $01
00081AEE E1F6                       	smpsAlterNote       $F6
00081AF0 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00081AF3 E105                       	smpsAlterNote       $05
00081AF5 E701                       	dc.b	smpsNoAttack, $01
00081AF7 E109                       	smpsAlterNote       $09
00081AF9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081AFD E10C                       	smpsAlterNote       $0C
00081AFF 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00081B0B E108                       	smpsAlterNote       $08
00081B0D 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00081B13 E106                       	smpsAlterNote       $06
00081B15 A403 8001                  	dc.b	nB2, $03, nRst, $01
00081B19 E108                       	smpsAlterNote       $08
00081B1B 9D03                       	dc.b	nE2, $03
00081B1D E1EB                       	smpsAlterNote       $EB
00081B1F A801                       	dc.b	nEb3, $01
00081B21 E109                       	smpsAlterNote       $09
00081B23 E701                       	dc.b	smpsNoAttack, $01
00081B25 E1EB                       	smpsAlterNote       $EB
00081B27 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00081B2A E108                       	smpsAlterNote       $08
00081B2C E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00081B38 E1E9                       	smpsAlterNote       $E9
00081B3A A301                       	dc.b	nBb2, $01
00081B3C E1F8                       	smpsAlterNote       $F8
00081B3E E701                       	dc.b	smpsNoAttack, $01
00081B40 E116                       	smpsAlterNote       $16
00081B42 E701                       	dc.b	smpsNoAttack, $01
00081B44 E1F7                       	smpsAlterNote       $F7
00081B46 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081B49 E107                       	smpsAlterNote       $07
00081B4B E701                       	dc.b	smpsNoAttack, $01
00081B4D E1EE                       	smpsAlterNote       $EE
00081B4F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081B52 E106                       	smpsAlterNote       $06
00081B54 8001                       	dc.b	nRst, $01
00081B56 E108                       	smpsAlterNote       $08
00081B58 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00081B5E E106                       	smpsAlterNote       $06
00081B60 A402 8001                  	dc.b	nB2, $02, nRst, $01
00081B64 E108                       	smpsAlterNote       $08
00081B66 9D03                       	dc.b	nE2, $03
00081B68 E10B                       	smpsAlterNote       $0B
00081B6A 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00081B70 E108                       	smpsAlterNote       $08
00081B72 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00081B76 E10B                       	smpsAlterNote       $0B
00081B78 9603                       	dc.b	nA1, $03
00081B7A E10E                       	smpsAlterNote       $0E
00081B7C A001                       	dc.b	nG2, $01
00081B7E E118                       	smpsAlterNote       $18
00081B80 E701                       	dc.b	smpsNoAttack, $01
00081B82 E1E9                       	smpsAlterNote       $E9
00081B84 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00081B87 E1EE                       	smpsAlterNote       $EE
00081B89 E701                       	dc.b	smpsNoAttack, $01
00081B8B E1F8                       	smpsAlterNote       $F8
00081B8D E701                       	dc.b	smpsNoAttack, $01
00081B8F E102                       	smpsAlterNote       $02
00081B91 E701                       	dc.b	smpsNoAttack, $01
00081B93 E107                       	smpsAlterNote       $07
00081B95 8001                       	dc.b	nRst, $01
00081B97 E10B                       	smpsAlterNote       $0B
00081B99 9603                       	dc.b	nA1, $03
00081B9B E10C                       	smpsAlterNote       $0C
00081B9D 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00081BA3 E10B                       	smpsAlterNote       $0B
00081BA5 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00081BB1 8001 9603                  	dc.b	nRst, $01, nA1, $03
00081BB5 E10C                       	smpsAlterNote       $0C
00081BB7 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00081BC3 8001                       	dc.b	nRst, $01
00081BC5 E10B                       	smpsAlterNote       $0B
00081BC7 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00081BCF E107                       	smpsAlterNote       $07
00081BD1 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00081BD5 E10B                       	smpsAlterNote       $0B
00081BD7 9603                       	dc.b	nA1, $03
00081BD9 E109                       	smpsAlterNote       $09
00081BDB 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00081BDF E108                       	smpsAlterNote       $08
00081BE1 9D06                       	dc.b	nE2, $06
00081BE3 E107                       	smpsAlterNote       $07
00081BE5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081BE9 E106                       	smpsAlterNote       $06
00081BEB 9903                       	dc.b	nC2, $03
00081BED E10C                       	smpsAlterNote       $0C
00081BEF 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081BF3 E10B                       	smpsAlterNote       $0B
00081BF5 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00081C01 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00081C0B E10C                       	smpsAlterNote       $0C
00081C0D 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00081C19 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00081C25 8001                       	dc.b	nRst, $01
00081C27 E10B                       	smpsAlterNote       $0B
00081C29 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00081C35 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00081C41 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00081C4D 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00081C57 E10C                       	smpsAlterNote       $0C
00081C59 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00081C65 E10B                       	smpsAlterNote       $0B
00081C67 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00081C6F E107                       	smpsAlterNote       $07
00081C71 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00081C75 E10B                       	smpsAlterNote       $0B
00081C77 9603                       	dc.b	nA1, $03
00081C79 E109                       	smpsAlterNote       $09
00081C7B 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00081C7F E108                       	smpsAlterNote       $08
00081C81 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00081C85 E107                       	smpsAlterNote       $07
00081C87 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00081C8B E106                       	smpsAlterNote       $06
00081C8D 9903                       	dc.b	nC2, $03
00081C8F E10C                       	smpsAlterNote       $0C
00081C91 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081C95 E10B                       	smpsAlterNote       $0B
00081C97 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00081CA3 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00081CAD E10C                       	smpsAlterNote       $0C
00081CAF 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00081CBB 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00081CC7 8001                       	dc.b	nRst, $01
00081CC9 E10B                       	smpsAlterNote       $0B
00081CCB 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00081CD7 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00081CE1 E10C                       	smpsAlterNote       $0C
00081CE3 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00081CEF 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00081CFB E10B                       	smpsAlterNote       $0B
00081CFD 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00081D09 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00081D13 E10C                       	smpsAlterNote       $0C
00081D15 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00081D21 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00081D2D E10B                       	smpsAlterNote       $0B
00081D2F 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00081D3B 8001                       	dc.b	nRst, $01
00081D3D E1EC                       	smpsAlterNote       $EC
00081D3F A101                       	dc.b	nAb2, $01
00081D41 E1FA                       	smpsAlterNote       $FA
00081D43 E701                       	dc.b	smpsNoAttack, $01
00081D45 E116                       	smpsAlterNote       $16
00081D47 E701                       	dc.b	smpsNoAttack, $01
00081D49 E1F5                       	smpsAlterNote       $F5
00081D4B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081D4E E10B                       	smpsAlterNote       $0B
00081D50 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00081D5C 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00081D68 E107                       	smpsAlterNote       $07
00081D6A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081D70 E10B                       	smpsAlterNote       $0B
00081D72 A203                       	dc.b	nA2, $03
00081D74 E107                       	smpsAlterNote       $07
00081D76 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081D7A E1F3                       	smpsAlterNote       $F3
00081D7C A401                       	dc.b	nB2, $01
00081D7E E102                       	smpsAlterNote       $02
00081D80 E701                       	dc.b	smpsNoAttack, $01
00081D82 E109                       	smpsAlterNote       $09
00081D84 E701                       	dc.b	smpsNoAttack, $01
00081D86 E102                       	smpsAlterNote       $02
00081D88 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081D8B E106                       	smpsAlterNote       $06
00081D8D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081D91 E107                       	smpsAlterNote       $07
00081D93 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00081D97 E108                       	smpsAlterNote       $08
00081D99 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00081D9F E109                       	smpsAlterNote       $09
00081DA1 A003 8001                  	dc.b	nG2, $03, nRst, $01
00081DA5 E1F2                       	smpsAlterNote       $F2
00081DA7 A401                       	dc.b	nB2, $01
00081DA9 E1FF                       	smpsAlterNote       $FF
00081DAB E701                       	dc.b	smpsNoAttack, $01
00081DAD E111                       	smpsAlterNote       $11
00081DAF E701                       	dc.b	smpsNoAttack, $01
00081DB1 E1FB                       	smpsAlterNote       $FB
00081DB3 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081DB6 E106                       	smpsAlterNote       $06
00081DB8 E702                       	dc.b	smpsNoAttack, $02
00081DBA E109                       	smpsAlterNote       $09
00081DBC A007                       	dc.b	nG2, $07
00081DBE E108                       	smpsAlterNote       $08
00081DC0 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00081DC4 E107                       	smpsAlterNote       $07
00081DC6 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081DCC E10B                       	smpsAlterNote       $0B
00081DCE A202 8001                  	dc.b	nA2, $02, nRst, $01
00081DD2 E107                       	smpsAlterNote       $07
00081DD4 9B03                       	dc.b	nD2, $03
00081DD6 E11A                       	smpsAlterNote       $1A
00081DD8 A301                       	dc.b	nBb2, $01
00081DDA E1F2                       	smpsAlterNote       $F2
00081DDC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081DDF E1FF                       	smpsAlterNote       $FF
00081DE1 E701                       	dc.b	smpsNoAttack, $01
00081DE3 E111                       	smpsAlterNote       $11
00081DE5 E701                       	dc.b	smpsNoAttack, $01
00081DE7 E106                       	smpsAlterNote       $06
00081DE9 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00081DEC E107                       	smpsAlterNote       $07
00081DEE 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00081DFA E117                       	smpsAlterNote       $17
00081DFC A001                       	dc.b	nG2, $01
00081DFE E1FA                       	smpsAlterNote       $FA
00081E00 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00081E03 E116                       	smpsAlterNote       $16
00081E05 E701                       	dc.b	smpsNoAttack, $01
00081E07 E1F5                       	smpsAlterNote       $F5
00081E09 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081E0C E103                       	smpsAlterNote       $03
00081E0E E701                       	dc.b	smpsNoAttack, $01
00081E10 E10B                       	smpsAlterNote       $0B
00081E12 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00081E16 E107                       	smpsAlterNote       $07
00081E18 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081E1E E109                       	smpsAlterNote       $09
00081E20 9E03                       	dc.b	nF2, $03
00081E22 E10B                       	smpsAlterNote       $0B
00081E24 9603 8001                  	dc.b	nA1, $03, nRst, $01
00081E28 E107                       	smpsAlterNote       $07
00081E2A 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00081E30 E10B                       	smpsAlterNote       $0B
00081E32 A203 8001                  	dc.b	nA2, $03, nRst, $01
00081E36 E107                       	smpsAlterNote       $07
00081E38 9B03                       	dc.b	nD2, $03
00081E3A E11A                       	smpsAlterNote       $1A
00081E3C A301                       	dc.b	nBb2, $01
00081E3E E1F9                       	smpsAlterNote       $F9
00081E40 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081E43 E1FF                       	smpsAlterNote       $FF
00081E45 E701                       	dc.b	smpsNoAttack, $01
00081E47 E111                       	smpsAlterNote       $11
00081E49 E701                       	dc.b	smpsNoAttack, $01
00081E4B E106                       	smpsAlterNote       $06
00081E4D E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00081E50 E107                       	smpsAlterNote       $07
00081E52 9B03                       	dc.b	nD2, $03
00081E54 E108                       	smpsAlterNote       $08
00081E56 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00081E5C E109                       	smpsAlterNote       $09
00081E5E A003                       	dc.b	nG2, $03
00081E60 E1F0                       	smpsAlterNote       $F0
00081E62 A501                       	dc.b	nC3, $01
00081E64 E106                       	smpsAlterNote       $06
00081E66 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00081E6A E109                       	smpsAlterNote       $09
00081E6C A006 8001                  	dc.b	nG2, $06, nRst, $01
00081E70 E108                       	smpsAlterNote       $08
00081E72 9C03                       	dc.b	nEb2, $03
00081E74 E107                       	smpsAlterNote       $07
00081E76 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00081E7C E10B                       	smpsAlterNote       $0B
00081E7E A203 8001                  	dc.b	nA2, $03, nRst, $01
00081E82 E107                       	smpsAlterNote       $07
00081E84 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00081E88 E11A                       	smpsAlterNote       $1A
00081E8A A301                       	dc.b	nBb2, $01
00081E8C E1F9                       	smpsAlterNote       $F9
00081E8E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081E91 E107                       	smpsAlterNote       $07
00081E93 E701                       	dc.b	smpsNoAttack, $01
00081E95 E1FB                       	smpsAlterNote       $FB
00081E97 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081E9A E106                       	smpsAlterNote       $06
00081E9C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081EA0 E107                       	smpsAlterNote       $07
00081EA2 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00081EAA E1EC                       	smpsAlterNote       $EC
00081EAC A101                       	dc.b	nAb2, $01
00081EAE E108                       	smpsAlterNote       $08
00081EB0 E701                       	dc.b	smpsNoAttack, $01
00081EB2 E1E7                       	smpsAlterNote       $E7
00081EB4 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081EB7 E1F5                       	smpsAlterNote       $F5
00081EB9 E701                       	dc.b	smpsNoAttack, $01
00081EBB E10B                       	smpsAlterNote       $0B
00081EBD E702                       	dc.b	smpsNoAttack, $02
00081EBF E107                       	smpsAlterNote       $07
00081EC1 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00081EC7 E106                       	smpsAlterNote       $06
00081EC9 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00081ECF E10C                       	smpsAlterNote       $0C
00081ED1 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00081ED9 E109                       	smpsAlterNote       $09
00081EDB 9E03                       	dc.b	nF2, $03
00081EDD E10C                       	smpsAlterNote       $0C
00081EDF 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081EE3 E1EA                       	smpsAlterNote       $EA
00081EE5 A201                       	dc.b	nA2, $01
00081EE7 E106                       	smpsAlterNote       $06
00081EE9 E701                       	dc.b	smpsNoAttack, $01
00081EEB E114                       	smpsAlterNote       $14
00081EED E701                       	dc.b	smpsNoAttack, $01
00081EEF E1F0                       	smpsAlterNote       $F0
00081EF1 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00081EF4 E10C                       	smpsAlterNote       $0C
00081EF6 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00081F02 9703                       	dc.b	nBb1, $03
00081F04 E116                       	smpsAlterNote       $16
00081F06 9C01                       	dc.b	nEb2, $01
00081F08 E105                       	smpsAlterNote       $05
00081F0A E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00081F0D E113                       	smpsAlterNote       $13
00081F0F E701                       	dc.b	smpsNoAttack, $01
00081F11 E1FF                       	smpsAlterNote       $FF
00081F13 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00081F16 E109                       	smpsAlterNote       $09
00081F18 E703                       	dc.b	smpsNoAttack, $03
00081F1A E10C                       	smpsAlterNote       $0C
00081F1C 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00081F28 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00081F30 E109                       	smpsAlterNote       $09
00081F32 9E03                       	dc.b	nF2, $03
00081F34 E10C                       	smpsAlterNote       $0C
00081F36 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081F3A E1EA                       	smpsAlterNote       $EA
00081F3C A201                       	dc.b	nA2, $01
00081F3E E106                       	smpsAlterNote       $06
00081F40 E701                       	dc.b	smpsNoAttack, $01
00081F42 E1E2                       	smpsAlterNote       $E2
00081F44 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00081F47 E1F0                       	smpsAlterNote       $F0
00081F49 E701                       	dc.b	smpsNoAttack, $01
00081F4B E10C                       	smpsAlterNote       $0C
00081F4D E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00081F59 E116                       	smpsAlterNote       $16
00081F5B 9C01                       	dc.b	nEb2, $01
00081F5D E105                       	smpsAlterNote       $05
00081F5F E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00081F62 E1F1                       	smpsAlterNote       $F1
00081F64 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00081F67 E1FF                       	smpsAlterNote       $FF
00081F69 E701                       	dc.b	smpsNoAttack, $01
00081F6B E109                       	smpsAlterNote       $09
00081F6D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081F71 E10C                       	smpsAlterNote       $0C
00081F73 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00081F7F E106                       	smpsAlterNote       $06
00081F81 9903                       	dc.b	nC2, $03
00081F83 E107                       	smpsAlterNote       $07
00081F85 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081F89 E109                       	smpsAlterNote       $09
00081F8B 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00081F91 E107                       	smpsAlterNote       $07
00081F93 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081F97 E108                       	smpsAlterNote       $08
00081F99 9D03                       	dc.b	nE2, $03
00081F9B E10B                       	smpsAlterNote       $0B
00081F9D 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00081FA3 E109                       	smpsAlterNote       $09
00081FA5 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00081FAB E10C                       	smpsAlterNote       $0C
00081FAD 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00081FB3 E106                       	smpsAlterNote       $06
00081FB5 9903                       	dc.b	nC2, $03
00081FB7 E11A                       	smpsAlterNote       $1A
00081FB9 A301                       	dc.b	nBb2, $01
00081FBB E1F9                       	smpsAlterNote       $F9
00081FBD E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081FC0 E1FF                       	smpsAlterNote       $FF
00081FC2 E701                       	dc.b	smpsNoAttack, $01
00081FC4 E111                       	smpsAlterNote       $11
00081FC6 E701                       	dc.b	smpsNoAttack, $01
00081FC8 E106                       	smpsAlterNote       $06
00081FCA E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00081FD1 E109                       	smpsAlterNote       $09
00081FD3 A003                       	dc.b	nG2, $03
00081FD5 E106                       	smpsAlterNote       $06
00081FD7 9907                       	dc.b	nC2, $07
00081FD9 E107                       	smpsAlterNote       $07
00081FDB 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00081FE3 E10B                       	smpsAlterNote       $0B
00081FE5 A203                       	dc.b	nA2, $03
00081FE7 E107                       	smpsAlterNote       $07
00081FE9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081FED E1F2                       	smpsAlterNote       $F2
00081FEF A401                       	dc.b	nB2, $01
00081FF1 E1F9                       	smpsAlterNote       $F9
00081FF3 E701                       	dc.b	smpsNoAttack, $01
00081FF5 E107                       	smpsAlterNote       $07
00081FF7 E701                       	dc.b	smpsNoAttack, $01
00081FF9 E1FB                       	smpsAlterNote       $FB
00081FFB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081FFE E106                       	smpsAlterNote       $06
00082000 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00082004 E107                       	smpsAlterNote       $07
00082006 9B03                       	dc.b	nD2, $03
00082008 E108                       	smpsAlterNote       $08
0008200A 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00082010 E109                       	smpsAlterNote       $09
00082012 A003 8001                  	dc.b	nG2, $03, nRst, $01
00082016 E1F2                       	smpsAlterNote       $F2
00082018 A401                       	dc.b	nB2, $01
0008201A E1F9                       	smpsAlterNote       $F9
0008201C E701                       	dc.b	smpsNoAttack, $01
0008201E E107                       	smpsAlterNote       $07
00082020 E701                       	dc.b	smpsNoAttack, $01
00082022 E1FB                       	smpsAlterNote       $FB
00082024 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00082027 E106                       	smpsAlterNote       $06
00082029 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008202D E108                       	smpsAlterNote       $08
0008202F 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00082033 E10C                       	smpsAlterNote       $0C
00082035 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00082039 E107                       	smpsAlterNote       $07
0008203B 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00082041 E10B                       	smpsAlterNote       $0B
00082043 A203                       	dc.b	nA2, $03
00082045 E107                       	smpsAlterNote       $07
00082047 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008204B E1F2                       	smpsAlterNote       $F2
0008204D A401                       	dc.b	nB2, $01
0008204F E1FF                       	smpsAlterNote       $FF
00082051 E701                       	dc.b	smpsNoAttack, $01
00082053 E107                       	smpsAlterNote       $07
00082055 E701                       	dc.b	smpsNoAttack, $01
00082057 E1FB                       	smpsAlterNote       $FB
00082059 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008205C E106                       	smpsAlterNote       $06
0008205E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00082062 E107                       	smpsAlterNote       $07
00082064 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00082068 E108                       	smpsAlterNote       $08
0008206A 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00082070 E109                       	smpsAlterNote       $09
00082072 A003 8001                  	dc.b	nG2, $03, nRst, $01
00082076 E1F2                       	smpsAlterNote       $F2
00082078 A401                       	dc.b	nB2, $01
0008207A E1FF                       	smpsAlterNote       $FF
0008207C E701                       	dc.b	smpsNoAttack, $01
0008207E E111                       	smpsAlterNote       $11
00082080 E701                       	dc.b	smpsNoAttack, $01
00082082 E1FB                       	smpsAlterNote       $FB
00082084 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00082087 E106                       	smpsAlterNote       $06
00082089 E702                       	dc.b	smpsNoAttack, $02
0008208B E108                       	smpsAlterNote       $08
0008208D 9C07                       	dc.b	nEb2, $07
0008208F E10C                       	smpsAlterNote       $0C
00082091 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00082095 E107                       	smpsAlterNote       $07
00082097 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008209D E10B                       	smpsAlterNote       $0B
0008209F A202 8001                  	dc.b	nA2, $02, nRst, $01
000820A3 E107                       	smpsAlterNote       $07
000820A5 9B03                       	dc.b	nD2, $03
000820A7 E11A                       	smpsAlterNote       $1A
000820A9 A301                       	dc.b	nBb2, $01
000820AB E1F2                       	smpsAlterNote       $F2
000820AD E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000820B0 E1FF                       	smpsAlterNote       $FF
000820B2 E701                       	dc.b	smpsNoAttack, $01
000820B4 E111                       	smpsAlterNote       $11
000820B6 E701                       	dc.b	smpsNoAttack, $01
000820B8 E106                       	smpsAlterNote       $06
000820BA E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000820BD E107                       	smpsAlterNote       $07
000820BF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000820C3 E108                       	smpsAlterNote       $08
000820C5 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
000820CD E109                       	smpsAlterNote       $09
000820CF A003                       	dc.b	nG2, $03
000820D1 E11A                       	smpsAlterNote       $1A
000820D3 A301                       	dc.b	nBb2, $01
000820D5 E1F2                       	smpsAlterNote       $F2
000820D7 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000820DA E1FF                       	smpsAlterNote       $FF
000820DC E701                       	dc.b	smpsNoAttack, $01
000820DE E111                       	smpsAlterNote       $11
000820E0 E701                       	dc.b	smpsNoAttack, $01
000820E2 E106                       	smpsAlterNote       $06
000820E4 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000820E7 E108                       	smpsAlterNote       $08
000820E9 9C07                       	dc.b	nEb2, $07
000820EB E10C                       	smpsAlterNote       $0C
000820ED A303 8001                  	dc.b	nBb2, $03, nRst, $01
000820F1 E107                       	smpsAlterNote       $07
000820F3 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
000820FF 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00082109 E108                       	smpsAlterNote       $08
0008210B 9C06                       	dc.b	nEb2, $06
0008210D E10C                       	smpsAlterNote       $0C
0008210F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00082113 E108                       	smpsAlterNote       $08
00082115 9C03                       	dc.b	nEb2, $03
00082117 E109                       	smpsAlterNote       $09
00082119 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008211D E10C                       	smpsAlterNote       $0C
0008211F A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00082127 E107                       	smpsAlterNote       $07
00082129 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008212D F6F4 F8                    	smpsJump            music84_Jump04
00082130                            
00082130                            ; FM2 Data
00082130                            music84_FM2:
00082130 E0C0                       	smpsPan             panCenter, $00
00082134 E10B                       	smpsAlterNote       $0B
00082136 C603 8007                  	dc.b	nA5, $03, nRst, $07
0008213A E109                       	smpsAlterNote       $09
0008213C C403 800B                  	dc.b	nG5, $03, nRst, $0B
00082140 E108                       	smpsAlterNote       $08
00082142 C103 8004                  	dc.b	nE5, $03, nRst, $04
00082148 E080                       	smpsPan             panLeft, $00
0008214A E10C                       	smpsAlterNote       $0C
0008214C E6F9                       	smpsAlterVol        $F9
0008214E C703                       	dc.b	nBb5, $03
00082150 E10B                       	smpsAlterNote       $0B
00082152 C603 8001                  	dc.b	nA5, $03, nRst, $01
00082156 E109                       	smpsAlterNote       $09
00082158 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008215E E108                       	smpsAlterNote       $08
00082160 C103 8001                  	dc.b	nE5, $03, nRst, $01
00082164 E106                       	smpsAlterNote       $06
00082166 BD03                       	dc.b	nC5, $03
00082168 E10B                       	smpsAlterNote       $0B
0008216A BA03 8001                  	dc.b	nA4, $03, nRst, $01
00082170 E0C0                       	smpsPan             panCenter, $00
00082172 E107                       	smpsAlterNote       $07
00082174 E606                       	smpsAlterVol        $06
00082176 BF03                       	dc.b	nD5, $03
00082178                            
00082178                            music84_Jump03:
00082178 E108                       	smpsAlterNote       $08
0008217A C103 8001                  	dc.b	nE5, $03, nRst, $01
0008217E E109                       	smpsAlterNote       $09
00082180 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00082186 E10B                       	smpsAlterNote       $0B
00082188 C607                       	dc.b	nA5, $07
0008218A E107                       	smpsAlterNote       $07
0008218C BF03 8001                  	dc.b	nD5, $03, nRst, $01
00082190 E106                       	smpsAlterNote       $06
00082192 C90D                       	dc.b	nC6, $0D
00082194 E100                       	smpsAlterNote       $00
00082196 E701                       	dc.b	smpsNoAttack, $01
00082198 E1FF                       	smpsAlterNote       $FF
0008219A E701                       	dc.b	smpsNoAttack, $01
0008219C E103                       	smpsAlterNote       $03
0008219E E701                       	dc.b	smpsNoAttack, $01
000821A0 E109                       	smpsAlterNote       $09
000821A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000821A6 E106                       	smpsAlterNote       $06
000821A8 E701                       	dc.b	smpsNoAttack, $01
000821AA E100                       	smpsAlterNote       $00
000821AC E701                       	dc.b	smpsNoAttack, $01
000821AE E10C                       	smpsAlterNote       $0C
000821B0 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000821B4 E10B                       	smpsAlterNote       $0B
000821B6 C603                       	dc.b	nA5, $03
000821B8 E109                       	smpsAlterNote       $09
000821BA C403 8001                  	dc.b	nG5, $03, nRst, $01
000821BE E10B                       	smpsAlterNote       $0B
000821C0 C60D                       	dc.b	nA5, $0D
000821C2 E105                       	smpsAlterNote       $05
000821C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000821C8 E10B                       	smpsAlterNote       $0B
000821CA E701                       	dc.b	smpsNoAttack, $01
000821CC E10E                       	smpsAlterNote       $0E
000821CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000821D2 E108                       	smpsAlterNote       $08
000821D4 E701                       	dc.b	smpsNoAttack, $01
000821D6 E104                       	smpsAlterNote       $04
000821D8 E701                       	dc.b	smpsNoAttack, $01
000821DA E105                       	smpsAlterNote       $05
000821DC E701                       	dc.b	smpsNoAttack, $01
000821DE E10B                       	smpsAlterNote       $0B
000821E0 E701                       	dc.b	smpsNoAttack, $01
000821E2 E10F                       	smpsAlterNote       $0F
000821E4 E701                       	dc.b	smpsNoAttack, $01
000821E6 E10B                       	smpsAlterNote       $0B
000821E8 E701                       	dc.b	smpsNoAttack, $01
000821EA E108                       	smpsAlterNote       $08
000821EC E701                       	dc.b	smpsNoAttack, $01
000821EE E104                       	smpsAlterNote       $04
000821F0 E701                       	dc.b	smpsNoAttack, $01
000821F2 E108                       	smpsAlterNote       $08
000821F4 E701                       	dc.b	smpsNoAttack, $01
000821F6 E10E                       	smpsAlterNote       $0E
000821F8 E701                       	dc.b	smpsNoAttack, $01
000821FA E10F                       	smpsAlterNote       $0F
000821FC E701                       	dc.b	smpsNoAttack, $01
000821FE E10B                       	smpsAlterNote       $0B
00082200 E701                       	dc.b	smpsNoAttack, $01
00082202 E105                       	smpsAlterNote       $05
00082204 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082208 E108                       	smpsAlterNote       $08
0008220A E701                       	dc.b	smpsNoAttack, $01
0008220C E10E                       	smpsAlterNote       $0E
0008220E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082212 E108                       	smpsAlterNote       $08
00082214 E701                       	dc.b	smpsNoAttack, $01
00082216 E105                       	smpsAlterNote       $05
00082218 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008221C E10B                       	smpsAlterNote       $0B
0008221E E701                       	dc.b	smpsNoAttack, $01
00082220 E10F                       	smpsAlterNote       $0F
00082222 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00082226 E107                       	smpsAlterNote       $07
00082228 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008222C E108                       	smpsAlterNote       $08
0008222E C103                       	dc.b	nE5, $03
00082230 E109                       	smpsAlterNote       $09
00082232 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008223A E10B                       	smpsAlterNote       $0B
0008223C C606 8001                  	dc.b	nA5, $06, nRst, $01
00082240 E107                       	smpsAlterNote       $07
00082242 BF03                       	dc.b	nD5, $03
00082244 E106                       	smpsAlterNote       $06
00082246 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0008224A E107                       	smpsAlterNote       $07
0008224C CB03                       	dc.b	nD6, $03
0008224E E10C                       	smpsAlterNote       $0C
00082250 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00082254 E10B                       	smpsAlterNote       $0B
00082256 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008225A E109                       	smpsAlterNote       $09
0008225C C404                       	dc.b	nG5, $04
0008225E E10B                       	smpsAlterNote       $0B
00082260 C60D                       	dc.b	nA5, $0D
00082262 E108                       	smpsAlterNote       $08
00082264 E701                       	dc.b	smpsNoAttack, $01
00082266 E104                       	smpsAlterNote       $04
00082268 E701                       	dc.b	smpsNoAttack, $01
0008226A E108                       	smpsAlterNote       $08
0008226C E701                       	dc.b	smpsNoAttack, $01
0008226E E10B                       	smpsAlterNote       $0B
00082270 E701                       	dc.b	smpsNoAttack, $01
00082272 E10F                       	smpsAlterNote       $0F
00082274 E701                       	dc.b	smpsNoAttack, $01
00082276 E10B                       	smpsAlterNote       $0B
00082278 E701                       	dc.b	smpsNoAttack, $01
0008227A E105                       	smpsAlterNote       $05
0008227C E701                       	dc.b	smpsNoAttack, $01
0008227E E104                       	smpsAlterNote       $04
00082280 E701                       	dc.b	smpsNoAttack, $01
00082282 E108                       	smpsAlterNote       $08
00082284 E701                       	dc.b	smpsNoAttack, $01
00082286 E10E                       	smpsAlterNote       $0E
00082288 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008228C E10B                       	smpsAlterNote       $0B
0008228E E701                       	dc.b	smpsNoAttack, $01
00082290 E105                       	smpsAlterNote       $05
00082292 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082296 E10B                       	smpsAlterNote       $0B
00082298 E701                       	dc.b	smpsNoAttack, $01
0008229A E10E                       	smpsAlterNote       $0E
0008229C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000822A0 E108                       	smpsAlterNote       $08
000822A2 E701                       	dc.b	smpsNoAttack, $01
000822A4 E104                       	smpsAlterNote       $04
000822A6 E701                       	dc.b	smpsNoAttack, $01
000822A8 E105                       	smpsAlterNote       $05
000822AA E701                       	dc.b	smpsNoAttack, $01
000822AC E10B                       	smpsAlterNote       $0B
000822AE E701                       	dc.b	smpsNoAttack, $01
000822B0 E10F                       	smpsAlterNote       $0F
000822B2 E701                       	dc.b	smpsNoAttack, $01
000822B4 E10B                       	smpsAlterNote       $0B
000822B6 E701                       	dc.b	smpsNoAttack, $01
000822B8 E108                       	smpsAlterNote       $08
000822BA E701                       	dc.b	smpsNoAttack, $01
000822BC E105                       	smpsAlterNote       $05
000822BE 8001                       	dc.b	nRst, $01
000822C0 E109                       	smpsAlterNote       $09
000822C2 C401                       	dc.b	nG5, $01
000822C4 E10B                       	smpsAlterNote       $0B
000822C6 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000822CF E109                       	smpsAlterNote       $09
000822D1 C404 8001                  	dc.b	nG5, $04, nRst, $01
000822D5 E10B                       	smpsAlterNote       $0B
000822D7 C604 8001                  	dc.b	nA5, $04, nRst, $01
000822DB E107                       	smpsAlterNote       $07
000822DD BF0D                       	dc.b	nD5, $0D
000822DF E101                       	smpsAlterNote       $01
000822E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000822E5 E104                       	smpsAlterNote       $04
000822E7 E701                       	dc.b	smpsNoAttack, $01
000822E9 E10A                       	smpsAlterNote       $0A
000822EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000822EF E104                       	smpsAlterNote       $04
000822F1 E701                       	dc.b	smpsNoAttack, $01
000822F3 E101                       	smpsAlterNote       $01
000822F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000822F9 E107                       	smpsAlterNote       $07
000822FB E701                       	dc.b	smpsNoAttack, $01
000822FD E10B                       	smpsAlterNote       $0B
000822FF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00082303 E108                       	smpsAlterNote       $08
00082305 C101                       	dc.b	nE5, $01
00082307 E109                       	smpsAlterNote       $09
00082309 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008230E E10B                       	smpsAlterNote       $0B
00082310 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00082318 E108                       	smpsAlterNote       $08
0008231A CD06                       	dc.b	nE6, $06
0008231C E109                       	smpsAlterNote       $09
0008231E CE07                       	dc.b	nF6, $07
00082320 E108                       	smpsAlterNote       $08
00082322 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00082326 E106                       	smpsAlterNote       $06
00082328 C903                       	dc.b	nC6, $03
0008232A E109                       	smpsAlterNote       $09
0008232C C403 8001                  	dc.b	nG5, $03, nRst, $01
00082330 E10C                       	smpsAlterNote       $0C
00082332 C70D                       	dc.b	nBb5, $0D
00082334 E106                       	smpsAlterNote       $06
00082336 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008233A E109                       	smpsAlterNote       $09
0008233C E701                       	dc.b	smpsNoAttack, $01
0008233E E10F                       	smpsAlterNote       $0F
00082340 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082344 E109                       	smpsAlterNote       $09
00082346 E701                       	dc.b	smpsNoAttack, $01
00082348 E106                       	smpsAlterNote       $06
0008234A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008234E E10C                       	smpsAlterNote       $0C
00082350 E701                       	dc.b	smpsNoAttack, $01
00082352 E110                       	smpsAlterNote       $10
00082354 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00082358 E10B                       	smpsAlterNote       $0B
0008235A C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0008235E E105                       	smpsAlterNote       $05
00082360 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082364 E10B                       	smpsAlterNote       $0B
00082366 E701                       	dc.b	smpsNoAttack, $01
00082368 E10E                       	smpsAlterNote       $0E
0008236A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008236E E108                       	smpsAlterNote       $08
00082370 E701                       	dc.b	smpsNoAttack, $01
00082372 E104                       	smpsAlterNote       $04
00082374 E701                       	dc.b	smpsNoAttack, $01
00082376 E105                       	smpsAlterNote       $05
00082378 E701                       	dc.b	smpsNoAttack, $01
0008237A E10B                       	smpsAlterNote       $0B
0008237C E701                       	dc.b	smpsNoAttack, $01
0008237E E10F                       	smpsAlterNote       $0F
00082380 E701                       	dc.b	smpsNoAttack, $01
00082382 E10B                       	smpsAlterNote       $0B
00082384 E701                       	dc.b	smpsNoAttack, $01
00082386 E108                       	smpsAlterNote       $08
00082388 E701                       	dc.b	smpsNoAttack, $01
0008238A E104                       	smpsAlterNote       $04
0008238C E701                       	dc.b	smpsNoAttack, $01
0008238E E108                       	smpsAlterNote       $08
00082390 E701                       	dc.b	smpsNoAttack, $01
00082392 E10E                       	smpsAlterNote       $0E
00082394 E701                       	dc.b	smpsNoAttack, $01
00082396 E10F                       	smpsAlterNote       $0F
00082398 E701                       	dc.b	smpsNoAttack, $01
0008239A E10B                       	smpsAlterNote       $0B
0008239C E701                       	dc.b	smpsNoAttack, $01
0008239E E105                       	smpsAlterNote       $05
000823A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000823A4 E108                       	smpsAlterNote       $08
000823A6 E701                       	dc.b	smpsNoAttack, $01
000823A8 E10E                       	smpsAlterNote       $0E
000823AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000823AE E108                       	smpsAlterNote       $08
000823B0 E701                       	dc.b	smpsNoAttack, $01
000823B2 E105                       	smpsAlterNote       $05
000823B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000823B8 E10B                       	smpsAlterNote       $0B
000823BA E701                       	dc.b	smpsNoAttack, $01
000823BC E10F                       	smpsAlterNote       $0F
000823BE E701                       	dc.b	smpsNoAttack, $01
000823C0 E10E                       	smpsAlterNote       $0E
000823C2 E701                       	dc.b	smpsNoAttack, $01
000823C4 E108                       	smpsAlterNote       $08
000823C6 E701                       	dc.b	smpsNoAttack, $01
000823C8 E104                       	smpsAlterNote       $04
000823CA E701                       	dc.b	smpsNoAttack, $01
000823CC E108                       	smpsAlterNote       $08
000823CE E701                       	dc.b	smpsNoAttack, $01
000823D0 E10E                       	smpsAlterNote       $0E
000823D2 E701                       	dc.b	smpsNoAttack, $01
000823D4 E10F                       	smpsAlterNote       $0F
000823D6 E701                       	dc.b	smpsNoAttack, $01
000823D8 E10B                       	smpsAlterNote       $0B
000823DA E701                       	dc.b	smpsNoAttack, $01
000823DC E105                       	smpsAlterNote       $05
000823DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000823E2 E108                       	smpsAlterNote       $08
000823E4 E701                       	dc.b	smpsNoAttack, $01
000823E6 E10E                       	smpsAlterNote       $0E
000823E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000823EC E108                       	smpsAlterNote       $08
000823EE E701                       	dc.b	smpsNoAttack, $01
000823F0 E105                       	smpsAlterNote       $05
000823F2 E701                       	dc.b	smpsNoAttack, $01
000823F4 E10B                       	smpsAlterNote       $0B
000823F6 C60D                       	dc.b	nA5, $0D
000823F8 E108                       	smpsAlterNote       $08
000823FA E701                       	dc.b	smpsNoAttack, $01
000823FC E104                       	smpsAlterNote       $04
000823FE E701                       	dc.b	smpsNoAttack, $01
00082400 E105                       	smpsAlterNote       $05
00082402 E701                       	dc.b	smpsNoAttack, $01
00082404 E10B                       	smpsAlterNote       $0B
00082406 E701                       	dc.b	smpsNoAttack, $01
00082408 E10F                       	smpsAlterNote       $0F
0008240A E701                       	dc.b	smpsNoAttack, $01
0008240C E10B                       	smpsAlterNote       $0B
0008240E E701                       	dc.b	smpsNoAttack, $01
00082410 E108                       	smpsAlterNote       $08
00082412 E701                       	dc.b	smpsNoAttack, $01
00082414 E104                       	smpsAlterNote       $04
00082416 E701                       	dc.b	smpsNoAttack, $01
00082418 E108                       	smpsAlterNote       $08
0008241A E701                       	dc.b	smpsNoAttack, $01
0008241C E10E                       	smpsAlterNote       $0E
0008241E E701                       	dc.b	smpsNoAttack, $01
00082420 E10F                       	smpsAlterNote       $0F
00082422 E701                       	dc.b	smpsNoAttack, $01
00082426 E109                       	smpsAlterNote       $09
00082428 E6FF                       	smpsAlterVol        $FF
0008242A C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00082434 E108                       	smpsAlterNote       $08
00082436 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008243C E107                       	smpsAlterNote       $07
0008243E E601                       	smpsAlterVol        $01
00082440 BF03                       	dc.b	nD5, $03
00082442 E108                       	smpsAlterNote       $08
00082444 C103 8001                  	dc.b	nE5, $03, nRst, $01
00082448 E109                       	smpsAlterNote       $09
0008244A C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00082450 E10B                       	smpsAlterNote       $0B
00082452 C606 8001                  	dc.b	nA5, $06, nRst, $01
00082456 E107                       	smpsAlterNote       $07
00082458 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008245C E106                       	smpsAlterNote       $06
0008245E C90D                       	dc.b	nC6, $0D
00082460 E103                       	smpsAlterNote       $03
00082462 E701                       	dc.b	smpsNoAttack, $01
00082464 E1FF                       	smpsAlterNote       $FF
00082466 E701                       	dc.b	smpsNoAttack, $01
00082468 E103                       	smpsAlterNote       $03
0008246A E701                       	dc.b	smpsNoAttack, $01
0008246C E109                       	smpsAlterNote       $09
0008246E E701                       	dc.b	smpsNoAttack, $01
00082470 E10A                       	smpsAlterNote       $0A
00082472 E701                       	dc.b	smpsNoAttack, $01
00082474 E106                       	smpsAlterNote       $06
00082476 E701                       	dc.b	smpsNoAttack, $01
00082478 E100                       	smpsAlterNote       $00
0008247A E701                       	dc.b	smpsNoAttack, $01
0008247C E10C                       	smpsAlterNote       $0C
0008247E C703 8001                  	dc.b	nBb5, $03, nRst, $01
00082482 E10B                       	smpsAlterNote       $0B
00082484 C603                       	dc.b	nA5, $03
00082486 E109                       	smpsAlterNote       $09
00082488 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008248C E10B                       	smpsAlterNote       $0B
0008248E C60D                       	dc.b	nA5, $0D
00082490 E105                       	smpsAlterNote       $05
00082492 E701                       	dc.b	smpsNoAttack, $01
00082494 E104                       	smpsAlterNote       $04
00082496 E701                       	dc.b	smpsNoAttack, $01
00082498 E108                       	smpsAlterNote       $08
0008249A E701                       	dc.b	smpsNoAttack, $01
0008249C E10E                       	smpsAlterNote       $0E
0008249E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000824A2 E10B                       	smpsAlterNote       $0B
000824A4 E701                       	dc.b	smpsNoAttack, $01
000824A6 E105                       	smpsAlterNote       $05
000824A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000824AC E10B                       	smpsAlterNote       $0B
000824AE E701                       	dc.b	smpsNoAttack, $01
000824B0 E10E                       	smpsAlterNote       $0E
000824B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000824B6 E108                       	smpsAlterNote       $08
000824B8 E701                       	dc.b	smpsNoAttack, $01
000824BA E104                       	smpsAlterNote       $04
000824BC E701                       	dc.b	smpsNoAttack, $01
000824BE E105                       	smpsAlterNote       $05
000824C0 E701                       	dc.b	smpsNoAttack, $01
000824C2 E10B                       	smpsAlterNote       $0B
000824C4 E701                       	dc.b	smpsNoAttack, $01
000824C6 E10F                       	smpsAlterNote       $0F
000824C8 E701                       	dc.b	smpsNoAttack, $01
000824CA E10B                       	smpsAlterNote       $0B
000824CC E701                       	dc.b	smpsNoAttack, $01
000824CE E108                       	smpsAlterNote       $08
000824D0 E701                       	dc.b	smpsNoAttack, $01
000824D2 E104                       	smpsAlterNote       $04
000824D4 E701                       	dc.b	smpsNoAttack, $01
000824D6 E108                       	smpsAlterNote       $08
000824D8 E701                       	dc.b	smpsNoAttack, $01
000824DA E10E                       	smpsAlterNote       $0E
000824DC E701                       	dc.b	smpsNoAttack, $01
000824DE E10F                       	smpsAlterNote       $0F
000824E0 E701                       	dc.b	smpsNoAttack, $01
000824E2 E10B                       	smpsAlterNote       $0B
000824E4 E701                       	dc.b	smpsNoAttack, $01
000824E6 E105                       	smpsAlterNote       $05
000824E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000824EC E108                       	smpsAlterNote       $08
000824EE E701                       	dc.b	smpsNoAttack, $01
000824F0 E10E                       	smpsAlterNote       $0E
000824F2 E701                       	dc.b	smpsNoAttack, $01
000824F4 E10F                       	smpsAlterNote       $0F
000824F6 800F                       	dc.b	nRst, $0F
000824F8 E107                       	smpsAlterNote       $07
000824FA BF02 8001                  	dc.b	nD5, $02, nRst, $01
000824FE E108                       	smpsAlterNote       $08
00082500 C103                       	dc.b	nE5, $03
00082502 E109                       	smpsAlterNote       $09
00082504 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008250A E10B                       	smpsAlterNote       $0B
0008250C C606 8001                  	dc.b	nA5, $06, nRst, $01
00082510 E107                       	smpsAlterNote       $07
00082512 BF03                       	dc.b	nD5, $03
00082514 E106                       	smpsAlterNote       $06
00082516 C90E                       	dc.b	nC6, $0E
00082518 E107                       	smpsAlterNote       $07
0008251A CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008251E E10C                       	smpsAlterNote       $0C
00082520 C704                       	dc.b	nBb5, $04
00082522 E10B                       	smpsAlterNote       $0B
00082524 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082528 E109                       	smpsAlterNote       $09
0008252A C404                       	dc.b	nG5, $04
0008252C E10B                       	smpsAlterNote       $0B
0008252E C60D                       	dc.b	nA5, $0D
00082530 E108                       	smpsAlterNote       $08
00082532 E701                       	dc.b	smpsNoAttack, $01
00082534 E105                       	smpsAlterNote       $05
00082536 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008253A E10B                       	smpsAlterNote       $0B
0008253C E701                       	dc.b	smpsNoAttack, $01
0008253E E10F                       	smpsAlterNote       $0F
00082540 E701                       	dc.b	smpsNoAttack, $01
00082542 E10E                       	smpsAlterNote       $0E
00082544 E701                       	dc.b	smpsNoAttack, $01
00082546 E108                       	smpsAlterNote       $08
00082548 E701                       	dc.b	smpsNoAttack, $01
0008254A E104                       	smpsAlterNote       $04
0008254C E701                       	dc.b	smpsNoAttack, $01
0008254E E108                       	smpsAlterNote       $08
00082550 E701                       	dc.b	smpsNoAttack, $01
00082552 E10B                       	smpsAlterNote       $0B
00082554 E701                       	dc.b	smpsNoAttack, $01
00082556 E10F                       	smpsAlterNote       $0F
00082558 E701                       	dc.b	smpsNoAttack, $01
0008255A E10B                       	smpsAlterNote       $0B
0008255C E701                       	dc.b	smpsNoAttack, $01
0008255E E105                       	smpsAlterNote       $05
00082560 E701                       	dc.b	smpsNoAttack, $01
00082562 E104                       	smpsAlterNote       $04
00082564 E701                       	dc.b	smpsNoAttack, $01
00082566 E108                       	smpsAlterNote       $08
00082568 E701                       	dc.b	smpsNoAttack, $01
0008256A E10E                       	smpsAlterNote       $0E
0008256C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082570 E10B                       	smpsAlterNote       $0B
00082572 E701                       	dc.b	smpsNoAttack, $01
00082574 E105                       	smpsAlterNote       $05
00082576 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008257A E10B                       	smpsAlterNote       $0B
0008257C E701                       	dc.b	smpsNoAttack, $01
0008257E E10E                       	smpsAlterNote       $0E
00082580 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082584 E108                       	smpsAlterNote       $08
00082586 E701                       	dc.b	smpsNoAttack, $01
00082588 E105                       	smpsAlterNote       $05
0008258A 8001                       	dc.b	nRst, $01
0008258C E109                       	smpsAlterNote       $09
0008258E C402                       	dc.b	nG5, $02
00082590 E10B                       	smpsAlterNote       $0B
00082592 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008259B E109                       	smpsAlterNote       $09
0008259D C404                       	dc.b	nG5, $04
0008259F E10B                       	smpsAlterNote       $0B
000825A1 C604 8001                  	dc.b	nA5, $04, nRst, $01
000825A5 E107                       	smpsAlterNote       $07
000825A7 BF0D                       	dc.b	nD5, $0D
000825A9 E101                       	smpsAlterNote       $01
000825AB E701                       	dc.b	smpsNoAttack, $01
000825AD E100                       	smpsAlterNote       $00
000825AF E701                       	dc.b	smpsNoAttack, $01
000825B1 E104                       	smpsAlterNote       $04
000825B3 E701                       	dc.b	smpsNoAttack, $01
000825B5 E10A                       	smpsAlterNote       $0A
000825B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000825BB E107                       	smpsAlterNote       $07
000825BD E701                       	dc.b	smpsNoAttack, $01
000825BF E101                       	smpsAlterNote       $01
000825C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000825C5 E107                       	smpsAlterNote       $07
000825C7 E701                       	dc.b	smpsNoAttack, $01
000825C9 E10A                       	smpsAlterNote       $0A
000825CB E701                       	dc.b	smpsNoAttack, $01
000825CD E10B                       	smpsAlterNote       $0B
000825CF 8001                       	dc.b	nRst, $01
000825D1 E108                       	smpsAlterNote       $08
000825D3 C101                       	dc.b	nE5, $01
000825D5 E109                       	smpsAlterNote       $09
000825D7 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000825DC E10B                       	smpsAlterNote       $0B
000825DE C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000825E6 E108                       	smpsAlterNote       $08
000825E8 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000825EC E109                       	smpsAlterNote       $09
000825EE CE06 8001                  	dc.b	nF6, $06, nRst, $01
000825F2 E108                       	smpsAlterNote       $08
000825F4 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000825F8 E106                       	smpsAlterNote       $06
000825FA C903                       	dc.b	nC6, $03
000825FC E109                       	smpsAlterNote       $09
000825FE C403 8001                  	dc.b	nG5, $03, nRst, $01
00082602 E10C                       	smpsAlterNote       $0C
00082604 C70D                       	dc.b	nBb5, $0D
00082606 E109                       	smpsAlterNote       $09
00082608 E701                       	dc.b	smpsNoAttack, $01
0008260A E105                       	smpsAlterNote       $05
0008260C E701                       	dc.b	smpsNoAttack, $01
0008260E E109                       	smpsAlterNote       $09
00082610 E701                       	dc.b	smpsNoAttack, $01
00082612 E10F                       	smpsAlterNote       $0F
00082614 E701                       	dc.b	smpsNoAttack, $01
00082616 E110                       	smpsAlterNote       $10
00082618 E701                       	dc.b	smpsNoAttack, $01
0008261A E10C                       	smpsAlterNote       $0C
0008261C E701                       	dc.b	smpsNoAttack, $01
0008261E E106                       	smpsAlterNote       $06
00082620 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082624 E109                       	smpsAlterNote       $09
00082626 E701                       	dc.b	smpsNoAttack, $01
00082628 E10F                       	smpsAlterNote       $0F
0008262A E701                       	dc.b	smpsNoAttack, $01
0008262C E110                       	smpsAlterNote       $10
0008262E 8001                       	dc.b	nRst, $01
00082630 E10B                       	smpsAlterNote       $0B
00082632 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00082638 E105                       	smpsAlterNote       $05
0008263A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008263E E108                       	smpsAlterNote       $08
00082640 E701                       	dc.b	smpsNoAttack, $01
00082642 E10E                       	smpsAlterNote       $0E
00082644 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082648 E108                       	smpsAlterNote       $08
0008264A E701                       	dc.b	smpsNoAttack, $01
0008264C E105                       	smpsAlterNote       $05
0008264E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082652 E10B                       	smpsAlterNote       $0B
00082654 E701                       	dc.b	smpsNoAttack, $01
00082656 E10F                       	smpsAlterNote       $0F
00082658 E701                       	dc.b	smpsNoAttack, $01
0008265A E10E                       	smpsAlterNote       $0E
0008265C E701                       	dc.b	smpsNoAttack, $01
0008265E E108                       	smpsAlterNote       $08
00082660 E701                       	dc.b	smpsNoAttack, $01
00082662 E104                       	smpsAlterNote       $04
00082664 E701                       	dc.b	smpsNoAttack, $01
00082666 E108                       	smpsAlterNote       $08
00082668 E701                       	dc.b	smpsNoAttack, $01
0008266A E10B                       	smpsAlterNote       $0B
0008266C E701                       	dc.b	smpsNoAttack, $01
0008266E E10F                       	smpsAlterNote       $0F
00082670 E701                       	dc.b	smpsNoAttack, $01
00082672 E10B                       	smpsAlterNote       $0B
00082674 E701                       	dc.b	smpsNoAttack, $01
00082676 E105                       	smpsAlterNote       $05
00082678 E701                       	dc.b	smpsNoAttack, $01
0008267A E104                       	smpsAlterNote       $04
0008267C E701                       	dc.b	smpsNoAttack, $01
0008267E E108                       	smpsAlterNote       $08
00082680 E701                       	dc.b	smpsNoAttack, $01
00082682 E10E                       	smpsAlterNote       $0E
00082684 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082688 E10B                       	smpsAlterNote       $0B
0008268A E701                       	dc.b	smpsNoAttack, $01
0008268C E105                       	smpsAlterNote       $05
0008268E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082692 E10B                       	smpsAlterNote       $0B
00082694 E701                       	dc.b	smpsNoAttack, $01
00082696 E10E                       	smpsAlterNote       $0E
00082698 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008269C E108                       	smpsAlterNote       $08
0008269E E701                       	dc.b	smpsNoAttack, $01
000826A0 E104                       	smpsAlterNote       $04
000826A2 E701                       	dc.b	smpsNoAttack, $01
000826A4 E105                       	smpsAlterNote       $05
000826A6 E701                       	dc.b	smpsNoAttack, $01
000826A8 E10B                       	smpsAlterNote       $0B
000826AA E701                       	dc.b	smpsNoAttack, $01
000826AC E10F                       	smpsAlterNote       $0F
000826AE E701                       	dc.b	smpsNoAttack, $01
000826B0 E10B                       	smpsAlterNote       $0B
000826B2 E701                       	dc.b	smpsNoAttack, $01
000826B4 E108                       	smpsAlterNote       $08
000826B6 E701                       	dc.b	smpsNoAttack, $01
000826B8 E104                       	smpsAlterNote       $04
000826BA E701                       	dc.b	smpsNoAttack, $01
000826BC E108                       	smpsAlterNote       $08
000826BE E701                       	dc.b	smpsNoAttack, $01
000826C0 E10E                       	smpsAlterNote       $0E
000826C2 E701                       	dc.b	smpsNoAttack, $01
000826C4 E10F                       	smpsAlterNote       $0F
000826C6 E701                       	dc.b	smpsNoAttack, $01
000826C8 E10B                       	smpsAlterNote       $0B
000826CA E701                       	dc.b	smpsNoAttack, $01
000826CC E105                       	smpsAlterNote       $05
000826CE E701                       	dc.b	smpsNoAttack, $01
000826D0 E10B                       	smpsAlterNote       $0B
000826D2 C60E                       	dc.b	nA5, $0E
000826D4 E105                       	smpsAlterNote       $05
000826D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000826DA E10B                       	smpsAlterNote       $0B
000826DC E701                       	dc.b	smpsNoAttack, $01
000826DE E10E                       	smpsAlterNote       $0E
000826E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000826E4 E108                       	smpsAlterNote       $08
000826E6 E701                       	dc.b	smpsNoAttack, $01
000826E8 E104                       	smpsAlterNote       $04
000826EA E701                       	dc.b	smpsNoAttack, $01
000826EC E105                       	smpsAlterNote       $05
000826EE E701                       	dc.b	smpsNoAttack, $01
000826F0 E10B                       	smpsAlterNote       $0B
000826F2 E701                       	dc.b	smpsNoAttack, $01
000826F4 E10F                       	smpsAlterNote       $0F
000826F6 E701                       	dc.b	smpsNoAttack, $01
000826F8 E10B                       	smpsAlterNote       $0B
000826FA E701                       	dc.b	smpsNoAttack, $01
000826FC E108                       	smpsAlterNote       $08
000826FE E701                       	dc.b	smpsNoAttack, $01
00082700 E104                       	smpsAlterNote       $04
00082702 E701                       	dc.b	smpsNoAttack, $01
00082704 E108                       	smpsAlterNote       $08
00082706 E701                       	dc.b	smpsNoAttack, $01
00082708 E10E                       	smpsAlterNote       $0E
0008270A E701                       	dc.b	smpsNoAttack, $01
0008270C E10F                       	smpsAlterNote       $0F
0008270E E701                       	dc.b	smpsNoAttack, $01
00082710 E10B                       	smpsAlterNote       $0B
00082712 E701                       	dc.b	smpsNoAttack, $01
00082714 E105                       	smpsAlterNote       $05
00082716 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008271A E108                       	smpsAlterNote       $08
0008271C E701                       	dc.b	smpsNoAttack, $01
0008271E E10E                       	smpsAlterNote       $0E
00082720 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082724 E108                       	smpsAlterNote       $08
00082726 E701                       	dc.b	smpsNoAttack, $01
00082728 E105                       	smpsAlterNote       $05
0008272A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008272E E10B                       	smpsAlterNote       $0B
00082730 E701                       	dc.b	smpsNoAttack, $01
00082732 E10F                       	smpsAlterNote       $0F
00082734 E701                       	dc.b	smpsNoAttack, $01
00082736 E10E                       	smpsAlterNote       $0E
00082738 E701                       	dc.b	smpsNoAttack, $01
0008273A E108                       	smpsAlterNote       $08
0008273C E701                       	dc.b	smpsNoAttack, $01
0008273E E104                       	smpsAlterNote       $04
00082740 E701                       	dc.b	smpsNoAttack, $01
00082742 E108                       	smpsAlterNote       $08
00082744 E701                       	dc.b	smpsNoAttack, $01
00082746 E10E                       	smpsAlterNote       $0E
00082748 E701                       	dc.b	smpsNoAttack, $01
0008274A E10F                       	smpsAlterNote       $0F
0008274C E701                       	dc.b	smpsNoAttack, $01
0008274E E10B                       	smpsAlterNote       $0B
00082750 E701                       	dc.b	smpsNoAttack, $01
00082752 E105                       	smpsAlterNote       $05
00082754 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082758 E108                       	smpsAlterNote       $08
0008275A E701                       	dc.b	smpsNoAttack, $01
0008275C E10E                       	smpsAlterNote       $0E
0008275E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082762 E108                       	smpsAlterNote       $08
00082764 E701                       	dc.b	smpsNoAttack, $01
00082766 E105                       	smpsAlterNote       $05
00082768 E701                       	dc.b	smpsNoAttack, $01
0008276C E10B                       	smpsAlterNote       $0B
0008276E E6FD                       	smpsAlterVol        $FD
00082770 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082774 E109                       	smpsAlterNote       $09
00082776 C404                       	dc.b	nG5, $04
00082778 E10B                       	smpsAlterNote       $0B
0008277A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008277E E107                       	smpsAlterNote       $07
00082780 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00082786 E10B                       	smpsAlterNote       $0B
00082788 C604                       	dc.b	nA5, $04
0008278A E109                       	smpsAlterNote       $09
0008278C C404 8001                  	dc.b	nG5, $04, nRst, $01
00082790 E10B                       	smpsAlterNote       $0B
00082792 C604                       	dc.b	nA5, $04
00082794 E108                       	smpsAlterNote       $08
00082796 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
0008279E E106                       	smpsAlterNote       $06
000827A0 C904 8001                  	dc.b	nC6, $04, nRst, $01
000827A4 E10C                       	smpsAlterNote       $0C
000827A6 C704                       	dc.b	nBb5, $04
000827A8 E10B                       	smpsAlterNote       $0B
000827AA C604 8001                  	dc.b	nA5, $04, nRst, $01
000827AE E109                       	smpsAlterNote       $09
000827B0 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000827BA E10B                       	smpsAlterNote       $0B
000827BC C60D                       	dc.b	nA5, $0D
000827BE E108                       	smpsAlterNote       $08
000827C0 E701                       	dc.b	smpsNoAttack, $01
000827C2 E104                       	smpsAlterNote       $04
000827C4 E701                       	dc.b	smpsNoAttack, $01
000827C6 E108                       	smpsAlterNote       $08
000827C8 E701                       	dc.b	smpsNoAttack, $01
000827CA E10E                       	smpsAlterNote       $0E
000827CC E701                       	dc.b	smpsNoAttack, $01
000827CE E10F                       	smpsAlterNote       $0F
000827D0 E701                       	dc.b	smpsNoAttack, $01
000827D2 E10B                       	smpsAlterNote       $0B
000827D4 E701                       	dc.b	smpsNoAttack, $01
000827D6 E105                       	smpsAlterNote       $05
000827D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000827DC E108                       	smpsAlterNote       $08
000827DE E701                       	dc.b	smpsNoAttack, $01
000827E0 E10E                       	smpsAlterNote       $0E
000827E2 E701                       	dc.b	smpsNoAttack, $01
000827E4 E10F                       	smpsAlterNote       $0F
000827E6 8001                       	dc.b	nRst, $01
000827E8 E109                       	smpsAlterNote       $09
000827EA C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000827F0 E108                       	smpsAlterNote       $08
000827F2 C10D                       	dc.b	nE5, $0D
000827F4 E102                       	smpsAlterNote       $02
000827F6 E701                       	dc.b	smpsNoAttack, $01
000827F8 E101                       	smpsAlterNote       $01
000827FA E701                       	dc.b	smpsNoAttack, $01
000827FC E105                       	smpsAlterNote       $05
000827FE E701                       	dc.b	smpsNoAttack, $01
00082800 E10B                       	smpsAlterNote       $0B
00082802 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082806 E108                       	smpsAlterNote       $08
00082808 E701                       	dc.b	smpsNoAttack, $01
0008280A E102                       	smpsAlterNote       $02
0008280C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082810 E108                       	smpsAlterNote       $08
00082812 E701                       	dc.b	smpsNoAttack, $01
00082814 E10B                       	smpsAlterNote       $0B
00082816 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008281A E105                       	smpsAlterNote       $05
0008281C E701                       	dc.b	smpsNoAttack, $01
0008281E E101                       	smpsAlterNote       $01
00082820 E701                       	dc.b	smpsNoAttack, $01
00082822 E102                       	smpsAlterNote       $02
00082824 E701                       	dc.b	smpsNoAttack, $01
00082826 E108                       	smpsAlterNote       $08
00082828 E701                       	dc.b	smpsNoAttack, $01
0008282A E10C                       	smpsAlterNote       $0C
0008282C E701                       	dc.b	smpsNoAttack, $01
0008282E E108                       	smpsAlterNote       $08
00082830 E701                       	dc.b	smpsNoAttack, $01
00082832 E105                       	smpsAlterNote       $05
00082834 E701                       	dc.b	smpsNoAttack, $01
00082836 E101                       	smpsAlterNote       $01
00082838 E701                       	dc.b	smpsNoAttack, $01
0008283A E105                       	smpsAlterNote       $05
0008283C E701                       	dc.b	smpsNoAttack, $01
0008283E E10B                       	smpsAlterNote       $0B
00082840 E701                       	dc.b	smpsNoAttack, $01
00082842 E10C                       	smpsAlterNote       $0C
00082844 E701                       	dc.b	smpsNoAttack, $01
00082846 E108                       	smpsAlterNote       $08
00082848 E701                       	dc.b	smpsNoAttack, $01
0008284A E102                       	smpsAlterNote       $02
0008284C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082850 E105                       	smpsAlterNote       $05
00082852 E701                       	dc.b	smpsNoAttack, $01
00082854 E10B                       	smpsAlterNote       $0B
00082856 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008285A E105                       	smpsAlterNote       $05
0008285C E701                       	dc.b	smpsNoAttack, $01
0008285E E102                       	smpsAlterNote       $02
00082860 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082864 E108                       	smpsAlterNote       $08
00082866 E701                       	dc.b	smpsNoAttack, $01
00082868 E10C                       	smpsAlterNote       $0C
0008286A E701                       	dc.b	smpsNoAttack, $01
0008286C E10B                       	smpsAlterNote       $0B
0008286E E701                       	dc.b	smpsNoAttack, $01
00082870 E105                       	smpsAlterNote       $05
00082872 E701                       	dc.b	smpsNoAttack, $01
00082874 E101                       	smpsAlterNote       $01
00082876 E701                       	dc.b	smpsNoAttack, $01
00082878 E105                       	smpsAlterNote       $05
0008287A E701                       	dc.b	smpsNoAttack, $01
0008287C E108                       	smpsAlterNote       $08
0008287E E701                       	dc.b	smpsNoAttack, $01
00082880 E10C                       	smpsAlterNote       $0C
00082882 E701                       	dc.b	smpsNoAttack, $01
00082884 E108                       	smpsAlterNote       $08
00082886 E701                       	dc.b	smpsNoAttack, $01
00082888 E102                       	smpsAlterNote       $02
0008288A E701                       	dc.b	smpsNoAttack, $01
0008288C E101                       	smpsAlterNote       $01
0008288E E701                       	dc.b	smpsNoAttack, $01
00082890 E105                       	smpsAlterNote       $05
00082892 E701                       	dc.b	smpsNoAttack, $01
00082894 E10B                       	smpsAlterNote       $0B
00082896 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008289A E108                       	smpsAlterNote       $08
0008289C E701                       	dc.b	smpsNoAttack, $01
0008289E E102                       	smpsAlterNote       $02
000828A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000828A4 E108                       	smpsAlterNote       $08
000828A6 E701                       	dc.b	smpsNoAttack, $01
000828A8 E10B                       	smpsAlterNote       $0B
000828AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000828AE E105                       	smpsAlterNote       $05
000828B0 E701                       	dc.b	smpsNoAttack, $01
000828B2 E101                       	smpsAlterNote       $01
000828B4 E701                       	dc.b	smpsNoAttack, $01
000828B6 E102                       	smpsAlterNote       $02
000828B8 E701                       	dc.b	smpsNoAttack, $01
000828BA E108                       	smpsAlterNote       $08
000828BC E701                       	dc.b	smpsNoAttack, $01
000828BE E10C                       	smpsAlterNote       $0C
000828C0 E701                       	dc.b	smpsNoAttack, $01
000828C2 E108                       	smpsAlterNote       $08
000828C4 E701                       	dc.b	smpsNoAttack, $01
000828C6 E105                       	smpsAlterNote       $05
000828C8 E701                       	dc.b	smpsNoAttack, $01
000828CA E101                       	smpsAlterNote       $01
000828CC E701                       	dc.b	smpsNoAttack, $01
000828CE E105                       	smpsAlterNote       $05
000828D0 E701                       	dc.b	smpsNoAttack, $01
000828D2 E10B                       	smpsAlterNote       $0B
000828D4 E701                       	dc.b	smpsNoAttack, $01
000828D6 E10C                       	smpsAlterNote       $0C
000828D8 E701                       	dc.b	smpsNoAttack, $01
000828DA E108                       	smpsAlterNote       $08
000828DC E701                       	dc.b	smpsNoAttack, $01
000828DE E102                       	smpsAlterNote       $02
000828E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000828E4 E105                       	smpsAlterNote       $05
000828E6 E701                       	dc.b	smpsNoAttack, $01
000828E8 E10B                       	smpsAlterNote       $0B
000828EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000828EE E105                       	smpsAlterNote       $05
000828F0 E701                       	dc.b	smpsNoAttack, $01
000828F2 E101                       	smpsAlterNote       $01
000828F4 E701                       	dc.b	smpsNoAttack, $01
000828F6 E102                       	smpsAlterNote       $02
000828F8 E701                       	dc.b	smpsNoAttack, $01
000828FA E108                       	smpsAlterNote       $08
000828FC E701                       	dc.b	smpsNoAttack, $01
000828FE E10C                       	smpsAlterNote       $0C
00082900 E701                       	dc.b	smpsNoAttack, $01
00082902 E108                       	smpsAlterNote       $08
00082904 E701                       	dc.b	smpsNoAttack, $01
00082906 E105                       	smpsAlterNote       $05
00082908 E701                       	dc.b	smpsNoAttack, $01
0008290A E101                       	smpsAlterNote       $01
0008290C E701                       	dc.b	smpsNoAttack, $01
0008290E E105                       	smpsAlterNote       $05
00082910 E701                       	dc.b	smpsNoAttack, $01
00082912 E10B                       	smpsAlterNote       $0B
00082914 E701                       	dc.b	smpsNoAttack, $01
00082916 E10C                       	smpsAlterNote       $0C
00082918 E701                       	dc.b	smpsNoAttack, $01
0008291A E108                       	smpsAlterNote       $08
0008291C E701                       	dc.b	smpsNoAttack, $01
0008291E E102                       	smpsAlterNote       $02
00082920 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082924 E105                       	smpsAlterNote       $05
00082926 E701                       	dc.b	smpsNoAttack, $01
00082928 E10B                       	smpsAlterNote       $0B
0008292A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008292E E105                       	smpsAlterNote       $05
00082930 E701                       	dc.b	smpsNoAttack, $01
00082932 E102                       	smpsAlterNote       $02
00082934 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082938 E108                       	smpsAlterNote       $08
0008293A E701                       	dc.b	smpsNoAttack, $01
0008293C E10C                       	smpsAlterNote       $0C
0008293E E701                       	dc.b	smpsNoAttack, $01
00082940 E10B                       	smpsAlterNote       $0B
00082942 E701                       	dc.b	smpsNoAttack, $01
00082944 E105                       	smpsAlterNote       $05
00082946 E701                       	dc.b	smpsNoAttack, $01
00082948 E101                       	smpsAlterNote       $01
0008294A E701                       	dc.b	smpsNoAttack, $01
0008294C E105                       	smpsAlterNote       $05
0008294E E701                       	dc.b	smpsNoAttack, $01
00082950 E108                       	smpsAlterNote       $08
00082952 E701                       	dc.b	smpsNoAttack, $01
00082954 E10C                       	smpsAlterNote       $0C
00082956 E701                       	dc.b	smpsNoAttack, $01
0008295A E10B                       	smpsAlterNote       $0B
0008295C C604 8001                  	dc.b	nA5, $04, nRst, $01
00082960 E109                       	smpsAlterNote       $09
00082962 C404                       	dc.b	nG5, $04
00082964 E10B                       	smpsAlterNote       $0B
00082966 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008296A E107                       	smpsAlterNote       $07
0008296C BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00082972 E10B                       	smpsAlterNote       $0B
00082974 C604                       	dc.b	nA5, $04
00082976 E109                       	smpsAlterNote       $09
00082978 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008297C E10B                       	smpsAlterNote       $0B
0008297E C604                       	dc.b	nA5, $04
00082980 E108                       	smpsAlterNote       $08
00082982 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00082988 E106                       	smpsAlterNote       $06
0008298A C904 8001                  	dc.b	nC6, $04, nRst, $01
0008298E E10C                       	smpsAlterNote       $0C
00082990 C704                       	dc.b	nBb5, $04
00082992 E10B                       	smpsAlterNote       $0B
00082994 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082998 E109                       	smpsAlterNote       $09
0008299A C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000829A4 E10B                       	smpsAlterNote       $0B
000829A6 C60D                       	dc.b	nA5, $0D
000829A8 E108                       	smpsAlterNote       $08
000829AA E701                       	dc.b	smpsNoAttack, $01
000829AC E104                       	smpsAlterNote       $04
000829AE E701                       	dc.b	smpsNoAttack, $01
000829B0 E108                       	smpsAlterNote       $08
000829B2 E701                       	dc.b	smpsNoAttack, $01
000829B4 E10B                       	smpsAlterNote       $0B
000829B6 E701                       	dc.b	smpsNoAttack, $01
000829B8 E10F                       	smpsAlterNote       $0F
000829BA E701                       	dc.b	smpsNoAttack, $01
000829BC E10B                       	smpsAlterNote       $0B
000829BE E701                       	dc.b	smpsNoAttack, $01
000829C0 E105                       	smpsAlterNote       $05
000829C2 E701                       	dc.b	smpsNoAttack, $01
000829C4 E104                       	smpsAlterNote       $04
000829C6 E701                       	dc.b	smpsNoAttack, $01
000829C8 E108                       	smpsAlterNote       $08
000829CA E701                       	dc.b	smpsNoAttack, $01
000829CC E10E                       	smpsAlterNote       $0E
000829CE E701                       	dc.b	smpsNoAttack, $01
000829D0 E10F                       	smpsAlterNote       $0F
000829D2 8001                       	dc.b	nRst, $01
000829D4 E109                       	smpsAlterNote       $09
000829D6 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000829DC E108                       	smpsAlterNote       $08
000829DE C10D                       	dc.b	nE5, $0D
000829E0 E105                       	smpsAlterNote       $05
000829E2 E701                       	dc.b	smpsNoAttack, $01
000829E4 E101                       	smpsAlterNote       $01
000829E6 E701                       	dc.b	smpsNoAttack, $01
000829E8 E105                       	smpsAlterNote       $05
000829EA E701                       	dc.b	smpsNoAttack, $01
000829EC E10B                       	smpsAlterNote       $0B
000829EE E701                       	dc.b	smpsNoAttack, $01
000829F0 E10C                       	smpsAlterNote       $0C
000829F2 E701                       	dc.b	smpsNoAttack, $01
000829F4 E108                       	smpsAlterNote       $08
000829F6 E701                       	dc.b	smpsNoAttack, $01
000829F8 E102                       	smpsAlterNote       $02
000829FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000829FE E105                       	smpsAlterNote       $05
00082A00 E701                       	dc.b	smpsNoAttack, $01
00082A02 E10B                       	smpsAlterNote       $0B
00082A04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082A08 E105                       	smpsAlterNote       $05
00082A0A E701                       	dc.b	smpsNoAttack, $01
00082A0C E102                       	smpsAlterNote       $02
00082A0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082A12 E108                       	smpsAlterNote       $08
00082A14 E701                       	dc.b	smpsNoAttack, $01
00082A16 E10C                       	smpsAlterNote       $0C
00082A18 E701                       	dc.b	smpsNoAttack, $01
00082A1A E10B                       	smpsAlterNote       $0B
00082A1C E701                       	dc.b	smpsNoAttack, $01
00082A1E E105                       	smpsAlterNote       $05
00082A20 E701                       	dc.b	smpsNoAttack, $01
00082A22 E101                       	smpsAlterNote       $01
00082A24 E701                       	dc.b	smpsNoAttack, $01
00082A26 E105                       	smpsAlterNote       $05
00082A28 E701                       	dc.b	smpsNoAttack, $01
00082A2A E108                       	smpsAlterNote       $08
00082A2C E701                       	dc.b	smpsNoAttack, $01
00082A2E E10C                       	smpsAlterNote       $0C
00082A30 E701                       	dc.b	smpsNoAttack, $01
00082A32 E108                       	smpsAlterNote       $08
00082A34 E701                       	dc.b	smpsNoAttack, $01
00082A36 E102                       	smpsAlterNote       $02
00082A38 E701                       	dc.b	smpsNoAttack, $01
00082A3A E101                       	smpsAlterNote       $01
00082A3C E701                       	dc.b	smpsNoAttack, $01
00082A3E E105                       	smpsAlterNote       $05
00082A40 E701                       	dc.b	smpsNoAttack, $01
00082A42 E10B                       	smpsAlterNote       $0B
00082A44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082A48 E108                       	smpsAlterNote       $08
00082A4A E701                       	dc.b	smpsNoAttack, $01
00082A4C E102                       	smpsAlterNote       $02
00082A4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082A52 E108                       	smpsAlterNote       $08
00082A54 E701                       	dc.b	smpsNoAttack, $01
00082A56 E10B                       	smpsAlterNote       $0B
00082A58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082A5C E105                       	smpsAlterNote       $05
00082A5E E701                       	dc.b	smpsNoAttack, $01
00082A60 E101                       	smpsAlterNote       $01
00082A62 E701                       	dc.b	smpsNoAttack, $01
00082A64 E102                       	smpsAlterNote       $02
00082A66 E701                       	dc.b	smpsNoAttack, $01
00082A68 E108                       	smpsAlterNote       $08
00082A6A E701                       	dc.b	smpsNoAttack, $01
00082A6C E10C                       	smpsAlterNote       $0C
00082A6E E701                       	dc.b	smpsNoAttack, $01
00082A70 E108                       	smpsAlterNote       $08
00082A72 E701                       	dc.b	smpsNoAttack, $01
00082A74 E105                       	smpsAlterNote       $05
00082A76 E701                       	dc.b	smpsNoAttack, $01
00082A78 E101                       	smpsAlterNote       $01
00082A7A E701                       	dc.b	smpsNoAttack, $01
00082A7C E105                       	smpsAlterNote       $05
00082A7E E701                       	dc.b	smpsNoAttack, $01
00082A80 E10B                       	smpsAlterNote       $0B
00082A82 E701                       	dc.b	smpsNoAttack, $01
00082A84 E10C                       	smpsAlterNote       $0C
00082A86 E701                       	dc.b	smpsNoAttack, $01
00082A88 E108                       	smpsAlterNote       $08
00082A8A E701                       	dc.b	smpsNoAttack, $01
00082A8C E102                       	smpsAlterNote       $02
00082A8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082A92 E108                       	smpsAlterNote       $08
00082A94 E701                       	dc.b	smpsNoAttack, $01
00082A96 E10B                       	smpsAlterNote       $0B
00082A98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082A9C E105                       	smpsAlterNote       $05
00082A9E E701                       	dc.b	smpsNoAttack, $01
00082AA0 E101                       	smpsAlterNote       $01
00082AA2 E701                       	dc.b	smpsNoAttack, $01
00082AA4 E102                       	smpsAlterNote       $02
00082AA6 E701                       	dc.b	smpsNoAttack, $01
00082AA8 E108                       	smpsAlterNote       $08
00082AAA E701                       	dc.b	smpsNoAttack, $01
00082AAC E10C                       	smpsAlterNote       $0C
00082AAE E701                       	dc.b	smpsNoAttack, $01
00082AB0 E108                       	smpsAlterNote       $08
00082AB2 E701                       	dc.b	smpsNoAttack, $01
00082AB4 E105                       	smpsAlterNote       $05
00082AB6 E701                       	dc.b	smpsNoAttack, $01
00082AB8 E101                       	smpsAlterNote       $01
00082ABA E701                       	dc.b	smpsNoAttack, $01
00082ABC E105                       	smpsAlterNote       $05
00082ABE E701                       	dc.b	smpsNoAttack, $01
00082AC0 E10B                       	smpsAlterNote       $0B
00082AC2 E701                       	dc.b	smpsNoAttack, $01
00082AC4 E10C                       	smpsAlterNote       $0C
00082AC6 E701                       	dc.b	smpsNoAttack, $01
00082AC8 E108                       	smpsAlterNote       $08
00082ACA E701                       	dc.b	smpsNoAttack, $01
00082ACC E102                       	smpsAlterNote       $02
00082ACE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082AD2 E105                       	smpsAlterNote       $05
00082AD4 E701                       	dc.b	smpsNoAttack, $01
00082AD6 E10B                       	smpsAlterNote       $0B
00082AD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082ADC E105                       	smpsAlterNote       $05
00082ADE E701                       	dc.b	smpsNoAttack, $01
00082AE0 E102                       	smpsAlterNote       $02
00082AE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082AE6 E108                       	smpsAlterNote       $08
00082AE8 E701                       	dc.b	smpsNoAttack, $01
00082AEA E10C                       	smpsAlterNote       $0C
00082AEC E701                       	dc.b	smpsNoAttack, $01
00082AEE E10B                       	smpsAlterNote       $0B
00082AF0 E701                       	dc.b	smpsNoAttack, $01
00082AF2 E105                       	smpsAlterNote       $05
00082AF4 E701                       	dc.b	smpsNoAttack, $01
00082AF6 E101                       	smpsAlterNote       $01
00082AF8 E701                       	dc.b	smpsNoAttack, $01
00082AFA E105                       	smpsAlterNote       $05
00082AFC E701                       	dc.b	smpsNoAttack, $01
00082AFE E108                       	smpsAlterNote       $08
00082B00 E701                       	dc.b	smpsNoAttack, $01
00082B02 E10C                       	smpsAlterNote       $0C
00082B04 E701                       	dc.b	smpsNoAttack, $01
00082B06 E108                       	smpsAlterNote       $08
00082B08 E701                       	dc.b	smpsNoAttack, $01
00082B0A E102                       	smpsAlterNote       $02
00082B0C E701                       	dc.b	smpsNoAttack, $01
00082B0E E101                       	smpsAlterNote       $01
00082B10 E701                       	dc.b	smpsNoAttack, $01
00082B12 E105                       	smpsAlterNote       $05
00082B14 E701                       	dc.b	smpsNoAttack, $01
00082B16 E10B                       	smpsAlterNote       $0B
00082B18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B1C E108                       	smpsAlterNote       $08
00082B1E E701                       	dc.b	smpsNoAttack, $01
00082B20 E102                       	smpsAlterNote       $02
00082B22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B26 E108                       	smpsAlterNote       $08
00082B28 E701                       	dc.b	smpsNoAttack, $01
00082B2A E10B                       	smpsAlterNote       $0B
00082B2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B30 E105                       	smpsAlterNote       $05
00082B32 E701                       	dc.b	smpsNoAttack, $01
00082B34 E102                       	smpsAlterNote       $02
00082B36 8001                       	dc.b	nRst, $01
00082B38 E107                       	smpsAlterNote       $07
00082B3A BF01 8001                  	dc.b	nD5, $01, nRst, $01
00082B3E E108                       	smpsAlterNote       $08
00082B40 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00082B44 E102                       	smpsAlterNote       $02
00082B46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B4A E108                       	smpsAlterNote       $08
00082B4C E701                       	dc.b	smpsNoAttack, $01
00082B4E E10B                       	smpsAlterNote       $0B
00082B50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B54 E105                       	smpsAlterNote       $05
00082B56 E701                       	dc.b	smpsNoAttack, $01
00082B58 E101                       	smpsAlterNote       $01
00082B5A E701                       	dc.b	smpsNoAttack, $01
00082B5C E102                       	smpsAlterNote       $02
00082B5E E701                       	dc.b	smpsNoAttack, $01
00082B60 E108                       	smpsAlterNote       $08
00082B62 E701                       	dc.b	smpsNoAttack, $01
00082B64 E10C                       	smpsAlterNote       $0C
00082B66 E701                       	dc.b	smpsNoAttack, $01
00082B68 E108                       	smpsAlterNote       $08
00082B6A E701                       	dc.b	smpsNoAttack, $01
00082B6C E105                       	smpsAlterNote       $05
00082B6E E701                       	dc.b	smpsNoAttack, $01
00082B70 E101                       	smpsAlterNote       $01
00082B72 E701                       	dc.b	smpsNoAttack, $01
00082B74 E105                       	smpsAlterNote       $05
00082B76 E701                       	dc.b	smpsNoAttack, $01
00082B78 E10B                       	smpsAlterNote       $0B
00082B7A E701                       	dc.b	smpsNoAttack, $01
00082B7C E10C                       	smpsAlterNote       $0C
00082B7E E701                       	dc.b	smpsNoAttack, $01
00082B80 E108                       	smpsAlterNote       $08
00082B82 E701                       	dc.b	smpsNoAttack, $01
00082B84 E102                       	smpsAlterNote       $02
00082B86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B8A E105                       	smpsAlterNote       $05
00082B8C E701                       	dc.b	smpsNoAttack, $01
00082B8E E10B                       	smpsAlterNote       $0B
00082B90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B94 E105                       	smpsAlterNote       $05
00082B96 E701                       	dc.b	smpsNoAttack, $01
00082B98 E102                       	smpsAlterNote       $02
00082B9A E701                       	dc.b	smpsNoAttack, $01
00082B9C E109                       	smpsAlterNote       $09
00082B9E C40A C207                  	dc.b	nG5, $0A, nF5, $07
00082BA2 E108                       	smpsAlterNote       $08
00082BA4 C10D                       	dc.b	nE5, $0D
00082BA6 E105                       	smpsAlterNote       $05
00082BA8 E701                       	dc.b	smpsNoAttack, $01
00082BAA E101                       	smpsAlterNote       $01
00082BAC E701                       	dc.b	smpsNoAttack, $01
00082BAE E102                       	smpsAlterNote       $02
00082BB0 E701                       	dc.b	smpsNoAttack, $01
00082BB2 E108                       	smpsAlterNote       $08
00082BB4 E701                       	dc.b	smpsNoAttack, $01
00082BB6 E10C                       	smpsAlterNote       $0C
00082BB8 E701                       	dc.b	smpsNoAttack, $01
00082BBA E108                       	smpsAlterNote       $08
00082BBC E701                       	dc.b	smpsNoAttack, $01
00082BBE E105                       	smpsAlterNote       $05
00082BC0 E701                       	dc.b	smpsNoAttack, $01
00082BC2 E101                       	smpsAlterNote       $01
00082BC4 E701                       	dc.b	smpsNoAttack, $01
00082BC6 E105                       	smpsAlterNote       $05
00082BC8 E701                       	dc.b	smpsNoAttack, $01
00082BCA E10B                       	smpsAlterNote       $0B
00082BCC E701                       	dc.b	smpsNoAttack, $01
00082BCE E10C                       	smpsAlterNote       $0C
00082BD0 E701                       	dc.b	smpsNoAttack, $01
00082BD2 E108                       	smpsAlterNote       $08
00082BD4 E701                       	dc.b	smpsNoAttack, $01
00082BD6 E102                       	smpsAlterNote       $02
00082BD8 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00082BE0 E10B                       	smpsAlterNote       $0B
00082BE2 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00082BE6 E10C                       	smpsAlterNote       $0C
00082BE8 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00082BEC E10B                       	smpsAlterNote       $0B
00082BEE BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00082BF4 E107                       	smpsAlterNote       $07
00082BF6 BF03                       	dc.b	nD5, $03
00082BF8 E108                       	smpsAlterNote       $08
00082BFA C103 8001                  	dc.b	nE5, $03, nRst, $01
00082BFE E109                       	smpsAlterNote       $09
00082C00 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00082C06 E10B                       	smpsAlterNote       $0B
00082C08 C606 8001                  	dc.b	nA5, $06, nRst, $01
00082C0C E107                       	smpsAlterNote       $07
00082C0E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00082C12 E106                       	smpsAlterNote       $06
00082C14 C90D                       	dc.b	nC6, $0D
00082C16 E103                       	smpsAlterNote       $03
00082C18 E701                       	dc.b	smpsNoAttack, $01
00082C1A E1FF                       	smpsAlterNote       $FF
00082C1C E701                       	dc.b	smpsNoAttack, $01
00082C1E E103                       	smpsAlterNote       $03
00082C20 E701                       	dc.b	smpsNoAttack, $01
00082C22 E109                       	smpsAlterNote       $09
00082C24 E701                       	dc.b	smpsNoAttack, $01
00082C26 E10A                       	smpsAlterNote       $0A
00082C28 E701                       	dc.b	smpsNoAttack, $01
00082C2A E106                       	smpsAlterNote       $06
00082C2C E701                       	dc.b	smpsNoAttack, $01
00082C2E E100                       	smpsAlterNote       $00
00082C30 E701                       	dc.b	smpsNoAttack, $01
00082C32 E10C                       	smpsAlterNote       $0C
00082C34 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00082C38 E10B                       	smpsAlterNote       $0B
00082C3A C603                       	dc.b	nA5, $03
00082C3C E109                       	smpsAlterNote       $09
00082C3E C403 8001                  	dc.b	nG5, $03, nRst, $01
00082C42 E10B                       	smpsAlterNote       $0B
00082C44 C60D                       	dc.b	nA5, $0D
00082C46 E105                       	smpsAlterNote       $05
00082C48 E701                       	dc.b	smpsNoAttack, $01
00082C4A E104                       	smpsAlterNote       $04
00082C4C E701                       	dc.b	smpsNoAttack, $01
00082C4E E108                       	smpsAlterNote       $08
00082C50 E701                       	dc.b	smpsNoAttack, $01
00082C52 E10E                       	smpsAlterNote       $0E
00082C54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082C58 E10B                       	smpsAlterNote       $0B
00082C5A E701                       	dc.b	smpsNoAttack, $01
00082C5C E105                       	smpsAlterNote       $05
00082C5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082C62 E10B                       	smpsAlterNote       $0B
00082C64 E701                       	dc.b	smpsNoAttack, $01
00082C66 E10E                       	smpsAlterNote       $0E
00082C68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082C6C E108                       	smpsAlterNote       $08
00082C6E E701                       	dc.b	smpsNoAttack, $01
00082C70 E104                       	smpsAlterNote       $04
00082C72 E701                       	dc.b	smpsNoAttack, $01
00082C74 E105                       	smpsAlterNote       $05
00082C76 E701                       	dc.b	smpsNoAttack, $01
00082C78 E10B                       	smpsAlterNote       $0B
00082C7A E701                       	dc.b	smpsNoAttack, $01
00082C7C E10F                       	smpsAlterNote       $0F
00082C7E E701                       	dc.b	smpsNoAttack, $01
00082C80 E10B                       	smpsAlterNote       $0B
00082C82 E701                       	dc.b	smpsNoAttack, $01
00082C84 E108                       	smpsAlterNote       $08
00082C86 E701                       	dc.b	smpsNoAttack, $01
00082C88 E104                       	smpsAlterNote       $04
00082C8A E701                       	dc.b	smpsNoAttack, $01
00082C8C E108                       	smpsAlterNote       $08
00082C8E E701                       	dc.b	smpsNoAttack, $01
00082C90 E10E                       	smpsAlterNote       $0E
00082C92 E701                       	dc.b	smpsNoAttack, $01
00082C94 E10F                       	smpsAlterNote       $0F
00082C96 E701                       	dc.b	smpsNoAttack, $01
00082C98 E10B                       	smpsAlterNote       $0B
00082C9A E701                       	dc.b	smpsNoAttack, $01
00082C9C E105                       	smpsAlterNote       $05
00082C9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082CA2 E108                       	smpsAlterNote       $08
00082CA4 E701                       	dc.b	smpsNoAttack, $01
00082CA6 E10E                       	smpsAlterNote       $0E
00082CA8 E701                       	dc.b	smpsNoAttack, $01
00082CAA E10F                       	smpsAlterNote       $0F
00082CAC 800F                       	dc.b	nRst, $0F
00082CAE E107                       	smpsAlterNote       $07
00082CB0 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00082CB4 E108                       	smpsAlterNote       $08
00082CB6 C103                       	dc.b	nE5, $03
00082CB8 E109                       	smpsAlterNote       $09
00082CBA C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00082CC0 E10B                       	smpsAlterNote       $0B
00082CC2 C607                       	dc.b	nA5, $07
00082CC4 E107                       	smpsAlterNote       $07
00082CC6 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00082CCA E106                       	smpsAlterNote       $06
00082CCC C90D                       	dc.b	nC6, $0D
00082CCE E107                       	smpsAlterNote       $07
00082CD0 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00082CD4 E10C                       	smpsAlterNote       $0C
00082CD6 C704                       	dc.b	nBb5, $04
00082CD8 E10B                       	smpsAlterNote       $0B
00082CDA C604 8001                  	dc.b	nA5, $04, nRst, $01
00082CDE E109                       	smpsAlterNote       $09
00082CE0 C404                       	dc.b	nG5, $04
00082CE2 E10B                       	smpsAlterNote       $0B
00082CE4 C60D                       	dc.b	nA5, $0D
00082CE6 E108                       	smpsAlterNote       $08
00082CE8 E701                       	dc.b	smpsNoAttack, $01
00082CEA E105                       	smpsAlterNote       $05
00082CEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082CF0 E10B                       	smpsAlterNote       $0B
00082CF2 E701                       	dc.b	smpsNoAttack, $01
00082CF4 E10F                       	smpsAlterNote       $0F
00082CF6 E701                       	dc.b	smpsNoAttack, $01
00082CF8 E10E                       	smpsAlterNote       $0E
00082CFA E701                       	dc.b	smpsNoAttack, $01
00082CFC E108                       	smpsAlterNote       $08
00082CFE E701                       	dc.b	smpsNoAttack, $01
00082D00 E104                       	smpsAlterNote       $04
00082D02 E701                       	dc.b	smpsNoAttack, $01
00082D04 E108                       	smpsAlterNote       $08
00082D06 E701                       	dc.b	smpsNoAttack, $01
00082D08 E10B                       	smpsAlterNote       $0B
00082D0A E701                       	dc.b	smpsNoAttack, $01
00082D0C E10F                       	smpsAlterNote       $0F
00082D0E E701                       	dc.b	smpsNoAttack, $01
00082D10 E10B                       	smpsAlterNote       $0B
00082D12 E701                       	dc.b	smpsNoAttack, $01
00082D14 E105                       	smpsAlterNote       $05
00082D16 E701                       	dc.b	smpsNoAttack, $01
00082D18 E104                       	smpsAlterNote       $04
00082D1A E701                       	dc.b	smpsNoAttack, $01
00082D1C E108                       	smpsAlterNote       $08
00082D1E E701                       	dc.b	smpsNoAttack, $01
00082D20 E10E                       	smpsAlterNote       $0E
00082D22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D26 E10B                       	smpsAlterNote       $0B
00082D28 E701                       	dc.b	smpsNoAttack, $01
00082D2A E105                       	smpsAlterNote       $05
00082D2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D30 E10B                       	smpsAlterNote       $0B
00082D32 E701                       	dc.b	smpsNoAttack, $01
00082D34 E10E                       	smpsAlterNote       $0E
00082D36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D3A E108                       	smpsAlterNote       $08
00082D3C E701                       	dc.b	smpsNoAttack, $01
00082D3E E105                       	smpsAlterNote       $05
00082D40 8001                       	dc.b	nRst, $01
00082D42 E109                       	smpsAlterNote       $09
00082D44 C401 8001                  	dc.b	nG5, $01, nRst, $01
00082D48 E10B                       	smpsAlterNote       $0B
00082D4A C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00082D52 E109                       	smpsAlterNote       $09
00082D54 C404                       	dc.b	nG5, $04
00082D56 E10B                       	smpsAlterNote       $0B
00082D58 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082D5C E107                       	smpsAlterNote       $07
00082D5E BF0D                       	dc.b	nD5, $0D
00082D60 E101                       	smpsAlterNote       $01
00082D62 E701                       	dc.b	smpsNoAttack, $01
00082D64 E100                       	smpsAlterNote       $00
00082D66 E701                       	dc.b	smpsNoAttack, $01
00082D68 E104                       	smpsAlterNote       $04
00082D6A E701                       	dc.b	smpsNoAttack, $01
00082D6C E10A                       	smpsAlterNote       $0A
00082D6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D72 E107                       	smpsAlterNote       $07
00082D74 E701                       	dc.b	smpsNoAttack, $01
00082D76 E101                       	smpsAlterNote       $01
00082D78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D7C E107                       	smpsAlterNote       $07
00082D7E E701                       	dc.b	smpsNoAttack, $01
00082D80 E10A                       	smpsAlterNote       $0A
00082D82 E701                       	dc.b	smpsNoAttack, $01
00082D84 E10B                       	smpsAlterNote       $0B
00082D86 8001                       	dc.b	nRst, $01
00082D88 E108                       	smpsAlterNote       $08
00082D8A 8001                       	dc.b	nRst, $01
00082D8C E109                       	smpsAlterNote       $09
00082D8E 8001 C401                  	dc.b	nRst, $01, nG5, $01
00082D92 E10B                       	smpsAlterNote       $0B
00082D94 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00082D9C E108                       	smpsAlterNote       $08
00082D9E CD06 8001                  	dc.b	nE6, $06, nRst, $01
00082DA2 E109                       	smpsAlterNote       $09
00082DA4 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00082DA8 E108                       	smpsAlterNote       $08
00082DAA CD02 8001                  	dc.b	nE6, $02, nRst, $01
00082DAE E106                       	smpsAlterNote       $06
00082DB0 C903                       	dc.b	nC6, $03
00082DB2 E109                       	smpsAlterNote       $09
00082DB4 C403 8001                  	dc.b	nG5, $03, nRst, $01
00082DB8 E10C                       	smpsAlterNote       $0C
00082DBA C70D                       	dc.b	nBb5, $0D
00082DBC E109                       	smpsAlterNote       $09
00082DBE E701                       	dc.b	smpsNoAttack, $01
00082DC0 E105                       	smpsAlterNote       $05
00082DC2 E701                       	dc.b	smpsNoAttack, $01
00082DC4 E109                       	smpsAlterNote       $09
00082DC6 E701                       	dc.b	smpsNoAttack, $01
00082DC8 E10F                       	smpsAlterNote       $0F
00082DCA E701                       	dc.b	smpsNoAttack, $01
00082DCC E110                       	smpsAlterNote       $10
00082DCE E701                       	dc.b	smpsNoAttack, $01
00082DD0 E10C                       	smpsAlterNote       $0C
00082DD2 E701                       	dc.b	smpsNoAttack, $01
00082DD4 E106                       	smpsAlterNote       $06
00082DD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082DDA E109                       	smpsAlterNote       $09
00082DDC E701                       	dc.b	smpsNoAttack, $01
00082DDE E10F                       	smpsAlterNote       $0F
00082DE0 E701                       	dc.b	smpsNoAttack, $01
00082DE2 E110                       	smpsAlterNote       $10
00082DE4 8001                       	dc.b	nRst, $01
00082DE6 E10B                       	smpsAlterNote       $0B
00082DE8 C606 8001                  	dc.b	nA5, $06, nRst, $01
00082DEC E109                       	smpsAlterNote       $09
00082DEE C40D                       	dc.b	nG5, $0D
00082DF0 E103                       	smpsAlterNote       $03
00082DF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082DF6 E106                       	smpsAlterNote       $06
00082DF8 E701                       	dc.b	smpsNoAttack, $01
00082DFA E10C                       	smpsAlterNote       $0C
00082DFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E00 E106                       	smpsAlterNote       $06
00082E02 E701                       	dc.b	smpsNoAttack, $01
00082E04 E103                       	smpsAlterNote       $03
00082E06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E0A E109                       	smpsAlterNote       $09
00082E0C E701                       	dc.b	smpsNoAttack, $01
00082E0E E10D                       	smpsAlterNote       $0D
00082E10 E701                       	dc.b	smpsNoAttack, $01
00082E12 E10C                       	smpsAlterNote       $0C
00082E14 E701                       	dc.b	smpsNoAttack, $01
00082E16 E106                       	smpsAlterNote       $06
00082E18 E701                       	dc.b	smpsNoAttack, $01
00082E1A E102                       	smpsAlterNote       $02
00082E1C E701                       	dc.b	smpsNoAttack, $01
00082E1E E103                       	smpsAlterNote       $03
00082E20 8001                       	dc.b	nRst, $01
00082E22 E10B                       	smpsAlterNote       $0B
00082E24 C60D                       	dc.b	nA5, $0D
00082E26 E108                       	smpsAlterNote       $08
00082E28 E701                       	dc.b	smpsNoAttack, $01
00082E2A E104                       	smpsAlterNote       $04
00082E2C E701                       	dc.b	smpsNoAttack, $01
00082E2E E108                       	smpsAlterNote       $08
00082E30 E701                       	dc.b	smpsNoAttack, $01
00082E32 E10B                       	smpsAlterNote       $0B
00082E34 E701                       	dc.b	smpsNoAttack, $01
00082E36 E10F                       	smpsAlterNote       $0F
00082E38 E701                       	dc.b	smpsNoAttack, $01
00082E3A E10B                       	smpsAlterNote       $0B
00082E3C E701                       	dc.b	smpsNoAttack, $01
00082E3E E105                       	smpsAlterNote       $05
00082E40 E701                       	dc.b	smpsNoAttack, $01
00082E42 E104                       	smpsAlterNote       $04
00082E44 E701                       	dc.b	smpsNoAttack, $01
00082E46 E108                       	smpsAlterNote       $08
00082E48 E701                       	dc.b	smpsNoAttack, $01
00082E4A E10E                       	smpsAlterNote       $0E
00082E4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E50 E10B                       	smpsAlterNote       $0B
00082E52 E701                       	dc.b	smpsNoAttack, $01
00082E54 E105                       	smpsAlterNote       $05
00082E56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E5A E10C                       	smpsAlterNote       $0C
00082E5C C70E                       	dc.b	nBb5, $0E
00082E5E E106                       	smpsAlterNote       $06
00082E60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E64 E10C                       	smpsAlterNote       $0C
00082E66 E701                       	dc.b	smpsNoAttack, $01
00082E68 E10F                       	smpsAlterNote       $0F
00082E6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E6E E109                       	smpsAlterNote       $09
00082E70 E701                       	dc.b	smpsNoAttack, $01
00082E72 E105                       	smpsAlterNote       $05
00082E74 E701                       	dc.b	smpsNoAttack, $01
00082E76 E106                       	smpsAlterNote       $06
00082E78 E701                       	dc.b	smpsNoAttack, $01
00082E7A E10C                       	smpsAlterNote       $0C
00082E7C E701                       	dc.b	smpsNoAttack, $01
00082E7E E110                       	smpsAlterNote       $10
00082E80 E701                       	dc.b	smpsNoAttack, $01
00082E82 E10C                       	smpsAlterNote       $0C
00082E84 E701                       	dc.b	smpsNoAttack, $01
00082E86 E109                       	smpsAlterNote       $09
00082E88 E701                       	dc.b	smpsNoAttack, $01
00082E8A E105                       	smpsAlterNote       $05
00082E8C E701                       	dc.b	smpsNoAttack, $01
00082E8E E106                       	smpsAlterNote       $06
00082E90 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00082E94 E107                       	smpsAlterNote       $07
00082E96 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00082E9B E108                       	smpsAlterNote       $08
00082E9D CD0D                       	dc.b	nE6, $0D
00082E9F E107                       	smpsAlterNote       $07
00082EA1 CB0D                       	dc.b	nD6, $0D
00082EA3 E104                       	smpsAlterNote       $04
00082EA5 E701                       	dc.b	smpsNoAttack, $01
00082EA7 E100                       	smpsAlterNote       $00
00082EA9 E701                       	dc.b	smpsNoAttack, $01
00082EAB E101                       	smpsAlterNote       $01
00082EAD E701                       	dc.b	smpsNoAttack, $01
00082EAF E107                       	smpsAlterNote       $07
00082EB1 E701                       	dc.b	smpsNoAttack, $01
00082EB3 E10B                       	smpsAlterNote       $0B
00082EB5 E701                       	dc.b	smpsNoAttack, $01
00082EB7 E107                       	smpsAlterNote       $07
00082EB9 E701                       	dc.b	smpsNoAttack, $01
00082EBB E104                       	smpsAlterNote       $04
00082EBD E701                       	dc.b	smpsNoAttack, $01
00082EBF E100                       	smpsAlterNote       $00
00082EC1 E701                       	dc.b	smpsNoAttack, $01
00082EC3 E104                       	smpsAlterNote       $04
00082EC5 E701                       	dc.b	smpsNoAttack, $01
00082EC7 E10A                       	smpsAlterNote       $0A
00082EC9 E701                       	dc.b	smpsNoAttack, $01
00082ECB E10B                       	smpsAlterNote       $0B
00082ECD E701                       	dc.b	smpsNoAttack, $01
00082ECF E108                       	smpsAlterNote       $08
00082ED1 CC0D                       	dc.b	nEb6, $0D
00082ED3 E105                       	smpsAlterNote       $05
00082ED5 E701                       	dc.b	smpsNoAttack, $01
00082ED7 E101                       	smpsAlterNote       $01
00082ED9 E701                       	dc.b	smpsNoAttack, $01
00082EDB E102                       	smpsAlterNote       $02
00082EDD E701                       	dc.b	smpsNoAttack, $01
00082EDF E108                       	smpsAlterNote       $08
00082EE1 E701                       	dc.b	smpsNoAttack, $01
00082EE3 E106                       	smpsAlterNote       $06
00082EE5 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00082EF1 8001                       	dc.b	nRst, $01
00082EF3 E107                       	smpsAlterNote       $07
00082EF5 CB0D                       	dc.b	nD6, $0D
00082EF7 E104                       	smpsAlterNote       $04
00082EF9 E701                       	dc.b	smpsNoAttack, $01
00082EFB E100                       	smpsAlterNote       $00
00082EFD E701                       	dc.b	smpsNoAttack, $01
00082EFF E104                       	smpsAlterNote       $04
00082F01 E701                       	dc.b	smpsNoAttack, $01
00082F03 E107                       	smpsAlterNote       $07
00082F05 E701                       	dc.b	smpsNoAttack, $01
00082F07 E10B                       	smpsAlterNote       $0B
00082F09 E701                       	dc.b	smpsNoAttack, $01
00082F0B E107                       	smpsAlterNote       $07
00082F0D E701                       	dc.b	smpsNoAttack, $01
00082F0F E101                       	smpsAlterNote       $01
00082F11 E701                       	dc.b	smpsNoAttack, $01
00082F13 E100                       	smpsAlterNote       $00
00082F15 E701                       	dc.b	smpsNoAttack, $01
00082F17 E104                       	smpsAlterNote       $04
00082F19 E701                       	dc.b	smpsNoAttack, $01
00082F1B E10A                       	smpsAlterNote       $0A
00082F1D E701                       	dc.b	smpsNoAttack, $01
00082F1F E10B                       	smpsAlterNote       $0B
00082F21 8001                       	dc.b	nRst, $01
00082F23 E109                       	smpsAlterNote       $09
00082F25 CE0A                       	dc.b	nF6, $0A
00082F27 E108                       	smpsAlterNote       $08
00082F29 CC07                       	dc.b	nEb6, $07
00082F2B E106                       	smpsAlterNote       $06
00082F2D C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00082F39 E107                       	smpsAlterNote       $07
00082F3B CB0D                       	dc.b	nD6, $0D
00082F3D E101                       	smpsAlterNote       $01
00082F3F E701                       	dc.b	smpsNoAttack, $01
00082F41 E100                       	smpsAlterNote       $00
00082F43 E701                       	dc.b	smpsNoAttack, $01
00082F45 E104                       	smpsAlterNote       $04
00082F47 E701                       	dc.b	smpsNoAttack, $01
00082F49 E10A                       	smpsAlterNote       $0A
00082F4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F4F E107                       	smpsAlterNote       $07
00082F51 E701                       	dc.b	smpsNoAttack, $01
00082F53 E101                       	smpsAlterNote       $01
00082F55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F59 E107                       	smpsAlterNote       $07
00082F5B E701                       	dc.b	smpsNoAttack, $01
00082F5D E10A                       	smpsAlterNote       $0A
00082F5F E701                       	dc.b	smpsNoAttack, $01
00082F61 E10B                       	smpsAlterNote       $0B
00082F63 8001                       	dc.b	nRst, $01
00082F65 E108                       	smpsAlterNote       $08
00082F67 CC0D                       	dc.b	nEb6, $0D
00082F69 E102                       	smpsAlterNote       $02
00082F6B E701                       	dc.b	smpsNoAttack, $01
00082F6D E101                       	smpsAlterNote       $01
00082F6F E701                       	dc.b	smpsNoAttack, $01
00082F71 E105                       	smpsAlterNote       $05
00082F73 E701                       	dc.b	smpsNoAttack, $01
00082F75 E108                       	smpsAlterNote       $08
00082F77 8001                       	dc.b	nRst, $01
00082F79 E106                       	smpsAlterNote       $06
00082F7B C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00082F87 8001                       	dc.b	nRst, $01
00082F89 E107                       	smpsAlterNote       $07
00082F8B CB0D                       	dc.b	nD6, $0D
00082F8D E101                       	smpsAlterNote       $01
00082F8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F93 E104                       	smpsAlterNote       $04
00082F95 E701                       	dc.b	smpsNoAttack, $01
00082F97 E10A                       	smpsAlterNote       $0A
00082F99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F9D E104                       	smpsAlterNote       $04
00082F9F E701                       	dc.b	smpsNoAttack, $01
00082FA1 E101                       	smpsAlterNote       $01
00082FA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082FA7 E107                       	smpsAlterNote       $07
00082FA9 E701                       	dc.b	smpsNoAttack, $01
00082FAB E10B                       	smpsAlterNote       $0B
00082FAD E701                       	dc.b	smpsNoAttack, $01
00082FAF E10A                       	smpsAlterNote       $0A
00082FB1 E701                       	dc.b	smpsNoAttack, $01
00082FB3 E104                       	smpsAlterNote       $04
00082FB5 E701                       	dc.b	smpsNoAttack, $01
00082FB7 E100                       	smpsAlterNote       $00
00082FB9 E701                       	dc.b	smpsNoAttack, $01
00082FBB E101                       	smpsAlterNote       $01
00082FBD 801C                       	dc.b	nRst, $1C
00082FC1 E107                       	smpsAlterNote       $07
00082FC3 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00082FC7 E603                       	smpsAlterVol        $03
00082FC9 F6F1 AD                    	smpsJump            music84_Jump03
00082FCC                            
00082FCC                            ; FM3 Data
00082FCC                            music84_FM3:
00082FCC E0C0                       	smpsPan             panCenter, $00
00082FD0 E109                       	smpsAlterNote       $09
00082FD2 C203 8007                  	dc.b	nF5, $03, nRst, $07
00082FD6 E108                       	smpsAlterNote       $08
00082FD8 C103 800B                  	dc.b	nE5, $03, nRst, $0B
00082FDC E10B                       	smpsAlterNote       $0B
00082FDE BA03 8006                  	dc.b	nA4, $03, nRst, $06
00082FE4 E040                       	smpsPan             panRight, $00
00082FE6 E110                       	smpsAlterNote       $10
00082FE8 E6F9                       	smpsAlterVol        $F9
00082FEA C702 8001                  	dc.b	nBb5, $02, nRst, $01
00082FEE E10F                       	smpsAlterNote       $0F
00082FF0 C603                       	dc.b	nA5, $03
00082FF2 E10D                       	smpsAlterNote       $0D
00082FF4 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00082FFA E10C                       	smpsAlterNote       $0C
00082FFC C103 8001                  	dc.b	nE5, $03, nRst, $01
00083000 E10A                       	smpsAlterNote       $0A
00083002 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00083006 E10F                       	smpsAlterNote       $0F
00083008 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008300C E0C0                       	smpsPan             panCenter, $00
00083010 E109                       	smpsAlterNote       $09
00083012 E609                       	smpsAlterVol        $09
00083014 B603                       	dc.b	nF4, $03
00083016                            
00083016                            music84_Jump02:
00083016 E70A                       	dc.b	smpsNoAttack, $0A
00083018 E103                       	smpsAlterNote       $03
0008301A E701                       	dc.b	smpsNoAttack, $01
0008301C E102                       	smpsAlterNote       $02
0008301E E701                       	dc.b	smpsNoAttack, $01
00083020 E106                       	smpsAlterNote       $06
00083022 E701                       	dc.b	smpsNoAttack, $01
00083024 E10C                       	smpsAlterNote       $0C
00083026 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008302A E109                       	smpsAlterNote       $09
0008302C E701                       	dc.b	smpsNoAttack, $01
0008302E E103                       	smpsAlterNote       $03
00083030 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083034 E109                       	smpsAlterNote       $09
00083036 E701                       	dc.b	smpsNoAttack, $01
00083038 E10C                       	smpsAlterNote       $0C
0008303A E701                       	dc.b	smpsNoAttack, $01
0008303C E10D                       	smpsAlterNote       $0D
0008303E 8001                       	dc.b	nRst, $01
00083040 E109                       	smpsAlterNote       $09
00083042 B80D                       	dc.b	nG4, $0D
00083044 E103                       	smpsAlterNote       $03
00083046 E701                       	dc.b	smpsNoAttack, $01
00083048 E102                       	smpsAlterNote       $02
0008304A E701                       	dc.b	smpsNoAttack, $01
0008304C E106                       	smpsAlterNote       $06
0008304E E701                       	dc.b	smpsNoAttack, $01
00083050 E10C                       	smpsAlterNote       $0C
00083052 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083056 E109                       	smpsAlterNote       $09
00083058 E701                       	dc.b	smpsNoAttack, $01
0008305A E103                       	smpsAlterNote       $03
0008305C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083060 E109                       	smpsAlterNote       $09
00083062 E701                       	dc.b	smpsNoAttack, $01
00083064 E10C                       	smpsAlterNote       $0C
00083066 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008306A E106                       	smpsAlterNote       $06
0008306C E701                       	dc.b	smpsNoAttack, $01
0008306E E102                       	smpsAlterNote       $02
00083070 E701                       	dc.b	smpsNoAttack, $01
00083072 E103                       	smpsAlterNote       $03
00083074 E701                       	dc.b	smpsNoAttack, $01
00083076 E109                       	smpsAlterNote       $09
00083078 E701                       	dc.b	smpsNoAttack, $01
0008307A E10D                       	smpsAlterNote       $0D
0008307C E701                       	dc.b	smpsNoAttack, $01
0008307E E109                       	smpsAlterNote       $09
00083080 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083084 E10B                       	smpsAlterNote       $0B
00083086 BA0D                       	dc.b	nA4, $0D
00083088 E105                       	smpsAlterNote       $05
0008308A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008308E E108                       	smpsAlterNote       $08
00083090 E701                       	dc.b	smpsNoAttack, $01
00083092 E10E                       	smpsAlterNote       $0E
00083094 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083098 E108                       	smpsAlterNote       $08
0008309A E701                       	dc.b	smpsNoAttack, $01
0008309C E104                       	smpsAlterNote       $04
0008309E E701                       	dc.b	smpsNoAttack, $01
000830A0 E105                       	smpsAlterNote       $05
000830A2 E701                       	dc.b	smpsNoAttack, $01
000830A4 E10B                       	smpsAlterNote       $0B
000830A6 E701                       	dc.b	smpsNoAttack, $01
000830A8 E10F                       	smpsAlterNote       $0F
000830AA E701                       	dc.b	smpsNoAttack, $01
000830AC E10B                       	smpsAlterNote       $0B
000830AE E701                       	dc.b	smpsNoAttack, $01
000830B0 E108                       	smpsAlterNote       $08
000830B2 E701                       	dc.b	smpsNoAttack, $01
000830B4 E104                       	smpsAlterNote       $04
000830B6 E701                       	dc.b	smpsNoAttack, $01
000830B8 E108                       	smpsAlterNote       $08
000830BA E701                       	dc.b	smpsNoAttack, $01
000830BC E10E                       	smpsAlterNote       $0E
000830BE E701                       	dc.b	smpsNoAttack, $01
000830C0 E10F                       	smpsAlterNote       $0F
000830C2 E701                       	dc.b	smpsNoAttack, $01
000830C4 E10B                       	smpsAlterNote       $0B
000830C6 E701                       	dc.b	smpsNoAttack, $01
000830C8 E105                       	smpsAlterNote       $05
000830CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000830CE E108                       	smpsAlterNote       $08
000830D0 E701                       	dc.b	smpsNoAttack, $01
000830D2 E10E                       	smpsAlterNote       $0E
000830D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000830D8 E108                       	smpsAlterNote       $08
000830DA E701                       	dc.b	smpsNoAttack, $01
000830DC E105                       	smpsAlterNote       $05
000830DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000830E2 E10B                       	smpsAlterNote       $0B
000830E4 E701                       	dc.b	smpsNoAttack, $01
000830E6 E10F                       	smpsAlterNote       $0F
000830E8 E701                       	dc.b	smpsNoAttack, $01
000830EA E10E                       	smpsAlterNote       $0E
000830EC E701                       	dc.b	smpsNoAttack, $01
000830EE E108                       	smpsAlterNote       $08
000830F0 E701                       	dc.b	smpsNoAttack, $01
000830F2 E104                       	smpsAlterNote       $04
000830F4 E701                       	dc.b	smpsNoAttack, $01
000830F6 E105                       	smpsAlterNote       $05
000830F8 8001                       	dc.b	nRst, $01
000830FA E108                       	smpsAlterNote       $08
000830FC B50A                       	dc.b	nE4, $0A
000830FE E109                       	smpsAlterNote       $09
00083100 B60D                       	dc.b	nF4, $0D
00083102 E106                       	smpsAlterNote       $06
00083104 E701                       	dc.b	smpsNoAttack, $01
00083106 E103                       	smpsAlterNote       $03
00083108 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008310C E109                       	smpsAlterNote       $09
0008310E E701                       	dc.b	smpsNoAttack, $01
00083110 E10D                       	smpsAlterNote       $0D
00083112 E701                       	dc.b	smpsNoAttack, $01
00083114 E10C                       	smpsAlterNote       $0C
00083116 E701                       	dc.b	smpsNoAttack, $01
00083118 E106                       	smpsAlterNote       $06
0008311A E701                       	dc.b	smpsNoAttack, $01
0008311C E102                       	smpsAlterNote       $02
0008311E E701                       	dc.b	smpsNoAttack, $01
00083120 E106                       	smpsAlterNote       $06
00083122 E701                       	dc.b	smpsNoAttack, $01
00083124 E109                       	smpsAlterNote       $09
00083126 E701                       	dc.b	smpsNoAttack, $01
00083128 E10D                       	smpsAlterNote       $0D
0008312A E701                       	dc.b	smpsNoAttack, $01
0008312C E109                       	smpsAlterNote       $09
0008312E B80D                       	dc.b	nG4, $0D
00083130 E106                       	smpsAlterNote       $06
00083132 E701                       	dc.b	smpsNoAttack, $01
00083134 E103                       	smpsAlterNote       $03
00083136 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008313A E109                       	smpsAlterNote       $09
0008313C E701                       	dc.b	smpsNoAttack, $01
0008313E E10D                       	smpsAlterNote       $0D
00083140 E701                       	dc.b	smpsNoAttack, $01
00083142 E10C                       	smpsAlterNote       $0C
00083144 E701                       	dc.b	smpsNoAttack, $01
00083146 E106                       	smpsAlterNote       $06
00083148 E701                       	dc.b	smpsNoAttack, $01
0008314A E102                       	smpsAlterNote       $02
0008314C E701                       	dc.b	smpsNoAttack, $01
0008314E E106                       	smpsAlterNote       $06
00083150 E701                       	dc.b	smpsNoAttack, $01
00083152 E109                       	smpsAlterNote       $09
00083154 E701                       	dc.b	smpsNoAttack, $01
00083156 E10D                       	smpsAlterNote       $0D
00083158 E701                       	dc.b	smpsNoAttack, $01
0008315A E109                       	smpsAlterNote       $09
0008315C E701                       	dc.b	smpsNoAttack, $01
0008315E E103                       	smpsAlterNote       $03
00083160 E701                       	dc.b	smpsNoAttack, $01
00083162 E102                       	smpsAlterNote       $02
00083164 E701                       	dc.b	smpsNoAttack, $01
00083166 E106                       	smpsAlterNote       $06
00083168 E701                       	dc.b	smpsNoAttack, $01
0008316A E10C                       	smpsAlterNote       $0C
0008316C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083170 E109                       	smpsAlterNote       $09
00083172 E701                       	dc.b	smpsNoAttack, $01
00083174 E10B                       	smpsAlterNote       $0B
00083176 BA0D                       	dc.b	nA4, $0D
00083178 E108                       	smpsAlterNote       $08
0008317A E701                       	dc.b	smpsNoAttack, $01
0008317C E104                       	smpsAlterNote       $04
0008317E E701                       	dc.b	smpsNoAttack, $01
00083180 E108                       	smpsAlterNote       $08
00083182 E701                       	dc.b	smpsNoAttack, $01
00083184 E10B                       	smpsAlterNote       $0B
00083186 E701                       	dc.b	smpsNoAttack, $01
00083188 E10F                       	smpsAlterNote       $0F
0008318A E701                       	dc.b	smpsNoAttack, $01
0008318C E10B                       	smpsAlterNote       $0B
0008318E E701                       	dc.b	smpsNoAttack, $01
00083190 E105                       	smpsAlterNote       $05
00083192 E701                       	dc.b	smpsNoAttack, $01
00083194 E104                       	smpsAlterNote       $04
00083196 E701                       	dc.b	smpsNoAttack, $01
00083198 E108                       	smpsAlterNote       $08
0008319A E701                       	dc.b	smpsNoAttack, $01
0008319C E10E                       	smpsAlterNote       $0E
0008319E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000831A2 E10B                       	smpsAlterNote       $0B
000831A4 E701                       	dc.b	smpsNoAttack, $01
000831A6 E105                       	smpsAlterNote       $05
000831A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000831AC E10B                       	smpsAlterNote       $0B
000831AE E701                       	dc.b	smpsNoAttack, $01
000831B0 E10E                       	smpsAlterNote       $0E
000831B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000831B6 E108                       	smpsAlterNote       $08
000831B8 E701                       	dc.b	smpsNoAttack, $01
000831BA E104                       	smpsAlterNote       $04
000831BC E701                       	dc.b	smpsNoAttack, $01
000831BE E105                       	smpsAlterNote       $05
000831C0 E701                       	dc.b	smpsNoAttack, $01
000831C2 E10B                       	smpsAlterNote       $0B
000831C4 E701                       	dc.b	smpsNoAttack, $01
000831C6 E10F                       	smpsAlterNote       $0F
000831C8 E701                       	dc.b	smpsNoAttack, $01
000831CA E10B                       	smpsAlterNote       $0B
000831CC E701                       	dc.b	smpsNoAttack, $01
000831CE E108                       	smpsAlterNote       $08
000831D0 E701                       	dc.b	smpsNoAttack, $01
000831D2 E105                       	smpsAlterNote       $05
000831D4 8001                       	dc.b	nRst, $01
000831D6 E109                       	smpsAlterNote       $09
000831D8 B609 8001                  	dc.b	nF4, $09, nRst, $01
000831DC E108                       	smpsAlterNote       $08
000831DE B506 8001                  	dc.b	nE4, $06, nRst, $01
000831E2 E107                       	smpsAlterNote       $07
000831E4 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000831E8 E108                       	smpsAlterNote       $08
000831EA B502 8001                  	dc.b	nE4, $02, nRst, $01
000831EE E109                       	smpsAlterNote       $09
000831F0 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000831F6 E10B                       	smpsAlterNote       $0B
000831F8 BA0D                       	dc.b	nA4, $0D
000831FA E108                       	smpsAlterNote       $08
000831FC E701                       	dc.b	smpsNoAttack, $01
000831FE E104                       	smpsAlterNote       $04
00083200 E701                       	dc.b	smpsNoAttack, $01
00083202 E108                       	smpsAlterNote       $08
00083204 E701                       	dc.b	smpsNoAttack, $01
00083206 E10E                       	smpsAlterNote       $0E
00083208 E701                       	dc.b	smpsNoAttack, $01
0008320A E10F                       	smpsAlterNote       $0F
0008320C E701                       	dc.b	smpsNoAttack, $01
0008320E E10B                       	smpsAlterNote       $0B
00083210 E701                       	dc.b	smpsNoAttack, $01
00083212 E105                       	smpsAlterNote       $05
00083214 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083218 E108                       	smpsAlterNote       $08
0008321A E701                       	dc.b	smpsNoAttack, $01
0008321C E10E                       	smpsAlterNote       $0E
0008321E E701                       	dc.b	smpsNoAttack, $01
00083220 E10F                       	smpsAlterNote       $0F
00083222 8001                       	dc.b	nRst, $01
00083224 E109                       	smpsAlterNote       $09
00083226 C20D                       	dc.b	nF5, $0D
00083228 E103                       	smpsAlterNote       $03
0008322A E701                       	dc.b	smpsNoAttack, $01
0008322C E102                       	smpsAlterNote       $02
0008322E E701                       	dc.b	smpsNoAttack, $01
00083230 E106                       	smpsAlterNote       $06
00083232 E701                       	dc.b	smpsNoAttack, $01
00083234 E10C                       	smpsAlterNote       $0C
00083236 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008323A E109                       	smpsAlterNote       $09
0008323C E701                       	dc.b	smpsNoAttack, $01
0008323E E103                       	smpsAlterNote       $03
00083240 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083244 E109                       	smpsAlterNote       $09
00083246 E701                       	dc.b	smpsNoAttack, $01
00083248 E10C                       	smpsAlterNote       $0C
0008324A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008324E E106                       	smpsAlterNote       $06
00083250 E701                       	dc.b	smpsNoAttack, $01
00083252 E102                       	smpsAlterNote       $02
00083254 E701                       	dc.b	smpsNoAttack, $01
00083256 E103                       	smpsAlterNote       $03
00083258 E701                       	dc.b	smpsNoAttack, $01
0008325A E109                       	smpsAlterNote       $09
0008325C E701                       	dc.b	smpsNoAttack, $01
0008325E E10D                       	smpsAlterNote       $0D
00083260 E701                       	dc.b	smpsNoAttack, $01
00083262 E109                       	smpsAlterNote       $09
00083264 E701                       	dc.b	smpsNoAttack, $01
00083266 E106                       	smpsAlterNote       $06
00083268 E701                       	dc.b	smpsNoAttack, $01
0008326A E102                       	smpsAlterNote       $02
0008326C E701                       	dc.b	smpsNoAttack, $01
0008326E E106                       	smpsAlterNote       $06
00083270 E701                       	dc.b	smpsNoAttack, $01
00083272 E10C                       	smpsAlterNote       $0C
00083274 E701                       	dc.b	smpsNoAttack, $01
00083276 E10D                       	smpsAlterNote       $0D
00083278 E701                       	dc.b	smpsNoAttack, $01
0008327A E109                       	smpsAlterNote       $09
0008327C E701                       	dc.b	smpsNoAttack, $01
0008327E E103                       	smpsAlterNote       $03
00083280 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083284 E106                       	smpsAlterNote       $06
00083286 E701                       	dc.b	smpsNoAttack, $01
00083288 E10C                       	smpsAlterNote       $0C
0008328A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008328E E106                       	smpsAlterNote       $06
00083290 E701                       	dc.b	smpsNoAttack, $01
00083292 E103                       	smpsAlterNote       $03
00083294 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083298 E109                       	smpsAlterNote       $09
0008329A E701                       	dc.b	smpsNoAttack, $01
0008329C E10D                       	smpsAlterNote       $0D
0008329E E701                       	dc.b	smpsNoAttack, $01
000832A0 E10C                       	smpsAlterNote       $0C
000832A2 E701                       	dc.b	smpsNoAttack, $01
000832A4 E106                       	smpsAlterNote       $06
000832A6 E701                       	dc.b	smpsNoAttack, $01
000832A8 E102                       	smpsAlterNote       $02
000832AA E701                       	dc.b	smpsNoAttack, $01
000832AC E106                       	smpsAlterNote       $06
000832AE E701                       	dc.b	smpsNoAttack, $01
000832B0 E109                       	smpsAlterNote       $09
000832B2 E701                       	dc.b	smpsNoAttack, $01
000832B4 E10D                       	smpsAlterNote       $0D
000832B6 E701                       	dc.b	smpsNoAttack, $01
000832B8 E109                       	smpsAlterNote       $09
000832BA E701                       	dc.b	smpsNoAttack, $01
000832BC E103                       	smpsAlterNote       $03
000832BE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000832C2 E109                       	smpsAlterNote       $09
000832C4 C206                       	dc.b	nF5, $06
000832C6 E108                       	smpsAlterNote       $08
000832C8 C10E                       	dc.b	nE5, $0E
000832CA E102                       	smpsAlterNote       $02
000832CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000832D0 E108                       	smpsAlterNote       $08
000832D2 E701                       	dc.b	smpsNoAttack, $01
000832D4 E10B                       	smpsAlterNote       $0B
000832D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000832DA E105                       	smpsAlterNote       $05
000832DC E701                       	dc.b	smpsNoAttack, $01
000832DE E101                       	smpsAlterNote       $01
000832E0 E701                       	dc.b	smpsNoAttack, $01
000832E2 E102                       	smpsAlterNote       $02
000832E4 E701                       	dc.b	smpsNoAttack, $01
000832E6 E108                       	smpsAlterNote       $08
000832E8 E701                       	dc.b	smpsNoAttack, $01
000832EA E10C                       	smpsAlterNote       $0C
000832EC E701                       	dc.b	smpsNoAttack, $01
000832EE E107                       	smpsAlterNote       $07
000832F0 BF0E                       	dc.b	nD5, $0E
000832F2 E101                       	smpsAlterNote       $01
000832F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000832F8 E107                       	smpsAlterNote       $07
000832FA E701                       	dc.b	smpsNoAttack, $01
000832FC E10A                       	smpsAlterNote       $0A
000832FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083302 E104                       	smpsAlterNote       $04
00083304 E701                       	dc.b	smpsNoAttack, $01
00083306 E100                       	smpsAlterNote       $00
00083308 E701                       	dc.b	smpsNoAttack, $01
0008330A E104                       	smpsAlterNote       $04
0008330C E701                       	dc.b	smpsNoAttack, $01
0008330E E107                       	smpsAlterNote       $07
00083310 E701                       	dc.b	smpsNoAttack, $01
00083312 E10B                       	smpsAlterNote       $0B
00083314 E701                       	dc.b	smpsNoAttack, $01
00083316 E107                       	smpsAlterNote       $07
00083318 E701                       	dc.b	smpsNoAttack, $01
0008331A E101                       	smpsAlterNote       $01
0008331C E701                       	dc.b	smpsNoAttack, $01
0008331E E100                       	smpsAlterNote       $00
00083320 E701                       	dc.b	smpsNoAttack, $01
00083322 E104                       	smpsAlterNote       $04
00083324 E701                       	dc.b	smpsNoAttack, $01
00083326 E10A                       	smpsAlterNote       $0A
00083328 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008332C E107                       	smpsAlterNote       $07
0008332E E701                       	dc.b	smpsNoAttack, $01
00083330 E101                       	smpsAlterNote       $01
00083332 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083336 E107                       	smpsAlterNote       $07
00083338 E701                       	dc.b	smpsNoAttack, $01
0008333A E10A                       	smpsAlterNote       $0A
0008333C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083340 E104                       	smpsAlterNote       $04
00083342 E701                       	dc.b	smpsNoAttack, $01
00083344 E100                       	smpsAlterNote       $00
00083346 E701                       	dc.b	smpsNoAttack, $01
00083348 E101                       	smpsAlterNote       $01
0008334A E701                       	dc.b	smpsNoAttack, $01
0008334C E107                       	smpsAlterNote       $07
0008334E E701                       	dc.b	smpsNoAttack, $01
00083350 E10B                       	smpsAlterNote       $0B
00083352 E701                       	dc.b	smpsNoAttack, $01
00083354 E107                       	smpsAlterNote       $07
00083356 E701                       	dc.b	smpsNoAttack, $01
00083358 E104                       	smpsAlterNote       $04
0008335A E701                       	dc.b	smpsNoAttack, $01
0008335C E100                       	smpsAlterNote       $00
0008335E E701                       	dc.b	smpsNoAttack, $01
00083360 E104                       	smpsAlterNote       $04
00083362 E701                       	dc.b	smpsNoAttack, $01
00083364 E10A                       	smpsAlterNote       $0A
00083366 E701                       	dc.b	smpsNoAttack, $01
00083368 E10B                       	smpsAlterNote       $0B
0008336A E701                       	dc.b	smpsNoAttack, $01
0008336C E107                       	smpsAlterNote       $07
0008336E E701                       	dc.b	smpsNoAttack, $01
00083370 E101                       	smpsAlterNote       $01
00083372 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083376 E104                       	smpsAlterNote       $04
00083378 E701                       	dc.b	smpsNoAttack, $01
0008337A E10A                       	smpsAlterNote       $0A
0008337C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083380 E104                       	smpsAlterNote       $04
00083382 E701                       	dc.b	smpsNoAttack, $01
00083384 E101                       	smpsAlterNote       $01
00083386 E701                       	dc.b	smpsNoAttack, $01
0008338A E107                       	smpsAlterNote       $07
0008338C E6FF                       	smpsAlterVol        $FF
0008338E BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008339A 8004                       	dc.b	nRst, $04
0008339E E109                       	smpsAlterNote       $09
000833A0 E602                       	smpsAlterVol        $02
000833A2 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
000833A8 E108                       	smpsAlterNote       $08
000833AA B502 8001                  	dc.b	nE4, $02, nRst, $01
000833AE E109                       	smpsAlterNote       $09
000833B0 B60D                       	dc.b	nF4, $0D
000833B2 E106                       	smpsAlterNote       $06
000833B4 E701                       	dc.b	smpsNoAttack, $01
000833B6 E102                       	smpsAlterNote       $02
000833B8 E701                       	dc.b	smpsNoAttack, $01
000833BA E106                       	smpsAlterNote       $06
000833BC E701                       	dc.b	smpsNoAttack, $01
000833BE E109                       	smpsAlterNote       $09
000833C0 E701                       	dc.b	smpsNoAttack, $01
000833C2 E10D                       	smpsAlterNote       $0D
000833C4 E701                       	dc.b	smpsNoAttack, $01
000833C6 E109                       	smpsAlterNote       $09
000833C8 E701                       	dc.b	smpsNoAttack, $01
000833CA E103                       	smpsAlterNote       $03
000833CC E701                       	dc.b	smpsNoAttack, $01
000833CE E102                       	smpsAlterNote       $02
000833D0 E701                       	dc.b	smpsNoAttack, $01
000833D2 E106                       	smpsAlterNote       $06
000833D4 E701                       	dc.b	smpsNoAttack, $01
000833D6 E10C                       	smpsAlterNote       $0C
000833D8 E701                       	dc.b	smpsNoAttack, $01
000833DA E10D                       	smpsAlterNote       $0D
000833DC 8001                       	dc.b	nRst, $01
000833DE E109                       	smpsAlterNote       $09
000833E0 B80D                       	dc.b	nG4, $0D
000833E2 E106                       	smpsAlterNote       $06
000833E4 E701                       	dc.b	smpsNoAttack, $01
000833E6 E102                       	smpsAlterNote       $02
000833E8 E701                       	dc.b	smpsNoAttack, $01
000833EA E106                       	smpsAlterNote       $06
000833EC E701                       	dc.b	smpsNoAttack, $01
000833EE E10C                       	smpsAlterNote       $0C
000833F0 E701                       	dc.b	smpsNoAttack, $01
000833F2 E10D                       	smpsAlterNote       $0D
000833F4 E701                       	dc.b	smpsNoAttack, $01
000833F6 E109                       	smpsAlterNote       $09
000833F8 E701                       	dc.b	smpsNoAttack, $01
000833FA E103                       	smpsAlterNote       $03
000833FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083400 E106                       	smpsAlterNote       $06
00083402 E701                       	dc.b	smpsNoAttack, $01
00083404 E10C                       	smpsAlterNote       $0C
00083406 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008340A E106                       	smpsAlterNote       $06
0008340C E701                       	dc.b	smpsNoAttack, $01
0008340E E103                       	smpsAlterNote       $03
00083410 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083414 E109                       	smpsAlterNote       $09
00083416 E701                       	dc.b	smpsNoAttack, $01
00083418 E10D                       	smpsAlterNote       $0D
0008341A E701                       	dc.b	smpsNoAttack, $01
0008341C E10C                       	smpsAlterNote       $0C
0008341E E701                       	dc.b	smpsNoAttack, $01
00083420 E109                       	smpsAlterNote       $09
00083422 8001                       	dc.b	nRst, $01
00083424 E10B                       	smpsAlterNote       $0B
00083426 BA03                       	dc.b	nA4, $03
00083428 E10C                       	smpsAlterNote       $0C
0008342A BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008342E E10B                       	smpsAlterNote       $0B
00083430 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00083436 E10C                       	smpsAlterNote       $0C
00083438 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008343C E10B                       	smpsAlterNote       $0B
0008343E C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00083444 E10C                       	smpsAlterNote       $0C
00083446 D303                       	dc.b	nBb6, $03
00083448 E10B                       	smpsAlterNote       $0B
0008344A D20D                       	dc.b	nA6, $0D
0008344C E108                       	smpsAlterNote       $08
0008344E E701                       	dc.b	smpsNoAttack, $01
00083450 E104                       	smpsAlterNote       $04
00083452 E701                       	dc.b	smpsNoAttack, $01
00083454 E105                       	smpsAlterNote       $05
00083456 E701                       	dc.b	smpsNoAttack, $01
00083458 E10B                       	smpsAlterNote       $0B
0008345A E701                       	dc.b	smpsNoAttack, $01
0008345C E10F                       	smpsAlterNote       $0F
0008345E E701                       	dc.b	smpsNoAttack, $01
00083460 E10B                       	smpsAlterNote       $0B
00083462 E701                       	dc.b	smpsNoAttack, $01
00083464 E108                       	smpsAlterNote       $08
00083466 E701                       	dc.b	smpsNoAttack, $01
00083468 E104                       	smpsAlterNote       $04
0008346A E701                       	dc.b	smpsNoAttack, $01
0008346C E108                       	smpsAlterNote       $08
0008346E E701                       	dc.b	smpsNoAttack, $01
00083470 E10E                       	smpsAlterNote       $0E
00083472 E701                       	dc.b	smpsNoAttack, $01
00083474 E10F                       	smpsAlterNote       $0F
00083476 E701                       	dc.b	smpsNoAttack, $01
00083478 E10B                       	smpsAlterNote       $0B
0008347A E701                       	dc.b	smpsNoAttack, $01
0008347C E105                       	smpsAlterNote       $05
0008347E E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00083484 E109                       	smpsAlterNote       $09
00083486 CE07                       	dc.b	nF6, $07
00083488 E108                       	smpsAlterNote       $08
0008348A CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008348E E109                       	smpsAlterNote       $09
00083490 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00083494 E108                       	smpsAlterNote       $08
00083496 CC0D                       	dc.b	nEb6, $0D
00083498 E102                       	smpsAlterNote       $02
0008349A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008349E E108                       	smpsAlterNote       $08
000834A0 E701                       	dc.b	smpsNoAttack, $01
000834A2 E10B                       	smpsAlterNote       $0B
000834A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000834A8 E105                       	smpsAlterNote       $05
000834AA E701                       	dc.b	smpsNoAttack, $01
000834AC E101                       	smpsAlterNote       $01
000834AE E701                       	dc.b	smpsNoAttack, $01
000834B0 E102                       	smpsAlterNote       $02
000834B2 E701                       	dc.b	smpsNoAttack, $01
000834B4 E108                       	smpsAlterNote       $08
000834B6 E701                       	dc.b	smpsNoAttack, $01
000834B8 E10C                       	smpsAlterNote       $0C
000834BA E701                       	dc.b	smpsNoAttack, $01
000834BC E108                       	smpsAlterNote       $08
000834BE E701                       	dc.b	smpsNoAttack, $01
000834C0 E105                       	smpsAlterNote       $05
000834C2 E701                       	dc.b	smpsNoAttack, $01
000834C4 E101                       	smpsAlterNote       $01
000834C6 E701                       	dc.b	smpsNoAttack, $01
000834C8 E105                       	smpsAlterNote       $05
000834CA E701                       	dc.b	smpsNoAttack, $01
000834CC E10B                       	smpsAlterNote       $0B
000834CE E701                       	dc.b	smpsNoAttack, $01
000834D0 E10C                       	smpsAlterNote       $0C
000834D2 E701                       	dc.b	smpsNoAttack, $01
000834D4 E108                       	smpsAlterNote       $08
000834D6 E701                       	dc.b	smpsNoAttack, $01
000834D8 E107                       	smpsAlterNote       $07
000834DA CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000834E4 E10B                       	smpsAlterNote       $0B
000834E6 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000834F0 E109                       	smpsAlterNote       $09
000834F2 C203                       	dc.b	nF5, $03
000834F4 E108                       	smpsAlterNote       $08
000834F6 C103 8001                  	dc.b	nE5, $03, nRst, $01
000834FA E109                       	smpsAlterNote       $09
000834FC C20D                       	dc.b	nF5, $0D
000834FE E108                       	smpsAlterNote       $08
00083500 C10E                       	dc.b	nE5, $0E
00083502 E107                       	smpsAlterNote       $07
00083504 BF0D                       	dc.b	nD5, $0D
00083506 E104                       	smpsAlterNote       $04
00083508 E701                       	dc.b	smpsNoAttack, $01
0008350A E100                       	smpsAlterNote       $00
0008350C E701                       	dc.b	smpsNoAttack, $01
0008350E E104                       	smpsAlterNote       $04
00083510 E701                       	dc.b	smpsNoAttack, $01
00083512 E107                       	smpsAlterNote       $07
00083514 E701                       	dc.b	smpsNoAttack, $01
00083516 E10B                       	smpsAlterNote       $0B
00083518 E701                       	dc.b	smpsNoAttack, $01
0008351A E107                       	smpsAlterNote       $07
0008351C E701                       	dc.b	smpsNoAttack, $01
0008351E E101                       	smpsAlterNote       $01
00083520 E701                       	dc.b	smpsNoAttack, $01
00083522 E100                       	smpsAlterNote       $00
00083524 E701                       	dc.b	smpsNoAttack, $01
00083526 E104                       	smpsAlterNote       $04
00083528 E701                       	dc.b	smpsNoAttack, $01
0008352A E10A                       	smpsAlterNote       $0A
0008352C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083530 E107                       	smpsAlterNote       $07
00083532 E701                       	dc.b	smpsNoAttack, $01
00083534 E101                       	smpsAlterNote       $01
00083536 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008353A E107                       	smpsAlterNote       $07
0008353C E701                       	dc.b	smpsNoAttack, $01
0008353E E10A                       	smpsAlterNote       $0A
00083540 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083544 E104                       	smpsAlterNote       $04
00083546 E701                       	dc.b	smpsNoAttack, $01
00083548 E100                       	smpsAlterNote       $00
0008354A E701                       	dc.b	smpsNoAttack, $01
0008354C E101                       	smpsAlterNote       $01
0008354E E701                       	dc.b	smpsNoAttack, $01
00083550 E107                       	smpsAlterNote       $07
00083552 E701                       	dc.b	smpsNoAttack, $01
00083554 E10B                       	smpsAlterNote       $0B
00083556 E701                       	dc.b	smpsNoAttack, $01
00083558 E107                       	smpsAlterNote       $07
0008355A E701                       	dc.b	smpsNoAttack, $01
0008355C E104                       	smpsAlterNote       $04
0008355E E701                       	dc.b	smpsNoAttack, $01
00083560 E100                       	smpsAlterNote       $00
00083562 E701                       	dc.b	smpsNoAttack, $01
00083564 E104                       	smpsAlterNote       $04
00083566 E701                       	dc.b	smpsNoAttack, $01
00083568 E10A                       	smpsAlterNote       $0A
0008356A E701                       	dc.b	smpsNoAttack, $01
0008356C E10B                       	smpsAlterNote       $0B
0008356E E701                       	dc.b	smpsNoAttack, $01
00083570 E107                       	smpsAlterNote       $07
00083572 E701                       	dc.b	smpsNoAttack, $01
00083574 E101                       	smpsAlterNote       $01
00083576 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008357A E104                       	smpsAlterNote       $04
0008357C E701                       	dc.b	smpsNoAttack, $01
0008357E E10A                       	smpsAlterNote       $0A
00083580 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083584 E104                       	smpsAlterNote       $04
00083586 E701                       	dc.b	smpsNoAttack, $01
00083588 E101                       	smpsAlterNote       $01
0008358A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008358E E107                       	smpsAlterNote       $07
00083590 E701                       	dc.b	smpsNoAttack, $01
00083592 E10B                       	smpsAlterNote       $0B
00083594 E701                       	dc.b	smpsNoAttack, $01
00083596 E10A                       	smpsAlterNote       $0A
00083598 E701                       	dc.b	smpsNoAttack, $01
0008359A E104                       	smpsAlterNote       $04
0008359C E701                       	dc.b	smpsNoAttack, $01
0008359E E100                       	smpsAlterNote       $00
000835A0 E701                       	dc.b	smpsNoAttack, $01
000835A2 E104                       	smpsAlterNote       $04
000835A4 E701                       	dc.b	smpsNoAttack, $01
000835A6 E107                       	smpsAlterNote       $07
000835A8 E701                       	dc.b	smpsNoAttack, $01
000835AA E10B                       	smpsAlterNote       $0B
000835AC E701                       	dc.b	smpsNoAttack, $01
000835AE E107                       	smpsAlterNote       $07
000835B0 E701                       	dc.b	smpsNoAttack, $01
000835B2 E101                       	smpsAlterNote       $01
000835B4 E701                       	dc.b	smpsNoAttack, $01
000835B6 E100                       	smpsAlterNote       $00
000835B8 E701                       	dc.b	smpsNoAttack, $01
000835BA E104                       	smpsAlterNote       $04
000835BC E701                       	dc.b	smpsNoAttack, $01
000835BE E10A                       	smpsAlterNote       $0A
000835C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000835C4 E107                       	smpsAlterNote       $07
000835C6 E701                       	dc.b	smpsNoAttack, $01
000835C8 E101                       	smpsAlterNote       $01
000835CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000835CE E107                       	smpsAlterNote       $07
000835D0 E701                       	dc.b	smpsNoAttack, $01
000835D2 E10A                       	smpsAlterNote       $0A
000835D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000835D8 E104                       	smpsAlterNote       $04
000835DA E701                       	dc.b	smpsNoAttack, $01
000835DC E100                       	smpsAlterNote       $00
000835DE E701                       	dc.b	smpsNoAttack, $01
000835E0 E101                       	smpsAlterNote       $01
000835E2 E701                       	dc.b	smpsNoAttack, $01
000835E4 E107                       	smpsAlterNote       $07
000835E6 E701                       	dc.b	smpsNoAttack, $01
000835E8 E10B                       	smpsAlterNote       $0B
000835EA E701                       	dc.b	smpsNoAttack, $01
000835EC E107                       	smpsAlterNote       $07
000835EE E701                       	dc.b	smpsNoAttack, $01
000835F0 E104                       	smpsAlterNote       $04
000835F2 E701                       	dc.b	smpsNoAttack, $01
000835F4 E100                       	smpsAlterNote       $00
000835F6 E701                       	dc.b	smpsNoAttack, $01
000835F8 E101                       	smpsAlterNote       $01
000835FA 8001                       	dc.b	nRst, $01
000835FC E109                       	smpsAlterNote       $09
000835FE C20D                       	dc.b	nF5, $0D
00083600 E106                       	smpsAlterNote       $06
00083602 E701                       	dc.b	smpsNoAttack, $01
00083604 E102                       	smpsAlterNote       $02
00083606 E701                       	dc.b	smpsNoAttack, $01
00083608 E106                       	smpsAlterNote       $06
0008360A E701                       	dc.b	smpsNoAttack, $01
0008360C E10C                       	smpsAlterNote       $0C
0008360E E701                       	dc.b	smpsNoAttack, $01
00083610 E10D                       	smpsAlterNote       $0D
00083612 E701                       	dc.b	smpsNoAttack, $01
00083614 E109                       	smpsAlterNote       $09
00083616 E701                       	dc.b	smpsNoAttack, $01
00083618 E103                       	smpsAlterNote       $03
0008361A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008361E E106                       	smpsAlterNote       $06
00083620 E701                       	dc.b	smpsNoAttack, $01
00083622 E10C                       	smpsAlterNote       $0C
00083624 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083628 E106                       	smpsAlterNote       $06
0008362A E701                       	dc.b	smpsNoAttack, $01
0008362C E103                       	smpsAlterNote       $03
0008362E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083632 E109                       	smpsAlterNote       $09
00083634 E701                       	dc.b	smpsNoAttack, $01
00083636 E10D                       	smpsAlterNote       $0D
00083638 E701                       	dc.b	smpsNoAttack, $01
0008363A E10C                       	smpsAlterNote       $0C
0008363C E701                       	dc.b	smpsNoAttack, $01
0008363E E109                       	smpsAlterNote       $09
00083640 8001                       	dc.b	nRst, $01
00083642 E108                       	smpsAlterNote       $08
00083644 C10D                       	dc.b	nE5, $0D
00083646 E109                       	smpsAlterNote       $09
00083648 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0008364C E108                       	smpsAlterNote       $08
0008364E C10D                       	dc.b	nE5, $0D
00083650 E102                       	smpsAlterNote       $02
00083652 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083656 E105                       	smpsAlterNote       $05
00083658 E701                       	dc.b	smpsNoAttack, $01
0008365A E108                       	smpsAlterNote       $08
0008365C 8001                       	dc.b	nRst, $01
0008365E E107                       	smpsAlterNote       $07
00083660 BF0D                       	dc.b	nD5, $0D
00083662 E108                       	smpsAlterNote       $08
00083664 C107                       	dc.b	nE5, $07
00083666 E109                       	smpsAlterNote       $09
00083668 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008366E E10B                       	smpsAlterNote       $0B
00083670 C603                       	dc.b	nA5, $03
00083672 E10C                       	smpsAlterNote       $0C
00083674 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008367A E10B                       	smpsAlterNote       $0B
0008367C C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00083682 E109                       	smpsAlterNote       $09
00083684 D003                       	dc.b	nG6, $03
00083686 E108                       	smpsAlterNote       $08
00083688 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008368C E10B                       	smpsAlterNote       $0B
0008368E C601 8001                  	dc.b	nA5, $01, nRst, $01
00083692 E108                       	smpsAlterNote       $08
00083694 C102                       	dc.b	nE5, $02
00083698 E10C                       	smpsAlterNote       $0C
0008369A E6FB                       	smpsAlterVol        $FB
0008369C A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
000836A8 8001                       	dc.b	nRst, $01
000836AA E10B                       	smpsAlterNote       $0B
000836AC A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000836B4 E107                       	smpsAlterNote       $07
000836B6 A706 8001                  	dc.b	nD3, $06, nRst, $01
000836BA E10B                       	smpsAlterNote       $0B
000836BC A203                       	dc.b	nA2, $03
000836BE E109                       	smpsAlterNote       $09
000836C0 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000836C4 E108                       	smpsAlterNote       $08
000836C6 A906                       	dc.b	nE3, $06
000836C8 E107                       	smpsAlterNote       $07
000836CA A703 8001                  	dc.b	nD3, $03, nRst, $01
000836CE E106                       	smpsAlterNote       $06
000836D0 A503                       	dc.b	nC3, $03
000836D2 E10C                       	smpsAlterNote       $0C
000836D4 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000836D8 E10B                       	smpsAlterNote       $0B
000836DA A203 8004                  	dc.b	nA2, $03, nRst, $04
000836DE E11B                       	smpsAlterNote       $1B
000836E0 C401                       	dc.b	nG5, $01
000836E2 E1F4                       	smpsAlterNote       $F4
000836E4 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000836E7 E106                       	smpsAlterNote       $06
000836E9 E701                       	dc.b	smpsNoAttack, $01
000836EB E10F                       	smpsAlterNote       $0F
000836ED E701                       	dc.b	smpsNoAttack, $01
000836EF E1E4                       	smpsAlterNote       $E4
000836F1 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000836F4 E1F6                       	smpsAlterNote       $F6
000836F6 E701                       	dc.b	smpsNoAttack, $01
000836F8 E108                       	smpsAlterNote       $08
000836FA E701                       	dc.b	smpsNoAttack, $01
000836FC E10B                       	smpsAlterNote       $0B
000836FE E706                       	dc.b	smpsNoAttack, $06
00083700 E105                       	smpsAlterNote       $05
00083702 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083706 E108                       	smpsAlterNote       $08
00083708 E701                       	dc.b	smpsNoAttack, $01
0008370A E10E                       	smpsAlterNote       $0E
0008370C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083710 E108                       	smpsAlterNote       $08
00083712 E701                       	dc.b	smpsNoAttack, $01
00083714 E105                       	smpsAlterNote       $05
00083716 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008371A E10B                       	smpsAlterNote       $0B
0008371C E701                       	dc.b	smpsNoAttack, $01
0008371E E10F                       	smpsAlterNote       $0F
00083720 E701                       	dc.b	smpsNoAttack, $01
00083722 E10E                       	smpsAlterNote       $0E
00083724 E701                       	dc.b	smpsNoAttack, $01
00083726 E108                       	smpsAlterNote       $08
00083728 E701                       	dc.b	smpsNoAttack, $01
0008372A E104                       	smpsAlterNote       $04
0008372C E701                       	dc.b	smpsNoAttack, $01
0008372E E108                       	smpsAlterNote       $08
00083730 E701                       	dc.b	smpsNoAttack, $01
00083732 E10B                       	smpsAlterNote       $0B
00083734 E701                       	dc.b	smpsNoAttack, $01
00083736 E10F                       	smpsAlterNote       $0F
00083738 E701                       	dc.b	smpsNoAttack, $01
0008373A E10B                       	smpsAlterNote       $0B
0008373C E701                       	dc.b	smpsNoAttack, $01
0008373E E105                       	smpsAlterNote       $05
00083740 E701                       	dc.b	smpsNoAttack, $01
00083742 E104                       	smpsAlterNote       $04
00083744 E701                       	dc.b	smpsNoAttack, $01
00083746 E108                       	smpsAlterNote       $08
00083748 E701                       	dc.b	smpsNoAttack, $01
0008374A E10E                       	smpsAlterNote       $0E
0008374C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083750 E10B                       	smpsAlterNote       $0B
00083752 E701                       	dc.b	smpsNoAttack, $01
00083754 E105                       	smpsAlterNote       $05
00083756 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008375A E10B                       	smpsAlterNote       $0B
0008375C E701                       	dc.b	smpsNoAttack, $01
0008375E E10E                       	smpsAlterNote       $0E
00083760 E701                       	dc.b	smpsNoAttack, $01
00083762 E10F                       	smpsAlterNote       $0F
00083764 8001                       	dc.b	nRst, $01
00083766 E109                       	smpsAlterNote       $09
00083768 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008376E E108                       	smpsAlterNote       $08
00083770 C101 8001                  	dc.b	nE5, $01, nRst, $01
00083774 E109                       	smpsAlterNote       $09
00083776 C202                       	dc.b	nF5, $02
00083778 E108                       	smpsAlterNote       $08
0008377A C102                       	dc.b	nE5, $02
0008377C E107                       	smpsAlterNote       $07
0008377E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00083782 E108                       	smpsAlterNote       $08
00083784 C101 8001                  	dc.b	nE5, $01, nRst, $01
00083788 E107                       	smpsAlterNote       $07
0008378A BF02                       	dc.b	nD5, $02
0008378C E106                       	smpsAlterNote       $06
0008378E BD02 8001                  	dc.b	nC5, $02, nRst, $01
00083792 E107                       	smpsAlterNote       $07
00083794 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00083798 E106                       	smpsAlterNote       $06
0008379A BD02                       	dc.b	nC5, $02
0008379C E10C                       	smpsAlterNote       $0C
0008379E BB02                       	dc.b	nBb4, $02
000837A0 E106                       	smpsAlterNote       $06
000837A2 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000837A6 E10C                       	smpsAlterNote       $0C
000837A8 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000837AC E10B                       	smpsAlterNote       $0B
000837AE BA02                       	dc.b	nA4, $02
000837B0 E10C                       	smpsAlterNote       $0C
000837B2 BB02                       	dc.b	nBb4, $02
000837B4 E10B                       	smpsAlterNote       $0B
000837B6 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000837C0 E108                       	smpsAlterNote       $08
000837C2 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000837CA E107                       	smpsAlterNote       $07
000837CC BE02                       	dc.b	nCs5, $02
000837CE E10B                       	smpsAlterNote       $0B
000837D0 BA02                       	dc.b	nA4, $02
000837D2 E109                       	smpsAlterNote       $09
000837D4 B802 8001                  	dc.b	nG4, $02, nRst, $01
000837D8 E108                       	smpsAlterNote       $08
000837DA B501 8001                  	dc.b	nE4, $01, nRst, $01
000837DE E10B                       	smpsAlterNote       $0B
000837E0 AE02                       	dc.b	nA3, $02
000837E2 E10C                       	smpsAlterNote       $0C
000837E4 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000837F0 E10B                       	smpsAlterNote       $0B
000837F2 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000837FA E107                       	smpsAlterNote       $07
000837FC A706 8001                  	dc.b	nD3, $06, nRst, $01
00083800 E10B                       	smpsAlterNote       $0B
00083802 A203                       	dc.b	nA2, $03
00083804 E109                       	smpsAlterNote       $09
00083806 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008380A E108                       	smpsAlterNote       $08
0008380C A906 8001                  	dc.b	nE3, $06, nRst, $01
00083810 E107                       	smpsAlterNote       $07
00083812 A702 8001                  	dc.b	nD3, $02, nRst, $01
00083816 E106                       	smpsAlterNote       $06
00083818 A503                       	dc.b	nC3, $03
0008381A E10C                       	smpsAlterNote       $0C
0008381C A303 8001                  	dc.b	nBb2, $03, nRst, $01
00083822 E107                       	smpsAlterNote       $07
00083824 B20D                       	dc.b	nCs4, $0D
00083826 E104                       	smpsAlterNote       $04
00083828 E701                       	dc.b	smpsNoAttack, $01
0008382A E100                       	smpsAlterNote       $00
0008382C E701                       	dc.b	smpsNoAttack, $01
0008382E E104                       	smpsAlterNote       $04
00083830 E701                       	dc.b	smpsNoAttack, $01
00083832 E10A                       	smpsAlterNote       $0A
00083834 E701                       	dc.b	smpsNoAttack, $01
00083836 E10B                       	smpsAlterNote       $0B
00083838 E701                       	dc.b	smpsNoAttack, $01
0008383A E107                       	smpsAlterNote       $07
0008383C E701                       	dc.b	smpsNoAttack, $01
0008383E E101                       	smpsAlterNote       $01
00083840 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083844 E104                       	smpsAlterNote       $04
00083846 E701                       	dc.b	smpsNoAttack, $01
00083848 E10A                       	smpsAlterNote       $0A
0008384A E701                       	dc.b	smpsNoAttack, $01
0008384C E10B                       	smpsAlterNote       $0B
0008384E 8001                       	dc.b	nRst, $01
00083850 E107                       	smpsAlterNote       $07
00083852 B30D                       	dc.b	nD4, $0D
00083854 E104                       	smpsAlterNote       $04
00083856 E701                       	dc.b	smpsNoAttack, $01
00083858 E100                       	smpsAlterNote       $00
0008385A E701                       	dc.b	smpsNoAttack, $01
0008385C E104                       	smpsAlterNote       $04
0008385E E701                       	dc.b	smpsNoAttack, $01
00083860 E10A                       	smpsAlterNote       $0A
00083862 E701                       	dc.b	smpsNoAttack, $01
00083864 E10B                       	smpsAlterNote       $0B
00083866 E701                       	dc.b	smpsNoAttack, $01
00083868 E107                       	smpsAlterNote       $07
0008386A E701                       	dc.b	smpsNoAttack, $01
0008386C E101                       	smpsAlterNote       $01
0008386E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083872 E104                       	smpsAlterNote       $04
00083874 E701                       	dc.b	smpsNoAttack, $01
00083876 E10A                       	smpsAlterNote       $0A
00083878 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008387C E104                       	smpsAlterNote       $04
0008387E E701                       	dc.b	smpsNoAttack, $01
00083880 E101                       	smpsAlterNote       $01
00083882 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083886 E107                       	smpsAlterNote       $07
00083888 E701                       	dc.b	smpsNoAttack, $01
0008388A E10B                       	smpsAlterNote       $0B
0008388C E701                       	dc.b	smpsNoAttack, $01
0008388E E10A                       	smpsAlterNote       $0A
00083890 E701                       	dc.b	smpsNoAttack, $01
00083892 E107                       	smpsAlterNote       $07
00083894 8001                       	dc.b	nRst, $01
00083896 E108                       	smpsAlterNote       $08
00083898 B50D                       	dc.b	nE4, $0D
0008389A E102                       	smpsAlterNote       $02
0008389C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000838A0 E105                       	smpsAlterNote       $05
000838A2 E701                       	dc.b	smpsNoAttack, $01
000838A4 E10B                       	smpsAlterNote       $0B
000838A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000838AA E105                       	smpsAlterNote       $05
000838AC E701                       	dc.b	smpsNoAttack, $01
000838AE E102                       	smpsAlterNote       $02
000838B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000838B4 E108                       	smpsAlterNote       $08
000838B6 E701                       	dc.b	smpsNoAttack, $01
000838B8 E10C                       	smpsAlterNote       $0C
000838BA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000838BE E107                       	smpsAlterNote       $07
000838C0 B30D                       	dc.b	nD4, $0D
000838C2 E101                       	smpsAlterNote       $01
000838C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000838C8 E104                       	smpsAlterNote       $04
000838CA E701                       	dc.b	smpsNoAttack, $01
000838CC E10A                       	smpsAlterNote       $0A
000838CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000838D2 E104                       	smpsAlterNote       $04
000838D4 E701                       	dc.b	smpsNoAttack, $01
000838D6 E101                       	smpsAlterNote       $01
000838D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000838DC E107                       	smpsAlterNote       $07
000838DE E701                       	dc.b	smpsNoAttack, $01
000838E0 E10B                       	smpsAlterNote       $0B
000838E2 E701                       	dc.b	smpsNoAttack, $01
000838E4 E10A                       	smpsAlterNote       $0A
000838E6 E701                       	dc.b	smpsNoAttack, $01
000838E8 E104                       	smpsAlterNote       $04
000838EA E701                       	dc.b	smpsNoAttack, $01
000838EC E100                       	smpsAlterNote       $00
000838EE E701                       	dc.b	smpsNoAttack, $01
000838F0 E104                       	smpsAlterNote       $04
000838F2 E701                       	dc.b	smpsNoAttack, $01
000838F4 E107                       	smpsAlterNote       $07
000838F6 E701                       	dc.b	smpsNoAttack, $01
000838F8 E10B                       	smpsAlterNote       $0B
000838FA E701                       	dc.b	smpsNoAttack, $01
000838FC E107                       	smpsAlterNote       $07
000838FE E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00083902 E101                       	smpsAlterNote       $01
00083904 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083908 E107                       	smpsAlterNote       $07
0008390A E701                       	dc.b	smpsNoAttack, $01
0008390C E10A                       	smpsAlterNote       $0A
0008390E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083912 E104                       	smpsAlterNote       $04
00083914 E701                       	dc.b	smpsNoAttack, $01
00083916 E100                       	smpsAlterNote       $00
00083918 E701                       	dc.b	smpsNoAttack, $01
0008391A E101                       	smpsAlterNote       $01
0008391C E701                       	dc.b	smpsNoAttack, $01
0008391E E107                       	smpsAlterNote       $07
00083920 E701                       	dc.b	smpsNoAttack, $01
00083922 E10B                       	smpsAlterNote       $0B
00083924 E701                       	dc.b	smpsNoAttack, $01
00083926 E107                       	smpsAlterNote       $07
00083928 B30E                       	dc.b	nD4, $0E
0008392A E101                       	smpsAlterNote       $01
0008392C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083930 E107                       	smpsAlterNote       $07
00083932 E701                       	dc.b	smpsNoAttack, $01
00083934 E10A                       	smpsAlterNote       $0A
00083936 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008393A E104                       	smpsAlterNote       $04
0008393C E701                       	dc.b	smpsNoAttack, $01
0008393E E100                       	smpsAlterNote       $00
00083940 E701                       	dc.b	smpsNoAttack, $01
00083942 E101                       	smpsAlterNote       $01
00083944 E701                       	dc.b	smpsNoAttack, $01
00083946 E107                       	smpsAlterNote       $07
00083948 E701                       	dc.b	smpsNoAttack, $01
0008394A E10B                       	smpsAlterNote       $0B
0008394C E701                       	dc.b	smpsNoAttack, $01
0008394E E107                       	smpsAlterNote       $07
00083950 E701                       	dc.b	smpsNoAttack, $01
00083952 E104                       	smpsAlterNote       $04
00083954 E701                       	dc.b	smpsNoAttack, $01
00083956 E100                       	smpsAlterNote       $00
00083958 E701                       	dc.b	smpsNoAttack, $01
0008395A E104                       	smpsAlterNote       $04
0008395C E701                       	dc.b	smpsNoAttack, $01
0008395E E10A                       	smpsAlterNote       $0A
00083960 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083964 E107                       	smpsAlterNote       $07
00083966 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008396A E104                       	smpsAlterNote       $04
0008396C E701                       	dc.b	smpsNoAttack, $01
0008396E E100                       	smpsAlterNote       $00
00083970 E701                       	dc.b	smpsNoAttack, $01
00083972 E101                       	smpsAlterNote       $01
00083974 E701                       	dc.b	smpsNoAttack, $01
00083976 E107                       	smpsAlterNote       $07
00083978 E701                       	dc.b	smpsNoAttack, $01
0008397A E10B                       	smpsAlterNote       $0B
0008397C E701                       	dc.b	smpsNoAttack, $01
0008397E E107                       	smpsAlterNote       $07
00083980 E701                       	dc.b	smpsNoAttack, $01
00083982 E104                       	smpsAlterNote       $04
00083984 E701                       	dc.b	smpsNoAttack, $01
00083986 E100                       	smpsAlterNote       $00
00083988 E701                       	dc.b	smpsNoAttack, $01
0008398A E104                       	smpsAlterNote       $04
0008398C E701                       	dc.b	smpsNoAttack, $01
0008398E E10A                       	smpsAlterNote       $0A
00083990 E701                       	dc.b	smpsNoAttack, $01
00083992 E10B                       	smpsAlterNote       $0B
00083994 E701                       	dc.b	smpsNoAttack, $01
00083998 E6FF                       	smpsAlterVol        $FF
0008399A A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
000839A6 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
000839AE E109                       	smpsAlterNote       $09
000839B0 E601                       	smpsAlterVol        $01
000839B2 B60D                       	dc.b	nF4, $0D
000839B4 E106                       	smpsAlterNote       $06
000839B6 E701                       	dc.b	smpsNoAttack, $01
000839B8 E102                       	smpsAlterNote       $02
000839BA E701                       	dc.b	smpsNoAttack, $01
000839BC E106                       	smpsAlterNote       $06
000839BE E701                       	dc.b	smpsNoAttack, $01
000839C0 E109                       	smpsAlterNote       $09
000839C2 E701                       	dc.b	smpsNoAttack, $01
000839C4 E10D                       	smpsAlterNote       $0D
000839C6 E701                       	dc.b	smpsNoAttack, $01
000839C8 E109                       	smpsAlterNote       $09
000839CA E701                       	dc.b	smpsNoAttack, $01
000839CC E103                       	smpsAlterNote       $03
000839CE E701                       	dc.b	smpsNoAttack, $01
000839D0 E102                       	smpsAlterNote       $02
000839D2 E701                       	dc.b	smpsNoAttack, $01
000839D4 E106                       	smpsAlterNote       $06
000839D6 E701                       	dc.b	smpsNoAttack, $01
000839D8 E10C                       	smpsAlterNote       $0C
000839DA E701                       	dc.b	smpsNoAttack, $01
000839DC E10D                       	smpsAlterNote       $0D
000839DE 8001                       	dc.b	nRst, $01
000839E0 E109                       	smpsAlterNote       $09
000839E2 B80D                       	dc.b	nG4, $0D
000839E4 E106                       	smpsAlterNote       $06
000839E6 E701                       	dc.b	smpsNoAttack, $01
000839E8 E102                       	smpsAlterNote       $02
000839EA E701                       	dc.b	smpsNoAttack, $01
000839EC E106                       	smpsAlterNote       $06
000839EE E701                       	dc.b	smpsNoAttack, $01
000839F0 E109                       	smpsAlterNote       $09
000839F2 E701                       	dc.b	smpsNoAttack, $01
000839F4 E10D                       	smpsAlterNote       $0D
000839F6 E701                       	dc.b	smpsNoAttack, $01
000839F8 E109                       	smpsAlterNote       $09
000839FA E701                       	dc.b	smpsNoAttack, $01
000839FC E103                       	smpsAlterNote       $03
000839FE E701                       	dc.b	smpsNoAttack, $01
00083A00 E102                       	smpsAlterNote       $02
00083A02 E701                       	dc.b	smpsNoAttack, $01
00083A04 E106                       	smpsAlterNote       $06
00083A06 E701                       	dc.b	smpsNoAttack, $01
00083A08 E10C                       	smpsAlterNote       $0C
00083A0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A0E E106                       	smpsAlterNote       $06
00083A10 E701                       	dc.b	smpsNoAttack, $01
00083A12 E103                       	smpsAlterNote       $03
00083A14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A18 E109                       	smpsAlterNote       $09
00083A1A E701                       	dc.b	smpsNoAttack, $01
00083A1C E10D                       	smpsAlterNote       $0D
00083A1E E701                       	dc.b	smpsNoAttack, $01
00083A20 E10C                       	smpsAlterNote       $0C
00083A22 E701                       	dc.b	smpsNoAttack, $01
00083A24 E109                       	smpsAlterNote       $09
00083A26 8001                       	dc.b	nRst, $01
00083A28 E10B                       	smpsAlterNote       $0B
00083A2A BA0D                       	dc.b	nA4, $0D
00083A2C E105                       	smpsAlterNote       $05
00083A2E E701                       	dc.b	smpsNoAttack, $01
00083A30 E104                       	smpsAlterNote       $04
00083A32 E701                       	dc.b	smpsNoAttack, $01
00083A34 E108                       	smpsAlterNote       $08
00083A36 E701                       	dc.b	smpsNoAttack, $01
00083A38 E10E                       	smpsAlterNote       $0E
00083A3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A3E E10B                       	smpsAlterNote       $0B
00083A40 E701                       	dc.b	smpsNoAttack, $01
00083A42 E105                       	smpsAlterNote       $05
00083A44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A48 E10B                       	smpsAlterNote       $0B
00083A4A E701                       	dc.b	smpsNoAttack, $01
00083A4C E10E                       	smpsAlterNote       $0E
00083A4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A52 E108                       	smpsAlterNote       $08
00083A54 E701                       	dc.b	smpsNoAttack, $01
00083A56 E104                       	smpsAlterNote       $04
00083A58 E701                       	dc.b	smpsNoAttack, $01
00083A5A E105                       	smpsAlterNote       $05
00083A5C E701                       	dc.b	smpsNoAttack, $01
00083A5E E10B                       	smpsAlterNote       $0B
00083A60 E701                       	dc.b	smpsNoAttack, $01
00083A62 E10F                       	smpsAlterNote       $0F
00083A64 E701                       	dc.b	smpsNoAttack, $01
00083A66 E10B                       	smpsAlterNote       $0B
00083A68 E701                       	dc.b	smpsNoAttack, $01
00083A6A E108                       	smpsAlterNote       $08
00083A6C E701                       	dc.b	smpsNoAttack, $01
00083A6E E104                       	smpsAlterNote       $04
00083A70 E701                       	dc.b	smpsNoAttack, $01
00083A72 E108                       	smpsAlterNote       $08
00083A74 E701                       	dc.b	smpsNoAttack, $01
00083A76 E10E                       	smpsAlterNote       $0E
00083A78 E701                       	dc.b	smpsNoAttack, $01
00083A7A E10F                       	smpsAlterNote       $0F
00083A7C E701                       	dc.b	smpsNoAttack, $01
00083A7E E10B                       	smpsAlterNote       $0B
00083A80 E701                       	dc.b	smpsNoAttack, $01
00083A82 E105                       	smpsAlterNote       $05
00083A84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A88 E108                       	smpsAlterNote       $08
00083A8A E701                       	dc.b	smpsNoAttack, $01
00083A8C E10E                       	smpsAlterNote       $0E
00083A8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A92 E108                       	smpsAlterNote       $08
00083A94 E701                       	dc.b	smpsNoAttack, $01
00083A96 E105                       	smpsAlterNote       $05
00083A98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A9C E108                       	smpsAlterNote       $08
00083A9E B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00083AA2 E109                       	smpsAlterNote       $09
00083AA4 B60D                       	dc.b	nF4, $0D
00083AA6 E103                       	smpsAlterNote       $03
00083AA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083AAC E106                       	smpsAlterNote       $06
00083AAE E701                       	dc.b	smpsNoAttack, $01
00083AB0 E10C                       	smpsAlterNote       $0C
00083AB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083AB6 E106                       	smpsAlterNote       $06
00083AB8 E701                       	dc.b	smpsNoAttack, $01
00083ABA E103                       	smpsAlterNote       $03
00083ABC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083AC0 E109                       	smpsAlterNote       $09
00083AC2 E701                       	dc.b	smpsNoAttack, $01
00083AC4 E10D                       	smpsAlterNote       $0D
00083AC6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083ACA E109                       	smpsAlterNote       $09
00083ACC B80D                       	dc.b	nG4, $0D
00083ACE E103                       	smpsAlterNote       $03
00083AD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083AD4 E109                       	smpsAlterNote       $09
00083AD6 E701                       	dc.b	smpsNoAttack, $01
00083AD8 E10C                       	smpsAlterNote       $0C
00083ADA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083ADE E106                       	smpsAlterNote       $06
00083AE0 E701                       	dc.b	smpsNoAttack, $01
00083AE2 E102                       	smpsAlterNote       $02
00083AE4 E701                       	dc.b	smpsNoAttack, $01
00083AE6 E103                       	smpsAlterNote       $03
00083AE8 E701                       	dc.b	smpsNoAttack, $01
00083AEA E109                       	smpsAlterNote       $09
00083AEC E701                       	dc.b	smpsNoAttack, $01
00083AEE E10D                       	smpsAlterNote       $0D
00083AF0 E701                       	dc.b	smpsNoAttack, $01
00083AF2 E109                       	smpsAlterNote       $09
00083AF4 E701                       	dc.b	smpsNoAttack, $01
00083AF6 E106                       	smpsAlterNote       $06
00083AF8 E701                       	dc.b	smpsNoAttack, $01
00083AFA E102                       	smpsAlterNote       $02
00083AFC E701                       	dc.b	smpsNoAttack, $01
00083AFE E106                       	smpsAlterNote       $06
00083B00 E701                       	dc.b	smpsNoAttack, $01
00083B02 E10C                       	smpsAlterNote       $0C
00083B04 E701                       	dc.b	smpsNoAttack, $01
00083B06 E10D                       	smpsAlterNote       $0D
00083B08 E701                       	dc.b	smpsNoAttack, $01
00083B0A E109                       	smpsAlterNote       $09
00083B0C E701                       	dc.b	smpsNoAttack, $01
00083B0E E10B                       	smpsAlterNote       $0B
00083B10 BA0D                       	dc.b	nA4, $0D
00083B12 E108                       	smpsAlterNote       $08
00083B14 E701                       	dc.b	smpsNoAttack, $01
00083B16 E105                       	smpsAlterNote       $05
00083B18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B1C E10B                       	smpsAlterNote       $0B
00083B1E E701                       	dc.b	smpsNoAttack, $01
00083B20 E10F                       	smpsAlterNote       $0F
00083B22 E701                       	dc.b	smpsNoAttack, $01
00083B24 E10E                       	smpsAlterNote       $0E
00083B26 E701                       	dc.b	smpsNoAttack, $01
00083B28 E108                       	smpsAlterNote       $08
00083B2A E701                       	dc.b	smpsNoAttack, $01
00083B2C E104                       	smpsAlterNote       $04
00083B2E E701                       	dc.b	smpsNoAttack, $01
00083B30 E108                       	smpsAlterNote       $08
00083B32 E701                       	dc.b	smpsNoAttack, $01
00083B34 E10B                       	smpsAlterNote       $0B
00083B36 E701                       	dc.b	smpsNoAttack, $01
00083B38 E10F                       	smpsAlterNote       $0F
00083B3A E701                       	dc.b	smpsNoAttack, $01
00083B3C E10B                       	smpsAlterNote       $0B
00083B3E E701                       	dc.b	smpsNoAttack, $01
00083B40 E105                       	smpsAlterNote       $05
00083B42 E701                       	dc.b	smpsNoAttack, $01
00083B44 E104                       	smpsAlterNote       $04
00083B46 E701                       	dc.b	smpsNoAttack, $01
00083B48 E108                       	smpsAlterNote       $08
00083B4A E701                       	dc.b	smpsNoAttack, $01
00083B4C E10E                       	smpsAlterNote       $0E
00083B4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B52 E10B                       	smpsAlterNote       $0B
00083B54 E701                       	dc.b	smpsNoAttack, $01
00083B56 E105                       	smpsAlterNote       $05
00083B58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B5C E10B                       	smpsAlterNote       $0B
00083B5E E701                       	dc.b	smpsNoAttack, $01
00083B60 E10E                       	smpsAlterNote       $0E
00083B62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B66 E108                       	smpsAlterNote       $08
00083B68 E701                       	dc.b	smpsNoAttack, $01
00083B6A E105                       	smpsAlterNote       $05
00083B6C 8001                       	dc.b	nRst, $01
00083B6E E109                       	smpsAlterNote       $09
00083B70 B60A                       	dc.b	nF4, $0A
00083B72 E108                       	smpsAlterNote       $08
00083B74 B507                       	dc.b	nE4, $07
00083B76 E107                       	smpsAlterNote       $07
00083B78 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00083B7C E108                       	smpsAlterNote       $08
00083B7E B503                       	dc.b	nE4, $03
00083B80 E109                       	smpsAlterNote       $09
00083B82 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00083B8A E10B                       	smpsAlterNote       $0B
00083B8C BA0D                       	dc.b	nA4, $0D
00083B8E E108                       	smpsAlterNote       $08
00083B90 E701                       	dc.b	smpsNoAttack, $01
00083B92 E104                       	smpsAlterNote       $04
00083B94 E701                       	dc.b	smpsNoAttack, $01
00083B96 E108                       	smpsAlterNote       $08
00083B98 E701                       	dc.b	smpsNoAttack, $01
00083B9A E10B                       	smpsAlterNote       $0B
00083B9C E701                       	dc.b	smpsNoAttack, $01
00083B9E E10F                       	smpsAlterNote       $0F
00083BA0 E701                       	dc.b	smpsNoAttack, $01
00083BA2 E10B                       	smpsAlterNote       $0B
00083BA4 E701                       	dc.b	smpsNoAttack, $01
00083BA6 E105                       	smpsAlterNote       $05
00083BA8 E701                       	dc.b	smpsNoAttack, $01
00083BAA E104                       	smpsAlterNote       $04
00083BAC E701                       	dc.b	smpsNoAttack, $01
00083BAE E108                       	smpsAlterNote       $08
00083BB0 E701                       	dc.b	smpsNoAttack, $01
00083BB2 E10E                       	smpsAlterNote       $0E
00083BB4 E701                       	dc.b	smpsNoAttack, $01
00083BB6 E10F                       	smpsAlterNote       $0F
00083BB8 8001                       	dc.b	nRst, $01
00083BBA E109                       	smpsAlterNote       $09
00083BBC C20D                       	dc.b	nF5, $0D
00083BBE E106                       	smpsAlterNote       $06
00083BC0 E701                       	dc.b	smpsNoAttack, $01
00083BC2 E102                       	smpsAlterNote       $02
00083BC4 E701                       	dc.b	smpsNoAttack, $01
00083BC6 E106                       	smpsAlterNote       $06
00083BC8 E701                       	dc.b	smpsNoAttack, $01
00083BCA E109                       	smpsAlterNote       $09
00083BCC E701                       	dc.b	smpsNoAttack, $01
00083BCE E10D                       	smpsAlterNote       $0D
00083BD0 E701                       	dc.b	smpsNoAttack, $01
00083BD2 E109                       	smpsAlterNote       $09
00083BD4 E701                       	dc.b	smpsNoAttack, $01
00083BD6 E103                       	smpsAlterNote       $03
00083BD8 E701                       	dc.b	smpsNoAttack, $01
00083BDA E102                       	smpsAlterNote       $02
00083BDC E701                       	dc.b	smpsNoAttack, $01
00083BDE E106                       	smpsAlterNote       $06
00083BE0 E701                       	dc.b	smpsNoAttack, $01
00083BE2 E10C                       	smpsAlterNote       $0C
00083BE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BE8 E109                       	smpsAlterNote       $09
00083BEA E701                       	dc.b	smpsNoAttack, $01
00083BEC E103                       	smpsAlterNote       $03
00083BEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BF2 E109                       	smpsAlterNote       $09
00083BF4 E701                       	dc.b	smpsNoAttack, $01
00083BF6 E10C                       	smpsAlterNote       $0C
00083BF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BFC E106                       	smpsAlterNote       $06
00083BFE E701                       	dc.b	smpsNoAttack, $01
00083C00 E102                       	smpsAlterNote       $02
00083C02 E701                       	dc.b	smpsNoAttack, $01
00083C04 E103                       	smpsAlterNote       $03
00083C06 E701                       	dc.b	smpsNoAttack, $01
00083C08 E109                       	smpsAlterNote       $09
00083C0A E701                       	dc.b	smpsNoAttack, $01
00083C0C E10D                       	smpsAlterNote       $0D
00083C0E E701                       	dc.b	smpsNoAttack, $01
00083C10 E109                       	smpsAlterNote       $09
00083C12 E701                       	dc.b	smpsNoAttack, $01
00083C14 E106                       	smpsAlterNote       $06
00083C16 E701                       	dc.b	smpsNoAttack, $01
00083C18 E102                       	smpsAlterNote       $02
00083C1A E701                       	dc.b	smpsNoAttack, $01
00083C1C E106                       	smpsAlterNote       $06
00083C1E E701                       	dc.b	smpsNoAttack, $01
00083C20 E10C                       	smpsAlterNote       $0C
00083C22 E701                       	dc.b	smpsNoAttack, $01
00083C24 E10D                       	smpsAlterNote       $0D
00083C26 E701                       	dc.b	smpsNoAttack, $01
00083C28 E109                       	smpsAlterNote       $09
00083C2A E701                       	dc.b	smpsNoAttack, $01
00083C2C E103                       	smpsAlterNote       $03
00083C2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C32 E106                       	smpsAlterNote       $06
00083C34 E701                       	dc.b	smpsNoAttack, $01
00083C36 E10C                       	smpsAlterNote       $0C
00083C38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C3C E106                       	smpsAlterNote       $06
00083C3E E701                       	dc.b	smpsNoAttack, $01
00083C40 E103                       	smpsAlterNote       $03
00083C42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C46 E109                       	smpsAlterNote       $09
00083C48 E701                       	dc.b	smpsNoAttack, $01
00083C4A E10D                       	smpsAlterNote       $0D
00083C4C E701                       	dc.b	smpsNoAttack, $01
00083C4E E10C                       	smpsAlterNote       $0C
00083C50 E701                       	dc.b	smpsNoAttack, $01
00083C52 E106                       	smpsAlterNote       $06
00083C54 E701                       	dc.b	smpsNoAttack, $01
00083C56 E103                       	smpsAlterNote       $03
00083C58 8001                       	dc.b	nRst, $01
00083C5A E109                       	smpsAlterNote       $09
00083C5C C206 8001                  	dc.b	nF5, $06, nRst, $01
00083C62 E10C                       	smpsAlterNote       $0C
00083C64 E601                       	smpsAlterVol        $01
00083C66 BB0D                       	dc.b	nBb4, $0D
00083C68 E106                       	smpsAlterNote       $06
00083C6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C6E E109                       	smpsAlterNote       $09
00083C70 E701                       	dc.b	smpsNoAttack, $01
00083C72 E10F                       	smpsAlterNote       $0F
00083C74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C78 E109                       	smpsAlterNote       $09
00083C7A E701                       	dc.b	smpsNoAttack, $01
00083C7C E106                       	smpsAlterNote       $06
00083C7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C82 E10C                       	smpsAlterNote       $0C
00083C84 E701                       	dc.b	smpsNoAttack, $01
00083C86 E110                       	smpsAlterNote       $10
00083C88 E701                       	dc.b	smpsNoAttack, $01
00083C8A E10F                       	smpsAlterNote       $0F
00083C8C E701                       	dc.b	smpsNoAttack, $01
00083C8E E109                       	smpsAlterNote       $09
00083C90 E701                       	dc.b	smpsNoAttack, $01
00083C92 E105                       	smpsAlterNote       $05
00083C94 E701                       	dc.b	smpsNoAttack, $01
00083C96 E106                       	smpsAlterNote       $06
00083C98 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00083C9C E103                       	smpsAlterNote       $03
00083C9E E701                       	dc.b	smpsNoAttack, $01
00083CA0 E1FF                       	smpsAlterNote       $FF
00083CA2 E701                       	dc.b	smpsNoAttack, $01
00083CA4 E103                       	smpsAlterNote       $03
00083CA6 E701                       	dc.b	smpsNoAttack, $01
00083CA8 E106                       	smpsAlterNote       $06
00083CAA E701                       	dc.b	smpsNoAttack, $01
00083CAC E10A                       	smpsAlterNote       $0A
00083CAE E701                       	dc.b	smpsNoAttack, $01
00083CB0 E106                       	smpsAlterNote       $06
00083CB2 E701                       	dc.b	smpsNoAttack, $01
00083CB4 E100                       	smpsAlterNote       $00
00083CB6 E701                       	dc.b	smpsNoAttack, $01
00083CB8 E1FF                       	smpsAlterNote       $FF
00083CBA E701                       	dc.b	smpsNoAttack, $01
00083CBC E103                       	smpsAlterNote       $03
00083CBE E701                       	dc.b	smpsNoAttack, $01
00083CC0 E109                       	smpsAlterNote       $09
00083CC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083CC6 E106                       	smpsAlterNote       $06
00083CC8 E701                       	dc.b	smpsNoAttack, $01
00083CCA E100                       	smpsAlterNote       $00
00083CCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083CD0 E107                       	smpsAlterNote       $07
00083CD2 BF0E                       	dc.b	nD5, $0E
00083CD4 E101                       	smpsAlterNote       $01
00083CD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083CDA E107                       	smpsAlterNote       $07
00083CDC E701                       	dc.b	smpsNoAttack, $01
00083CDE E10A                       	smpsAlterNote       $0A
00083CE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083CE4 E104                       	smpsAlterNote       $04
00083CE6 E701                       	dc.b	smpsNoAttack, $01
00083CE8 E100                       	smpsAlterNote       $00
00083CEA E701                       	dc.b	smpsNoAttack, $01
00083CEC E101                       	smpsAlterNote       $01
00083CEE E701                       	dc.b	smpsNoAttack, $01
00083CF0 E107                       	smpsAlterNote       $07
00083CF2 E701                       	dc.b	smpsNoAttack, $01
00083CF4 E10B                       	smpsAlterNote       $0B
00083CF6 E701                       	dc.b	smpsNoAttack, $01
00083CF8 E107                       	smpsAlterNote       $07
00083CFA E701                       	dc.b	smpsNoAttack, $01
00083CFC E104                       	smpsAlterNote       $04
00083CFE E701                       	dc.b	smpsNoAttack, $01
00083D00 E100                       	smpsAlterNote       $00
00083D02 E701                       	dc.b	smpsNoAttack, $01
00083D04 E101                       	smpsAlterNote       $01
00083D06 8001                       	dc.b	nRst, $01
00083D08 E108                       	smpsAlterNote       $08
00083D0A C10C                       	dc.b	nE5, $0C
00083D0C E109                       	smpsAlterNote       $09
00083D0E C201 8001                  	dc.b	nF5, $01, nRst, $01
00083D12 E10A                       	smpsAlterNote       $0A
00083D14 8001                       	dc.b	nRst, $01
00083D16 E109                       	smpsAlterNote       $09
00083D18 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00083D1C E106                       	smpsAlterNote       $06
00083D1E E701                       	dc.b	smpsNoAttack, $01
00083D20 E102                       	smpsAlterNote       $02
00083D22 E701                       	dc.b	smpsNoAttack, $01
00083D24 E103                       	smpsAlterNote       $03
00083D26 E701                       	dc.b	smpsNoAttack, $01
00083D28 E109                       	smpsAlterNote       $09
00083D2A E701                       	dc.b	smpsNoAttack, $01
00083D2C E10D                       	smpsAlterNote       $0D
00083D2E E701                       	dc.b	smpsNoAttack, $01
00083D30 E109                       	smpsAlterNote       $09
00083D32 E701                       	dc.b	smpsNoAttack, $01
00083D34 E106                       	smpsAlterNote       $06
00083D36 E701                       	dc.b	smpsNoAttack, $01
00083D38 E102                       	smpsAlterNote       $02
00083D3A E701                       	dc.b	smpsNoAttack, $01
00083D3C E106                       	smpsAlterNote       $06
00083D3E E701                       	dc.b	smpsNoAttack, $01
00083D40 E10C                       	smpsAlterNote       $0C
00083D42 E701                       	dc.b	smpsNoAttack, $01
00083D44 E10D                       	smpsAlterNote       $0D
00083D46 E701                       	dc.b	smpsNoAttack, $01
00083D48 E109                       	smpsAlterNote       $09
00083D4A C40D                       	dc.b	nG5, $0D
00083D4C E106                       	smpsAlterNote       $06
00083D4E E701                       	dc.b	smpsNoAttack, $01
00083D50 E102                       	smpsAlterNote       $02
00083D52 E701                       	dc.b	smpsNoAttack, $01
00083D54 E103                       	smpsAlterNote       $03
00083D56 E701                       	dc.b	smpsNoAttack, $01
00083D58 E109                       	smpsAlterNote       $09
00083D5A E701                       	dc.b	smpsNoAttack, $01
00083D5C E108                       	smpsAlterNote       $08
00083D5E C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00083D6A E109                       	smpsAlterNote       $09
00083D6C C20D                       	dc.b	nF5, $0D
00083D6E E106                       	smpsAlterNote       $06
00083D70 E701                       	dc.b	smpsNoAttack, $01
00083D72 E102                       	smpsAlterNote       $02
00083D74 E701                       	dc.b	smpsNoAttack, $01
00083D76 E106                       	smpsAlterNote       $06
00083D78 E701                       	dc.b	smpsNoAttack, $01
00083D7A E109                       	smpsAlterNote       $09
00083D7C E701                       	dc.b	smpsNoAttack, $01
00083D7E E10D                       	smpsAlterNote       $0D
00083D80 E701                       	dc.b	smpsNoAttack, $01
00083D82 E109                       	smpsAlterNote       $09
00083D84 E701                       	dc.b	smpsNoAttack, $01
00083D86 E103                       	smpsAlterNote       $03
00083D88 E701                       	dc.b	smpsNoAttack, $01
00083D8A E102                       	smpsAlterNote       $02
00083D8C E701                       	dc.b	smpsNoAttack, $01
00083D8E E106                       	smpsAlterNote       $06
00083D90 E701                       	dc.b	smpsNoAttack, $01
00083D92 E10C                       	smpsAlterNote       $0C
00083D94 E701                       	dc.b	smpsNoAttack, $01
00083D96 E10D                       	smpsAlterNote       $0D
00083D98 8001                       	dc.b	nRst, $01
00083D9A E112                       	smpsAlterNote       $12
00083D9C C401                       	dc.b	nG5, $01
00083D9E E1EB                       	smpsAlterNote       $EB
00083DA0 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00083DA3 E1FD                       	smpsAlterNote       $FD
00083DA5 E701                       	dc.b	smpsNoAttack, $01
00083DA7 E10F                       	smpsAlterNote       $0F
00083DA9 E701                       	dc.b	smpsNoAttack, $01
00083DAB E118                       	smpsAlterNote       $18
00083DAD E701                       	dc.b	smpsNoAttack, $01
00083DAF E1ED                       	smpsAlterNote       $ED
00083DB1 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00083DB4 E1FF                       	smpsAlterNote       $FF
00083DB6 E701                       	dc.b	smpsNoAttack, $01
00083DB8 E10B                       	smpsAlterNote       $0B
00083DBA E703                       	dc.b	smpsNoAttack, $03
00083DBC E109                       	smpsAlterNote       $09
00083DBE C407                       	dc.b	nG5, $07
00083DC0 E108                       	smpsAlterNote       $08
00083DC2 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00083DCE E109                       	smpsAlterNote       $09
00083DD0 C20D                       	dc.b	nF5, $0D
00083DD2 E103                       	smpsAlterNote       $03
00083DD4 E701                       	dc.b	smpsNoAttack, $01
00083DD6 E102                       	smpsAlterNote       $02
00083DD8 E701                       	dc.b	smpsNoAttack, $01
00083DDA E106                       	smpsAlterNote       $06
00083DDC E701                       	dc.b	smpsNoAttack, $01
00083DDE E10C                       	smpsAlterNote       $0C
00083DE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DE4 E109                       	smpsAlterNote       $09
00083DE6 E701                       	dc.b	smpsNoAttack, $01
00083DE8 E103                       	smpsAlterNote       $03
00083DEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DEE E109                       	smpsAlterNote       $09
00083DF0 E701                       	dc.b	smpsNoAttack, $01
00083DF2 E10C                       	smpsAlterNote       $0C
00083DF4 E701                       	dc.b	smpsNoAttack, $01
00083DF6 E10D                       	smpsAlterNote       $0D
00083DF8 8001                       	dc.b	nRst, $01
00083DFA E10B                       	smpsAlterNote       $0B
00083DFC C609 8001                  	dc.b	nA5, $09, nRst, $01
00083E00 E109                       	smpsAlterNote       $09
00083E02 B806 8001                  	dc.b	nG4, $06, nRst, $01
00083E06 E108                       	smpsAlterNote       $08
00083E08 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00083E14 8001                       	dc.b	nRst, $01
00083E16 E109                       	smpsAlterNote       $09
00083E18 C20D                       	dc.b	nF5, $0D
00083E1A E103                       	smpsAlterNote       $03
00083E1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E20 E106                       	smpsAlterNote       $06
00083E22 E701                       	dc.b	smpsNoAttack, $01
00083E24 E10C                       	smpsAlterNote       $0C
00083E26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E2A E106                       	smpsAlterNote       $06
00083E2C E701                       	dc.b	smpsNoAttack, $01
00083E2E E103                       	smpsAlterNote       $03
00083E30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E34 E109                       	smpsAlterNote       $09
00083E36 E701                       	dc.b	smpsNoAttack, $01
00083E38 E10D                       	smpsAlterNote       $0D
00083E3A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083E40 E108                       	smpsAlterNote       $08
00083E42 E6FF                       	smpsAlterVol        $FF
00083E44 A806                       	dc.b	nEb3, $06
00083E46 E10C                       	smpsAlterNote       $0C
00083E48 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00083E4C E108                       	smpsAlterNote       $08
00083E4E A803                       	dc.b	nEb3, $03
00083E50 E109                       	smpsAlterNote       $09
00083E52 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00083E56 E10C                       	smpsAlterNote       $0C
00083E58 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00083E62 E109                       	smpsAlterNote       $09
00083E64 E602                       	smpsAlterVol        $02
00083E66 B604                       	dc.b	nF4, $04
00083E68 E602                       	smpsAlterVol        $02
00083E6A F6F1 AA                    	smpsJump            music84_Jump02
00083E6D                            
00083E6D                            ; FM4 Data
00083E6D                            music84_FM4:
00083E6F E040                       	smpsPan             panRight, $00
00083E71 8003                       	dc.b	nRst, $03
00083E73 E10F                       	smpsAlterNote       $0F
00083E75 C603 8008                  	dc.b	nA5, $03, nRst, $08
00083E79 E10D                       	smpsAlterNote       $0D
00083E7B C403 800A                  	dc.b	nG5, $03, nRst, $0A
00083E7F E10C                       	smpsAlterNote       $0C
00083E81 C103 8004                  	dc.b	nE5, $03, nRst, $04
00083E87 E6FE                       	smpsAlterVol        $FE
00083E89 E110                       	smpsAlterNote       $10
00083E8B C703 8001                  	dc.b	nBb5, $03, nRst, $01
00083E8F E10F                       	smpsAlterNote       $0F
00083E91 C602 8001                  	dc.b	nA5, $02, nRst, $01
00083E95 E10D                       	smpsAlterNote       $0D
00083E97 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00083EA0 E10C                       	smpsAlterNote       $0C
00083EA2 C103                       	dc.b	nE5, $03
00083EA4 E10A                       	smpsAlterNote       $0A
00083EA6 BD03 8001                  	dc.b	nC5, $03, nRst, $01
00083EAC 03                         	dc.b	$03
00083EAD                            
00083EAD                            music84_Jump01:
00083EAD E10B                       	smpsAlterNote       $0B
00083EAF BF03 8001                  	dc.b	nD5, $03, nRst, $01
00083EB3 E10C                       	smpsAlterNote       $0C
00083EB5 C102 8001                  	dc.b	nE5, $02, nRst, $01
00083EB9 E10D                       	smpsAlterNote       $0D
00083EBB C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00083EC5 E10B                       	smpsAlterNote       $0B
00083EC7 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00083ECB E107                       	smpsAlterNote       $07
00083ECD E701                       	dc.b	smpsNoAttack, $01
00083ECF E103                       	smpsAlterNote       $03
00083ED1 E701                       	dc.b	smpsNoAttack, $01
00083ED3 E104                       	smpsAlterNote       $04
00083ED5 E701                       	dc.b	smpsNoAttack, $01
00083ED7 E10A                       	smpsAlterNote       $0A
00083ED9 E701                       	dc.b	smpsNoAttack, $01
00083EDB E10E                       	smpsAlterNote       $0E
00083EDD E701                       	dc.b	smpsNoAttack, $01
00083EDF E10A                       	smpsAlterNote       $0A
00083EE1 E701                       	dc.b	smpsNoAttack, $01
00083EE3 E107                       	smpsAlterNote       $07
00083EE5 E701                       	dc.b	smpsNoAttack, $01
00083EE7 E104                       	smpsAlterNote       $04
00083EE9 8001                       	dc.b	nRst, $01
00083EEB E110                       	smpsAlterNote       $10
00083EED C703                       	dc.b	nBb5, $03
00083EEF E10F                       	smpsAlterNote       $0F
00083EF1 C603 8001                  	dc.b	nA5, $03, nRst, $01
00083EF5 E10D                       	smpsAlterNote       $0D
00083EF7 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00083EFD E10C                       	smpsAlterNote       $0C
00083EFF E701                       	dc.b	smpsNoAttack, $01
00083F01 E108                       	smpsAlterNote       $08
00083F03 E701                       	dc.b	smpsNoAttack, $01
00083F05 E10C                       	smpsAlterNote       $0C
00083F07 E701                       	dc.b	smpsNoAttack, $01
00083F09 E10F                       	smpsAlterNote       $0F
00083F0B E701                       	dc.b	smpsNoAttack, $01
00083F0D E113                       	smpsAlterNote       $13
00083F0F E701                       	dc.b	smpsNoAttack, $01
00083F11 E10F                       	smpsAlterNote       $0F
00083F13 E701                       	dc.b	smpsNoAttack, $01
00083F15 E109                       	smpsAlterNote       $09
00083F17 E701                       	dc.b	smpsNoAttack, $01
00083F19 E108                       	smpsAlterNote       $08
00083F1B E701                       	dc.b	smpsNoAttack, $01
00083F1D E10C                       	smpsAlterNote       $0C
00083F1F E701                       	dc.b	smpsNoAttack, $01
00083F21 E112                       	smpsAlterNote       $12
00083F23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F27 E10C                       	smpsAlterNote       $0C
00083F29 E701                       	dc.b	smpsNoAttack, $01
00083F2B E109                       	smpsAlterNote       $09
00083F2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F31 E10F                       	smpsAlterNote       $0F
00083F33 E701                       	dc.b	smpsNoAttack, $01
00083F35 E113                       	smpsAlterNote       $13
00083F37 E701                       	dc.b	smpsNoAttack, $01
00083F39 E112                       	smpsAlterNote       $12
00083F3B E701                       	dc.b	smpsNoAttack, $01
00083F3D E10C                       	smpsAlterNote       $0C
00083F3F E701                       	dc.b	smpsNoAttack, $01
00083F41 E108                       	smpsAlterNote       $08
00083F43 E701                       	dc.b	smpsNoAttack, $01
00083F45 E10C                       	smpsAlterNote       $0C
00083F47 E701                       	dc.b	smpsNoAttack, $01
00083F49 E10F                       	smpsAlterNote       $0F
00083F4B E701                       	dc.b	smpsNoAttack, $01
00083F4D E113                       	smpsAlterNote       $13
00083F4F E701                       	dc.b	smpsNoAttack, $01
00083F51 E10F                       	smpsAlterNote       $0F
00083F53 E701                       	dc.b	smpsNoAttack, $01
00083F55 E109                       	smpsAlterNote       $09
00083F57 E701                       	dc.b	smpsNoAttack, $01
00083F59 E108                       	smpsAlterNote       $08
00083F5B E701                       	dc.b	smpsNoAttack, $01
00083F5D E10C                       	smpsAlterNote       $0C
00083F5F E701                       	dc.b	smpsNoAttack, $01
00083F61 E112                       	smpsAlterNote       $12
00083F63 E701                       	dc.b	smpsNoAttack, $01
00083F65 E113                       	smpsAlterNote       $13
00083F67 800F                       	dc.b	nRst, $0F
00083F69 E10B                       	smpsAlterNote       $0B
00083F6B BF03                       	dc.b	nD5, $03
00083F6D E10C                       	smpsAlterNote       $0C
00083F6F C103 8001                  	dc.b	nE5, $03, nRst, $01
00083F73 E10D                       	smpsAlterNote       $0D
00083F75 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00083F7D E10B                       	smpsAlterNote       $0B
00083F7F BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00083F89 E110                       	smpsAlterNote       $10
00083F8B C704                       	dc.b	nBb5, $04
00083F8D E10F                       	smpsAlterNote       $0F
00083F8F C604 8001                  	dc.b	nA5, $04, nRst, $01
00083F93 E10D                       	smpsAlterNote       $0D
00083F95 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00083F9B E109                       	smpsAlterNote       $09
00083F9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FA1 E10F                       	smpsAlterNote       $0F
00083FA3 E701                       	dc.b	smpsNoAttack, $01
00083FA5 E112                       	smpsAlterNote       $12
00083FA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FAB E10C                       	smpsAlterNote       $0C
00083FAD E701                       	dc.b	smpsNoAttack, $01
00083FAF E108                       	smpsAlterNote       $08
00083FB1 E701                       	dc.b	smpsNoAttack, $01
00083FB3 E109                       	smpsAlterNote       $09
00083FB5 E701                       	dc.b	smpsNoAttack, $01
00083FB7 E10F                       	smpsAlterNote       $0F
00083FB9 E701                       	dc.b	smpsNoAttack, $01
00083FBB E113                       	smpsAlterNote       $13
00083FBD E701                       	dc.b	smpsNoAttack, $01
00083FBF E10F                       	smpsAlterNote       $0F
00083FC1 E701                       	dc.b	smpsNoAttack, $01
00083FC3 E10C                       	smpsAlterNote       $0C
00083FC5 E701                       	dc.b	smpsNoAttack, $01
00083FC7 E108                       	smpsAlterNote       $08
00083FC9 E701                       	dc.b	smpsNoAttack, $01
00083FCB E10C                       	smpsAlterNote       $0C
00083FCD E701                       	dc.b	smpsNoAttack, $01
00083FCF E112                       	smpsAlterNote       $12
00083FD1 E701                       	dc.b	smpsNoAttack, $01
00083FD3 E113                       	smpsAlterNote       $13
00083FD5 E701                       	dc.b	smpsNoAttack, $01
00083FD7 E10F                       	smpsAlterNote       $0F
00083FD9 E701                       	dc.b	smpsNoAttack, $01
00083FDB E109                       	smpsAlterNote       $09
00083FDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FE1 E10C                       	smpsAlterNote       $0C
00083FE3 E701                       	dc.b	smpsNoAttack, $01
00083FE5 E112                       	smpsAlterNote       $12
00083FE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FEB E10C                       	smpsAlterNote       $0C
00083FED E701                       	dc.b	smpsNoAttack, $01
00083FEF E109                       	smpsAlterNote       $09
00083FF1 E701                       	dc.b	smpsNoAttack, $01
00083FF3 E10D                       	smpsAlterNote       $0D
00083FF5 C401 8001                  	dc.b	nG5, $01, nRst, $01
00083FF9 E10F                       	smpsAlterNote       $0F
00083FFB C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00084005 E10D                       	smpsAlterNote       $0D
00084007 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008400D E10B                       	smpsAlterNote       $0B
0008400F BF0D                       	dc.b	nD5, $0D
00084011 E108                       	smpsAlterNote       $08
00084013 E701                       	dc.b	smpsNoAttack, $01
00084015 E104                       	smpsAlterNote       $04
00084017 E701                       	dc.b	smpsNoAttack, $01
00084019 E108                       	smpsAlterNote       $08
0008401B E701                       	dc.b	smpsNoAttack, $01
0008401D E10B                       	smpsAlterNote       $0B
0008401F E701                       	dc.b	smpsNoAttack, $01
00084021 E10F                       	smpsAlterNote       $0F
00084023 E701                       	dc.b	smpsNoAttack, $01
00084025 E10B                       	smpsAlterNote       $0B
00084027 E701                       	dc.b	smpsNoAttack, $01
00084029 E105                       	smpsAlterNote       $05
0008402B E701                       	dc.b	smpsNoAttack, $01
0008402D E104                       	smpsAlterNote       $04
0008402F E701                       	dc.b	smpsNoAttack, $01
00084031 E108                       	smpsAlterNote       $08
00084033 E701                       	dc.b	smpsNoAttack, $01
00084035 E10E                       	smpsAlterNote       $0E
00084037 E701                       	dc.b	smpsNoAttack, $01
00084039 E10F                       	smpsAlterNote       $0F
0008403B 8001                       	dc.b	nRst, $01
0008403D E10C                       	smpsAlterNote       $0C
0008403F C101                       	dc.b	nE5, $01
00084041 E10D                       	smpsAlterNote       $0D
00084043 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00084049 E10F                       	smpsAlterNote       $0F
0008404B C606 8001                  	dc.b	nA5, $06, nRst, $01
0008404F E10C                       	smpsAlterNote       $0C
00084051 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00084055 E10D                       	smpsAlterNote       $0D
00084057 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008405B E10C                       	smpsAlterNote       $0C
0008405D CD03                       	dc.b	nE6, $03
0008405F E10A                       	smpsAlterNote       $0A
00084061 C903 8001                  	dc.b	nC6, $03, nRst, $01
00084065 E10D                       	smpsAlterNote       $0D
00084067 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008406F E109                       	smpsAlterNote       $09
00084071 E701                       	dc.b	smpsNoAttack, $01
00084073 E10D                       	smpsAlterNote       $0D
00084075 E701                       	dc.b	smpsNoAttack, $01
00084077 E110                       	smpsAlterNote       $10
00084079 E701                       	dc.b	smpsNoAttack, $01
0008407B E114                       	smpsAlterNote       $14
0008407D E701                       	dc.b	smpsNoAttack, $01
0008407F E110                       	smpsAlterNote       $10
00084081 E701                       	dc.b	smpsNoAttack, $01
00084083 E10A                       	smpsAlterNote       $0A
00084085 E701                       	dc.b	smpsNoAttack, $01
00084087 E109                       	smpsAlterNote       $09
00084089 E701                       	dc.b	smpsNoAttack, $01
0008408B E10D                       	smpsAlterNote       $0D
0008408D E701                       	dc.b	smpsNoAttack, $01
0008408F E113                       	smpsAlterNote       $13
00084091 E701                       	dc.b	smpsNoAttack, $01
00084093 E114                       	smpsAlterNote       $14
00084095 8001                       	dc.b	nRst, $01
00084097 E10F                       	smpsAlterNote       $0F
00084099 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008409F E10C                       	smpsAlterNote       $0C
000840A1 E701                       	dc.b	smpsNoAttack, $01
000840A3 E108                       	smpsAlterNote       $08
000840A5 E701                       	dc.b	smpsNoAttack, $01
000840A7 E10C                       	smpsAlterNote       $0C
000840A9 E701                       	dc.b	smpsNoAttack, $01
000840AB E112                       	smpsAlterNote       $12
000840AD E701                       	dc.b	smpsNoAttack, $01
000840AF E113                       	smpsAlterNote       $13
000840B1 E701                       	dc.b	smpsNoAttack, $01
000840B3 E10F                       	smpsAlterNote       $0F
000840B5 E701                       	dc.b	smpsNoAttack, $01
000840B7 E109                       	smpsAlterNote       $09
000840B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000840BD E10C                       	smpsAlterNote       $0C
000840BF E701                       	dc.b	smpsNoAttack, $01
000840C1 E112                       	smpsAlterNote       $12
000840C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000840C7 E10C                       	smpsAlterNote       $0C
000840C9 E701                       	dc.b	smpsNoAttack, $01
000840CB E109                       	smpsAlterNote       $09
000840CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000840D1 E10F                       	smpsAlterNote       $0F
000840D3 E701                       	dc.b	smpsNoAttack, $01
000840D5 E113                       	smpsAlterNote       $13
000840D7 E701                       	dc.b	smpsNoAttack, $01
000840D9 E112                       	smpsAlterNote       $12
000840DB E701                       	dc.b	smpsNoAttack, $01
000840DD E10C                       	smpsAlterNote       $0C
000840DF E701                       	dc.b	smpsNoAttack, $01
000840E1 E108                       	smpsAlterNote       $08
000840E3 E701                       	dc.b	smpsNoAttack, $01
000840E5 E10C                       	smpsAlterNote       $0C
000840E7 E701                       	dc.b	smpsNoAttack, $01
000840E9 E10F                       	smpsAlterNote       $0F
000840EB E701                       	dc.b	smpsNoAttack, $01
000840ED E113                       	smpsAlterNote       $13
000840EF E701                       	dc.b	smpsNoAttack, $01
000840F1 E10F                       	smpsAlterNote       $0F
000840F3 E701                       	dc.b	smpsNoAttack, $01
000840F5 E109                       	smpsAlterNote       $09
000840F7 E701                       	dc.b	smpsNoAttack, $01
000840F9 E108                       	smpsAlterNote       $08
000840FB E701                       	dc.b	smpsNoAttack, $01
000840FD E10C                       	smpsAlterNote       $0C
000840FF E701                       	dc.b	smpsNoAttack, $01
00084101 E112                       	smpsAlterNote       $12
00084103 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084107 E10F                       	smpsAlterNote       $0F
00084109 E701                       	dc.b	smpsNoAttack, $01
0008410B E109                       	smpsAlterNote       $09
0008410D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084111 E10F                       	smpsAlterNote       $0F
00084113 E701                       	dc.b	smpsNoAttack, $01
00084115 E113                       	smpsAlterNote       $13
00084117 E701                       	dc.b	smpsNoAttack, $01
00084119 E112                       	smpsAlterNote       $12
0008411B E701                       	dc.b	smpsNoAttack, $01
0008411D E10C                       	smpsAlterNote       $0C
0008411F E701                       	dc.b	smpsNoAttack, $01
00084121 E108                       	smpsAlterNote       $08
00084123 E701                       	dc.b	smpsNoAttack, $01
00084125 E10C                       	smpsAlterNote       $0C
00084127 E701                       	dc.b	smpsNoAttack, $01
00084129 E10F                       	smpsAlterNote       $0F
0008412B E701                       	dc.b	smpsNoAttack, $01
0008412D E113                       	smpsAlterNote       $13
0008412F E701                       	dc.b	smpsNoAttack, $01
00084131 E10F                       	smpsAlterNote       $0F
00084133 E701                       	dc.b	smpsNoAttack, $01
00084135 E109                       	smpsAlterNote       $09
00084137 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008413B E10F                       	smpsAlterNote       $0F
0008413D C60D                       	dc.b	nA5, $0D
0008413F E109                       	smpsAlterNote       $09
00084141 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084145 E10C                       	smpsAlterNote       $0C
00084147 E701                       	dc.b	smpsNoAttack, $01
00084149 E112                       	smpsAlterNote       $12
0008414B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008414F E10C                       	smpsAlterNote       $0C
00084151 E701                       	dc.b	smpsNoAttack, $01
00084153 E109                       	smpsAlterNote       $09
00084155 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084159 E10F                       	smpsAlterNote       $0F
0008415B E701                       	dc.b	smpsNoAttack, $01
0008415D E113                       	smpsAlterNote       $13
0008415F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084165 E10D                       	smpsAlterNote       $0D
00084167 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008416F E10C                       	smpsAlterNote       $0C
00084171 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00084177 E6FF                       	smpsAlterVol        $FF
00084179 E10B                       	smpsAlterNote       $0B
0008417B BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008417F E10C                       	smpsAlterNote       $0C
00084181 C103                       	dc.b	nE5, $03
00084183 E10D                       	smpsAlterNote       $0D
00084185 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008418F E10B                       	smpsAlterNote       $0B
00084191 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00084195 E107                       	smpsAlterNote       $07
00084197 E701                       	dc.b	smpsNoAttack, $01
00084199 E104                       	smpsAlterNote       $04
0008419B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008419F E10A                       	smpsAlterNote       $0A
000841A1 E701                       	dc.b	smpsNoAttack, $01
000841A3 E10D                       	smpsAlterNote       $0D
000841A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000841A9 E107                       	smpsAlterNote       $07
000841AB E701                       	dc.b	smpsNoAttack, $01
000841AD E104                       	smpsAlterNote       $04
000841AF 8001                       	dc.b	nRst, $01
000841B1 E110                       	smpsAlterNote       $10
000841B3 C703                       	dc.b	nBb5, $03
000841B5 E10F                       	smpsAlterNote       $0F
000841B7 C603 8001                  	dc.b	nA5, $03, nRst, $01
000841BB E10D                       	smpsAlterNote       $0D
000841BD C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000841C1 E10C                       	smpsAlterNote       $0C
000841C3 E701                       	dc.b	smpsNoAttack, $01
000841C5 E108                       	smpsAlterNote       $08
000841C7 E701                       	dc.b	smpsNoAttack, $01
000841C9 E109                       	smpsAlterNote       $09
000841CB E701                       	dc.b	smpsNoAttack, $01
000841CD E10F                       	smpsAlterNote       $0F
000841CF E701                       	dc.b	smpsNoAttack, $01
000841D1 E113                       	smpsAlterNote       $13
000841D3 E701                       	dc.b	smpsNoAttack, $01
000841D5 E10F                       	smpsAlterNote       $0F
000841D7 E701                       	dc.b	smpsNoAttack, $01
000841D9 E10C                       	smpsAlterNote       $0C
000841DB E701                       	dc.b	smpsNoAttack, $01
000841DD E108                       	smpsAlterNote       $08
000841DF E701                       	dc.b	smpsNoAttack, $01
000841E1 E10C                       	smpsAlterNote       $0C
000841E3 E701                       	dc.b	smpsNoAttack, $01
000841E5 E112                       	smpsAlterNote       $12
000841E7 E701                       	dc.b	smpsNoAttack, $01
000841E9 E113                       	smpsAlterNote       $13
000841EB E701                       	dc.b	smpsNoAttack, $01
000841ED E10F                       	smpsAlterNote       $0F
000841EF E701                       	dc.b	smpsNoAttack, $01
000841F1 E109                       	smpsAlterNote       $09
000841F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000841F7 E10C                       	smpsAlterNote       $0C
000841F9 E701                       	dc.b	smpsNoAttack, $01
000841FB E112                       	smpsAlterNote       $12
000841FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084201 E10C                       	smpsAlterNote       $0C
00084203 E701                       	dc.b	smpsNoAttack, $01
00084205 E109                       	smpsAlterNote       $09
00084207 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008420B E10F                       	smpsAlterNote       $0F
0008420D E701                       	dc.b	smpsNoAttack, $01
0008420F E113                       	smpsAlterNote       $13
00084211 E701                       	dc.b	smpsNoAttack, $01
00084213 E112                       	smpsAlterNote       $12
00084215 E701                       	dc.b	smpsNoAttack, $01
00084217 E10C                       	smpsAlterNote       $0C
00084219 E701                       	dc.b	smpsNoAttack, $01
0008421B E108                       	smpsAlterNote       $08
0008421D E701                       	dc.b	smpsNoAttack, $01
0008421F E10C                       	smpsAlterNote       $0C
00084221 E701                       	dc.b	smpsNoAttack, $01
00084223 E10F                       	smpsAlterNote       $0F
00084225 E701                       	dc.b	smpsNoAttack, $01
00084227 E113                       	smpsAlterNote       $13
00084229 E701                       	dc.b	smpsNoAttack, $01
0008422B E10F                       	smpsAlterNote       $0F
0008422D BA03 8001                  	dc.b	nA4, $03, nRst, $01
00084231 E110                       	smpsAlterNote       $10
00084233 BB03                       	dc.b	nBb4, $03
00084235 E10F                       	smpsAlterNote       $0F
00084237 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008423B E10B                       	smpsAlterNote       $0B
0008423D BF03                       	dc.b	nD5, $03
0008423F E10C                       	smpsAlterNote       $0C
00084241 C103 8001                  	dc.b	nE5, $03, nRst, $01
00084245 E10D                       	smpsAlterNote       $0D
00084247 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00084251 E10B                       	smpsAlterNote       $0B
00084253 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008425F E110                       	smpsAlterNote       $10
00084261 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00084265 E10F                       	smpsAlterNote       $0F
00084267 C604                       	dc.b	nA5, $04
00084269 E10D                       	smpsAlterNote       $0D
0008426B C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00084271 E109                       	smpsAlterNote       $09
00084273 E701                       	dc.b	smpsNoAttack, $01
00084275 E108                       	smpsAlterNote       $08
00084277 E701                       	dc.b	smpsNoAttack, $01
00084279 E10C                       	smpsAlterNote       $0C
0008427B E701                       	dc.b	smpsNoAttack, $01
0008427D E112                       	smpsAlterNote       $12
0008427F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084283 E10F                       	smpsAlterNote       $0F
00084285 E701                       	dc.b	smpsNoAttack, $01
00084287 E109                       	smpsAlterNote       $09
00084289 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008428D E10F                       	smpsAlterNote       $0F
0008428F E701                       	dc.b	smpsNoAttack, $01
00084291 E112                       	smpsAlterNote       $12
00084293 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084297 E10C                       	smpsAlterNote       $0C
00084299 E701                       	dc.b	smpsNoAttack, $01
0008429B E108                       	smpsAlterNote       $08
0008429D E701                       	dc.b	smpsNoAttack, $01
0008429F E109                       	smpsAlterNote       $09
000842A1 E701                       	dc.b	smpsNoAttack, $01
000842A3 E10F                       	smpsAlterNote       $0F
000842A5 E701                       	dc.b	smpsNoAttack, $01
000842A7 E113                       	smpsAlterNote       $13
000842A9 E701                       	dc.b	smpsNoAttack, $01
000842AB E10F                       	smpsAlterNote       $0F
000842AD E701                       	dc.b	smpsNoAttack, $01
000842AF E10C                       	smpsAlterNote       $0C
000842B1 E701                       	dc.b	smpsNoAttack, $01
000842B3 E108                       	smpsAlterNote       $08
000842B5 E701                       	dc.b	smpsNoAttack, $01
000842B7 E10C                       	smpsAlterNote       $0C
000842B9 E701                       	dc.b	smpsNoAttack, $01
000842BB E112                       	smpsAlterNote       $12
000842BD E701                       	dc.b	smpsNoAttack, $01
000842BF E113                       	smpsAlterNote       $13
000842C1 E701                       	dc.b	smpsNoAttack, $01
000842C3 E10F                       	smpsAlterNote       $0F
000842C5 E701                       	dc.b	smpsNoAttack, $01
000842C7 E109                       	smpsAlterNote       $09
000842C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842CD E10C                       	smpsAlterNote       $0C
000842CF E701                       	dc.b	smpsNoAttack, $01
000842D1 E112                       	smpsAlterNote       $12
000842D3 E701                       	dc.b	smpsNoAttack, $01
000842D5 E113                       	smpsAlterNote       $13
000842D7 8001                       	dc.b	nRst, $01
000842D9 E10F                       	smpsAlterNote       $0F
000842DB C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
000842E7 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000842EF E10D                       	smpsAlterNote       $0D
000842F1 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000842F7 E10B                       	smpsAlterNote       $0B
000842F9 BF0D                       	dc.b	nD5, $0D
000842FB E108                       	smpsAlterNote       $08
000842FD E701                       	dc.b	smpsNoAttack, $01
000842FF E104                       	smpsAlterNote       $04
00084301 E701                       	dc.b	smpsNoAttack, $01
00084303 E105                       	smpsAlterNote       $05
00084305 E701                       	dc.b	smpsNoAttack, $01
00084307 E10B                       	smpsAlterNote       $0B
00084309 E701                       	dc.b	smpsNoAttack, $01
0008430B E10F                       	smpsAlterNote       $0F
0008430D E701                       	dc.b	smpsNoAttack, $01
0008430F E10B                       	smpsAlterNote       $0B
00084311 E701                       	dc.b	smpsNoAttack, $01
00084313 E108                       	smpsAlterNote       $08
00084315 E701                       	dc.b	smpsNoAttack, $01
00084317 E104                       	smpsAlterNote       $04
00084319 E701                       	dc.b	smpsNoAttack, $01
0008431B E108                       	smpsAlterNote       $08
0008431D E701                       	dc.b	smpsNoAttack, $01
0008431F E10E                       	smpsAlterNote       $0E
00084321 E701                       	dc.b	smpsNoAttack, $01
00084323 E10F                       	smpsAlterNote       $0F
00084325 E701                       	dc.b	smpsNoAttack, $01
00084327 E10C                       	smpsAlterNote       $0C
00084329 C101                       	dc.b	nE5, $01
0008432B E10D                       	smpsAlterNote       $0D
0008432D C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00084335 E10F                       	smpsAlterNote       $0F
00084337 C607                       	dc.b	nA5, $07
00084339 E10C                       	smpsAlterNote       $0C
0008433B CD07                       	dc.b	nE6, $07
0008433D E10D                       	smpsAlterNote       $0D
0008433F CE06 8001                  	dc.b	nF6, $06, nRst, $01
00084343 E10C                       	smpsAlterNote       $0C
00084345 CD03                       	dc.b	nE6, $03
00084347 E10A                       	smpsAlterNote       $0A
00084349 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008434D E10D                       	smpsAlterNote       $0D
0008434F C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00084355 E10A                       	smpsAlterNote       $0A
00084357 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008435B E110                       	smpsAlterNote       $10
0008435D E701                       	dc.b	smpsNoAttack, $01
0008435F E114                       	smpsAlterNote       $14
00084361 E701                       	dc.b	smpsNoAttack, $01
00084363 E113                       	smpsAlterNote       $13
00084365 E701                       	dc.b	smpsNoAttack, $01
00084367 E10D                       	smpsAlterNote       $0D
00084369 E701                       	dc.b	smpsNoAttack, $01
0008436B E109                       	smpsAlterNote       $09
0008436D E701                       	dc.b	smpsNoAttack, $01
0008436F E10D                       	smpsAlterNote       $0D
00084371 E701                       	dc.b	smpsNoAttack, $01
00084373 E110                       	smpsAlterNote       $10
00084375 E701                       	dc.b	smpsNoAttack, $01
00084377 E114                       	smpsAlterNote       $14
00084379 E701                       	dc.b	smpsNoAttack, $01
0008437B E10F                       	smpsAlterNote       $0F
0008437D C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00084381 E10C                       	smpsAlterNote       $0C
00084383 E701                       	dc.b	smpsNoAttack, $01
00084385 E108                       	smpsAlterNote       $08
00084387 E701                       	dc.b	smpsNoAttack, $01
00084389 E10C                       	smpsAlterNote       $0C
0008438B E701                       	dc.b	smpsNoAttack, $01
0008438D E10F                       	smpsAlterNote       $0F
0008438F E701                       	dc.b	smpsNoAttack, $01
00084391 E113                       	smpsAlterNote       $13
00084393 E701                       	dc.b	smpsNoAttack, $01
00084395 E10F                       	smpsAlterNote       $0F
00084397 E701                       	dc.b	smpsNoAttack, $01
00084399 E109                       	smpsAlterNote       $09
0008439B E701                       	dc.b	smpsNoAttack, $01
0008439D E108                       	smpsAlterNote       $08
0008439F E701                       	dc.b	smpsNoAttack, $01
000843A1 E10C                       	smpsAlterNote       $0C
000843A3 E701                       	dc.b	smpsNoAttack, $01
000843A5 E112                       	smpsAlterNote       $12
000843A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843AB E10F                       	smpsAlterNote       $0F
000843AD E701                       	dc.b	smpsNoAttack, $01
000843AF E109                       	smpsAlterNote       $09
000843B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843B5 E10F                       	smpsAlterNote       $0F
000843B7 E701                       	dc.b	smpsNoAttack, $01
000843B9 E112                       	smpsAlterNote       $12
000843BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843BF E10C                       	smpsAlterNote       $0C
000843C1 E701                       	dc.b	smpsNoAttack, $01
000843C3 E108                       	smpsAlterNote       $08
000843C5 E701                       	dc.b	smpsNoAttack, $01
000843C7 E109                       	smpsAlterNote       $09
000843C9 E701                       	dc.b	smpsNoAttack, $01
000843CB E10F                       	smpsAlterNote       $0F
000843CD E701                       	dc.b	smpsNoAttack, $01
000843CF E113                       	smpsAlterNote       $13
000843D1 E701                       	dc.b	smpsNoAttack, $01
000843D3 E10F                       	smpsAlterNote       $0F
000843D5 E701                       	dc.b	smpsNoAttack, $01
000843D7 E10C                       	smpsAlterNote       $0C
000843D9 E701                       	dc.b	smpsNoAttack, $01
000843DB E108                       	smpsAlterNote       $08
000843DD E701                       	dc.b	smpsNoAttack, $01
000843DF E10C                       	smpsAlterNote       $0C
000843E1 E701                       	dc.b	smpsNoAttack, $01
000843E3 E112                       	smpsAlterNote       $12
000843E5 E701                       	dc.b	smpsNoAttack, $01
000843E7 E113                       	smpsAlterNote       $13
000843E9 E701                       	dc.b	smpsNoAttack, $01
000843EB E10F                       	smpsAlterNote       $0F
000843ED E701                       	dc.b	smpsNoAttack, $01
000843EF E109                       	smpsAlterNote       $09
000843F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843F5 E10C                       	smpsAlterNote       $0C
000843F7 E701                       	dc.b	smpsNoAttack, $01
000843F9 E112                       	smpsAlterNote       $12
000843FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843FF E10C                       	smpsAlterNote       $0C
00084401 E701                       	dc.b	smpsNoAttack, $01
00084403 E109                       	smpsAlterNote       $09
00084405 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084409 E10F                       	smpsAlterNote       $0F
0008440B E701                       	dc.b	smpsNoAttack, $01
0008440D E113                       	smpsAlterNote       $13
0008440F E701                       	dc.b	smpsNoAttack, $01
00084411 E112                       	smpsAlterNote       $12
00084413 E701                       	dc.b	smpsNoAttack, $01
00084415 E10C                       	smpsAlterNote       $0C
00084417 E701                       	dc.b	smpsNoAttack, $01
00084419 E109                       	smpsAlterNote       $09
0008441B 8001                       	dc.b	nRst, $01
0008441D E10F                       	smpsAlterNote       $0F
0008441F C60D                       	dc.b	nA5, $0D
00084421 E10C                       	smpsAlterNote       $0C
00084423 E701                       	dc.b	smpsNoAttack, $01
00084425 E108                       	smpsAlterNote       $08
00084427 E701                       	dc.b	smpsNoAttack, $01
00084429 E10C                       	smpsAlterNote       $0C
0008442B E701                       	dc.b	smpsNoAttack, $01
0008442D E112                       	smpsAlterNote       $12
0008442F E701                       	dc.b	smpsNoAttack, $01
00084431 E113                       	smpsAlterNote       $13
00084433 E701                       	dc.b	smpsNoAttack, $01
00084435 E10F                       	smpsAlterNote       $0F
00084437 E701                       	dc.b	smpsNoAttack, $01
00084439 E109                       	smpsAlterNote       $09
0008443B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008443F E10C                       	smpsAlterNote       $0C
00084441 E701                       	dc.b	smpsNoAttack, $01
00084443 E112                       	smpsAlterNote       $12
00084445 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084449 E10C                       	smpsAlterNote       $0C
0008444B E701                       	dc.b	smpsNoAttack, $01
0008444D E109                       	smpsAlterNote       $09
0008444F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084453 E10F                       	smpsAlterNote       $0F
00084455 E701                       	dc.b	smpsNoAttack, $01
00084457 E113                       	smpsAlterNote       $13
00084459 E701                       	dc.b	smpsNoAttack, $01
0008445B E112                       	smpsAlterNote       $12
0008445D E701                       	dc.b	smpsNoAttack, $01
0008445F E10C                       	smpsAlterNote       $0C
00084461 E701                       	dc.b	smpsNoAttack, $01
00084463 E108                       	smpsAlterNote       $08
00084465 E701                       	dc.b	smpsNoAttack, $01
00084467 E10C                       	smpsAlterNote       $0C
00084469 E701                       	dc.b	smpsNoAttack, $01
0008446B E10F                       	smpsAlterNote       $0F
0008446D E701                       	dc.b	smpsNoAttack, $01
0008446F E113                       	smpsAlterNote       $13
00084471 E701                       	dc.b	smpsNoAttack, $01
00084473 E10F                       	smpsAlterNote       $0F
00084475 E701                       	dc.b	smpsNoAttack, $01
00084477 E109                       	smpsAlterNote       $09
00084479 E701                       	dc.b	smpsNoAttack, $01
0008447B E108                       	smpsAlterNote       $08
0008447D E701                       	dc.b	smpsNoAttack, $01
0008447F E10C                       	smpsAlterNote       $0C
00084481 E701                       	dc.b	smpsNoAttack, $01
00084483 E112                       	smpsAlterNote       $12
00084485 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084489 E10F                       	smpsAlterNote       $0F
0008448B E701                       	dc.b	smpsNoAttack, $01
0008448D E109                       	smpsAlterNote       $09
0008448F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084493 E10F                       	smpsAlterNote       $0F
00084495 E701                       	dc.b	smpsNoAttack, $01
00084497 E112                       	smpsAlterNote       $12
00084499 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008449D E10C                       	smpsAlterNote       $0C
0008449F E701                       	dc.b	smpsNoAttack, $01
000844A1 E108                       	smpsAlterNote       $08
000844A3 E701                       	dc.b	smpsNoAttack, $01
000844A5 E10C                       	smpsAlterNote       $0C
000844A7 E701                       	dc.b	smpsNoAttack, $01
000844A9 E10F                       	smpsAlterNote       $0F
000844AB E701                       	dc.b	smpsNoAttack, $01
000844AD E113                       	smpsAlterNote       $13
000844AF E701                       	dc.b	smpsNoAttack, $01
000844B1 E10F                       	smpsAlterNote       $0F
000844B3 E701                       	dc.b	smpsNoAttack, $01
000844B5 E109                       	smpsAlterNote       $09
000844B7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000844BD E601                       	smpsAlterVol        $01
000844BF E10F                       	smpsAlterNote       $0F
000844C1 C604                       	dc.b	nA5, $04
000844C3 E10D                       	smpsAlterNote       $0D
000844C5 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000844CB E10B                       	smpsAlterNote       $0B
000844CD BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000844D5 E10F                       	smpsAlterNote       $0F
000844D7 C604 8001                  	dc.b	nA5, $04, nRst, $01
000844DB E10D                       	smpsAlterNote       $0D
000844DD C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000844E3 E10C                       	smpsAlterNote       $0C
000844E5 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000844EB E10A                       	smpsAlterNote       $0A
000844ED C904 8001                  	dc.b	nC6, $04, nRst, $01
000844F1 E110                       	smpsAlterNote       $10
000844F3 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000844F7 E10F                       	smpsAlterNote       $0F
000844F9 C604                       	dc.b	nA5, $04
000844FB E10D                       	smpsAlterNote       $0D
000844FD C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00084509 E109                       	smpsAlterNote       $09
0008450B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008450F E10F                       	smpsAlterNote       $0F
00084511 E701                       	dc.b	smpsNoAttack, $01
00084513 E112                       	smpsAlterNote       $12
00084515 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084519 E10C                       	smpsAlterNote       $0C
0008451B E701                       	dc.b	smpsNoAttack, $01
0008451D E108                       	smpsAlterNote       $08
0008451F E701                       	dc.b	smpsNoAttack, $01
00084521 E10C                       	smpsAlterNote       $0C
00084523 E701                       	dc.b	smpsNoAttack, $01
00084525 E10F                       	smpsAlterNote       $0F
00084527 E701                       	dc.b	smpsNoAttack, $01
00084529 E113                       	smpsAlterNote       $13
0008452B E701                       	dc.b	smpsNoAttack, $01
0008452D E10D                       	smpsAlterNote       $0D
0008452F C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00084535 E10C                       	smpsAlterNote       $0C
00084537 C10D                       	dc.b	nE5, $0D
00084539 E109                       	smpsAlterNote       $09
0008453B E701                       	dc.b	smpsNoAttack, $01
0008453D E105                       	smpsAlterNote       $05
0008453F E701                       	dc.b	smpsNoAttack, $01
00084541 E106                       	smpsAlterNote       $06
00084543 E701                       	dc.b	smpsNoAttack, $01
00084545 E10C                       	smpsAlterNote       $0C
00084547 E701                       	dc.b	smpsNoAttack, $01
00084549 E110                       	smpsAlterNote       $10
0008454B E701                       	dc.b	smpsNoAttack, $01
0008454D E10C                       	smpsAlterNote       $0C
0008454F E701                       	dc.b	smpsNoAttack, $01
00084551 E109                       	smpsAlterNote       $09
00084553 E701                       	dc.b	smpsNoAttack, $01
00084555 E105                       	smpsAlterNote       $05
00084557 E701                       	dc.b	smpsNoAttack, $01
00084559 E109                       	smpsAlterNote       $09
0008455B E701                       	dc.b	smpsNoAttack, $01
0008455D E10F                       	smpsAlterNote       $0F
0008455F E701                       	dc.b	smpsNoAttack, $01
00084561 E110                       	smpsAlterNote       $10
00084563 E701                       	dc.b	smpsNoAttack, $01
00084565 E10C                       	smpsAlterNote       $0C
00084567 E701                       	dc.b	smpsNoAttack, $01
00084569 E106                       	smpsAlterNote       $06
0008456B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008456F E109                       	smpsAlterNote       $09
00084571 E701                       	dc.b	smpsNoAttack, $01
00084573 E10F                       	smpsAlterNote       $0F
00084575 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084579 E109                       	smpsAlterNote       $09
0008457B E701                       	dc.b	smpsNoAttack, $01
0008457D E106                       	smpsAlterNote       $06
0008457F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084583 E10C                       	smpsAlterNote       $0C
00084585 E701                       	dc.b	smpsNoAttack, $01
00084587 E110                       	smpsAlterNote       $10
00084589 E701                       	dc.b	smpsNoAttack, $01
0008458B E10F                       	smpsAlterNote       $0F
0008458D E701                       	dc.b	smpsNoAttack, $01
0008458F E109                       	smpsAlterNote       $09
00084591 E701                       	dc.b	smpsNoAttack, $01
00084593 E105                       	smpsAlterNote       $05
00084595 E701                       	dc.b	smpsNoAttack, $01
00084597 E109                       	smpsAlterNote       $09
00084599 E701                       	dc.b	smpsNoAttack, $01
0008459B E10C                       	smpsAlterNote       $0C
0008459D E701                       	dc.b	smpsNoAttack, $01
0008459F E110                       	smpsAlterNote       $10
000845A1 E701                       	dc.b	smpsNoAttack, $01
000845A3 E10C                       	smpsAlterNote       $0C
000845A5 E701                       	dc.b	smpsNoAttack, $01
000845A7 E106                       	smpsAlterNote       $06
000845A9 E701                       	dc.b	smpsNoAttack, $01
000845AB E105                       	smpsAlterNote       $05
000845AD E701                       	dc.b	smpsNoAttack, $01
000845AF E109                       	smpsAlterNote       $09
000845B1 E701                       	dc.b	smpsNoAttack, $01
000845B3 E10F                       	smpsAlterNote       $0F
000845B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000845B9 E10C                       	smpsAlterNote       $0C
000845BB E701                       	dc.b	smpsNoAttack, $01
000845BD E106                       	smpsAlterNote       $06
000845BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000845C3 E10C                       	smpsAlterNote       $0C
000845C5 E701                       	dc.b	smpsNoAttack, $01
000845C7 E10F                       	smpsAlterNote       $0F
000845C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000845CD E109                       	smpsAlterNote       $09
000845CF E701                       	dc.b	smpsNoAttack, $01
000845D1 E105                       	smpsAlterNote       $05
000845D3 E701                       	dc.b	smpsNoAttack, $01
000845D5 E106                       	smpsAlterNote       $06
000845D7 E701                       	dc.b	smpsNoAttack, $01
000845D9 E10C                       	smpsAlterNote       $0C
000845DB E701                       	dc.b	smpsNoAttack, $01
000845DD E110                       	smpsAlterNote       $10
000845DF E701                       	dc.b	smpsNoAttack, $01
000845E1 E10C                       	smpsAlterNote       $0C
000845E3 E701                       	dc.b	smpsNoAttack, $01
000845E5 E109                       	smpsAlterNote       $09
000845E7 E701                       	dc.b	smpsNoAttack, $01
000845E9 E105                       	smpsAlterNote       $05
000845EB E701                       	dc.b	smpsNoAttack, $01
000845ED E109                       	smpsAlterNote       $09
000845EF E701                       	dc.b	smpsNoAttack, $01
000845F1 E10F                       	smpsAlterNote       $0F
000845F3 E701                       	dc.b	smpsNoAttack, $01
000845F5 E110                       	smpsAlterNote       $10
000845F7 E701                       	dc.b	smpsNoAttack, $01
000845F9 E10C                       	smpsAlterNote       $0C
000845FB E701                       	dc.b	smpsNoAttack, $01
000845FD E106                       	smpsAlterNote       $06
000845FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084603 E109                       	smpsAlterNote       $09
00084605 E701                       	dc.b	smpsNoAttack, $01
00084607 E10F                       	smpsAlterNote       $0F
00084609 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008460D E109                       	smpsAlterNote       $09
0008460F E701                       	dc.b	smpsNoAttack, $01
00084611 E106                       	smpsAlterNote       $06
00084613 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084617 E10C                       	smpsAlterNote       $0C
00084619 E701                       	dc.b	smpsNoAttack, $01
0008461B E110                       	smpsAlterNote       $10
0008461D E701                       	dc.b	smpsNoAttack, $01
0008461F E10F                       	smpsAlterNote       $0F
00084621 E701                       	dc.b	smpsNoAttack, $01
00084623 E109                       	smpsAlterNote       $09
00084625 E701                       	dc.b	smpsNoAttack, $01
00084627 E105                       	smpsAlterNote       $05
00084629 E701                       	dc.b	smpsNoAttack, $01
0008462B E109                       	smpsAlterNote       $09
0008462D E701                       	dc.b	smpsNoAttack, $01
0008462F E10C                       	smpsAlterNote       $0C
00084631 E701                       	dc.b	smpsNoAttack, $01
00084633 E110                       	smpsAlterNote       $10
00084635 E701                       	dc.b	smpsNoAttack, $01
00084637 E10C                       	smpsAlterNote       $0C
00084639 E701                       	dc.b	smpsNoAttack, $01
0008463B E106                       	smpsAlterNote       $06
0008463D E701                       	dc.b	smpsNoAttack, $01
0008463F E105                       	smpsAlterNote       $05
00084641 E701                       	dc.b	smpsNoAttack, $01
00084643 E109                       	smpsAlterNote       $09
00084645 E701                       	dc.b	smpsNoAttack, $01
00084647 E10F                       	smpsAlterNote       $0F
00084649 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008464D E109                       	smpsAlterNote       $09
0008464F E701                       	dc.b	smpsNoAttack, $01
00084651 E106                       	smpsAlterNote       $06
00084653 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084657 E10C                       	smpsAlterNote       $0C
00084659 E701                       	dc.b	smpsNoAttack, $01
0008465B E110                       	smpsAlterNote       $10
0008465D E701                       	dc.b	smpsNoAttack, $01
0008465F E10F                       	smpsAlterNote       $0F
00084661 E701                       	dc.b	smpsNoAttack, $01
00084663 E109                       	smpsAlterNote       $09
00084665 E701                       	dc.b	smpsNoAttack, $01
00084667 E105                       	smpsAlterNote       $05
00084669 E701                       	dc.b	smpsNoAttack, $01
0008466B E109                       	smpsAlterNote       $09
0008466D E701                       	dc.b	smpsNoAttack, $01
0008466F E10C                       	smpsAlterNote       $0C
00084671 E701                       	dc.b	smpsNoAttack, $01
00084673 E110                       	smpsAlterNote       $10
00084675 E701                       	dc.b	smpsNoAttack, $01
00084677 E10C                       	smpsAlterNote       $0C
00084679 E701                       	dc.b	smpsNoAttack, $01
0008467B E106                       	smpsAlterNote       $06
0008467D E701                       	dc.b	smpsNoAttack, $01
0008467F E105                       	smpsAlterNote       $05
00084681 E701                       	dc.b	smpsNoAttack, $01
00084683 E109                       	smpsAlterNote       $09
00084685 E701                       	dc.b	smpsNoAttack, $01
00084687 E10F                       	smpsAlterNote       $0F
00084689 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008468D E10C                       	smpsAlterNote       $0C
0008468F E701                       	dc.b	smpsNoAttack, $01
00084691 E106                       	smpsAlterNote       $06
00084693 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084697 E10C                       	smpsAlterNote       $0C
00084699 E701                       	dc.b	smpsNoAttack, $01
0008469B E10F                       	smpsAlterNote       $0F
0008469D E701                       	dc.b	smpsNoAttack, $01
0008469F E110                       	smpsAlterNote       $10
000846A1 8001                       	dc.b	nRst, $01
000846A3 E10F                       	smpsAlterNote       $0F
000846A5 C604                       	dc.b	nA5, $04
000846A7 E10D                       	smpsAlterNote       $0D
000846A9 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000846AF E10B                       	smpsAlterNote       $0B
000846B1 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
000846B7 E10F                       	smpsAlterNote       $0F
000846B9 C604 8001                  	dc.b	nA5, $04, nRst, $01
000846BD E10D                       	smpsAlterNote       $0D
000846BF C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000846C5 E10C                       	smpsAlterNote       $0C
000846C7 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000846CD E10A                       	smpsAlterNote       $0A
000846CF C904                       	dc.b	nC6, $04
000846D1 E110                       	smpsAlterNote       $10
000846D3 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000846D7 E10F                       	smpsAlterNote       $0F
000846D9 C604                       	dc.b	nA5, $04
000846DB E10D                       	smpsAlterNote       $0D
000846DD C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000846E9 E109                       	smpsAlterNote       $09
000846EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846EF E10F                       	smpsAlterNote       $0F
000846F1 E701                       	dc.b	smpsNoAttack, $01
000846F3 E112                       	smpsAlterNote       $12
000846F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846F9 E10C                       	smpsAlterNote       $0C
000846FB E701                       	dc.b	smpsNoAttack, $01
000846FD E108                       	smpsAlterNote       $08
000846FF E701                       	dc.b	smpsNoAttack, $01
00084701 E109                       	smpsAlterNote       $09
00084703 E701                       	dc.b	smpsNoAttack, $01
00084705 E10F                       	smpsAlterNote       $0F
00084707 E701                       	dc.b	smpsNoAttack, $01
00084709 E113                       	smpsAlterNote       $13
0008470B E701                       	dc.b	smpsNoAttack, $01
0008470D E10D                       	smpsAlterNote       $0D
0008470F C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00084715 E10C                       	smpsAlterNote       $0C
00084717 C10D                       	dc.b	nE5, $0D
00084719 E109                       	smpsAlterNote       $09
0008471B E701                       	dc.b	smpsNoAttack, $01
0008471D E106                       	smpsAlterNote       $06
0008471F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084723 E10C                       	smpsAlterNote       $0C
00084725 E701                       	dc.b	smpsNoAttack, $01
00084727 E110                       	smpsAlterNote       $10
00084729 E701                       	dc.b	smpsNoAttack, $01
0008472B E10F                       	smpsAlterNote       $0F
0008472D E701                       	dc.b	smpsNoAttack, $01
0008472F E109                       	smpsAlterNote       $09
00084731 E701                       	dc.b	smpsNoAttack, $01
00084733 E105                       	smpsAlterNote       $05
00084735 E701                       	dc.b	smpsNoAttack, $01
00084737 E109                       	smpsAlterNote       $09
00084739 E701                       	dc.b	smpsNoAttack, $01
0008473B E10C                       	smpsAlterNote       $0C
0008473D E701                       	dc.b	smpsNoAttack, $01
0008473F E110                       	smpsAlterNote       $10
00084741 E701                       	dc.b	smpsNoAttack, $01
00084743 E10C                       	smpsAlterNote       $0C
00084745 E701                       	dc.b	smpsNoAttack, $01
00084747 E106                       	smpsAlterNote       $06
00084749 E701                       	dc.b	smpsNoAttack, $01
0008474B E105                       	smpsAlterNote       $05
0008474D E701                       	dc.b	smpsNoAttack, $01
0008474F E109                       	smpsAlterNote       $09
00084751 E701                       	dc.b	smpsNoAttack, $01
00084753 E10F                       	smpsAlterNote       $0F
00084755 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084759 E10C                       	smpsAlterNote       $0C
0008475B E701                       	dc.b	smpsNoAttack, $01
0008475D E106                       	smpsAlterNote       $06
0008475F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084763 E10C                       	smpsAlterNote       $0C
00084765 E701                       	dc.b	smpsNoAttack, $01
00084767 E10F                       	smpsAlterNote       $0F
00084769 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008476D E109                       	smpsAlterNote       $09
0008476F E701                       	dc.b	smpsNoAttack, $01
00084771 E105                       	smpsAlterNote       $05
00084773 E701                       	dc.b	smpsNoAttack, $01
00084775 E106                       	smpsAlterNote       $06
00084777 E701                       	dc.b	smpsNoAttack, $01
00084779 E10C                       	smpsAlterNote       $0C
0008477B E701                       	dc.b	smpsNoAttack, $01
0008477D E110                       	smpsAlterNote       $10
0008477F E701                       	dc.b	smpsNoAttack, $01
00084781 E10C                       	smpsAlterNote       $0C
00084783 E701                       	dc.b	smpsNoAttack, $01
00084785 E109                       	smpsAlterNote       $09
00084787 E701                       	dc.b	smpsNoAttack, $01
00084789 E105                       	smpsAlterNote       $05
0008478B E701                       	dc.b	smpsNoAttack, $01
0008478D E109                       	smpsAlterNote       $09
0008478F E701                       	dc.b	smpsNoAttack, $01
00084791 E10F                       	smpsAlterNote       $0F
00084793 E701                       	dc.b	smpsNoAttack, $01
00084795 E110                       	smpsAlterNote       $10
00084797 E701                       	dc.b	smpsNoAttack, $01
00084799 E10C                       	smpsAlterNote       $0C
0008479B E701                       	dc.b	smpsNoAttack, $01
0008479D E106                       	smpsAlterNote       $06
0008479F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847A3 E109                       	smpsAlterNote       $09
000847A5 E701                       	dc.b	smpsNoAttack, $01
000847A7 E10F                       	smpsAlterNote       $0F
000847A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847AD E109                       	smpsAlterNote       $09
000847AF E701                       	dc.b	smpsNoAttack, $01
000847B1 E106                       	smpsAlterNote       $06
000847B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847B7 E10C                       	smpsAlterNote       $0C
000847B9 E701                       	dc.b	smpsNoAttack, $01
000847BB E110                       	smpsAlterNote       $10
000847BD E701                       	dc.b	smpsNoAttack, $01
000847BF E10F                       	smpsAlterNote       $0F
000847C1 E701                       	dc.b	smpsNoAttack, $01
000847C3 E109                       	smpsAlterNote       $09
000847C5 E701                       	dc.b	smpsNoAttack, $01
000847C7 E105                       	smpsAlterNote       $05
000847C9 E701                       	dc.b	smpsNoAttack, $01
000847CB E109                       	smpsAlterNote       $09
000847CD E701                       	dc.b	smpsNoAttack, $01
000847CF E10F                       	smpsAlterNote       $0F
000847D1 E701                       	dc.b	smpsNoAttack, $01
000847D3 E110                       	smpsAlterNote       $10
000847D5 E701                       	dc.b	smpsNoAttack, $01
000847D7 E10C                       	smpsAlterNote       $0C
000847D9 E701                       	dc.b	smpsNoAttack, $01
000847DB E106                       	smpsAlterNote       $06
000847DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847E1 E109                       	smpsAlterNote       $09
000847E3 E701                       	dc.b	smpsNoAttack, $01
000847E5 E10F                       	smpsAlterNote       $0F
000847E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847EB E109                       	smpsAlterNote       $09
000847ED E701                       	dc.b	smpsNoAttack, $01
000847EF E106                       	smpsAlterNote       $06
000847F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847F5 E10C                       	smpsAlterNote       $0C
000847F7 E701                       	dc.b	smpsNoAttack, $01
000847F9 E110                       	smpsAlterNote       $10
000847FB E701                       	dc.b	smpsNoAttack, $01
000847FD E10F                       	smpsAlterNote       $0F
000847FF E701                       	dc.b	smpsNoAttack, $01
00084801 E109                       	smpsAlterNote       $09
00084803 E701                       	dc.b	smpsNoAttack, $01
00084805 E105                       	smpsAlterNote       $05
00084807 E701                       	dc.b	smpsNoAttack, $01
00084809 E109                       	smpsAlterNote       $09
0008480B E701                       	dc.b	smpsNoAttack, $01
0008480D E10C                       	smpsAlterNote       $0C
0008480F E701                       	dc.b	smpsNoAttack, $01
00084811 E110                       	smpsAlterNote       $10
00084813 E701                       	dc.b	smpsNoAttack, $01
00084815 E10C                       	smpsAlterNote       $0C
00084817 E701                       	dc.b	smpsNoAttack, $01
00084819 E106                       	smpsAlterNote       $06
0008481B E701                       	dc.b	smpsNoAttack, $01
0008481D E105                       	smpsAlterNote       $05
0008481F E701                       	dc.b	smpsNoAttack, $01
00084821 E109                       	smpsAlterNote       $09
00084823 E701                       	dc.b	smpsNoAttack, $01
00084825 E10F                       	smpsAlterNote       $0F
00084827 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008482B E10C                       	smpsAlterNote       $0C
0008482D E701                       	dc.b	smpsNoAttack, $01
0008482F E106                       	smpsAlterNote       $06
00084831 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084835 E10C                       	smpsAlterNote       $0C
00084837 E701                       	dc.b	smpsNoAttack, $01
00084839 E10F                       	smpsAlterNote       $0F
0008483B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008483F E109                       	smpsAlterNote       $09
00084841 E701                       	dc.b	smpsNoAttack, $01
00084843 E105                       	smpsAlterNote       $05
00084845 E701                       	dc.b	smpsNoAttack, $01
00084847 E106                       	smpsAlterNote       $06
00084849 E701                       	dc.b	smpsNoAttack, $01
0008484B E10C                       	smpsAlterNote       $0C
0008484D E701                       	dc.b	smpsNoAttack, $01
0008484F E110                       	smpsAlterNote       $10
00084851 E701                       	dc.b	smpsNoAttack, $01
00084853 E10C                       	smpsAlterNote       $0C
00084855 E701                       	dc.b	smpsNoAttack, $01
00084857 E109                       	smpsAlterNote       $09
00084859 E701                       	dc.b	smpsNoAttack, $01
0008485B E105                       	smpsAlterNote       $05
0008485D E701                       	dc.b	smpsNoAttack, $01
0008485F E109                       	smpsAlterNote       $09
00084861 E701                       	dc.b	smpsNoAttack, $01
00084863 E10F                       	smpsAlterNote       $0F
00084865 E701                       	dc.b	smpsNoAttack, $01
00084867 E110                       	smpsAlterNote       $10
00084869 E701                       	dc.b	smpsNoAttack, $01
0008486B E10C                       	smpsAlterNote       $0C
0008486D E701                       	dc.b	smpsNoAttack, $01
0008486F E106                       	smpsAlterNote       $06
00084871 E701                       	dc.b	smpsNoAttack, $01
00084873 E10B                       	smpsAlterNote       $0B
00084875 BF02                       	dc.b	nD5, $02
00084877 E10C                       	smpsAlterNote       $0C
00084879 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008487F E109                       	smpsAlterNote       $09
00084881 E701                       	dc.b	smpsNoAttack, $01
00084883 E105                       	smpsAlterNote       $05
00084885 E701                       	dc.b	smpsNoAttack, $01
00084887 E109                       	smpsAlterNote       $09
00084889 E701                       	dc.b	smpsNoAttack, $01
0008488B E10F                       	smpsAlterNote       $0F
0008488D E701                       	dc.b	smpsNoAttack, $01
0008488F E110                       	smpsAlterNote       $10
00084891 E701                       	dc.b	smpsNoAttack, $01
00084893 E10C                       	smpsAlterNote       $0C
00084895 E701                       	dc.b	smpsNoAttack, $01
00084897 E106                       	smpsAlterNote       $06
00084899 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008489D E109                       	smpsAlterNote       $09
0008489F E701                       	dc.b	smpsNoAttack, $01
000848A1 E10F                       	smpsAlterNote       $0F
000848A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848A7 E109                       	smpsAlterNote       $09
000848A9 E701                       	dc.b	smpsNoAttack, $01
000848AB E106                       	smpsAlterNote       $06
000848AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848B1 E10C                       	smpsAlterNote       $0C
000848B3 E701                       	dc.b	smpsNoAttack, $01
000848B5 E110                       	smpsAlterNote       $10
000848B7 E701                       	dc.b	smpsNoAttack, $01
000848B9 E10F                       	smpsAlterNote       $0F
000848BB E701                       	dc.b	smpsNoAttack, $01
000848BD E109                       	smpsAlterNote       $09
000848BF E701                       	dc.b	smpsNoAttack, $01
000848C1 E105                       	smpsAlterNote       $05
000848C3 E701                       	dc.b	smpsNoAttack, $01
000848C5 E109                       	smpsAlterNote       $09
000848C7 E701                       	dc.b	smpsNoAttack, $01
000848C9 E10C                       	smpsAlterNote       $0C
000848CB E701                       	dc.b	smpsNoAttack, $01
000848CD E110                       	smpsAlterNote       $10
000848CF E701                       	dc.b	smpsNoAttack, $01
000848D1 E10C                       	smpsAlterNote       $0C
000848D3 E701                       	dc.b	smpsNoAttack, $01
000848D5 E106                       	smpsAlterNote       $06
000848D7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000848DB E10D                       	smpsAlterNote       $0D
000848DD C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000848E5 E10C                       	smpsAlterNote       $0C
000848E7 C10D                       	dc.b	nE5, $0D
000848E9 E106                       	smpsAlterNote       $06
000848EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848EF E109                       	smpsAlterNote       $09
000848F1 E701                       	dc.b	smpsNoAttack, $01
000848F3 E10F                       	smpsAlterNote       $0F
000848F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848F9 E109                       	smpsAlterNote       $09
000848FB E701                       	dc.b	smpsNoAttack, $01
000848FD E106                       	smpsAlterNote       $06
000848FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084903 E10C                       	smpsAlterNote       $0C
00084905 E701                       	dc.b	smpsNoAttack, $01
00084907 E110                       	smpsAlterNote       $10
00084909 E701                       	dc.b	smpsNoAttack, $01
0008490B E10F                       	smpsAlterNote       $0F
0008490D E701                       	dc.b	smpsNoAttack, $01
0008490F E109                       	smpsAlterNote       $09
00084911 E701                       	dc.b	smpsNoAttack, $01
00084913 E105                       	smpsAlterNote       $05
00084915 E701                       	dc.b	smpsNoAttack, $01
00084917 E106                       	smpsAlterNote       $06
00084919 800F                       	dc.b	nRst, $0F
0008491D E6FF                       	smpsAlterVol        $FF
0008491F E10F                       	smpsAlterNote       $0F
00084921 BA01                       	dc.b	nA4, $01
00084923 E110                       	smpsAlterNote       $10
00084925 BB02                       	dc.b	nBb4, $02
00084927 E10F                       	smpsAlterNote       $0F
00084929 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008492F E10B                       	smpsAlterNote       $0B
00084931 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00084935 E10C                       	smpsAlterNote       $0C
00084937 C103                       	dc.b	nE5, $03
00084939 E10D                       	smpsAlterNote       $0D
0008493B C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00084945 E10B                       	smpsAlterNote       $0B
00084947 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008494B E104                       	smpsAlterNote       $04
0008494D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084951 E10A                       	smpsAlterNote       $0A
00084953 E701                       	dc.b	smpsNoAttack, $01
00084955 E10D                       	smpsAlterNote       $0D
00084957 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008495B E107                       	smpsAlterNote       $07
0008495D E701                       	dc.b	smpsNoAttack, $01
0008495F E104                       	smpsAlterNote       $04
00084961 8001                       	dc.b	nRst, $01
00084963 E110                       	smpsAlterNote       $10
00084965 C703                       	dc.b	nBb5, $03
00084967 E10F                       	smpsAlterNote       $0F
00084969 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008496D E10D                       	smpsAlterNote       $0D
0008496F C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00084973 E10C                       	smpsAlterNote       $0C
00084975 E701                       	dc.b	smpsNoAttack, $01
00084977 E108                       	smpsAlterNote       $08
00084979 E701                       	dc.b	smpsNoAttack, $01
0008497B E109                       	smpsAlterNote       $09
0008497D E701                       	dc.b	smpsNoAttack, $01
0008497F E10F                       	smpsAlterNote       $0F
00084981 E701                       	dc.b	smpsNoAttack, $01
00084983 E113                       	smpsAlterNote       $13
00084985 E701                       	dc.b	smpsNoAttack, $01
00084987 E10F                       	smpsAlterNote       $0F
00084989 E701                       	dc.b	smpsNoAttack, $01
0008498B E10C                       	smpsAlterNote       $0C
0008498D E701                       	dc.b	smpsNoAttack, $01
0008498F E108                       	smpsAlterNote       $08
00084991 E701                       	dc.b	smpsNoAttack, $01
00084993 E10C                       	smpsAlterNote       $0C
00084995 E701                       	dc.b	smpsNoAttack, $01
00084997 E112                       	smpsAlterNote       $12
00084999 E701                       	dc.b	smpsNoAttack, $01
0008499B E113                       	smpsAlterNote       $13
0008499D E701                       	dc.b	smpsNoAttack, $01
0008499F E10F                       	smpsAlterNote       $0F
000849A1 E701                       	dc.b	smpsNoAttack, $01
000849A3 E109                       	smpsAlterNote       $09
000849A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849A9 E10C                       	smpsAlterNote       $0C
000849AB E701                       	dc.b	smpsNoAttack, $01
000849AD E112                       	smpsAlterNote       $12
000849AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849B3 E10C                       	smpsAlterNote       $0C
000849B5 E701                       	dc.b	smpsNoAttack, $01
000849B7 E109                       	smpsAlterNote       $09
000849B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849BD E10F                       	smpsAlterNote       $0F
000849BF E701                       	dc.b	smpsNoAttack, $01
000849C1 E113                       	smpsAlterNote       $13
000849C3 E701                       	dc.b	smpsNoAttack, $01
000849C5 E112                       	smpsAlterNote       $12
000849C7 E701                       	dc.b	smpsNoAttack, $01
000849C9 E10C                       	smpsAlterNote       $0C
000849CB E701                       	dc.b	smpsNoAttack, $01
000849CD E108                       	smpsAlterNote       $08
000849CF E701                       	dc.b	smpsNoAttack, $01
000849D1 E10C                       	smpsAlterNote       $0C
000849D3 E701                       	dc.b	smpsNoAttack, $01
000849D5 E10F                       	smpsAlterNote       $0F
000849D7 E701                       	dc.b	smpsNoAttack, $01
000849D9 E113                       	smpsAlterNote       $13
000849DB E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000849DF E10B                       	smpsAlterNote       $0B
000849E1 BF03                       	dc.b	nD5, $03
000849E3 E10C                       	smpsAlterNote       $0C
000849E5 C103 8001                  	dc.b	nE5, $03, nRst, $01
000849E9 E10D                       	smpsAlterNote       $0D
000849EB C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000849F5 E10B                       	smpsAlterNote       $0B
000849F7 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00084A03 E110                       	smpsAlterNote       $10
00084A05 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00084A09 E10F                       	smpsAlterNote       $0F
00084A0B C604                       	dc.b	nA5, $04
00084A0D E10D                       	smpsAlterNote       $0D
00084A0F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00084A15 E109                       	smpsAlterNote       $09
00084A17 E701                       	dc.b	smpsNoAttack, $01
00084A19 E108                       	smpsAlterNote       $08
00084A1B E701                       	dc.b	smpsNoAttack, $01
00084A1D E10C                       	smpsAlterNote       $0C
00084A1F E701                       	dc.b	smpsNoAttack, $01
00084A21 E112                       	smpsAlterNote       $12
00084A23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A27 E10F                       	smpsAlterNote       $0F
00084A29 E701                       	dc.b	smpsNoAttack, $01
00084A2B E109                       	smpsAlterNote       $09
00084A2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A31 E10F                       	smpsAlterNote       $0F
00084A33 E701                       	dc.b	smpsNoAttack, $01
00084A35 E112                       	smpsAlterNote       $12
00084A37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A3B E10C                       	smpsAlterNote       $0C
00084A3D E701                       	dc.b	smpsNoAttack, $01
00084A3F E108                       	smpsAlterNote       $08
00084A41 E701                       	dc.b	smpsNoAttack, $01
00084A43 E109                       	smpsAlterNote       $09
00084A45 E701                       	dc.b	smpsNoAttack, $01
00084A47 E10F                       	smpsAlterNote       $0F
00084A49 E701                       	dc.b	smpsNoAttack, $01
00084A4B E113                       	smpsAlterNote       $13
00084A4D E701                       	dc.b	smpsNoAttack, $01
00084A4F E10F                       	smpsAlterNote       $0F
00084A51 E701                       	dc.b	smpsNoAttack, $01
00084A53 E10C                       	smpsAlterNote       $0C
00084A55 E701                       	dc.b	smpsNoAttack, $01
00084A57 E108                       	smpsAlterNote       $08
00084A59 E701                       	dc.b	smpsNoAttack, $01
00084A5B E10C                       	smpsAlterNote       $0C
00084A5D E701                       	dc.b	smpsNoAttack, $01
00084A5F E112                       	smpsAlterNote       $12
00084A61 E701                       	dc.b	smpsNoAttack, $01
00084A63 E113                       	smpsAlterNote       $13
00084A65 E701                       	dc.b	smpsNoAttack, $01
00084A67 E10F                       	smpsAlterNote       $0F
00084A69 E701                       	dc.b	smpsNoAttack, $01
00084A6B E109                       	smpsAlterNote       $09
00084A6D E701                       	dc.b	smpsNoAttack, $01
00084A6F E10D                       	smpsAlterNote       $0D
00084A71 C402                       	dc.b	nG5, $02
00084A73 E10F                       	smpsAlterNote       $0F
00084A75 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00084A7F E10D                       	smpsAlterNote       $0D
00084A81 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00084A87 E10B                       	smpsAlterNote       $0B
00084A89 BF0D                       	dc.b	nD5, $0D
00084A8B E108                       	smpsAlterNote       $08
00084A8D E701                       	dc.b	smpsNoAttack, $01
00084A8F E104                       	smpsAlterNote       $04
00084A91 E701                       	dc.b	smpsNoAttack, $01
00084A93 E105                       	smpsAlterNote       $05
00084A95 E701                       	dc.b	smpsNoAttack, $01
00084A97 E10B                       	smpsAlterNote       $0B
00084A99 E701                       	dc.b	smpsNoAttack, $01
00084A9B E10F                       	smpsAlterNote       $0F
00084A9D E701                       	dc.b	smpsNoAttack, $01
00084A9F E10B                       	smpsAlterNote       $0B
00084AA1 E701                       	dc.b	smpsNoAttack, $01
00084AA3 E108                       	smpsAlterNote       $08
00084AA5 E701                       	dc.b	smpsNoAttack, $01
00084AA7 E104                       	smpsAlterNote       $04
00084AA9 E701                       	dc.b	smpsNoAttack, $01
00084AAB E108                       	smpsAlterNote       $08
00084AAD E701                       	dc.b	smpsNoAttack, $01
00084AAF E10E                       	smpsAlterNote       $0E
00084AB1 E701                       	dc.b	smpsNoAttack, $01
00084AB3 E10F                       	smpsAlterNote       $0F
00084AB5 E701                       	dc.b	smpsNoAttack, $01
00084AB7 E10C                       	smpsAlterNote       $0C
00084AB9 C101                       	dc.b	nE5, $01
00084ABB E10D                       	smpsAlterNote       $0D
00084ABD C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00084AC5 E10F                       	smpsAlterNote       $0F
00084AC7 C607                       	dc.b	nA5, $07
00084AC9 E10C                       	smpsAlterNote       $0C
00084ACB CD07                       	dc.b	nE6, $07
00084ACD E10D                       	smpsAlterNote       $0D
00084ACF CE06 8001                  	dc.b	nF6, $06, nRst, $01
00084AD3 E10C                       	smpsAlterNote       $0C
00084AD5 CD03                       	dc.b	nE6, $03
00084AD7 E10A                       	smpsAlterNote       $0A
00084AD9 C903 8001                  	dc.b	nC6, $03, nRst, $01
00084ADD E10D                       	smpsAlterNote       $0D
00084ADF C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00084AE5 E10A                       	smpsAlterNote       $0A
00084AE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084AEB E110                       	smpsAlterNote       $10
00084AED E701                       	dc.b	smpsNoAttack, $01
00084AEF E114                       	smpsAlterNote       $14
00084AF1 E701                       	dc.b	smpsNoAttack, $01
00084AF3 E113                       	smpsAlterNote       $13
00084AF5 E701                       	dc.b	smpsNoAttack, $01
00084AF7 E10D                       	smpsAlterNote       $0D
00084AF9 E701                       	dc.b	smpsNoAttack, $01
00084AFB E109                       	smpsAlterNote       $09
00084AFD E701                       	dc.b	smpsNoAttack, $01
00084AFF E10D                       	smpsAlterNote       $0D
00084B01 E701                       	dc.b	smpsNoAttack, $01
00084B03 E110                       	smpsAlterNote       $10
00084B05 E701                       	dc.b	smpsNoAttack, $01
00084B07 E114                       	smpsAlterNote       $14
00084B09 E701                       	dc.b	smpsNoAttack, $01
00084B0B E10F                       	smpsAlterNote       $0F
00084B0D C607                       	dc.b	nA5, $07
00084B0F E10D                       	smpsAlterNote       $0D
00084B11 C40D                       	dc.b	nG5, $0D
00084B13 E10A                       	smpsAlterNote       $0A
00084B15 E701                       	dc.b	smpsNoAttack, $01
00084B17 E106                       	smpsAlterNote       $06
00084B19 E701                       	dc.b	smpsNoAttack, $01
00084B1B E10A                       	smpsAlterNote       $0A
00084B1D E701                       	dc.b	smpsNoAttack, $01
00084B1F E10D                       	smpsAlterNote       $0D
00084B21 E701                       	dc.b	smpsNoAttack, $01
00084B23 E111                       	smpsAlterNote       $11
00084B25 E701                       	dc.b	smpsNoAttack, $01
00084B27 E10D                       	smpsAlterNote       $0D
00084B29 E701                       	dc.b	smpsNoAttack, $01
00084B2B E107                       	smpsAlterNote       $07
00084B2D E701                       	dc.b	smpsNoAttack, $01
00084B2F E106                       	smpsAlterNote       $06
00084B31 E701                       	dc.b	smpsNoAttack, $01
00084B33 E10A                       	smpsAlterNote       $0A
00084B35 E701                       	dc.b	smpsNoAttack, $01
00084B37 E110                       	smpsAlterNote       $10
00084B39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B3D E10D                       	smpsAlterNote       $0D
00084B3F E701                       	dc.b	smpsNoAttack, $01
00084B41 E107                       	smpsAlterNote       $07
00084B43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B47 E10F                       	smpsAlterNote       $0F
00084B49 C60E                       	dc.b	nA5, $0E
00084B4B E109                       	smpsAlterNote       $09
00084B4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B51 E10F                       	smpsAlterNote       $0F
00084B53 E701                       	dc.b	smpsNoAttack, $01
00084B55 E112                       	smpsAlterNote       $12
00084B57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B5B E10C                       	smpsAlterNote       $0C
00084B5D E701                       	dc.b	smpsNoAttack, $01
00084B5F E108                       	smpsAlterNote       $08
00084B61 E701                       	dc.b	smpsNoAttack, $01
00084B63 E109                       	smpsAlterNote       $09
00084B65 E701                       	dc.b	smpsNoAttack, $01
00084B67 E10F                       	smpsAlterNote       $0F
00084B69 E701                       	dc.b	smpsNoAttack, $01
00084B6B E113                       	smpsAlterNote       $13
00084B6D E701                       	dc.b	smpsNoAttack, $01
00084B6F E10F                       	smpsAlterNote       $0F
00084B71 E701                       	dc.b	smpsNoAttack, $01
00084B73 E10C                       	smpsAlterNote       $0C
00084B75 E701                       	dc.b	smpsNoAttack, $01
00084B77 E108                       	smpsAlterNote       $08
00084B79 E701                       	dc.b	smpsNoAttack, $01
00084B7B E109                       	smpsAlterNote       $09
00084B7D 8001                       	dc.b	nRst, $01
00084B7F E110                       	smpsAlterNote       $10
00084B81 C70D                       	dc.b	nBb5, $0D
00084B83 E10D                       	smpsAlterNote       $0D
00084B85 E701                       	dc.b	smpsNoAttack, $01
00084B87 E109                       	smpsAlterNote       $09
00084B89 E701                       	dc.b	smpsNoAttack, $01
00084B8B E10D                       	smpsAlterNote       $0D
00084B8D E701                       	dc.b	smpsNoAttack, $01
00084B8F E113                       	smpsAlterNote       $13
00084B91 E701                       	dc.b	smpsNoAttack, $01
00084B93 E114                       	smpsAlterNote       $14
00084B95 E701                       	dc.b	smpsNoAttack, $01
00084B97 E110                       	smpsAlterNote       $10
00084B99 E701                       	dc.b	smpsNoAttack, $01
00084B9B E10A                       	smpsAlterNote       $0A
00084B9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BA1 E10D                       	smpsAlterNote       $0D
00084BA3 E701                       	dc.b	smpsNoAttack, $01
00084BA5 E113                       	smpsAlterNote       $13
00084BA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BAB E10D                       	smpsAlterNote       $0D
00084BAD E701                       	dc.b	smpsNoAttack, $01
00084BAF E10A                       	smpsAlterNote       $0A
00084BB1 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00084BBB E10B                       	smpsAlterNote       $0B
00084BBD 8001                       	dc.b	nRst, $01
00084BBF E10C                       	smpsAlterNote       $0C
00084BC1 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00084BC5 E10B                       	smpsAlterNote       $0B
00084BC7 CB0D                       	dc.b	nD6, $0D
00084BC9 E105                       	smpsAlterNote       $05
00084BCB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BCF E108                       	smpsAlterNote       $08
00084BD1 E701                       	dc.b	smpsNoAttack, $01
00084BD3 E10E                       	smpsAlterNote       $0E
00084BD5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BD9 E108                       	smpsAlterNote       $08
00084BDB E701                       	dc.b	smpsNoAttack, $01
00084BDD E105                       	smpsAlterNote       $05
00084BDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BE3 E10B                       	smpsAlterNote       $0B
00084BE5 E701                       	dc.b	smpsNoAttack, $01
00084BE7 E10F                       	smpsAlterNote       $0F
00084BE9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084BED E10C                       	smpsAlterNote       $0C
00084BEF CC0D                       	dc.b	nEb6, $0D
00084BF1 E106                       	smpsAlterNote       $06
00084BF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BF7 E109                       	smpsAlterNote       $09
00084BF9 E701                       	dc.b	smpsNoAttack, $01
00084BFB E10C                       	smpsAlterNote       $0C
00084BFD 8001                       	dc.b	nRst, $01
00084BFF E10A                       	smpsAlterNote       $0A
00084C01 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00084C0D CB0E                       	dc.b	nD6, $0E
00084C0F E105                       	smpsAlterNote       $05
00084C11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C15 E10B                       	smpsAlterNote       $0B
00084C17 E701                       	dc.b	smpsNoAttack, $01
00084C19 E10E                       	smpsAlterNote       $0E
00084C1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C1F E108                       	smpsAlterNote       $08
00084C21 E701                       	dc.b	smpsNoAttack, $01
00084C23 E104                       	smpsAlterNote       $04
00084C25 E701                       	dc.b	smpsNoAttack, $01
00084C27 E105                       	smpsAlterNote       $05
00084C29 E701                       	dc.b	smpsNoAttack, $01
00084C2B E10B                       	smpsAlterNote       $0B
00084C2D E701                       	dc.b	smpsNoAttack, $01
00084C2F E10F                       	smpsAlterNote       $0F
00084C31 E701                       	dc.b	smpsNoAttack, $01
00084C33 E10D                       	smpsAlterNote       $0D
00084C35 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
00084C39 E10C                       	smpsAlterNote       $0C
00084C3B CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00084C3F E10A                       	smpsAlterNote       $0A
00084C41 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00084C4D CB0D                       	dc.b	nD6, $0D
00084C4F E108                       	smpsAlterNote       $08
00084C51 E701                       	dc.b	smpsNoAttack, $01
00084C53 E104                       	smpsAlterNote       $04
00084C55 E701                       	dc.b	smpsNoAttack, $01
00084C57 E105                       	smpsAlterNote       $05
00084C59 E701                       	dc.b	smpsNoAttack, $01
00084C5B E10B                       	smpsAlterNote       $0B
00084C5D E701                       	dc.b	smpsNoAttack, $01
00084C5F E10F                       	smpsAlterNote       $0F
00084C61 E701                       	dc.b	smpsNoAttack, $01
00084C63 E10B                       	smpsAlterNote       $0B
00084C65 E701                       	dc.b	smpsNoAttack, $01
00084C67 E108                       	smpsAlterNote       $08
00084C69 E701                       	dc.b	smpsNoAttack, $01
00084C6B E104                       	smpsAlterNote       $04
00084C6D E701                       	dc.b	smpsNoAttack, $01
00084C6F E108                       	smpsAlterNote       $08
00084C71 E701                       	dc.b	smpsNoAttack, $01
00084C73 E10E                       	smpsAlterNote       $0E
00084C75 E701                       	dc.b	smpsNoAttack, $01
00084C77 E10F                       	smpsAlterNote       $0F
00084C79 E701                       	dc.b	smpsNoAttack, $01
00084C7B E10C                       	smpsAlterNote       $0C
00084C7D CC0D                       	dc.b	nEb6, $0D
00084C7F E109                       	smpsAlterNote       $09
00084C81 E701                       	dc.b	smpsNoAttack, $01
00084C83 E105                       	smpsAlterNote       $05
00084C85 E701                       	dc.b	smpsNoAttack, $01
00084C87 E106                       	smpsAlterNote       $06
00084C89 E701                       	dc.b	smpsNoAttack, $01
00084C8B E10C                       	smpsAlterNote       $0C
00084C8D E701                       	dc.b	smpsNoAttack, $01
00084C8F E10A                       	smpsAlterNote       $0A
00084C91 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00084C9D CB0D                       	dc.b	nD6, $0D
00084C9F E108                       	smpsAlterNote       $08
00084CA1 E701                       	dc.b	smpsNoAttack, $01
00084CA3 E104                       	smpsAlterNote       $04
00084CA5 E701                       	dc.b	smpsNoAttack, $01
00084CA7 E108                       	smpsAlterNote       $08
00084CA9 E701                       	dc.b	smpsNoAttack, $01
00084CAB E10B                       	smpsAlterNote       $0B
00084CAD E701                       	dc.b	smpsNoAttack, $01
00084CAF E10F                       	smpsAlterNote       $0F
00084CB1 E701                       	dc.b	smpsNoAttack, $01
00084CB3 E10B                       	smpsAlterNote       $0B
00084CB5 E701                       	dc.b	smpsNoAttack, $01
00084CB7 E105                       	smpsAlterNote       $05
00084CB9 E701                       	dc.b	smpsNoAttack, $01
00084CBB E104                       	smpsAlterNote       $04
00084CBD E701                       	dc.b	smpsNoAttack, $01
00084CBF E108                       	smpsAlterNote       $08
00084CC1 E701                       	dc.b	smpsNoAttack, $01
00084CC3 E10E                       	smpsAlterNote       $0E
00084CC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084CC9 E10B                       	smpsAlterNote       $0B
00084CCB E701                       	dc.b	smpsNoAttack, $01
00084CCD E105                       	smpsAlterNote       $05
00084CCF E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00084CD7 03                         	dc.b	$03
00084CD8 E601                       	smpsAlterVol        $01
00084CDA F6F1 D1                    	smpsJump            music84_Jump01
00084CDD                            
00084CDD                            ; FM5 Data
00084CDD                            music84_FM5:
00084CDF E080                       	smpsPan             panLeft, $00
00084CE1 8003                       	dc.b	nRst, $03
00084CE3 E10D                       	smpsAlterNote       $0D
00084CE5 C203 8008                  	dc.b	nF5, $03, nRst, $08
00084CE9 E10C                       	smpsAlterNote       $0C
00084CEB C103 800A                  	dc.b	nE5, $03, nRst, $0A
00084CEF E10F                       	smpsAlterNote       $0F
00084CF1 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00084CF7 E6FE                       	smpsAlterVol        $FE
00084CF9 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00084CFF E10D                       	smpsAlterNote       $0D
00084D01 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00084D07 E10C                       	smpsAlterNote       $0C
00084D09 C102 8001                  	dc.b	nE5, $02, nRst, $01
00084D0D E10A                       	smpsAlterNote       $0A
00084D0F BD01 8001                  	dc.b	nC5, $01, nRst, $01
00084D15 03                         	dc.b	$03
00084D16                            
00084D16                            music84_Jump00:
00084D16 8004                       	dc.b	nRst, $04
00084D18 E602                       	smpsAlterVol        $02
00084D1A E10D                       	smpsAlterNote       $0D
00084D1C B60D                       	dc.b	nF4, $0D
00084D1E E107                       	smpsAlterNote       $07
00084D20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D24 E10A                       	smpsAlterNote       $0A
00084D26 E701                       	dc.b	smpsNoAttack, $01
00084D28 E110                       	smpsAlterNote       $10
00084D2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D2E E10A                       	smpsAlterNote       $0A
00084D30 E701                       	dc.b	smpsNoAttack, $01
00084D32 E107                       	smpsAlterNote       $07
00084D34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D38 E10D                       	smpsAlterNote       $0D
00084D3A E701                       	dc.b	smpsNoAttack, $01
00084D3C E111                       	smpsAlterNote       $11
00084D3E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084D42 E10D                       	smpsAlterNote       $0D
00084D44 B80D                       	dc.b	nG4, $0D
00084D46 E107                       	smpsAlterNote       $07
00084D48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D4C E10A                       	smpsAlterNote       $0A
00084D4E E701                       	dc.b	smpsNoAttack, $01
00084D50 E110                       	smpsAlterNote       $10
00084D52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D56 E10A                       	smpsAlterNote       $0A
00084D58 E701                       	dc.b	smpsNoAttack, $01
00084D5A E107                       	smpsAlterNote       $07
00084D5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D60 E10D                       	smpsAlterNote       $0D
00084D62 E701                       	dc.b	smpsNoAttack, $01
00084D64 E111                       	smpsAlterNote       $11
00084D66 E701                       	dc.b	smpsNoAttack, $01
00084D68 E110                       	smpsAlterNote       $10
00084D6A E701                       	dc.b	smpsNoAttack, $01
00084D6C E10A                       	smpsAlterNote       $0A
00084D6E E701                       	dc.b	smpsNoAttack, $01
00084D70 E106                       	smpsAlterNote       $06
00084D72 E701                       	dc.b	smpsNoAttack, $01
00084D74 E10A                       	smpsAlterNote       $0A
00084D76 E701                       	dc.b	smpsNoAttack, $01
00084D78 E10D                       	smpsAlterNote       $0D
00084D7A E701                       	dc.b	smpsNoAttack, $01
00084D7C E111                       	smpsAlterNote       $11
00084D7E E701                       	dc.b	smpsNoAttack, $01
00084D80 E10D                       	smpsAlterNote       $0D
00084D82 E701                       	dc.b	smpsNoAttack, $01
00084D84 E10F                       	smpsAlterNote       $0F
00084D86 BA0E                       	dc.b	nA4, $0E
00084D88 E109                       	smpsAlterNote       $09
00084D8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D8E E10F                       	smpsAlterNote       $0F
00084D90 E701                       	dc.b	smpsNoAttack, $01
00084D92 E112                       	smpsAlterNote       $12
00084D94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D98 E10C                       	smpsAlterNote       $0C
00084D9A E701                       	dc.b	smpsNoAttack, $01
00084D9C E108                       	smpsAlterNote       $08
00084D9E E701                       	dc.b	smpsNoAttack, $01
00084DA0 E109                       	smpsAlterNote       $09
00084DA2 E701                       	dc.b	smpsNoAttack, $01
00084DA4 E10F                       	smpsAlterNote       $0F
00084DA6 E701                       	dc.b	smpsNoAttack, $01
00084DA8 E113                       	smpsAlterNote       $13
00084DAA E701                       	dc.b	smpsNoAttack, $01
00084DAC E10F                       	smpsAlterNote       $0F
00084DAE E701                       	dc.b	smpsNoAttack, $01
00084DB0 E109                       	smpsAlterNote       $09
00084DB2 E701                       	dc.b	smpsNoAttack, $01
00084DB4 E108                       	smpsAlterNote       $08
00084DB6 E701                       	dc.b	smpsNoAttack, $01
00084DB8 E10C                       	smpsAlterNote       $0C
00084DBA E701                       	dc.b	smpsNoAttack, $01
00084DBC E112                       	smpsAlterNote       $12
00084DBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DC2 E10F                       	smpsAlterNote       $0F
00084DC4 E701                       	dc.b	smpsNoAttack, $01
00084DC6 E109                       	smpsAlterNote       $09
00084DC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DCC E10F                       	smpsAlterNote       $0F
00084DCE E701                       	dc.b	smpsNoAttack, $01
00084DD0 E112                       	smpsAlterNote       $12
00084DD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DD6 E10C                       	smpsAlterNote       $0C
00084DD8 E701                       	dc.b	smpsNoAttack, $01
00084DDA E108                       	smpsAlterNote       $08
00084DDC E701                       	dc.b	smpsNoAttack, $01
00084DDE E109                       	smpsAlterNote       $09
00084DE0 E701                       	dc.b	smpsNoAttack, $01
00084DE2 E10F                       	smpsAlterNote       $0F
00084DE4 E701                       	dc.b	smpsNoAttack, $01
00084DE6 E113                       	smpsAlterNote       $13
00084DE8 E701                       	dc.b	smpsNoAttack, $01
00084DEA E10F                       	smpsAlterNote       $0F
00084DEC E701                       	dc.b	smpsNoAttack, $01
00084DEE E10C                       	smpsAlterNote       $0C
00084DF0 E701                       	dc.b	smpsNoAttack, $01
00084DF2 E108                       	smpsAlterNote       $08
00084DF4 E701                       	dc.b	smpsNoAttack, $01
00084DF6 E109                       	smpsAlterNote       $09
00084DF8 8001                       	dc.b	nRst, $01
00084DFA E10C                       	smpsAlterNote       $0C
00084DFC B50A                       	dc.b	nE4, $0A
00084DFE E10D                       	smpsAlterNote       $0D
00084E00 B60D                       	dc.b	nF4, $0D
00084E02 E10A                       	smpsAlterNote       $0A
00084E04 E701                       	dc.b	smpsNoAttack, $01
00084E06 E106                       	smpsAlterNote       $06
00084E08 E701                       	dc.b	smpsNoAttack, $01
00084E0A E107                       	smpsAlterNote       $07
00084E0C E701                       	dc.b	smpsNoAttack, $01
00084E0E E10D                       	smpsAlterNote       $0D
00084E10 E701                       	dc.b	smpsNoAttack, $01
00084E12 E111                       	smpsAlterNote       $11
00084E14 E701                       	dc.b	smpsNoAttack, $01
00084E16 E10D                       	smpsAlterNote       $0D
00084E18 E701                       	dc.b	smpsNoAttack, $01
00084E1A E10A                       	smpsAlterNote       $0A
00084E1C E701                       	dc.b	smpsNoAttack, $01
00084E1E E106                       	smpsAlterNote       $06
00084E20 E701                       	dc.b	smpsNoAttack, $01
00084E22 E10A                       	smpsAlterNote       $0A
00084E24 E701                       	dc.b	smpsNoAttack, $01
00084E26 E110                       	smpsAlterNote       $10
00084E28 E701                       	dc.b	smpsNoAttack, $01
00084E2A E111                       	smpsAlterNote       $11
00084E2C E701                       	dc.b	smpsNoAttack, $01
00084E2E E10D                       	smpsAlterNote       $0D
00084E30 B80D                       	dc.b	nG4, $0D
00084E32 E10A                       	smpsAlterNote       $0A
00084E34 E701                       	dc.b	smpsNoAttack, $01
00084E36 E106                       	smpsAlterNote       $06
00084E38 E701                       	dc.b	smpsNoAttack, $01
00084E3A E107                       	smpsAlterNote       $07
00084E3C E701                       	dc.b	smpsNoAttack, $01
00084E3E E10D                       	smpsAlterNote       $0D
00084E40 E701                       	dc.b	smpsNoAttack, $01
00084E42 E111                       	smpsAlterNote       $11
00084E44 E701                       	dc.b	smpsNoAttack, $01
00084E46 E10D                       	smpsAlterNote       $0D
00084E48 E701                       	dc.b	smpsNoAttack, $01
00084E4A E10A                       	smpsAlterNote       $0A
00084E4C E701                       	dc.b	smpsNoAttack, $01
00084E4E E106                       	smpsAlterNote       $06
00084E50 E701                       	dc.b	smpsNoAttack, $01
00084E52 E10A                       	smpsAlterNote       $0A
00084E54 E701                       	dc.b	smpsNoAttack, $01
00084E56 E110                       	smpsAlterNote       $10
00084E58 E701                       	dc.b	smpsNoAttack, $01
00084E5A E111                       	smpsAlterNote       $11
00084E5C E701                       	dc.b	smpsNoAttack, $01
00084E5E E10D                       	smpsAlterNote       $0D
00084E60 E701                       	dc.b	smpsNoAttack, $01
00084E62 E107                       	smpsAlterNote       $07
00084E64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E68 E10A                       	smpsAlterNote       $0A
00084E6A E701                       	dc.b	smpsNoAttack, $01
00084E6C E110                       	smpsAlterNote       $10
00084E6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E72 E10D                       	smpsAlterNote       $0D
00084E74 8001                       	dc.b	nRst, $01
00084E76 E10F                       	smpsAlterNote       $0F
00084E78 BA0D                       	dc.b	nA4, $0D
00084E7A E10C                       	smpsAlterNote       $0C
00084E7C E701                       	dc.b	smpsNoAttack, $01
00084E7E E108                       	smpsAlterNote       $08
00084E80 E701                       	dc.b	smpsNoAttack, $01
00084E82 E10C                       	smpsAlterNote       $0C
00084E84 E701                       	dc.b	smpsNoAttack, $01
00084E86 E112                       	smpsAlterNote       $12
00084E88 E701                       	dc.b	smpsNoAttack, $01
00084E8A E113                       	smpsAlterNote       $13
00084E8C E701                       	dc.b	smpsNoAttack, $01
00084E8E E10F                       	smpsAlterNote       $0F
00084E90 E701                       	dc.b	smpsNoAttack, $01
00084E92 E109                       	smpsAlterNote       $09
00084E94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E98 E10C                       	smpsAlterNote       $0C
00084E9A E701                       	dc.b	smpsNoAttack, $01
00084E9C E112                       	smpsAlterNote       $12
00084E9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084EA2 E10C                       	smpsAlterNote       $0C
00084EA4 E701                       	dc.b	smpsNoAttack, $01
00084EA6 E109                       	smpsAlterNote       $09
00084EA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084EAC E10F                       	smpsAlterNote       $0F
00084EAE E701                       	dc.b	smpsNoAttack, $01
00084EB0 E113                       	smpsAlterNote       $13
00084EB2 E701                       	dc.b	smpsNoAttack, $01
00084EB4 E112                       	smpsAlterNote       $12
00084EB6 E701                       	dc.b	smpsNoAttack, $01
00084EB8 E10C                       	smpsAlterNote       $0C
00084EBA E701                       	dc.b	smpsNoAttack, $01
00084EBC E108                       	smpsAlterNote       $08
00084EBE E701                       	dc.b	smpsNoAttack, $01
00084EC0 E10C                       	smpsAlterNote       $0C
00084EC2 E701                       	dc.b	smpsNoAttack, $01
00084EC4 E10F                       	smpsAlterNote       $0F
00084EC6 E701                       	dc.b	smpsNoAttack, $01
00084EC8 E113                       	smpsAlterNote       $13
00084ECA E701                       	dc.b	smpsNoAttack, $01
00084ECC E10F                       	smpsAlterNote       $0F
00084ECE E701                       	dc.b	smpsNoAttack, $01
00084ED0 E109                       	smpsAlterNote       $09
00084ED2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084ED6 E10D                       	smpsAlterNote       $0D
00084ED8 B609 8001                  	dc.b	nF4, $09, nRst, $01
00084EDC E10C                       	smpsAlterNote       $0C
00084EDE B506 8001                  	dc.b	nE4, $06, nRst, $01
00084EE2 E10B                       	smpsAlterNote       $0B
00084EE4 B30D                       	dc.b	nD4, $0D
00084EE6 E10C                       	smpsAlterNote       $0C
00084EE8 B503 8001                  	dc.b	nE4, $03, nRst, $01
00084EEC E10D                       	smpsAlterNote       $0D
00084EEE B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00084EF6 E109                       	smpsAlterNote       $09
00084EF8 E701                       	dc.b	smpsNoAttack, $01
00084EFA E108                       	smpsAlterNote       $08
00084EFC E701                       	dc.b	smpsNoAttack, $01
00084EFE E10C                       	smpsAlterNote       $0C
00084F00 E701                       	dc.b	smpsNoAttack, $01
00084F02 E112                       	smpsAlterNote       $12
00084F04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F08 E10F                       	smpsAlterNote       $0F
00084F0A E701                       	dc.b	smpsNoAttack, $01
00084F0C E109                       	smpsAlterNote       $09
00084F0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F12 E10F                       	smpsAlterNote       $0F
00084F14 E701                       	dc.b	smpsNoAttack, $01
00084F16 E112                       	smpsAlterNote       $12
00084F18 E701                       	dc.b	smpsNoAttack, $01
00084F1A E113                       	smpsAlterNote       $13
00084F1C 8001                       	dc.b	nRst, $01
00084F1E E10D                       	smpsAlterNote       $0D
00084F20 C20D                       	dc.b	nF5, $0D
00084F22 E107                       	smpsAlterNote       $07
00084F24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F28 E10A                       	smpsAlterNote       $0A
00084F2A E701                       	dc.b	smpsNoAttack, $01
00084F2C E110                       	smpsAlterNote       $10
00084F2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F32 E10A                       	smpsAlterNote       $0A
00084F34 E701                       	dc.b	smpsNoAttack, $01
00084F36 E107                       	smpsAlterNote       $07
00084F38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F3C E10D                       	smpsAlterNote       $0D
00084F3E E701                       	dc.b	smpsNoAttack, $01
00084F40 E111                       	smpsAlterNote       $11
00084F42 E701                       	dc.b	smpsNoAttack, $01
00084F44 E110                       	smpsAlterNote       $10
00084F46 E701                       	dc.b	smpsNoAttack, $01
00084F48 E10A                       	smpsAlterNote       $0A
00084F4A E701                       	dc.b	smpsNoAttack, $01
00084F4C E106                       	smpsAlterNote       $06
00084F4E E701                       	dc.b	smpsNoAttack, $01
00084F50 E10A                       	smpsAlterNote       $0A
00084F52 E701                       	dc.b	smpsNoAttack, $01
00084F54 E10D                       	smpsAlterNote       $0D
00084F56 E701                       	dc.b	smpsNoAttack, $01
00084F58 E111                       	smpsAlterNote       $11
00084F5A E701                       	dc.b	smpsNoAttack, $01
00084F5C E10D                       	smpsAlterNote       $0D
00084F5E E701                       	dc.b	smpsNoAttack, $01
00084F60 E107                       	smpsAlterNote       $07
00084F62 E701                       	dc.b	smpsNoAttack, $01
00084F64 E106                       	smpsAlterNote       $06
00084F66 E701                       	dc.b	smpsNoAttack, $01
00084F68 E10A                       	smpsAlterNote       $0A
00084F6A E701                       	dc.b	smpsNoAttack, $01
00084F6C E110                       	smpsAlterNote       $10
00084F6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F72 E10D                       	smpsAlterNote       $0D
00084F74 E701                       	dc.b	smpsNoAttack, $01
00084F76 E107                       	smpsAlterNote       $07
00084F78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F7C E10D                       	smpsAlterNote       $0D
00084F7E E701                       	dc.b	smpsNoAttack, $01
00084F80 E110                       	smpsAlterNote       $10
00084F82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F86 E10A                       	smpsAlterNote       $0A
00084F88 E701                       	dc.b	smpsNoAttack, $01
00084F8A E106                       	smpsAlterNote       $06
00084F8C E701                       	dc.b	smpsNoAttack, $01
00084F8E E107                       	smpsAlterNote       $07
00084F90 E701                       	dc.b	smpsNoAttack, $01
00084F92 E10D                       	smpsAlterNote       $0D
00084F94 E701                       	dc.b	smpsNoAttack, $01
00084F96 E111                       	smpsAlterNote       $11
00084F98 E701                       	dc.b	smpsNoAttack, $01
00084F9A E10D                       	smpsAlterNote       $0D
00084F9C E701                       	dc.b	smpsNoAttack, $01
00084F9E E10A                       	smpsAlterNote       $0A
00084FA0 E701                       	dc.b	smpsNoAttack, $01
00084FA2 E106                       	smpsAlterNote       $06
00084FA4 E701                       	dc.b	smpsNoAttack, $01
00084FA6 E10A                       	smpsAlterNote       $0A
00084FA8 E701                       	dc.b	smpsNoAttack, $01
00084FAA E110                       	smpsAlterNote       $10
00084FAC E701                       	dc.b	smpsNoAttack, $01
00084FAE E111                       	smpsAlterNote       $11
00084FB0 E701                       	dc.b	smpsNoAttack, $01
00084FB2 E10D                       	smpsAlterNote       $0D
00084FB4 E701                       	dc.b	smpsNoAttack, $01
00084FB6 E107                       	smpsAlterNote       $07
00084FB8 E701                       	dc.b	smpsNoAttack, $01
00084FBA E10D                       	smpsAlterNote       $0D
00084FBC C207                       	dc.b	nF5, $07
00084FBE E10C                       	smpsAlterNote       $0C
00084FC0 C10D                       	dc.b	nE5, $0D
00084FC2 E109                       	smpsAlterNote       $09
00084FC4 E701                       	dc.b	smpsNoAttack, $01
00084FC6 E106                       	smpsAlterNote       $06
00084FC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FCC E10C                       	smpsAlterNote       $0C
00084FCE E701                       	dc.b	smpsNoAttack, $01
00084FD0 E110                       	smpsAlterNote       $10
00084FD2 E701                       	dc.b	smpsNoAttack, $01
00084FD4 E10F                       	smpsAlterNote       $0F
00084FD6 E701                       	dc.b	smpsNoAttack, $01
00084FD8 E109                       	smpsAlterNote       $09
00084FDA E701                       	dc.b	smpsNoAttack, $01
00084FDC E105                       	smpsAlterNote       $05
00084FDE E701                       	dc.b	smpsNoAttack, $01
00084FE0 E109                       	smpsAlterNote       $09
00084FE2 E701                       	dc.b	smpsNoAttack, $01
00084FE4 E10C                       	smpsAlterNote       $0C
00084FE6 E701                       	dc.b	smpsNoAttack, $01
00084FE8 E110                       	smpsAlterNote       $10
00084FEA E701                       	dc.b	smpsNoAttack, $01
00084FEC E10B                       	smpsAlterNote       $0B
00084FEE BF0D                       	dc.b	nD5, $0D
00084FF0 E108                       	smpsAlterNote       $08
00084FF2 E701                       	dc.b	smpsNoAttack, $01
00084FF4 E105                       	smpsAlterNote       $05
00084FF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FFA E10B                       	smpsAlterNote       $0B
00084FFC E701                       	dc.b	smpsNoAttack, $01
00084FFE E10F                       	smpsAlterNote       $0F
00085000 E701                       	dc.b	smpsNoAttack, $01
00085002 E10E                       	smpsAlterNote       $0E
00085004 E701                       	dc.b	smpsNoAttack, $01
00085006 E108                       	smpsAlterNote       $08
00085008 E701                       	dc.b	smpsNoAttack, $01
0008500A E104                       	smpsAlterNote       $04
0008500C E701                       	dc.b	smpsNoAttack, $01
0008500E E108                       	smpsAlterNote       $08
00085010 E701                       	dc.b	smpsNoAttack, $01
00085012 E10E                       	smpsAlterNote       $0E
00085014 E701                       	dc.b	smpsNoAttack, $01
00085016 E10F                       	smpsAlterNote       $0F
00085018 E701                       	dc.b	smpsNoAttack, $01
0008501A E10B                       	smpsAlterNote       $0B
0008501C E701                       	dc.b	smpsNoAttack, $01
0008501E E105                       	smpsAlterNote       $05
00085020 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085024 E108                       	smpsAlterNote       $08
00085026 E701                       	dc.b	smpsNoAttack, $01
00085028 E10E                       	smpsAlterNote       $0E
0008502A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008502E E108                       	smpsAlterNote       $08
00085030 E701                       	dc.b	smpsNoAttack, $01
00085032 E105                       	smpsAlterNote       $05
00085034 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085038 E10B                       	smpsAlterNote       $0B
0008503A E701                       	dc.b	smpsNoAttack, $01
0008503C E10F                       	smpsAlterNote       $0F
0008503E E701                       	dc.b	smpsNoAttack, $01
00085040 E10E                       	smpsAlterNote       $0E
00085042 E701                       	dc.b	smpsNoAttack, $01
00085044 E108                       	smpsAlterNote       $08
00085046 E701                       	dc.b	smpsNoAttack, $01
00085048 E104                       	smpsAlterNote       $04
0008504A E701                       	dc.b	smpsNoAttack, $01
0008504C E108                       	smpsAlterNote       $08
0008504E E701                       	dc.b	smpsNoAttack, $01
00085050 E10B                       	smpsAlterNote       $0B
00085052 E701                       	dc.b	smpsNoAttack, $01
00085054 E10F                       	smpsAlterNote       $0F
00085056 E701                       	dc.b	smpsNoAttack, $01
00085058 E10B                       	smpsAlterNote       $0B
0008505A E701                       	dc.b	smpsNoAttack, $01
0008505C E105                       	smpsAlterNote       $05
0008505E E701                       	dc.b	smpsNoAttack, $01
00085060 E104                       	smpsAlterNote       $04
00085062 E701                       	dc.b	smpsNoAttack, $01
00085064 E108                       	smpsAlterNote       $08
00085066 E701                       	dc.b	smpsNoAttack, $01
00085068 E10E                       	smpsAlterNote       $0E
0008506A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008506E E10B                       	smpsAlterNote       $0B
00085070 E701                       	dc.b	smpsNoAttack, $01
00085072 E105                       	smpsAlterNote       $05
00085074 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085078 E10B                       	smpsAlterNote       $0B
0008507A E701                       	dc.b	smpsNoAttack, $01
0008507C E10E                       	smpsAlterNote       $0E
0008507E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085082 E108                       	smpsAlterNote       $08
00085084 E701                       	dc.b	smpsNoAttack, $01
00085086 E105                       	smpsAlterNote       $05
00085088 8001                       	dc.b	nRst, $01
0008508C E601                       	smpsAlterVol        $01
0008508E E10B                       	smpsAlterNote       $0B
00085090 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008509C 8004                       	dc.b	nRst, $04
000850A0 E6FF                       	smpsAlterVol        $FF
000850A2 E10D                       	smpsAlterNote       $0D
000850A4 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
000850AC E10C                       	smpsAlterNote       $0C
000850AE E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
000850B3 E10D                       	smpsAlterNote       $0D
000850B5 B60D                       	dc.b	nF4, $0D
000850B7 E10A                       	smpsAlterNote       $0A
000850B9 E701                       	dc.b	smpsNoAttack, $01
000850BB E106                       	smpsAlterNote       $06
000850BD E701                       	dc.b	smpsNoAttack, $01
000850BF E10A                       	smpsAlterNote       $0A
000850C1 E701                       	dc.b	smpsNoAttack, $01
000850C3 E110                       	smpsAlterNote       $10
000850C5 E701                       	dc.b	smpsNoAttack, $01
000850C7 E111                       	smpsAlterNote       $11
000850C9 E701                       	dc.b	smpsNoAttack, $01
000850CB E10D                       	smpsAlterNote       $0D
000850CD E701                       	dc.b	smpsNoAttack, $01
000850CF E107                       	smpsAlterNote       $07
000850D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850D5 E10A                       	smpsAlterNote       $0A
000850D7 E701                       	dc.b	smpsNoAttack, $01
000850D9 E110                       	smpsAlterNote       $10
000850DB E701                       	dc.b	smpsNoAttack, $01
000850DD E111                       	smpsAlterNote       $11
000850DF 8001                       	dc.b	nRst, $01
000850E1 E10D                       	smpsAlterNote       $0D
000850E3 B80D                       	dc.b	nG4, $0D
000850E5 E10A                       	smpsAlterNote       $0A
000850E7 E701                       	dc.b	smpsNoAttack, $01
000850E9 E106                       	smpsAlterNote       $06
000850EB E701                       	dc.b	smpsNoAttack, $01
000850ED E10A                       	smpsAlterNote       $0A
000850EF E701                       	dc.b	smpsNoAttack, $01
000850F1 E110                       	smpsAlterNote       $10
000850F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850F7 E10D                       	smpsAlterNote       $0D
000850F9 E701                       	dc.b	smpsNoAttack, $01
000850FB E107                       	smpsAlterNote       $07
000850FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085101 E10D                       	smpsAlterNote       $0D
00085103 E701                       	dc.b	smpsNoAttack, $01
00085105 E110                       	smpsAlterNote       $10
00085107 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008510B E10A                       	smpsAlterNote       $0A
0008510D E701                       	dc.b	smpsNoAttack, $01
0008510F E106                       	smpsAlterNote       $06
00085111 E701                       	dc.b	smpsNoAttack, $01
00085113 E107                       	smpsAlterNote       $07
00085115 E701                       	dc.b	smpsNoAttack, $01
00085117 E10D                       	smpsAlterNote       $0D
00085119 E701                       	dc.b	smpsNoAttack, $01
0008511B E111                       	smpsAlterNote       $11
0008511D E701                       	dc.b	smpsNoAttack, $01
0008511F E10D                       	smpsAlterNote       $0D
00085121 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085125 E10F                       	smpsAlterNote       $0F
00085127 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008512B E110                       	smpsAlterNote       $10
0008512D BB03                       	dc.b	nBb4, $03
0008512F E10F                       	smpsAlterNote       $0F
00085131 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00085137 E110                       	smpsAlterNote       $10
00085139 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008513D E10F                       	smpsAlterNote       $0F
0008513F C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00085145 E110                       	smpsAlterNote       $10
00085147 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008514B E10F                       	smpsAlterNote       $0F
0008514D D20D                       	dc.b	nA6, $0D
0008514F E10C                       	smpsAlterNote       $0C
00085151 E701                       	dc.b	smpsNoAttack, $01
00085153 E108                       	smpsAlterNote       $08
00085155 E701                       	dc.b	smpsNoAttack, $01
00085157 E10C                       	smpsAlterNote       $0C
00085159 E701                       	dc.b	smpsNoAttack, $01
0008515B E10F                       	smpsAlterNote       $0F
0008515D E701                       	dc.b	smpsNoAttack, $01
0008515F E113                       	smpsAlterNote       $13
00085161 E701                       	dc.b	smpsNoAttack, $01
00085163 E10F                       	smpsAlterNote       $0F
00085165 E701                       	dc.b	smpsNoAttack, $01
00085167 E109                       	smpsAlterNote       $09
00085169 E701                       	dc.b	smpsNoAttack, $01
0008516B E108                       	smpsAlterNote       $08
0008516D E701                       	dc.b	smpsNoAttack, $01
0008516F E10C                       	smpsAlterNote       $0C
00085171 E701                       	dc.b	smpsNoAttack, $01
00085173 E112                       	smpsAlterNote       $12
00085175 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085179 E10F                       	smpsAlterNote       $0F
0008517B E701                       	dc.b	smpsNoAttack, $01
0008517D E109                       	smpsAlterNote       $09
0008517F E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00085185 E10D                       	smpsAlterNote       $0D
00085187 CE07                       	dc.b	nF6, $07
00085189 E10C                       	smpsAlterNote       $0C
0008518B CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008518F E10D                       	smpsAlterNote       $0D
00085191 CE03                       	dc.b	nF6, $03
00085193 E10C                       	smpsAlterNote       $0C
00085195 CC0D                       	dc.b	nEb6, $0D
00085197 E109                       	smpsAlterNote       $09
00085199 E701                       	dc.b	smpsNoAttack, $01
0008519B E106                       	smpsAlterNote       $06
0008519D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851A1 E10C                       	smpsAlterNote       $0C
000851A3 E701                       	dc.b	smpsNoAttack, $01
000851A5 E110                       	smpsAlterNote       $10
000851A7 E701                       	dc.b	smpsNoAttack, $01
000851A9 E10F                       	smpsAlterNote       $0F
000851AB E701                       	dc.b	smpsNoAttack, $01
000851AD E109                       	smpsAlterNote       $09
000851AF E701                       	dc.b	smpsNoAttack, $01
000851B1 E105                       	smpsAlterNote       $05
000851B3 E701                       	dc.b	smpsNoAttack, $01
000851B5 E109                       	smpsAlterNote       $09
000851B7 E701                       	dc.b	smpsNoAttack, $01
000851B9 E10C                       	smpsAlterNote       $0C
000851BB E701                       	dc.b	smpsNoAttack, $01
000851BD E110                       	smpsAlterNote       $10
000851BF E701                       	dc.b	smpsNoAttack, $01
000851C1 E10C                       	smpsAlterNote       $0C
000851C3 E701                       	dc.b	smpsNoAttack, $01
000851C5 E106                       	smpsAlterNote       $06
000851C7 E701                       	dc.b	smpsNoAttack, $01
000851C9 E105                       	smpsAlterNote       $05
000851CB E701                       	dc.b	smpsNoAttack, $01
000851CD E109                       	smpsAlterNote       $09
000851CF E701                       	dc.b	smpsNoAttack, $01
000851D1 E10F                       	smpsAlterNote       $0F
000851D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851D7 E10C                       	smpsAlterNote       $0C
000851D9 E701                       	dc.b	smpsNoAttack, $01
000851DB E10B                       	smpsAlterNote       $0B
000851DD CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
000851E7 E10F                       	smpsAlterNote       $0F
000851E9 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000851F3 E10D                       	smpsAlterNote       $0D
000851F5 C203                       	dc.b	nF5, $03
000851F7 E10C                       	smpsAlterNote       $0C
000851F9 C103 8001                  	dc.b	nE5, $03, nRst, $01
000851FD E10D                       	smpsAlterNote       $0D
000851FF C20D                       	dc.b	nF5, $0D
00085201 E10C                       	smpsAlterNote       $0C
00085203 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00085207 E10B                       	smpsAlterNote       $0B
00085209 BF0D                       	dc.b	nD5, $0D
0008520B E108                       	smpsAlterNote       $08
0008520D E701                       	dc.b	smpsNoAttack, $01
0008520F E104                       	smpsAlterNote       $04
00085211 E701                       	dc.b	smpsNoAttack, $01
00085213 E108                       	smpsAlterNote       $08
00085215 E701                       	dc.b	smpsNoAttack, $01
00085217 E10E                       	smpsAlterNote       $0E
00085219 E701                       	dc.b	smpsNoAttack, $01
0008521B E10F                       	smpsAlterNote       $0F
0008521D E701                       	dc.b	smpsNoAttack, $01
0008521F E10B                       	smpsAlterNote       $0B
00085221 E701                       	dc.b	smpsNoAttack, $01
00085223 E105                       	smpsAlterNote       $05
00085225 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085229 E108                       	smpsAlterNote       $08
0008522B E701                       	dc.b	smpsNoAttack, $01
0008522D E10E                       	smpsAlterNote       $0E
0008522F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085233 E108                       	smpsAlterNote       $08
00085235 E701                       	dc.b	smpsNoAttack, $01
00085237 E105                       	smpsAlterNote       $05
00085239 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008523D E10B                       	smpsAlterNote       $0B
0008523F E701                       	dc.b	smpsNoAttack, $01
00085241 E10F                       	smpsAlterNote       $0F
00085243 E701                       	dc.b	smpsNoAttack, $01
00085245 E10E                       	smpsAlterNote       $0E
00085247 E701                       	dc.b	smpsNoAttack, $01
00085249 E108                       	smpsAlterNote       $08
0008524B E701                       	dc.b	smpsNoAttack, $01
0008524D E104                       	smpsAlterNote       $04
0008524F E701                       	dc.b	smpsNoAttack, $01
00085251 E108                       	smpsAlterNote       $08
00085253 E701                       	dc.b	smpsNoAttack, $01
00085255 E10B                       	smpsAlterNote       $0B
00085257 E701                       	dc.b	smpsNoAttack, $01
00085259 E10F                       	smpsAlterNote       $0F
0008525B E701                       	dc.b	smpsNoAttack, $01
0008525D E10B                       	smpsAlterNote       $0B
0008525F E701                       	dc.b	smpsNoAttack, $01
00085261 E105                       	smpsAlterNote       $05
00085263 E701                       	dc.b	smpsNoAttack, $01
00085265 E104                       	smpsAlterNote       $04
00085267 E701                       	dc.b	smpsNoAttack, $01
00085269 E108                       	smpsAlterNote       $08
0008526B E701                       	dc.b	smpsNoAttack, $01
0008526D E10E                       	smpsAlterNote       $0E
0008526F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085273 E10B                       	smpsAlterNote       $0B
00085275 E701                       	dc.b	smpsNoAttack, $01
00085277 E105                       	smpsAlterNote       $05
00085279 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008527D E10B                       	smpsAlterNote       $0B
0008527F E701                       	dc.b	smpsNoAttack, $01
00085281 E10E                       	smpsAlterNote       $0E
00085283 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085287 E108                       	smpsAlterNote       $08
00085289 E701                       	dc.b	smpsNoAttack, $01
0008528B E104                       	smpsAlterNote       $04
0008528D E701                       	dc.b	smpsNoAttack, $01
0008528F E105                       	smpsAlterNote       $05
00085291 E701                       	dc.b	smpsNoAttack, $01
00085293 E10B                       	smpsAlterNote       $0B
00085295 E701                       	dc.b	smpsNoAttack, $01
00085297 E10F                       	smpsAlterNote       $0F
00085299 E701                       	dc.b	smpsNoAttack, $01
0008529B E10B                       	smpsAlterNote       $0B
0008529D E701                       	dc.b	smpsNoAttack, $01
0008529F E108                       	smpsAlterNote       $08
000852A1 E701                       	dc.b	smpsNoAttack, $01
000852A3 E104                       	smpsAlterNote       $04
000852A5 E701                       	dc.b	smpsNoAttack, $01
000852A7 E108                       	smpsAlterNote       $08
000852A9 E701                       	dc.b	smpsNoAttack, $01
000852AB E10E                       	smpsAlterNote       $0E
000852AD E701                       	dc.b	smpsNoAttack, $01
000852AF E10F                       	smpsAlterNote       $0F
000852B1 E701                       	dc.b	smpsNoAttack, $01
000852B3 E10B                       	smpsAlterNote       $0B
000852B5 E701                       	dc.b	smpsNoAttack, $01
000852B7 E105                       	smpsAlterNote       $05
000852B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852BD E108                       	smpsAlterNote       $08
000852BF E701                       	dc.b	smpsNoAttack, $01
000852C1 E10E                       	smpsAlterNote       $0E
000852C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852C7 E108                       	smpsAlterNote       $08
000852C9 E701                       	dc.b	smpsNoAttack, $01
000852CB E105                       	smpsAlterNote       $05
000852CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852D1 E10B                       	smpsAlterNote       $0B
000852D3 E701                       	dc.b	smpsNoAttack, $01
000852D5 E10F                       	smpsAlterNote       $0F
000852D7 E701                       	dc.b	smpsNoAttack, $01
000852D9 E10E                       	smpsAlterNote       $0E
000852DB E701                       	dc.b	smpsNoAttack, $01
000852DD E108                       	smpsAlterNote       $08
000852DF E701                       	dc.b	smpsNoAttack, $01
000852E1 E104                       	smpsAlterNote       $04
000852E3 E701                       	dc.b	smpsNoAttack, $01
000852E5 E108                       	smpsAlterNote       $08
000852E7 E701                       	dc.b	smpsNoAttack, $01
000852E9 E10B                       	smpsAlterNote       $0B
000852EB E701                       	dc.b	smpsNoAttack, $01
000852ED E10F                       	smpsAlterNote       $0F
000852EF E701                       	dc.b	smpsNoAttack, $01
000852F1 E10B                       	smpsAlterNote       $0B
000852F3 E701                       	dc.b	smpsNoAttack, $01
000852F5 E105                       	smpsAlterNote       $05
000852F7 E701                       	dc.b	smpsNoAttack, $01
000852F9 E104                       	smpsAlterNote       $04
000852FB E701                       	dc.b	smpsNoAttack, $01
000852FD E105                       	smpsAlterNote       $05
000852FF 8001                       	dc.b	nRst, $01
00085301 E10D                       	smpsAlterNote       $0D
00085303 C20D                       	dc.b	nF5, $0D
00085305 E107                       	smpsAlterNote       $07
00085307 E701                       	dc.b	smpsNoAttack, $01
00085309 E106                       	smpsAlterNote       $06
0008530B E701                       	dc.b	smpsNoAttack, $01
0008530D E10A                       	smpsAlterNote       $0A
0008530F E701                       	dc.b	smpsNoAttack, $01
00085311 E110                       	smpsAlterNote       $10
00085313 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085317 E10D                       	smpsAlterNote       $0D
00085319 E701                       	dc.b	smpsNoAttack, $01
0008531B E107                       	smpsAlterNote       $07
0008531D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085321 E10D                       	smpsAlterNote       $0D
00085323 E701                       	dc.b	smpsNoAttack, $01
00085325 E110                       	smpsAlterNote       $10
00085327 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008532B E10A                       	smpsAlterNote       $0A
0008532D E701                       	dc.b	smpsNoAttack, $01
0008532F E106                       	smpsAlterNote       $06
00085331 E701                       	dc.b	smpsNoAttack, $01
00085333 E107                       	smpsAlterNote       $07
00085335 E701                       	dc.b	smpsNoAttack, $01
00085337 E10D                       	smpsAlterNote       $0D
00085339 E701                       	dc.b	smpsNoAttack, $01
0008533B E111                       	smpsAlterNote       $11
0008533D E701                       	dc.b	smpsNoAttack, $01
0008533F E10D                       	smpsAlterNote       $0D
00085341 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085345 E10C                       	smpsAlterNote       $0C
00085347 C10D                       	dc.b	nE5, $0D
00085349 E10D                       	smpsAlterNote       $0D
0008534B C20A                       	dc.b	nF5, $0A
0008534D E10C                       	smpsAlterNote       $0C
0008534F C10E                       	dc.b	nE5, $0E
00085351 E106                       	smpsAlterNote       $06
00085353 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085357 E10C                       	smpsAlterNote       $0C
00085359 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008535D E10B                       	smpsAlterNote       $0B
0008535F BF0D                       	dc.b	nD5, $0D
00085361 E10C                       	smpsAlterNote       $0C
00085363 C107                       	dc.b	nE5, $07
00085365 E10D                       	smpsAlterNote       $0D
00085367 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00085371 E110                       	smpsAlterNote       $10
00085373 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00085379 E10F                       	smpsAlterNote       $0F
0008537B C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00085383 E10D                       	smpsAlterNote       $0D
00085385 D003                       	dc.b	nG6, $03
00085389 E0C0                       	smpsPan             panCenter, $00
0008538B E6FF                       	smpsAlterVol        $FF
0008538D AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00085399 8001                       	dc.b	nRst, $01
0008539B E10C                       	smpsAlterNote       $0C
0008539D A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
000853A7 E604                       	smpsAlterVol        $04
000853A9 E10B                       	smpsAlterNote       $0B
000853AB B306 8001                  	dc.b	nD4, $06, nRst, $01
000853AF E10F                       	smpsAlterNote       $0F
000853B1 AE03                       	dc.b	nA3, $03
000853B3 E10D                       	smpsAlterNote       $0D
000853B5 B603 8001                  	dc.b	nF4, $03, nRst, $01
000853B9 E10C                       	smpsAlterNote       $0C
000853BB B506 8001                  	dc.b	nE4, $06, nRst, $01
000853BF E10B                       	smpsAlterNote       $0B
000853C1 B302 8001                  	dc.b	nD4, $02, nRst, $01
000853C5 E10A                       	smpsAlterNote       $0A
000853C7 B103                       	dc.b	nC4, $03
000853C9 E110                       	smpsAlterNote       $10
000853CB AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000853CF E10F                       	smpsAlterNote       $0F
000853D1 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
000853D5 E080                       	smpsPan             panLeft, $00
000853D7 01                         	dc.b	$01
000853DA E6FB                       	smpsAlterVol        $FB
000853DC E1E4                       	smpsAlterNote       $E4
000853DE C501                       	dc.b	nAb5, $01
000853E0 E1F4                       	smpsAlterNote       $F4
000853E2 E701                       	dc.b	smpsNoAttack, $01
000853E4 E104                       	smpsAlterNote       $04
000853E6 E701                       	dc.b	smpsNoAttack, $01
000853E8 E114                       	smpsAlterNote       $14
000853EA E701                       	dc.b	smpsNoAttack, $01
000853EC E11C                       	smpsAlterNote       $1C
000853EE E701                       	dc.b	smpsNoAttack, $01
000853F0 E1EF                       	smpsAlterNote       $EF
000853F2 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000853F5 E1FF                       	smpsAlterNote       $FF
000853F7 E701                       	dc.b	smpsNoAttack, $01
000853F9 E10F                       	smpsAlterNote       $0F
000853FB C606                       	dc.b	nA5, $06
000853FD E109                       	smpsAlterNote       $09
000853FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085403 E10F                       	smpsAlterNote       $0F
00085405 E701                       	dc.b	smpsNoAttack, $01
00085407 E112                       	smpsAlterNote       $12
00085409 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008540D E10C                       	smpsAlterNote       $0C
0008540F E701                       	dc.b	smpsNoAttack, $01
00085411 E108                       	smpsAlterNote       $08
00085413 E701                       	dc.b	smpsNoAttack, $01
00085415 E109                       	smpsAlterNote       $09
00085417 E701                       	dc.b	smpsNoAttack, $01
00085419 E10F                       	smpsAlterNote       $0F
0008541B E701                       	dc.b	smpsNoAttack, $01
0008541D E113                       	smpsAlterNote       $13
0008541F E701                       	dc.b	smpsNoAttack, $01
00085421 E10F                       	smpsAlterNote       $0F
00085423 E701                       	dc.b	smpsNoAttack, $01
00085425 E10C                       	smpsAlterNote       $0C
00085427 E701                       	dc.b	smpsNoAttack, $01
00085429 E108                       	smpsAlterNote       $08
0008542B E701                       	dc.b	smpsNoAttack, $01
0008542D E10C                       	smpsAlterNote       $0C
0008542F E701                       	dc.b	smpsNoAttack, $01
00085431 E112                       	smpsAlterNote       $12
00085433 E701                       	dc.b	smpsNoAttack, $01
00085435 E113                       	smpsAlterNote       $13
00085437 E701                       	dc.b	smpsNoAttack, $01
00085439 E10F                       	smpsAlterNote       $0F
0008543B E701                       	dc.b	smpsNoAttack, $01
0008543D E109                       	smpsAlterNote       $09
0008543F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085443 E10C                       	smpsAlterNote       $0C
00085445 E701                       	dc.b	smpsNoAttack, $01
00085447 E112                       	smpsAlterNote       $12
00085449 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008544D E10C                       	smpsAlterNote       $0C
0008544F E701                       	dc.b	smpsNoAttack, $01
00085451 E109                       	smpsAlterNote       $09
00085453 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085457 E10F                       	smpsAlterNote       $0F
00085459 E701                       	dc.b	smpsNoAttack, $01
0008545B E113                       	smpsAlterNote       $13
0008545D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085461 E10D                       	smpsAlterNote       $0D
00085463 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00085469 E10C                       	smpsAlterNote       $0C
0008546B C102 8001                  	dc.b	nE5, $02, nRst, $01
0008546F E10D                       	smpsAlterNote       $0D
00085471 C201 8001                  	dc.b	nF5, $01, nRst, $01
00085475 E10C                       	smpsAlterNote       $0C
00085477 C102                       	dc.b	nE5, $02
00085479 E10B                       	smpsAlterNote       $0B
0008547B BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008547F E10C                       	smpsAlterNote       $0C
00085481 C101 8001                  	dc.b	nE5, $01, nRst, $01
00085485 E10B                       	smpsAlterNote       $0B
00085487 BF02                       	dc.b	nD5, $02
00085489 E10A                       	smpsAlterNote       $0A
0008548B BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00085495 E110                       	smpsAlterNote       $10
00085497 BB02                       	dc.b	nBb4, $02
00085499 E10A                       	smpsAlterNote       $0A
0008549B BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008549F E110                       	smpsAlterNote       $10
000854A1 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000854A5 E10F                       	smpsAlterNote       $0F
000854A7 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000854AB E110                       	smpsAlterNote       $10
000854AD BB02                       	dc.b	nBb4, $02
000854AF E10F                       	smpsAlterNote       $0F
000854B1 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000854BB E10C                       	smpsAlterNote       $0C
000854BD B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
000854C5 E10B                       	smpsAlterNote       $0B
000854C7 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
000854CB E10F                       	smpsAlterNote       $0F
000854CD BA02                       	dc.b	nA4, $02
000854D1 E0C0                       	smpsPan             panCenter, $00
000854D3 E601                       	smpsAlterVol        $01
000854D5 E109                       	smpsAlterNote       $09
000854D7 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
000854E3 E108                       	smpsAlterNote       $08
000854E5 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
000854EB E107                       	smpsAlterNote       $07
000854ED B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
000854F3 E109                       	smpsAlterNote       $09
000854F5 B603 8001                  	dc.b	nF4, $03, nRst, $01
000854F9 E108                       	smpsAlterNote       $08
000854FB B506 8001                  	dc.b	nE4, $06, nRst, $01
000854FF E107                       	smpsAlterNote       $07
00085501 B302 8001                  	dc.b	nD4, $02, nRst, $01
00085505 E106                       	smpsAlterNote       $06
00085507 B103                       	dc.b	nC4, $03
00085509 E10C                       	smpsAlterNote       $0C
0008550B AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00085511 E080                       	smpsPan             panLeft, $00
00085513 07                         	dc.b	$07
00085514 E6FE                       	smpsAlterVol        $FE
00085516 E10B                       	smpsAlterNote       $0B
00085518 B20D                       	dc.b	nCs4, $0D
0008551A E105                       	smpsAlterNote       $05
0008551C E701                       	dc.b	smpsNoAttack, $01
0008551E E104                       	smpsAlterNote       $04
00085520 E701                       	dc.b	smpsNoAttack, $01
00085522 E108                       	smpsAlterNote       $08
00085524 E701                       	dc.b	smpsNoAttack, $01
00085526 E10E                       	smpsAlterNote       $0E
00085528 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008552C E10B                       	smpsAlterNote       $0B
0008552E E701                       	dc.b	smpsNoAttack, $01
00085530 E105                       	smpsAlterNote       $05
00085532 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085536 E10B                       	smpsAlterNote       $0B
00085538 E701                       	dc.b	smpsNoAttack, $01
0008553A E10E                       	smpsAlterNote       $0E
0008553C E701                       	dc.b	smpsNoAttack, $01
0008553E E10F                       	smpsAlterNote       $0F
00085540 8001                       	dc.b	nRst, $01
00085542 E10B                       	smpsAlterNote       $0B
00085544 B30D                       	dc.b	nD4, $0D
00085546 E105                       	smpsAlterNote       $05
00085548 E701                       	dc.b	smpsNoAttack, $01
0008554A E104                       	smpsAlterNote       $04
0008554C E701                       	dc.b	smpsNoAttack, $01
0008554E E108                       	smpsAlterNote       $08
00085550 E701                       	dc.b	smpsNoAttack, $01
00085552 E10E                       	smpsAlterNote       $0E
00085554 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085558 E10B                       	smpsAlterNote       $0B
0008555A E701                       	dc.b	smpsNoAttack, $01
0008555C E105                       	smpsAlterNote       $05
0008555E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085562 E10B                       	smpsAlterNote       $0B
00085564 E701                       	dc.b	smpsNoAttack, $01
00085566 E10E                       	smpsAlterNote       $0E
00085568 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008556C E108                       	smpsAlterNote       $08
0008556E E701                       	dc.b	smpsNoAttack, $01
00085570 E104                       	smpsAlterNote       $04
00085572 E701                       	dc.b	smpsNoAttack, $01
00085574 E105                       	smpsAlterNote       $05
00085576 E701                       	dc.b	smpsNoAttack, $01
00085578 E10B                       	smpsAlterNote       $0B
0008557A E701                       	dc.b	smpsNoAttack, $01
0008557C E10F                       	smpsAlterNote       $0F
0008557E E701                       	dc.b	smpsNoAttack, $01
00085580 E10B                       	smpsAlterNote       $0B
00085582 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085586 E10C                       	smpsAlterNote       $0C
00085588 B50D                       	dc.b	nE4, $0D
0008558A E106                       	smpsAlterNote       $06
0008558C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085590 E10C                       	smpsAlterNote       $0C
00085592 E701                       	dc.b	smpsNoAttack, $01
00085594 E10F                       	smpsAlterNote       $0F
00085596 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008559A E109                       	smpsAlterNote       $09
0008559C E701                       	dc.b	smpsNoAttack, $01
0008559E E105                       	smpsAlterNote       $05
000855A0 E701                       	dc.b	smpsNoAttack, $01
000855A2 E106                       	smpsAlterNote       $06
000855A4 E701                       	dc.b	smpsNoAttack, $01
000855A6 E10C                       	smpsAlterNote       $0C
000855A8 E701                       	dc.b	smpsNoAttack, $01
000855AA E110                       	smpsAlterNote       $10
000855AC E701                       	dc.b	smpsNoAttack, $01
000855AE E10B                       	smpsAlterNote       $0B
000855B0 B30E                       	dc.b	nD4, $0E
000855B2 E105                       	smpsAlterNote       $05
000855B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855B8 E10B                       	smpsAlterNote       $0B
000855BA E701                       	dc.b	smpsNoAttack, $01
000855BC E10E                       	smpsAlterNote       $0E
000855BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855C2 E108                       	smpsAlterNote       $08
000855C4 E701                       	dc.b	smpsNoAttack, $01
000855C6 E104                       	smpsAlterNote       $04
000855C8 E701                       	dc.b	smpsNoAttack, $01
000855CA E105                       	smpsAlterNote       $05
000855CC E701                       	dc.b	smpsNoAttack, $01
000855CE E10B                       	smpsAlterNote       $0B
000855D0 E701                       	dc.b	smpsNoAttack, $01
000855D2 E10F                       	smpsAlterNote       $0F
000855D4 E701                       	dc.b	smpsNoAttack, $01
000855D6 E10B                       	smpsAlterNote       $0B
000855D8 E701                       	dc.b	smpsNoAttack, $01
000855DA E108                       	smpsAlterNote       $08
000855DC E701                       	dc.b	smpsNoAttack, $01
000855DE E104                       	smpsAlterNote       $04
000855E0 E701                       	dc.b	smpsNoAttack, $01
000855E2 E108                       	smpsAlterNote       $08
000855E4 E701                       	dc.b	smpsNoAttack, $01
000855E6 E10E                       	smpsAlterNote       $0E
000855E8 E701                       	dc.b	smpsNoAttack, $01
000855EA E10F                       	smpsAlterNote       $0F
000855EC E701                       	dc.b	smpsNoAttack, $01
000855EE E10B                       	smpsAlterNote       $0B
000855F0 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000855F4 E108                       	smpsAlterNote       $08
000855F6 E701                       	dc.b	smpsNoAttack, $01
000855F8 E105                       	smpsAlterNote       $05
000855FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855FE E10B                       	smpsAlterNote       $0B
00085600 E701                       	dc.b	smpsNoAttack, $01
00085602 E10F                       	smpsAlterNote       $0F
00085604 E701                       	dc.b	smpsNoAttack, $01
00085606 E10E                       	smpsAlterNote       $0E
00085608 E701                       	dc.b	smpsNoAttack, $01
0008560A E108                       	smpsAlterNote       $08
0008560C E701                       	dc.b	smpsNoAttack, $01
0008560E E104                       	smpsAlterNote       $04
00085610 E701                       	dc.b	smpsNoAttack, $01
00085612 E108                       	smpsAlterNote       $08
00085614 E701                       	dc.b	smpsNoAttack, $01
00085616 E10B                       	smpsAlterNote       $0B
00085618 E701                       	dc.b	smpsNoAttack, $01
0008561A E10F                       	smpsAlterNote       $0F
0008561C E701                       	dc.b	smpsNoAttack, $01
0008561E E10B                       	smpsAlterNote       $0B
00085620 B30D                       	dc.b	nD4, $0D
00085622 E108                       	smpsAlterNote       $08
00085624 E701                       	dc.b	smpsNoAttack, $01
00085626 E105                       	smpsAlterNote       $05
00085628 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008562C E10B                       	smpsAlterNote       $0B
0008562E E701                       	dc.b	smpsNoAttack, $01
00085630 E10F                       	smpsAlterNote       $0F
00085632 E701                       	dc.b	smpsNoAttack, $01
00085634 E10E                       	smpsAlterNote       $0E
00085636 E701                       	dc.b	smpsNoAttack, $01
00085638 E108                       	smpsAlterNote       $08
0008563A E701                       	dc.b	smpsNoAttack, $01
0008563C E104                       	smpsAlterNote       $04
0008563E E701                       	dc.b	smpsNoAttack, $01
00085640 E108                       	smpsAlterNote       $08
00085642 E701                       	dc.b	smpsNoAttack, $01
00085644 E10B                       	smpsAlterNote       $0B
00085646 E701                       	dc.b	smpsNoAttack, $01
00085648 E10F                       	smpsAlterNote       $0F
0008564A E701                       	dc.b	smpsNoAttack, $01
0008564C E10B                       	smpsAlterNote       $0B
0008564E E701                       	dc.b	smpsNoAttack, $01
00085650 E105                       	smpsAlterNote       $05
00085652 E701                       	dc.b	smpsNoAttack, $01
00085654 E104                       	smpsAlterNote       $04
00085656 E701                       	dc.b	smpsNoAttack, $01
00085658 E108                       	smpsAlterNote       $08
0008565A E701                       	dc.b	smpsNoAttack, $01
0008565C E10E                       	smpsAlterNote       $0E
0008565E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085662 E10B                       	smpsAlterNote       $0B
00085664 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
00085668 E108                       	smpsAlterNote       $08
0008566A E701                       	dc.b	smpsNoAttack, $01
0008566C E104                       	smpsAlterNote       $04
0008566E E701                       	dc.b	smpsNoAttack, $01
00085670 E108                       	smpsAlterNote       $08
00085672 E701                       	dc.b	smpsNoAttack, $01
00085674 E10B                       	smpsAlterNote       $0B
00085676 E701                       	dc.b	smpsNoAttack, $01
0008567A E0C0                       	smpsPan             panCenter, $00
0008567C E601                       	smpsAlterVol        $01
0008567E E108                       	smpsAlterNote       $08
00085680 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008568C 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00085694 E080                       	smpsPan             panLeft, $00
00085696 07                         	dc.b	$07
00085697 E6FF                       	smpsAlterVol        $FF
00085699 E10D                       	smpsAlterNote       $0D
0008569B B60D                       	dc.b	nF4, $0D
0008569D E10A                       	smpsAlterNote       $0A
0008569F E701                       	dc.b	smpsNoAttack, $01
000856A1 E106                       	smpsAlterNote       $06
000856A3 E701                       	dc.b	smpsNoAttack, $01
000856A5 E10A                       	smpsAlterNote       $0A
000856A7 E701                       	dc.b	smpsNoAttack, $01
000856A9 E110                       	smpsAlterNote       $10
000856AB E701                       	dc.b	smpsNoAttack, $01
000856AD E111                       	smpsAlterNote       $11
000856AF E701                       	dc.b	smpsNoAttack, $01
000856B1 E10D                       	smpsAlterNote       $0D
000856B3 E701                       	dc.b	smpsNoAttack, $01
000856B5 E107                       	smpsAlterNote       $07
000856B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856BB E10A                       	smpsAlterNote       $0A
000856BD E701                       	dc.b	smpsNoAttack, $01
000856BF E110                       	smpsAlterNote       $10
000856C1 E701                       	dc.b	smpsNoAttack, $01
000856C3 E111                       	smpsAlterNote       $11
000856C5 8001                       	dc.b	nRst, $01
000856C7 E10D                       	smpsAlterNote       $0D
000856C9 B80D                       	dc.b	nG4, $0D
000856CB E10A                       	smpsAlterNote       $0A
000856CD E701                       	dc.b	smpsNoAttack, $01
000856CF E106                       	smpsAlterNote       $06
000856D1 E701                       	dc.b	smpsNoAttack, $01
000856D3 E10A                       	smpsAlterNote       $0A
000856D5 E701                       	dc.b	smpsNoAttack, $01
000856D7 E110                       	smpsAlterNote       $10
000856D9 E701                       	dc.b	smpsNoAttack, $01
000856DB E111                       	smpsAlterNote       $11
000856DD E701                       	dc.b	smpsNoAttack, $01
000856DF E10D                       	smpsAlterNote       $0D
000856E1 E701                       	dc.b	smpsNoAttack, $01
000856E3 E107                       	smpsAlterNote       $07
000856E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856E9 E10D                       	smpsAlterNote       $0D
000856EB E701                       	dc.b	smpsNoAttack, $01
000856ED E110                       	smpsAlterNote       $10
000856EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856F3 E10A                       	smpsAlterNote       $0A
000856F5 E701                       	dc.b	smpsNoAttack, $01
000856F7 E106                       	smpsAlterNote       $06
000856F9 E701                       	dc.b	smpsNoAttack, $01
000856FB E107                       	smpsAlterNote       $07
000856FD E701                       	dc.b	smpsNoAttack, $01
000856FF E10D                       	smpsAlterNote       $0D
00085701 E701                       	dc.b	smpsNoAttack, $01
00085703 E111                       	smpsAlterNote       $11
00085705 E701                       	dc.b	smpsNoAttack, $01
00085707 E10D                       	smpsAlterNote       $0D
00085709 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008570D E10F                       	smpsAlterNote       $0F
0008570F BA0D                       	dc.b	nA4, $0D
00085711 E109                       	smpsAlterNote       $09
00085713 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085717 E10C                       	smpsAlterNote       $0C
00085719 E701                       	dc.b	smpsNoAttack, $01
0008571B E112                       	smpsAlterNote       $12
0008571D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085721 E10C                       	smpsAlterNote       $0C
00085723 E701                       	dc.b	smpsNoAttack, $01
00085725 E109                       	smpsAlterNote       $09
00085727 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008572B E10F                       	smpsAlterNote       $0F
0008572D E701                       	dc.b	smpsNoAttack, $01
0008572F E113                       	smpsAlterNote       $13
00085731 E701                       	dc.b	smpsNoAttack, $01
00085733 E112                       	smpsAlterNote       $12
00085735 E701                       	dc.b	smpsNoAttack, $01
00085737 E10C                       	smpsAlterNote       $0C
00085739 E701                       	dc.b	smpsNoAttack, $01
0008573B E108                       	smpsAlterNote       $08
0008573D E701                       	dc.b	smpsNoAttack, $01
0008573F E10C                       	smpsAlterNote       $0C
00085741 E701                       	dc.b	smpsNoAttack, $01
00085743 E10F                       	smpsAlterNote       $0F
00085745 E701                       	dc.b	smpsNoAttack, $01
00085747 E113                       	smpsAlterNote       $13
00085749 E701                       	dc.b	smpsNoAttack, $01
0008574B E10F                       	smpsAlterNote       $0F
0008574D E701                       	dc.b	smpsNoAttack, $01
0008574F E109                       	smpsAlterNote       $09
00085751 E701                       	dc.b	smpsNoAttack, $01
00085753 E108                       	smpsAlterNote       $08
00085755 E701                       	dc.b	smpsNoAttack, $01
00085757 E10C                       	smpsAlterNote       $0C
00085759 E701                       	dc.b	smpsNoAttack, $01
0008575B E112                       	smpsAlterNote       $12
0008575D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085761 E10F                       	smpsAlterNote       $0F
00085763 E701                       	dc.b	smpsNoAttack, $01
00085765 E109                       	smpsAlterNote       $09
00085767 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008576B E10F                       	smpsAlterNote       $0F
0008576D E701                       	dc.b	smpsNoAttack, $01
0008576F E112                       	smpsAlterNote       $12
00085771 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085775 E10C                       	smpsAlterNote       $0C
00085777 E701                       	dc.b	smpsNoAttack, $01
00085779 E108                       	smpsAlterNote       $08
0008577B E701                       	dc.b	smpsNoAttack, $01
0008577D E109                       	smpsAlterNote       $09
0008577F E701                       	dc.b	smpsNoAttack, $01
00085781 E10C                       	smpsAlterNote       $0C
00085783 B50A                       	dc.b	nE4, $0A
00085785 E10D                       	smpsAlterNote       $0D
00085787 B60E                       	dc.b	nF4, $0E
00085789 E107                       	smpsAlterNote       $07
0008578B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008578F E10D                       	smpsAlterNote       $0D
00085791 E701                       	dc.b	smpsNoAttack, $01
00085793 E110                       	smpsAlterNote       $10
00085795 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085799 E10A                       	smpsAlterNote       $0A
0008579B E701                       	dc.b	smpsNoAttack, $01
0008579D E106                       	smpsAlterNote       $06
0008579F E701                       	dc.b	smpsNoAttack, $01
000857A1 E107                       	smpsAlterNote       $07
000857A3 E701                       	dc.b	smpsNoAttack, $01
000857A5 E10D                       	smpsAlterNote       $0D
000857A7 E701                       	dc.b	smpsNoAttack, $01
000857A9 E111                       	smpsAlterNote       $11
000857AB E701                       	dc.b	smpsNoAttack, $01
000857AD E10D                       	smpsAlterNote       $0D
000857AF B80D                       	dc.b	nG4, $0D
000857B1 E10A                       	smpsAlterNote       $0A
000857B3 E701                       	dc.b	smpsNoAttack, $01
000857B5 E107                       	smpsAlterNote       $07
000857B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857BB E10D                       	smpsAlterNote       $0D
000857BD E701                       	dc.b	smpsNoAttack, $01
000857BF E111                       	smpsAlterNote       $11
000857C1 E701                       	dc.b	smpsNoAttack, $01
000857C3 E110                       	smpsAlterNote       $10
000857C5 E701                       	dc.b	smpsNoAttack, $01
000857C7 E10A                       	smpsAlterNote       $0A
000857C9 E701                       	dc.b	smpsNoAttack, $01
000857CB E106                       	smpsAlterNote       $06
000857CD E701                       	dc.b	smpsNoAttack, $01
000857CF E10A                       	smpsAlterNote       $0A
000857D1 E701                       	dc.b	smpsNoAttack, $01
000857D3 E10D                       	smpsAlterNote       $0D
000857D5 E701                       	dc.b	smpsNoAttack, $01
000857D7 E111                       	smpsAlterNote       $11
000857D9 E701                       	dc.b	smpsNoAttack, $01
000857DB E10D                       	smpsAlterNote       $0D
000857DD E701                       	dc.b	smpsNoAttack, $01
000857DF E107                       	smpsAlterNote       $07
000857E1 E701                       	dc.b	smpsNoAttack, $01
000857E3 E106                       	smpsAlterNote       $06
000857E5 E701                       	dc.b	smpsNoAttack, $01
000857E7 E10A                       	smpsAlterNote       $0A
000857E9 E701                       	dc.b	smpsNoAttack, $01
000857EB E110                       	smpsAlterNote       $10
000857ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857F1 E10D                       	smpsAlterNote       $0D
000857F3 E701                       	dc.b	smpsNoAttack, $01
000857F5 E10F                       	smpsAlterNote       $0F
000857F7 BA0D                       	dc.b	nA4, $0D
000857F9 E10C                       	smpsAlterNote       $0C
000857FB E701                       	dc.b	smpsNoAttack, $01
000857FD E108                       	smpsAlterNote       $08
000857FF E701                       	dc.b	smpsNoAttack, $01
00085801 E109                       	smpsAlterNote       $09
00085803 E701                       	dc.b	smpsNoAttack, $01
00085805 E10F                       	smpsAlterNote       $0F
00085807 E701                       	dc.b	smpsNoAttack, $01
00085809 E113                       	smpsAlterNote       $13
0008580B E701                       	dc.b	smpsNoAttack, $01
0008580D E10F                       	smpsAlterNote       $0F
0008580F E701                       	dc.b	smpsNoAttack, $01
00085811 E10C                       	smpsAlterNote       $0C
00085813 E701                       	dc.b	smpsNoAttack, $01
00085815 E108                       	smpsAlterNote       $08
00085817 E701                       	dc.b	smpsNoAttack, $01
00085819 E10C                       	smpsAlterNote       $0C
0008581B E701                       	dc.b	smpsNoAttack, $01
0008581D E112                       	smpsAlterNote       $12
0008581F E701                       	dc.b	smpsNoAttack, $01
00085821 E113                       	smpsAlterNote       $13
00085823 E701                       	dc.b	smpsNoAttack, $01
00085825 E10F                       	smpsAlterNote       $0F
00085827 E701                       	dc.b	smpsNoAttack, $01
00085829 E109                       	smpsAlterNote       $09
0008582B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008582F E10C                       	smpsAlterNote       $0C
00085831 E701                       	dc.b	smpsNoAttack, $01
00085833 E112                       	smpsAlterNote       $12
00085835 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085839 E10C                       	smpsAlterNote       $0C
0008583B E701                       	dc.b	smpsNoAttack, $01
0008583D E109                       	smpsAlterNote       $09
0008583F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085843 E10F                       	smpsAlterNote       $0F
00085845 E701                       	dc.b	smpsNoAttack, $01
00085847 E113                       	smpsAlterNote       $13
00085849 E701                       	dc.b	smpsNoAttack, $01
0008584B E112                       	smpsAlterNote       $12
0008584D E701                       	dc.b	smpsNoAttack, $01
0008584F E10C                       	smpsAlterNote       $0C
00085851 E701                       	dc.b	smpsNoAttack, $01
00085853 E109                       	smpsAlterNote       $09
00085855 8001                       	dc.b	nRst, $01
00085857 E10D                       	smpsAlterNote       $0D
00085859 B60A                       	dc.b	nF4, $0A
0008585B E10C                       	smpsAlterNote       $0C
0008585D B506 8001                  	dc.b	nE4, $06, nRst, $01
00085861 E10B                       	smpsAlterNote       $0B
00085863 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00085867 E10C                       	smpsAlterNote       $0C
00085869 B503                       	dc.b	nE4, $03
0008586B E10D                       	smpsAlterNote       $0D
0008586D B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
00085877 E10C                       	smpsAlterNote       $0C
00085879 E701                       	dc.b	smpsNoAttack, $01
0008587B E108                       	smpsAlterNote       $08
0008587D E701                       	dc.b	smpsNoAttack, $01
0008587F E10C                       	smpsAlterNote       $0C
00085881 E701                       	dc.b	smpsNoAttack, $01
00085883 E112                       	smpsAlterNote       $12
00085885 E701                       	dc.b	smpsNoAttack, $01
00085887 E113                       	smpsAlterNote       $13
00085889 E701                       	dc.b	smpsNoAttack, $01
0008588B E10F                       	smpsAlterNote       $0F
0008588D E701                       	dc.b	smpsNoAttack, $01
0008588F E109                       	smpsAlterNote       $09
00085891 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085895 E10C                       	smpsAlterNote       $0C
00085897 E701                       	dc.b	smpsNoAttack, $01
00085899 E112                       	smpsAlterNote       $12
0008589B E701                       	dc.b	smpsNoAttack, $01
0008589D E113                       	smpsAlterNote       $13
0008589F 8001                       	dc.b	nRst, $01
000858A1 E10D                       	smpsAlterNote       $0D
000858A3 C20D                       	dc.b	nF5, $0D
000858A5 E10A                       	smpsAlterNote       $0A
000858A7 E701                       	dc.b	smpsNoAttack, $01
000858A9 E106                       	smpsAlterNote       $06
000858AB E701                       	dc.b	smpsNoAttack, $01
000858AD E10A                       	smpsAlterNote       $0A
000858AF E701                       	dc.b	smpsNoAttack, $01
000858B1 E110                       	smpsAlterNote       $10
000858B3 E701                       	dc.b	smpsNoAttack, $01
000858B5 E111                       	smpsAlterNote       $11
000858B7 E701                       	dc.b	smpsNoAttack, $01
000858B9 E10D                       	smpsAlterNote       $0D
000858BB E701                       	dc.b	smpsNoAttack, $01
000858BD E107                       	smpsAlterNote       $07
000858BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858C3 E10A                       	smpsAlterNote       $0A
000858C5 E701                       	dc.b	smpsNoAttack, $01
000858C7 E110                       	smpsAlterNote       $10
000858C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858CD E10A                       	smpsAlterNote       $0A
000858CF E701                       	dc.b	smpsNoAttack, $01
000858D1 E107                       	smpsAlterNote       $07
000858D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858D7 E10D                       	smpsAlterNote       $0D
000858D9 E701                       	dc.b	smpsNoAttack, $01
000858DB E111                       	smpsAlterNote       $11
000858DD E701                       	dc.b	smpsNoAttack, $01
000858DF E110                       	smpsAlterNote       $10
000858E1 E701                       	dc.b	smpsNoAttack, $01
000858E3 E10A                       	smpsAlterNote       $0A
000858E5 E701                       	dc.b	smpsNoAttack, $01
000858E7 E106                       	smpsAlterNote       $06
000858E9 E701                       	dc.b	smpsNoAttack, $01
000858EB E10A                       	smpsAlterNote       $0A
000858ED E701                       	dc.b	smpsNoAttack, $01
000858EF E10D                       	smpsAlterNote       $0D
000858F1 E701                       	dc.b	smpsNoAttack, $01
000858F3 E111                       	smpsAlterNote       $11
000858F5 E701                       	dc.b	smpsNoAttack, $01
000858F7 E10D                       	smpsAlterNote       $0D
000858F9 E701                       	dc.b	smpsNoAttack, $01
000858FB E107                       	smpsAlterNote       $07
000858FD E701                       	dc.b	smpsNoAttack, $01
000858FF E106                       	smpsAlterNote       $06
00085901 E701                       	dc.b	smpsNoAttack, $01
00085903 E10A                       	smpsAlterNote       $0A
00085905 E701                       	dc.b	smpsNoAttack, $01
00085907 E110                       	smpsAlterNote       $10
00085909 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008590D E10D                       	smpsAlterNote       $0D
0008590F E701                       	dc.b	smpsNoAttack, $01
00085911 E107                       	smpsAlterNote       $07
00085913 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085917 E10D                       	smpsAlterNote       $0D
00085919 E701                       	dc.b	smpsNoAttack, $01
0008591B E110                       	smpsAlterNote       $10
0008591D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085921 E10A                       	smpsAlterNote       $0A
00085923 E701                       	dc.b	smpsNoAttack, $01
00085925 E106                       	smpsAlterNote       $06
00085927 E701                       	dc.b	smpsNoAttack, $01
00085929 E107                       	smpsAlterNote       $07
0008592B E701                       	dc.b	smpsNoAttack, $01
0008592D E10D                       	smpsAlterNote       $0D
0008592F E701                       	dc.b	smpsNoAttack, $01
00085931 E111                       	smpsAlterNote       $11
00085933 E701                       	dc.b	smpsNoAttack, $01
00085935 E10D                       	smpsAlterNote       $0D
00085937 E701                       	dc.b	smpsNoAttack, $01
00085939 E10A                       	smpsAlterNote       $0A
0008593B E701                       	dc.b	smpsNoAttack, $01
0008593D E107                       	smpsAlterNote       $07
0008593F 8001                       	dc.b	nRst, $01
00085941 E10D                       	smpsAlterNote       $0D
00085943 C206 8001                  	dc.b	nF5, $06, nRst, $01
00085949 E601                       	smpsAlterVol        $01
0008594B E110                       	smpsAlterNote       $10
0008594D BB0D                       	dc.b	nBb4, $0D
0008594F E10A                       	smpsAlterNote       $0A
00085951 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085955 E110                       	smpsAlterNote       $10
00085957 E701                       	dc.b	smpsNoAttack, $01
00085959 E113                       	smpsAlterNote       $13
0008595B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008595F E10D                       	smpsAlterNote       $0D
00085961 E701                       	dc.b	smpsNoAttack, $01
00085963 E109                       	smpsAlterNote       $09
00085965 E701                       	dc.b	smpsNoAttack, $01
00085967 E10A                       	smpsAlterNote       $0A
00085969 E701                       	dc.b	smpsNoAttack, $01
0008596B E110                       	smpsAlterNote       $10
0008596D E701                       	dc.b	smpsNoAttack, $01
0008596F E114                       	smpsAlterNote       $14
00085971 E701                       	dc.b	smpsNoAttack, $01
00085973 E110                       	smpsAlterNote       $10
00085975 E701                       	dc.b	smpsNoAttack, $01
00085977 E10D                       	smpsAlterNote       $0D
00085979 E701                       	dc.b	smpsNoAttack, $01
0008597B E109                       	smpsAlterNote       $09
0008597D E701                       	dc.b	smpsNoAttack, $01
0008597F E10A                       	smpsAlterNote       $0A
00085981 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00085985 E107                       	smpsAlterNote       $07
00085987 E701                       	dc.b	smpsNoAttack, $01
00085989 E103                       	smpsAlterNote       $03
0008598B E701                       	dc.b	smpsNoAttack, $01
0008598D E107                       	smpsAlterNote       $07
0008598F E701                       	dc.b	smpsNoAttack, $01
00085991 E10D                       	smpsAlterNote       $0D
00085993 E701                       	dc.b	smpsNoAttack, $01
00085995 E10E                       	smpsAlterNote       $0E
00085997 E701                       	dc.b	smpsNoAttack, $01
00085999 E10A                       	smpsAlterNote       $0A
0008599B E701                       	dc.b	smpsNoAttack, $01
0008599D E104                       	smpsAlterNote       $04
0008599F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859A3 E107                       	smpsAlterNote       $07
000859A5 E701                       	dc.b	smpsNoAttack, $01
000859A7 E10D                       	smpsAlterNote       $0D
000859A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859AD E107                       	smpsAlterNote       $07
000859AF E701                       	dc.b	smpsNoAttack, $01
000859B1 E104                       	smpsAlterNote       $04
000859B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859B7 E10B                       	smpsAlterNote       $0B
000859B9 BF0D                       	dc.b	nD5, $0D
000859BB E108                       	smpsAlterNote       $08
000859BD E701                       	dc.b	smpsNoAttack, $01
000859BF E105                       	smpsAlterNote       $05
000859C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859C5 E10B                       	smpsAlterNote       $0B
000859C7 E701                       	dc.b	smpsNoAttack, $01
000859C9 E10F                       	smpsAlterNote       $0F
000859CB E701                       	dc.b	smpsNoAttack, $01
000859CD E10E                       	smpsAlterNote       $0E
000859CF E701                       	dc.b	smpsNoAttack, $01
000859D1 E108                       	smpsAlterNote       $08
000859D3 E701                       	dc.b	smpsNoAttack, $01
000859D5 E104                       	smpsAlterNote       $04
000859D7 E701                       	dc.b	smpsNoAttack, $01
000859D9 E108                       	smpsAlterNote       $08
000859DB E701                       	dc.b	smpsNoAttack, $01
000859DD E10B                       	smpsAlterNote       $0B
000859DF E701                       	dc.b	smpsNoAttack, $01
000859E1 E10F                       	smpsAlterNote       $0F
000859E3 E701                       	dc.b	smpsNoAttack, $01
000859E5 E10B                       	smpsAlterNote       $0B
000859E7 E701                       	dc.b	smpsNoAttack, $01
000859E9 E105                       	smpsAlterNote       $05
000859EB E701                       	dc.b	smpsNoAttack, $01
000859ED E104                       	smpsAlterNote       $04
000859EF E701                       	dc.b	smpsNoAttack, $01
000859F1 E105                       	smpsAlterNote       $05
000859F3 8001                       	dc.b	nRst, $01
000859F5 E10C                       	smpsAlterNote       $0C
000859F7 C10C                       	dc.b	nE5, $0C
000859F9 E10D                       	smpsAlterNote       $0D
000859FB C201                       	dc.b	nF5, $01
000859FD E10E                       	smpsAlterNote       $0E
000859FF C301 8001                  	dc.b	nFs5, $01, nRst, $01
00085A03 E10D                       	smpsAlterNote       $0D
00085A05 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00085A09 E10A                       	smpsAlterNote       $0A
00085A0B E701                       	dc.b	smpsNoAttack, $01
00085A0D E106                       	smpsAlterNote       $06
00085A0F E701                       	dc.b	smpsNoAttack, $01
00085A11 E10A                       	smpsAlterNote       $0A
00085A13 E701                       	dc.b	smpsNoAttack, $01
00085A15 E10D                       	smpsAlterNote       $0D
00085A17 E701                       	dc.b	smpsNoAttack, $01
00085A19 E111                       	smpsAlterNote       $11
00085A1B E701                       	dc.b	smpsNoAttack, $01
00085A1D E10D                       	smpsAlterNote       $0D
00085A1F E701                       	dc.b	smpsNoAttack, $01
00085A21 E107                       	smpsAlterNote       $07
00085A23 E701                       	dc.b	smpsNoAttack, $01
00085A25 E106                       	smpsAlterNote       $06
00085A27 E701                       	dc.b	smpsNoAttack, $01
00085A29 E10A                       	smpsAlterNote       $0A
00085A2B E701                       	dc.b	smpsNoAttack, $01
00085A2D E110                       	smpsAlterNote       $10
00085A2F E701                       	dc.b	smpsNoAttack, $01
00085A31 E111                       	smpsAlterNote       $11
00085A33 8001                       	dc.b	nRst, $01
00085A35 E10D                       	smpsAlterNote       $0D
00085A37 C40D                       	dc.b	nG5, $0D
00085A39 E10A                       	smpsAlterNote       $0A
00085A3B E701                       	dc.b	smpsNoAttack, $01
00085A3D E106                       	smpsAlterNote       $06
00085A3F E701                       	dc.b	smpsNoAttack, $01
00085A41 E10A                       	smpsAlterNote       $0A
00085A43 E701                       	dc.b	smpsNoAttack, $01
00085A45 E10D                       	smpsAlterNote       $0D
00085A47 E701                       	dc.b	smpsNoAttack, $01
00085A49 E10C                       	smpsAlterNote       $0C
00085A4B C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
00085A57 8001                       	dc.b	nRst, $01
00085A59 E10D                       	smpsAlterNote       $0D
00085A5B C20D                       	dc.b	nF5, $0D
00085A5D E10A                       	smpsAlterNote       $0A
00085A5F E701                       	dc.b	smpsNoAttack, $01
00085A61 E106                       	smpsAlterNote       $06
00085A63 E701                       	dc.b	smpsNoAttack, $01
00085A65 E10A                       	smpsAlterNote       $0A
00085A67 E701                       	dc.b	smpsNoAttack, $01
00085A69 E110                       	smpsAlterNote       $10
00085A6B E701                       	dc.b	smpsNoAttack, $01
00085A6D E111                       	smpsAlterNote       $11
00085A6F E701                       	dc.b	smpsNoAttack, $01
00085A71 E10D                       	smpsAlterNote       $0D
00085A73 E701                       	dc.b	smpsNoAttack, $01
00085A75 E107                       	smpsAlterNote       $07
00085A77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A7B E10A                       	smpsAlterNote       $0A
00085A7D E701                       	dc.b	smpsNoAttack, $01
00085A7F E110                       	smpsAlterNote       $10
00085A81 E701                       	dc.b	smpsNoAttack, $01
00085A83 E111                       	smpsAlterNote       $11
00085A85 8001                       	dc.b	nRst, $01
00085A87 E10F                       	smpsAlterNote       $0F
00085A89 C60A                       	dc.b	nA5, $0A
00085A8B E10D                       	smpsAlterNote       $0D
00085A8D C406 8001                  	dc.b	nG5, $06, nRst, $01
00085A91 E10C                       	smpsAlterNote       $0C
00085A93 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00085A9F 8001                       	dc.b	nRst, $01
00085AA1 E10D                       	smpsAlterNote       $0D
00085AA3 C20D                       	dc.b	nF5, $0D
00085AA5 E107                       	smpsAlterNote       $07
00085AA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AAB E10A                       	smpsAlterNote       $0A
00085AAD E701                       	dc.b	smpsNoAttack, $01
00085AAF E110                       	smpsAlterNote       $10
00085AB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AB5 E10A                       	smpsAlterNote       $0A
00085AB7 E701                       	dc.b	smpsNoAttack, $01
00085AB9 E107                       	smpsAlterNote       $07
00085ABB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085ABF E10D                       	smpsAlterNote       $0D
00085AC1 E701                       	dc.b	smpsNoAttack, $01
00085AC3 E111                       	smpsAlterNote       $11
00085AC5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085AC9 E10D                       	smpsAlterNote       $0D
00085ACB C40D                       	dc.b	nG5, $0D
00085ACD E107                       	smpsAlterNote       $07
00085ACF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AD3 E10A                       	smpsAlterNote       $0A
00085AD5 E701                       	dc.b	smpsNoAttack, $01
00085AD7 E10D                       	smpsAlterNote       $0D
00085AD9 8001                       	dc.b	nRst, $01
00085ADB E10C                       	smpsAlterNote       $0C
00085ADD C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00085AE9 E10D                       	smpsAlterNote       $0D
00085AEB C20E                       	dc.b	nF5, $0E
00085AED E107                       	smpsAlterNote       $07
00085AEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AF3 E10D                       	smpsAlterNote       $0D
00085AF5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085AFB E0C0                       	smpsPan             panCenter, $00
00085AFD E603                       	smpsAlterVol        $03
00085AFF E108                       	smpsAlterNote       $08
00085B01 B406                       	dc.b	nEb4, $06
00085B03 E10C                       	smpsAlterNote       $0C
00085B05 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00085B09 E108                       	smpsAlterNote       $08
00085B0B B403                       	dc.b	nEb4, $03
00085B0D E109                       	smpsAlterNote       $09
00085B0F B803 8001                  	dc.b	nG4, $03, nRst, $01
00085B13 E10C                       	smpsAlterNote       $0C
00085B15 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00085B1D 03                         	dc.b	$03
00085B1E E6FD                       	smpsAlterVol        $FD
00085B20 F6F1 F4                    	smpsJump            music84_Jump00
00085B23                            
00085B23                            ; PSG1 Data
00085B23                            music84_PSG1:
00085B23 E1FD                       	smpsAlterNote       $FD
00085B25 EC04                       	smpsPSGAlterVol     $04
00085B27 9203                       	dc.b	nF1, $03
00085B29 E1FE                       	smpsAlterNote       $FE
00085B2B 9603                       	dc.b	nA1, $03
00085B2D EC04                       	smpsPSGAlterVol     $04
00085B2F E701                       	dc.b	smpsNoAttack, $01
00085B31 E1FF                       	smpsAlterNote       $FF
00085B33 ECFC                       	smpsPSGAlterVol     $FC
00085B35 9B03                       	dc.b	nD2, $03
00085B37 E1FD                       	smpsAlterNote       $FD
00085B39 9403                       	dc.b	nG1, $03
00085B3B EC04                       	smpsPSGAlterVol     $04
00085B3D E701                       	dc.b	smpsNoAttack, $01
00085B3F E1FE                       	smpsAlterNote       $FE
00085B41 ECFC                       	smpsPSGAlterVol     $FC
00085B43 9703                       	dc.b	nBb1, $03
00085B45 E1FF                       	smpsAlterNote       $FF
00085B47 9B03                       	dc.b	nD2, $03
00085B49 EC04                       	smpsPSGAlterVol     $04
00085B4B E701                       	dc.b	smpsNoAttack, $01
00085B4D E1FE                       	smpsAlterNote       $FE
00085B4F ECFC                       	smpsPSGAlterVol     $FC
00085B51 A002                       	dc.b	nG2, $02
00085B53 EC04                       	smpsPSGAlterVol     $04
00085B55 E701                       	dc.b	smpsNoAttack, $01
00085B57 E1FF                       	smpsAlterNote       $FF
00085B59 ECFC                       	smpsPSGAlterVol     $FC
00085B5B A203                       	dc.b	nA2, $03
00085B5D EC0B                       	smpsPSGAlterVol     $0B
00085B5F 800A                       	dc.b	nRst, $0A
00085B61 E105                       	smpsAlterNote       $05
00085B63 01                         	dc.b	$01
00085B64 E1FC                       	smpsAlterNote       $FC
00085B66 01                         	dc.b	$01
00085B67 E105                       	smpsAlterNote       $05
00085B69 01                         	dc.b	$01
00085B6A E1FD                       	smpsAlterNote       $FD
00085B6C 01                         	dc.b	$01
00085B6D E105                       	smpsAlterNote       $05
00085B6F 01                         	dc.b	$01
00085B70 E1FD                       	smpsAlterNote       $FD
00085B72 01                         	dc.b	$01
00085B73 E1FA                       	smpsAlterNote       $FA
00085B75 01                         	dc.b	$01
00085B76 E1FC                       	smpsAlterNote       $FC
00085B78 01                         	dc.b	$01
00085B79 E105                       	smpsAlterNote       $05
00085B7B 01                         	dc.b	$01
00085B7C E108                       	smpsAlterNote       $08
00085B7E 0101                       	dc.b	$01, $01
00085B80 E105                       	smpsAlterNote       $05
00085B82 01                         	dc.b	$01
00085B83 E1FA                       	smpsAlterNote       $FA
00085B85 0101                       	dc.b	$01, $01
00085B87 E1FD                       	smpsAlterNote       $FD
00085B89 01                         	dc.b	$01
00085B8A E105                       	smpsAlterNote       $05
00085B8C 01                         	dc.b	$01
00085B8D E108                       	smpsAlterNote       $08
00085B8F 01                         	dc.b	$01
00085B90 E105                       	smpsAlterNote       $05
00085B92 01                         	dc.b	$01
00085B93 E1FC                       	smpsAlterNote       $FC
00085B95 01                         	dc.b	$01
00085B96 E105                       	smpsAlterNote       $05
00085B98 01                         	dc.b	$01
00085B99 E1FD                       	smpsAlterNote       $FD
00085B9B 01                         	dc.b	$01
00085B9C                            
00085B9C                            music84_Jump07:
00085B9C E105                       	smpsAlterNote       $05
00085B9E 8001                       	dc.b	nRst, $01
00085BA0 E1FD                       	smpsAlterNote       $FD
00085BA2 01                         	dc.b	$01
00085BA3 E1FA                       	smpsAlterNote       $FA
00085BA5 01                         	dc.b	$01
00085BA6 E1FC                       	smpsAlterNote       $FC
00085BA8 01                         	dc.b	$01
00085BA9 E1FD                       	smpsAlterNote       $FD
00085BAB ECF5                       	smpsPSGAlterVol     $F5
00085BAD 9206                       	dc.b	nF1, $06
00085BAF EC04                       	smpsPSGAlterVol     $04
00085BB1 E701                       	dc.b	smpsNoAttack, $01
00085BB3 EC07                       	smpsPSGAlterVol     $07
00085BB5 8003                       	dc.b	nRst, $03
00085BB7 ECF5                       	smpsPSGAlterVol     $F5
00085BB9 9206                       	dc.b	nF1, $06
00085BBB EC04                       	smpsPSGAlterVol     $04
00085BBD E701                       	dc.b	smpsNoAttack, $01
00085BBF EC07                       	smpsPSGAlterVol     $07
00085BC1 8006                       	dc.b	nRst, $06
00085BC3 E100                       	smpsAlterNote       $00
00085BC5 01                         	dc.b	$01
00085BC6 E104                       	smpsAlterNote       $04
00085BC8 01                         	dc.b	$01
00085BC9 E100                       	smpsAlterNote       $00
00085BCB 01                         	dc.b	$01
00085BCC E1FB                       	smpsAlterNote       $FB
00085BCE 01                         	dc.b	$01
00085BCF E1FD                       	smpsAlterNote       $FD
00085BD1 ECF5                       	smpsPSGAlterVol     $F5
00085BD3 9406                       	dc.b	nG1, $06
00085BD5 EC04                       	smpsPSGAlterVol     $04
00085BD7 E701                       	dc.b	smpsNoAttack, $01
00085BD9 EC07                       	smpsPSGAlterVol     $07
00085BDB 8003                       	dc.b	nRst, $03
00085BDD ECF5                       	smpsPSGAlterVol     $F5
00085BDF 9407                       	dc.b	nG1, $07
00085BE1 EC0B                       	smpsPSGAlterVol     $0B
00085BE3 8006                       	dc.b	nRst, $06
00085BE5 E100                       	smpsAlterNote       $00
00085BE7 01                         	dc.b	$01
00085BE8 E103                       	smpsAlterNote       $03
00085BEA 0101                       	dc.b	$01, $01
00085BEC E1FD                       	smpsAlterNote       $FD
00085BEE 01                         	dc.b	$01
00085BEF ECF5                       	smpsPSGAlterVol     $F5
00085BF1 9207                       	dc.b	nF1, $07
00085BF3 EC0B                       	smpsPSGAlterVol     $0B
00085BF5 8004                       	dc.b	nRst, $04
00085BF7 ECF5                       	smpsPSGAlterVol     $F5
00085BF9 9206                       	dc.b	nF1, $06
00085BFB EC04                       	smpsPSGAlterVol     $04
00085BFD E701                       	dc.b	smpsNoAttack, $01
00085BFF EC07                       	smpsPSGAlterVol     $07
00085C01 8006                       	dc.b	nRst, $06
00085C03 E103                       	smpsAlterNote       $03
00085C05 01                         	dc.b	$01
00085C06 E104                       	smpsAlterNote       $04
00085C08 01                         	dc.b	$01
00085C09 E100                       	smpsAlterNote       $00
00085C0B 01                         	dc.b	$01
00085C0C E1FA                       	smpsAlterNote       $FA
00085C0E 01                         	dc.b	$01
00085C0F E1FD                       	smpsAlterNote       $FD
00085C11 ECF5                       	smpsPSGAlterVol     $F5
00085C13 9206                       	dc.b	nF1, $06
00085C15 EC04                       	smpsPSGAlterVol     $04
00085C17 E701                       	dc.b	smpsNoAttack, $01
00085C19 EC07                       	smpsPSGAlterVol     $07
00085C1B 8003                       	dc.b	nRst, $03
00085C1D ECF5                       	smpsPSGAlterVol     $F5
00085C1F 9106                       	dc.b	nE1, $06
00085C21 EC04                       	smpsPSGAlterVol     $04
00085C23 E701                       	dc.b	smpsNoAttack, $01
00085C25 EC07                       	smpsPSGAlterVol     $07
00085C27 8006                       	dc.b	nRst, $06
00085C29 E100                       	smpsAlterNote       $00
00085C2B 01                         	dc.b	$01
00085C2C E104                       	smpsAlterNote       $04
00085C2E 01                         	dc.b	$01
00085C2F E100                       	smpsAlterNote       $00
00085C31 01                         	dc.b	$01
00085C32 E1FD                       	smpsAlterNote       $FD
00085C34 01                         	dc.b	$01
00085C35 ECF5                       	smpsPSGAlterVol     $F5
00085C37 9206                       	dc.b	nF1, $06
00085C39 EC04                       	smpsPSGAlterVol     $04
00085C3B E701                       	dc.b	smpsNoAttack, $01
00085C3D EC07                       	smpsPSGAlterVol     $07
00085C3F 8003                       	dc.b	nRst, $03
00085C41 ECF5                       	smpsPSGAlterVol     $F5
00085C43 9207                       	dc.b	nF1, $07
00085C45 EC0B                       	smpsPSGAlterVol     $0B
00085C47 8007                       	dc.b	nRst, $07
00085C49 E103                       	smpsAlterNote       $03
00085C4B 0101                       	dc.b	$01, $01
00085C4D E1FD                       	smpsAlterNote       $FD
00085C4F 01                         	dc.b	$01
00085C50 E1FB                       	smpsAlterNote       $FB
00085C52 01                         	dc.b	$01
00085C53 E1FD                       	smpsAlterNote       $FD
00085C55 ECF5                       	smpsPSGAlterVol     $F5
00085C57 9406                       	dc.b	nG1, $06
00085C59 EC0B                       	smpsPSGAlterVol     $0B
00085C5B 8004                       	dc.b	nRst, $04
00085C5D ECF5                       	smpsPSGAlterVol     $F5
00085C5F 9406                       	dc.b	nG1, $06
00085C61 EC04                       	smpsPSGAlterVol     $04
00085C63 E701                       	dc.b	smpsNoAttack, $01
00085C65 EC07                       	smpsPSGAlterVol     $07
00085C67 8006                       	dc.b	nRst, $06
00085C69 E100                       	smpsAlterNote       $00
00085C6B 01                         	dc.b	$01
00085C6C E104                       	smpsAlterNote       $04
00085C6E 01                         	dc.b	$01
00085C6F E100                       	smpsAlterNote       $00
00085C71 01                         	dc.b	$01
00085C72 E1F9                       	smpsAlterNote       $F9
00085C74 01                         	dc.b	$01
00085C75 E1FD                       	smpsAlterNote       $FD
00085C77 ECF5                       	smpsPSGAlterVol     $F5
00085C79 9206                       	dc.b	nF1, $06
00085C7B EC04                       	smpsPSGAlterVol     $04
00085C7D E701                       	dc.b	smpsNoAttack, $01
00085C7F EC07                       	smpsPSGAlterVol     $07
00085C81 8003                       	dc.b	nRst, $03
00085C83 ECF5                       	smpsPSGAlterVol     $F5
00085C85 9207                       	dc.b	nF1, $07
00085C87 EC0B                       	smpsPSGAlterVol     $0B
00085C89 8006                       	dc.b	nRst, $06
00085C8B E100                       	smpsAlterNote       $00
00085C8D 01                         	dc.b	$01
00085C8E E104                       	smpsAlterNote       $04
00085C90 01                         	dc.b	$01
00085C91 E103                       	smpsAlterNote       $03
00085C93 01                         	dc.b	$01
00085C94 E1FD                       	smpsAlterNote       $FD
00085C96 01                         	dc.b	$01
00085C97 ECF5                       	smpsPSGAlterVol     $F5
00085C99 9207                       	dc.b	nF1, $07
00085C9B EC0B                       	smpsPSGAlterVol     $0B
00085C9D 8004                       	dc.b	nRst, $04
00085C9F ECF5                       	smpsPSGAlterVol     $F5
00085CA1 9206                       	dc.b	nF1, $06
00085CA3 EC0B                       	smpsPSGAlterVol     $0B
00085CA5 8007                       	dc.b	nRst, $07
00085CA7 E103                       	smpsAlterNote       $03
00085CA9 0101                       	dc.b	$01, $01
00085CAB E100                       	smpsAlterNote       $00
00085CAD 01                         	dc.b	$01
00085CAE E1FA                       	smpsAlterNote       $FA
00085CB0 01                         	dc.b	$01
00085CB1 E1FD                       	smpsAlterNote       $FD
00085CB3 ECF5                       	smpsPSGAlterVol     $F5
00085CB5 9206                       	dc.b	nF1, $06
00085CB7 EC04                       	smpsPSGAlterVol     $04
00085CB9 E701                       	dc.b	smpsNoAttack, $01
00085CBB EC07                       	smpsPSGAlterVol     $07
00085CBD 8003                       	dc.b	nRst, $03
00085CBF ECF5                       	smpsPSGAlterVol     $F5
00085CC1 9206                       	dc.b	nF1, $06
00085CC3 EC04                       	smpsPSGAlterVol     $04
00085CC5 E701                       	dc.b	smpsNoAttack, $01
00085CC7 EC07                       	smpsPSGAlterVol     $07
00085CC9 8006                       	dc.b	nRst, $06
00085CCB E100                       	smpsAlterNote       $00
00085CCD 01                         	dc.b	$01
00085CCE E104                       	smpsAlterNote       $04
00085CD0 01                         	dc.b	$01
00085CD1 E100                       	smpsAlterNote       $00
00085CD3 01                         	dc.b	$01
00085CD4 E1FD                       	smpsAlterNote       $FD
00085CD6 01                         	dc.b	$01
00085CD7 ECF5                       	smpsPSGAlterVol     $F5
00085CD9 9206                       	dc.b	nF1, $06
00085CDB EC04                       	smpsPSGAlterVol     $04
00085CDD E701                       	dc.b	smpsNoAttack, $01
00085CDF EC07                       	smpsPSGAlterVol     $07
00085CE1 8003                       	dc.b	nRst, $03
00085CE3 ECF5                       	smpsPSGAlterVol     $F5
00085CE5 9207                       	dc.b	nF1, $07
00085CE7 EC0B                       	smpsPSGAlterVol     $0B
00085CE9 8007                       	dc.b	nRst, $07
00085CEB E103                       	smpsAlterNote       $03
00085CED 0101                       	dc.b	$01, $01
00085CEF E1FD                       	smpsAlterNote       $FD
00085CF1 01                         	dc.b	$01
00085CF2 E1FA                       	smpsAlterNote       $FA
00085CF4 01                         	dc.b	$01
00085CF5 E1FD                       	smpsAlterNote       $FD
00085CF7 ECF5                       	smpsPSGAlterVol     $F5
00085CF9 9206                       	dc.b	nF1, $06
00085CFB EC0B                       	smpsPSGAlterVol     $0B
00085CFD 8004                       	dc.b	nRst, $04
00085CFF ECF5                       	smpsPSGAlterVol     $F5
00085D01 9206                       	dc.b	nF1, $06
00085D03 EC04                       	smpsPSGAlterVol     $04
00085D05 E701                       	dc.b	smpsNoAttack, $01
00085D07 EC07                       	smpsPSGAlterVol     $07
00085D09 8006                       	dc.b	nRst, $06
00085D0B E103                       	smpsAlterNote       $03
00085D0D 01                         	dc.b	$01
00085D0E E104                       	smpsAlterNote       $04
00085D10 01                         	dc.b	$01
00085D11 E100                       	smpsAlterNote       $00
00085D13 01                         	dc.b	$01
00085D14 E1FA                       	smpsAlterNote       $FA
00085D16 01                         	dc.b	$01
00085D17 E1FD                       	smpsAlterNote       $FD
00085D19 ECF5                       	smpsPSGAlterVol     $F5
00085D1B 9206                       	dc.b	nF1, $06
00085D1D EC04                       	smpsPSGAlterVol     $04
00085D1F E701                       	dc.b	smpsNoAttack, $01
00085D21 EC07                       	smpsPSGAlterVol     $07
00085D23 8003                       	dc.b	nRst, $03
00085D25 ECF5                       	smpsPSGAlterVol     $F5
00085D27 9206                       	dc.b	nF1, $06
00085D29 EC04                       	smpsPSGAlterVol     $04
00085D2B E701                       	dc.b	smpsNoAttack, $01
00085D2D EC07                       	smpsPSGAlterVol     $07
00085D2F 8006                       	dc.b	nRst, $06
00085D31 E100                       	smpsAlterNote       $00
00085D33 01                         	dc.b	$01
00085D34 E104                       	smpsAlterNote       $04
00085D36 01                         	dc.b	$01
00085D37 E103                       	smpsAlterNote       $03
00085D39 01                         	dc.b	$01
00085D3A E1FD                       	smpsAlterNote       $FD
00085D3C 01                         	dc.b	$01
00085D3D ECF5                       	smpsPSGAlterVol     $F5
00085D3F 9107                       	dc.b	nE1, $07
00085D41 EC0B                       	smpsPSGAlterVol     $0B
00085D43 8004                       	dc.b	nRst, $04
00085D45 ECF5                       	smpsPSGAlterVol     $F5
00085D47 9106                       	dc.b	nE1, $06
00085D49 EC0B                       	smpsPSGAlterVol     $0B
00085D4B 8007                       	dc.b	nRst, $07
00085D4D E103                       	smpsAlterNote       $03
00085D4F 0101                       	dc.b	$01, $01
00085D51 E100                       	smpsAlterNote       $00
00085D53 01                         	dc.b	$01
00085D54 E1FA                       	smpsAlterNote       $FA
00085D56 01                         	dc.b	$01
00085D57 E1FD                       	smpsAlterNote       $FD
00085D59 ECF5                       	smpsPSGAlterVol     $F5
00085D5B 9106                       	dc.b	nE1, $06
00085D5D EC04                       	smpsPSGAlterVol     $04
00085D5F E701                       	dc.b	smpsNoAttack, $01
00085D61 EC07                       	smpsPSGAlterVol     $07
00085D63 8003                       	dc.b	nRst, $03
00085D65 ECF5                       	smpsPSGAlterVol     $F5
00085D67 9106                       	dc.b	nE1, $06
00085D69 EC04                       	smpsPSGAlterVol     $04
00085D6B E701                       	dc.b	smpsNoAttack, $01
00085D6D EC07                       	smpsPSGAlterVol     $07
00085D6F 8006                       	dc.b	nRst, $06
00085D71 E100                       	smpsAlterNote       $00
00085D73 01                         	dc.b	$01
00085D74 E104                       	smpsAlterNote       $04
00085D76 01                         	dc.b	$01
00085D77 E100                       	smpsAlterNote       $00
00085D79 01                         	dc.b	$01
00085D7A E1FA                       	smpsAlterNote       $FA
00085D7C 01                         	dc.b	$01
00085D7D E1FD                       	smpsAlterNote       $FD
00085D7F ECF5                       	smpsPSGAlterVol     $F5
00085D81 9106                       	dc.b	nE1, $06
00085D83 EC04                       	smpsPSGAlterVol     $04
00085D85 E701                       	dc.b	smpsNoAttack, $01
00085D87 EC07                       	smpsPSGAlterVol     $07
00085D89 8003                       	dc.b	nRst, $03
00085D8B ECF5                       	smpsPSGAlterVol     $F5
00085D8D 9107 9106                  	dc.b	nE1, $07, nE1, $06
00085D91 EC04                       	smpsPSGAlterVol     $04
00085D93 E701                       	dc.b	smpsNoAttack, $01
00085D95 ECFC                       	smpsPSGAlterVol     $FC
00085D97 9103 9103                  	dc.b	nE1, $03, nE1, $03
00085D9B EC04                       	smpsPSGAlterVol     $04
00085D9D E701                       	dc.b	smpsNoAttack, $01
00085D9F ECFC                       	smpsPSGAlterVol     $FC
00085DA1 9106                       	dc.b	nE1, $06
00085DA3 EC04                       	smpsPSGAlterVol     $04
00085DA5 E701                       	dc.b	smpsNoAttack, $01
00085DA7 EC07                       	smpsPSGAlterVol     $07
00085DA9 8006                       	dc.b	nRst, $06
00085DAB E100                       	smpsAlterNote       $00
00085DAD 01                         	dc.b	$01
00085DAE E104                       	smpsAlterNote       $04
00085DB0 01                         	dc.b	$01
00085DB1 E100                       	smpsAlterNote       $00
00085DB3 01                         	dc.b	$01
00085DB4 E1FA                       	smpsAlterNote       $FA
00085DB6 01                         	dc.b	$01
00085DB7 E1F9                       	smpsAlterNote       $F9
00085DB9 01                         	dc.b	$01
00085DBA E1FD                       	smpsAlterNote       $FD
00085DBC 01                         	dc.b	$01
00085DBD E103                       	smpsAlterNote       $03
00085DBF 01                         	dc.b	$01
00085DC0 E104                       	smpsAlterNote       $04
00085DC2 01                         	dc.b	$01
00085DC3 E100                       	smpsAlterNote       $00
00085DC5 01                         	dc.b	$01
00085DC6 E1FA                       	smpsAlterNote       $FA
00085DC8 0101                       	dc.b	$01, $01
00085DCA E1FD                       	smpsAlterNote       $FD
00085DCC ECF5                       	smpsPSGAlterVol     $F5
00085DCE 9206                       	dc.b	nF1, $06
00085DD0 EC04                       	smpsPSGAlterVol     $04
00085DD2 E701                       	dc.b	smpsNoAttack, $01
00085DD4 EC07                       	smpsPSGAlterVol     $07
00085DD6 8003                       	dc.b	nRst, $03
00085DD8 ECF5                       	smpsPSGAlterVol     $F5
00085DDA 9206                       	dc.b	nF1, $06
00085DDC EC04                       	smpsPSGAlterVol     $04
00085DDE E701                       	dc.b	smpsNoAttack, $01
00085DE0 EC07                       	smpsPSGAlterVol     $07
00085DE2 8006                       	dc.b	nRst, $06
00085DE4 E100                       	smpsAlterNote       $00
00085DE6 01                         	dc.b	$01
00085DE7 E104                       	smpsAlterNote       $04
00085DE9 01                         	dc.b	$01
00085DEA E103                       	smpsAlterNote       $03
00085DEC 01                         	dc.b	$01
00085DED E1FD                       	smpsAlterNote       $FD
00085DEF 01                         	dc.b	$01
00085DF0 ECF5                       	smpsPSGAlterVol     $F5
00085DF2 9407                       	dc.b	nG1, $07
00085DF4 EC0B                       	smpsPSGAlterVol     $0B
00085DF6 8004                       	dc.b	nRst, $04
00085DF8 ECF5                       	smpsPSGAlterVol     $F5
00085DFA 9406                       	dc.b	nG1, $06
00085DFC EC0B                       	smpsPSGAlterVol     $0B
00085DFE 8007                       	dc.b	nRst, $07
00085E00 E103                       	smpsAlterNote       $03
00085E02 0101                       	dc.b	$01, $01
00085E04 E1FD                       	smpsAlterNote       $FD
00085E06 01                         	dc.b	$01
00085E07 E1F9                       	smpsAlterNote       $F9
00085E09 01                         	dc.b	$01
00085E0A E1FD                       	smpsAlterNote       $FD
00085E0C ECF5                       	smpsPSGAlterVol     $F5
00085E0E 9206                       	dc.b	nF1, $06
00085E10 EC04                       	smpsPSGAlterVol     $04
00085E12 E701                       	dc.b	smpsNoAttack, $01
00085E14 EC07                       	smpsPSGAlterVol     $07
00085E16 8003                       	dc.b	nRst, $03
00085E18 ECF5                       	smpsPSGAlterVol     $F5
00085E1A 9206                       	dc.b	nF1, $06
00085E1C EC04                       	smpsPSGAlterVol     $04
00085E1E E701                       	dc.b	smpsNoAttack, $01
00085E20 EC07                       	smpsPSGAlterVol     $07
00085E22 8006                       	dc.b	nRst, $06
00085E24 E100                       	smpsAlterNote       $00
00085E26 01                         	dc.b	$01
00085E27 E104                       	smpsAlterNote       $04
00085E29 01                         	dc.b	$01
00085E2A E100                       	smpsAlterNote       $00
00085E2C 01                         	dc.b	$01
00085E2D E1FA                       	smpsAlterNote       $FA
00085E2F 01                         	dc.b	$01
00085E30 E1FD                       	smpsAlterNote       $FD
00085E32 ECF5                       	smpsPSGAlterVol     $F5
00085E34 9206                       	dc.b	nF1, $06
00085E36 EC04                       	smpsPSGAlterVol     $04
00085E38 E701                       	dc.b	smpsNoAttack, $01
00085E3A EC07                       	smpsPSGAlterVol     $07
00085E3C 8003                       	dc.b	nRst, $03
00085E3E ECF5                       	smpsPSGAlterVol     $F5
00085E40 9107                       	dc.b	nE1, $07
00085E42 EC0B                       	smpsPSGAlterVol     $0B
00085E44 8006                       	dc.b	nRst, $06
00085E46 E100                       	smpsAlterNote       $00
00085E48 01                         	dc.b	$01
00085E49 E103                       	smpsAlterNote       $03
00085E4B 0101                       	dc.b	$01, $01
00085E4D E1FD                       	smpsAlterNote       $FD
00085E4F 01                         	dc.b	$01
00085E50 ECF5                       	smpsPSGAlterVol     $F5
00085E52 9207                       	dc.b	nF1, $07
00085E54 EC0B                       	smpsPSGAlterVol     $0B
00085E56 8004                       	dc.b	nRst, $04
00085E58 ECF5                       	smpsPSGAlterVol     $F5
00085E5A 9206                       	dc.b	nF1, $06
00085E5C EC04                       	smpsPSGAlterVol     $04
00085E5E E701                       	dc.b	smpsNoAttack, $01
00085E60 EC07                       	smpsPSGAlterVol     $07
00085E62 8006                       	dc.b	nRst, $06
00085E64 E103                       	smpsAlterNote       $03
00085E66 01                         	dc.b	$01
00085E67 E104                       	smpsAlterNote       $04
00085E69 01                         	dc.b	$01
00085E6A E100                       	smpsAlterNote       $00
00085E6C 01                         	dc.b	$01
00085E6D E1FB                       	smpsAlterNote       $FB
00085E6F 01                         	dc.b	$01
00085E70 E1FD                       	smpsAlterNote       $FD
00085E72 ECF5                       	smpsPSGAlterVol     $F5
00085E74 9406                       	dc.b	nG1, $06
00085E76 EC04                       	smpsPSGAlterVol     $04
00085E78 E701                       	dc.b	smpsNoAttack, $01
00085E7A EC07                       	smpsPSGAlterVol     $07
00085E7C 8003                       	dc.b	nRst, $03
00085E7E ECF5                       	smpsPSGAlterVol     $F5
00085E80 9406                       	dc.b	nG1, $06
00085E82 EC04                       	smpsPSGAlterVol     $04
00085E84 E701                       	dc.b	smpsNoAttack, $01
00085E86 EC07                       	smpsPSGAlterVol     $07
00085E88 8006                       	dc.b	nRst, $06
00085E8A E100                       	smpsAlterNote       $00
00085E8C 01                         	dc.b	$01
00085E8D E104                       	smpsAlterNote       $04
00085E8F 01                         	dc.b	$01
00085E90 E100                       	smpsAlterNote       $00
00085E92 01                         	dc.b	$01
00085E93 E1FD                       	smpsAlterNote       $FD
00085E95 01                         	dc.b	$01
00085E96 ECF5                       	smpsPSGAlterVol     $F5
00085E98 9206                       	dc.b	nF1, $06
00085E9A EC04                       	smpsPSGAlterVol     $04
00085E9C E701                       	dc.b	smpsNoAttack, $01
00085E9E EC07                       	smpsPSGAlterVol     $07
00085EA0 8003                       	dc.b	nRst, $03
00085EA2 ECF5                       	smpsPSGAlterVol     $F5
00085EA4 9207                       	dc.b	nF1, $07
00085EA6 EC0B                       	smpsPSGAlterVol     $0B
00085EA8 8007                       	dc.b	nRst, $07
00085EAA E103                       	smpsAlterNote       $03
00085EAC 0101                       	dc.b	$01, $01
00085EAE E1FD                       	smpsAlterNote       $FD
00085EB0 01                         	dc.b	$01
00085EB1 E1FA                       	smpsAlterNote       $FA
00085EB3 01                         	dc.b	$01
00085EB4 E1FD                       	smpsAlterNote       $FD
00085EB6 ECF5                       	smpsPSGAlterVol     $F5
00085EB8 9206                       	dc.b	nF1, $06
00085EBA EC0B                       	smpsPSGAlterVol     $0B
00085EBC 8004                       	dc.b	nRst, $04
00085EBE ECF5                       	smpsPSGAlterVol     $F5
00085EC0 9206                       	dc.b	nF1, $06
00085EC2 EC04                       	smpsPSGAlterVol     $04
00085EC4 E701                       	dc.b	smpsNoAttack, $01
00085EC6 EC07                       	smpsPSGAlterVol     $07
00085EC8 8006                       	dc.b	nRst, $06
00085ECA E100                       	smpsAlterNote       $00
00085ECC 01                         	dc.b	$01
00085ECD E104                       	smpsAlterNote       $04
00085ECF 01                         	dc.b	$01
00085ED0 E100                       	smpsAlterNote       $00
00085ED2 01                         	dc.b	$01
00085ED3 E1FA                       	smpsAlterNote       $FA
00085ED5 01                         	dc.b	$01
00085ED6 E1FD                       	smpsAlterNote       $FD
00085ED8 ECF5                       	smpsPSGAlterVol     $F5
00085EDA 9206                       	dc.b	nF1, $06
00085EDC EC04                       	smpsPSGAlterVol     $04
00085EDE E704                       	dc.b	smpsNoAttack, $04
00085EE0 ECFC                       	smpsPSGAlterVol     $FC
00085EE2 9207                       	dc.b	nF1, $07
00085EE4 EC0B                       	smpsPSGAlterVol     $0B
00085EE6 8006                       	dc.b	nRst, $06
00085EE8 E100                       	smpsAlterNote       $00
00085EEA 01                         	dc.b	$01
00085EEB E104                       	smpsAlterNote       $04
00085EED 01                         	dc.b	$01
00085EEE E103                       	smpsAlterNote       $03
00085EF0 01                         	dc.b	$01
00085EF1 E1FD                       	smpsAlterNote       $FD
00085EF3 01                         	dc.b	$01
00085EF4 ECF5                       	smpsPSGAlterVol     $F5
00085EF6 9207                       	dc.b	nF1, $07
00085EF8 EC0B                       	smpsPSGAlterVol     $0B
00085EFA 8004                       	dc.b	nRst, $04
00085EFC ECF5                       	smpsPSGAlterVol     $F5
00085EFE 9206                       	dc.b	nF1, $06
00085F00 EC0B                       	smpsPSGAlterVol     $0B
00085F02 8007                       	dc.b	nRst, $07
00085F04 E103                       	smpsAlterNote       $03
00085F06 0101                       	dc.b	$01, $01
00085F08 E100                       	smpsAlterNote       $00
00085F0A 01                         	dc.b	$01
00085F0B E1FA                       	smpsAlterNote       $FA
00085F0D 01                         	dc.b	$01
00085F0E E1FD                       	smpsAlterNote       $FD
00085F10 ECF5                       	smpsPSGAlterVol     $F5
00085F12 9206                       	dc.b	nF1, $06
00085F14 EC04                       	smpsPSGAlterVol     $04
00085F16 E704                       	dc.b	smpsNoAttack, $04
00085F18 ECFC                       	smpsPSGAlterVol     $FC
00085F1A 9206                       	dc.b	nF1, $06
00085F1C EC04                       	smpsPSGAlterVol     $04
00085F1E E701                       	dc.b	smpsNoAttack, $01
00085F20 EC07                       	smpsPSGAlterVol     $07
00085F22 8006                       	dc.b	nRst, $06
00085F24 E100                       	smpsAlterNote       $00
00085F26 01                         	dc.b	$01
00085F27 E104                       	smpsAlterNote       $04
00085F29 01                         	dc.b	$01
00085F2A E100                       	smpsAlterNote       $00
00085F2C 01                         	dc.b	$01
00085F2D E1FD                       	smpsAlterNote       $FD
00085F2F 01                         	dc.b	$01
00085F30 ECF5                       	smpsPSGAlterVol     $F5
00085F32 9206                       	dc.b	nF1, $06
00085F34 EC04                       	smpsPSGAlterVol     $04
00085F36 E701                       	dc.b	smpsNoAttack, $01
00085F38 EC07                       	smpsPSGAlterVol     $07
00085F3A 8003                       	dc.b	nRst, $03
00085F3C ECF5                       	smpsPSGAlterVol     $F5
00085F3E 9207                       	dc.b	nF1, $07
00085F40 EC0B                       	smpsPSGAlterVol     $0B
00085F42 8007                       	dc.b	nRst, $07
00085F44 E103                       	smpsAlterNote       $03
00085F46 0101                       	dc.b	$01, $01
00085F48 E1FD                       	smpsAlterNote       $FD
00085F4A 01                         	dc.b	$01
00085F4B E1FA                       	smpsAlterNote       $FA
00085F4D 01                         	dc.b	$01
00085F4E E1FD                       	smpsAlterNote       $FD
00085F50 ECF5                       	smpsPSGAlterVol     $F5
00085F52 9106                       	dc.b	nE1, $06
00085F54 EC0B                       	smpsPSGAlterVol     $0B
00085F56 8004                       	dc.b	nRst, $04
00085F58 ECF5                       	smpsPSGAlterVol     $F5
00085F5A 9106                       	dc.b	nE1, $06
00085F5C EC04                       	smpsPSGAlterVol     $04
00085F5E E701                       	dc.b	smpsNoAttack, $01
00085F60 EC07                       	smpsPSGAlterVol     $07
00085F62 8006                       	dc.b	nRst, $06
00085F64 E100                       	smpsAlterNote       $00
00085F66 01                         	dc.b	$01
00085F67 E104                       	smpsAlterNote       $04
00085F69 01                         	dc.b	$01
00085F6A E100                       	smpsAlterNote       $00
00085F6C 01                         	dc.b	$01
00085F6D E1FA                       	smpsAlterNote       $FA
00085F6F 01                         	dc.b	$01
00085F70 E1FD                       	smpsAlterNote       $FD
00085F72 ECF5                       	smpsPSGAlterVol     $F5
00085F74 9106                       	dc.b	nE1, $06
00085F76 EC04                       	smpsPSGAlterVol     $04
00085F78 E701                       	dc.b	smpsNoAttack, $01
00085F7A EC07                       	smpsPSGAlterVol     $07
00085F7C 8003                       	dc.b	nRst, $03
00085F7E ECF5                       	smpsPSGAlterVol     $F5
00085F80 9106                       	dc.b	nE1, $06
00085F82 EC04                       	smpsPSGAlterVol     $04
00085F84 E701                       	dc.b	smpsNoAttack, $01
00085F86 EC07                       	smpsPSGAlterVol     $07
00085F88 8006                       	dc.b	nRst, $06
00085F8A E100                       	smpsAlterNote       $00
00085F8C 01                         	dc.b	$01
00085F8D E104                       	smpsAlterNote       $04
00085F8F 01                         	dc.b	$01
00085F90 E103                       	smpsAlterNote       $03
00085F92 01                         	dc.b	$01
00085F93 E1FD                       	smpsAlterNote       $FD
00085F95 01                         	dc.b	$01
00085F96 ECF5                       	smpsPSGAlterVol     $F5
00085F98 9107                       	dc.b	nE1, $07
00085F9A EC0B                       	smpsPSGAlterVol     $0B
00085F9C 8004                       	dc.b	nRst, $04
00085F9E ECF5                       	smpsPSGAlterVol     $F5
00085FA0 9106                       	dc.b	nE1, $06
00085FA2 EC0B                       	smpsPSGAlterVol     $0B
00085FA4 8007                       	dc.b	nRst, $07
00085FA6 E103                       	smpsAlterNote       $03
00085FA8 0101                       	dc.b	$01, $01
00085FAA E100                       	smpsAlterNote       $00
00085FAC 01                         	dc.b	$01
00085FAD E1FA                       	smpsAlterNote       $FA
00085FAF 01                         	dc.b	$01
00085FB0 E1FD                       	smpsAlterNote       $FD
00085FB2 ECF5                       	smpsPSGAlterVol     $F5
00085FB4 9106                       	dc.b	nE1, $06
00085FB6 EC04                       	smpsPSGAlterVol     $04
00085FB8 E701                       	dc.b	smpsNoAttack, $01
00085FBA EC07                       	smpsPSGAlterVol     $07
00085FBC 8003                       	dc.b	nRst, $03
00085FBE ECF5                       	smpsPSGAlterVol     $F5
00085FC0 9106                       	dc.b	nE1, $06
00085FC2 EC04                       	smpsPSGAlterVol     $04
00085FC4 E701                       	dc.b	smpsNoAttack, $01
00085FC6 EC07                       	smpsPSGAlterVol     $07
00085FC8 8003                       	dc.b	nRst, $03
00085FCA ECF5                       	smpsPSGAlterVol     $F5
00085FCC 9207                       	dc.b	nF1, $07
00085FCE EC0B                       	smpsPSGAlterVol     $0B
00085FD0 8006                       	dc.b	nRst, $06
00085FD2 E100                       	smpsAlterNote       $00
00085FD4 01                         	dc.b	$01
00085FD5 E104                       	smpsAlterNote       $04
00085FD7 01                         	dc.b	$01
00085FD8 E103                       	smpsAlterNote       $03
00085FDA 01                         	dc.b	$01
00085FDB E1FD                       	smpsAlterNote       $FD
00085FDD 01                         	dc.b	$01
00085FDE E1F9                       	smpsAlterNote       $F9
00085FE0 01                         	dc.b	$01
00085FE1 E1FD                       	smpsAlterNote       $FD
00085FE3 01                         	dc.b	$01
00085FE4 E100                       	smpsAlterNote       $00
00085FE6 01                         	dc.b	$01
00085FE7 E104                       	smpsAlterNote       $04
00085FE9 01                         	dc.b	$01
00085FEA E1FD                       	smpsAlterNote       $FD
00085FEC ECF5                       	smpsPSGAlterVol     $F5
00085FEE 9203 9203                  	dc.b	nF1, $03, nF1, $03
00085FF2 EC04                       	smpsPSGAlterVol     $04
00085FF4 E701                       	dc.b	smpsNoAttack, $01
00085FF6 EC07                       	smpsPSGAlterVol     $07
00085FF8 8009                       	dc.b	nRst, $09
00085FFA E100                       	smpsAlterNote       $00
00085FFC 01                         	dc.b	$01
00085FFD E104                       	smpsAlterNote       $04
00085FFF 01                         	dc.b	$01
00086000 E103                       	smpsAlterNote       $03
00086002 01                         	dc.b	$01
00086003 E1FD                       	smpsAlterNote       $FD
00086005 01                         	dc.b	$01
00086006 E1F9                       	smpsAlterNote       $F9
00086008 01                         	dc.b	$01
00086009 E1FD                       	smpsAlterNote       $FD
0008600B 01                         	dc.b	$01
0008600C E100                       	smpsAlterNote       $00
0008600E 01                         	dc.b	$01
0008600F E104                       	smpsAlterNote       $04
00086011 01                         	dc.b	$01
00086012 E100                       	smpsAlterNote       $00
00086014 01                         	dc.b	$01
00086015 E1FA                       	smpsAlterNote       $FA
00086017 01                         	dc.b	$01
00086018 E1F9                       	smpsAlterNote       $F9
0008601A 01                         	dc.b	$01
0008601B E1FD                       	smpsAlterNote       $FD
0008601D 01                         	dc.b	$01
0008601E E103                       	smpsAlterNote       $03
00086020 0101                       	dc.b	$01, $01
00086022 E100                       	smpsAlterNote       $00
00086024 01                         	dc.b	$01
00086025 E1FD                       	smpsAlterNote       $FD
00086027 ECF5                       	smpsPSGAlterVol     $F5
00086029 9202                       	dc.b	nF1, $02
0008602B EC04                       	smpsPSGAlterVol     $04
0008602D E701                       	dc.b	smpsNoAttack, $01
0008602F ECFC                       	smpsPSGAlterVol     $FC
00086031 9106                       	dc.b	nE1, $06
00086033 EC04                       	smpsPSGAlterVol     $04
00086035 E701                       	dc.b	smpsNoAttack, $01
00086037 EC07                       	smpsPSGAlterVol     $07
00086039 8006                       	dc.b	nRst, $06
0008603B E100                       	smpsAlterNote       $00
0008603D 01                         	dc.b	$01
0008603E E104                       	smpsAlterNote       $04
00086040 01                         	dc.b	$01
00086041 E100                       	smpsAlterNote       $00
00086043 01                         	dc.b	$01
00086044 E1FD                       	smpsAlterNote       $FD
00086046 01                         	dc.b	$01
00086047 E1F9                       	smpsAlterNote       $F9
00086049 01                         	dc.b	$01
0008604A E1FD                       	smpsAlterNote       $FD
0008604C 01                         	dc.b	$01
0008604D E103                       	smpsAlterNote       $03
0008604F 01                         	dc.b	$01
00086050 E104                       	smpsAlterNote       $04
00086052 01                         	dc.b	$01
00086053 E1FD                       	smpsAlterNote       $FD
00086055 ECF5                       	smpsPSGAlterVol     $F5
00086057 9102                       	dc.b	nE1, $02
00086059 EC04                       	smpsPSGAlterVol     $04
0008605B E701                       	dc.b	smpsNoAttack, $01
0008605D ECFC                       	smpsPSGAlterVol     $FC
0008605F 920D                       	dc.b	nF1, $0D
00086061 E100                       	smpsAlterNote       $00
00086063 E701                       	dc.b	smpsNoAttack, $01
00086065 E104                       	smpsAlterNote       $04
00086067 E701                       	dc.b	smpsNoAttack, $01
00086069 E100                       	smpsAlterNote       $00
0008606B E701                       	dc.b	smpsNoAttack, $01
0008606D E1FD                       	smpsAlterNote       $FD
0008606F E701                       	dc.b	smpsNoAttack, $01
00086071 E1F9                       	smpsAlterNote       $F9
00086073 E701                       	dc.b	smpsNoAttack, $01
00086075 E1FD                       	smpsAlterNote       $FD
00086077 E701                       	dc.b	smpsNoAttack, $01
00086079 E103                       	smpsAlterNote       $03
0008607B E701                       	dc.b	smpsNoAttack, $01
0008607D E104                       	smpsAlterNote       $04
0008607F E701                       	dc.b	smpsNoAttack, $01
00086081 E100                       	smpsAlterNote       $00
00086083 E701                       	dc.b	smpsNoAttack, $01
00086085 E1FA                       	smpsAlterNote       $FA
00086087 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008608B E1FD                       	smpsAlterNote       $FD
0008608D E701                       	dc.b	smpsNoAttack, $01
0008608F E103                       	smpsAlterNote       $03
00086091 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086095 E1FD                       	smpsAlterNote       $FD
00086097 E701                       	dc.b	smpsNoAttack, $01
00086099 E1F9                       	smpsAlterNote       $F9
0008609B E701                       	dc.b	smpsNoAttack, $01
0008609D E1FA                       	smpsAlterNote       $FA
0008609F E701                       	dc.b	smpsNoAttack, $01
000860A1 E100                       	smpsAlterNote       $00
000860A3 EC04                       	smpsPSGAlterVol     $04
000860A5 E701                       	dc.b	smpsNoAttack, $01
000860A7 EC07                       	smpsPSGAlterVol     $07
000860A9 E104                       	smpsAlterNote       $04
000860AB 8001                       	dc.b	nRst, $01
000860AD E100                       	smpsAlterNote       $00
000860AF 01                         	dc.b	$01
000860B0 E1FD                       	smpsAlterNote       $FD
000860B2 01                         	dc.b	$01
000860B3 E1F9                       	smpsAlterNote       $F9
000860B5 01                         	dc.b	$01
000860B6 E1FD                       	smpsAlterNote       $FD
000860B8 01                         	dc.b	$01
000860B9 E103                       	smpsAlterNote       $03
000860BB 01                         	dc.b	$01
000860BC E104                       	smpsAlterNote       $04
000860BE 01                         	dc.b	$01
000860BF E1FD                       	smpsAlterNote       $FD
000860C1 ECF5                       	smpsPSGAlterVol     $F5
000860C3 9106                       	dc.b	nE1, $06
000860C5 EC04                       	smpsPSGAlterVol     $04
000860C7 E701                       	dc.b	smpsNoAttack, $01
000860C9 EC07                       	smpsPSGAlterVol     $07
000860CB 8003                       	dc.b	nRst, $03
000860CD ECF5                       	smpsPSGAlterVol     $F5
000860CF 9106                       	dc.b	nE1, $06
000860D1 EC04                       	smpsPSGAlterVol     $04
000860D3 E701                       	dc.b	smpsNoAttack, $01
000860D5 EC07                       	smpsPSGAlterVol     $07
000860D7 8006                       	dc.b	nRst, $06
000860D9 E100                       	smpsAlterNote       $00
000860DB 01                         	dc.b	$01
000860DC E104                       	smpsAlterNote       $04
000860DE 01                         	dc.b	$01
000860DF E100                       	smpsAlterNote       $00
000860E1 01                         	dc.b	$01
000860E2 E1FA                       	smpsAlterNote       $FA
000860E4 01                         	dc.b	$01
000860E5 E1FD                       	smpsAlterNote       $FD
000860E7 ECF5                       	smpsPSGAlterVol     $F5
000860E9 9206                       	dc.b	nF1, $06
000860EB EC04                       	smpsPSGAlterVol     $04
000860ED E701                       	dc.b	smpsNoAttack, $01
000860EF EC07                       	smpsPSGAlterVol     $07
000860F1 8003                       	dc.b	nRst, $03
000860F3 ECF5                       	smpsPSGAlterVol     $F5
000860F5 9207                       	dc.b	nF1, $07
000860F7 EC0B                       	smpsPSGAlterVol     $0B
000860F9 8006                       	dc.b	nRst, $06
000860FB E100                       	smpsAlterNote       $00
000860FD 01                         	dc.b	$01
000860FE E103                       	smpsAlterNote       $03
00086100 0101                       	dc.b	$01, $01
00086102 E1FD                       	smpsAlterNote       $FD
00086104 01                         	dc.b	$01
00086105 ECF5                       	smpsPSGAlterVol     $F5
00086107 9107                       	dc.b	nE1, $07
00086109 EC0B                       	smpsPSGAlterVol     $0B
0008610B 8004                       	dc.b	nRst, $04
0008610D ECF5                       	smpsPSGAlterVol     $F5
0008610F 9106                       	dc.b	nE1, $06
00086111 EC04                       	smpsPSGAlterVol     $04
00086113 E701                       	dc.b	smpsNoAttack, $01
00086115 EC07                       	smpsPSGAlterVol     $07
00086117 8006                       	dc.b	nRst, $06
00086119 E103                       	smpsAlterNote       $03
0008611B 01                         	dc.b	$01
0008611C E104                       	smpsAlterNote       $04
0008611E 01                         	dc.b	$01
0008611F E100                       	smpsAlterNote       $00
00086121 01                         	dc.b	$01
00086122 E1FA                       	smpsAlterNote       $FA
00086124 01                         	dc.b	$01
00086125 E1FD                       	smpsAlterNote       $FD
00086127 ECF5                       	smpsPSGAlterVol     $F5
00086129 9106                       	dc.b	nE1, $06
0008612B EC04                       	smpsPSGAlterVol     $04
0008612D E701                       	dc.b	smpsNoAttack, $01
0008612F EC07                       	smpsPSGAlterVol     $07
00086131 8003                       	dc.b	nRst, $03
00086133 ECF5                       	smpsPSGAlterVol     $F5
00086135 9106                       	dc.b	nE1, $06
00086137 EC04                       	smpsPSGAlterVol     $04
00086139 E701                       	dc.b	smpsNoAttack, $01
0008613B EC07                       	smpsPSGAlterVol     $07
0008613D 8003                       	dc.b	nRst, $03
0008613F ECF5                       	smpsPSGAlterVol     $F5
00086141 9207                       	dc.b	nF1, $07
00086143 EC0B                       	smpsPSGAlterVol     $0B
00086145 8006                       	dc.b	nRst, $06
00086147 E100                       	smpsAlterNote       $00
00086149 01                         	dc.b	$01
0008614A E103                       	smpsAlterNote       $03
0008614C 0101                       	dc.b	$01, $01
0008614E E1FD                       	smpsAlterNote       $FD
00086150 01                         	dc.b	$01
00086151 E1F9                       	smpsAlterNote       $F9
00086153 01                         	dc.b	$01
00086154 E1FA                       	smpsAlterNote       $FA
00086156 01                         	dc.b	$01
00086157 E100                       	smpsAlterNote       $00
00086159 01                         	dc.b	$01
0008615A E104                       	smpsAlterNote       $04
0008615C 01                         	dc.b	$01
0008615D E1FD                       	smpsAlterNote       $FD
0008615F ECF5                       	smpsPSGAlterVol     $F5
00086161 9203 9203                  	dc.b	nF1, $03, nF1, $03
00086165 EC04                       	smpsPSGAlterVol     $04
00086167 E701                       	dc.b	smpsNoAttack, $01
00086169 EC07                       	smpsPSGAlterVol     $07
0008616B 8009                       	dc.b	nRst, $09
0008616D E100                       	smpsAlterNote       $00
0008616F 01                         	dc.b	$01
00086170 E103                       	smpsAlterNote       $03
00086172 0101                       	dc.b	$01, $01
00086174 E1FD                       	smpsAlterNote       $FD
00086176 01                         	dc.b	$01
00086177 E1F9                       	smpsAlterNote       $F9
00086179 01                         	dc.b	$01
0008617A E1FA                       	smpsAlterNote       $FA
0008617C 01                         	dc.b	$01
0008617D E100                       	smpsAlterNote       $00
0008617F 01                         	dc.b	$01
00086180 E104                       	smpsAlterNote       $04
00086182 01                         	dc.b	$01
00086183 E100                       	smpsAlterNote       $00
00086185 01                         	dc.b	$01
00086186 E1FD                       	smpsAlterNote       $FD
00086188 01                         	dc.b	$01
00086189 E1F9                       	smpsAlterNote       $F9
0008618B 01                         	dc.b	$01
0008618C E1FD                       	smpsAlterNote       $FD
0008618E 01                         	dc.b	$01
0008618F E103                       	smpsAlterNote       $03
00086191 01                         	dc.b	$01
00086192 E104                       	smpsAlterNote       $04
00086194 01                         	dc.b	$01
00086195 E100                       	smpsAlterNote       $00
00086197 01                         	dc.b	$01
00086198 E1FD                       	smpsAlterNote       $FD
0008619A ECF5                       	smpsPSGAlterVol     $F5
0008619C 9203 9106                  	dc.b	nF1, $03, nE1, $06
000861A0 EC04                       	smpsPSGAlterVol     $04
000861A2 E701                       	dc.b	smpsNoAttack, $01
000861A4 EC07                       	smpsPSGAlterVol     $07
000861A6 8006                       	dc.b	nRst, $06
000861A8 E100                       	smpsAlterNote       $00
000861AA 01                         	dc.b	$01
000861AB E104                       	smpsAlterNote       $04
000861AD 01                         	dc.b	$01
000861AE E103                       	smpsAlterNote       $03
000861B0 01                         	dc.b	$01
000861B1 E1FD                       	smpsAlterNote       $FD
000861B3 01                         	dc.b	$01
000861B4 E1F9                       	smpsAlterNote       $F9
000861B6 01                         	dc.b	$01
000861B7 E1FD                       	smpsAlterNote       $FD
000861B9 01                         	dc.b	$01
000861BA E100                       	smpsAlterNote       $00
000861BC 01                         	dc.b	$01
000861BD E104                       	smpsAlterNote       $04
000861BF 01                         	dc.b	$01
000861C0 E1FD                       	smpsAlterNote       $FD
000861C2 ECF5                       	smpsPSGAlterVol     $F5
000861C4 9103 920D                  	dc.b	nE1, $03, nF1, $0D
000861C8 E100                       	smpsAlterNote       $00
000861CA E701                       	dc.b	smpsNoAttack, $01
000861CC E104                       	smpsAlterNote       $04
000861CE E701                       	dc.b	smpsNoAttack, $01
000861D0 E100                       	smpsAlterNote       $00
000861D2 E701                       	dc.b	smpsNoAttack, $01
000861D4 E1FD                       	smpsAlterNote       $FD
000861D6 E701                       	dc.b	smpsNoAttack, $01
000861D8 E1F9                       	smpsAlterNote       $F9
000861DA E701                       	dc.b	smpsNoAttack, $01
000861DC E1FD                       	smpsAlterNote       $FD
000861DE E701                       	dc.b	smpsNoAttack, $01
000861E0 E103                       	smpsAlterNote       $03
000861E2 E701                       	dc.b	smpsNoAttack, $01
000861E4 E104                       	smpsAlterNote       $04
000861E6 E701                       	dc.b	smpsNoAttack, $01
000861E8 E100                       	smpsAlterNote       $00
000861EA E701                       	dc.b	smpsNoAttack, $01
000861EC E1FA                       	smpsAlterNote       $FA
000861EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861F2 E1FD                       	smpsAlterNote       $FD
000861F4 E701                       	dc.b	smpsNoAttack, $01
000861F6 E103                       	smpsAlterNote       $03
000861F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861FC E100                       	smpsAlterNote       $00
000861FE E701                       	dc.b	smpsNoAttack, $01
00086200 E1FA                       	smpsAlterNote       $FA
00086202 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086206 E100                       	smpsAlterNote       $00
00086208 EC04                       	smpsPSGAlterVol     $04
0008620A E701                       	dc.b	smpsNoAttack, $01
0008620C EC07                       	smpsPSGAlterVol     $07
0008620E E104                       	smpsAlterNote       $04
00086210 8001                       	dc.b	nRst, $01
00086212 E103                       	smpsAlterNote       $03
00086214 01                         	dc.b	$01
00086215 E1FD                       	smpsAlterNote       $FD
00086217 01                         	dc.b	$01
00086218 E1F9                       	smpsAlterNote       $F9
0008621A 01                         	dc.b	$01
0008621B E1FD                       	smpsAlterNote       $FD
0008621D 01                         	dc.b	$01
0008621E E100                       	smpsAlterNote       $00
00086220 01                         	dc.b	$01
00086221 E104                       	smpsAlterNote       $04
00086223 01                         	dc.b	$01
00086224 E1FD                       	smpsAlterNote       $FD
00086226 ECF5                       	smpsPSGAlterVol     $F5
00086228 9106                       	dc.b	nE1, $06
0008622A EC04                       	smpsPSGAlterVol     $04
0008622C E701                       	dc.b	smpsNoAttack, $01
0008622E EC07                       	smpsPSGAlterVol     $07
00086230 8003                       	dc.b	nRst, $03
00086232 ECF5                       	smpsPSGAlterVol     $F5
00086234 9106                       	dc.b	nE1, $06
00086236 EC04                       	smpsPSGAlterVol     $04
00086238 E701                       	dc.b	smpsNoAttack, $01
0008623A EC07                       	smpsPSGAlterVol     $07
0008623C 8006                       	dc.b	nRst, $06
0008623E E100                       	smpsAlterNote       $00
00086240 01                         	dc.b	$01
00086241 E104                       	smpsAlterNote       $04
00086243 01                         	dc.b	$01
00086244 E100                       	smpsAlterNote       $00
00086246 01                         	dc.b	$01
00086247 E1FD                       	smpsAlterNote       $FD
00086249 01                         	dc.b	$01
0008624A ECF5                       	smpsPSGAlterVol     $F5
0008624C 9206                       	dc.b	nF1, $06
0008624E EC04                       	smpsPSGAlterVol     $04
00086250 E701                       	dc.b	smpsNoAttack, $01
00086252 EC07                       	smpsPSGAlterVol     $07
00086254 8003                       	dc.b	nRst, $03
00086256 ECF5                       	smpsPSGAlterVol     $F5
00086258 9207                       	dc.b	nF1, $07
0008625A EC0B                       	smpsPSGAlterVol     $0B
0008625C 8007                       	dc.b	nRst, $07
0008625E E103                       	smpsAlterNote       $03
00086260 0101                       	dc.b	$01, $01
00086262 E1FD                       	smpsAlterNote       $FD
00086264 01                         	dc.b	$01
00086265 E1FA                       	smpsAlterNote       $FA
00086267 01                         	dc.b	$01
00086268 E1FD                       	smpsAlterNote       $FD
0008626A ECF5                       	smpsPSGAlterVol     $F5
0008626C 9106                       	dc.b	nE1, $06
0008626E EC0B                       	smpsPSGAlterVol     $0B
00086270 8004                       	dc.b	nRst, $04
00086272 ECF5                       	smpsPSGAlterVol     $F5
00086274 9106                       	dc.b	nE1, $06
00086276 EC04                       	smpsPSGAlterVol     $04
00086278 E701                       	dc.b	smpsNoAttack, $01
0008627A EC07                       	smpsPSGAlterVol     $07
0008627C 8006                       	dc.b	nRst, $06
0008627E E100                       	smpsAlterNote       $00
00086280 01                         	dc.b	$01
00086281 E104                       	smpsAlterNote       $04
00086283 01                         	dc.b	$01
00086284 E100                       	smpsAlterNote       $00
00086286 01                         	dc.b	$01
00086287 E1FA                       	smpsAlterNote       $FA
00086289 01                         	dc.b	$01
0008628A E1FD                       	smpsAlterNote       $FD
0008628C ECF5                       	smpsPSGAlterVol     $F5
0008628E 9206                       	dc.b	nF1, $06
00086290 EC04                       	smpsPSGAlterVol     $04
00086292 E701                       	dc.b	smpsNoAttack, $01
00086294 EC07                       	smpsPSGAlterVol     $07
00086296 8003                       	dc.b	nRst, $03
00086298 ECF5                       	smpsPSGAlterVol     $F5
0008629A 9206                       	dc.b	nF1, $06
0008629C EC04                       	smpsPSGAlterVol     $04
0008629E E701                       	dc.b	smpsNoAttack, $01
000862A0 EC07                       	smpsPSGAlterVol     $07
000862A2 8006                       	dc.b	nRst, $06
000862A4 E100                       	smpsAlterNote       $00
000862A6 01                         	dc.b	$01
000862A7 E104                       	smpsAlterNote       $04
000862A9 01                         	dc.b	$01
000862AA E103                       	smpsAlterNote       $03
000862AC 01                         	dc.b	$01
000862AD E1FD                       	smpsAlterNote       $FD
000862AF 01                         	dc.b	$01
000862B0 ECF5                       	smpsPSGAlterVol     $F5
000862B2 9107                       	dc.b	nE1, $07
000862B4 EC0B                       	smpsPSGAlterVol     $0B
000862B6 8004                       	dc.b	nRst, $04
000862B8 ECF5                       	smpsPSGAlterVol     $F5
000862BA 9106                       	dc.b	nE1, $06
000862BC EC0B                       	smpsPSGAlterVol     $0B
000862BE 8007                       	dc.b	nRst, $07
000862C0 E103                       	smpsAlterNote       $03
000862C2 0101                       	dc.b	$01, $01
000862C4 E100                       	smpsAlterNote       $00
000862C6 01                         	dc.b	$01
000862C7 E1FA                       	smpsAlterNote       $FA
000862C9 01                         	dc.b	$01
000862CA E1FD                       	smpsAlterNote       $FD
000862CC ECF5                       	smpsPSGAlterVol     $F5
000862CE 9206                       	dc.b	nF1, $06
000862D0 EC04                       	smpsPSGAlterVol     $04
000862D2 E701                       	dc.b	smpsNoAttack, $01
000862D4 EC07                       	smpsPSGAlterVol     $07
000862D6 8003                       	dc.b	nRst, $03
000862D8 ECF5                       	smpsPSGAlterVol     $F5
000862DA 9206                       	dc.b	nF1, $06
000862DC EC04                       	smpsPSGAlterVol     $04
000862DE E701                       	dc.b	smpsNoAttack, $01
000862E0 EC07                       	smpsPSGAlterVol     $07
000862E2 8006                       	dc.b	nRst, $06
000862E4 E100                       	smpsAlterNote       $00
000862E6 01                         	dc.b	$01
000862E7 E104                       	smpsAlterNote       $04
000862E9 01                         	dc.b	$01
000862EA E100                       	smpsAlterNote       $00
000862EC 01                         	dc.b	$01
000862ED E1FD                       	smpsAlterNote       $FD
000862EF 01                         	dc.b	$01
000862F0 ECF5                       	smpsPSGAlterVol     $F5
000862F2 9106                       	dc.b	nE1, $06
000862F4 EC04                       	smpsPSGAlterVol     $04
000862F6 E701                       	dc.b	smpsNoAttack, $01
000862F8 EC07                       	smpsPSGAlterVol     $07
000862FA 8003                       	dc.b	nRst, $03
000862FC ECF5                       	smpsPSGAlterVol     $F5
000862FE 9107 9106                  	dc.b	nE1, $07, nE1, $06
00086302 EC04                       	smpsPSGAlterVol     $04
00086304 E701                       	dc.b	smpsNoAttack, $01
00086306 ECFC                       	smpsPSGAlterVol     $FC
00086308 9103                       	dc.b	nE1, $03
0008630A EC04                       	smpsPSGAlterVol     $04
0008630C E701                       	dc.b	smpsNoAttack, $01
0008630E ECFC                       	smpsPSGAlterVol     $FC
00086310 9102                       	dc.b	nE1, $02
00086312 EC04                       	smpsPSGAlterVol     $04
00086314 E701                       	dc.b	smpsNoAttack, $01
00086316 ECFC                       	smpsPSGAlterVol     $FC
00086318 9103                       	dc.b	nE1, $03
0008631A EC0B                       	smpsPSGAlterVol     $0B
0008631C 800A                       	dc.b	nRst, $0A
0008631E E100                       	smpsAlterNote       $00
00086320 01                         	dc.b	$01
00086321 E104                       	smpsAlterNote       $04
00086323 01                         	dc.b	$01
00086324 E100                       	smpsAlterNote       $00
00086326 01                         	dc.b	$01
00086327 E1FA                       	smpsAlterNote       $FA
00086329 01                         	dc.b	$01
0008632A E1F9                       	smpsAlterNote       $F9
0008632C 01                         	dc.b	$01
0008632D E1FD                       	smpsAlterNote       $FD
0008632F 01                         	dc.b	$01
00086330 E103                       	smpsAlterNote       $03
00086332 0101                       	dc.b	$01, $01
00086334 E100                       	smpsAlterNote       $00
00086336 01                         	dc.b	$01
00086337 E1FA                       	smpsAlterNote       $FA
00086339 0101                       	dc.b	$01, $01
0008633B E1FD                       	smpsAlterNote       $FD
0008633D ECF5                       	smpsPSGAlterVol     $F5
0008633F 9206                       	dc.b	nF1, $06
00086341 EC04                       	smpsPSGAlterVol     $04
00086343 E704                       	dc.b	smpsNoAttack, $04
00086345 ECFC                       	smpsPSGAlterVol     $FC
00086347 9206                       	dc.b	nF1, $06
00086349 EC04                       	smpsPSGAlterVol     $04
0008634B E701                       	dc.b	smpsNoAttack, $01
0008634D EC07                       	smpsPSGAlterVol     $07
0008634F 8006                       	dc.b	nRst, $06
00086351 E100                       	smpsAlterNote       $00
00086353 01                         	dc.b	$01
00086354 E104                       	smpsAlterNote       $04
00086356 01                         	dc.b	$01
00086357 E103                       	smpsAlterNote       $03
00086359 01                         	dc.b	$01
0008635A E1FD                       	smpsAlterNote       $FD
0008635C 01                         	dc.b	$01
0008635D ECF5                       	smpsPSGAlterVol     $F5
0008635F 9407                       	dc.b	nG1, $07
00086361 EC0B                       	smpsPSGAlterVol     $0B
00086363 8004                       	dc.b	nRst, $04
00086365 ECF5                       	smpsPSGAlterVol     $F5
00086367 9406                       	dc.b	nG1, $06
00086369 EC0B                       	smpsPSGAlterVol     $0B
0008636B 8007                       	dc.b	nRst, $07
0008636D E103                       	smpsAlterNote       $03
0008636F 0101                       	dc.b	$01, $01
00086371 E1FD                       	smpsAlterNote       $FD
00086373 01                         	dc.b	$01
00086374 E1F9                       	smpsAlterNote       $F9
00086376 01                         	dc.b	$01
00086377 E1FD                       	smpsAlterNote       $FD
00086379 ECF5                       	smpsPSGAlterVol     $F5
0008637B 9206                       	dc.b	nF1, $06
0008637D EC04                       	smpsPSGAlterVol     $04
0008637F E701                       	dc.b	smpsNoAttack, $01
00086381 EC07                       	smpsPSGAlterVol     $07
00086383 8003                       	dc.b	nRst, $03
00086385 ECF5                       	smpsPSGAlterVol     $F5
00086387 9206                       	dc.b	nF1, $06
00086389 EC04                       	smpsPSGAlterVol     $04
0008638B E701                       	dc.b	smpsNoAttack, $01
0008638D EC07                       	smpsPSGAlterVol     $07
0008638F 8006                       	dc.b	nRst, $06
00086391 E100                       	smpsAlterNote       $00
00086393 01                         	dc.b	$01
00086394 E104                       	smpsAlterNote       $04
00086396 01                         	dc.b	$01
00086397 E100                       	smpsAlterNote       $00
00086399 01                         	dc.b	$01
0008639A E1FA                       	smpsAlterNote       $FA
0008639C 01                         	dc.b	$01
0008639D E1FD                       	smpsAlterNote       $FD
0008639F ECF5                       	smpsPSGAlterVol     $F5
000863A1 9206                       	dc.b	nF1, $06
000863A3 EC04                       	smpsPSGAlterVol     $04
000863A5 E701                       	dc.b	smpsNoAttack, $01
000863A7 EC07                       	smpsPSGAlterVol     $07
000863A9 8003                       	dc.b	nRst, $03
000863AB ECF5                       	smpsPSGAlterVol     $F5
000863AD 9107                       	dc.b	nE1, $07
000863AF EC0B                       	smpsPSGAlterVol     $0B
000863B1 8006                       	dc.b	nRst, $06
000863B3 E100                       	smpsAlterNote       $00
000863B5 01                         	dc.b	$01
000863B6 E103                       	smpsAlterNote       $03
000863B8 0101                       	dc.b	$01, $01
000863BA E1FD                       	smpsAlterNote       $FD
000863BC 01                         	dc.b	$01
000863BD ECF5                       	smpsPSGAlterVol     $F5
000863BF 9207                       	dc.b	nF1, $07
000863C1 EC0B                       	smpsPSGAlterVol     $0B
000863C3 8004                       	dc.b	nRst, $04
000863C5 ECF5                       	smpsPSGAlterVol     $F5
000863C7 9206                       	dc.b	nF1, $06
000863C9 EC04                       	smpsPSGAlterVol     $04
000863CB E701                       	dc.b	smpsNoAttack, $01
000863CD EC07                       	smpsPSGAlterVol     $07
000863CF 8006                       	dc.b	nRst, $06
000863D1 E103                       	smpsAlterNote       $03
000863D3 01                         	dc.b	$01
000863D4 E104                       	smpsAlterNote       $04
000863D6 01                         	dc.b	$01
000863D7 E100                       	smpsAlterNote       $00
000863D9 01                         	dc.b	$01
000863DA E1FB                       	smpsAlterNote       $FB
000863DC 01                         	dc.b	$01
000863DD E1FD                       	smpsAlterNote       $FD
000863DF ECF5                       	smpsPSGAlterVol     $F5
000863E1 9406                       	dc.b	nG1, $06
000863E3 EC04                       	smpsPSGAlterVol     $04
000863E5 E701                       	dc.b	smpsNoAttack, $01
000863E7 EC07                       	smpsPSGAlterVol     $07
000863E9 8003                       	dc.b	nRst, $03
000863EB ECF5                       	smpsPSGAlterVol     $F5
000863ED 9406                       	dc.b	nG1, $06
000863EF EC04                       	smpsPSGAlterVol     $04
000863F1 E701                       	dc.b	smpsNoAttack, $01
000863F3 EC07                       	smpsPSGAlterVol     $07
000863F5 8006                       	dc.b	nRst, $06
000863F7 E100                       	smpsAlterNote       $00
000863F9 01                         	dc.b	$01
000863FA E104                       	smpsAlterNote       $04
000863FC 01                         	dc.b	$01
000863FD E100                       	smpsAlterNote       $00
000863FF 01                         	dc.b	$01
00086400 E1FD                       	smpsAlterNote       $FD
00086402 01                         	dc.b	$01
00086403 ECF5                       	smpsPSGAlterVol     $F5
00086405 9206                       	dc.b	nF1, $06
00086407 EC04                       	smpsPSGAlterVol     $04
00086409 E701                       	dc.b	smpsNoAttack, $01
0008640B EC07                       	smpsPSGAlterVol     $07
0008640D 8003                       	dc.b	nRst, $03
0008640F ECF5                       	smpsPSGAlterVol     $F5
00086411 9207                       	dc.b	nF1, $07
00086413 EC0B                       	smpsPSGAlterVol     $0B
00086415 8007                       	dc.b	nRst, $07
00086417 E103                       	smpsAlterNote       $03
00086419 0101                       	dc.b	$01, $01
0008641B E1FD                       	smpsAlterNote       $FD
0008641D 01                         	dc.b	$01
0008641E E1FA                       	smpsAlterNote       $FA
00086420 01                         	dc.b	$01
00086421 E1FD                       	smpsAlterNote       $FD
00086423 ECF5                       	smpsPSGAlterVol     $F5
00086425 9206                       	dc.b	nF1, $06
00086427 EC0B                       	smpsPSGAlterVol     $0B
00086429 8004                       	dc.b	nRst, $04
0008642B ECF5                       	smpsPSGAlterVol     $F5
0008642D 9206                       	dc.b	nF1, $06
0008642F EC04                       	smpsPSGAlterVol     $04
00086431 E701                       	dc.b	smpsNoAttack, $01
00086433 EC07                       	smpsPSGAlterVol     $07
00086435 8006                       	dc.b	nRst, $06
00086437 E100                       	smpsAlterNote       $00
00086439 01                         	dc.b	$01
0008643A E104                       	smpsAlterNote       $04
0008643C 01                         	dc.b	$01
0008643D E100                       	smpsAlterNote       $00
0008643F 01                         	dc.b	$01
00086440 E1FA                       	smpsAlterNote       $FA
00086442 01                         	dc.b	$01
00086443 E1FD                       	smpsAlterNote       $FD
00086445 ECF5                       	smpsPSGAlterVol     $F5
00086447 9206                       	dc.b	nF1, $06
00086449 EC04                       	smpsPSGAlterVol     $04
0008644B E701                       	dc.b	smpsNoAttack, $01
0008644D EC07                       	smpsPSGAlterVol     $07
0008644F 8003                       	dc.b	nRst, $03
00086451 ECF5                       	smpsPSGAlterVol     $F5
00086453 9207                       	dc.b	nF1, $07
00086455 EC0B                       	smpsPSGAlterVol     $0B
00086457 8006                       	dc.b	nRst, $06
00086459 E100                       	smpsAlterNote       $00
0008645B 01                         	dc.b	$01
0008645C E103                       	smpsAlterNote       $03
0008645E 0101                       	dc.b	$01, $01
00086460 E1FD                       	smpsAlterNote       $FD
00086462 01                         	dc.b	$01
00086463 ECF5                       	smpsPSGAlterVol     $F5
00086465 9207                       	dc.b	nF1, $07
00086467 EC0B                       	smpsPSGAlterVol     $0B
00086469 8004                       	dc.b	nRst, $04
0008646B ECF5                       	smpsPSGAlterVol     $F5
0008646D 9206                       	dc.b	nF1, $06
0008646F EC0B                       	smpsPSGAlterVol     $0B
00086471 8007                       	dc.b	nRst, $07
00086473 E103                       	smpsAlterNote       $03
00086475 0101                       	dc.b	$01, $01
00086477 E100                       	smpsAlterNote       $00
00086479 01                         	dc.b	$01
0008647A E1FA                       	smpsAlterNote       $FA
0008647C 01                         	dc.b	$01
0008647D E1FD                       	smpsAlterNote       $FD
0008647F ECF5                       	smpsPSGAlterVol     $F5
00086481 9206                       	dc.b	nF1, $06
00086483 EC04                       	smpsPSGAlterVol     $04
00086485 E701                       	dc.b	smpsNoAttack, $01
00086487 EC07                       	smpsPSGAlterVol     $07
00086489 8003                       	dc.b	nRst, $03
0008648B ECF5                       	smpsPSGAlterVol     $F5
0008648D 9206                       	dc.b	nF1, $06
0008648F EC04                       	smpsPSGAlterVol     $04
00086491 E701                       	dc.b	smpsNoAttack, $01
00086493 EC07                       	smpsPSGAlterVol     $07
00086495 8006                       	dc.b	nRst, $06
00086497 E100                       	smpsAlterNote       $00
00086499 01                         	dc.b	$01
0008649A E104                       	smpsAlterNote       $04
0008649C 01                         	dc.b	$01
0008649D E100                       	smpsAlterNote       $00
0008649F 01                         	dc.b	$01
000864A0 E1FD                       	smpsAlterNote       $FD
000864A2 01                         	dc.b	$01
000864A3 ECF5                       	smpsPSGAlterVol     $F5
000864A5 9206                       	dc.b	nF1, $06
000864A7 EC04                       	smpsPSGAlterVol     $04
000864A9 E701                       	dc.b	smpsNoAttack, $01
000864AB EC07                       	smpsPSGAlterVol     $07
000864AD 8003                       	dc.b	nRst, $03
000864AF ECF5                       	smpsPSGAlterVol     $F5
000864B1 9207                       	dc.b	nF1, $07
000864B3 EC0B                       	smpsPSGAlterVol     $0B
000864B5 8007                       	dc.b	nRst, $07
000864B7 E104                       	smpsAlterNote       $04
000864B9 0101                       	dc.b	$01, $01
000864BB E1FB                       	smpsAlterNote       $FB
000864BD 01                         	dc.b	$01
000864BE E1F6                       	smpsAlterNote       $F6
000864C0 0101                       	dc.b	$01, $01
000864C2 E1FF                       	smpsAlterNote       $FF
000864C4 01                         	dc.b	$01
000864C5 E105                       	smpsAlterNote       $05
000864C7 01                         	dc.b	$01
000864C8 E104                       	smpsAlterNote       $04
000864CA 01                         	dc.b	$01
000864CB E1FB                       	smpsAlterNote       $FB
000864CD 01                         	dc.b	$01
000864CE E1F5                       	smpsAlterNote       $F5
000864D0 01                         	dc.b	$01
000864D1 E1FC                       	smpsAlterNote       $FC
000864D3 ECF5                       	smpsPSGAlterVol     $F5
000864D5 8B0E                       	dc.b	nBb0, $0E
000864D7 E102                       	smpsAlterNote       $02
000864D9 EC0B                       	smpsPSGAlterVol     $0B
000864DB 8001                       	dc.b	nRst, $01
000864DD E101                       	smpsAlterNote       $01
000864DF 01                         	dc.b	$01
000864E0 E1FC                       	smpsAlterNote       $FC
000864E2 01                         	dc.b	$01
000864E3 E1F9                       	smpsAlterNote       $F9
000864E5 0101                       	dc.b	$01, $01
000864E7 E1FF                       	smpsAlterNote       $FF
000864E9 01                         	dc.b	$01
000864EA E102                       	smpsAlterNote       $02
000864EC 01                         	dc.b	$01
000864ED E1FF                       	smpsAlterNote       $FF
000864EF 01                         	dc.b	$01
000864F0 E1FC                       	smpsAlterNote       $FC
000864F2 01                         	dc.b	$01
000864F3 E1F8                       	smpsAlterNote       $F8
000864F5 01                         	dc.b	$01
000864F6 E1FC                       	smpsAlterNote       $FC
000864F8 01                         	dc.b	$01
000864F9 E101                       	smpsAlterNote       $01
000864FB 01                         	dc.b	$01
000864FC E102                       	smpsAlterNote       $02
000864FE 01                         	dc.b	$01
000864FF E1FF                       	smpsAlterNote       $FF
00086501 01                         	dc.b	$01
00086502 E1FB                       	smpsAlterNote       $FB
00086504 ECF5                       	smpsPSGAlterVol     $F5
00086506 8D0D                       	dc.b	nC1, $0D
00086508 E101                       	smpsAlterNote       $01
0008650A EC0B                       	smpsPSGAlterVol     $0B
0008650C 8001                       	dc.b	nRst, $01
0008650E E102                       	smpsAlterNote       $02
00086510 01                         	dc.b	$01
00086511 E1FF                       	smpsAlterNote       $FF
00086513 01                         	dc.b	$01
00086514 E1F9                       	smpsAlterNote       $F9
00086516 0101                       	dc.b	$01, $01
00086518 E1FC                       	smpsAlterNote       $FC
0008651A 01                         	dc.b	$01
0008651B E101                       	smpsAlterNote       $01
0008651D 0101                       	dc.b	$01, $01
0008651F E1FC                       	smpsAlterNote       $FC
00086521 01                         	dc.b	$01
00086522 E1F9                       	smpsAlterNote       $F9
00086524 0101                       	dc.b	$01, $01
00086526 E1FF                       	smpsAlterNote       $FF
00086528 01                         	dc.b	$01
00086529 E102                       	smpsAlterNote       $02
0008652B 01                         	dc.b	$01
0008652C E101                       	smpsAlterNote       $01
0008652E 01                         	dc.b	$01
0008652F E1FC                       	smpsAlterNote       $FC
00086531 ECF5                       	smpsPSGAlterVol     $F5
00086533 8F0D                       	dc.b	nD1, $0D
00086535 E1FF                       	smpsAlterNote       $FF
00086537 EC04                       	smpsPSGAlterVol     $04
00086539 E701                       	dc.b	smpsNoAttack, $01
0008653B EC07                       	smpsPSGAlterVol     $07
0008653D E103                       	smpsAlterNote       $03
0008653F 8001                       	dc.b	nRst, $01
00086541 E102                       	smpsAlterNote       $02
00086543 01                         	dc.b	$01
00086544 E1FD                       	smpsAlterNote       $FD
00086546 01                         	dc.b	$01
00086547 E1F9                       	smpsAlterNote       $F9
00086549 01                         	dc.b	$01
0008654A E1FD                       	smpsAlterNote       $FD
0008654C 01                         	dc.b	$01
0008654D E100                       	smpsAlterNote       $00
0008654F 01                         	dc.b	$01
00086550 E103                       	smpsAlterNote       $03
00086552 01                         	dc.b	$01
00086553 E100                       	smpsAlterNote       $00
00086555 01                         	dc.b	$01
00086556 E1FA                       	smpsAlterNote       $FA
00086558 01                         	dc.b	$01
00086559 E1F9                       	smpsAlterNote       $F9
0008655B 01                         	dc.b	$01
0008655C E1FD                       	smpsAlterNote       $FD
0008655E 01                         	dc.b	$01
0008655F E102                       	smpsAlterNote       $02
00086561 0101                       	dc.b	$01, $01
00086563 E100                       	smpsAlterNote       $00
00086565 01                         	dc.b	$01
00086566 E1FD                       	smpsAlterNote       $FD
00086568 ECF5                       	smpsPSGAlterVol     $F5
0008656A 910D                       	dc.b	nE1, $0D
0008656C E103                       	smpsAlterNote       $03
0008656E EC0B                       	smpsPSGAlterVol     $0B
00086570 8001 01                    	dc.b	nRst, $01, $01
00086573 E100                       	smpsAlterNote       $00
00086575 01                         	dc.b	$01
00086576 E1FA                       	smpsAlterNote       $FA
00086578 0101                       	dc.b	$01, $01
0008657A E100                       	smpsAlterNote       $00
0008657C 01                         	dc.b	$01
0008657D E103                       	smpsAlterNote       $03
0008657F 01                         	dc.b	$01
00086580 E1FD                       	smpsAlterNote       $FD
00086582 ECF5                       	smpsPSGAlterVol     $F5
00086584 9206                       	dc.b	nF1, $06
00086586 EC04                       	smpsPSGAlterVol     $04
00086588 E701                       	dc.b	smpsNoAttack, $01
0008658A EC07                       	smpsPSGAlterVol     $07
0008658C 8003                       	dc.b	nRst, $03
0008658E ECF5                       	smpsPSGAlterVol     $F5
00086590 9207                       	dc.b	nF1, $07
00086592 EC0B                       	smpsPSGAlterVol     $0B
00086594 8006                       	dc.b	nRst, $06
00086596 E100                       	smpsAlterNote       $00
00086598 01                         	dc.b	$01
00086599 E103                       	smpsAlterNote       $03
0008659B 0101                       	dc.b	$01, $01
0008659D E1FD                       	smpsAlterNote       $FD
0008659F 01                         	dc.b	$01
000865A0 ECF5                       	smpsPSGAlterVol     $F5
000865A2 9407                       	dc.b	nG1, $07
000865A4 EC0B                       	smpsPSGAlterVol     $0B
000865A6 8004                       	dc.b	nRst, $04
000865A8 ECF5                       	smpsPSGAlterVol     $F5
000865AA 9406                       	dc.b	nG1, $06
000865AC EC04                       	smpsPSGAlterVol     $04
000865AE E701                       	dc.b	smpsNoAttack, $01
000865B0 EC07                       	smpsPSGAlterVol     $07
000865B2 8006                       	dc.b	nRst, $06
000865B4 E103                       	smpsAlterNote       $03
000865B6 01                         	dc.b	$01
000865B7 E104                       	smpsAlterNote       $04
000865B9 01                         	dc.b	$01
000865BA E100                       	smpsAlterNote       $00
000865BC 01                         	dc.b	$01
000865BD E1F9                       	smpsAlterNote       $F9
000865BF 01                         	dc.b	$01
000865C0 E1FD                       	smpsAlterNote       $FD
000865C2 ECF5                       	smpsPSGAlterVol     $F5
000865C4 9206                       	dc.b	nF1, $06
000865C6 EC04                       	smpsPSGAlterVol     $04
000865C8 E701                       	dc.b	smpsNoAttack, $01
000865CA EC07                       	smpsPSGAlterVol     $07
000865CC 8003                       	dc.b	nRst, $03
000865CE ECF5                       	smpsPSGAlterVol     $F5
000865D0 9206                       	dc.b	nF1, $06
000865D2 EC04                       	smpsPSGAlterVol     $04
000865D4 E701                       	dc.b	smpsNoAttack, $01
000865D6 EC07                       	smpsPSGAlterVol     $07
000865D8 8006                       	dc.b	nRst, $06
000865DA E100                       	smpsAlterNote       $00
000865DC 01                         	dc.b	$01
000865DD E104                       	smpsAlterNote       $04
000865DF 01                         	dc.b	$01
000865E0 E103                       	smpsAlterNote       $03
000865E2 01                         	dc.b	$01
000865E3 E1FD                       	smpsAlterNote       $FD
000865E5 01                         	dc.b	$01
000865E6 ECF5                       	smpsPSGAlterVol     $F5
000865E8 9407                       	dc.b	nG1, $07
000865EA EC0B                       	smpsPSGAlterVol     $0B
000865EC 8004                       	dc.b	nRst, $04
000865EE ECF5                       	smpsPSGAlterVol     $F5
000865F0 9406                       	dc.b	nG1, $06
000865F2 EC0B                       	smpsPSGAlterVol     $0B
000865F4 8007                       	dc.b	nRst, $07
000865F6 E103                       	smpsAlterNote       $03
000865F8 0101                       	dc.b	$01, $01
000865FA E100                       	smpsAlterNote       $00
000865FC 01                         	dc.b	$01
000865FD E1F9                       	smpsAlterNote       $F9
000865FF 01                         	dc.b	$01
00086600 E1FD                       	smpsAlterNote       $FD
00086602 ECF5                       	smpsPSGAlterVol     $F5
00086604 9206                       	dc.b	nF1, $06
00086606 EC04                       	smpsPSGAlterVol     $04
00086608 E701                       	dc.b	smpsNoAttack, $01
0008660A EC07                       	smpsPSGAlterVol     $07
0008660C 8003                       	dc.b	nRst, $03
0008660E ECF5                       	smpsPSGAlterVol     $F5
00086610 9206                       	dc.b	nF1, $06
00086612 EC04                       	smpsPSGAlterVol     $04
00086614 E701                       	dc.b	smpsNoAttack, $01
00086616 EC07                       	smpsPSGAlterVol     $07
00086618 8006                       	dc.b	nRst, $06
0008661A E100                       	smpsAlterNote       $00
0008661C 01                         	dc.b	$01
0008661D E104                       	smpsAlterNote       $04
0008661F 01                         	dc.b	$01
00086620 E100                       	smpsAlterNote       $00
00086622 01                         	dc.b	$01
00086623 E1FB                       	smpsAlterNote       $FB
00086625 01                         	dc.b	$01
00086626 E1FD                       	smpsAlterNote       $FD
00086628 ECF5                       	smpsPSGAlterVol     $F5
0008662A 9406                       	dc.b	nG1, $06
0008662C EC04                       	smpsPSGAlterVol     $04
0008662E E701                       	dc.b	smpsNoAttack, $01
00086630 EC07                       	smpsPSGAlterVol     $07
00086632 8003                       	dc.b	nRst, $03
00086634 ECF5                       	smpsPSGAlterVol     $F5
00086636 9407                       	dc.b	nG1, $07
00086638 EC0B                       	smpsPSGAlterVol     $0B
0008663A 8006                       	dc.b	nRst, $06
0008663C E100                       	smpsAlterNote       $00
0008663E 01                         	dc.b	$01
0008663F E103                       	smpsAlterNote       $03
00086641 0101                       	dc.b	$01, $01
00086643 E1FD                       	smpsAlterNote       $FD
00086645 01                         	dc.b	$01
00086646 ECF5                       	smpsPSGAlterVol     $F5
00086648 9207                       	dc.b	nF1, $07
0008664A EC0B                       	smpsPSGAlterVol     $0B
0008664C 8004                       	dc.b	nRst, $04
0008664E ECF5                       	smpsPSGAlterVol     $F5
00086650 9206                       	dc.b	nF1, $06
00086652 EC04                       	smpsPSGAlterVol     $04
00086654 E701                       	dc.b	smpsNoAttack, $01
00086656 ECFC                       	smpsPSGAlterVol     $FC
00086658 E1FC                       	smpsAlterNote       $FC
0008665A 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008665E EC04                       	smpsPSGAlterVol     $04
00086660 E701                       	dc.b	smpsNoAttack, $01
00086662 ECFC                       	smpsPSGAlterVol     $FC
00086664 9003                       	dc.b	nEb1, $03
00086666 E1FD                       	smpsAlterNote       $FD
00086668 9403                       	dc.b	nG1, $03
0008666A EC04                       	smpsPSGAlterVol     $04
0008666C E701                       	dc.b	smpsNoAttack, $01
0008666E E1FE                       	smpsAlterNote       $FE
00086670 ECFC                       	smpsPSGAlterVol     $FC
00086672 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00086676 EC04                       	smpsPSGAlterVol     $04
00086678 E701                       	dc.b	smpsNoAttack, $01
0008667A EC07                       	smpsPSGAlterVol     $07
0008667C 8009                       	dc.b	nRst, $09
0008667E E100                       	smpsAlterNote       $00
00086680 01                         	dc.b	$01
00086681 F6F5 19                    	smpsJump            music84_Jump07
00086684                            
00086684                            ; PSG2 Data
00086684                            music84_PSG2:
00086684 E1FC                       	smpsAlterNote       $FC
00086686 EC04                       	smpsPSGAlterVol     $04
00086688 8F03                       	dc.b	nD1, $03
0008668A E1FD                       	smpsAlterNote       $FD
0008668C 9203                       	dc.b	nF1, $03
0008668E EC04                       	smpsPSGAlterVol     $04
00086690 E701                       	dc.b	smpsNoAttack, $01
00086692 E1FE                       	smpsAlterNote       $FE
00086694 ECFC                       	smpsPSGAlterVol     $FC
00086696 9603                       	dc.b	nA1, $03
00086698 E1FD                       	smpsAlterNote       $FD
0008669A 9103                       	dc.b	nE1, $03
0008669C EC04                       	smpsPSGAlterVol     $04
0008669E E701                       	dc.b	smpsNoAttack, $01
000866A0 ECFC                       	smpsPSGAlterVol     $FC
000866A2 9403                       	dc.b	nG1, $03
000866A4 E1FE                       	smpsAlterNote       $FE
000866A6 9703                       	dc.b	nBb1, $03
000866A8 EC04                       	smpsPSGAlterVol     $04
000866AA E701                       	dc.b	smpsNoAttack, $01
000866AC E1FF                       	smpsAlterNote       $FF
000866AE ECFC                       	smpsPSGAlterVol     $FC
000866B0 9B02                       	dc.b	nD2, $02
000866B2 EC04                       	smpsPSGAlterVol     $04
000866B4 E701                       	dc.b	smpsNoAttack, $01
000866B6 ECFC                       	smpsPSGAlterVol     $FC
000866B8 E1FE                       	smpsAlterNote       $FE
000866BA 9A03                       	dc.b	nCs2, $03
000866BC EC0B                       	smpsPSGAlterVol     $0B
000866BE 800A                       	dc.b	nRst, $0A
000866C0 E102                       	smpsAlterNote       $02
000866C2 01                         	dc.b	$01
000866C3 E10A                       	smpsAlterNote       $0A
000866C5 01                         	dc.b	$01
000866C6 E102                       	smpsAlterNote       $02
000866C8 01                         	dc.b	$01
000866C9 E1FC                       	smpsAlterNote       $FC
000866CB 01                         	dc.b	$01
000866CC E10A                       	smpsAlterNote       $0A
000866CE 01                         	dc.b	$01
000866CF E1FC                       	smpsAlterNote       $FC
000866D1 01                         	dc.b	$01
000866D2 E108                       	smpsAlterNote       $08
000866D4 01                         	dc.b	$01
000866D5 E10A                       	smpsAlterNote       $0A
000866D7 01                         	dc.b	$01
000866D8 E102                       	smpsAlterNote       $02
000866DA 01                         	dc.b	$01
000866DB E1F7                       	smpsAlterNote       $F7
000866DD 0101                       	dc.b	$01, $01
000866DF E102                       	smpsAlterNote       $02
000866E1 01                         	dc.b	$01
000866E2 E108                       	smpsAlterNote       $08
000866E4 0101                       	dc.b	$01, $01
000866E6 E1FC                       	smpsAlterNote       $FC
000866E8 01                         	dc.b	$01
000866E9 E10A                       	smpsAlterNote       $0A
000866EB 01                         	dc.b	$01
000866EC E1F7                       	smpsAlterNote       $F7
000866EE 01                         	dc.b	$01
000866EF E102                       	smpsAlterNote       $02
000866F1 01                         	dc.b	$01
000866F2 E10A                       	smpsAlterNote       $0A
000866F4 01                         	dc.b	$01
000866F5 E102                       	smpsAlterNote       $02
000866F7 01                         	dc.b	$01
000866F8 E1FC                       	smpsAlterNote       $FC
000866FA 01                         	dc.b	$01
000866FB                            
000866FB                            music84_Jump06:
000866FB E10A                       	smpsAlterNote       $0A
000866FD 8001                       	dc.b	nRst, $01
000866FF E1FC                       	smpsAlterNote       $FC
00086701 01                         	dc.b	$01
00086702 E108                       	smpsAlterNote       $08
00086704 01                         	dc.b	$01
00086705 E10A                       	smpsAlterNote       $0A
00086707 01                         	dc.b	$01
00086708 E1FC                       	smpsAlterNote       $FC
0008670A ECF5                       	smpsPSGAlterVol     $F5
0008670C 8F06                       	dc.b	nD1, $06
0008670E EC04                       	smpsPSGAlterVol     $04
00086710 E701                       	dc.b	smpsNoAttack, $01
00086712 EC07                       	smpsPSGAlterVol     $07
00086714 8003                       	dc.b	nRst, $03
00086716 ECF5                       	smpsPSGAlterVol     $F5
00086718 8F06                       	dc.b	nD1, $06
0008671A EC04                       	smpsPSGAlterVol     $04
0008671C E701                       	dc.b	smpsNoAttack, $01
0008671E EC07                       	smpsPSGAlterVol     $07
00086720 8006                       	dc.b	nRst, $06
00086722 E1FF                       	smpsAlterNote       $FF
00086724 01                         	dc.b	$01
00086725 E102                       	smpsAlterNote       $02
00086727 01                         	dc.b	$01
00086728 E1FF                       	smpsAlterNote       $FF
0008672A 01                         	dc.b	$01
0008672B E1F9                       	smpsAlterNote       $F9
0008672D 01                         	dc.b	$01
0008672E E1FC                       	smpsAlterNote       $FC
00086730 ECF5                       	smpsPSGAlterVol     $F5
00086732 9006                       	dc.b	nEb1, $06
00086734 EC04                       	smpsPSGAlterVol     $04
00086736 E701                       	dc.b	smpsNoAttack, $01
00086738 EC07                       	smpsPSGAlterVol     $07
0008673A 8003                       	dc.b	nRst, $03
0008673C ECF5                       	smpsPSGAlterVol     $F5
0008673E 9007                       	dc.b	nEb1, $07
00086740 EC0B                       	smpsPSGAlterVol     $0B
00086742 8006                       	dc.b	nRst, $06
00086744 E1FF                       	smpsAlterNote       $FF
00086746 01                         	dc.b	$01
00086747 E103                       	smpsAlterNote       $03
00086749 0101                       	dc.b	$01, $01
0008674B E1FC                       	smpsAlterNote       $FC
0008674D 01                         	dc.b	$01
0008674E ECF5                       	smpsPSGAlterVol     $F5
00086750 8F07                       	dc.b	nD1, $07
00086752 EC0B                       	smpsPSGAlterVol     $0B
00086754 8004                       	dc.b	nRst, $04
00086756 ECF5                       	smpsPSGAlterVol     $F5
00086758 8F06                       	dc.b	nD1, $06
0008675A EC04                       	smpsPSGAlterVol     $04
0008675C E701                       	dc.b	smpsNoAttack, $01
0008675E EC07                       	smpsPSGAlterVol     $07
00086760 8006                       	dc.b	nRst, $06
00086762 E102                       	smpsAlterNote       $02
00086764 01                         	dc.b	$01
00086765 E103                       	smpsAlterNote       $03
00086767 01                         	dc.b	$01
00086768 E1FF                       	smpsAlterNote       $FF
0008676A 01                         	dc.b	$01
0008676B E1F9                       	smpsAlterNote       $F9
0008676D 01                         	dc.b	$01
0008676E E1FC                       	smpsAlterNote       $FC
00086770 ECF5                       	smpsPSGAlterVol     $F5
00086772 8F06                       	dc.b	nD1, $06
00086774 EC04                       	smpsPSGAlterVol     $04
00086776 E701                       	dc.b	smpsNoAttack, $01
00086778 EC07                       	smpsPSGAlterVol     $07
0008677A 8003                       	dc.b	nRst, $03
0008677C ECF5                       	smpsPSGAlterVol     $F5
0008677E 8F06                       	dc.b	nD1, $06
00086780 EC04                       	smpsPSGAlterVol     $04
00086782 E701                       	dc.b	smpsNoAttack, $01
00086784 EC07                       	smpsPSGAlterVol     $07
00086786 8006                       	dc.b	nRst, $06
00086788 E1FF                       	smpsAlterNote       $FF
0008678A 01                         	dc.b	$01
0008678B E103                       	smpsAlterNote       $03
0008678D 01                         	dc.b	$01
0008678E E1FF                       	smpsAlterNote       $FF
00086790 01                         	dc.b	$01
00086791 E1FC                       	smpsAlterNote       $FC
00086793 01                         	dc.b	$01
00086794 ECF5                       	smpsPSGAlterVol     $F5
00086796 8F06                       	dc.b	nD1, $06
00086798 EC04                       	smpsPSGAlterVol     $04
0008679A E701                       	dc.b	smpsNoAttack, $01
0008679C EC07                       	smpsPSGAlterVol     $07
0008679E 8003                       	dc.b	nRst, $03
000867A0 ECF5                       	smpsPSGAlterVol     $F5
000867A2 8F07                       	dc.b	nD1, $07
000867A4 EC0B                       	smpsPSGAlterVol     $0B
000867A6 8007                       	dc.b	nRst, $07
000867A8 E101                       	smpsAlterNote       $01
000867AA 0101                       	dc.b	$01, $01
000867AC E1FC                       	smpsAlterNote       $FC
000867AE 01                         	dc.b	$01
000867AF E1F9                       	smpsAlterNote       $F9
000867B1 01                         	dc.b	$01
000867B2 E1FC                       	smpsAlterNote       $FC
000867B4 ECF5                       	smpsPSGAlterVol     $F5
000867B6 9006                       	dc.b	nEb1, $06
000867B8 EC0B                       	smpsPSGAlterVol     $0B
000867BA 8004                       	dc.b	nRst, $04
000867BC ECF5                       	smpsPSGAlterVol     $F5
000867BE 9006                       	dc.b	nEb1, $06
000867C0 EC04                       	smpsPSGAlterVol     $04
000867C2 E701                       	dc.b	smpsNoAttack, $01
000867C4 EC07                       	smpsPSGAlterVol     $07
000867C6 8006                       	dc.b	nRst, $06
000867C8 E100                       	smpsAlterNote       $00
000867CA 01                         	dc.b	$01
000867CB E102                       	smpsAlterNote       $02
000867CD 01                         	dc.b	$01
000867CE E100                       	smpsAlterNote       $00
000867D0 01                         	dc.b	$01
000867D1 E1FD                       	smpsAlterNote       $FD
000867D3 01                         	dc.b	$01
000867D4 E1FF                       	smpsAlterNote       $FF
000867D6 ECF5                       	smpsPSGAlterVol     $F5
000867D8 9B06                       	dc.b	nD2, $06
000867DA EC04                       	smpsPSGAlterVol     $04
000867DC E701                       	dc.b	smpsNoAttack, $01
000867DE EC07                       	smpsPSGAlterVol     $07
000867E0 8003                       	dc.b	nRst, $03
000867E2 ECF5                       	smpsPSGAlterVol     $F5
000867E4 9B07                       	dc.b	nD2, $07
000867E6 EC0B                       	smpsPSGAlterVol     $0B
000867E8 8006                       	dc.b	nRst, $06
000867EA E102                       	smpsAlterNote       $02
000867EC 01                         	dc.b	$01
000867ED E106                       	smpsAlterNote       $06
000867EF 01                         	dc.b	$01
000867F0 E105                       	smpsAlterNote       $05
000867F2 01                         	dc.b	$01
000867F3 E1FF                       	smpsAlterNote       $FF
000867F5 01                         	dc.b	$01
000867F6 ECF5                       	smpsPSGAlterVol     $F5
000867F8 9B07                       	dc.b	nD2, $07
000867FA EC0B                       	smpsPSGAlterVol     $0B
000867FC 8004                       	dc.b	nRst, $04
000867FE ECF5                       	smpsPSGAlterVol     $F5
00086800 9B06                       	dc.b	nD2, $06
00086802 EC0B                       	smpsPSGAlterVol     $0B
00086804 8007                       	dc.b	nRst, $07
00086806 E105                       	smpsAlterNote       $05
00086808 0101                       	dc.b	$01, $01
0008680A E102                       	smpsAlterNote       $02
0008680C 01                         	dc.b	$01
0008680D E1FC                       	smpsAlterNote       $FC
0008680F 01                         	dc.b	$01
00086810 E1FF                       	smpsAlterNote       $FF
00086812 ECF5                       	smpsPSGAlterVol     $F5
00086814 9B06                       	dc.b	nD2, $06
00086816 EC04                       	smpsPSGAlterVol     $04
00086818 E701                       	dc.b	smpsNoAttack, $01
0008681A EC07                       	smpsPSGAlterVol     $07
0008681C 8003                       	dc.b	nRst, $03
0008681E ECF5                       	smpsPSGAlterVol     $F5
00086820 9B06                       	dc.b	nD2, $06
00086822 EC04                       	smpsPSGAlterVol     $04
00086824 E701                       	dc.b	smpsNoAttack, $01
00086826 EC07                       	smpsPSGAlterVol     $07
00086828 8006                       	dc.b	nRst, $06
0008682A E102                       	smpsAlterNote       $02
0008682C 01                         	dc.b	$01
0008682D E106                       	smpsAlterNote       $06
0008682F 01                         	dc.b	$01
00086830 E102                       	smpsAlterNote       $02
00086832 01                         	dc.b	$01
00086833 E1FF                       	smpsAlterNote       $FF
00086835 01                         	dc.b	$01
00086836 ECF5                       	smpsPSGAlterVol     $F5
00086838 9B06                       	dc.b	nD2, $06
0008683A EC04                       	smpsPSGAlterVol     $04
0008683C E701                       	dc.b	smpsNoAttack, $01
0008683E EC07                       	smpsPSGAlterVol     $07
00086840 8003                       	dc.b	nRst, $03
00086842 ECF5                       	smpsPSGAlterVol     $F5
00086844 9B07                       	dc.b	nD2, $07
00086846 EC0B                       	smpsPSGAlterVol     $0B
00086848 8007                       	dc.b	nRst, $07
0008684A E105                       	smpsAlterNote       $05
0008684C 0101                       	dc.b	$01, $01
0008684E E1FF                       	smpsAlterNote       $FF
00086850 01                         	dc.b	$01
00086851 E1FC                       	smpsAlterNote       $FC
00086853 01                         	dc.b	$01
00086854 E1FF                       	smpsAlterNote       $FF
00086856 ECF5                       	smpsPSGAlterVol     $F5
00086858 9B06                       	dc.b	nD2, $06
0008685A EC0B                       	smpsPSGAlterVol     $0B
0008685C 8004                       	dc.b	nRst, $04
0008685E ECF5                       	smpsPSGAlterVol     $F5
00086860 9B06                       	dc.b	nD2, $06
00086862 EC04                       	smpsPSGAlterVol     $04
00086864 E701                       	dc.b	smpsNoAttack, $01
00086866 EC07                       	smpsPSGAlterVol     $07
00086868 8006                       	dc.b	nRst, $06
0008686A E105                       	smpsAlterNote       $05
0008686C 01                         	dc.b	$01
0008686D E106                       	smpsAlterNote       $06
0008686F 01                         	dc.b	$01
00086870 E102                       	smpsAlterNote       $02
00086872 01                         	dc.b	$01
00086873 E1FC                       	smpsAlterNote       $FC
00086875 01                         	dc.b	$01
00086876 E1FF                       	smpsAlterNote       $FF
00086878 ECF5                       	smpsPSGAlterVol     $F5
0008687A 9B06                       	dc.b	nD2, $06
0008687C EC04                       	smpsPSGAlterVol     $04
0008687E E701                       	dc.b	smpsNoAttack, $01
00086880 EC07                       	smpsPSGAlterVol     $07
00086882 8003                       	dc.b	nRst, $03
00086884 ECF5                       	smpsPSGAlterVol     $F5
00086886 9B06                       	dc.b	nD2, $06
00086888 EC04                       	smpsPSGAlterVol     $04
0008688A E701                       	dc.b	smpsNoAttack, $01
0008688C EC07                       	smpsPSGAlterVol     $07
0008688E 8006                       	dc.b	nRst, $06
00086890 E102                       	smpsAlterNote       $02
00086892 01                         	dc.b	$01
00086893 E106                       	smpsAlterNote       $06
00086895 01                         	dc.b	$01
00086896 E105                       	smpsAlterNote       $05
00086898 01                         	dc.b	$01
00086899 E1FF                       	smpsAlterNote       $FF
0008689B 01                         	dc.b	$01
0008689C ECF5                       	smpsPSGAlterVol     $F5
0008689E 9B07                       	dc.b	nD2, $07
000868A0 EC0B                       	smpsPSGAlterVol     $0B
000868A2 8004                       	dc.b	nRst, $04
000868A4 ECF5                       	smpsPSGAlterVol     $F5
000868A6 9B06                       	dc.b	nD2, $06
000868A8 EC0B                       	smpsPSGAlterVol     $0B
000868AA 8007                       	dc.b	nRst, $07
000868AC E105                       	smpsAlterNote       $05
000868AE 0101                       	dc.b	$01, $01
000868B0 E102                       	smpsAlterNote       $02
000868B2 01                         	dc.b	$01
000868B3 E1FC                       	smpsAlterNote       $FC
000868B5 01                         	dc.b	$01
000868B6 E1FF                       	smpsAlterNote       $FF
000868B8 ECF5                       	smpsPSGAlterVol     $F5
000868BA 9B06                       	dc.b	nD2, $06
000868BC EC04                       	smpsPSGAlterVol     $04
000868BE E701                       	dc.b	smpsNoAttack, $01
000868C0 EC07                       	smpsPSGAlterVol     $07
000868C2 8003                       	dc.b	nRst, $03
000868C4 ECF5                       	smpsPSGAlterVol     $F5
000868C6 9B06                       	dc.b	nD2, $06
000868C8 EC04                       	smpsPSGAlterVol     $04
000868CA E701                       	dc.b	smpsNoAttack, $01
000868CC EC07                       	smpsPSGAlterVol     $07
000868CE 8006                       	dc.b	nRst, $06
000868D0 E102                       	smpsAlterNote       $02
000868D2 01                         	dc.b	$01
000868D3 E106                       	smpsAlterNote       $06
000868D5 01                         	dc.b	$01
000868D6 E102                       	smpsAlterNote       $02
000868D8 01                         	dc.b	$01
000868D9 E1FF                       	smpsAlterNote       $FF
000868DB 01                         	dc.b	$01
000868DC ECF5                       	smpsPSGAlterVol     $F5
000868DE 9B06                       	dc.b	nD2, $06
000868E0 EC04                       	smpsPSGAlterVol     $04
000868E2 E701                       	dc.b	smpsNoAttack, $01
000868E4 EC07                       	smpsPSGAlterVol     $07
000868E6 8003                       	dc.b	nRst, $03
000868E8 ECF5                       	smpsPSGAlterVol     $F5
000868EA 9B07                       	dc.b	nD2, $07
000868EC E1FE                       	smpsAlterNote       $FE
000868EE 9706                       	dc.b	nBb1, $06
000868F0 EC04                       	smpsPSGAlterVol     $04
000868F2 E701                       	dc.b	smpsNoAttack, $01
000868F4 ECFC                       	smpsPSGAlterVol     $FC
000868F6 9703                       	dc.b	nBb1, $03
000868F8 EC04                       	smpsPSGAlterVol     $04
000868FA E701                       	dc.b	smpsNoAttack, $01
000868FC ECFC                       	smpsPSGAlterVol     $FC
000868FE 9702                       	dc.b	nBb1, $02
00086900 EC04                       	smpsPSGAlterVol     $04
00086902 E701                       	dc.b	smpsNoAttack, $01
00086904 ECFC                       	smpsPSGAlterVol     $FC
00086906 9606                       	dc.b	nA1, $06
00086908 EC04                       	smpsPSGAlterVol     $04
0008690A E701                       	dc.b	smpsNoAttack, $01
0008690C EC07                       	smpsPSGAlterVol     $07
0008690E 8006                       	dc.b	nRst, $06
00086910 E101                       	smpsAlterNote       $01
00086912 01                         	dc.b	$01
00086913 E107                       	smpsAlterNote       $07
00086915 01                         	dc.b	$01
00086916 E101                       	smpsAlterNote       $01
00086918 01                         	dc.b	$01
00086919 E1F8                       	smpsAlterNote       $F8
0008691B 01                         	dc.b	$01
0008691C E1F7                       	smpsAlterNote       $F7
0008691E 01                         	dc.b	$01
0008691F E1FC                       	smpsAlterNote       $FC
00086921 01                         	dc.b	$01
00086922 E106                       	smpsAlterNote       $06
00086924 01                         	dc.b	$01
00086925 E107                       	smpsAlterNote       $07
00086927 01                         	dc.b	$01
00086928 E101                       	smpsAlterNote       $01
0008692A 01                         	dc.b	$01
0008692B E1F8                       	smpsAlterNote       $F8
0008692D 0101                       	dc.b	$01, $01
0008692F E1FC                       	smpsAlterNote       $FC
00086931 ECF5                       	smpsPSGAlterVol     $F5
00086933 8F06                       	dc.b	nD1, $06
00086935 EC04                       	smpsPSGAlterVol     $04
00086937 E701                       	dc.b	smpsNoAttack, $01
00086939 EC07                       	smpsPSGAlterVol     $07
0008693B 8003                       	dc.b	nRst, $03
0008693D ECF5                       	smpsPSGAlterVol     $F5
0008693F 8F06                       	dc.b	nD1, $06
00086941 EC04                       	smpsPSGAlterVol     $04
00086943 E701                       	dc.b	smpsNoAttack, $01
00086945 EC07                       	smpsPSGAlterVol     $07
00086947 8006                       	dc.b	nRst, $06
00086949 E1FF                       	smpsAlterNote       $FF
0008694B 01                         	dc.b	$01
0008694C E102                       	smpsAlterNote       $02
0008694E 01                         	dc.b	$01
0008694F E101                       	smpsAlterNote       $01
00086951 01                         	dc.b	$01
00086952 E1FC                       	smpsAlterNote       $FC
00086954 01                         	dc.b	$01
00086955 ECF5                       	smpsPSGAlterVol     $F5
00086957 9007                       	dc.b	nEb1, $07
00086959 EC0B                       	smpsPSGAlterVol     $0B
0008695B 8004                       	dc.b	nRst, $04
0008695D ECF5                       	smpsPSGAlterVol     $F5
0008695F 9006                       	dc.b	nEb1, $06
00086961 EC0B                       	smpsPSGAlterVol     $0B
00086963 8007                       	dc.b	nRst, $07
00086965 E103                       	smpsAlterNote       $03
00086967 0101                       	dc.b	$01, $01
00086969 E1FC                       	smpsAlterNote       $FC
0008696B 01                         	dc.b	$01
0008696C E1F9                       	smpsAlterNote       $F9
0008696E 01                         	dc.b	$01
0008696F E1FC                       	smpsAlterNote       $FC
00086971 ECF5                       	smpsPSGAlterVol     $F5
00086973 8F06                       	dc.b	nD1, $06
00086975 EC04                       	smpsPSGAlterVol     $04
00086977 E701                       	dc.b	smpsNoAttack, $01
00086979 EC07                       	smpsPSGAlterVol     $07
0008697B 8003                       	dc.b	nRst, $03
0008697D ECF5                       	smpsPSGAlterVol     $F5
0008697F 8F06                       	dc.b	nD1, $06
00086981 EC04                       	smpsPSGAlterVol     $04
00086983 E701                       	dc.b	smpsNoAttack, $01
00086985 EC07                       	smpsPSGAlterVol     $07
00086987 8006                       	dc.b	nRst, $06
00086989 E1FF                       	smpsAlterNote       $FF
0008698B 01                         	dc.b	$01
0008698C E103                       	smpsAlterNote       $03
0008698E 01                         	dc.b	$01
0008698F E1FF                       	smpsAlterNote       $FF
00086991 01                         	dc.b	$01
00086992 E1F9                       	smpsAlterNote       $F9
00086994 01                         	dc.b	$01
00086995 E1FC                       	smpsAlterNote       $FC
00086997 ECF5                       	smpsPSGAlterVol     $F5
00086999 8F06                       	dc.b	nD1, $06
0008699B EC04                       	smpsPSGAlterVol     $04
0008699D E701                       	dc.b	smpsNoAttack, $01
0008699F EC07                       	smpsPSGAlterVol     $07
000869A1 8003                       	dc.b	nRst, $03
000869A3 ECF5                       	smpsPSGAlterVol     $F5
000869A5 8F07                       	dc.b	nD1, $07
000869A7 EC0B                       	smpsPSGAlterVol     $0B
000869A9 8006                       	dc.b	nRst, $06
000869AB E1FF                       	smpsAlterNote       $FF
000869AD 01                         	dc.b	$01
000869AE E102                       	smpsAlterNote       $02
000869B0 0101                       	dc.b	$01, $01
000869B2 E1FC                       	smpsAlterNote       $FC
000869B4 01                         	dc.b	$01
000869B5 ECF5                       	smpsPSGAlterVol     $F5
000869B7 8F07                       	dc.b	nD1, $07
000869B9 EC0B                       	smpsPSGAlterVol     $0B
000869BB 8004                       	dc.b	nRst, $04
000869BD ECF5                       	smpsPSGAlterVol     $F5
000869BF 8F06                       	dc.b	nD1, $06
000869C1 EC04                       	smpsPSGAlterVol     $04
000869C3 E701                       	dc.b	smpsNoAttack, $01
000869C5 EC07                       	smpsPSGAlterVol     $07
000869C7 8006                       	dc.b	nRst, $06
000869C9 E101                       	smpsAlterNote       $01
000869CB 01                         	dc.b	$01
000869CC E102                       	smpsAlterNote       $02
000869CE 01                         	dc.b	$01
000869CF E1FF                       	smpsAlterNote       $FF
000869D1 01                         	dc.b	$01
000869D2 E1F9                       	smpsAlterNote       $F9
000869D4 01                         	dc.b	$01
000869D5 E1FC                       	smpsAlterNote       $FC
000869D7 ECF5                       	smpsPSGAlterVol     $F5
000869D9 9006                       	dc.b	nEb1, $06
000869DB EC04                       	smpsPSGAlterVol     $04
000869DD E701                       	dc.b	smpsNoAttack, $01
000869DF EC07                       	smpsPSGAlterVol     $07
000869E1 8003                       	dc.b	nRst, $03
000869E3 ECF5                       	smpsPSGAlterVol     $F5
000869E5 9006                       	dc.b	nEb1, $06
000869E7 EC04                       	smpsPSGAlterVol     $04
000869E9 E701                       	dc.b	smpsNoAttack, $01
000869EB EC07                       	smpsPSGAlterVol     $07
000869ED 8006                       	dc.b	nRst, $06
000869EF E100                       	smpsAlterNote       $00
000869F1 01                         	dc.b	$01
000869F2 E102                       	smpsAlterNote       $02
000869F4 01                         	dc.b	$01
000869F5 E100                       	smpsAlterNote       $00
000869F7 01                         	dc.b	$01
000869F8 E1FF                       	smpsAlterNote       $FF
000869FA 01                         	dc.b	$01
000869FB ECF5                       	smpsPSGAlterVol     $F5
000869FD 9B06                       	dc.b	nD2, $06
000869FF EC04                       	smpsPSGAlterVol     $04
00086A01 E701                       	dc.b	smpsNoAttack, $01
00086A03 EC07                       	smpsPSGAlterVol     $07
00086A05 8003                       	dc.b	nRst, $03
00086A07 ECF5                       	smpsPSGAlterVol     $F5
00086A09 9B07                       	dc.b	nD2, $07
00086A0B EC0B                       	smpsPSGAlterVol     $0B
00086A0D 8007                       	dc.b	nRst, $07
00086A0F E105                       	smpsAlterNote       $05
00086A11 0101                       	dc.b	$01, $01
00086A13 E1FF                       	smpsAlterNote       $FF
00086A15 01                         	dc.b	$01
00086A16 E1FC                       	smpsAlterNote       $FC
00086A18 01                         	dc.b	$01
00086A19 E1FF                       	smpsAlterNote       $FF
00086A1B ECF5                       	smpsPSGAlterVol     $F5
00086A1D 9B06                       	dc.b	nD2, $06
00086A1F EC0B                       	smpsPSGAlterVol     $0B
00086A21 8004                       	dc.b	nRst, $04
00086A23 ECF5                       	smpsPSGAlterVol     $F5
00086A25 9B06                       	dc.b	nD2, $06
00086A27 EC04                       	smpsPSGAlterVol     $04
00086A29 E701                       	dc.b	smpsNoAttack, $01
00086A2B EC07                       	smpsPSGAlterVol     $07
00086A2D 8006                       	dc.b	nRst, $06
00086A2F E102                       	smpsAlterNote       $02
00086A31 01                         	dc.b	$01
00086A32 E106                       	smpsAlterNote       $06
00086A34 01                         	dc.b	$01
00086A35 E102                       	smpsAlterNote       $02
00086A37 01                         	dc.b	$01
00086A38 E1FC                       	smpsAlterNote       $FC
00086A3A 01                         	dc.b	$01
00086A3B E1FF                       	smpsAlterNote       $FF
00086A3D ECF5                       	smpsPSGAlterVol     $F5
00086A3F 9B06                       	dc.b	nD2, $06
00086A41 EC04                       	smpsPSGAlterVol     $04
00086A43 E701                       	dc.b	smpsNoAttack, $01
00086A45 EC07                       	smpsPSGAlterVol     $07
00086A47 8003                       	dc.b	nRst, $03
00086A49 ECF5                       	smpsPSGAlterVol     $F5
00086A4B 9B07                       	dc.b	nD2, $07
00086A4D EC0B                       	smpsPSGAlterVol     $0B
00086A4F 8006                       	dc.b	nRst, $06
00086A51 E102                       	smpsAlterNote       $02
00086A53 01                         	dc.b	$01
00086A54 E105                       	smpsAlterNote       $05
00086A56 0101                       	dc.b	$01, $01
00086A58 E1FF                       	smpsAlterNote       $FF
00086A5A 01                         	dc.b	$01
00086A5B ECF5                       	smpsPSGAlterVol     $F5
00086A5D 9B07                       	dc.b	nD2, $07
00086A5F EC0B                       	smpsPSGAlterVol     $0B
00086A61 8004                       	dc.b	nRst, $04
00086A63 ECF5                       	smpsPSGAlterVol     $F5
00086A65 9B06                       	dc.b	nD2, $06
00086A67 EC0B                       	smpsPSGAlterVol     $0B
00086A69 8007                       	dc.b	nRst, $07
00086A6B E105                       	smpsAlterNote       $05
00086A6D 0101                       	dc.b	$01, $01
00086A6F E102                       	smpsAlterNote       $02
00086A71 01                         	dc.b	$01
00086A72 E1FC                       	smpsAlterNote       $FC
00086A74 01                         	dc.b	$01
00086A75 E1FF                       	smpsAlterNote       $FF
00086A77 ECF5                       	smpsPSGAlterVol     $F5
00086A79 9B06                       	dc.b	nD2, $06
00086A7B EC04                       	smpsPSGAlterVol     $04
00086A7D E701                       	dc.b	smpsNoAttack, $01
00086A7F EC07                       	smpsPSGAlterVol     $07
00086A81 8003                       	dc.b	nRst, $03
00086A83 ECF5                       	smpsPSGAlterVol     $F5
00086A85 9B06                       	dc.b	nD2, $06
00086A87 EC04                       	smpsPSGAlterVol     $04
00086A89 E701                       	dc.b	smpsNoAttack, $01
00086A8B EC07                       	smpsPSGAlterVol     $07
00086A8D 8006                       	dc.b	nRst, $06
00086A8F E102                       	smpsAlterNote       $02
00086A91 01                         	dc.b	$01
00086A92 E106                       	smpsAlterNote       $06
00086A94 01                         	dc.b	$01
00086A95 E102                       	smpsAlterNote       $02
00086A97 01                         	dc.b	$01
00086A98 E1FF                       	smpsAlterNote       $FF
00086A9A 01                         	dc.b	$01
00086A9B ECF5                       	smpsPSGAlterVol     $F5
00086A9D 9B06                       	dc.b	nD2, $06
00086A9F EC04                       	smpsPSGAlterVol     $04
00086AA1 E701                       	dc.b	smpsNoAttack, $01
00086AA3 EC07                       	smpsPSGAlterVol     $07
00086AA5 8003                       	dc.b	nRst, $03
00086AA7 ECF5                       	smpsPSGAlterVol     $F5
00086AA9 9B07                       	dc.b	nD2, $07
00086AAB EC0B                       	smpsPSGAlterVol     $0B
00086AAD 8007                       	dc.b	nRst, $07
00086AAF E105                       	smpsAlterNote       $05
00086AB1 0101                       	dc.b	$01, $01
00086AB3 E1FF                       	smpsAlterNote       $FF
00086AB5 01                         	dc.b	$01
00086AB6 E1FC                       	smpsAlterNote       $FC
00086AB8 01                         	dc.b	$01
00086AB9 E1FF                       	smpsAlterNote       $FF
00086ABB ECF5                       	smpsPSGAlterVol     $F5
00086ABD 9B06                       	dc.b	nD2, $06
00086ABF EC0B                       	smpsPSGAlterVol     $0B
00086AC1 8004                       	dc.b	nRst, $04
00086AC3 ECF5                       	smpsPSGAlterVol     $F5
00086AC5 9B06                       	dc.b	nD2, $06
00086AC7 EC04                       	smpsPSGAlterVol     $04
00086AC9 E701                       	dc.b	smpsNoAttack, $01
00086ACB EC07                       	smpsPSGAlterVol     $07
00086ACD 8006                       	dc.b	nRst, $06
00086ACF E102                       	smpsAlterNote       $02
00086AD1 01                         	dc.b	$01
00086AD2 E106                       	smpsAlterNote       $06
00086AD4 01                         	dc.b	$01
00086AD5 E102                       	smpsAlterNote       $02
00086AD7 01                         	dc.b	$01
00086AD8 E1FC                       	smpsAlterNote       $FC
00086ADA 01                         	dc.b	$01
00086ADB E1FF                       	smpsAlterNote       $FF
00086ADD ECF5                       	smpsPSGAlterVol     $F5
00086ADF 9B06                       	dc.b	nD2, $06
00086AE1 EC04                       	smpsPSGAlterVol     $04
00086AE3 E701                       	dc.b	smpsNoAttack, $01
00086AE5 EC07                       	smpsPSGAlterVol     $07
00086AE7 8003                       	dc.b	nRst, $03
00086AE9 ECF5                       	smpsPSGAlterVol     $F5
00086AEB 9B06                       	dc.b	nD2, $06
00086AED EC04                       	smpsPSGAlterVol     $04
00086AEF E701                       	dc.b	smpsNoAttack, $01
00086AF1 EC07                       	smpsPSGAlterVol     $07
00086AF3 8006                       	dc.b	nRst, $06
00086AF5 E102                       	smpsAlterNote       $02
00086AF7 01                         	dc.b	$01
00086AF8 E106                       	smpsAlterNote       $06
00086AFA 01                         	dc.b	$01
00086AFB E105                       	smpsAlterNote       $05
00086AFD 01                         	dc.b	$01
00086AFE E1FF                       	smpsAlterNote       $FF
00086B00 01                         	dc.b	$01
00086B01 ECF5                       	smpsPSGAlterVol     $F5
00086B03 9B07                       	dc.b	nD2, $07
00086B05 EC0B                       	smpsPSGAlterVol     $0B
00086B07 8004                       	dc.b	nRst, $04
00086B09 ECF5                       	smpsPSGAlterVol     $F5
00086B0B 9B06                       	dc.b	nD2, $06
00086B0D EC0B                       	smpsPSGAlterVol     $0B
00086B0F 8007                       	dc.b	nRst, $07
00086B11 E105                       	smpsAlterNote       $05
00086B13 0101                       	dc.b	$01, $01
00086B15 E101                       	smpsAlterNote       $01
00086B17 01                         	dc.b	$01
00086B18 E1FB                       	smpsAlterNote       $FB
00086B1A 01                         	dc.b	$01
00086B1B E1FE                       	smpsAlterNote       $FE
00086B1D ECF5                       	smpsPSGAlterVol     $F5
00086B1F 9A06                       	dc.b	nCs2, $06
00086B21 EC04                       	smpsPSGAlterVol     $04
00086B23 E701                       	dc.b	smpsNoAttack, $01
00086B25 EC07                       	smpsPSGAlterVol     $07
00086B27 8003                       	dc.b	nRst, $03
00086B29 ECF5                       	smpsPSGAlterVol     $F5
00086B2B 9A06                       	dc.b	nCs2, $06
00086B2D EC04                       	smpsPSGAlterVol     $04
00086B2F E701                       	dc.b	smpsNoAttack, $01
00086B31 EC07                       	smpsPSGAlterVol     $07
00086B33 8003                       	dc.b	nRst, $03
00086B35 E1FC                       	smpsAlterNote       $FC
00086B37 ECF5                       	smpsPSGAlterVol     $F5
00086B39 8F07                       	dc.b	nD1, $07
00086B3B EC0B                       	smpsPSGAlterVol     $0B
00086B3D 8006                       	dc.b	nRst, $06
00086B3F E1FF                       	smpsAlterNote       $FF
00086B41 01                         	dc.b	$01
00086B42 E103                       	smpsAlterNote       $03
00086B44 01                         	dc.b	$01
00086B45 E102                       	smpsAlterNote       $02
00086B47 01                         	dc.b	$01
00086B48 E1FC                       	smpsAlterNote       $FC
00086B4A 01                         	dc.b	$01
00086B4B E1F8                       	smpsAlterNote       $F8
00086B4D 01                         	dc.b	$01
00086B4E E1FC                       	smpsAlterNote       $FC
00086B50 01                         	dc.b	$01
00086B51 E1FF                       	smpsAlterNote       $FF
00086B53 01                         	dc.b	$01
00086B54 E103                       	smpsAlterNote       $03
00086B56 01                         	dc.b	$01
00086B57 E1FC                       	smpsAlterNote       $FC
00086B59 ECF5                       	smpsPSGAlterVol     $F5
00086B5B 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00086B5F EC04                       	smpsPSGAlterVol     $04
00086B61 E701                       	dc.b	smpsNoAttack, $01
00086B63 EC07                       	smpsPSGAlterVol     $07
00086B65 8009                       	dc.b	nRst, $09
00086B67 E1FF                       	smpsAlterNote       $FF
00086B69 01                         	dc.b	$01
00086B6A E103                       	smpsAlterNote       $03
00086B6C 01                         	dc.b	$01
00086B6D E102                       	smpsAlterNote       $02
00086B6F 01                         	dc.b	$01
00086B70 E1FC                       	smpsAlterNote       $FC
00086B72 01                         	dc.b	$01
00086B73 E1F8                       	smpsAlterNote       $F8
00086B75 01                         	dc.b	$01
00086B76 E1FC                       	smpsAlterNote       $FC
00086B78 01                         	dc.b	$01
00086B79 E1FF                       	smpsAlterNote       $FF
00086B7B 01                         	dc.b	$01
00086B7C E103                       	smpsAlterNote       $03
00086B7E 01                         	dc.b	$01
00086B7F E1FF                       	smpsAlterNote       $FF
00086B81 01                         	dc.b	$01
00086B82 E1F9                       	smpsAlterNote       $F9
00086B84 01                         	dc.b	$01
00086B85 E1F8                       	smpsAlterNote       $F8
00086B87 01                         	dc.b	$01
00086B88 E1FC                       	smpsAlterNote       $FC
00086B8A 01                         	dc.b	$01
00086B8B E102                       	smpsAlterNote       $02
00086B8D 0101                       	dc.b	$01, $01
00086B8F E1FF                       	smpsAlterNote       $FF
00086B91 01                         	dc.b	$01
00086B92 E1FC                       	smpsAlterNote       $FC
00086B94 ECF5                       	smpsPSGAlterVol     $F5
00086B96 8F02                       	dc.b	nD1, $02
00086B98 EC04                       	smpsPSGAlterVol     $04
00086B9A E701                       	dc.b	smpsNoAttack, $01
00086B9C ECFC                       	smpsPSGAlterVol     $FC
00086B9E E1FB                       	smpsAlterNote       $FB
00086BA0 8D06                       	dc.b	nC1, $06
00086BA2 EC04                       	smpsPSGAlterVol     $04
00086BA4 E701                       	dc.b	smpsNoAttack, $01
00086BA6 EC07                       	smpsPSGAlterVol     $07
00086BA8 8006                       	dc.b	nRst, $06
00086BAA E1FE                       	smpsAlterNote       $FE
00086BAC 01                         	dc.b	$01
00086BAD E102                       	smpsAlterNote       $02
00086BAF 01                         	dc.b	$01
00086BB0 E1FE                       	smpsAlterNote       $FE
00086BB2 01                         	dc.b	$01
00086BB3 E1FB                       	smpsAlterNote       $FB
00086BB5 01                         	dc.b	$01
00086BB6 E1F7                       	smpsAlterNote       $F7
00086BB8 01                         	dc.b	$01
00086BB9 E1FB                       	smpsAlterNote       $FB
00086BBB 01                         	dc.b	$01
00086BBC E101                       	smpsAlterNote       $01
00086BBE 01                         	dc.b	$01
00086BBF E102                       	smpsAlterNote       $02
00086BC1 01                         	dc.b	$01
00086BC2 E1FB                       	smpsAlterNote       $FB
00086BC4 ECF5                       	smpsPSGAlterVol     $F5
00086BC6 8D02                       	dc.b	nC1, $02
00086BC8 EC04                       	smpsPSGAlterVol     $04
00086BCA E701                       	dc.b	smpsNoAttack, $01
00086BCC E1FC                       	smpsAlterNote       $FC
00086BCE ECFC                       	smpsPSGAlterVol     $FC
00086BD0 8F0D                       	dc.b	nD1, $0D
00086BD2 E1FF                       	smpsAlterNote       $FF
00086BD4 E701                       	dc.b	smpsNoAttack, $01
00086BD6 E103                       	smpsAlterNote       $03
00086BD8 E701                       	dc.b	smpsNoAttack, $01
00086BDA E1FF                       	smpsAlterNote       $FF
00086BDC E701                       	dc.b	smpsNoAttack, $01
00086BDE E1FC                       	smpsAlterNote       $FC
00086BE0 E701                       	dc.b	smpsNoAttack, $01
00086BE2 E1F8                       	smpsAlterNote       $F8
00086BE4 E701                       	dc.b	smpsNoAttack, $01
00086BE6 E1FC                       	smpsAlterNote       $FC
00086BE8 E701                       	dc.b	smpsNoAttack, $01
00086BEA E102                       	smpsAlterNote       $02
00086BEC E701                       	dc.b	smpsNoAttack, $01
00086BEE E103                       	smpsAlterNote       $03
00086BF0 E701                       	dc.b	smpsNoAttack, $01
00086BF2 E1FF                       	smpsAlterNote       $FF
00086BF4 E701                       	dc.b	smpsNoAttack, $01
00086BF6 E1F9                       	smpsAlterNote       $F9
00086BF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086BFC E1FC                       	smpsAlterNote       $FC
00086BFE E701                       	dc.b	smpsNoAttack, $01
00086C00 E102                       	smpsAlterNote       $02
00086C02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C06 E1FC                       	smpsAlterNote       $FC
00086C08 E701                       	dc.b	smpsNoAttack, $01
00086C0A E1F9                       	smpsAlterNote       $F9
00086C0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C10 E1FF                       	smpsAlterNote       $FF
00086C12 EC04                       	smpsPSGAlterVol     $04
00086C14 E701                       	dc.b	smpsNoAttack, $01
00086C16 EC07                       	smpsPSGAlterVol     $07
00086C18 E103                       	smpsAlterNote       $03
00086C1A 8001                       	dc.b	nRst, $01
00086C1C E102                       	smpsAlterNote       $02
00086C1E 01                         	dc.b	$01
00086C1F E1FB                       	smpsAlterNote       $FB
00086C21 01                         	dc.b	$01
00086C22 E1F7                       	smpsAlterNote       $F7
00086C24 01                         	dc.b	$01
00086C25 E1FB                       	smpsAlterNote       $FB
00086C27 01                         	dc.b	$01
00086C28 E102                       	smpsAlterNote       $02
00086C2A 01                         	dc.b	$01
00086C2B E103                       	smpsAlterNote       $03
00086C2D 01                         	dc.b	$01
00086C2E E1FB                       	smpsAlterNote       $FB
00086C30 ECF5                       	smpsPSGAlterVol     $F5
00086C32 8E06                       	dc.b	nCs1, $06
00086C34 EC04                       	smpsPSGAlterVol     $04
00086C36 E701                       	dc.b	smpsNoAttack, $01
00086C38 EC07                       	smpsPSGAlterVol     $07
00086C3A 8003                       	dc.b	nRst, $03
00086C3C ECF5                       	smpsPSGAlterVol     $F5
00086C3E 8E06                       	dc.b	nCs1, $06
00086C40 EC04                       	smpsPSGAlterVol     $04
00086C42 E701                       	dc.b	smpsNoAttack, $01
00086C44 EC07                       	smpsPSGAlterVol     $07
00086C46 8006                       	dc.b	nRst, $06
00086C48 E1FE                       	smpsAlterNote       $FE
00086C4A 01                         	dc.b	$01
00086C4B E102                       	smpsAlterNote       $02
00086C4D 01                         	dc.b	$01
00086C4E E1FE                       	smpsAlterNote       $FE
00086C50 01                         	dc.b	$01
00086C51 E1F9                       	smpsAlterNote       $F9
00086C53 01                         	dc.b	$01
00086C54 E1FC                       	smpsAlterNote       $FC
00086C56 ECF5                       	smpsPSGAlterVol     $F5
00086C58 8F06                       	dc.b	nD1, $06
00086C5A EC04                       	smpsPSGAlterVol     $04
00086C5C E701                       	dc.b	smpsNoAttack, $01
00086C5E EC07                       	smpsPSGAlterVol     $07
00086C60 8003                       	dc.b	nRst, $03
00086C62 ECF5                       	smpsPSGAlterVol     $F5
00086C64 8F07                       	dc.b	nD1, $07
00086C66 EC0B                       	smpsPSGAlterVol     $0B
00086C68 8006                       	dc.b	nRst, $06
00086C6A E1FF                       	smpsAlterNote       $FF
00086C6C 01                         	dc.b	$01
00086C6D E102                       	smpsAlterNote       $02
00086C6F 0101                       	dc.b	$01, $01
00086C71 E1FB                       	smpsAlterNote       $FB
00086C73 01                         	dc.b	$01
00086C74 ECF5                       	smpsPSGAlterVol     $F5
00086C76 8E07                       	dc.b	nCs1, $07
00086C78 EC0B                       	smpsPSGAlterVol     $0B
00086C7A 8004                       	dc.b	nRst, $04
00086C7C ECF5                       	smpsPSGAlterVol     $F5
00086C7E 8E06                       	dc.b	nCs1, $06
00086C80 EC04                       	smpsPSGAlterVol     $04
00086C82 E701                       	dc.b	smpsNoAttack, $01
00086C84 EC07                       	smpsPSGAlterVol     $07
00086C86 8006                       	dc.b	nRst, $06
00086C88 E101                       	smpsAlterNote       $01
00086C8A 01                         	dc.b	$01
00086C8B E102                       	smpsAlterNote       $02
00086C8D 01                         	dc.b	$01
00086C8E E1FE                       	smpsAlterNote       $FE
00086C90 01                         	dc.b	$01
00086C91 E1F8                       	smpsAlterNote       $F8
00086C93 01                         	dc.b	$01
00086C94 E1FB                       	smpsAlterNote       $FB
00086C96 ECF5                       	smpsPSGAlterVol     $F5
00086C98 8E06                       	dc.b	nCs1, $06
00086C9A EC04                       	smpsPSGAlterVol     $04
00086C9C E701                       	dc.b	smpsNoAttack, $01
00086C9E EC07                       	smpsPSGAlterVol     $07
00086CA0 8003                       	dc.b	nRst, $03
00086CA2 ECF5                       	smpsPSGAlterVol     $F5
00086CA4 8E06                       	dc.b	nCs1, $06
00086CA6 EC04                       	smpsPSGAlterVol     $04
00086CA8 E701                       	dc.b	smpsNoAttack, $01
00086CAA EC07                       	smpsPSGAlterVol     $07
00086CAC 8004                       	dc.b	nRst, $04
00086CAE E1FC                       	smpsAlterNote       $FC
00086CB0 ECF5                       	smpsPSGAlterVol     $F5
00086CB2 8F06                       	dc.b	nD1, $06
00086CB4 EC0B                       	smpsPSGAlterVol     $0B
00086CB6 8006                       	dc.b	nRst, $06
00086CB8 E1FF                       	smpsAlterNote       $FF
00086CBA 01                         	dc.b	$01
00086CBB E102                       	smpsAlterNote       $02
00086CBD 0101                       	dc.b	$01, $01
00086CBF E1FC                       	smpsAlterNote       $FC
00086CC1 01                         	dc.b	$01
00086CC2 E1F8                       	smpsAlterNote       $F8
00086CC4 01                         	dc.b	$01
00086CC5 E1F9                       	smpsAlterNote       $F9
00086CC7 01                         	dc.b	$01
00086CC8 E1FF                       	smpsAlterNote       $FF
00086CCA 01                         	dc.b	$01
00086CCB E103                       	smpsAlterNote       $03
00086CCD 01                         	dc.b	$01
00086CCE E1FC                       	smpsAlterNote       $FC
00086CD0 ECF5                       	smpsPSGAlterVol     $F5
00086CD2 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00086CD6 EC04                       	smpsPSGAlterVol     $04
00086CD8 E701                       	dc.b	smpsNoAttack, $01
00086CDA EC07                       	smpsPSGAlterVol     $07
00086CDC 8009                       	dc.b	nRst, $09
00086CDE E1FF                       	smpsAlterNote       $FF
00086CE0 01                         	dc.b	$01
00086CE1 E102                       	smpsAlterNote       $02
00086CE3 0101                       	dc.b	$01, $01
00086CE5 E1FC                       	smpsAlterNote       $FC
00086CE7 01                         	dc.b	$01
00086CE8 E1F8                       	smpsAlterNote       $F8
00086CEA 01                         	dc.b	$01
00086CEB E1F9                       	smpsAlterNote       $F9
00086CED 01                         	dc.b	$01
00086CEE E1FF                       	smpsAlterNote       $FF
00086CF0 01                         	dc.b	$01
00086CF1 E103                       	smpsAlterNote       $03
00086CF3 01                         	dc.b	$01
00086CF4 E1FF                       	smpsAlterNote       $FF
00086CF6 01                         	dc.b	$01
00086CF7 E1FC                       	smpsAlterNote       $FC
00086CF9 01                         	dc.b	$01
00086CFA E1F8                       	smpsAlterNote       $F8
00086CFC 01                         	dc.b	$01
00086CFD E1FC                       	smpsAlterNote       $FC
00086CFF 01                         	dc.b	$01
00086D00 E102                       	smpsAlterNote       $02
00086D02 01                         	dc.b	$01
00086D03 E103                       	smpsAlterNote       $03
00086D05 01                         	dc.b	$01
00086D06 E1FF                       	smpsAlterNote       $FF
00086D08 01                         	dc.b	$01
00086D09 E1FC                       	smpsAlterNote       $FC
00086D0B ECF5                       	smpsPSGAlterVol     $F5
00086D0D 8F03                       	dc.b	nD1, $03
00086D0F E1FB                       	smpsAlterNote       $FB
00086D11 8D06                       	dc.b	nC1, $06
00086D13 EC04                       	smpsPSGAlterVol     $04
00086D15 E701                       	dc.b	smpsNoAttack, $01
00086D17 EC07                       	smpsPSGAlterVol     $07
00086D19 8006                       	dc.b	nRst, $06
00086D1B E1FE                       	smpsAlterNote       $FE
00086D1D 01                         	dc.b	$01
00086D1E E102                       	smpsAlterNote       $02
00086D20 01                         	dc.b	$01
00086D21 E101                       	smpsAlterNote       $01
00086D23 01                         	dc.b	$01
00086D24 E1FB                       	smpsAlterNote       $FB
00086D26 01                         	dc.b	$01
00086D27 E1F7                       	smpsAlterNote       $F7
00086D29 01                         	dc.b	$01
00086D2A E1FB                       	smpsAlterNote       $FB
00086D2C 01                         	dc.b	$01
00086D2D E1FE                       	smpsAlterNote       $FE
00086D2F 01                         	dc.b	$01
00086D30 E102                       	smpsAlterNote       $02
00086D32 01                         	dc.b	$01
00086D33 E1FB                       	smpsAlterNote       $FB
00086D35 ECF5                       	smpsPSGAlterVol     $F5
00086D37 8D03                       	dc.b	nC1, $03
00086D39 E1FC                       	smpsAlterNote       $FC
00086D3B 8F0D                       	dc.b	nD1, $0D
00086D3D E1FF                       	smpsAlterNote       $FF
00086D3F E701                       	dc.b	smpsNoAttack, $01
00086D41 E103                       	smpsAlterNote       $03
00086D43 E701                       	dc.b	smpsNoAttack, $01
00086D45 E1FF                       	smpsAlterNote       $FF
00086D47 E701                       	dc.b	smpsNoAttack, $01
00086D49 E1FC                       	smpsAlterNote       $FC
00086D4B E701                       	dc.b	smpsNoAttack, $01
00086D4D E1F8                       	smpsAlterNote       $F8
00086D4F E701                       	dc.b	smpsNoAttack, $01
00086D51 E1FC                       	smpsAlterNote       $FC
00086D53 E701                       	dc.b	smpsNoAttack, $01
00086D55 E102                       	smpsAlterNote       $02
00086D57 E701                       	dc.b	smpsNoAttack, $01
00086D59 E103                       	smpsAlterNote       $03
00086D5B E701                       	dc.b	smpsNoAttack, $01
00086D5D E1FF                       	smpsAlterNote       $FF
00086D5F E701                       	dc.b	smpsNoAttack, $01
00086D61 E1F9                       	smpsAlterNote       $F9
00086D63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D67 E1FC                       	smpsAlterNote       $FC
00086D69 E701                       	dc.b	smpsNoAttack, $01
00086D6B E102                       	smpsAlterNote       $02
00086D6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D71 E1FF                       	smpsAlterNote       $FF
00086D73 E701                       	dc.b	smpsNoAttack, $01
00086D75 E1F9                       	smpsAlterNote       $F9
00086D77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D7B E1FF                       	smpsAlterNote       $FF
00086D7D EC04                       	smpsPSGAlterVol     $04
00086D7F E701                       	dc.b	smpsNoAttack, $01
00086D81 EC07                       	smpsPSGAlterVol     $07
00086D83 E103                       	smpsAlterNote       $03
00086D85 8001                       	dc.b	nRst, $01
00086D87 E102                       	smpsAlterNote       $02
00086D89 01                         	dc.b	$01
00086D8A E1FB                       	smpsAlterNote       $FB
00086D8C 01                         	dc.b	$01
00086D8D E1F7                       	smpsAlterNote       $F7
00086D8F 01                         	dc.b	$01
00086D90 E1FB                       	smpsAlterNote       $FB
00086D92 01                         	dc.b	$01
00086D93 E1FF                       	smpsAlterNote       $FF
00086D95 01                         	dc.b	$01
00086D96 E103                       	smpsAlterNote       $03
00086D98 01                         	dc.b	$01
00086D99 E1FB                       	smpsAlterNote       $FB
00086D9B ECF5                       	smpsPSGAlterVol     $F5
00086D9D 8E06                       	dc.b	nCs1, $06
00086D9F EC04                       	smpsPSGAlterVol     $04
00086DA1 E701                       	dc.b	smpsNoAttack, $01
00086DA3 EC07                       	smpsPSGAlterVol     $07
00086DA5 8003                       	dc.b	nRst, $03
00086DA7 ECF5                       	smpsPSGAlterVol     $F5
00086DA9 8E06                       	dc.b	nCs1, $06
00086DAB EC04                       	smpsPSGAlterVol     $04
00086DAD E701                       	dc.b	smpsNoAttack, $01
00086DAF EC07                       	smpsPSGAlterVol     $07
00086DB1 8006                       	dc.b	nRst, $06
00086DB3 E1FE                       	smpsAlterNote       $FE
00086DB5 01                         	dc.b	$01
00086DB6 E102                       	smpsAlterNote       $02
00086DB8 01                         	dc.b	$01
00086DB9 E1FE                       	smpsAlterNote       $FE
00086DBB 01                         	dc.b	$01
00086DBC E1FC                       	smpsAlterNote       $FC
00086DBE 01                         	dc.b	$01
00086DBF ECF5                       	smpsPSGAlterVol     $F5
00086DC1 8F06                       	dc.b	nD1, $06
00086DC3 EC04                       	smpsPSGAlterVol     $04
00086DC5 E701                       	dc.b	smpsNoAttack, $01
00086DC7 EC07                       	smpsPSGAlterVol     $07
00086DC9 8003                       	dc.b	nRst, $03
00086DCB ECF5                       	smpsPSGAlterVol     $F5
00086DCD 8F07                       	dc.b	nD1, $07
00086DCF EC0B                       	smpsPSGAlterVol     $0B
00086DD1 8007                       	dc.b	nRst, $07
00086DD3 E102                       	smpsAlterNote       $02
00086DD5 0101                       	dc.b	$01, $01
00086DD7 E1FB                       	smpsAlterNote       $FB
00086DD9 01                         	dc.b	$01
00086DDA E1F8                       	smpsAlterNote       $F8
00086DDC 01                         	dc.b	$01
00086DDD E1FB                       	smpsAlterNote       $FB
00086DDF ECF5                       	smpsPSGAlterVol     $F5
00086DE1 8E06                       	dc.b	nCs1, $06
00086DE3 EC0B                       	smpsPSGAlterVol     $0B
00086DE5 8004                       	dc.b	nRst, $04
00086DE7 ECF5                       	smpsPSGAlterVol     $F5
00086DE9 8E06                       	dc.b	nCs1, $06
00086DEB EC04                       	smpsPSGAlterVol     $04
00086DED E701                       	dc.b	smpsNoAttack, $01
00086DEF EC07                       	smpsPSGAlterVol     $07
00086DF1 8006                       	dc.b	nRst, $06
00086DF3 E1FE                       	smpsAlterNote       $FE
00086DF5 01                         	dc.b	$01
00086DF6 E102                       	smpsAlterNote       $02
00086DF8 01                         	dc.b	$01
00086DF9 E1FE                       	smpsAlterNote       $FE
00086DFB 01                         	dc.b	$01
00086DFC E1F9                       	smpsAlterNote       $F9
00086DFE 01                         	dc.b	$01
00086DFF E1FC                       	smpsAlterNote       $FC
00086E01 ECF5                       	smpsPSGAlterVol     $F5
00086E03 8F06                       	dc.b	nD1, $06
00086E05 EC04                       	smpsPSGAlterVol     $04
00086E07 E701                       	dc.b	smpsNoAttack, $01
00086E09 EC07                       	smpsPSGAlterVol     $07
00086E0B 8003                       	dc.b	nRst, $03
00086E0D ECF5                       	smpsPSGAlterVol     $F5
00086E0F 8F06                       	dc.b	nD1, $06
00086E11 EC04                       	smpsPSGAlterVol     $04
00086E13 E701                       	dc.b	smpsNoAttack, $01
00086E15 EC07                       	smpsPSGAlterVol     $07
00086E17 8006                       	dc.b	nRst, $06
00086E19 E1FF                       	smpsAlterNote       $FF
00086E1B 01                         	dc.b	$01
00086E1C E103                       	smpsAlterNote       $03
00086E1E 01                         	dc.b	$01
00086E1F E102                       	smpsAlterNote       $02
00086E21 01                         	dc.b	$01
00086E22 E1FB                       	smpsAlterNote       $FB
00086E24 01                         	dc.b	$01
00086E25 ECF5                       	smpsPSGAlterVol     $F5
00086E27 8E07                       	dc.b	nCs1, $07
00086E29 EC0B                       	smpsPSGAlterVol     $0B
00086E2B 8004                       	dc.b	nRst, $04
00086E2D ECF5                       	smpsPSGAlterVol     $F5
00086E2F 8E06                       	dc.b	nCs1, $06
00086E31 EC0B                       	smpsPSGAlterVol     $0B
00086E33 8007                       	dc.b	nRst, $07
00086E35 E101                       	smpsAlterNote       $01
00086E37 0101                       	dc.b	$01, $01
00086E39 E1FE                       	smpsAlterNote       $FE
00086E3B 01                         	dc.b	$01
00086E3C E1F9                       	smpsAlterNote       $F9
00086E3E 01                         	dc.b	$01
00086E3F E1FC                       	smpsAlterNote       $FC
00086E41 ECF5                       	smpsPSGAlterVol     $F5
00086E43 8F06                       	dc.b	nD1, $06
00086E45 EC04                       	smpsPSGAlterVol     $04
00086E47 E701                       	dc.b	smpsNoAttack, $01
00086E49 EC07                       	smpsPSGAlterVol     $07
00086E4B 8003                       	dc.b	nRst, $03
00086E4D ECF5                       	smpsPSGAlterVol     $F5
00086E4F 8F06                       	dc.b	nD1, $06
00086E51 EC04                       	smpsPSGAlterVol     $04
00086E53 E701                       	dc.b	smpsNoAttack, $01
00086E55 EC07                       	smpsPSGAlterVol     $07
00086E57 8006                       	dc.b	nRst, $06
00086E59 E1FF                       	smpsAlterNote       $FF
00086E5B 01                         	dc.b	$01
00086E5C E103                       	smpsAlterNote       $03
00086E5E 01                         	dc.b	$01
00086E5F E1FF                       	smpsAlterNote       $FF
00086E61 01                         	dc.b	$01
00086E62 E1FB                       	smpsAlterNote       $FB
00086E64 01                         	dc.b	$01
00086E65 ECF5                       	smpsPSGAlterVol     $F5
00086E67 8E06                       	dc.b	nCs1, $06
00086E69 EC04                       	smpsPSGAlterVol     $04
00086E6B E701                       	dc.b	smpsNoAttack, $01
00086E6D EC07                       	smpsPSGAlterVol     $07
00086E6F 8003                       	dc.b	nRst, $03
00086E71 ECF5                       	smpsPSGAlterVol     $F5
00086E73 8E07                       	dc.b	nCs1, $07
00086E75 E1FF                       	smpsAlterNote       $FF
00086E77 9B06                       	dc.b	nD2, $06
00086E79 EC04                       	smpsPSGAlterVol     $04
00086E7B E701                       	dc.b	smpsNoAttack, $01
00086E7D ECFC                       	smpsPSGAlterVol     $FC
00086E7F 9B03                       	dc.b	nD2, $03
00086E81 EC04                       	smpsPSGAlterVol     $04
00086E83 E701                       	dc.b	smpsNoAttack, $01
00086E85 ECFC                       	smpsPSGAlterVol     $FC
00086E87 9B02                       	dc.b	nD2, $02
00086E89 EC04                       	smpsPSGAlterVol     $04
00086E8B E701                       	dc.b	smpsNoAttack, $01
00086E8D ECFC                       	smpsPSGAlterVol     $FC
00086E8F E1FE                       	smpsAlterNote       $FE
00086E91 9A03                       	dc.b	nCs2, $03
00086E93 EC0B                       	smpsPSGAlterVol     $0B
00086E95 800A                       	dc.b	nRst, $0A
00086E97 E102                       	smpsAlterNote       $02
00086E99 01                         	dc.b	$01
00086E9A E10A                       	smpsAlterNote       $0A
00086E9C 01                         	dc.b	$01
00086E9D E102                       	smpsAlterNote       $02
00086E9F 01                         	dc.b	$01
00086EA0 E1F7                       	smpsAlterNote       $F7
00086EA2 01                         	dc.b	$01
00086EA3 E10A                       	smpsAlterNote       $0A
00086EA5 01                         	dc.b	$01
00086EA6 E1FC                       	smpsAlterNote       $FC
00086EA8 01                         	dc.b	$01
00086EA9 E108                       	smpsAlterNote       $08
00086EAB 0101                       	dc.b	$01, $01
00086EAD E102                       	smpsAlterNote       $02
00086EAF 01                         	dc.b	$01
00086EB0 E1F7                       	smpsAlterNote       $F7
00086EB2 0101                       	dc.b	$01, $01
00086EB4 E1FC                       	smpsAlterNote       $FC
00086EB6 ECF5                       	smpsPSGAlterVol     $F5
00086EB8 8F06                       	dc.b	nD1, $06
00086EBA EC04                       	smpsPSGAlterVol     $04
00086EBC E701                       	dc.b	smpsNoAttack, $01
00086EBE EC07                       	smpsPSGAlterVol     $07
00086EC0 8003                       	dc.b	nRst, $03
00086EC2 ECF5                       	smpsPSGAlterVol     $F5
00086EC4 8F06                       	dc.b	nD1, $06
00086EC6 EC04                       	smpsPSGAlterVol     $04
00086EC8 E701                       	dc.b	smpsNoAttack, $01
00086ECA EC07                       	smpsPSGAlterVol     $07
00086ECC 8006                       	dc.b	nRst, $06
00086ECE E1FF                       	smpsAlterNote       $FF
00086ED0 01                         	dc.b	$01
00086ED1 E102                       	smpsAlterNote       $02
00086ED3 01                         	dc.b	$01
00086ED4 E101                       	smpsAlterNote       $01
00086ED6 01                         	dc.b	$01
00086ED7 E1FC                       	smpsAlterNote       $FC
00086ED9 01                         	dc.b	$01
00086EDA ECF5                       	smpsPSGAlterVol     $F5
00086EDC 9007                       	dc.b	nEb1, $07
00086EDE EC0B                       	smpsPSGAlterVol     $0B
00086EE0 8004                       	dc.b	nRst, $04
00086EE2 ECF5                       	smpsPSGAlterVol     $F5
00086EE4 9006                       	dc.b	nEb1, $06
00086EE6 EC0B                       	smpsPSGAlterVol     $0B
00086EE8 8007                       	dc.b	nRst, $07
00086EEA E103                       	smpsAlterNote       $03
00086EEC 0101                       	dc.b	$01, $01
00086EEE E1FF                       	smpsAlterNote       $FF
00086EF0 01                         	dc.b	$01
00086EF1 E1F9                       	smpsAlterNote       $F9
00086EF3 01                         	dc.b	$01
00086EF4 E1FC                       	smpsAlterNote       $FC
00086EF6 ECF5                       	smpsPSGAlterVol     $F5
00086EF8 8F06                       	dc.b	nD1, $06
00086EFA EC04                       	smpsPSGAlterVol     $04
00086EFC E701                       	dc.b	smpsNoAttack, $01
00086EFE EC07                       	smpsPSGAlterVol     $07
00086F00 8003                       	dc.b	nRst, $03
00086F02 ECF5                       	smpsPSGAlterVol     $F5
00086F04 8F06                       	dc.b	nD1, $06
00086F06 EC04                       	smpsPSGAlterVol     $04
00086F08 E701                       	dc.b	smpsNoAttack, $01
00086F0A EC07                       	smpsPSGAlterVol     $07
00086F0C 8006                       	dc.b	nRst, $06
00086F0E E1FF                       	smpsAlterNote       $FF
00086F10 01                         	dc.b	$01
00086F11 E103                       	smpsAlterNote       $03
00086F13 01                         	dc.b	$01
00086F14 E1FF                       	smpsAlterNote       $FF
00086F16 01                         	dc.b	$01
00086F17 E1F9                       	smpsAlterNote       $F9
00086F19 01                         	dc.b	$01
00086F1A E1FC                       	smpsAlterNote       $FC
00086F1C ECF5                       	smpsPSGAlterVol     $F5
00086F1E 8F06                       	dc.b	nD1, $06
00086F20 EC04                       	smpsPSGAlterVol     $04
00086F22 E701                       	dc.b	smpsNoAttack, $01
00086F24 EC07                       	smpsPSGAlterVol     $07
00086F26 8003                       	dc.b	nRst, $03
00086F28 ECF5                       	smpsPSGAlterVol     $F5
00086F2A 8F07                       	dc.b	nD1, $07
00086F2C EC0B                       	smpsPSGAlterVol     $0B
00086F2E 8006                       	dc.b	nRst, $06
00086F30 E1FF                       	smpsAlterNote       $FF
00086F32 01                         	dc.b	$01
00086F33 E102                       	smpsAlterNote       $02
00086F35 0101                       	dc.b	$01, $01
00086F37 E1FC                       	smpsAlterNote       $FC
00086F39 01                         	dc.b	$01
00086F3A ECF5                       	smpsPSGAlterVol     $F5
00086F3C 8F07                       	dc.b	nD1, $07
00086F3E EC0B                       	smpsPSGAlterVol     $0B
00086F40 8004                       	dc.b	nRst, $04
00086F42 ECF5                       	smpsPSGAlterVol     $F5
00086F44 8F06                       	dc.b	nD1, $06
00086F46 EC04                       	smpsPSGAlterVol     $04
00086F48 E701                       	dc.b	smpsNoAttack, $01
00086F4A EC07                       	smpsPSGAlterVol     $07
00086F4C 8006                       	dc.b	nRst, $06
00086F4E E101                       	smpsAlterNote       $01
00086F50 01                         	dc.b	$01
00086F51 E102                       	smpsAlterNote       $02
00086F53 01                         	dc.b	$01
00086F54 E1FF                       	smpsAlterNote       $FF
00086F56 01                         	dc.b	$01
00086F57 E1F9                       	smpsAlterNote       $F9
00086F59 01                         	dc.b	$01
00086F5A E1FC                       	smpsAlterNote       $FC
00086F5C ECF5                       	smpsPSGAlterVol     $F5
00086F5E 9006                       	dc.b	nEb1, $06
00086F60 EC04                       	smpsPSGAlterVol     $04
00086F62 E701                       	dc.b	smpsNoAttack, $01
00086F64 EC07                       	smpsPSGAlterVol     $07
00086F66 8003                       	dc.b	nRst, $03
00086F68 ECF5                       	smpsPSGAlterVol     $F5
00086F6A 9006                       	dc.b	nEb1, $06
00086F6C EC04                       	smpsPSGAlterVol     $04
00086F6E E701                       	dc.b	smpsNoAttack, $01
00086F70 EC07                       	smpsPSGAlterVol     $07
00086F72 8006                       	dc.b	nRst, $06
00086F74 E100                       	smpsAlterNote       $00
00086F76 01                         	dc.b	$01
00086F77 E102                       	smpsAlterNote       $02
00086F79 01                         	dc.b	$01
00086F7A E100                       	smpsAlterNote       $00
00086F7C 01                         	dc.b	$01
00086F7D E1FF                       	smpsAlterNote       $FF
00086F7F 01                         	dc.b	$01
00086F80 ECF5                       	smpsPSGAlterVol     $F5
00086F82 9B06                       	dc.b	nD2, $06
00086F84 EC04                       	smpsPSGAlterVol     $04
00086F86 E701                       	dc.b	smpsNoAttack, $01
00086F88 EC07                       	smpsPSGAlterVol     $07
00086F8A 8003                       	dc.b	nRst, $03
00086F8C ECF5                       	smpsPSGAlterVol     $F5
00086F8E 9B07                       	dc.b	nD2, $07
00086F90 EC0B                       	smpsPSGAlterVol     $0B
00086F92 8007                       	dc.b	nRst, $07
00086F94 E105                       	smpsAlterNote       $05
00086F96 0101                       	dc.b	$01, $01
00086F98 E1FF                       	smpsAlterNote       $FF
00086F9A 01                         	dc.b	$01
00086F9B E1FC                       	smpsAlterNote       $FC
00086F9D 01                         	dc.b	$01
00086F9E E1FF                       	smpsAlterNote       $FF
00086FA0 ECF5                       	smpsPSGAlterVol     $F5
00086FA2 9B06                       	dc.b	nD2, $06
00086FA4 EC0B                       	smpsPSGAlterVol     $0B
00086FA6 8004                       	dc.b	nRst, $04
00086FA8 ECF5                       	smpsPSGAlterVol     $F5
00086FAA 9B06                       	dc.b	nD2, $06
00086FAC EC04                       	smpsPSGAlterVol     $04
00086FAE E701                       	dc.b	smpsNoAttack, $01
00086FB0 EC07                       	smpsPSGAlterVol     $07
00086FB2 8006                       	dc.b	nRst, $06
00086FB4 E102                       	smpsAlterNote       $02
00086FB6 01                         	dc.b	$01
00086FB7 E106                       	smpsAlterNote       $06
00086FB9 01                         	dc.b	$01
00086FBA E102                       	smpsAlterNote       $02
00086FBC 01                         	dc.b	$01
00086FBD E1FC                       	smpsAlterNote       $FC
00086FBF 01                         	dc.b	$01
00086FC0 E1FF                       	smpsAlterNote       $FF
00086FC2 ECF5                       	smpsPSGAlterVol     $F5
00086FC4 9B06                       	dc.b	nD2, $06
00086FC6 EC04                       	smpsPSGAlterVol     $04
00086FC8 E701                       	dc.b	smpsNoAttack, $01
00086FCA EC07                       	smpsPSGAlterVol     $07
00086FCC 8003                       	dc.b	nRst, $03
00086FCE ECF5                       	smpsPSGAlterVol     $F5
00086FD0 9B07                       	dc.b	nD2, $07
00086FD2 EC0B                       	smpsPSGAlterVol     $0B
00086FD4 8006                       	dc.b	nRst, $06
00086FD6 E102                       	smpsAlterNote       $02
00086FD8 01                         	dc.b	$01
00086FD9 E105                       	smpsAlterNote       $05
00086FDB 0101                       	dc.b	$01, $01
00086FDD E1FF                       	smpsAlterNote       $FF
00086FDF 01                         	dc.b	$01
00086FE0 ECF5                       	smpsPSGAlterVol     $F5
00086FE2 9B07                       	dc.b	nD2, $07
00086FE4 EC0B                       	smpsPSGAlterVol     $0B
00086FE6 8004                       	dc.b	nRst, $04
00086FE8 ECF5                       	smpsPSGAlterVol     $F5
00086FEA 9B06                       	dc.b	nD2, $06
00086FEC EC04                       	smpsPSGAlterVol     $04
00086FEE E701                       	dc.b	smpsNoAttack, $01
00086FF0 EC07                       	smpsPSGAlterVol     $07
00086FF2 8006                       	dc.b	nRst, $06
00086FF4 E105                       	smpsAlterNote       $05
00086FF6 0101                       	dc.b	$01, $01
00086FF8 E102                       	smpsAlterNote       $02
00086FFA 01                         	dc.b	$01
00086FFB E1FC                       	smpsAlterNote       $FC
00086FFD 01                         	dc.b	$01
00086FFE E1FF                       	smpsAlterNote       $FF
00087000 ECF5                       	smpsPSGAlterVol     $F5
00087002 9B06                       	dc.b	nD2, $06
00087004 EC04                       	smpsPSGAlterVol     $04
00087006 E701                       	dc.b	smpsNoAttack, $01
00087008 EC07                       	smpsPSGAlterVol     $07
0008700A 8003                       	dc.b	nRst, $03
0008700C ECF5                       	smpsPSGAlterVol     $F5
0008700E 9B06                       	dc.b	nD2, $06
00087010 EC04                       	smpsPSGAlterVol     $04
00087012 E701                       	dc.b	smpsNoAttack, $01
00087014 EC07                       	smpsPSGAlterVol     $07
00087016 8006                       	dc.b	nRst, $06
00087018 E102                       	smpsAlterNote       $02
0008701A 01                         	dc.b	$01
0008701B E106                       	smpsAlterNote       $06
0008701D 01                         	dc.b	$01
0008701E E102                       	smpsAlterNote       $02
00087020 01                         	dc.b	$01
00087021 E1FF                       	smpsAlterNote       $FF
00087023 01                         	dc.b	$01
00087024 ECF5                       	smpsPSGAlterVol     $F5
00087026 9B06                       	dc.b	nD2, $06
00087028 EC04                       	smpsPSGAlterVol     $04
0008702A E701                       	dc.b	smpsNoAttack, $01
0008702C EC07                       	smpsPSGAlterVol     $07
0008702E 8003                       	dc.b	nRst, $03
00087030 ECF5                       	smpsPSGAlterVol     $F5
00087032 9B07                       	dc.b	nD2, $07
00087034 EC0B                       	smpsPSGAlterVol     $0B
00087036 8007                       	dc.b	nRst, $07
00087038 E107                       	smpsAlterNote       $07
0008703A 0101                       	dc.b	$01, $01
0008703C E1FE                       	smpsAlterNote       $FE
0008703E 01                         	dc.b	$01
0008703F E1FA                       	smpsAlterNote       $FA
00087041 0101                       	dc.b	$01, $01
00087043 E103                       	smpsAlterNote       $03
00087045 01                         	dc.b	$01
00087046 E109                       	smpsAlterNote       $09
00087048 01                         	dc.b	$01
00087049 E107                       	smpsAlterNote       $07
0008704B 01                         	dc.b	$01
0008704C E1FE                       	smpsAlterNote       $FE
0008704E 01                         	dc.b	$01
0008704F E108                       	smpsAlterNote       $08
00087051 01                         	dc.b	$01
00087052 E1FD                       	smpsAlterNote       $FD
00087054 ECF5                       	smpsPSGAlterVol     $F5
00087056 940E                       	dc.b	nG1, $0E
00087058 E103                       	smpsAlterNote       $03
0008705A EC0B                       	smpsPSGAlterVol     $0B
0008705C 8001 01                    	dc.b	nRst, $01, $01
0008705F E1FD                       	smpsAlterNote       $FD
00087061 01                         	dc.b	$01
00087062 E1FB                       	smpsAlterNote       $FB
00087064 0101                       	dc.b	$01, $01
00087066 E100                       	smpsAlterNote       $00
00087068 01                         	dc.b	$01
00087069 E103                       	smpsAlterNote       $03
0008706B 01                         	dc.b	$01
0008706C E100                       	smpsAlterNote       $00
0008706E 01                         	dc.b	$01
0008706F E1FD                       	smpsAlterNote       $FD
00087071 01                         	dc.b	$01
00087072 E1FA                       	smpsAlterNote       $FA
00087074 01                         	dc.b	$01
00087075 E1FD                       	smpsAlterNote       $FD
00087077 01                         	dc.b	$01
00087078 E103                       	smpsAlterNote       $03
0008707A 0101                       	dc.b	$01, $01
0008707C E100                       	smpsAlterNote       $00
0008707E 01                         	dc.b	$01
0008707F E1FE                       	smpsAlterNote       $FE
00087081 ECF5                       	smpsPSGAlterVol     $F5
00087083 960D                       	dc.b	nA1, $0D
00087085 E104                       	smpsAlterNote       $04
00087087 EC0B                       	smpsPSGAlterVol     $0B
00087089 8001 01                    	dc.b	nRst, $01, $01
0008708C E101                       	smpsAlterNote       $01
0008708E 01                         	dc.b	$01
0008708F E1FB                       	smpsAlterNote       $FB
00087091 0101                       	dc.b	$01, $01
00087093 E1FE                       	smpsAlterNote       $FE
00087095 01                         	dc.b	$01
00087096 E104                       	smpsAlterNote       $04
00087098 0101                       	dc.b	$01, $01
0008709A E1FE                       	smpsAlterNote       $FE
0008709C 01                         	dc.b	$01
0008709D E1FB                       	smpsAlterNote       $FB
0008709F 0101                       	dc.b	$01, $01
000870A1 E101                       	smpsAlterNote       $01
000870A3 01                         	dc.b	$01
000870A4 E104                       	smpsAlterNote       $04
000870A6 0101                       	dc.b	$01, $01
000870A8 E1FE                       	smpsAlterNote       $FE
000870AA ECF5                       	smpsPSGAlterVol     $F5
000870AC 970D                       	dc.b	nBb1, $0D
000870AE E101                       	smpsAlterNote       $01
000870B0 EC04                       	smpsPSGAlterVol     $04
000870B2 E701                       	dc.b	smpsNoAttack, $01
000870B4 EC07                       	smpsPSGAlterVol     $07
000870B6 E104                       	smpsAlterNote       $04
000870B8 8001                       	dc.b	nRst, $01
000870BA E103                       	smpsAlterNote       $03
000870BC 01                         	dc.b	$01
000870BD E1FE                       	smpsAlterNote       $FE
000870BF 01                         	dc.b	$01
000870C0 E1FA                       	smpsAlterNote       $FA
000870C2 01                         	dc.b	$01
000870C3 E1FE                       	smpsAlterNote       $FE
000870C5 01                         	dc.b	$01
000870C6 E101                       	smpsAlterNote       $01
000870C8 01                         	dc.b	$01
000870C9 E104                       	smpsAlterNote       $04
000870CB 01                         	dc.b	$01
000870CC E101                       	smpsAlterNote       $01
000870CE 01                         	dc.b	$01
000870CF E1FB                       	smpsAlterNote       $FB
000870D1 01                         	dc.b	$01
000870D2 E1FA                       	smpsAlterNote       $FA
000870D4 01                         	dc.b	$01
000870D5 E1FE                       	smpsAlterNote       $FE
000870D7 01                         	dc.b	$01
000870D8 E103                       	smpsAlterNote       $03
000870DA 0101                       	dc.b	$01, $01
000870DC E101                       	smpsAlterNote       $01
000870DE 01                         	dc.b	$01
000870DF E1FE                       	smpsAlterNote       $FE
000870E1 ECF5                       	smpsPSGAlterVol     $F5
000870E3 990D                       	dc.b	nC2, $0D
000870E5 E104                       	smpsAlterNote       $04
000870E7 EC0B                       	smpsPSGAlterVol     $0B
000870E9 8001 01                    	dc.b	nRst, $01, $01
000870EC E102                       	smpsAlterNote       $02
000870EE 01                         	dc.b	$01
000870EF E1FC                       	smpsAlterNote       $FC
000870F1 0101                       	dc.b	$01, $01
000870F3 E102                       	smpsAlterNote       $02
000870F5 01                         	dc.b	$01
000870F6 E104                       	smpsAlterNote       $04
000870F8 01                         	dc.b	$01
000870F9 E1FF                       	smpsAlterNote       $FF
000870FB ECF5                       	smpsPSGAlterVol     $F5
000870FD 9B06                       	dc.b	nD2, $06
000870FF EC04                       	smpsPSGAlterVol     $04
00087101 E701                       	dc.b	smpsNoAttack, $01
00087103 EC07                       	smpsPSGAlterVol     $07
00087105 8003                       	dc.b	nRst, $03
00087107 ECF5                       	smpsPSGAlterVol     $F5
00087109 9B07                       	dc.b	nD2, $07
0008710B EC0B                       	smpsPSGAlterVol     $0B
0008710D 8006                       	dc.b	nRst, $06
0008710F E101                       	smpsAlterNote       $01
00087111 01                         	dc.b	$01
00087112 E104                       	smpsAlterNote       $04
00087114 0101                       	dc.b	$01, $01
00087116 E1FE                       	smpsAlterNote       $FE
00087118 01                         	dc.b	$01
00087119 E1FC                       	smpsAlterNote       $FC
0008711B 01                         	dc.b	$01
0008711C E1FE                       	smpsAlterNote       $FE
0008711E ECF5                       	smpsPSGAlterVol     $F5
00087120 9C06                       	dc.b	nEb2, $06
00087122 EC0B                       	smpsPSGAlterVol     $0B
00087124 8004                       	dc.b	nRst, $04
00087126 ECF5                       	smpsPSGAlterVol     $F5
00087128 9C06                       	dc.b	nEb2, $06
0008712A EC04                       	smpsPSGAlterVol     $04
0008712C E701                       	dc.b	smpsNoAttack, $01
0008712E EC07                       	smpsPSGAlterVol     $07
00087130 8006                       	dc.b	nRst, $06
00087132 E105                       	smpsAlterNote       $05
00087134 01                         	dc.b	$01
00087135 E106                       	smpsAlterNote       $06
00087137 01                         	dc.b	$01
00087138 E102                       	smpsAlterNote       $02
0008713A 01                         	dc.b	$01
0008713B E1FB                       	smpsAlterNote       $FB
0008713D 01                         	dc.b	$01
0008713E E1FF                       	smpsAlterNote       $FF
00087140 ECF5                       	smpsPSGAlterVol     $F5
00087142 9B06                       	dc.b	nD2, $06
00087144 EC04                       	smpsPSGAlterVol     $04
00087146 E701                       	dc.b	smpsNoAttack, $01
00087148 EC07                       	smpsPSGAlterVol     $07
0008714A 8003                       	dc.b	nRst, $03
0008714C ECF5                       	smpsPSGAlterVol     $F5
0008714E 9B06                       	dc.b	nD2, $06
00087150 EC04                       	smpsPSGAlterVol     $04
00087152 E701                       	dc.b	smpsNoAttack, $01
00087154 EC07                       	smpsPSGAlterVol     $07
00087156 8006                       	dc.b	nRst, $06
00087158 E101                       	smpsAlterNote       $01
0008715A 01                         	dc.b	$01
0008715B E105                       	smpsAlterNote       $05
0008715D 01                         	dc.b	$01
0008715E E104                       	smpsAlterNote       $04
00087160 01                         	dc.b	$01
00087161 E1FE                       	smpsAlterNote       $FE
00087163 01                         	dc.b	$01
00087164 ECF5                       	smpsPSGAlterVol     $F5
00087166 9C07                       	dc.b	nEb2, $07
00087168 EC0B                       	smpsPSGAlterVol     $0B
0008716A 8004                       	dc.b	nRst, $04
0008716C ECF5                       	smpsPSGAlterVol     $F5
0008716E 9C06                       	dc.b	nEb2, $06
00087170 EC0B                       	smpsPSGAlterVol     $0B
00087172 8007                       	dc.b	nRst, $07
00087174 E105                       	smpsAlterNote       $05
00087176 0101                       	dc.b	$01, $01
00087178 E102                       	smpsAlterNote       $02
0008717A 01                         	dc.b	$01
0008717B E1FB                       	smpsAlterNote       $FB
0008717D 01                         	dc.b	$01
0008717E E1FF                       	smpsAlterNote       $FF
00087180 ECF5                       	smpsPSGAlterVol     $F5
00087182 9B06                       	dc.b	nD2, $06
00087184 EC04                       	smpsPSGAlterVol     $04
00087186 E701                       	dc.b	smpsNoAttack, $01
00087188 EC07                       	smpsPSGAlterVol     $07
0008718A 8003                       	dc.b	nRst, $03
0008718C ECF5                       	smpsPSGAlterVol     $F5
0008718E 9B06                       	dc.b	nD2, $06
00087190 EC04                       	smpsPSGAlterVol     $04
00087192 E701                       	dc.b	smpsNoAttack, $01
00087194 EC07                       	smpsPSGAlterVol     $07
00087196 8006                       	dc.b	nRst, $06
00087198 E101                       	smpsAlterNote       $01
0008719A 01                         	dc.b	$01
0008719B E105                       	smpsAlterNote       $05
0008719D 01                         	dc.b	$01
0008719E E101                       	smpsAlterNote       $01
000871A0 01                         	dc.b	$01
000871A1 E1FC                       	smpsAlterNote       $FC
000871A3 01                         	dc.b	$01
000871A4 E1FE                       	smpsAlterNote       $FE
000871A6 ECF5                       	smpsPSGAlterVol     $F5
000871A8 9C06                       	dc.b	nEb2, $06
000871AA EC04                       	smpsPSGAlterVol     $04
000871AC E701                       	dc.b	smpsNoAttack, $01
000871AE EC07                       	smpsPSGAlterVol     $07
000871B0 8003                       	dc.b	nRst, $03
000871B2 ECF5                       	smpsPSGAlterVol     $F5
000871B4 9C07                       	dc.b	nEb2, $07
000871B6 EC0B                       	smpsPSGAlterVol     $0B
000871B8 8006                       	dc.b	nRst, $06
000871BA E102                       	smpsAlterNote       $02
000871BC 01                         	dc.b	$01
000871BD E105                       	smpsAlterNote       $05
000871BF 0101                       	dc.b	$01, $01
000871C1 E1FF                       	smpsAlterNote       $FF
000871C3 01                         	dc.b	$01
000871C4 ECF5                       	smpsPSGAlterVol     $F5
000871C6 9B07                       	dc.b	nD2, $07
000871C8 EC0B                       	smpsPSGAlterVol     $0B
000871CA 8004                       	dc.b	nRst, $04
000871CC ECF5                       	smpsPSGAlterVol     $F5
000871CE 9B06                       	dc.b	nD2, $06
000871D0 EC04                       	smpsPSGAlterVol     $04
000871D2 E701                       	dc.b	smpsNoAttack, $01
000871D4 EC07                       	smpsPSGAlterVol     $07
000871D6 8002                       	dc.b	nRst, $02
000871D8 E1FC                       	smpsAlterNote       $FC
000871DA ECF5                       	smpsPSGAlterVol     $F5
000871DC 9006                       	dc.b	nEb1, $06
000871DE EC04                       	smpsPSGAlterVol     $04
000871E0 E701                       	dc.b	smpsNoAttack, $01
000871E2 ECFC                       	smpsPSGAlterVol     $FC
000871E4 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
000871E8 EC04                       	smpsPSGAlterVol     $04
000871EA E701                       	dc.b	smpsNoAttack, $01
000871EC E1FD                       	smpsAlterNote       $FD
000871EE ECFC                       	smpsPSGAlterVol     $FC
000871F0 9402                       	dc.b	nG1, $02
000871F2 EC04                       	smpsPSGAlterVol     $04
000871F4 E701                       	dc.b	smpsNoAttack, $01
000871F6 E1FE                       	smpsAlterNote       $FE
000871F8 ECFC                       	smpsPSGAlterVol     $FC
000871FA 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000871FE EC04                       	smpsPSGAlterVol     $04
00087200 E701                       	dc.b	smpsNoAttack, $01
00087202 EC07                       	smpsPSGAlterVol     $07
00087204 8008                       	dc.b	nRst, $08
00087206 F6F4 F3                    	smpsJump            music84_Jump06
00087209                            
00087209                            ; PSG3 Data
00087209                            music84_PSG3:
00087209 F500                       	smpsPSGvoice        $00
0008720B E1FF                       	smpsAlterNote       $FF
0008720D EC0F                       	smpsPSGAlterVol     $0F
0008720F 803A                       	dc.b	nRst, $3A
00087211                            
00087211                            music84_Jump05:
00087211 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008721D 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00087227 F6FF E8                    	smpsJump            music84_Jump05
0008722A                            
0008722A                            ; DAC Data
0008722A                            music84_DAC:
0008722A E0C0                       	smpsPan             panCenter, $00
0008722C 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00087238 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00087244 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00087250 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008725C 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00087268 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00087274 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00087280 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008728C 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00087298 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
000872A4 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000872B0 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
000872BC 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000872C8 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000872D4 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
000872E0 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
000872EC 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
000872F8 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00087304 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00087310 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008731C 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00087328 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00087334 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00087340 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008734C 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00087358 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00087364 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00087370 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008737C 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00087388 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00087394 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000873A0 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
000873AC 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
000873B8 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
000873C4 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
000873D0 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000873DC 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
000873E8 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
000873F4 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00087400 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008740C 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00087418 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00087424 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00087430 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008743C 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00087448 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00087454 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00087460 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008746C 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00087478 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00087484 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00087490 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008749C 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
000874A8 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
000874B4 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000874C0 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
000874CC 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
000874D8 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000874E4 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000874F0 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000874FC 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00087508 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00087514 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00087520 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008752C 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00087538 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00087544 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00087550 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008755C 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00087568 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00087574 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00087580 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008758C 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00087598 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
000875A4 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
000875B0 E0C0                       	smpsPan             panCenter, $00
000875B2 F2                         	smpsStop
000875B3                            
000875B3                            music84_Voices:
000875B3                            ;	Voice $00
000875B3                            ;	$3D
000875B3                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
000875B3                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
000875B3                            	smpsVcAlgorithm     $05
000875B3                            	smpsVcFeedback      $07
000875B3                            	smpsVcUnusedBits    $00
000875B3                            	smpsVcDetune        $05, $04, $03, $04
000875B3                            	smpsVcCoarseFreq    $01, $01, $01, $01
000875B3                            	smpsVcRateScale     $00, $00, $00, $00
000875B3                            	smpsVcAttackRate    $11, $11, $11, $11
000875B3                            	smpsVcAmpMod        $00, $00, $00, $00
000875B3                            	smpsVcDecayRate1    $00, $00, $00, $0A
000875B3                            	smpsVcDecayRate2    $00, $00, $00, $0B
000875B3                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000875B3                            	smpsVcReleaseRate   $08, $08, $08, $07
000875B3 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
000875CC                            
000875CC                            ;	Voice $01
000875CC                            ;	$04
000875CC                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
000875CC                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
000875CC                            	smpsVcAlgorithm     $04
000875CC                            	smpsVcFeedback      $00
000875CC                            	smpsVcUnusedBits    $00
000875CC                            	smpsVcDetune        $04, $03, $04, $05
000875CC                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
000875CC                            	smpsVcRateScale     $00, $01, $00, $01
000875CC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000875CC                            	smpsVcAmpMod        $00, $00, $00, $00
000875CC                            	smpsVcDecayRate1    $0E, $00, $0E, $00
000875CC                            	smpsVcDecayRate2    $05, $00, $05, $00
000875CC                            	smpsVcDecayLevel    $08, $0E, $08, $0E
000875CC                            	smpsVcReleaseRate   $06, $06, $06, $06
000875CC 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
000875E5                            
000875E5                            ;	Voice $02
000875E5                            ;	$30
000875E5                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
000875E5                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
000875E5                            	smpsVcAlgorithm     $00
000875E5                            	smpsVcFeedback      $06
000875E5                            	smpsVcUnusedBits    $00
000875E5                            	smpsVcDetune        $04, $02, $00, $06
000875E5                            	smpsVcCoarseFreq    $01, $01, $03, $0C
000875E5                            	smpsVcRateScale     $00, $00, $00, $00
000875E5                            	smpsVcAttackRate    $1F, $1F, $1F, $14
000875E5                            	smpsVcAmpMod        $00, $00, $00, $00
000875E5                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
000875E5                            	smpsVcDecayRate2    $01, $01, $01, $01
000875E5                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
000875E5                            	smpsVcReleaseRate   $09, $0B, $08, $0F
000875E5 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
000875FE                            
000875FE                            ;	Voice $03
000875FE                            ;	$3A
000875FE                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
000875FE                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
000875FE                            	smpsVcAlgorithm     $02
000875FE                            	smpsVcFeedback      $07
000875FE                            	smpsVcUnusedBits    $00
000875FE                            	smpsVcDetune        $04, $06, $02, $00
000875FE                            	smpsVcCoarseFreq    $01, $01, $01, $01
000875FE                            	smpsVcRateScale     $00, $00, $00, $00
000875FE                            	smpsVcAttackRate    $18, $19, $14, $14
000875FE                            	smpsVcAmpMod        $00, $00, $00, $00
000875FE                            	smpsVcDecayRate1    $09, $0D, $09, $09
000875FE                            	smpsVcDecayRate2    $00, $00, $00, $00
000875FE                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
000875FE                            	smpsVcReleaseRate   $08, $0F, $0F, $07
000875FE 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
00087617                            
00087617                            ;	Voice $04
00087617                            ;	$3C
00087617                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
00087617                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
00087617                            	smpsVcAlgorithm     $04
00087617                            	smpsVcFeedback      $07
00087617                            	smpsVcUnusedBits    $00
00087617                            	smpsVcDetune        $07, $00, $00, $03
00087617                            	smpsVcCoarseFreq    $00, $00, $02, $0A
00087617                            	smpsVcRateScale     $00, $00, $00, $00
00087617                            	smpsVcAttackRate    $10, $1F, $10, $1F
00087617                            	smpsVcAmpMod        $00, $00, $00, $00
00087617                            	smpsVcDecayRate1    $00, $00, $00, $00
00087617                            	smpsVcDecayRate2    $00, $00, $00, $00
00087617                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00087617                            	smpsVcReleaseRate   $0A, $02, $0A, $02
00087617 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00087630                            
00087630                            ;	Voice $05
00087630                            ;	$38
00087630                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00087630                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00087630                            	smpsVcAlgorithm     $00
00087630                            	smpsVcFeedback      $07
00087630                            	smpsVcUnusedBits    $00
00087630                            	smpsVcDetune        $04, $06, $02, $00
00087630                            	smpsVcCoarseFreq    $01, $01, $01, $00
00087630                            	smpsVcRateScale     $00, $00, $00, $00
00087630                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00087630                            	smpsVcAmpMod        $00, $00, $00, $00
00087630                            	smpsVcDecayRate1    $00, $03, $00, $17
00087630                            	smpsVcDecayRate2    $00, $08, $08, $0B
00087630                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00087630                            	smpsVcReleaseRate   $08, $05, $05, $05
00087630 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
00087649                            
00087649                            
0008764A 00                         		even
0008764A                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0008B85A                            		even
0008B85A                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
0008F3B2 00                         		even
0008F3B2                            Music87:	include	sound\music87.asm; Invincibility
0008F3B2                            triple_Header:
0008F3B2 =00000001                  smpsHeaderStartSong = 1
0008F3B2 0000                       	smpsHeaderVoice     triple_Voices
0008F3B4 0501                       	smpsHeaderChan      $05, $01
0008F3B6 0200                       	smpsHeaderTempo     $02, $00
0008F3B8                            
0008F3BC 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
0008F3C0 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
0008F3C4 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
0008F3C8 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
0008F3CC 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
0008F3D2                            
0008F3D2                            ; DAC Data
0008F3D2                            triple_DAC:
0008F3D2 E0C0                       	smpsPan             panCenter, $00
0008F3D4 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
0008F3DA                            
0008F3DA                            triple_Loop01:
0008F3DA 8282 82                    	dc.b	dSnare, dSnare, dSnare
0008F3DD                            
0008F3DD                            triple_Loop00:
0008F3DD 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
0008F3E9 06                         	dc.b	$06
0008F3EA F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
0008F3EF 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
0008F3FB 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
0008F402 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
0008F407 0303 1B                    	dc.b	$03, $03, $1B
0008F40A E0C0                       	smpsPan             panCenter, $00
0008F40C F6FF C4                    	smpsJump triple_DAC
0008F40F                            
0008F40F                            ; FM1 Data
0008F40F                            triple_FM1:
0008F40F E0C0                       	smpsPan             panCenter, $00
0008F413 8018                       	dc.b	nRst, $18
0008F415                            
0008F415                            triple_Loop0B:
0008F415 AC06 B8                    	dc.b	nG3, $06, nG4
0008F418 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
0008F41D                            
0008F41D                            triple_Loop0C:
0008F41D A7B3                       	dc.b	nD3, nD4
0008F41F F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
0008F424                            
0008F424                            triple_Loop0D:
0008F424 A9B5                       	dc.b	nE3, nE4
0008F426 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
0008F42B A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
0008F433 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
0008F438 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
0008F444 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
0008F450 AD                         	dc.b	nAb3
0008F451 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
0008F456 8018                       	dc.b	nRst, $18
0008F458 E0C0                       	smpsPan             panCenter, $00
0008F45C F6FF B1                    	smpsJump triple_FM1
0008F45F                            
0008F45F                            ; FM2 Data
0008F45F                            triple_FM2:
0008F45F E0C0                       	smpsPan             panCenter, $00
0008F463 8018                       	dc.b	nRst, $18
0008F465                            
0008F465                            triple_Loop07:
0008F465 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0008F471 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0008F47D F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
0008F482 8003                       	dc.b	nRst, $03
0008F484                            
0008F484                            triple_Loop08:
0008F484 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0008F48A F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
0008F48F B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0008F495                            
0008F495                            triple_Loop09:
0008F495 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0008F4A1 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0008F4AD F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
0008F4B2 8003                       	dc.b	nRst, $03
0008F4B4                            
0008F4B4                            triple_Loop0A:
0008F4B4 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0008F4BA F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
0008F4BF B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0008F4C5 E0C0                       	smpsPan             panCenter, $00
0008F4C9 F6FF 94                    	smpsJump triple_FM2
0008F4CC                            
0008F4CC                            ; FM3 Data
0008F4CC                            triple_FM3:
0008F4CC E0C0                       	smpsPan             panCenter, $00
0008F4D0 8018                       	dc.b	nRst, $18
0008F4D2                            
0008F4D2                            triple_Loop06:
0008F4D2 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
0008F4D9 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
0008F4DE 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
0008F4EA BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
0008F4F6 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
0008F4F9 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
0008F4FE 8018                       	dc.b	nRst, $18
0008F500 E0C0                       	smpsPan             panCenter, $00
0008F504 F6FF C6                    	smpsJump triple_FM3
0008F507                            
0008F507                            ; FM4 Data
0008F507                            triple_FM4:
0008F507 E103                       	smpsAlterNote       $03
0008F50B E0C0                       	smpsPan             panCenter, $00
0008F50D 8018                       	dc.b	nRst, $18
0008F50F                            
0008F50F                            triple_Loop02:
0008F50F C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0008F51B C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0008F527 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
0008F52C 8003                       	dc.b	nRst, $03
0008F52E                            
0008F52E                            triple_Loop03:
0008F52E B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0008F534 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
0008F539 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0008F53F                            
0008F53F                            triple_Loop04:
0008F53F C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0008F54B C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0008F557 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
0008F55C 8003                       	dc.b	nRst, $03
0008F55E                            
0008F55E                            triple_Loop05:
0008F55E B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0008F564 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
0008F569 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0008F56F E0C0                       	smpsPan             panCenter, $00
0008F571 F6FF 94                    	smpsJump triple_FM4
0008F574                            
0008F574                            ; PSG1 Data
0008F574                            triple_PSG1:
0008F574 8018                       	dc.b	nRst, $18
0008F576                            
0008F576                            triple_Loop0E:
0008F576 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0008F582 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0008F58E 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0008F59A 9402 8004                  	dc.b	nG1, $02, nRst, $04
0008F59E F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
0008F5A3 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0008F5AF 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0008F5BB 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0008F5C7 9402 8007                  	dc.b	nG1, $02, nRst, $07
0008F5CB                            
0008F5CB                            triple_Loop0F:
0008F5CB 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0008F5D1 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
0008F5D6 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
0008F5DC                            
0008F5DC                            triple_Loop10:
0008F5DC A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0008F5E8 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0008F5F4 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0008F600 9402 8004                  	dc.b	nG1, $02, nRst, $04
0008F604 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
0008F609 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0008F615 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0008F621 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0008F62D 9402 8007                  	dc.b	nG1, $02, nRst, $07
0008F631                            
0008F631                            triple_Loop11:
0008F631 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0008F637 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
0008F63C 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
0008F642 F500                       	smpsPSGvoice        $00
0008F644 F6FF 2E                    	smpsJump triple_PSG1
0008F647                            
0008F647                            triple_Voices:
0008F647                            ;	Voice $00
0008F647                            ;	$3A
0008F647                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0008F647                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
0008F647                            	smpsVcAlgorithm     $02
0008F647                            	smpsVcFeedback      $07
0008F647                            	smpsVcUnusedBits    $00
0008F647                            	smpsVcDetune        $00, $00, $00, $00
0008F647                            	smpsVcCoarseFreq    $01, $01, $07, $01
0008F647                            	smpsVcRateScale     $01, $02, $02, $02
0008F647                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0008F647                            	smpsVcAmpMod        $00, $00, $00, $00
0008F647                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0008F647                            	smpsVcDecayRate2    $00, $00, $00, $00
0008F647                            	smpsVcDecayLevel    $00, $01, $0F, $01
0008F647                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0008F647 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
0008F660                            
0008F660                            ;	Voice $01
0008F660                            ;	$20
0008F660                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
0008F660                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
0008F660                            	smpsVcAlgorithm     $00
0008F660                            	smpsVcFeedback      $04
0008F660                            	smpsVcUnusedBits    $00
0008F660                            	smpsVcDetune        $00, $00, $03, $07
0008F660                            	smpsVcCoarseFreq    $00, $00, $01, $0A
0008F660                            	smpsVcRateScale     $03, $03, $03, $02
0008F660                            	smpsVcAttackRate    $1F, $1C, $18, $1F
0008F660                            	smpsVcAmpMod        $00, $00, $00, $00
0008F660                            	smpsVcDecayRate1    $04, $04, $0A, $10
0008F660                            	smpsVcDecayRate2    $08, $08, $08, $0F
0008F660                            	smpsVcDecayLevel    $0B, $0B, $05, $05
0008F660                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0008F660 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0008F660 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0008F67A 00                         		even
0008F67A                            Music88:	incbin	sound\music88.bin; Extra Life
0008F768                            		even
0008F768                            Music89:	incbin	sound\music89.bin; Special Stage
00093630 00                         		even
00093630                            Music8A:	incbin	sound\music8A.bin; Title Screen
000937FA                            		even
000937FA                            Music8B:	incbin	sound\music8B.bin; Ending Theme
00093A94                            		even
00093A94                            Music8C:	incbin	sound\music8C.bin; VS Boss
00093CB0                            		even
00093CB0                            Music8D:	incbin	sound\music8D.bin; Final Zone
00093ECC                            		even
00093ECC                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009433A 00                         		even
0009433A                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009497A 00                         		even
0009497A                            Music90:	incbin	sound\music90.bin ; Continue
00094AD8                            		even
00094AD8                            Music91:	incbin	sound\music91.bin ; Credits
00095DA6                            		even
00095DA6                            Music92:	incbin	sound\music92.bin ; Drowning
00095ED0                            		even
00095ED0                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
00095F9E                            		even
00095F9E                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
00095FD8 00                         		even
00095FD8                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
00096012 00                         		even
00096012                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
0009604C 00                         		even
0009604C                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
00096086 00                         		even
00096086                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000960C0 00                         		even
000960C0                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000960FA 00                         		even
000960FA                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
00096134 00                         		even
00096134                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
0009616E 00                         		even
0009616E                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000961A8 00                         		even
000961A8                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000961E2 00                         		even
000961E2                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
0009621C 00                         		even
0009621C                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
00096256 00                         		even
00096256                            ; ---------------------------------------------------------------------------
00096256                            ; Sound	effect pointers
00096256                            ; ---------------------------------------------------------------------------
00096256 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00096262 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0009626E 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0009627A 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00096286 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
00096292 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0009629E 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000962AA 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000962B6 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000962C2 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000962CE 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000962DA 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000962E6 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000962F2 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000962FE 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
0009630A 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00096316 0000 0000                  SoundD0Index:	dc.l SoundD0
0009631A                            SoundA0:	incbin	sound\soundA0.bin
00096330                            		even
00096330                            SoundA1:	incbin	sound\soundA1.bin
0009635A                            		even
0009635A                            SoundA2:	incbin	sound\soundA2.bin
0009637A                            		even
0009637A                            SoundA3:	incbin	sound\soundA3.bin
000963AC                            		even
000963AC                            SoundA4:	incbin	sound\soundA4.bin
000963E2                            		even
000963E2                            SoundA5:	incbin	sound\soundA5.bin
0009640E                            		even
0009640E                            SoundA6:	incbin	sound\soundA6.bin
0009643E                            		even
0009643E                            SoundA7:	incbin	sound\soundA7.bin
0009646E                            		even
0009646E                            SoundA8:	incbin	sound\soundA8.bin
000964A2                            		even
000964A2                            SoundA9:	incbin	sound\soundA9.bin
000964B4                            		even
000964B4                            SoundAA:	incbin	sound\soundAA.bin
000964F6                            		even
000964F6                            SoundAB:	incbin	sound\soundAB.bin
00096516                            		even
00096516                            SoundAC:	incbin	sound\soundAC.bin
0009654A                            		even
0009654A                            SoundAD:	incbin	sound\soundAD.bin
00096580                            		even
00096580                            SoundAE:	incbin	sound\soundAE.bin
000965CA                            		even
000965CA                            SoundAF:	incbin	sound\soundAF.bin
000965F8                            		even
000965F8                            SoundB0:	incbin	sound\soundB0.bin
0009662A                            		even
0009662A                            SoundB1:	incbin	sound\soundB1.bin
00096656                            		even
00096656                            SoundB2:	incbin	sound\soundB2.bin
000966A6                            		even
000966A6                            SoundB3:	incbin	sound\soundB3.bin
000966F0                            		even
000966F0                            SoundB4:	include	sound\soundB4.asm
000966F0                            SndB4_Bumper_Header:
000966F0 =00000001                  smpsHeaderStartSong = 1
000966F0 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000966F2 01                         	smpsHeaderTempoSFX  $01
000966F3 03                         	smpsHeaderChanSFX   $03
000966F4                            
00096706                            
00096706                            ; FM5 Data
00096706                            SndB4_Bumper_FM5:
00096708 F600 00                    	smpsJump            SndB4_Bumper_Jump00
0009670B                            
0009670B                            ; FM4 Data
0009670B                            SndB4_Bumper_FM4:
0009670B F2                         	smpsStop
0009670C                            
0009670C                            SndB4_Bumper_Jump00:
0009670C A020                       	dc.b	nG2, $20
0009670E F2                         	smpsStop
0009670F                            
0009670F                            ; FM3 Data
0009670F                            SndB4_Bumper_FM3:
0009670F F2                         	smpsStop
00096710                            
00096710                            SndB4_Bumper_Voices:
00096710                            ;	Voice $00
00096710                            ;	$32
00096710                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
00096710                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
00096710                            	smpsVcAlgorithm     $02
00096710                            	smpsVcFeedback      $06
00096710                            	smpsVcUnusedBits    $00
00096710                            	smpsVcDetune        $07, $07, $02, $00
00096710                            	smpsVcCoarseFreq    $00, $00, $00, $04
00096710                            	smpsVcRateScale     $00, $00, $00, $00
00096710                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00096710                            	smpsVcAmpMod        $00, $00, $00, $00
00096710                            	smpsVcDecayRate1    $08, $00, $00, $09
00096710                            	smpsVcDecayRate2    $0B, $00, $00, $09
00096710                            	smpsVcDecayLevel    $00, $00, $00, $00
00096710                            	smpsVcReleaseRate   $0F, $00, $00, $00
00096710 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
00096710 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009672A 00                         		even
0009672A                            SoundB5:	incbin	sound\soundB5.bin
00096758                            		even
00096758                            SoundB6:	incbin	sound\soundB6.bin
00096776                            		even
00096776                            SoundB7:	incbin	sound\soundB7.bin
000967B2                            		even
000967B2                            SoundB8:	incbin	sound\soundB8.bin
000967D0                            		even
000967D0                            SoundB9:	incbin	sound\soundB9.bin
00096834                            		even
00096834                            SoundBA:	incbin	sound\soundBA.bin
0009685C                            		even
0009685C                            SoundBB:	incbin	sound\soundBB.bin
00096888                            		even
00096888                            SoundBC:	incbin	sound\soundBC.bin
000968CA                            		even
000968CA                            SoundBD:	incbin	sound\soundBD.bin
0009691E                            		even
0009691E                            SoundBE:	incbin	sound\soundBE.bin
00096958                            		even
00096958                            SoundBF:	incbin	sound\soundBF.bin
000969CA                            		even
000969CA                            SoundC0:	incbin	sound\soundC0.bin
000969F8                            		even
000969F8                            SoundC1:	incbin	sound\soundC1.bin
00096A32                            		even
00096A32                            SoundC2:	incbin	sound\soundC2.bin
00096A5C                            		even
00096A5C                            SoundC3:	incbin	sound\soundC3.bin
00096AD6                            		even
00096AD6                            SoundC4:	incbin	sound\soundC4.bin
00096AFE                            		even
00096AFE                            SoundC5:	incbin	sound\soundC5.bin
00096B66                            		even
00096B66                            SoundC6:	incbin	sound\soundC6.bin
00096BA8                            		even
00096BA8                            SoundC7:	incbin	sound\soundC7.bin
00096BD6                            		even
00096BD6                            SoundC8:	incbin	sound\soundC8.bin
00096BE8                            		even
00096BE8                            SoundC9:	incbin	sound\soundC9.bin
00096C16                            		even
00096C16                            SoundCA:	incbin	sound\soundCA.bin
00096C44                            		even
00096C44                            SoundCB:	incbin	sound\soundCB.bin
00096C90                            		even
00096C90                            SoundCC:	incbin	sound\soundCC.bin
00096CCA                            		even
00096CCA                            SoundCD:	incbin	sound\soundCD.bin
00096CD8                            		even
00096CD8                            SoundCE:	incbin	sound\soundCE.bin
00096D06                            		even
00096D06                            SoundCF:	incbin	sound\soundCF.bin
00096D3E                            		even
00096D3E                            SoundD0:	incbin	sound\soundD0.bin
00096D78                            		even
00096D78                            SegaPCM:	incbin	sound\segapcm.bin
0009A9B2                            SegaPCM_end:	even
0009A9B2                            
0009A9B2                            ; end of 'ROM'
0009A9B2                            EndOfRom:
0009A9B2                            
0009A9B2                            
