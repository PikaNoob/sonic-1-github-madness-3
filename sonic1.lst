00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 003C                  		andi.w	#$3C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003BC                            ; ===========================================================================
000003BC                            
000003BC                            CheckSumError:
000003BC 6100 0000                  		bsr.w	VDPSetupGame
000003C0 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CA 7E3F                       		moveq	#$3F,d7
000003CC                            
000003CC                            CheckSum_Red:
000003CC 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D4 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D8                            
000003D8                            CheckSum_Loop:
000003D8 60FE                       		bra.s	CheckSum_Loop
000003DA                            ; ===========================================================================
000003DA                            
000003DA                            BusError:
000003DA 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003E0 6000                       		bra.s	loc_43A
000003E2                            ; ===========================================================================
000003E2                            
000003E2                            AddressError:
000003E2 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E8 6000                       		bra.s	loc_43A
000003EA                            ; ===========================================================================
000003EA                            
000003EA                            IllegalInstr:
000003EA 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003F0 54AF 0002                  		addq.l	#2,2(sp)
000003F4 6000                       		bra.s	loc_462
000003F6                            ; ===========================================================================
000003F6                            
000003F6                            ZeroDivide:
000003F6 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003FC 6000                       		bra.s	loc_462
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            ChkInstr:
000003FE 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000404 6000                       		bra.s	loc_462
00000406                            ; ===========================================================================
00000406                            
00000406                            TrapvInstr:
00000406 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000040C 6000                       		bra.s	loc_462
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            PrivilegeViol:
0000040E 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000414 6000                       		bra.s	loc_462
00000416                            ; ===========================================================================
00000416                            
00000416                            Trace:
00000416 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000041C 6000                       		bra.s	loc_462
0000041E                            ; ===========================================================================
0000041E                            
0000041E                            Line1010Emu:
0000041E 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000424 54AF 0002                  		addq.l	#2,2(sp)
00000428 6000                       		bra.s	loc_462
0000042A                            ; ===========================================================================
0000042A                            
0000042A                            Line1111Emu:
0000042A 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000430 54AF 0002                  		addq.l	#2,2(sp)
00000434 6000                       		bra.s	loc_462
00000436                            ; ===========================================================================
00000436                            
00000436                            ErrorExcept:
00000436 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000043C 6000                       		bra.s	loc_462
0000043E                            ; ===========================================================================
0000043E                            
0000043E                            loc_43A:
0000043E 46FC 2700                  		move	#$2700,sr
00000442 544F                       		addq.w	#2,sp
00000444 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000448 544F                       		addq.w	#2,sp
0000044A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000450 6100 0000                  		bsr.w	ShowErrorMsg
00000454 202F 0002                  		move.l	2(sp),d0
00000458 6100 0000                  		bsr.w	sub_5BA
0000045C 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000460 6100 0000                  		bsr.w	sub_5BA
00000464 6000                       		bra.s	loc_478
00000466                            ; ===========================================================================
00000466                            
00000466                            loc_462:
00000466 46FC 2700                  		move	#$2700,sr
0000046A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000470 6100 0000                  		bsr.w	ShowErrorMsg
00000474 202F 0002                  		move.l	2(sp),d0
00000478 6100 0000                  		bsr.w	sub_5BA
0000047C                            
0000047C                            loc_478:
0000047C 6100 0000                  		bsr.w	ErrorWaitForC
00000480 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000486 46FC 2300                  		move	#$2300,sr
0000048A 4E73                       		rte	
0000048C                            
0000048C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000048C                            
0000048C                            
0000048C                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000048C 4DF9 00C0 0000             		lea	($C00000).l,a6
00000492 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000049C 41F9 0000 0000             		lea	(Art_Text).l,a0
000004A2 323C 027F                  		move.w	#$27F,d1
000004A6                            
000004A6                            Error_LoadGfx:
000004A6 3C98                       		move.w	(a0)+,(a6)
000004A8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004AC 7000                       		moveq	#0,d0		; clear	d0
000004AE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004B2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004BA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C4 7212                       		moveq	#$12,d1		; number of characters
000004C6                            
000004C6                            Error_LoopChars:
000004C6 7000                       		moveq	#0,d0
000004C8 1018                       		move.b	(a0)+,d0
000004CA 0640 0790                  		addi.w	#$790,d0
000004CE 3C80                       		move.w	d0,(a6)
000004D0 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D4 4E75                       		rts	
000004D6                            ; End of function ShowErrorMsg
000004D6                            
000004D6                            ; ===========================================================================
000004D6 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004DA 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DE 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004E2 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E6 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004EA 0000                       		dc.w asc_5A6-ErrorText
000004EC 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FF 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000512 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000525 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000538 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000054B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000571 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000584 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000597 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005AA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BE 00                         		even
000005BE                            
000005BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BE                            
000005BE                            
000005BE                            sub_5BA:				; XREF: loc_43A; loc_462
000005BE 3CBC 07CA                  		move.w	#$7CA,(a6)
000005C2 7407                       		moveq	#7,d2
000005C4                            
000005C4                            loc_5C0:
000005C4 E998                       		rol.l	#4,d0
000005C6 6100                       		bsr.s	sub_5CA
000005C8 51CA FFFA                  		dbf	d2,loc_5C0
000005CC 4E75                       		rts	
000005CE                            ; End of function sub_5BA
000005CE                            
000005CE                            
000005CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CE                            
000005CE                            
000005CE                            sub_5CA:				; XREF: sub_5BA
000005CE 3200                       		move.w	d0,d1
000005D0 0241 000F                  		andi.w	#$F,d1
000005D4 0C41 000A                  		cmpi.w	#$A,d1
000005D8 6500                       		bcs.s	loc_5D8
000005DA 5E41                       		addq.w	#7,d1
000005DC                            
000005DC                            loc_5D8:
000005DC 0641 07C0                  		addi.w	#$7C0,d1
000005E0 3C81                       		move.w	d1,(a6)
000005E2 4E75                       		rts	
000005E4                            ; End of function sub_5CA
000005E4                            
000005E4                            
000005E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E4                            
000005E4                            
000005E4                            ErrorWaitForC:				; XREF: loc_478
000005E4 6100 0000                  		bsr.w	ReadJoypads
000005E8 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EE 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005F2 4E75                       		rts	
000005F4                            ; End of function ErrorWaitForC
000005F4                            
000005F4                            ; ===========================================================================
000005F4                            
000005F4                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D34                            Art_Text_end:		even
00000D34                            
00000D34                            ; ===========================================================================
00000D34                            ;VBlank
00000D34                            loc_B10:				; XREF: Vectors
00000D34 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D38 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D3C 6700                       		beq.s	loc_B88
00000D3E 3039 00C0 0004             		move.w	($C00004).l,d0
00000D44 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D56 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D5C 6700                       		beq.s	loc_B42
00000D5E 303C 0700                  		move.w	#$700,d0
00000D62                            
00000D62                            loc_B3E:
00000D62 51C8 FFFE                  		dbf	d0,loc_B3E
00000D66                            
00000D66                            loc_B42:
00000D66 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D6A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D70 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D76 0240 003E                  		andi.w	#$3E,d0
00000D7A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D82                            
00000D82                            loc_B5E:				; XREF: loc_B88
00000D82 4EB9 0000 0000             		jsr	sub_71B4C
00000D88                            
00000D88                            loc_B64:				; XREF: loc_D50
00000D88 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D8C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D90 4E73                       		rte	
00000D92                            ; ===========================================================================
00000D92 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D96 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D9A 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9E 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA6 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DAA 0000                       		dc.w loc_E72-off_B6E
00000DAC                            ; ===========================================================================
00000DAC                            
00000DAC                            loc_B88:				; XREF: loc_B10; off_B6E
00000DAC 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DB2 6700                       		beq.s	loc_B9A
00000DB4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DBA 6600 FFC6                  		bne.w	loc_B5E
00000DBE                            
00000DBE                            loc_B9A:
00000DBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC8 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD4 6700                       		beq.s	loc_BBA
00000DD6 303C 0700                  		move.w	#$700,d0
00000DDA                            
00000DDA                            loc_BB6:
00000DDA 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDE                            
00000DDE                            loc_BBA:
00000DDE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DEC                            
00000DEC                            loc_BC8:
00000DEC 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF4 66F6                       		bne.s	loc_BC8
00000DF6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DFA 6600                       		bne.s	loc_BFE
00000DFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E02 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E08 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0E 3ABC 977F                  		move.w	#$977F,(a5)
00000E12 3ABC C000                  		move.w	#$C000,(a5)
00000E16 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E20 6000                       		bra.s	loc_C22
00000E22                            ; ===========================================================================
00000E22                            
00000E22                            loc_BFE:				; XREF: loc_BC8
00000E22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E28 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E34 3ABC 977F                  		move.w	#$977F,(a5)
00000E38 3ABC C000                  		move.w	#$C000,(a5)
00000E3C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E46                            
00000E46                            loc_C22:				; XREF: loc_BC8
00000E46 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E52 6000 FF2E                  		bra.w	loc_B5E
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C32:				; XREF: off_B6E
00000E56 6100 0000                  		bsr.w	sub_106E
00000E5A                            
00000E5A                            loc_C36:				; XREF: off_B6E
00000E5A 4A78 F614                  		tst.w	($FFFFF614).w
00000E5E 6700 0000                  		beq.w	locret_C42
00000E62 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E66                            
00000E66                            locret_C42:
00000E66 4E75                       		rts	
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C44:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C 6100 0000                  		bsr.w	sub_6886
00000E70 6100 0000                  		bsr.w	sub_1642
00000E74 4A78 F614                  		tst.w	($FFFFF614).w
00000E78 6700 0000                  		beq.w	locret_C5C
00000E7C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E80                            
00000E80                            locret_C5C:
00000E80 4E75                       		rts	
00000E82                            ; ===========================================================================
00000E82                            
00000E82                            loc_C5E:				; XREF: off_B6E
00000E82 6100 0000                  		bsr.w	sub_106E
00000E86 4E75                       		rts	
00000E88                            ; ===========================================================================
00000E88                            
00000E88                            loc_C64:				; XREF: off_B6E
00000E88 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8E 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E92                            
00000E92                            loc_C6E:				; XREF: off_B6E
00000E92 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E9A                            
00000E9A                            loc_C76:
00000E9A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EA2 66F6                       		bne.s	loc_C76		; if not, branch
00000EA4 6100 0000                  		bsr.w	ReadJoypads
00000EA8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EAC 6600                       		bne.s	loc_CB0
00000EAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EC0 3ABC 977F                  		move.w	#$977F,(a5)
00000EC4 3ABC C000                  		move.w	#$C000,(a5)
00000EC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED2 6000                       		bra.s	loc_CD4
00000ED4                            ; ===========================================================================
00000ED4                            
00000ED4                            loc_CB0:				; XREF: loc_C76
00000ED4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EDA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EE0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE6 3ABC 977F                  		move.w	#$977F,(a5)
00000EEA 3ABC C000                  		move.w	#$C000,(a5)
00000EEE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF8                            
00000EF8                            loc_CD4:				; XREF: loc_C76
00000EF8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F02 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F08 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0E 3ABC 977F                  		move.w	#$977F,(a5)
00000F12 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F26 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F2C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F32 3ABC 977F                  		move.w	#$977F,(a5)
00000F36 3ABC 7800                  		move.w	#$7800,(a5)
00000F3A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F40 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F44 4A38 F767                  		tst.b	($FFFFF767).w
00000F48 6700                       		beq.s	loc_D50
00000F4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F50 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F56 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F5C 3ABC 977F                  		move.w	#$977F,(a5)
00000F60 3ABC 7000                  		move.w	#$7000,(a5)
00000F64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F74                            
00000F74                            loc_D50:
00000F74 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F7C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F82 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F88 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F94 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F9A 6400                       		bcc.s	Demo_Time
00000F9C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FA2 588F                       		addq.l	#4,sp
00000FA4 6000 FDE2                  		bra.w	loc_B64
00000FA8                            
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            ; Subroutine to	run a demo for an amount of time
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            
00000FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA8                            
00000FA8                            
00000FA8                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FAC 4EB9 0000 0000             		jsr	AniArt_Load
00000FB2 4EB9 0000 0000             		jsr	HudUpdate
00000FB8 6100 0000                  		bsr.w	sub_165E
00000FBC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FC0 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC4 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC8                            
00000FC8                            Demo_TimeEnd:
00000FC8 4E75                       		rts	
00000FCA                            ; End of function Demo_Time
00000FCA                            
00000FCA                            ; ===========================================================================
00000FCA                            
00000FCA                            loc_DA6:				; XREF: off_B6E
00000FCA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FD2                            
00000FD2                            loc_DAE:
00000FD2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FDA 66F6                       		bne.s	loc_DAE		; if not, branch
00000FDC 6100 0000                  		bsr.w	ReadJoypads
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FEC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC C000                  		move.w	#$C000,(a5)
00000FFA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001010 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7800                  		move.w	#$7800,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001034 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001042 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001054 6100 0000                  		bsr.w	PalCycle_SS
00001058 4A38 F767                  		tst.b	($FFFFF767).w
0000105C 6700                       		beq.s	loc_E64
0000105E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001064 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000106A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001070 3ABC 977F                  		move.w	#$977F,(a5)
00001074 3ABC 7000                  		move.w	#$7000,(a5)
00001078 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001082 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001088                            
00001088                            loc_E64:
00001088 4A78 F614                  		tst.w	($FFFFF614).w
0000108C 6700 0000                  		beq.w	locret_E70
00001090 5378 F614                  		subq.w	#1,($FFFFF614).w
00001094                            
00001094                            locret_E70:
00001094 4E75                       		rts	
00001096                            ; ===========================================================================
00001096                            
00001096                            loc_E72:				; XREF: off_B6E
00001096 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109E                            
0000109E                            loc_E7A:
0000109E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A6 66F6                       		bne.s	loc_E7A		; if not, branch
000010A8 6100 0000                  		bsr.w	ReadJoypads
000010AC 4A38 F64E                  		tst.b	($FFFFF64E).w
000010B0 6600                       		bne.s	loc_EB4
000010B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C4 3ABC 977F                  		move.w	#$977F,(a5)
000010C8 3ABC C000                  		move.w	#$C000,(a5)
000010CC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D6 6000                       		bra.s	loc_ED8
000010D8                            ; ===========================================================================
000010D8                            
000010D8                            loc_EB4:				; XREF: loc_E7A
000010D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010EA 3ABC 977F                  		move.w	#$977F,(a5)
000010EE 3ABC C000                  		move.w	#$C000,(a5)
000010F2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010FC                            
000010FC                            loc_ED8:				; XREF: loc_E7A
000010FC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001100 4BF9 00C0 0004             		lea	($C00004).l,a5
00001106 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000110C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001112                            
00001112                            loc_EEE:
00001112 3ABC 977F                  		move.w	#$977F,(a5)
00001116 3ABC 7C00                  		move.w	#$7C00,(a5)
0000111A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001120 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001124 4BF9 00C0 0004             		lea	($C00004).l,a5
0000112A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001130 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001136 3ABC 977F                  		move.w	#$977F,(a5)
0000113A 3ABC 7800                  		move.w	#$7800,(a5)
0000113E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001144 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001148 4A38 F767                  		tst.b	($FFFFF767).w
0000114C 6700                       		beq.s	loc_F54
0000114E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001154 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000115A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001160 3ABC 977F                  		move.w	#$977F,(a5)
00001164 3ABC 7000                  		move.w	#$7000,(a5)
00001168 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001172 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001178                            
00001178                            loc_F54:
00001178 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001180 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001186 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000118C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001192 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001198 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000119C 4EB9 0000 0000             		jsr	AniArt_Load
000011A2 4EB9 0000 0000             		jsr	HudUpdate
000011A8 6100 0000                  		bsr.w	sub_1642
000011AC 4E75                       		rts	
000011AE                            ; ===========================================================================
000011AE                            
000011AE                            loc_F8A:				; XREF: off_B6E
000011AE 6100 0000                  		bsr.w	sub_106E
000011B2 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B6 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011BC 4E75                       		rts	
000011BE                            ; ===========================================================================
000011BE                            
000011BE                            loc_F9A:				; XREF: off_B6E
000011BE 6100 0000                  		bsr.w	sub_106E
000011C2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C6 6000 0000                  		bra.w	sub_1642
000011CA                            ; ===========================================================================
000011CA                            
000011CA                            loc_FA6:				; XREF: off_B6E
000011CA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011D2                            
000011D2                            loc_FAE:
000011D2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011DA 66F6                       		bne.s	loc_FAE		; if not, branch
000011DC 6100 0000                  		bsr.w	ReadJoypads
000011E0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011EC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011F2 3ABC 977F                  		move.w	#$977F,(a5)
000011F6 3ABC C000                  		move.w	#$C000,(a5)
000011FA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001200 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001204 4BF9 00C0 0004             		lea	($C00004).l,a5
0000120A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001210 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001216 3ABC 977F                  		move.w	#$977F,(a5)
0000121A 3ABC 7800                  		move.w	#$7800,(a5)
0000121E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001224 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001234 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001254 4A38 F767                  		tst.b	($FFFFF767).w
00001258 6700                       		beq.s	loc_1060
0000125A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001260 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001266 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000126C 3ABC 977F                  		move.w	#$977F,(a5)
00001270 3ABC 7000                  		move.w	#$7000,(a5)
00001274 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000127A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001284                            
00001284                            loc_1060:
00001284 4A78 F614                  		tst.w	($FFFFF614).w
00001288 6700 0000                  		beq.w	locret_106C
0000128C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001290                            
00001290                            locret_106C:
00001290 4E75                       		rts	
00001292                            
00001292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001292                            
00001292                            
00001292                            sub_106E:				; XREF: loc_C32; et al
00001292 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000129A                            
0000129A                            loc_1076:
0000129A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012A2 66F6                       		bne.s	loc_1076	; if not, branch
000012A4 6100 0000                  		bsr.w	ReadJoypads
000012A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000012AC 6600                       		bne.s	loc_10B0
000012AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012C0 3ABC 977F                  		move.w	#$977F,(a5)
000012C4 3ABC C000                  		move.w	#$C000,(a5)
000012C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012D2 6000                       		bra.s	loc_10D4
000012D4                            ; ===========================================================================
000012D4                            
000012D4                            loc_10B0:				; XREF: sub_106E
000012D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E6 3ABC 977F                  		move.w	#$977F,(a5)
000012EA 3ABC C000                  		move.w	#$C000,(a5)
000012EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F8                            
000012F8                            loc_10D4:				; XREF: sub_106E
000012F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001304 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000130A 3ABC 977F                  		move.w	#$977F,(a5)
0000130E 3ABC 7800                  		move.w	#$7800,(a5)
00001312 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001318 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000131C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001322 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001328 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132E 3ABC 977F                  		move.w	#$977F,(a5)
00001332 3ABC 7C00                  		move.w	#$7C00,(a5)
00001336 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000133C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001340 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001348 4E75                       		rts	
0000134A                            ; End of function sub_106E
0000134A                            
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            ; Subroutine to	move pallets from the RAM to CRAM
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            
0000134A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000134A                            
0000134A                            
0000134A                            PalToCRAM:
0000134A 46FC 2700                  		move	#$2700,sr
0000134E 4A78 F644                  		tst.w	($FFFFF644).w
00001352 6700                       		beq.s	locret_119C
00001354 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000135A 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135E 43F9 00C0 0000             		lea	($C00000).l,a1
00001364 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001368 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001370 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B6 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013BA 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BE 6600                       		bne.s	loc_119E
000013C0                            
000013C0                            locret_119C:
000013C0 4E73                       		rte	
000013C2                            ; ===========================================================================
000013C2                            
000013C2                            loc_119E:				; XREF: PalToCRAM
000013C2 4238 F64F                  		clr.b	($FFFFF64F).w
000013C6 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013CA 6100 FBDC                  		bsr.w	Demo_Time
000013CE 4EB9 0000 0000             		jsr	sub_71B4C
000013D4 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D8 4E73                       		rte	
000013DA                            ; End of function PalToCRAM
000013DA                            
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            ; Subroutine to	initialise joypads
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            
000013DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013DA                            
000013DA                            
000013DA                            JoypadInit:				; XREF: GameClrRAM
000013DA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013E2                            
000013E2                            Joypad_WaitZ80:
000013E2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013EA 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013EC 7040                       		moveq	#$40,d0
000013EE 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F4 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013FA 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001400 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001408 4E75                       		rts	
0000140A                            ; End of function JoypadInit
0000140A                            
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            ; Subroutine to	read joypad input, and send it to the RAM
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            
0000140A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140A                            
0000140A                            
0000140A                            ReadJoypads:
0000140A 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140E 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001414 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001416 5449                       		addq.w	#2,a1		; do the second	joypad
00001418                            
00001418                            Joypad_Read:
00001418 12BC 0000                  		move.b	#0,(a1)
0000141C 4E71                       		nop	
0000141E 4E71                       		nop	
00001420 1011                       		move.b	(a1),d0
00001422 E508                       		lsl.b	#2,d0
00001424 0200 00C0                  		andi.b	#$C0,d0
00001428 12BC 0040                  		move.b	#$40,(a1)
0000142C 4E71                       		nop	
0000142E 4E71                       		nop	
00001430 1211                       		move.b	(a1),d1
00001432 0201 003F                  		andi.b	#$3F,d1
00001436 8001                       		or.b	d1,d0
00001438 4600                       		not.b	d0
0000143A 1210                       		move.b	(a0),d1
0000143C B101                       		eor.b	d0,d1
0000143E 10C0                       		move.b	d0,(a0)+
00001440 C200                       		and.b	d0,d1
00001442 10C1                       		move.b	d1,(a0)+
00001444 4E75                       		rts	
00001446                            ; End of function ReadJoypads
00001446                            
00001446                            
00001446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001446                            
00001446                            
00001446                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001446 41F9 00C0 0004             		lea	($C00004).l,a0
0000144C 43F9 00C0 0000             		lea	($C00000).l,a1
00001452 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001458 7E12                       		moveq	#$12,d7
0000145A                            
0000145A                            VDP_Loop:
0000145A 309A                       		move.w	(a2)+,(a0)
0000145C 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001460                            
00001460 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001466 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000146A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001470 7000                       		moveq	#0,d0
00001472 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000147C 3E3C 003F                  		move.w	#$3F,d7
00001480                            
00001480                            VDP_ClrCRAM:
00001480 3280                       		move.w	d0,(a1)
00001482 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001486                            
00001486 42B8 F616                  		clr.l	($FFFFF616).w
0000148A 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148E 2F01                       		move.l	d1,-(sp)
00001490 4BF9 00C0 0004             		lea	($C00004).l,a5
00001496 3ABC 8F01                  		move.w	#$8F01,(a5)
0000149A 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014A0 3ABC 9780                  		move.w	#$9780,(a5)
000014A4 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014AA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014B2                            
000014B2                            loc_128E:
000014B2 3215                       		move.w	(a5),d1
000014B4 0801 0001                  		btst	#1,d1
000014B8 66F8                       		bne.s	loc_128E
000014BA                            
000014BA 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BE 221F                       		move.l	(sp)+,d1
000014C0 4E75                       		rts	
000014C2                            ; End of function VDPSetupGame
000014C2                            
000014C2                            ; ===========================================================================
000014C2 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014CA 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014D2 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014DA 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014E2 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E8                            
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            ; Subroutine to	clear the screen
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            
000014E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E8                            
000014E8                            
000014E8                            ClearScreen:
000014E8 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EE 3ABC 8F01                  		move.w	#$8F01,(a5)
000014F2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F8 3ABC 9780                  		move.w	#$9780,(a5)
000014FC 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001502 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000150A                            
0000150A                            loc_12E6:
0000150A 3215                       		move.w	(a5),d1
0000150C 0801 0001                  		btst	#1,d1
00001510 66F8                       		bne.s	loc_12E6
00001512                            
00001512 3ABC 8F02                  		move.w	#$8F02,(a5)
00001516 4BF9 00C0 0004             		lea	($C00004).l,a5
0000151C 3ABC 8F01                  		move.w	#$8F01,(a5)
00001520 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001526 3ABC 9780                  		move.w	#$9780,(a5)
0000152A 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001530 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001538                            
00001538                            loc_1314:
00001538 3215                       		move.w	(a5),d1
0000153A 0801 0001                  		btst	#1,d1
0000153E 66F8                       		bne.s	loc_1314
00001540                            
00001540 3ABC 8F02                  		move.w	#$8F02,(a5)
00001544 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000154C 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001554 43F8 F800                  		lea	($FFFFF800).w,a1
00001558 7000                       		moveq	#0,d0
0000155A 323C 009F                  		move.w	#$9F,d1
0000155E                            
0000155E                            loc_133A:
0000155E 22C0                       		move.l	d0,(a1)+
00001560 51C9 FFFC                  		dbf	d1,loc_133A
00001564                            
00001564 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001568 7000                       		moveq	#0,d0
0000156A 323C 00FF                  		move.w	#$FF,d1
0000156E                            
0000156E                            loc_134A:
0000156E 22C0                       		move.l	d0,(a1)+
00001570 51C9 FFFC                  		dbf	d1,loc_134A
00001574 4E75                       		rts	
00001576                            ; End of function ClearScreen
00001576                            
00001576                            ; ---------------------------------------------------------------------------
00001576                            ; Subroutine to	load the sound driver
00001576                            ; ---------------------------------------------------------------------------
00001576                            
00001576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001576                            
00001576                            
00001576                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001576 4E71                       		nop	
00001578 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001580 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001588 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158E 43F9 00A0 0000             		lea	($A00000).l,a1
00001594 6100 0000                  		bsr.w	KosDec		; decompress
00001598 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 4E71                       		nop	
000015A6 4E71                       		nop	
000015A8 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015B0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B8 4E75                       		rts	
000015BA                            ; End of function SoundDriverLoad
000015BA                            
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            ; Subroutine to	play a sound or	music track
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            
000015BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BA                            
000015BA                            
000015BA                            PlaySound:
000015BA 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BE 4E75                       		rts	
000015C0                            ; End of function PlaySound
000015C0                            
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            ; Subroutine to	play a special sound/music (E0-E4)
000015C0                            ;
000015C0                            ; E0 - Fade out
000015C0                            ; E1 - Sega
000015C0                            ; E2 - Speed up
000015C0                            ; E3 - Normal speed
000015C0                            ; E4 - Stop
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            
000015C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C0                            
000015C0                            
000015C0                            PlaySound_Special:
000015C0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C4 4E75                       		rts	
000015C6                            ; End of function PlaySound_Special
000015C6                            
000015C6                            ; ===========================================================================
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            ; Unused sound/music subroutine
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            
000015C6                            PlaySound_Unk:
000015C6 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015CA 4E75                       		rts	
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	pause the game
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PauseGame:				; XREF: Level_MainLoop; et al
000015CC 4E71                       		nop	
000015CE 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015D2 6700                       		beq.s	Unpause		; if not, branch
000015D4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D8 6600                       		bne.s	loc_13BE	; if yes, branch
000015DA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015E0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015E2                            
000015E2                            loc_13BE:
000015E2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E8 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EE                            
000015EE                            loc_13CA:
000015EE 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F4 6100 0000                  		bsr.w	DelayProgram
000015F8 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015FC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FE 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001604 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001606 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000160C 4E71                       		nop	
0000160E 6000                       		bra.s	loc_1404
00001610                            ; ===========================================================================
00001610                            
00001610                            Pause_ChkBC:				; XREF: PauseGame
00001610 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001616 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001618 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161E 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001620                            
00001620                            Pause_ChkStart:				; XREF: PauseGame
00001620 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001626 67C6                       		beq.s	loc_13CA	; if not, branch
00001628                            
00001628                            loc_1404:				; XREF: PauseGame
00001628 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162E                            
0000162E                            Unpause:				; XREF: PauseGame
0000162E 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001634                            
00001634                            Pause_DoNothing:			; XREF: PauseGame
00001634 4E75                       		rts	
00001636                            ; ===========================================================================
00001636                            
00001636                            Pause_SlowMo:				; XREF: PauseGame
00001636 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000163C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001642 4E75                       		rts	
00001644                            ; End of function PauseGame
00001644                            
00001644                            ; ---------------------------------------------------------------------------
00001644                            ; Subroutine to	display	patterns via the VDP
00001644                            ; ---------------------------------------------------------------------------
00001644                            
00001644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001644                            
00001644                            
00001644                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001644 4DF9 00C0 0000             		lea	($C00000).l,a6
0000164A 283C 0080 0000             		move.l	#$800000,d4
00001650                            
00001650                            loc_142C:
00001650 2D40 0004                  		move.l	d0,4(a6)
00001654 3601                       		move.w	d1,d3
00001656                            
00001656                            loc_1432:
00001656 3C99                       		move.w	(a1)+,(a6)
00001658 51CB FFFC                  		dbf	d3,loc_1432
0000165C D084                       		add.l	d4,d0
0000165E 51CA FFF0                  		dbf	d2,loc_142C
00001662 4E75                       		rts	
00001664                            ; End of function ShowVDPGraphics
00001664                            
00001664                            ; ---------------------------------------------------------------------------
00001664                            ; Nemesis decompression	algorithm
00001664                            ; ---------------------------------------------------------------------------
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            NemDec:
00001664 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001668 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166E 49F9 00C0 0000             		lea	($C00000).l,a4
00001674 6000                       		bra.s	loc_145C
00001676                            ; ===========================================================================
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1518).l,a3
00001680                            
00001680                            loc_145C:				; XREF: NemDec
00001680 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001684 3418                       		move.w	(a0)+,d2
00001686 E34A                       		lsl.w	#1,d2
00001688 6400                       		bcc.s	loc_146A
0000168A D6FC 000A                  		adda.w	#$A,a3
0000168E                            
0000168E                            loc_146A:
0000168E E54A                       		lsl.w	#2,d2
00001690 3A42                       		movea.w	d2,a5
00001692 7608                       		moveq	#8,d3
00001694 7400                       		moveq	#0,d2
00001696 7800                       		moveq	#0,d4
00001698 6100 0000                  		bsr.w	NemDec4
0000169C 1A18                       		move.b	(a0)+,d5
0000169E E145                       		asl.w	#8,d5
000016A0 1A18                       		move.b	(a0)+,d5
000016A2 3C3C 0010                  		move.w	#$10,d6
000016A6 6100                       		bsr.s	NemDec2
000016A8 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016AC 4E75                       		rts	
000016AE                            ; End of function NemDec
000016AE                            
000016AE                            
000016AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AE                            
000016AE                            
000016AE                            NemDec2:				; XREF: NemDec
000016AE 3E06                       		move.w	d6,d7
000016B0 5147                       		subq.w	#8,d7
000016B2 3205                       		move.w	d5,d1
000016B4 EE69                       		lsr.w	d7,d1
000016B6 0C01 00FC                  		cmpi.b	#-4,d1
000016BA 6400                       		bcc.s	loc_14D6
000016BC 0241 00FF                  		andi.w	#$FF,d1
000016C0 D241                       		add.w	d1,d1
000016C2 1031 1000                  		move.b	(a1,d1.w),d0
000016C6 4880                       		ext.w	d0
000016C8 9C40                       		sub.w	d0,d6
000016CA 0C46 0009                  		cmpi.w	#9,d6
000016CE 6400                       		bcc.s	loc_14B2
000016D0 5046                       		addq.w	#8,d6
000016D2 E145                       		asl.w	#8,d5
000016D4 1A18                       		move.b	(a0)+,d5
000016D6                            
000016D6                            loc_14B2:
000016D6 1231 1001                  		move.b	1(a1,d1.w),d1
000016DA 3001                       		move.w	d1,d0
000016DC 0241 000F                  		andi.w	#$F,d1
000016E0 0240 00F0                  		andi.w	#$F0,d0
000016E4                            
000016E4                            loc_14C0:				; XREF: NemDec3
000016E4 E848                       		lsr.w	#4,d0
000016E6                            
000016E6                            loc_14C2:				; XREF: NemDec3
000016E6 E98C                       		lsl.l	#4,d4
000016E8 8801                       		or.b	d1,d4
000016EA 5343                       		subq.w	#1,d3
000016EC 6600                       		bne.s	loc_14D0
000016EE 4ED3                       		jmp	(a3)
000016F0                            ; End of function NemDec2
000016F0                            
000016F0                            
000016F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F0                            
000016F0                            
000016F0                            NemDec3:				; XREF: loc_1502
000016F0 7800                       		moveq	#0,d4
000016F2 7608                       		moveq	#8,d3
000016F4                            
000016F4                            loc_14D0:				; XREF: NemDec2
000016F4 51C8 FFF0                  		dbf	d0,loc_14C2
000016F8 60B4                       		bra.s	NemDec2
000016FA                            ; ===========================================================================
000016FA                            
000016FA                            loc_14D6:				; XREF: NemDec2
000016FA 5D46                       		subq.w	#6,d6
000016FC 0C46 0009                  		cmpi.w	#9,d6
00001700 6400                       		bcc.s	loc_14E4
00001702 5046                       		addq.w	#8,d6
00001704 E145                       		asl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708                            
00001708                            loc_14E4:				; XREF: NemDec3
00001708 5F46                       		subq.w	#7,d6
0000170A 3205                       		move.w	d5,d1
0000170C EC69                       		lsr.w	d6,d1
0000170E 3001                       		move.w	d1,d0
00001710 0241 000F                  		andi.w	#$F,d1
00001714 0240 0070                  		andi.w	#$70,d0
00001718 0C46 0009                  		cmpi.w	#9,d6
0000171C 64C6                       		bcc.s	loc_14C0
0000171E 5046                       		addq.w	#8,d6
00001720 E145                       		asl.w	#8,d5
00001722 1A18                       		move.b	(a0)+,d5
00001724 60BE                       		bra.s	loc_14C0
00001726                            ; End of function NemDec3
00001726                            
00001726                            ; ===========================================================================
00001726                            
00001726                            loc_1502:				; XREF: NemDec
00001726 2884                       		move.l	d4,(a4)
00001728 534D                       		subq.w	#1,a5
0000172A 380D                       		move.w	a5,d4
0000172C 66C2                       		bne.s	NemDec3
0000172E 4E75                       		rts	
00001730                            ; ===========================================================================
00001730 B982                       		eor.l	d4,d2
00001732 2882                       		move.l	d2,(a4)
00001734 534D                       		subq.w	#1,a5
00001736 380D                       		move.w	a5,d4
00001738 66B6                       		bne.s	NemDec3
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            
0000173C                            loc_1518:				; XREF: NemDec
0000173C 28C4                       		move.l	d4,(a4)+
0000173E 534D                       		subq.w	#1,a5
00001740 380D                       		move.w	a5,d4
00001742 66AC                       		bne.s	NemDec3
00001744 4E75                       		rts	
00001746                            ; ===========================================================================
00001746 B982                       		eor.l	d4,d2
00001748 28C2                       		move.l	d2,(a4)+
0000174A 534D                       		subq.w	#1,a5
0000174C 380D                       		move.w	a5,d4
0000174E 66A0                       		bne.s	NemDec3
00001750 4E75                       		rts	
00001752                            
00001752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001752                            
00001752                            
00001752                            NemDec4:				; XREF: NemDec
00001752 1018                       		move.b	(a0)+,d0
00001754                            
00001754                            loc_1530:
00001754 0C00 00FF                  		cmpi.b	#-1,d0
00001758 6600                       		bne.s	loc_1538
0000175A 4E75                       		rts	
0000175C                            ; ===========================================================================
0000175C                            
0000175C                            loc_1538:				; XREF: NemDec4
0000175C 3E00                       		move.w	d0,d7
0000175E                            
0000175E                            loc_153A:
0000175E 1018                       		move.b	(a0)+,d0
00001760 0C00 0080                  		cmpi.b	#$80,d0
00001764 64EE                       		bcc.s	loc_1530
00001766 1200                       		move.b	d0,d1
00001768 0247 000F                  		andi.w	#$F,d7
0000176C 0241 0070                  		andi.w	#$70,d1
00001770 8E41                       		or.w	d1,d7
00001772 0240 000F                  		andi.w	#$F,d0
00001776 1200                       		move.b	d0,d1
00001778 E149                       		lsl.w	#8,d1
0000177A 8E41                       		or.w	d1,d7
0000177C 7208                       		moveq	#8,d1
0000177E 9240                       		sub.w	d0,d1
00001780 6600                       		bne.s	loc_1568
00001782 1018                       		move.b	(a0)+,d0
00001784 D040                       		add.w	d0,d0
00001786 3387 0000                  		move.w	d7,(a1,d0.w)
0000178A 60D2                       		bra.s	loc_153A
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1568:				; XREF: NemDec4
0000178C 1018                       		move.b	(a0)+,d0
0000178E E368                       		lsl.w	d1,d0
00001790 D040                       		add.w	d0,d0
00001792 7A01                       		moveq	#1,d5
00001794 E36D                       		lsl.w	d1,d5
00001796 5345                       		subq.w	#1,d5
00001798                            
00001798                            loc_1574:
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 5440                       		addq.w	#2,d0
0000179E 51CD FFF8                  		dbf	d5,loc_1574
000017A2 60BA                       		bra.s	loc_153A
000017A4                            ; End of function NemDec4
000017A4                            
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            ; Subroutine to	load pattern load cues
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            
000017A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A4                            
000017A4                            
000017A4                            LoadPLC:
000017A4 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AE D040                       		add.w	d0,d0
000017B0 3031 0000                  		move.w	(a1,d0.w),d0
000017B4 43F1 0000                  		lea	(a1,d0.w),a1
000017B8 45F8 F680                  		lea	($FFFFF680).w,a2
000017BC                            
000017BC                            loc_1598:
000017BC 4A92                       		tst.l	(a2)
000017BE 6700                       		beq.s	loc_15A0
000017C0 5C4A                       		addq.w	#6,a2
000017C2 60F8                       		bra.s	loc_1598
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_15A0:				; XREF: LoadPLC
000017C4 3019                       		move.w	(a1)+,d0
000017C6 6B00                       		bmi.s	loc_15AC
000017C8                            
000017C8                            loc_15A4:
000017C8 24D9                       		move.l	(a1)+,(a2)+
000017CA 34D9                       		move.w	(a1)+,(a2)+
000017CC 51C8 FFFA                  		dbf	d0,loc_15A4
000017D0                            
000017D0                            loc_15AC:
000017D0 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D4 4E75                       		rts	
000017D6                            ; End of function LoadPLC
000017D6                            
000017D6                            
000017D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D6                            
000017D6                            
000017D6                            LoadPLC2:
000017D6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017DA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017E0 D040                       		add.w	d0,d0
000017E2 3031 0000                  		move.w	(a1,d0.w),d0
000017E6 43F1 0000                  		lea	(a1,d0.w),a1
000017EA 6100                       		bsr.s	ClearPLC
000017EC 45F8 F680                  		lea	($FFFFF680).w,a2
000017F0 3019                       		move.w	(a1)+,d0
000017F2 6B00                       		bmi.s	loc_15D8
000017F4                            
000017F4                            loc_15D0:
000017F4 24D9                       		move.l	(a1)+,(a2)+
000017F6 34D9                       		move.w	(a1)+,(a2)+
000017F8 51C8 FFFA                  		dbf	d0,loc_15D0
000017FC                            
000017FC                            loc_15D8:
000017FC 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001800 4E75                       		rts	
00001802                            ; End of function LoadPLC2
00001802                            
00001802                            ; ---------------------------------------------------------------------------
00001802                            ; Subroutine to	clear the pattern load cues
00001802                            ; ---------------------------------------------------------------------------
00001802                            
00001802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001802                            
00001802                            
00001802                            ClearPLC:				; XREF: LoadPLC2
00001802 45F8 F680                  		lea	($FFFFF680).w,a2
00001806 701F                       		moveq	#$1F,d0
00001808                            
00001808                            ClearPLC_Loop:
00001808 429A                       		clr.l	(a2)+
0000180A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180E 4E75                       		rts	
00001810                            ; End of function ClearPLC
00001810                            
00001810                            ; ---------------------------------------------------------------------------
00001810                            ; Subroutine to	use graphics listed in a pattern load cue
00001810                            ; ---------------------------------------------------------------------------
00001810                            
00001810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001810                            
00001810                            
00001810                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001810 4AB8 F680                  		tst.l	($FFFFF680).w
00001814 6700                       		beq.s	locret_1640
00001816 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000181A 6600                       		bne.s	locret_1640
0000181C 2078 F680                  		movea.l	($FFFFF680).w,a0
00001820 47F9 0000 1726             		lea	(loc_1502).l,a3
00001826 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000182A 3418                       		move.w	(a0)+,d2
0000182C 6A00                       		bpl.s	loc_160E
0000182E D6FC 000A                  		adda.w	#$A,a3
00001832                            
00001832                            loc_160E:
00001832 0242 7FFF                  		andi.w	#$7FFF,d2
00001836 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000183A 6100 FF16                  		bsr.w	NemDec4
0000183E 1A18                       		move.b	(a0)+,d5
00001840 E145                       		asl.w	#8,d5
00001842 1A18                       		move.b	(a0)+,d5
00001844 7C10                       		moveq	#$10,d6
00001846 7000                       		moveq	#0,d0
00001848 21C8 F680                  		move.l	a0,($FFFFF680).w
0000184C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001850 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001854 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001858 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000185C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001860 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001864                            
00001864                            locret_1640:
00001864 4E75                       		rts	
00001866                            ; End of function RunPLC_RAM
00001866                            
00001866                            
00001866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001866                            
00001866                            
00001866                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001866 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000186A 6700 0000                  		beq.w	locret_16DA
0000186E 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001874 7000                       		moveq	#0,d0
00001876 3038 F684                  		move.w	($FFFFF684).w,d0
0000187A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001880 6000                       		bra.s	loc_1676
00001882                            ; End of function sub_1642
00001882                            
00001882                            
00001882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001882                            
00001882                            
00001882                            sub_165E:				; XREF: Demo_Time
00001882 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001886 6700                       		beq.s	locret_16DA
00001888 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188E 7000                       		moveq	#0,d0
00001890 3038 F684                  		move.w	($FFFFF684).w,d0
00001894 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000189A                            
0000189A                            loc_1676:				; XREF: sub_1642
0000189A 49F9 00C0 0004             		lea	($C00004).l,a4
000018A0 E588                       		lsl.l	#2,d0
000018A2 E448                       		lsr.w	#2,d0
000018A4 0040 4000                  		ori.w	#$4000,d0
000018A8 4840                       		swap	d0
000018AA 2880                       		move.l	d0,(a4)
000018AC 594C                       		subq.w	#4,a4
000018AE 2078 F680                  		movea.l	($FFFFF680).w,a0
000018B2 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B6 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018BA 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BE 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018C2 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C6 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018CA 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CE                            
000018CE                            loc_16AA:				; XREF: sub_165E
000018CE 3A7C 0008                  		movea.w	#8,a5
000018D2 6100 FE1C                  		bsr.w	NemDec3
000018D6 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018DA 6700                       		beq.s	loc_16DC
000018DC 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018E0 66EC                       		bne.s	loc_16AA
000018E2 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018EA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EE 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018F2 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018FA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FE                            
000018FE                            locret_16DA:				; XREF: sub_1642
000018FE 4E75                       		rts	
00001900                            ; ===========================================================================
00001900                            
00001900                            loc_16DC:				; XREF: sub_165E
00001900 41F8 F680                  		lea	($FFFFF680).w,a0
00001904 7015                       		moveq	#$15,d0
00001906                            
00001906                            loc_16E2:				; XREF: sub_165E
00001906 20E8 0006                  		move.l	6(a0),(a0)+
0000190A 51C8 FFFA                  		dbf	d0,loc_16E2
0000190E 4E75                       		rts	
00001910                            ; End of function sub_165E
00001910                            
00001910                            ; ---------------------------------------------------------------------------
00001910                            ; Subroutine to	execute	the pattern load cue
00001910                            ; ---------------------------------------------------------------------------
00001910                            
00001910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001910                            
00001910                            
00001910                            RunPLC_ROM:
00001910 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001916 D040                       		add.w	d0,d0
00001918 3031 0000                  		move.w	(a1,d0.w),d0
0000191C 43F1 0000                  		lea	(a1,d0.w),a1
00001920 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001922                            
00001922                            RunPLC_Loop:
00001922 2059                       		movea.l	(a1)+,a0	; get art pointer
00001924 7000                       		moveq	#0,d0
00001926 3019                       		move.w	(a1)+,d0	; get VRAM address
00001928 E588                       		lsl.l	#2,d0		; divide address by $20
0000192A E448                       		lsr.w	#2,d0
0000192C 0040 4000                  		ori.w	#$4000,d0
00001930 4840                       		swap	d0
00001932 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001938 6100 FD2A                  		bsr.w	NemDec		; decompress
0000193C 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001940 4E75                       		rts	
00001942                            ; End of function RunPLC_ROM
00001942                            
00001942                            ; ---------------------------------------------------------------------------
00001942                            ; Enigma decompression algorithm
00001942                            ; ---------------------------------------------------------------------------
00001942                            
00001942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001942                            
00001942                            
00001942                            EniDec:
00001942 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001946 3640                       		movea.w	d0,a3
00001948 1018                       		move.b	(a0)+,d0
0000194A 4880                       		ext.w	d0
0000194C 3A40                       		movea.w	d0,a5
0000194E 1818                       		move.b	(a0)+,d4
00001950 E70C                       		lsl.b	#3,d4
00001952 3458                       		movea.w	(a0)+,a2
00001954 D4CB                       		adda.w	a3,a2
00001956 3858                       		movea.w	(a0)+,a4
00001958 D8CB                       		adda.w	a3,a4
0000195A 1A18                       		move.b	(a0)+,d5
0000195C E145                       		asl.w	#8,d5
0000195E 1A18                       		move.b	(a0)+,d5
00001960 7C10                       		moveq	#$10,d6
00001962                            
00001962                            loc_173E:				; XREF: loc_1768
00001962 7007                       		moveq	#7,d0
00001964 3E06                       		move.w	d6,d7
00001966 9E40                       		sub.w	d0,d7
00001968 3205                       		move.w	d5,d1
0000196A EE69                       		lsr.w	d7,d1
0000196C 0241 007F                  		andi.w	#$7F,d1
00001970 3401                       		move.w	d1,d2
00001972 0C41 0040                  		cmpi.w	#$40,d1
00001976 6400                       		bcc.s	loc_1758
00001978 7006                       		moveq	#6,d0
0000197A E24A                       		lsr.w	#1,d2
0000197C                            
0000197C                            loc_1758:
0000197C 6100 0000                  		bsr.w	sub_188C
00001980 0242 000F                  		andi.w	#$F,d2
00001984 E849                       		lsr.w	#4,d1
00001986 D241                       		add.w	d1,d1
00001988 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000198C                            ; End of function EniDec
0000198C                            
0000198C                            ; ===========================================================================
0000198C                            
0000198C                            loc_1768:				; XREF: loc_17B4
0000198C 32CA                       		move.w	a2,(a1)+
0000198E 524A                       		addq.w	#1,a2
00001990 51CA FFFA                  		dbf	d2,loc_1768
00001994 60CC                       		bra.s	loc_173E
00001996                            ; ===========================================================================
00001996                            
00001996                            loc_1772:				; XREF: loc_17B4
00001996 32CC                       		move.w	a4,(a1)+
00001998 51CA FFFC                  		dbf	d2,loc_1772
0000199C 60C4                       		bra.s	loc_173E
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_177A:				; XREF: loc_17B4
0000199E 6100 0000                  		bsr.w	loc_17DC
000019A2                            
000019A2                            loc_177E:
000019A2 32C1                       		move.w	d1,(a1)+
000019A4 51CA FFFC                  		dbf	d2,loc_177E
000019A8 60B8                       		bra.s	loc_173E
000019AA                            ; ===========================================================================
000019AA                            
000019AA                            loc_1786:				; XREF: loc_17B4
000019AA 6100 0000                  		bsr.w	loc_17DC
000019AE                            
000019AE                            loc_178A:
000019AE 32C1                       		move.w	d1,(a1)+
000019B0 5241                       		addq.w	#1,d1
000019B2 51CA FFFA                  		dbf	d2,loc_178A
000019B6 60AA                       		bra.s	loc_173E
000019B8                            ; ===========================================================================
000019B8                            
000019B8                            loc_1794:				; XREF: loc_17B4
000019B8 6100 0000                  		bsr.w	loc_17DC
000019BC                            
000019BC                            loc_1798:
000019BC 32C1                       		move.w	d1,(a1)+
000019BE 5341                       		subq.w	#1,d1
000019C0 51CA FFFA                  		dbf	d2,loc_1798
000019C4 609C                       		bra.s	loc_173E
000019C6                            ; ===========================================================================
000019C6                            
000019C6                            loc_17A2:				; XREF: loc_17B4
000019C6 0C42 000F                  		cmpi.w	#$F,d2
000019CA 6700                       		beq.s	loc_17C4
000019CC                            
000019CC                            loc_17A8:
000019CC 6100 0000                  		bsr.w	loc_17DC
000019D0 32C1                       		move.w	d1,(a1)+
000019D2 51CA FFF8                  		dbf	d2,loc_17A8
000019D6 608A                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17B4:				; XREF: EniDec
000019D8 60B2                       		bra.s	loc_1768
000019DA                            ; ===========================================================================
000019DA 60B0                       		bra.s	loc_1768
000019DC                            ; ===========================================================================
000019DC 60B8                       		bra.s	loc_1772
000019DE                            ; ===========================================================================
000019DE 60B6                       		bra.s	loc_1772
000019E0                            ; ===========================================================================
000019E0 60BC                       		bra.s	loc_177A
000019E2                            ; ===========================================================================
000019E2 60C6                       		bra.s	loc_1786
000019E4                            ; ===========================================================================
000019E4 60D2                       		bra.s	loc_1794
000019E6                            ; ===========================================================================
000019E6 60DE                       		bra.s	loc_17A2
000019E8                            ; ===========================================================================
000019E8                            
000019E8                            loc_17C4:				; XREF: loc_17A2
000019E8 5348                       		subq.w	#1,a0
000019EA 0C46 0010                  		cmpi.w	#$10,d6
000019EE 6600                       		bne.s	loc_17CE
000019F0 5348                       		subq.w	#1,a0
000019F2                            
000019F2                            loc_17CE:
000019F2 3008                       		move.w	a0,d0
000019F4 E248                       		lsr.w	#1,d0
000019F6 6400                       		bcc.s	loc_17D6
000019F8 5248                       		addq.w	#1,a0
000019FA                            
000019FA                            loc_17D6:
000019FA 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FE 4E75                       		rts	
00001A00                            ; ===========================================================================
00001A00                            
00001A00                            loc_17DC:				; XREF: loc_17A2
00001A00 360B                       		move.w	a3,d3
00001A02 1204                       		move.b	d4,d1
00001A04 D201                       		add.b	d1,d1
00001A06 6400                       		bcc.s	loc_17EE
00001A08 5346                       		subq.w	#1,d6
00001A0A 0D05                       		btst	d6,d5
00001A0C 6700                       		beq.s	loc_17EE
00001A0E 0043 8000                  		ori.w	#-$8000,d3
00001A12                            
00001A12                            loc_17EE:
00001A12 D201                       		add.b	d1,d1
00001A14 6400                       		bcc.s	loc_17FC
00001A16 5346                       		subq.w	#1,d6
00001A18 0D05                       		btst	d6,d5
00001A1A 6700                       		beq.s	loc_17FC
00001A1C 0643 4000                  		addi.w	#$4000,d3
00001A20                            
00001A20                            loc_17FC:
00001A20 D201                       		add.b	d1,d1
00001A22 6400                       		bcc.s	loc_180A
00001A24 5346                       		subq.w	#1,d6
00001A26 0D05                       		btst	d6,d5
00001A28 6700                       		beq.s	loc_180A
00001A2A 0643 2000                  		addi.w	#$2000,d3
00001A2E                            
00001A2E                            loc_180A:
00001A2E D201                       		add.b	d1,d1
00001A30 6400                       		bcc.s	loc_1818
00001A32 5346                       		subq.w	#1,d6
00001A34 0D05                       		btst	d6,d5
00001A36 6700                       		beq.s	loc_1818
00001A38 0043 1000                  		ori.w	#$1000,d3
00001A3C                            
00001A3C                            loc_1818:
00001A3C D201                       		add.b	d1,d1
00001A3E 6400                       		bcc.s	loc_1826
00001A40 5346                       		subq.w	#1,d6
00001A42 0D05                       		btst	d6,d5
00001A44 6700                       		beq.s	loc_1826
00001A46 0043 0800                  		ori.w	#$800,d3
00001A4A                            
00001A4A                            loc_1826:
00001A4A 3205                       		move.w	d5,d1
00001A4C 3E06                       		move.w	d6,d7
00001A4E 9E4D                       		sub.w	a5,d7
00001A50 6400                       		bcc.s	loc_1856
00001A52 3C07                       		move.w	d7,d6
00001A54 0646 0010                  		addi.w	#$10,d6
00001A58 4447                       		neg.w	d7
00001A5A EF69                       		lsl.w	d7,d1
00001A5C 1A10                       		move.b	(a0),d5
00001A5E EF3D                       		rol.b	d7,d5
00001A60 DE47                       		add.w	d7,d7
00001A62 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A66 D245                       		add.w	d5,d1
00001A68                            
00001A68                            loc_1844:				; XREF: loc_1868
00001A68 300D                       		move.w	a5,d0
00001A6A D040                       		add.w	d0,d0
00001A6C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A70 D243                       		add.w	d3,d1
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 E14D                       		lsl.w	#8,d5
00001A76 1A18                       		move.b	(a0)+,d5
00001A78 4E75                       		rts	
00001A7A                            ; ===========================================================================
00001A7A                            
00001A7A                            loc_1856:				; XREF: loc_1826
00001A7A 6700                       		beq.s	loc_1868
00001A7C EE69                       		lsr.w	d7,d1
00001A7E 300D                       		move.w	a5,d0
00001A80 D040                       		add.w	d0,d0
00001A82 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A86 D243                       		add.w	d3,d1
00001A88 300D                       		move.w	a5,d0
00001A8A 6000                       		bra.s	sub_188C
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1868:				; XREF: loc_1856
00001A8C 7C10                       		moveq	#$10,d6
00001A8E                            
00001A8E                            loc_186A:
00001A8E 60D8                       		bra.s	loc_1844
00001A90                            ; ===========================================================================
00001A90 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA6 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AB0                            
00001AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB0                            
00001AB0                            
00001AB0                            sub_188C:				; XREF: EniDec
00001AB0 9C40                       		sub.w	d0,d6
00001AB2 0C46 0009                  		cmpi.w	#9,d6
00001AB6 6400                       		bcc.s	locret_189A
00001AB8 5046                       		addq.w	#8,d6
00001ABA E145                       		asl.w	#8,d5
00001ABC 1A18                       		move.b	(a0)+,d5
00001ABE                            
00001ABE                            locret_189A:
00001ABE 4E75                       		rts	
00001AC0                            ; End of function sub_188C
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Kosinski decompression algorithm
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            KosDec:
00001AC0                            
00001AC0 =FFFFFFFE                  var_2		= -2
00001AC0 =FFFFFFFF                  var_1		= -1
00001AC0                            
00001AC0 558F                       		subq.l	#2,sp
00001AC2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC6 1E98                       		move.b	(a0)+,(sp)
00001AC8 3A17                       		move.w	(sp),d5
00001ACA 780F                       		moveq	#$F,d4
00001ACC                            
00001ACC                            loc_18A8:
00001ACC E24D                       		lsr.w	#1,d5
00001ACE 40C6                       		move	sr,d6
00001AD0 51CC 0000                  		dbf	d4,loc_18BA
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18BA:
00001ADE 44C6                       		move	d6,ccr
00001AE0 6400                       		bcc.s	loc_18C2
00001AE2 12D8                       		move.b	(a0)+,(a1)+
00001AE4 60E6                       		bra.s	loc_18A8
00001AE6                            ; ===========================================================================
00001AE6                            
00001AE6                            loc_18C2:				; XREF: KosDec
00001AE6 7600                       		moveq	#0,d3
00001AE8 E24D                       		lsr.w	#1,d5
00001AEA 40C6                       		move	sr,d6
00001AEC 51CC 0000                  		dbf	d4,loc_18D6
00001AF0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF4 1E98                       		move.b	(a0)+,(sp)
00001AF6 3A17                       		move.w	(sp),d5
00001AF8 780F                       		moveq	#$F,d4
00001AFA                            
00001AFA                            loc_18D6:
00001AFA 44C6                       		move	d6,ccr
00001AFC 6500                       		bcs.s	loc_1906
00001AFE E24D                       		lsr.w	#1,d5
00001B00 51CC 0000                  		dbf	d4,loc_18EA
00001B04 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B08 1E98                       		move.b	(a0)+,(sp)
00001B0A 3A17                       		move.w	(sp),d5
00001B0C 780F                       		moveq	#$F,d4
00001B0E                            
00001B0E                            loc_18EA:
00001B0E E353                       		roxl.w	#1,d3
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18FC
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18FC:
00001B20 E353                       		roxl.w	#1,d3
00001B22 5243                       		addq.w	#1,d3
00001B24 74FF                       		moveq	#-1,d2
00001B26 1418                       		move.b	(a0)+,d2
00001B28 6000                       		bra.s	loc_191C
00001B2A                            ; ===========================================================================
00001B2A                            
00001B2A                            loc_1906:				; XREF: loc_18C2
00001B2A 1018                       		move.b	(a0)+,d0
00001B2C 1218                       		move.b	(a0)+,d1
00001B2E 74FF                       		moveq	#-1,d2
00001B30 1401                       		move.b	d1,d2
00001B32 EB4A                       		lsl.w	#5,d2
00001B34 1400                       		move.b	d0,d2
00001B36 0241 0007                  		andi.w	#7,d1
00001B3A 6700                       		beq.s	loc_1928
00001B3C 1601                       		move.b	d1,d3
00001B3E 5243                       		addq.w	#1,d3
00001B40                            
00001B40                            loc_191C:
00001B40 1031 2000                  		move.b	(a1,d2.w),d0
00001B44 12C0                       		move.b	d0,(a1)+
00001B46 51CB FFF8                  		dbf	d3,loc_191C
00001B4A 6080                       		bra.s	loc_18A8
00001B4C                            ; ===========================================================================
00001B4C                            
00001B4C                            loc_1928:				; XREF: loc_1906
00001B4C 1218                       		move.b	(a0)+,d1
00001B4E 6700                       		beq.s	loc_1938
00001B50 0C01 0001                  		cmpi.b	#1,d1
00001B54 6700 FF76                  		beq.w	loc_18A8
00001B58 1601                       		move.b	d1,d3
00001B5A 60E4                       		bra.s	loc_191C
00001B5C                            ; ===========================================================================
00001B5C                            
00001B5C                            loc_1938:				; XREF: loc_1928
00001B5C 548F                       		addq.l	#2,sp
00001B5E 4E75                       		rts	
00001B60                            ; End of function KosDec
00001B60                            
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            ; Pallet cycling routine loading subroutine
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            
00001B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B60                            
00001B60                            
00001B60                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B60 7400                       		moveq	#0,d2
00001B62 7000                       		moveq	#0,d0
00001B64 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B68 D040                       		add.w	d0,d0		; multiply by 2
00001B6A 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6E 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B72                            ; End of function PalCycle_Load
00001B72                            
00001B72                            ; ===========================================================================
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routines
00001B72                            ; ---------------------------------------------------------------------------
00001B72 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B74 0000                       		dc.w PalCycle_LZ-PalCycle
00001B76 0000                       		dc.w PalCycle_MZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B7C 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7E 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B80                            
00001B80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B80                            
00001B80                            
00001B80                            PalCycle_Title:				; XREF: TitleScreen
00001B80 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B86 6000                       		bra.s	loc_196A
00001B88                            ; ===========================================================================
00001B88                            
00001B88                            PalCycle_GHZ:				; XREF: PalCycle
00001B88 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8E                            
00001B8E                            loc_196A:				; XREF: PalCycle_Title
00001B8E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B92 6A00                       		bpl.s	locret_1990
00001B94 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B9A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA2 0240 0003                  		andi.w	#3,d0
00001BA6 E748                       		lsl.w	#3,d0
00001BA8 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BAC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BB0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB4                            
00001BB4                            locret_1990:
00001BB4 4E75                       		rts	
00001BB6                            ; End of function PalCycle_Title
00001BB6                            
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_LZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	loc_19D8
00001BBC 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BCA 0240 0003                  		andi.w	#3,d0
00001BCE E748                       		lsl.w	#3,d0
00001BD0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BDC 6600                       		bne.s	loc_19C0
00001BDE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE4                            
00001BE4                            loc_19C0:
00001BE4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BEC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF0 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BFC                            
00001BFC                            loc_19D8:
00001BFC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C00 0240 0007                  		andi.w	#7,d0
00001C04 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C08 6700                       		beq.s	locret_1A3A
00001C0A 7201                       		moveq	#1,d1
00001C0C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C10 6700                       		beq.s	loc_19F0
00001C12 4441                       		neg.w	d1
00001C14                            
00001C14                            loc_19F0:
00001C14 3038 F650                  		move.w	($FFFFF650).w,d0
00001C18 0240 0003                  		andi.w	#3,d0
00001C1C D041                       		add.w	d1,d0
00001C1E 0C40 0003                  		cmpi.w	#3,d0
00001C22 6500                       		bcs.s	loc_1A0A
00001C24 3200                       		move.w	d0,d1
00001C26 7000                       		moveq	#0,d0
00001C28 4A41                       		tst.w	d1
00001C2A 6A00                       		bpl.s	loc_1A0A
00001C2C 7002                       		moveq	#2,d0
00001C2E                            
00001C2E                            loc_1A0A:
00001C2E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C32 D040                       		add.w	d0,d0
00001C34 3200                       		move.w	d0,d1
00001C36 D040                       		add.w	d0,d0
00001C38 D041                       		add.w	d1,d0
00001C3A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C40 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C44 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C48 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C4C 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C52 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5E                            
00001C5E                            locret_1A3A:
00001C5E 4E75                       		rts	
00001C60                            ; End of function PalCycle_LZ
00001C60                            
00001C60                            ; ===========================================================================
00001C60 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C68                            ; ===========================================================================
00001C68                            
00001C68                            PalCycle_MZ:				; XREF: PalCycle
00001C68 4E75                       		rts	
00001C6A                            
00001C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6A                            
00001C6A                            
00001C6A                            PalCycle_SLZ:				; XREF: PalCycle
00001C6A 4E75                       		rts	
00001C6C                            ; End of function PalCycle_SLZ
00001C6C                            
00001C6C                            
00001C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6C                            
00001C6C                            
00001C6C                            PalCycle_SYZ:				; XREF: PalCycle
00001C6C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C70 6A00                       		bpl.s	locret_1AC6
00001C72 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C78 3038 F632                  		move.w	($FFFFF632).w,d0
00001C7C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C80 0240 0003                  		andi.w	#3,d0
00001C84 E548                       		lsl.w	#2,d0
00001C86 3200                       		move.w	d0,d1
00001C88 D040                       		add.w	d0,d0
00001C8A 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C90 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C94 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C98 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C9C 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CA2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CA6 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CAA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CB0                            
00001CB0                            locret_1AC6:
00001CB0 4E75                       		rts	
00001CB2                            ; End of function PalCycle_SYZ
00001CB2                            
00001CB2                            
00001CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB2                            
00001CB2                            
00001CB2                            PalCycle_SBZ:				; XREF: PalCycle
00001CB2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CB8 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CBC 6700                       		beq.s	loc_1ADA
00001CBE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CC4                            
00001CC4                            loc_1ADA:
00001CC4 43F8 F650                  		lea	($FFFFF650).w,a1
00001CC8 321A                       		move.w	(a2)+,d1
00001CCA                            
00001CCA                            loc_1AE0:
00001CCA 5311                       		subq.b	#1,(a1)
00001CCC 6B00                       		bmi.s	loc_1AEA
00001CCE 5489                       		addq.l	#2,a1
00001CD0 5C8A                       		addq.l	#6,a2
00001CD2 6000                       		bra.s	loc_1B06
00001CD4                            ; ===========================================================================
00001CD4                            
00001CD4                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CD4 12DA                       		move.b	(a2)+,(a1)+
00001CD6 1011                       		move.b	(a1),d0
00001CD8 5200                       		addq.b	#1,d0
00001CDA B01A                       		cmp.b	(a2)+,d0
00001CDC 6500                       		bcs.s	loc_1AF6
00001CDE 7000                       		moveq	#0,d0
00001CE0                            
00001CE0                            loc_1AF6:
00001CE0 12C0                       		move.b	d0,(a1)+
00001CE2 0240 000F                  		andi.w	#$F,d0
00001CE6 D040                       		add.w	d0,d0
00001CE8 305A                       		movea.w	(a2)+,a0
00001CEA 365A                       		movea.w	(a2)+,a3
00001CEC 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CF0                            
00001CF0                            loc_1B06:				; XREF: PalCycle_SBZ
00001CF0 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CF4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CF8 6A00                       		bpl.s	locret_1B64
00001CFA 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D00 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D06 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D0A 6700                       		beq.s	loc_1B2E
00001D0C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D12 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D18                            
00001D18                            loc_1B2E:
00001D18 72FF                       		moveq	#-1,d1
00001D1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D1E 6700                       		beq.s	loc_1B38
00001D20 4441                       		neg.w	d1
00001D22                            
00001D22                            loc_1B38:
00001D22 3038 F632                  		move.w	($FFFFF632).w,d0
00001D26 0240 0003                  		andi.w	#3,d0
00001D2A D041                       		add.w	d1,d0
00001D2C 0C40 0003                  		cmpi.w	#3,d0
00001D30 6500                       		bcs.s	loc_1B52
00001D32 3200                       		move.w	d0,d1
00001D34 7000                       		moveq	#0,d0
00001D36 4A41                       		tst.w	d1
00001D38 6A00                       		bpl.s	loc_1B52
00001D3A 7002                       		moveq	#2,d0
00001D3C                            
00001D3C                            loc_1B52:
00001D3C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D40 D040                       		add.w	d0,d0
00001D42 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D46 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D4A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D4E                            
00001D4E                            locret_1B64:
00001D4E 4E75                       		rts	
00001D50                            ; End of function PalCycle_SBZ
00001D50                            
00001D50                            ; ===========================================================================
00001D50                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D70                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D90                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DB0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DC2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DD4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E3C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E60                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E80                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E90                            
00001E90                            Pal_SBZCycList:
00001E90                            	include "_inc\SBZ pallet script 1.asm"
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            ; Scrap Brain Zone 1 pallet cycling script
00001E90                            ; ---------------------------------------------------------------------------
00001E90 0008                       	dc.w 8			; number of entries - 1
00001E92 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E94 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E96 FB50                       	dc.w $FB50		; RAM address
00001E98 0D08                       	dc.b $D, 8
00001E9A 0000                       	dc.w Pal_SBZCyc2
00001E9C FB52                       	dc.w $FB52
00001E9E 0E08                       	dc.b $E, 8
00001EA0 0000                       	dc.w Pal_SBZCyc3
00001EA2 FB6E                       	dc.w $FB6E
00001EA4 0B08                       	dc.b $B, 8
00001EA6 0000                       	dc.w Pal_SBZCyc5
00001EA8 FB70                       	dc.w $FB70
00001EAA 0708                       	dc.b 7,	8
00001EAC 0000                       	dc.w Pal_SBZCyc6
00001EAE FB72                       	dc.w $FB72
00001EB0 1C10                       	dc.b $1C, $10
00001EB2 0000                       	dc.w Pal_SBZCyc7
00001EB4 FB7E                       	dc.w $FB7E
00001EB6 0303                       	dc.b 3,	3
00001EB8 0000                       	dc.w Pal_SBZCyc8
00001EBA FB78                       	dc.w $FB78
00001EBC 0303                       	dc.b 3,	3
00001EBE 0000                       	dc.w Pal_SBZCyc8+2
00001EC0 FB7A                       	dc.w $FB7A
00001EC2 0303                       	dc.b 3,	3
00001EC4 0000                       	dc.w Pal_SBZCyc8+4
00001EC6 FB7C                       	dc.w $FB7C
00001EC8                            	even
00001EC8                            	even
00001EC8                            
00001EC8                            Pal_SBZCycList2:
00001EC8                            	include "_inc\SBZ pallet script 2.asm"
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8                            ; Scrap Brain Zone 2 pallet cycling script
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8 0006                       	dc.w 6
00001ECA 0708                       	dc.b 7,	8
00001ECC 0000                       	dc.w Pal_SBZCyc1
00001ECE FB50                       	dc.w $FB50
00001ED0 0D08                       	dc.b $D, 8
00001ED2 0000                       	dc.w Pal_SBZCyc2
00001ED4 FB52                       	dc.w $FB52
00001ED6 0908                       	dc.b 9,	8
00001ED8 0000                       	dc.w Pal_SBZCyc9
00001EDA FB70                       	dc.w $FB70
00001EDC 0708                       	dc.b 7,	8
00001EDE 0000                       	dc.w Pal_SBZCyc6
00001EE0 FB72                       	dc.w $FB72
00001EE2 0303                       	dc.b 3,	3
00001EE4 0000                       	dc.w Pal_SBZCyc8
00001EE6 FB78                       	dc.w $FB78
00001EE8 0303                       	dc.b 3,	3
00001EEA 0000                       	dc.w Pal_SBZCyc8+2
00001EEC FB7A                       	dc.w $FB7A
00001EEE 0303                       	dc.b 3,	3
00001EF0 0000                       	dc.w Pal_SBZCyc8+4
00001EF2 FB7C                       	dc.w $FB7C
00001EF4                            	even
00001EF4                            	even
00001EF4                            
00001EF4                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F04                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F14                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F24                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F30                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F40                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F50                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F70                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F7A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F8A                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            ; Subroutine to	fade out and fade in
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            
00001F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F96                            
00001F96                            
00001F96                            Pal_FadeTo:
00001F96 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F9C                            
00001F9C                            Pal_FadeTo2:
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 7200                       		moveq	#0,d1
00001FAA 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAE                            
00001FAE                            Pal_ToBlack:
00001FAE 30C1                       		move.w	d1,(a0)+
00001FB0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FB4                            
00001FB4 383C 0015                  		move.w	#$15,d4
00001FB8                            
00001FB8                            loc_1DCE:
00001FB8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FBE 6100 0000                  		bsr.w	DelayProgram
00001FC2 6100                       		bsr.s	Pal_FadeIn
00001FC4 6100 F84A                  		bsr.w	RunPLC_RAM
00001FC8 51CC FFEE                  		dbf	d4,loc_1DCE
00001FCC 4E75                       		rts	
00001FCE                            ; End of function Pal_FadeTo
00001FCE                            
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            ; Pallet fade-in subroutine
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            
00001FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCE                            
00001FCE                            
00001FCE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FCE 7000                       		moveq	#0,d0
00001FD0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE D2C0                       		adda.w	d0,a1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            loc_1DFA:
00001FE4 6100                       		bsr.s	Pal_AddColor
00001FE6 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FF0 6600                       		bne.s	locret_1E24
00001FF2 7000                       		moveq	#0,d0
00001FF4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FF8 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FFC 1038 F626                  		move.b	($FFFFF626).w,d0
00002000 D0C0                       		adda.w	d0,a0
00002002 D2C0                       		adda.w	d0,a1
00002004 1038 F627                  		move.b	($FFFFF627).w,d0
00002008                            
00002008                            loc_1E1E:
00002008 6100                       		bsr.s	Pal_AddColor
0000200A 51C8 FFFC                  		dbf	d0,loc_1E1E
0000200E                            
0000200E                            locret_1E24:
0000200E 4E75                       		rts	
00002010                            ; End of function Pal_FadeIn
00002010                            
00002010                            
00002010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002010                            
00002010                            
00002010                            Pal_AddColor:				; XREF: Pal_FadeIn
00002010 3419                       		move.w	(a1)+,d2
00002012 3610                       		move.w	(a0),d3
00002014 B642                       		cmp.w	d2,d3
00002016 6700                       		beq.s	loc_1E4E
00002018 3203                       		move.w	d3,d1
0000201A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000201E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002020 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002022 30C1                       		move.w	d1,(a0)+	; update pallet
00002024 4E75                       		rts	
00002026                            ; ===========================================================================
00002026                            
00002026                            Pal_AddGreen:				; XREF: Pal_AddColor
00002026 3203                       		move.w	d3,d1
00002028 0641 0020                  		addi.w	#$20,d1		; increase green value
0000202C B242                       		cmp.w	d2,d1
0000202E 6200                       		bhi.s	Pal_AddRed
00002030 30C1                       		move.w	d1,(a0)+	; update pallet
00002032 4E75                       		rts	
00002034                            ; ===========================================================================
00002034                            
00002034                            Pal_AddRed:				; XREF: Pal_AddGreen
00002034 5458                       		addq.w	#2,(a0)+	; increase red value
00002036 4E75                       		rts	
00002038                            ; ===========================================================================
00002038                            
00002038                            loc_1E4E:				; XREF: Pal_AddColor
00002038 5448                       		addq.w	#2,a0
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_AddColor
0000203C                            
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_FadeFrom:
0000203C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002042 383C 0015                  		move.w	#$15,d4
00002046                            
00002046                            loc_1E5C:
00002046 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000204C 6100 0000                  		bsr.w	DelayProgram
00002050 6100                       		bsr.s	Pal_FadeOut
00002052 6100 F7BC                  		bsr.w	RunPLC_RAM
00002056 51CC FFEE                  		dbf	d4,loc_1E5C
0000205A 4E75                       		rts	
0000205C                            ; End of function Pal_FadeFrom
0000205C                            
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            ; Pallet fade-out subroutine
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            
0000205C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000205C                            
0000205C                            
0000205C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000205C 7000                       		moveq	#0,d0
0000205E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002062 1038 F626                  		move.b	($FFFFF626).w,d0
00002066 D0C0                       		adda.w	d0,a0
00002068 1038 F627                  		move.b	($FFFFF627).w,d0
0000206C                            
0000206C                            loc_1E82:
0000206C 6100                       		bsr.s	Pal_DecColor
0000206E 51C8 FFFC                  		dbf	d0,loc_1E82
00002072                            
00002072 7000                       		moveq	#0,d0
00002074 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002078 1038 F626                  		move.b	($FFFFF626).w,d0
0000207C D0C0                       		adda.w	d0,a0
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            loc_1E98:
00002082 6100                       		bsr.s	Pal_DecColor
00002084 51C8 FFFC                  		dbf	d0,loc_1E98
00002088 4E75                       		rts	
0000208A                            ; End of function Pal_FadeOut
0000208A                            
0000208A                            
0000208A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000208A                            
0000208A                            
0000208A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000208A 3410                       		move.w	(a0),d2
0000208C 6700                       		beq.s	loc_1ECC
0000208E 3202                       		move.w	d2,d1
00002090 0241 000E                  		andi.w	#$E,d1
00002094 6700                       		beq.s	Pal_DecGreen
00002096 5558                       		subq.w	#2,(a0)+	; decrease red value
00002098 4E75                       		rts	
0000209A                            ; ===========================================================================
0000209A                            
0000209A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000209A 3202                       		move.w	d2,d1
0000209C 0241 00E0                  		andi.w	#$E0,d1
000020A0 6700                       		beq.s	Pal_DecBlue
000020A2 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020A6 4E75                       		rts	
000020A8                            ; ===========================================================================
000020A8                            
000020A8                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020A8 3202                       		move.w	d2,d1
000020AA 0241 0E00                  		andi.w	#$E00,d1
000020AE 6700                       		beq.s	loc_1ECC
000020B0 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020B4 4E75                       		rts	
000020B6                            ; ===========================================================================
000020B6                            
000020B6                            loc_1ECC:				; XREF: Pal_DecColor
000020B6 5448                       		addq.w	#2,a0
000020B8 4E75                       		rts	
000020BA                            ; End of function Pal_DecColor
000020BA                            
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            ; Subroutine to	fill the pallet	with white (special stage)
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            
000020BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BA                            
000020BA                            
000020BA                            Pal_MakeWhite:				; XREF: SpecialStage
000020BA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020C0 7000                       		moveq	#0,d0
000020C2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020C6 1038 F626                  		move.b	($FFFFF626).w,d0
000020CA D0C0                       		adda.w	d0,a0
000020CC 323C 0EEE                  		move.w	#$EEE,d1
000020D0 1038 F627                  		move.b	($FFFFF627).w,d0
000020D4                            
000020D4                            PalWhite_Loop:
000020D4 30C1                       		move.w	d1,(a0)+
000020D6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020DA 383C 0015                  		move.w	#$15,d4
000020DE                            
000020DE                            loc_1EF4:
000020DE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020E4 6100 0000                  		bsr.w	DelayProgram
000020E8 6100                       		bsr.s	Pal_WhiteToBlack
000020EA 6100 F724                  		bsr.w	RunPLC_RAM
000020EE 51CC FFEE                  		dbf	d4,loc_1EF4
000020F2 4E75                       		rts	
000020F4                            ; End of function Pal_MakeWhite
000020F4                            
000020F4                            
000020F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F4                            
000020F4                            
000020F4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020F4 7000                       		moveq	#0,d0
000020F6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020FE 1038 F626                  		move.b	($FFFFF626).w,d0
00002102 D0C0                       		adda.w	d0,a0
00002104 D2C0                       		adda.w	d0,a1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            loc_1F20:
0000210A 6100                       		bsr.s	Pal_DecColor2
0000210C 51C8 FFFC                  		dbf	d0,loc_1F20
00002110                            
00002110 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002116 6600                       		bne.s	locret_1F4A
00002118 7000                       		moveq	#0,d0
0000211A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000211E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002122 1038 F626                  		move.b	($FFFFF626).w,d0
00002126 D0C0                       		adda.w	d0,a0
00002128 D2C0                       		adda.w	d0,a1
0000212A 1038 F627                  		move.b	($FFFFF627).w,d0
0000212E                            
0000212E                            loc_1F44:
0000212E 6100                       		bsr.s	Pal_DecColor2
00002130 51C8 FFFC                  		dbf	d0,loc_1F44
00002134                            
00002134                            locret_1F4A:
00002134 4E75                       		rts	
00002136                            ; End of function Pal_WhiteToBlack
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002136 3419                       		move.w	(a1)+,d2
00002138 3610                       		move.w	(a0),d3
0000213A B642                       		cmp.w	d2,d3
0000213C 6700                       		beq.s	loc_1F78
0000213E 3203                       		move.w	d3,d1
00002140 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002144 6500                       		bcs.s	loc_1F64
00002146 B242                       		cmp.w	d2,d1
00002148 6500                       		bcs.s	loc_1F64
0000214A 30C1                       		move.w	d1,(a0)+
0000214C 4E75                       		rts	
0000214E                            ; ===========================================================================
0000214E                            
0000214E                            loc_1F64:				; XREF: Pal_DecColor2
0000214E 3203                       		move.w	d3,d1
00002150 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002154 6500                       		bcs.s	loc_1F74
00002156 B242                       		cmp.w	d2,d1
00002158 6500                       		bcs.s	loc_1F74
0000215A 30C1                       		move.w	d1,(a0)+
0000215C 4E75                       		rts	
0000215E                            ; ===========================================================================
0000215E                            
0000215E                            loc_1F74:				; XREF: loc_1F64
0000215E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002160 4E75                       		rts	
00002162                            ; ===========================================================================
00002162                            
00002162                            loc_1F78:				; XREF: Pal_DecColor2
00002162 5448                       		addq.w	#2,a0
00002164 4E75                       		rts	
00002166                            ; End of function Pal_DecColor2
00002166                            
00002166                            ; ---------------------------------------------------------------------------
00002166                            ; Subroutine to	make a white flash when	you enter a special stage
00002166                            ; ---------------------------------------------------------------------------
00002166                            
00002166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002166                            
00002166                            
00002166                            Pal_MakeFlash:				; XREF: SpecialStage
00002166 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000216C 383C 0015                  		move.w	#$15,d4
00002170                            
00002170                            loc_1F86:
00002170 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002176 6100 0000                  		bsr.w	DelayProgram
0000217A 6100                       		bsr.s	Pal_ToWhite
0000217C 6100 F692                  		bsr.w	RunPLC_RAM
00002180 51CC FFEE                  		dbf	d4,loc_1F86
00002184 4E75                       		rts	
00002186                            ; End of function Pal_MakeFlash
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002186 7000                       		moveq	#0,d0
00002188 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000218C 1038 F626                  		move.b	($FFFFF626).w,d0
00002190 D0C0                       		adda.w	d0,a0
00002192 1038 F627                  		move.b	($FFFFF627).w,d0
00002196                            
00002196                            loc_1FAC:
00002196 6100                       		bsr.s	Pal_AddColor2
00002198 51C8 FFFC                  		dbf	d0,loc_1FAC
0000219C 7000                       		moveq	#0,d0
0000219E 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021A2 1038 F626                  		move.b	($FFFFF626).w,d0
000021A6 D0C0                       		adda.w	d0,a0
000021A8 1038 F627                  		move.b	($FFFFF627).w,d0
000021AC                            
000021AC                            loc_1FC2:
000021AC 6100                       		bsr.s	Pal_AddColor2
000021AE 51C8 FFFC                  		dbf	d0,loc_1FC2
000021B2 4E75                       		rts	
000021B4                            ; End of function Pal_ToWhite
000021B4                            
000021B4                            
000021B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B4                            
000021B4                            
000021B4                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021B4 3410                       		move.w	(a0),d2
000021B6 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021BA 6700                       		beq.s	loc_2006
000021BC 3202                       		move.w	d2,d1
000021BE 0241 000E                  		andi.w	#$E,d1
000021C2 0C41 000E                  		cmpi.w	#$E,d1
000021C6 6700                       		beq.s	loc_1FE2
000021C8 5458                       		addq.w	#2,(a0)+	; increase red value
000021CA 4E75                       		rts	
000021CC                            ; ===========================================================================
000021CC                            
000021CC                            loc_1FE2:				; XREF: Pal_AddColor2
000021CC 3202                       		move.w	d2,d1
000021CE 0241 00E0                  		andi.w	#$E0,d1
000021D2 0C41 00E0                  		cmpi.w	#$E0,d1
000021D6 6700                       		beq.s	loc_1FF4
000021D8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021DC 4E75                       		rts	
000021DE                            ; ===========================================================================
000021DE                            
000021DE                            loc_1FF4:				; XREF: loc_1FE2
000021DE 3202                       		move.w	d2,d1
000021E0 0241 0E00                  		andi.w	#$E00,d1
000021E4 0C41 0E00                  		cmpi.w	#$E00,d1
000021E8 6700                       		beq.s	loc_2006
000021EA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021EE 4E75                       		rts	
000021F0                            ; ===========================================================================
000021F0                            
000021F0                            loc_2006:				; XREF: Pal_AddColor2
000021F0 5448                       		addq.w	#2,a0
000021F2 4E75                       		rts	
000021F4                            ; End of function Pal_AddColor2
000021F4                            
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            ; Pallet cycling routine - Sega	logo
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            
000021F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F4                            
000021F4                            
000021F4                            PalCycle_Sega:				; XREF: SegaScreen
000021F4 4A38 F635                  		tst.b	($FFFFF635).w
000021F8 6600                       		bne.s	loc_206A
000021FA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021FE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002204 7205                       		moveq	#5,d1
00002206 3038 F632                  		move.w	($FFFFF632).w,d0
0000220A                            
0000220A                            loc_2020:
0000220A 6A00                       		bpl.s	loc_202A
0000220C 5448                       		addq.w	#2,a0
0000220E 5341                       		subq.w	#1,d1
00002210 5440                       		addq.w	#2,d0
00002212 60F6                       		bra.s	loc_2020
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_202A:				; XREF: PalCycle_Sega
00002214 3400                       		move.w	d0,d2
00002216 0242 001E                  		andi.w	#$1E,d2
0000221A 6600                       		bne.s	loc_2034
0000221C 5440                       		addq.w	#2,d0
0000221E                            
0000221E                            loc_2034:
0000221E 0C40 0060                  		cmpi.w	#$60,d0
00002222 6400                       		bcc.s	loc_203E
00002224 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002228                            
00002228                            loc_203E:
00002228 5440                       		addq.w	#2,d0
0000222A 51C9 FFE8                  		dbf	d1,loc_202A
0000222E 3038 F632                  		move.w	($FFFFF632).w,d0
00002232 5440                       		addq.w	#2,d0
00002234 3400                       		move.w	d0,d2
00002236 0242 001E                  		andi.w	#$1E,d2
0000223A 6600                       		bne.s	loc_2054
0000223C 5440                       		addq.w	#2,d0
0000223E                            
0000223E                            loc_2054:
0000223E 0C40 0064                  		cmpi.w	#$64,d0
00002242 6D00                       		blt.s	loc_2062
00002244 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000224A 70F4                       		moveq	#-$C,d0
0000224C                            
0000224C                            loc_2062:
0000224C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002250 7001                       		moveq	#1,d0
00002252 4E75                       		rts	
00002254                            ; ===========================================================================
00002254                            
00002254                            loc_206A:				; XREF: loc_202A
00002254 5338 F634                  		subq.b	#1,($FFFFF634).w
00002258 6A00                       		bpl.s	loc_20BC
0000225A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002260 3038 F632                  		move.w	($FFFFF632).w,d0
00002264 0640 000C                  		addi.w	#$C,d0
00002268 0C40 0030                  		cmpi.w	#$30,d0
0000226C 6500                       		bcs.s	loc_2088
0000226E 7000                       		moveq	#0,d0
00002270 4E75                       		rts	
00002272                            ; ===========================================================================
00002272                            
00002272                            loc_2088:				; XREF: loc_206A
00002272 31C0 F632                  		move.w	d0,($FFFFF632).w
00002276 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000227C 41F0 0000                  		lea	(a0,d0.w),a0
00002280 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002284 22D8                       		move.l	(a0)+,(a1)+
00002286 22D8                       		move.l	(a0)+,(a1)+
00002288 3298                       		move.w	(a0)+,(a1)
0000228A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000228E 7000                       		moveq	#0,d0
00002290 722C                       		moveq	#$2C,d1
00002292                            
00002292                            loc_20A8:
00002292 3400                       		move.w	d0,d2
00002294 0242 001E                  		andi.w	#$1E,d2
00002298 6600                       		bne.s	loc_20B2
0000229A 5440                       		addq.w	#2,d0
0000229C                            
0000229C                            loc_20B2:
0000229C 3390 0000                  		move.w	(a0),(a1,d0.w)
000022A0 5440                       		addq.w	#2,d0
000022A2 51C9 FFEE                  		dbf	d1,loc_20A8
000022A6                            
000022A6                            loc_20BC:
000022A6 7001                       		moveq	#1,d0
000022A8 4E75                       		rts	
000022AA                            ; End of function PalCycle_Sega
000022AA                            
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000022B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000022E6                            
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            ; Subroutines to load pallets
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            
000022E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E6                            
000022E6                            
000022E6                            PalLoad1:
000022E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EC E748                       		lsl.w	#3,d0
000022EE D2C0                       		adda.w	d0,a1
000022F0 2459                       		movea.l	(a1)+,a2
000022F2 3659                       		movea.w	(a1)+,a3
000022F4 D6FC 0080                  		adda.w	#$80,a3
000022F8 3E19                       		move.w	(a1)+,d7
000022FA                            
000022FA                            loc_2110:
000022FA 26DA                       		move.l	(a2)+,(a3)+
000022FC 51CF FFFC                  		dbf	d7,loc_2110
00002300 4E75                       		rts	
00002302                            ; End of function PalLoad1
00002302                            
00002302                            
00002302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002302                            
00002302                            
00002302                            PalLoad2:
00002302 43F9 0000 0000             		lea	(PalPointers).l,a1
00002308 E748                       		lsl.w	#3,d0
0000230A D2C0                       		adda.w	d0,a1
0000230C 2459                       		movea.l	(a1)+,a2
0000230E 3659                       		movea.w	(a1)+,a3
00002310 3E19                       		move.w	(a1)+,d7
00002312                            
00002312                            loc_2128:
00002312 26DA                       		move.l	(a2)+,(a3)+
00002314 51CF FFFC                  		dbf	d7,loc_2128
00002318 4E75                       		rts	
0000231A                            ; End of function PalLoad2
0000231A                            
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            ; Underwater pallet loading subroutine
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            
0000231A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231A                            
0000231A                            
0000231A                            PalLoad3_Water:
0000231A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002320 E748                       		lsl.w	#3,d0
00002322 D2C0                       		adda.w	d0,a1
00002324 2459                       		movea.l	(a1)+,a2
00002326 3659                       		movea.w	(a1)+,a3
00002328 96FC 0080                  		suba.w	#$80,a3
0000232C 3E19                       		move.w	(a1)+,d7
0000232E                            
0000232E                            loc_2144:
0000232E 26DA                       		move.l	(a2)+,(a3)+
00002330 51CF FFFC                  		dbf	d7,loc_2144
00002334 4E75                       		rts	
00002336                            ; End of function PalLoad3_Water
00002336                            
00002336                            
00002336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002336                            
00002336                            
00002336                            PalLoad4_Water:
00002336 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233C E748                       		lsl.w	#3,d0
0000233E D2C0                       		adda.w	d0,a1
00002340 2459                       		movea.l	(a1)+,a2
00002342 3659                       		movea.w	(a1)+,a3
00002344 96FC 0100                  		suba.w	#$100,a3
00002348 3E19                       		move.w	(a1)+,d7
0000234A                            
0000234A                            loc_2160:
0000234A 26DA                       		move.l	(a2)+,(a3)+
0000234C 51CF FFFC                  		dbf	d7,loc_2160
00002350 4E75                       		rts	
00002352                            ; End of function PalLoad4_Water
00002352                            
00002352                            ; ===========================================================================
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352                            PalPointers:
00002352                            	include "_inc\Pallet pointers.asm"
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002356 FB00                       	dc.w $FB00		; RAM address
00002358 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000235A 0000 0000                  	dc.l Pal_Title
0000235E FB00                       	dc.w $FB00
00002360 001F                       	dc.w $1F
00002362 0000 0000                  	dc.l Pal_LevelSel
00002366 FB00                       	dc.w $FB00
00002368 001F                       	dc.w $1F
0000236A 0000 0000                  	dc.l Pal_Sonic
0000236E FB00                       	dc.w $FB00
00002370 0007                       	dc.w 7
00002372 0000 0000                  	dc.l Pal_GHZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_LZ
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_MZ
00002386 FB20                       	dc.w $FB20
00002388 0017                       	dc.w $17
0000238A 0000 0000                  	dc.l Pal_SLZ
0000238E FB20                       	dc.w $FB20
00002390 0017                       	dc.w $17
00002392 0000 0000                  	dc.l Pal_SYZ
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_SBZ1
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_Special
000023A6 FB00                       	dc.w $FB00
000023A8 001F                       	dc.w $1F
000023AA 0000 0000                  	dc.l Pal_LZWater
000023AE FB00                       	dc.w $FB00
000023B0 001F                       	dc.w $1F
000023B2 0000 0000                  	dc.l Pal_SBZ3
000023B6 FB20                       	dc.w $FB20
000023B8 0017                       	dc.w $17
000023BA 0000 0000                  	dc.l Pal_SBZ3Water
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_SBZ2
000023C6 FB20                       	dc.w $FB20
000023C8 0017                       	dc.w $17
000023CA 0000 0000                  	dc.l Pal_LZSonWater
000023CE FB00                       	dc.w $FB00
000023D0 0007                       	dc.w 7
000023D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000023D6 FB00                       	dc.w $FB00
000023D8 0007                       	dc.w 7
000023DA 0000 0000                  	dc.l Pal_SpeResult
000023DE FB00                       	dc.w $FB00
000023E0 001F                       	dc.w $1F
000023E2 0000 0000                  	dc.l Pal_SpeContinue
000023E6 FB00                       	dc.w $FB00
000023E8 000F                       	dc.w $F
000023EA 0000 0000                  	dc.l Pal_Ending
000023EE FB00                       	dc.w $FB00
000023F0 001F                       	dc.w $1F
000023F2 0000 0000                  	dc.l Pal_Idiot
000023F6 FB20                       	dc.w $FB20
000023F8 0007                       	dc.w 7
000023FA 0000 0000                  	dc.l Pal_Gronic
000023FE FB00                       	dc.w $FB00
00002400 0007                       	dc.w 7
00002402 0000 0000                  	dc.l Pal_LZGroWater
00002406 FB00                       	dc.w $FB00
00002408 0007                       	dc.w 7
0000240A 0000 0000                  	dc.l Pal_SBZ3GroWat
0000240E FB00                       	dc.w $FB00
00002410 0007                       	dc.w 7
00002410 0007                       	dc.w 7
00002412                            
00002412                            ; ---------------------------------------------------------------------------
00002412                            ; Pallet data
00002412                            ; ---------------------------------------------------------------------------
00002412                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002492                            Pal_Title:	incbin	pallet\title.bin
00002512                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002592                            Pal_Sonic:	incbin	pallet\sonic.bin
000025B2                            Pal_GHZ:	incbin	pallet\ghz.bin
00002612                            Pal_LZ:		incbin	pallet\lz.bin
00002672                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026F2                            Pal_MZ:		incbin	pallet\mz.bin
00002752                            Pal_SLZ:	incbin	pallet\slz.bin
000027B2                            Pal_SYZ:	incbin	pallet\syz.bin
00002812                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002872                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028D2                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002952                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029B2                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A32                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A52                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A72                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002AF2                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B32                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BB2                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BD2                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002BF2                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C12                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C32                            
00002C32                            ; ---------------------------------------------------------------------------
00002C32                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002C32                            ; ---------------------------------------------------------------------------
00002C32                            
00002C32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C32                            
00002C32                            
00002C32                            DelayProgram:				; XREF: PauseGame
00002C32 46FC 2300                  		move	#$2300,sr
00002C36                            
00002C36                            loc_29AC:
00002C36 4A38 F62A                  		tst.b	($FFFFF62A).w
00002C3A 66FA                       		bne.s	loc_29AC
00002C3C 4E75                       		rts	
00002C3E                            ; End of function DelayProgram
00002C3E                            
00002C3E                            ; ---------------------------------------------------------------------------
00002C3E                            ; Subroutine to	generate a pseudo-random number	in d0
00002C3E                            ; ---------------------------------------------------------------------------
00002C3E                            
00002C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C3E                            
00002C3E                            
00002C3E                            RandomNumber:
00002C3E 2238 F636                  		move.l	($FFFFF636).w,d1
00002C42 6600                       		bne.s	loc_29C0
00002C44 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C4A                            
00002C4A                            loc_29C0:
00002C4A 2001                       		move.l	d1,d0
00002C4C E581                       		asl.l	#2,d1
00002C4E D280                       		add.l	d0,d1
00002C50 E781                       		asl.l	#3,d1
00002C52 D280                       		add.l	d0,d1
00002C54 3001                       		move.w	d1,d0
00002C56 4841                       		swap	d1
00002C58 D041                       		add.w	d1,d0
00002C5A 3200                       		move.w	d0,d1
00002C5C 4841                       		swap	d1
00002C5E 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C62 4E75                       		rts	
00002C64                            ; End of function RandomNumber
00002C64                            
00002C64                            
00002C64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C64                            
00002C64                            
00002C64                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C64 0240 00FF                  		andi.w	#$FF,d0
00002C68 D040                       		add.w	d0,d0
00002C6A 0640 0080                  		addi.w	#$80,d0
00002C6E 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C72 0440 0080                  		subi.w	#$80,d0
00002C76 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C7A 4E75                       		rts	
00002C7C                            ; End of function CalcSine
00002C7C                            
00002C7C                            ; ===========================================================================
00002C7C                            
00002C7C                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EFC                            
00002EFC                            ; ===========================================================================
00002EFC 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F00 3200                       		move.w	d0,d1
00002F02 4841                       		swap	d1
00002F04 7000                       		moveq	#0,d0
00002F06 3200                       		move.w	d0,d1
00002F08 7407                       		moveq	#7,d2
00002F0A                            
00002F0A                            loc_2C80:
00002F0A E599                       		rol.l	#2,d1
00002F0C D040                       		add.w	d0,d0
00002F0E 5240                       		addq.w	#1,d0
00002F10 9240                       		sub.w	d0,d1
00002F12 6400                       		bcc.s	loc_2C9A
00002F14 D240                       		add.w	d0,d1
00002F16 5340                       		subq.w	#1,d0
00002F18 51CA FFF0                  		dbf	d2,loc_2C80
00002F1C E248                       		lsr.w	#1,d0
00002F1E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F22 4E75                       		rts	
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2C9A:
00002F24 5240                       		addq.w	#1,d0
00002F26 51CA FFE2                  		dbf	d2,loc_2C80
00002F2A E248                       		lsr.w	#1,d0
00002F2C 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F30 4E75                       		rts	
00002F32                            
00002F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F32                            
00002F32                            
00002F32                            CalcAngle:
00002F32 48E7 1800                  		movem.l	d3-d4,-(sp)
00002F36 7600                       		moveq	#0,d3
00002F38 7800                       		moveq	#0,d4
00002F3A 3601                       		move.w	d1,d3
00002F3C 3802                       		move.w	d2,d4
00002F3E 8843                       		or.w	d3,d4
00002F40 6700                       		beq.s	loc_2D04
00002F42 3802                       		move.w	d2,d4
00002F44 4A43                       		tst.w	d3
00002F46 6A00 0000                  		bpl.w	loc_2CC2
00002F4A 4443                       		neg.w	d3
00002F4C                            
00002F4C                            loc_2CC2:
00002F4C 4A44                       		tst.w	d4
00002F4E 6A00 0000                  		bpl.w	loc_2CCA
00002F52 4444                       		neg.w	d4
00002F54                            
00002F54                            loc_2CCA:
00002F54 B843                       		cmp.w	d3,d4
00002F56 6400 0000                  		bcc.w	loc_2CDC
00002F5A E18C                       		lsl.l	#8,d4
00002F5C 88C3                       		divu.w	d3,d4
00002F5E 7000                       		moveq	#0,d0
00002F60 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F64 6000                       		bra.s	loc_2CE6
00002F66                            ; ===========================================================================
00002F66                            
00002F66                            loc_2CDC:				; XREF: CalcAngle
00002F66 E18B                       		lsl.l	#8,d3
00002F68 86C4                       		divu.w	d4,d3
00002F6A 7040                       		moveq	#$40,d0
00002F6C 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F70                            
00002F70                            loc_2CE6:
00002F70 4A41                       		tst.w	d1
00002F72 6A00 0000                  		bpl.w	loc_2CF2
00002F76 4440                       		neg.w	d0
00002F78 0640 0080                  		addi.w	#$80,d0
00002F7C                            
00002F7C                            loc_2CF2:
00002F7C 4A42                       		tst.w	d2
00002F7E 6A00 0000                  		bpl.w	loc_2CFE
00002F82 4440                       		neg.w	d0
00002F84 0640 0100                  		addi.w	#$100,d0
00002F88                            
00002F88                            loc_2CFE:
00002F88 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F8C 4E75                       		rts	
00002F8E                            ; ===========================================================================
00002F8E                            
00002F8E                            loc_2D04:				; XREF: CalcAngle
00002F8E 303C 0040                  		move.w	#$40,d0
00002F92 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F96 4E75                       		rts	
00002F98                            ; End of function CalcAngle
00002F98                            
00002F98                            ; ===========================================================================
00002F98                            
00002F98                            Angle_Data:	incbin	misc\angles.bin
0000309A                            
0000309A                            ; ===========================================================================
0000309A                            
0000309A                            ; ---------------------------------------------------------------------------
0000309A                            ; Sega screen
0000309A                            ; ---------------------------------------------------------------------------
0000309A                            
0000309A                            SegaScreen:				; XREF: GameModeArray
0000309A 103C 00E4                  		move.b	#$E4,d0
0000309E 6100 E520                  		bsr.w	PlaySound_Special ; stop music
000030A2 6100 E75E                  		bsr.w	ClearPLC
000030A6 6100 EF94                  		bsr.w	Pal_FadeFrom
000030AA 4DF9 00C0 0004             		lea	($C00004).l,a6
000030B0 3CBC 8004                  		move.w	#$8004,(a6)
000030B4 3CBC 8230                  		move.w	#$8230,(a6)
000030B8 3CBC 8407                  		move.w	#$8407,(a6)
000030BC 3CBC 8700                  		move.w	#$8700,(a6)
000030C0 3CBC 8B00                  		move.w	#$8B00,(a6)
000030C4 4238 F64E                  		clr.b	($FFFFF64E).w
000030C8 46FC 2700                  		move	#$2700,sr
000030CC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000030D0 0200 00BF                  		andi.b	#$BF,d0
000030D4 33C0 00C0 0004             		move.w	d0,($C00004).l
000030DA 6100 E40C                  		bsr.w	ClearScreen
000030DE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030E8 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030EE 6100 E574                  		bsr.w	NemDec
000030F2 43F9 00FF 0000             		lea	($FF0000).l,a1
000030F8 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030FE 303C 0000                  		move.w	#0,d0
00003102 6100 E83E                  		bsr.w	EniDec
00003106 43F9 00FF 0000             		lea	($FF0000).l,a1
0000310C 203C 6510 0003             		move.l	#$65100003,d0
00003112 7217                       		moveq	#$17,d1
00003114 7407                       		moveq	#7,d2
00003116 6100 E52C                  		bsr.w	ShowVDPGraphics
0000311A 43F9 00FF 0180             		lea	($FF0180).l,a1
00003120 203C 4000 0003             		move.l	#$40000003,d0
00003126 7227                       		moveq	#$27,d1
00003128 741B                       		moveq	#$1B,d2
0000312A 6100 E518                  		bsr.w	ShowVDPGraphics
0000312E 7000                       		moveq	#0,d0
00003130 6100 F1D0                  		bsr.w	PalLoad2	; load Sega logo pallet
00003134 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000313A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003140 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003146 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000314C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003150 0000 0040                  		ori.b	#$40,d0
00003154 33C0 00C0 0004             		move.w	d0,($C00004).l
0000315A                            
0000315A                            Sega_WaitPallet:
0000315A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003160 6100 FAD0                  		bsr.w	DelayProgram
00003164 6100 F08E                  		bsr.w	PalCycle_Sega
00003168 66F0                       		bne.s	Sega_WaitPallet
0000316A                            
0000316A 103C 00E1                  		move.b	#$E1,d0
0000316E 6100 E450                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003172 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003178 6100 FAB8                  		bsr.w	DelayProgram
0000317C 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003182                            
00003182                            Sega_WaitEnd:
00003182 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003188 6100 FAA8                  		bsr.w	DelayProgram
0000318C 4A78 F614                  		tst.w	($FFFFF614).w
00003190 6700                       		beq.s	Sega_GotoTitle
00003192 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003198 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000319A                            
0000319A                            Sega_GotoTitle:
0000319A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000031A0 4E75                       		rts	
000031A2                            ; ===========================================================================
000031A2                            
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            ; Title	screen
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            
000031A2                            TitleScreen:				; XREF: GameModeArray
000031A2 103C 00E4                  		move.b	#$E4,d0
000031A6 6100 E418                  		bsr.w	PlaySound_Special ; stop music
000031AA 6100 E656                  		bsr.w	ClearPLC
000031AE 6100 EE8C                  		bsr.w	Pal_FadeFrom
000031B2 46FC 2700                  		move	#$2700,sr
000031B6 6100 E3BE                  		bsr.w	SoundDriverLoad
000031BA 4DF9 00C0 0004             		lea	($C00004).l,a6
000031C0 3CBC 8004                  		move.w	#$8004,(a6)
000031C4 3CBC 8230                  		move.w	#$8230,(a6)
000031C8 3CBC 8407                  		move.w	#$8407,(a6)
000031CC 3CBC 9001                  		move.w	#$9001,(a6)
000031D0 3CBC 9200                  		move.w	#$9200,(a6)
000031D4 3CBC 8B03                  		move.w	#$8B03,(a6)
000031D8 3CBC 8720                  		move.w	#$8720,(a6)
000031DC 4238 F64E                  		clr.b	($FFFFF64E).w
000031E0 6100 E306                  		bsr.w	ClearScreen
000031E4 43F8 D000                  		lea	($FFFFD000).w,a1
000031E8 7000                       		moveq	#0,d0
000031EA 323C 07FF                  		move.w	#$7FF,d1
000031EE                            
000031EE                            Title_ClrObjRam:
000031EE 22C0                       		move.l	d0,(a1)+
000031F0 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031F4                            
000031F4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031FE 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003204 6100 E45E                  		bsr.w	NemDec
00003208 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003212 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003218 6100 E44A                  		bsr.w	NemDec
0000321C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003222 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003228 303C 0000                  		move.w	#0,d0
0000322C 6100 E714                  		bsr.w	EniDec
00003230 43F9 00FF 0000             		lea	($FF0000).l,a1
00003236 203C 4000 0003             		move.l	#$40000003,d0
0000323C 7227                       		moveq	#$27,d1
0000323E 741B                       		moveq	#$1B,d2
00003240 6100 E402                  		bsr.w	ShowVDPGraphics
00003244 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003248 7000                       		moveq	#0,d0
0000324A 323C 001F                  		move.w	#$1F,d1
0000324E                            
0000324E                            Title_ClrPallet:
0000324E 22C0                       		move.l	d0,(a1)+
00003250 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003254                            
00003254 7003                       		moveq	#3,d0		; load Sonic's pallet
00003256 6100 F08E                  		bsr.w	PalLoad1
0000325A 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003260 4EB9 0000 0000             		jsr	ObjectsLoad
00003266 4EB9 0000 0000             		jsr	BuildSprites
0000326C 6100 ED28                  		bsr.w	Pal_FadeTo
00003270 46FC 2700                  		move	#$2700,sr
00003274 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000327E 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003284 6100 E3DE                  		bsr.w	NemDec
00003288 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003292 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003298 6100 E3CA                  		bsr.w	NemDec
0000329C 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000032A6 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000032AC 6100 E3B6                  		bsr.w	NemDec
000032B0 4DF9 00C0 0000             		lea	($C00000).l,a6
000032B6 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000032BE 4BF9 0000 05F4             		lea	(Art_Text).l,a5
000032C4 323C 0BB6                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000032C8                            
000032C8                            Title_LoadText:
000032C8 2C9D                       		move.l	(a5)+,(a6)
000032CA 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000032CE                            
000032CE 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000032D4 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000032DA 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000032E0 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000032E6 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000032EC 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000032F2 6100 0000                  		bsr.w	LevelSizeLoad
000032F6 6100 0000                  		bsr.w	DeformBgLayer
000032FA 43F8 B000                  		lea	($FFFFB000).w,a1
000032FE 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003304 303C 0000                  		move.w	#0,d0
00003308 6100 E638                  		bsr.w	EniDec
0000330C 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003312 43F9 00FF 0000             		lea	($FF0000).l,a1
00003318 6100 E7A6                  		bsr.w	KosDec
0000331C 6100 0000                  		bsr.w	LevelLayoutLoad
00003320 6100 ED1A                  		bsr.w	Pal_FadeFrom
00003324 46FC 2700                  		move	#$2700,sr
00003328 6100 E1BE                  		bsr.w	ClearScreen
0000332C 4BF9 00C0 0004             		lea	($C00004).l,a5
00003332 4DF9 00C0 0000             		lea	($C00000).l,a6
00003338 47F8 F708                  		lea	($FFFFF708).w,a3
0000333C 49F8 A440                  		lea	($FFFFA440).w,a4
00003340 343C 6000                  		move.w	#$6000,d2
00003344 6100 0000                  		bsr.w	LoadTilesFromStart2
00003348 43F9 00FF 0000             		lea	($FF0000).l,a1
0000334E 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003354 303C 0000                  		move.w	#0,d0
00003358 6100 E5E8                  		bsr.w	EniDec
0000335C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003362 203C 4206 0003             		move.l	#$42060003,d0
00003368 7221                       		moveq	#$21,d1
0000336A 7415                       		moveq	#$15,d2
0000336C 6100 E2D6                  		bsr.w	ShowVDPGraphics
00003370 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000337A 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003380 6100 E2E2                  		bsr.w	NemDec
00003384 7001                       		moveq	#1,d0		; load title screen pallet
00003386 6100 EF5E                  		bsr.w	PalLoad1
0000338A 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000338E 6100 E230                  		bsr.w	PlaySound_Special
00003392 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003398 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000339E 43F8 D080                  		lea	($FFFFD080).w,a1
000033A2 7000                       		moveq	#0,d0
000033A4 323C 0007                  		move.w	#7,d1
000033A8                            
000033A8                            Title_ClrObjRam2:
000033A8 22C0                       		move.l	d0,(a1)+
000033AA 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000033AE                            
000033AE 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000033B4 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000033BA 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000033C0 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000033C6 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000033CC 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000033D2 4EB9 0000 0000             		jsr	ObjectsLoad
000033D8 6100 0000                  		bsr.w	DeformBgLayer
000033DC 4EB9 0000 0000             		jsr	BuildSprites
000033E2 7000                       		moveq	#0,d0
000033E4 6100 E3F0                  		bsr.w	LoadPLC2
000033E8 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000033EE 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000033F4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000033F8 0000 0040                  		ori.b	#$40,d0
000033FC 33C0 00C0 0004             		move.w	d0,($C00004).l
00003402 6100 EB92                  		bsr.w	Pal_FadeTo
00003406                            
00003406                            loc_317C:
00003406 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000340C 6100 F824                  		bsr.w	DelayProgram
00003410 4EB9 0000 0000             		jsr	ObjectsLoad
00003416 6100 0000                  		bsr.w	DeformBgLayer
0000341A 4EB9 0000 0000             		jsr	BuildSprites
00003420 6100 E75E                  		bsr.w	PalCycle_Title
00003424 6100 E3EA                  		bsr.w	RunPLC_RAM
00003428 3038 D008                  		move.w	($FFFFD008).w,d0
0000342C 5440                       		addq.w	#2,d0
0000342E 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003432 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003436 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003438 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000343E 4E75                       		rts	
00003440                            ; ===========================================================================
00003440                            
00003440                            Title_ChkRegion:
00003440 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003444 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003446 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000344C 6000                       		bra.s	Title_EnterCheat
0000344E                            ; ===========================================================================
0000344E                            
0000344E                            Title_RegionJ:				; XREF: Title_ChkRegion
0000344E 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003454                            
00003454                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003454 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003458 D0C0                       		adda.w	d0,a0
0000345A 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000345E 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003462 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003464 6600                       		bne.s	loc_3210	; if not, branch
00003466 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
0000346A 4A00                       		tst.b	d0
0000346C 6600                       		bne.s	Title_CountC
0000346E 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003472 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003476 E249                       		lsr.w	#1,d1
00003478 0241 0003                  		andi.w	#3,d1
0000347C 6700                       		beq.s	Title_PlayRing
0000347E 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003482 6A00                       		bpl.s	Title_PlayRing
00003484 7201                       		moveq	#1,d1
00003486 1181 1001                  		move.b	d1,1(a0,d1.w)
0000348A                            
0000348A                            Title_PlayRing:
0000348A 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003490 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003494 6100 E12A                  		bsr.w	PlaySound_Special
00003498 6000                       		bra.s	Title_CountC
0000349A                            ; ===========================================================================
0000349A                            
0000349A                            loc_3210:				; XREF: Title_EnterCheat
0000349A 4A00                       		tst.b	d0
0000349C 6700                       		beq.s	Title_CountC
0000349E 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000034A4 6700                       		beq.s	Title_CountC
000034A6 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000034AC                            
000034AC                            Title_CountC:
000034AC 1038 F605                  		move.b	($FFFFF605).w,d0
000034B0 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000034B4 6700                       		beq.s	loc_3230	; if not, branch
000034B6 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000034BA                            
000034BA                            loc_3230:
000034BA 4A78 F614                  		tst.w	($FFFFF614).w
000034BE 6700 0000                  		beq.w	Demo
000034C2                            		; (temporary until we have an actual options screen)
000034C2 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000034C8 6700                       		beq.s	@notc
000034CA                            
000034CA 0A38 0001 FFE8             		eor.b	#1,(v_character) ; sonic/gronic 
000034D0 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000034D4 6100 E0EA                  		bsr.w	PlaySound_Special
000034D8                            	@notc:
000034D8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000034DE 6700 FF26                  		beq.w	loc_317C	; if not, branch
000034E2                            
000034E2                            Title_ChkLevSel:
000034E2 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000034E6 6700 0000                  		beq.w	PlayLevel	; if not, play level
000034EA 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000034F0 6700 0000                  		beq.w	PlayLevel	; if not, play level
000034F4                            		
000034F4                            		
000034F4 7002                       		moveq	#2,d0
000034F6 6100 EE0A                  		bsr.w	PalLoad2	; load level select pallet
000034FA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000034FE 7000                       		moveq	#0,d0
00003500 323C 00DF                  		move.w	#$DF,d1
00003504                            
00003504                            Title_ClrScroll:
00003504 22C0                       		move.l	d0,(a1)+
00003506 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000350A                            
0000350A 21C0 F616                  		move.l	d0,($FFFFF616).w
0000350E 46FC 2700                  		move	#$2700,sr
00003512 4DF9 00C0 0000             		lea	($C00000).l,a6
00003518 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003522 323C 03FF                  		move.w	#$3FF,d1
00003526                            
00003526                            Title_ClrVram:
00003526 2C80                       		move.l	d0,(a6)
00003528 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000352C                            
0000352C 6100 0000                  		bsr.w	LevSelTextLoad
00003530                            		
00003530                            		; sound test fix
00003530 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003534 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
0000353A                            		
0000353A 363C C65F                  		move.w	#$C680-$21,d3 ; selected
0000353E 0C46 0014                  		cmpi.w	#$14,d6
00003542 6700                       		beq.s	@issndtst
00003544 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
00003548                            	@issndtst:
00003548 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
0000354C 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003550                            		
00003550 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003554 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000355C                            		
0000355C 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003562 6700                       		beq.s	@issndtst2
00003564                            		
00003564 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
0000356A 6100 0000                  		bsr.w	CStringSlop
0000356E 6000                       		bra.s	LevelSelect
00003570                            	@issndtst2:
00003570 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003576 6100 0000                  		bsr.w	CStringSlop
0000357A                            ; ---------------------------------------------------------------------------
0000357A                            ; Level	Select
0000357A                            ; ---------------------------------------------------------------------------
0000357A                            LevelSelect:
0000357A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003580 6100 F6B0                  		bsr.w	DelayProgram
00003584 6100 0000                  		bsr.w	LevSelControls
00003588 6100 E286                  		bsr.w	RunPLC_RAM
0000358C 4AB8 F680                  		tst.l	($FFFFF680).w
00003590 66E8                       		bne.s	LevelSelect
00003592 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003598 67E0                       		beq.s	LevelSelect	; if not, branch
0000359A 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000359E 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000035A2 6600                       		bne.s	@dont	; if not, dont blow this place up
000035A4                            			
000035A4 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
000035AA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000035B0 6100 F680                  		bsr.w	DelayProgram
000035B4                            	@dont:
000035B4 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000035B8 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000035BA                            		
000035BA 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
000035C0 67B8                       		beq.s	LevelSelect	; if not, branch
000035C2                            		
000035C2 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
000035C8 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
000035CA                            		
000035CA 1038 FF84                  		move.b	($FFFFFF84).w,d0
000035CE 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
000035D2                            		
000035D2 4EB9 0000 0000             		jsr		ShowNow_Playing
000035D8 60A0                       		bra.s	LevelSelect
000035DA                            ; ===========================================================================
000035DA                            
000035DA                            LevSel_SEGA:				; XREF: LevelSelect
000035DA 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
000035E0 4E75                       		rts	
000035E2                            ; ===========================================================================
000035E2                            
000035E2                            LevSel_Ending:				; XREF: LevelSelect
000035E2 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000035E8 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000035EE 4E75                       		rts	
000035F0                            ; ===========================================================================
000035F0                            
000035F0                            LevSel_Credits:				; XREF: LevelSelect
000035F0 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000035F6 103C 0091                  		move.b	#$91,d0
000035FA 6100 DFC4                  		bsr.w	PlaySound_Special ; play credits music
000035FE 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003604 4E75                       		rts	
00003606                            ; ===========================================================================
00003606                            
00003606                            LevSel_Level_SS:			; XREF: LevelSelect
00003606 D040                       		add.w	d0,d0
00003608 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000360C 6B00 FF6C                  		bmi.w	LevelSelect
00003610 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003614 6600                       		bne.s	LevSel_Level	; if not, branch
00003616 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000361C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003620 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003626 7000                       		moveq	#0,d0
00003628 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000362C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003630 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003634 4E75                       		rts	
00003636                            ; ===========================================================================
00003636                            
00003636                            LevSel_Level:				; XREF: LevSel_Level_SS
00003636 0240 3FFF                  		andi.w	#$3FFF,d0
0000363A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000363E                            
0000363E                            PlayLevel:				; XREF: ROM:00003246j ...
0000363E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003644 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000364A 7000                       		moveq	#0,d0
0000364C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003650 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003654 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003658 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000365C 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003660 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003664 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003668 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000366C 103C 00E0                  		move.b	#$E0,d0
00003670 6100 DF4E                  		bsr.w	PlaySound_Special ; fade out music
00003674 4E75                       		rts	
00003676                            ; ===========================================================================
00003676                            ; ---------------------------------------------------------------------------
00003676                            ; Level	select - level pointers
00003676                            ; ---------------------------------------------------------------------------
00003676                            LSelectPointers:
00003676                            		incbin	misc\ls_point.bin
000036A0                            		even
000036A0                            ; ---------------------------------------------------------------------------
000036A0                            ; Level	select codes
000036A0                            ; ---------------------------------------------------------------------------
000036A0                            LevelSelectCode_J:
000036A0                            		incbin	misc\ls_jcode.bin
000036A6                            		even
000036A6                            
000036A6                            LevelSelectCode_US:
000036A6                            		incbin	misc\ls_ucode.bin
000036AC                            		even
000036AC                            ; ===========================================================================
000036AC                            
000036AC                            ; ---------------------------------------------------------------------------
000036AC                            ; Demo mode
000036AC                            ; ---------------------------------------------------------------------------
000036AC                            
000036AC                            Demo:					; XREF: TitleScreen
000036AC 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000036B2                            
000036B2                            loc_33B6:				; XREF: loc_33E4
000036B2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036B8 6100 F578                  		bsr.w	DelayProgram
000036BC 6100 0000                  		bsr.w	DeformBgLayer
000036C0 6100 E49E                  		bsr.w	PalCycle_Load
000036C4 6100 E14A                  		bsr.w	RunPLC_RAM
000036C8 3038 D008                  		move.w	($FFFFD008).w,d0
000036CC 5440                       		addq.w	#2,d0
000036CE 31C0 D008                  		move.w	d0,($FFFFD008).w
000036D2 0C40 1C00                  		cmpi.w	#$1C00,d0
000036D6 6500                       		bcs.s	loc_33E4
000036D8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000036DE 4E75                       		rts	
000036E0                            ; ===========================================================================
000036E0                            
000036E0                            loc_33E4:				; XREF: Demo
000036E0 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000036E6 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
000036EA 4A78 F614                  		tst.w	($FFFFF614).w
000036EE 6600 FFC2                  		bne.w	loc_33B6
000036F2 103C 00E0                  		move.b	#$E0,d0
000036F6 6100 DEC8                  		bsr.w	PlaySound_Special ; fade out music
000036FA 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000036FE 0240 0007                  		andi.w	#7,d0
00003702 D040                       		add.w	d0,d0
00003704 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003708 31C0 FE10                  		move.w	d0,($FFFFFE10).w
0000370C 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003710 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003716 6500                       		bcs.s	loc_3422	; if yes, branch
00003718 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
0000371E                            
0000371E                            loc_3422:
0000371E 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003724 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000372A 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000372E 6600                       		bne.s	Demo_Level	; if not, branch
00003730 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003736 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000373A 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
0000373E                            
0000373E                            Demo_Level:
0000373E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003744 7000                       		moveq	#0,d0
00003746 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000374A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000374E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003752 4E75                       		rts	
00003754                            ; ===========================================================================
00003754                            ; ---------------------------------------------------------------------------
00003754                            ; Levels used in demos
00003754                            ; ---------------------------------------------------------------------------
00003754                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000375C                            		even
0000375C                            
0000375C                            ; ---------------------------------------------------------------------------
0000375C                            ; Subroutine to	change what you're selecting in the level select
0000375C                            ; ---------------------------------------------------------------------------
0000375C                            
0000375C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000375C                            
0000375C                            
0000375C                            LevSelControls:				; XREF: LevelSelect
0000375C 1238 F605                  		move.b	($FFFFF605).w,d1
00003760 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003764 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003766 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000376A 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
0000376E                            
0000376E                            LevSel_UpDown:
0000376E 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003774 1238 F604                  		move.b	($FFFFF604).w,d1
00003778 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000377C 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
00003780 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003784 0801 0000                  		btst	#0,d1		; is up	pressed?
00003788 6700                       		beq.s	LevSel_Down	; if not, branch
0000378A 5346                       		subq.w	#1,d6		; move up 1 selection
0000378C 6400                       		bcc.s	LevSel_Down
0000378E 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003790                            
00003790                            LevSel_Down:
00003790 0801 0001                  		btst	#1,d1		; is down pressed?
00003794 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003796 5246                       		addq.w	#1,d6		; move down 1 selection
00003798 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000379C 6500                       		bcs.s	LevSel_Refresh
0000379E 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000037A0 6000                       		bra.s	LevSel_Refresh
000037A2                            		
000037A2                            LevSel_LR:
000037A2 0801 0002                  		btst	#2,d1		; is left pressed?
000037A6 6700                       		beq.s	LevSel_Right	; if not, branch
000037A8 0446 0000                  		sub.w	#lsrow2size,d6
000037AC 64E2                       		bcc.s	LevSel_Down
000037AE 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000037B2                            LevSel_Right:
000037B2 0801 0003                  		btst	#3,d1		; is right pressed?
000037B6 6700                       		beq.s	LevSel_Refresh	; if not, branch
000037B8 0646 0000                  		add.w	#lsrow1size,d6
000037BC 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000037C0 6500                       		bcs.s	LevSel_Refresh
000037C2 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
000037C6                            ; ===========================================================================
000037C6                            LevSel_Refresh:
000037C6                            		
000037C6 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037CA 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000037CE                            		
000037CE 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000037D4 6600                       		bne.s	@exitsndtest
000037D6                            		
000037D6 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000037DA 43F9 0000 0000             		lea	(Controls_Normal).l,a1
000037E0 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000037E8 6100 0000                  		bsr.w	CStringSlop
000037EC                            	@exitsndtest:
000037EC                            	
000037EC 363C C65F                  		move.w	#$C680-$21,d3
000037F0 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
000037F4 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000037F8                            		
000037F8 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
000037FE 6600                       		bne.s	@entersndtest
00003800                            		
00003800 363C C65F                  		move.w	#$C680-$21,d3
00003804 43F9 0000 0000             		lea	(Controls_SND).l,a1
0000380A 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003812 6100 0000                  		bsr.w	CStringSlop
00003816                            	@entersndtest:
00003816 4E75                       		rts	
00003818                            		
00003818                            LevSel_SndTest:				; XREF: LevSelControls
00003818 1238 F605                  		move.b	($FFFFF605).w,d1
0000381C 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003820 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003822 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
00003828 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
0000382C                            		
0000382C 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003830 0801 0002                  		btst	#2,d1		; is left pressed?
00003834 6700                       		beq.s	SndTest_Right	; if not, branch
00003836 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
00003838                            		; no need the fact it's a byte does the trick
00003838                            
00003838                            SndTest_Right:
00003838 0801 0003                  		btst	#3,d1		; is right pressed?
0000383C 6700                       		beq.s	SndTest_A	; if not, branch
0000383E 5200                       		addq.b	#1,d0		; add 1	to sound test
00003840                            		; same here
00003840                            		
00003840                            SndTest_A:
00003840 0801 0006                  		btst	#6,d1		; is A pressed?
00003844 6700                       		beq.s	SndTest_B	; if not, branch
00003846 5100                       		subq.b	#8,d0		; subtract $10 to sound test
00003848 5100                       		subq.b	#8,d0
0000384A                            		
0000384A                            SndTest_B:
0000384A 0801 0004                  		btst	#4,d1		; is B pressed?
0000384E 6700                       		beq.s	SndTest_Refresh	; if not, branch
00003850 5000                       		addq.b	#8,d0		; add $10 to sound test
00003852 5000                       		addq.b	#8,d0
00003854                            
00003854                            SndTest_Refresh:
00003854 363C C65F                  		move.w	#$C680-$21,d3
00003858 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
0000385C 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00003860                            
00003860                            LevSel_NoMove:
00003860 4E75                       		rts	
00003862                            ; End of function LevSelControls
00003862                            
00003862                            ; ---------------------------------------------------------------------------
00003862                            ; Subroutine to load level select text
00003862                            ; ---------------------------------------------------------------------------
00003862                            
00003862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003862                            
00003862                            LevSelTextLoad_loop:
00003862 2D44 0004                  		move.l	d4,4(a6)
00003866 6100 0000                  		bsr.w	LevSel_ChgLine
0000386A 0684 0080 0000             		addi.l	#$800000,d4
00003870 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
00003874 4E75                       		rts
00003876                            LevSelTextLoad:				; XREF: TitleScreen
00003876 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000387C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003882 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003886 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
0000388C                            		
0000388C 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003890 61D0                       		bsr.s	LevSelTextLoad_loop
00003892                            		
00003892                            		
00003892 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003898 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
0000389C 61C4                       		bsr.s	LevSelTextLoad_loop
0000389E 363C C65F                  		move.w	#$C680-$21,d3
000038A2                            		
000038A2                            LevSelHighlightCode:
000038A2 4DF9 00C0 0000             		lea	($C00000).l,a6
000038A8 7000                       		moveq	#0,d0
000038AA 3038 FF82                  		move.w	($FFFFFF82).w,d0
000038AE 3200                       		move.w	d0,d1
000038B0 283C 6086 0003             		move.l	#lsscrpos,d4
000038B6                            		
000038B6 0C40 0000                  		cmpi.w	#lsrow1size,d0
000038BA 6D00                       		blt.s	@notsecond
000038BC                            		
000038BC 0440 0000                  		sub.w	#lsrow1size,d0
000038C0 0684 0024 0000             		addi.l	#lsoff,d4
000038C6                            	@notsecond:
000038C6 EF48                       		lsl.w	#7,d0
000038C8 4840                       		swap	d0
000038CA D880                       		add.l	d0,d4
000038CC 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000038D2 E749                       		lsl.w	#3,d1
000038D4 D241                       		add.w	d1,d1
000038D6 D2C1                       		adda.w	d1,a1
000038D8 2D44 0004                  		move.l	d4,4(a6)
000038DC 6100 0000                  		bsr.w	LevSel_ChgLine
000038E0 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000038E6 6700                       		beq.s	LevSelSndTest
000038E8 4E75                       		rts
000038EA                            
000038EA                            LevSelSndTest:
000038EA 0643 0030                  		add.w	#$30,d3
000038EE 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
000038F8 1038 FF84                  		move.b	($FFFFFF84).w,d0
000038FC 1400                       		move.b	d0,d2
000038FE E808                       		lsr.b	#4,d0
00003900 6100 0000                  		bsr.w	LevSel_ChgSnd
00003904 1002                       		move.b	d2,d0
00003906 6100 0000                  		bsr.w	LevSel_ChgSnd
0000390A 4E75                       		rts	
0000390C                            ; End of function LevSelTextLoad
0000390C                            
0000390C                            
0000390C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000390C                            
0000390C                            
0000390C                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000390C 0240 000F                  		andi.w	#$F,d0
00003910 0C00 000A                  		cmpi.b	#$A,d0
00003914 6500                       		bcs.s	loc_3580
00003916 5E00                       		addi.b	#7,d0
00003918                            
00003918                            loc_3580:
00003918 D043                       		add.w	d3,d0
0000391A 3C80                       		move.w	d0,(a6)
0000391C 4E75                       		rts	
0000391E                            ; End of function LevSel_ChgSnd
0000391E                            
0000391E                            
0000391E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000391E                            
0000391E                            
0000391E                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000391E 740F                       		moveq	#$10-1,d2		; number of characters per line
00003920                            
00003920                            @loop:
00003920 7000                       		moveq	#0,d0
00003922 1019                       		move.b	(a1)+,d0
00003924 0C00 0020                  		cmpi.b	#$20,d0
00003928 6E00                       		bgt.s	@draw
0000392A 3CBC 0000                  		move.w	#0,(a6)
0000392E 51CA FFF0                  		dbf	d2,@loop
00003932 4E75                       		rts	
00003934                            ; ===========================================================================
00003934                            
00003934                            @draw:				; XREF: LevSel_ChgLine
00003934 D043                       		add.w	d3,d0
00003936 3C80                       		move.w	d0,(a6)
00003938 51CA FFE6                  		dbf	d2,@loop
0000393C 4E75                       		rts	
0000393E                            ; End of function LevSel_ChgLine
0000393E                            		
0000393E                            CStringSlop_draw:
0000393E D043                       		add.w	d3,d0
00003940 3C80                       		move.w	d0,(a6)
00003942                            CStringSlop:				; XREF: LevSelTextLoad
00003942 7000                       		moveq	#0,d0
00003944 1019                       		move.b	(a1)+,d0
00003946 0C00 0020                  		cmpi.b	#$20,d0
0000394A 6EF2                       		bgt.s	CStringSlop_draw
0000394C                            		
0000394C 0C00 0001                  		cmpi.b	#1,d0
00003950 6700                       		beq.s	@InsertSpaces
00003952 6500                       		blo.s	@end
00003954                            		
00003954 3CBC 0000                  		move.w	#0,(a6)
00003958 60E8                       		bra.s	CStringSlop
0000395A                            	@end:
0000395A 4E75                       		rts
0000395C                            	@InsertSpaces:
0000395C 7000                       		moveq	#0,d0
0000395E 1019                       		move.b	(a1)+,d0
00003960                            		
00003960                            	@insert:
00003960 3CBC 0000                  		move.w	#0,(a6)
00003964 51C8 FFFA                  		dbf.w	d0,@insert
00003968 60D8                       		bra.s	CStringSlop
0000396A                            ; End of function LevSel_ChgLine
0000396A                            
0000396A                            ; ===========================================================================
0000396A                            ; ---------------------------------------------------------------------------
0000396A                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
0000396A                            ; ---------------------------------------------------------------------------
0000396A                            LevelMenuText:	
0000396A 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
0000397A 2020 2020 2020 2020 2020+          dc.b    "               2"
0000398A 2020 2020 2020 2020 2020+          dc.b    "               3"
0000399A 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
000039AA 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
000039BA 2020 2020 2020 2020 2020+          dc.b    "               3"
000039CA 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
000039DA 2020 2020 2020 2020 2020+          dc.b    "               2"
000039EA 2020 2020 2020 2020 2020+          dc.b    "               3"
000039FA 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003A0A 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A1A 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A2A                            LMTSecondRow:
00003A2A 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003A3A 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003A4A 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A5A 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003A6A 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A7A 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A8A 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003A9A 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003AAA 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003ABA 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003ACA 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003ADA                            LMTSelectableEnd:
00003ADA 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003AEA                            LMTEnd:
00003AEA                            
00003AEA                            Now_Playing:
00003AEA 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003AFA                            		even
00003AFA                            NP_Track:
00003AFA 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003B02                            		even
00003B02                            NP_SFX:
00003B02 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003B0A                            		even
00003B0A                            
00003B0A                            ShowNow_Playing:
00003B0A 1C00                       		move.b	d0,d6
00003B0C 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003B10 43FA FFD8                  		lea	Now_Playing(pc),a1
00003B14 4DF9 00C0 0000             		lea		($C00000).l,a6
00003B1A 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003B22 6100 FE1E                  		bsr.w	CStringSlop
00003B26                            		
00003B26 43FA FFD2                  		lea	NP_Track(pc),a1
00003B2A 0C06 00A0                  		cmpi.b	#$A0,d6
00003B2E 6D00                       		blt.s	@track
00003B30                            		
00003B30 43FA FFD0                  		lea	NP_SFX(pc),a1
00003B34                            	@track:
00003B34 6100 FE0C                  		bsr.w	CStringSlop
00003B38                            		
00003B38 0643 0030                  		add.w	#$30,d3
00003B3C 1006                       		move.b	d6,d0
00003B3E 1400                       		move.b	d0,d2
00003B40 E808                       		lsr.b	#4,d0
00003B42 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003B46 1002                       		move.b	d2,d0
00003B48 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003B4C 4E75                       		rts	
00003B4E                            
00003B4E                            ; 1 is insert spaces btw
00003B4E                            Controls_Normal:
00003B4E 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003B5A                            		even		
00003B5A                            Controls_SND:
00003B5A 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003B80 00                         		even
00003B80                            ; ---------------------------------------------------------------------------
00003B80                            ; Music	playlist
00003B80                            ; ---------------------------------------------------------------------------
00003B80                            MusicList1:	incbin	misc\muslist1.bin
00003B88                            		even
00003B88                            MusicList2:	incbin	misc\muslist2.bin
00003B8E                            		even
00003B8E                            MusicList3:	incbin	misc\muslist3.bin
00003B94                            		even
00003B94                            MusicList4:	incbin	misc\muslist4.bin
00003B9A                            		even
00003B9A                            ; ===========================================================================
00003B9A                            
00003B9A                            ; ---------------------------------------------------------------------------
00003B9A                            ; Level
00003B9A                            ; ---------------------------------------------------------------------------
00003B9A                            
00003B9A                            Level:					; XREF: GameModeArray
00003B9A 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003BA0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003BA4 6B00                       		bmi.s	loc_37B6
00003BA6 103C 00E0                  		move.b	#$E0,d0
00003BAA 6100 DA14                  		bsr.w	PlaySound_Special ; fade out music
00003BAE                            
00003BAE                            loc_37B6:
00003BAE 6100 DC52                  		bsr.w	ClearPLC
00003BB2 6100 E488                  		bsr.w	Pal_FadeFrom
00003BB6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003BBA 6B00                       		bmi.s	Level_ClrRam
00003BBC 46FC 2700                  		move	#$2700,sr
00003BC0 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003BCA 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003BD0 6100 DA92                  		bsr.w	NemDec
00003BD4 46FC 2300                  		move	#$2300,sr
00003BD8 7000                       		moveq	#0,d0
00003BDA 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003BDE E948                       		lsl.w	#4,d0
00003BE0 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003BE6 45F2 0000                  		lea	(a2,d0.w),a2
00003BEA 7000                       		moveq	#0,d0
00003BEC 1012                       		move.b	(a2),d0
00003BEE 6700                       		beq.s	loc_37FC
00003BF0 6100 DBB2                  		bsr.w	LoadPLC		; load level patterns
00003BF4                            
00003BF4                            loc_37FC:
00003BF4 7001                       		moveq	#1,d0
00003BF6 6100 DBAC                  		bsr.w	LoadPLC		; load standard	patterns
00003BFA                            
00003BFA                            Level_ClrRam:
00003BFA 43F8 D000                  		lea	($FFFFD000).w,a1
00003BFE 7000                       		moveq	#0,d0
00003C00 323C 07FF                  		move.w	#$7FF,d1
00003C04                            
00003C04                            Level_ClrObjRam:
00003C04 22C0                       		move.l	d0,(a1)+
00003C06 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003C0A                            
00003C0A 43F8 F628                  		lea	($FFFFF628).w,a1
00003C0E 7000                       		moveq	#0,d0
00003C10 323C 0015                  		move.w	#$15,d1
00003C14                            
00003C14                            Level_ClrVars:
00003C14 22C0                       		move.l	d0,(a1)+
00003C16 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003C1A                            
00003C1A 43F8 F700                  		lea	($FFFFF700).w,a1
00003C1E 7000                       		moveq	#0,d0
00003C20 323C 003F                  		move.w	#$3F,d1
00003C24                            
00003C24                            Level_ClrVars2:
00003C24 22C0                       		move.l	d0,(a1)+
00003C26 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003C2A                            
00003C2A 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003C2E 7000                       		moveq	#0,d0
00003C30 323C 0047                  		move.w	#$47,d1
00003C34                            
00003C34                            Level_ClrVars3:
00003C34 22C0                       		move.l	d0,(a1)+
00003C36 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003C3A                            
00003C3A 46FC 2700                  		move	#$2700,sr
00003C3E 6100 D8A8                  		bsr.w	ClearScreen
00003C42 4DF9 00C0 0004             		lea	($C00004).l,a6
00003C48 3CBC 8B03                  		move.w	#$8B03,(a6)
00003C4C 3CBC 8230                  		move.w	#$8230,(a6)
00003C50 3CBC 8407                  		move.w	#$8407,(a6)
00003C54 3CBC 857C                  		move.w	#$857C,(a6)
00003C58 3CBC 9001                  		move.w	#$9001,(a6)
00003C5C 3CBC 8004                  		move.w	#$8004,(a6)
00003C60 3CBC 8720                  		move.w	#$8720,(a6)
00003C64 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003C6A 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003C6E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003C74 6600                       		bne.s	Level_LoadPal	; if not, branch
00003C76 3CBC 8014                  		move.w	#$8014,(a6)
00003C7A 7000                       		moveq	#0,d0
00003C7C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003C80 D040                       		add.w	d0,d0
00003C82 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003C88 3031 0000                  		move.w	(a1,d0.w),d0
00003C8C 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003C90 31C0 F648                  		move.w	d0,($FFFFF648).w
00003C94 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003C98 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003C9C 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003CA0 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003CA6 6000 0000                  		bra.w	Level_LoadPal
00003CAA                            Player_Palette:
00003CAA                            		; normal, lz, sbz, blank
00003CAA 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003CB2                            		
00003CB2 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003CBA                            		; add more player palettes
00003CBA                            Level_LoadPal:
00003CBA 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003CC0 46FC 2300                  		move	#$2300,sr
00003CC4                            
00003CC4 7200                       		moveq	#0,d1
00003CC6 1238 FFE8                  		move.b	(v_character),d1
00003CCA D241                       		add.w	d1,d1
00003CCC D241                       		add.w	d1,d1
00003CCE D241                       		add.w	d1,d1
00003CD0 303B 10D8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003CD4                            		
00003CD4 6100 E62C                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003CD8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003CDE 6600                       		bne.s	Level_GetBgm	; if not, branch
00003CE0 303B 10CA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003CE4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003CEA 6600                       		bne.s	Level_WaterPal	; if not, branch
00003CEC 303B 10C0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003CF0                            
00003CF0                            Level_WaterPal:
00003CF0 6100 E628                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003CF4 4A38 FE30                  		tst.b	($FFFFFE30).w
00003CF8 6700                       		beq.s	Level_GetBgm
00003CFA 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003D00                            
00003D00                            ; NineKode begins here - How to play different songs on different acts
00003D00                             
00003D00                            Level_GetBgm:
00003D00 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003D04 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003D08 7000                       		moveq	#0,d0
00003D0A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D0E                             
00003D0E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003D14 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003D16 43F9 0000 3B80             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003D1C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D1E                             
00003D1E                            Level_GetBgm2:
00003D1E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003D24 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003D26 43F9 0000 3B88             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003D2C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D2E                             
00003D2E                            Level_GetBgm3:
00003D2E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003D34 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003D36 43F9 0000 3B8E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003D3C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D3E                             
00003D3E                            Level_GetBgm4:
00003D3E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003D44 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003D46 43F9 0000 3B94             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003D4C                             
00003D4C                            Level_PlayBgm:
00003D4C 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003D50 6100 D868                  		bsr.w	PlaySound	; play music
00003D54 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003D5A                             
00003D5A                            ; NineKode ends here
00003D5A                            
00003D5A                            Level_TtlCard:
00003D5A 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003D60 6100 EED0                  		bsr.w	DelayProgram
00003D64 4EB9 0000 0000             		jsr	ObjectsLoad
00003D6A 4EB9 0000 0000             		jsr	BuildSprites
00003D70 6100 DA9E                  		bsr.w	RunPLC_RAM
00003D74 3038 D108                  		move.w	($FFFFD108).w,d0
00003D78 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003D7C 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003D7E 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003D82 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003D84 4EB9 0000 0000             		jsr	Hud_Base
00003D8A                            
00003D8A                            loc_3946:
00003D8A 7003                       		moveq	#3,d0
00003D8C 6100 E558                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003D90 6100 0000                  		bsr.w	LevelSizeLoad
00003D94 6100 0000                  		bsr.w	DeformBgLayer
00003D98 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003D9E 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003DA2 6100 0000                  		bsr.w	LoadTilesFromStart
00003DA6 4EB9 0000 0000             		jsr	FloorLog_Unk
00003DAC 6100 0000                  		bsr.w	ColIndexLoad
00003DB0 6100 0000                  		bsr.w	LZWaterEffects
00003DB4 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003DBA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DBE 6B00                       		bmi.s	Level_ChkDebug
00003DC0 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003DC6                            
00003DC6                            Level_ChkDebug:
00003DC6 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003DCA 6700                       		beq.s	Level_ChkWater	; if not, branch
00003DCC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003DD2 6700                       		beq.s	Level_ChkWater	; if not, branch
00003DD4 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003DDA                            
00003DDA                            Level_ChkWater:
00003DDA 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003DE0 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003DE6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003DEC 6600                       		bne.s	Level_LoadObj	; if not, branch
00003DEE 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003DF4 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003DFA 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003E00 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003E06                            
00003E06                            Level_LoadObj:
00003E06 4EB9 0000 0000             		jsr	ObjPosLoad
00003E0C 4EB9 0000 0000             		jsr	ObjectsLoad
00003E12 4EB9 0000 0000             		jsr	BuildSprites
00003E18 7000                       		moveq	#0,d0
00003E1A 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003E1E 6600                       		bne.s	loc_39E8	; if yes, branch
00003E20 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E24 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E28 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003E2C                            
00003E2C                            loc_39E8:
00003E2C 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003E30 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003E34 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003E38 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003E3C                            		; move.b	d0,($FFFFFE2F).w
00003E3C 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003E42 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003E46 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003E4A 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003E4E 6100 0000                  		bsr.w	OscillateNumInit
00003E52 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003E58 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003E5E 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003E64 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003E6A 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003E70 7000                       		moveq	#0,d0
00003E72 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E76 E548                       		lsl.w	#2,d0
00003E78 2271 0000                  		movea.l	(a1,d0.w),a1
00003E7C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003E80 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003E82 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003E88 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003E8C 5340                       		subq.w	#1,d0
00003E8E E548                       		lsl.w	#2,d0
00003E90 2271 0000                  		movea.l	(a1,d0.w),a1
00003E94                            
00003E94                            Level_Demo:
00003E94 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003E9A 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003E9E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003EA4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003EA8 6A00                       		bpl.s	Level_ChkWaterPal
00003EAA 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003EB0 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003EB6 6600                       		bne.s	Level_ChkWaterPal
00003EB8 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003EBE                            
00003EBE                            Level_ChkWaterPal:
00003EBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003EC4 6600                       		bne.s	Level_Delay	; if not, branch
00003EC6 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003EC8 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003ECE 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003ED0 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003ED2                            
00003ED2                            Level_WaterPal2:
00003ED2 6100 E462                  		bsr.w	PalLoad4_Water
00003ED6                            
00003ED6                            Level_Delay:
00003ED6 323C 0003                  		move.w	#3,d1
00003EDA                            
00003EDA                            Level_DelayLoop:
00003EDA 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003EE0 6100 ED50                  		bsr.w	DelayProgram
00003EE4 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003EE8                            
00003EE8 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003EEE 6100 E0AC                  		bsr.w	Pal_FadeTo2
00003EF2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003EF6 6B00                       		bmi.s	Level_ClrCardArt
00003EF8 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003EFC 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003F00 5838 D124                  		addq.b	#4,($FFFFD124).w
00003F04 5838 D164                  		addq.b	#4,($FFFFD164).w
00003F08 6000                       		bra.s	Level_StartGame
00003F0A                            ; ===========================================================================
00003F0A                            
00003F0A                            Level_ClrCardArt:
00003F0A 7002                       		moveq	#2,d0
00003F0C 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
00003F12 7000                       		moveq	#0,d0
00003F14 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F18 0640 0015                  		addi.w	#$15,d0
00003F1C 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003F22                            
00003F22                            Level_StartGame:
00003F22 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003F28                            
00003F28                            ; ---------------------------------------------------------------------------
00003F28                            ; Main level loop (when	all title card and loading sequences are finished)
00003F28                            ; ---------------------------------------------------------------------------
00003F28                            
00003F28                            Level_MainLoop:
00003F28 6100 D6A2                  		bsr.w	PauseGame
00003F2C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F32 6100 ECFE                  		bsr.w	DelayProgram
00003F36 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003F3A 6100 0000                  		bsr.w	MoveSonicInDemo
00003F3E 6100 0000                  		bsr.w	LZWaterEffects
00003F42 4EB9 0000 0000             		jsr	ObjectsLoad
00003F48 4A78 FE08                  		tst.w	($FFFFFE08).w
00003F4C 6600                       		bne.s	loc_3B10
00003F4E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003F54 6400                       		bcc.s	loc_3B14
00003F56                            
00003F56                            loc_3B10:
00003F56 6100 0000                  		bsr.w	DeformBgLayer
00003F5A                            
00003F5A                            loc_3B14:
00003F5A 4EB9 0000 0000             		jsr	BuildSprites
00003F60 4EB9 0000 0000             		jsr	ObjPosLoad
00003F66 6100 DBF8                  		bsr.w	PalCycle_Load
00003F6A 6100 D8A4                  		bsr.w	RunPLC_RAM
00003F6E 6100 0000                  		bsr.w	OscillateNumDo
00003F72 6100 0000                  		bsr.w	ChangeRingFrame
00003F76 6100 0000                  		bsr.w	SignpostArtLoad
00003F7A 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003F80 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003F82 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003F86 6600 FC12                  		bne.w	Level		; if yes, branch
00003F8A 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003F90 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003F94 4E75                       		rts	
00003F96                            ; ===========================================================================
00003F96                            
00003F96                            Level_ChkDemo:				; XREF: Level_MainLoop
00003F96 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003F9A 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003F9C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003FA0 6700                       		beq.s	Level_EndDemo	; if not, branch
00003FA2 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003FA8 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003FAC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003FB2 4E75                       		rts	
00003FB4                            ; ===========================================================================
00003FB4                            
00003FB4                            Level_EndDemo:				; XREF: Level_ChkDemo
00003FB4 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003FBA 6600                       		bne.s	loc_3B88	; if not, branch
00003FBC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003FC2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003FC6 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003FC8 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003FCE                            
00003FCE                            loc_3B88:
00003FCE 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003FD4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003FDA 4278 F794                  		clr.w	($FFFFF794).w
00003FDE                            
00003FDE                            loc_3B98:
00003FDE 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003FE4 6100 EC4C                  		bsr.w	DelayProgram
00003FE8 6100 0000                  		bsr.w	MoveSonicInDemo
00003FEC 4EB9 0000 0000             		jsr	ObjectsLoad
00003FF2 4EB9 0000 0000             		jsr	BuildSprites
00003FF8 4EB9 0000 0000             		jsr	ObjPosLoad
00003FFE 5378 F794                  		subq.w	#1,($FFFFF794).w
00004002 6A00                       		bpl.s	loc_3BC8
00004004 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000400A 6100 E050                  		bsr.w	Pal_FadeOut
0000400E                            
0000400E                            loc_3BC8:
0000400E 4A78 F614                  		tst.w	($FFFFF614).w
00004012 66CA                       		bne.s	loc_3B98
00004014 4E75                       		rts	
00004016                            ; ===========================================================================
00004016                            ; ---------------------------------------------------------------------------
00004016                            ; Subroutine to	do special water effects in Labyrinth Zone
00004016                            ; ---------------------------------------------------------------------------
00004016                            
00004016                            LZWaterEffects:				; XREF: Level
00004016 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000401C 6600                       		bne.s	locret_3C28	; if not, branch
0000401E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004024 6400                       		bcc.s	LZMoveWater
00004026 6100 0000                  		bsr.w	LZWindTunnels
0000402A 6100 0000                  		bsr.w	LZWaterSlides
0000402E 6100 0000                  		bsr.w	LZDynamicWater
00004032                            
00004032                            LZMoveWater:
00004032 4238 F64E                  		clr.b	($FFFFF64E).w
00004036 7000                       		moveq	#0,d0
00004038 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000403C E248                       		lsr.w	#1,d0
0000403E D078 F648                  		add.w	($FFFFF648).w,d0
00004042 31C0 F646                  		move.w	d0,($FFFFF646).w
00004046 3038 F646                  		move.w	($FFFFF646).w,d0
0000404A 9078 F704                  		sub.w	($FFFFF704).w,d0
0000404E 6400                       		bcc.s	loc_3C1A
00004050 4A40                       		tst.w	d0
00004052 6A00                       		bpl.s	loc_3C1A
00004054 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000405A 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00004060                            
00004060                            loc_3C1A:
00004060 0C40 00DF                  		cmpi.w	#$DF,d0
00004064 6500                       		bcs.s	loc_3C24
00004066 303C 00DF                  		move.w	#$DF,d0
0000406A                            
0000406A                            loc_3C24:
0000406A 11C0 F625                  		move.b	d0,($FFFFF625).w
0000406E                            
0000406E                            locret_3C28:
0000406E 4E75                       		rts	
00004070                            ; ===========================================================================
00004070                            ; ---------------------------------------------------------------------------
00004070                            ; Labyrinth default water heights
00004070                            ; ---------------------------------------------------------------------------
00004070                            WaterHeight:	incbin	misc\lz_heigh.bin
00004078                            		even
00004078                            ; ===========================================================================
00004078                            
00004078                            ; ---------------------------------------------------------------------------
00004078                            ; Labyrinth dynamic water routines
00004078                            ; ---------------------------------------------------------------------------
00004078                            
00004078                            LZDynamicWater:				; XREF: LZWaterEffects
00004078 7000                       		moveq	#0,d0
0000407A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000407E D040                       		add.w	d0,d0
00004080 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004084 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004088 7200                       		moveq	#0,d1
0000408A 1238 F64C                  		move.b	($FFFFF64C).w,d1
0000408E 3038 F64A                  		move.w	($FFFFF64A).w,d0
00004092 9078 F648                  		sub.w	($FFFFF648).w,d0
00004096 6700                       		beq.s	locret_3C5A
00004098 6400                       		bcc.s	loc_3C56
0000409A 4441                       		neg.w	d1
0000409C                            
0000409C                            loc_3C56:
0000409C D378 F648                  		add.w	d1,($FFFFF648).w
000040A0                            
000040A0                            locret_3C5A:
000040A0 4E75                       		rts	
000040A2                            ; ===========================================================================
000040A2 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000040A4 0000                       		dc.w DynWater_LZ2-DynWater_Index
000040A6 0000                       		dc.w DynWater_LZ3-DynWater_Index
000040A8 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000040AA                            ; ===========================================================================
000040AA                            
000040AA                            DynWater_LZ1:				; XREF: DynWater_Index
000040AA 3038 F700                  		move.w	($FFFFF700).w,d0
000040AE 1438 F64D                  		move.b	($FFFFF64D).w,d2
000040B2 6600                       		bne.s	loc_3CD0
000040B4 323C 00B8                  		move.w	#$B8,d1
000040B8 0C40 0600                  		cmpi.w	#$600,d0
000040BC 6500                       		bcs.s	loc_3CB4
000040BE 323C 0108                  		move.w	#$108,d1
000040C2 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000040C8 6500                       		bcs.s	loc_3CBA
000040CA 0C40 0C00                  		cmpi.w	#$C00,d0
000040CE 6500                       		bcs.s	loc_3CB4
000040D0 323C 0318                  		move.w	#$318,d1
000040D4 0C40 1080                  		cmpi.w	#$1080,d0
000040D8 6500                       		bcs.s	loc_3CB4
000040DA 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
000040E0 323C 05C8                  		move.w	#$5C8,d1
000040E4 0C40 1380                  		cmpi.w	#$1380,d0
000040E8 6500                       		bcs.s	loc_3CB4
000040EA 323C 03A8                  		move.w	#$3A8,d1
000040EE B278 F648                  		cmp.w	($FFFFF648).w,d1
000040F2 6600                       		bne.s	loc_3CB4
000040F4 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000040FA                            
000040FA                            loc_3CB4:
000040FA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040FE 4E75                       		rts	
00004100                            ; ===========================================================================
00004100                            
00004100                            loc_3CBA:				; XREF: DynWater_LZ1
00004100 0C40 0C80                  		cmpi.w	#$C80,d0
00004104 65F4                       		bcs.s	loc_3CB4
00004106 323C 00E8                  		move.w	#$E8,d1
0000410A 0C40 1500                  		cmpi.w	#$1500,d0
0000410E 65EA                       		bcs.s	loc_3CB4
00004110 323C 0108                  		move.w	#$108,d1
00004114 60E4                       		bra.s	loc_3CB4
00004116                            ; ===========================================================================
00004116                            
00004116                            loc_3CD0:				; XREF: DynWater_LZ1
00004116 5302                       		subq.b	#1,d2
00004118 6600                       		bne.s	locret_3CF4
0000411A 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004120 6400                       		bcc.s	locret_3CF4
00004122 323C 03A8                  		move.w	#$3A8,d1
00004126 0C40 1300                  		cmpi.w	#$1300,d0
0000412A 6500                       		bcs.s	loc_3CF0
0000412C 323C 0108                  		move.w	#$108,d1
00004130 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004136                            
00004136                            loc_3CF0:
00004136 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000413A                            
0000413A                            locret_3CF4:
0000413A 4E75                       		rts	
0000413C                            ; ===========================================================================
0000413C                            
0000413C                            DynWater_LZ2:				; XREF: DynWater_Index
0000413C 3038 F700                  		move.w	($FFFFF700).w,d0
00004140 323C 0328                  		move.w	#$328,d1
00004144 0C40 0500                  		cmpi.w	#$500,d0
00004148 6500                       		bcs.s	loc_3D12
0000414A 323C 03C8                  		move.w	#$3C8,d1
0000414E 0C40 0B00                  		cmpi.w	#$B00,d0
00004152 6500                       		bcs.s	loc_3D12
00004154 323C 0428                  		move.w	#$428,d1
00004158                            
00004158                            loc_3D12:
00004158 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000415C 4E75                       		rts	
0000415E                            ; ===========================================================================
0000415E                            
0000415E                            DynWater_LZ3:				; XREF: DynWater_Index
0000415E 3038 F700                  		move.w	($FFFFF700).w,d0
00004162 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004166 6600                       		bne.s	loc_3D5E
00004168 323C 0900                  		move.w	#$900,d1
0000416C 0C40 0600                  		cmpi.w	#$600,d0
00004170 6500                       		bcs.s	loc_3D54
00004172 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00004178 6500                       		bcs.s	loc_3D54
0000417A 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004180 6400                       		bcc.s	loc_3D54
00004182 323C 04C8                  		move.w	#$4C8,d1
00004186 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
0000418C 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004192 303C 00B7                  		move.w	#$B7,d0
00004196 6100 D428                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
0000419A                            
0000419A                            loc_3D54:
0000419A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000419E 31C1 F648                  		move.w	d1,($FFFFF648).w
000041A2 4E75                       		rts	
000041A4                            ; ===========================================================================
000041A4                            
000041A4                            loc_3D5E:				; XREF: DynWater_LZ3
000041A4 5302                       		subq.b	#1,d2
000041A6 6600                       		bne.s	loc_3DA8
000041A8 323C 04C8                  		move.w	#$4C8,d1
000041AC 0C40 0770                  		cmpi.w	#$770,d0
000041B0 6500                       		bcs.s	loc_3DA2
000041B2 323C 0308                  		move.w	#$308,d1
000041B6 0C40 1400                  		cmpi.w	#$1400,d0
000041BA 6500                       		bcs.s	loc_3DA2
000041BC 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000041C2 6700                       		beq.s	loc_3D8E
000041C4 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000041CA 6400                       		bcc.s	loc_3D8E
000041CC 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000041D2 6400                       		bcc.s	loc_3DA2
000041D4                            
000041D4                            loc_3D8E:
000041D4 323C 0508                  		move.w	#$508,d1
000041D8 31C1 F648                  		move.w	d1,($FFFFF648).w
000041DC 0C40 1770                  		cmpi.w	#$1770,d0
000041E0 6500                       		bcs.s	loc_3DA2
000041E2 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000041E8                            
000041E8                            loc_3DA2:
000041E8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041EC 4E75                       		rts	
000041EE                            ; ===========================================================================
000041EE                            
000041EE                            loc_3DA8:
000041EE 5302                       		subq.b	#1,d2
000041F0 6600                       		bne.s	loc_3DD2
000041F2 323C 0508                  		move.w	#$508,d1
000041F6 0C40 1860                  		cmpi.w	#$1860,d0
000041FA 6500                       		bcs.s	loc_3DCC
000041FC 323C 0188                  		move.w	#$188,d1
00004200 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004204 6400                       		bcc.s	loc_3DC6
00004206 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000420A 6600                       		bne.s	loc_3DCC
0000420C                            
0000420C                            loc_3DC6:
0000420C 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004212                            
00004212                            loc_3DCC:
00004212 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004216 4E75                       		rts	
00004218                            ; ===========================================================================
00004218                            
00004218                            loc_3DD2:
00004218 5302                       		subq.b	#1,d2
0000421A 6600                       		bne.s	loc_3E0E
0000421C 323C 0188                  		move.w	#$188,d1
00004220 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004224 6500                       		bcs.s	loc_3E04
00004226 323C 0900                  		move.w	#$900,d1
0000422A 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000422E 6500                       		bcs.s	loc_3E04
00004230 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004236 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000423C 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004242 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004248 4E75                       		rts	
0000424A                            ; ===========================================================================
0000424A                            
0000424A                            loc_3E04:
0000424A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000424E 31C1 F648                  		move.w	d1,($FFFFF648).w
00004252 4E75                       		rts	
00004254                            ; ===========================================================================
00004254                            
00004254                            loc_3E0E:
00004254 0C40 1E00                  		cmpi.w	#$1E00,d0
00004258 6500                       		bcs.s	locret_3E1A
0000425A 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004260                            
00004260                            locret_3E1A:
00004260 4E75                       		rts	
00004262                            ; ===========================================================================
00004262                            
00004262                            DynWater_SBZ3:				; XREF: DynWater_Index
00004262 323C 0228                  		move.w	#$228,d1
00004266 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
0000426C 6500                       		bcs.s	loc_3E2C
0000426E 323C 04C8                  		move.w	#$4C8,d1
00004272                            
00004272                            loc_3E2C:
00004272 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004276 4E75                       		rts
00004278                            
00004278                            ; ---------------------------------------------------------------------------
00004278                            ; Labyrinth Zone "wind tunnels"	subroutine
00004278                            ; ---------------------------------------------------------------------------
00004278                            
00004278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004278                            
00004278                            
00004278                            LZWindTunnels:				; XREF: LZWaterEffects
00004278 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000427C 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004280 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004286 7000                       		moveq	#0,d0
00004288 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000428C E748                       		lsl.w	#3,d0
0000428E D4C0                       		adda.w	d0,a2
00004290 7200                       		moveq	#0,d1
00004292 4A38 FE11                  		tst.b	($FFFFFE11).w
00004296 6600                       		bne.s	loc_3E56
00004298 7201                       		moveq	#1,d1
0000429A 514A                       		subq.w	#8,a2
0000429C                            
0000429C                            loc_3E56:
0000429C 43F8 D000                  		lea	($FFFFD000).w,a1
000042A0                            
000042A0                            LZWind_Loop:
000042A0 3029 0008                  		move.w	8(a1),d0
000042A4 B052                       		cmp.w	(a2),d0
000042A6 6500 0000                  		bcs.w	loc_3EF4
000042AA B06A 0004                  		cmp.w	4(a2),d0
000042AE 6400 0000                  		bcc.w	loc_3EF4
000042B2 3429 000C                  		move.w	$C(a1),d2
000042B6 B46A 0002                  		cmp.w	2(a2),d2
000042BA 6500                       		bcs.s	loc_3EF4
000042BC B46A 0006                  		cmp.w	6(a2),d2
000042C0 6400                       		bcc.s	loc_3EF4
000042C2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000042C6 0200 003F                  		andi.b	#$3F,d0
000042CA 6600                       		bne.s	loc_3E90
000042CC 303C 00D0                  		move.w	#$D0,d0
000042D0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rushing water sound
000042D6                            
000042D6                            loc_3E90:
000042D6 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000042DA 6600 0000                  		bne.w	locret_3F0A
000042DE 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000042E4 6400                       		bcc.s	loc_3F06
000042E6 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000042EC 0440 0080                  		subi.w	#$80,d0
000042F0 B052                       		cmp.w	(a2),d0
000042F2 6400                       		bcc.s	LZWind_Move
000042F4 7002                       		moveq	#2,d0
000042F6 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000042FC 6600                       		bne.s	loc_3EBA
000042FE 4440                       		neg.w	d0
00004300                            
00004300                            loc_3EBA:
00004300 D169 000C                  		add.w	d0,$C(a1)
00004304                            
00004304                            LZWind_Move:
00004304 5869 0008                  		addq.w	#4,8(a1)
00004308 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000430E 337C 0000 0012             		move.w	#0,$12(a1)
00004314 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000431A 08E9 0001 0022             		bset	#1,$22(a1)
00004320 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004326 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004328 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000432C                            
0000432C                            LZWind_MoveDown:
0000432C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004332 6700                       		beq.s	locret_3EF2	; if not, branch
00004334 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004338                            
00004338                            locret_3EF2:
00004338 4E75                       		rts	
0000433A                            ; ===========================================================================
0000433A                            
0000433A                            loc_3EF4:				; XREF: LZWindTunnels
0000433A 504A                       		addq.w	#8,a2
0000433C 51C9 FF62                  		dbf	d1,LZWind_Loop
00004340 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004344 6700                       		beq.s	locret_3F0A
00004346 137C 0000 001C             		move.b	#0,$1C(a1)
0000434C                            
0000434C                            loc_3F06:
0000434C 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004350                            
00004350                            locret_3F0A:
00004350 4E75                       		rts	
00004352                            ; End of function LZWindTunnels
00004352                            
00004352                            ; ===========================================================================
00004352 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000435A 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
0000436C 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
0000437A                            					; XREF: LZWindTunnels
0000437A                            		even
0000437A                            
0000437A                            ; ---------------------------------------------------------------------------
0000437A                            ; Labyrinth Zone water slide subroutine
0000437A                            ; ---------------------------------------------------------------------------
0000437A                            
0000437A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000437A                            
0000437A                            
0000437A                            LZWaterSlides:				; XREF: LZWaterEffects
0000437A 43F8 D000                  		lea	($FFFFD000).w,a1
0000437E 0829 0001 0022             		btst	#1,$22(a1)
00004384 6600                       		bne.s	loc_3F6A
00004386 3029 000C                  		move.w	$C(a1),d0
0000438A E248                       		lsr.w	#1,d0
0000438C 0240 0380                  		andi.w	#$380,d0
00004390 1229 0008                  		move.b	8(a1),d1
00004394 0241 007F                  		andi.w	#$7F,d1
00004398 D041                       		add.w	d1,d0
0000439A 45F8 A400                  		lea	($FFFFA400).w,a2
0000439E 1032 0000                  		move.b	(a2,d0.w),d0
000043A2 45FA 0000                  		lea	byte_3FCF(pc),a2
000043A6 7206                       		moveq	#6,d1
000043A8                            
000043A8                            loc_3F62:
000043A8 B022                       		cmp.b	-(a2),d0
000043AA 57C9 FFFC                  		dbeq	d1,loc_3F62
000043AE 6700                       		beq.s	LZSlide_Move
000043B0                            
000043B0                            loc_3F6A:
000043B0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000043B4 6700                       		beq.s	locret_3F7A
000043B6 337C 0005 003E             		move.w	#5,$3E(a1)
000043BC 4238 F7CA                  		clr.b	($FFFFF7CA).w
000043C0                            
000043C0                            locret_3F7A:
000043C0 4E75                       		rts	
000043C2                            ; ===========================================================================
000043C2                            
000043C2                            LZSlide_Move:				; XREF: LZWaterSlides
000043C2 0C41 0003                  		cmpi.w	#3,d1
000043C6 6400                       		bcc.s	loc_3F84
000043C8 4E71                       		nop	
000043CA                            
000043CA                            loc_3F84:
000043CA 08A9 0000 0022             		bclr	#0,$22(a1)
000043D0 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000043D4 1340 0014                  		move.b	d0,$14(a1)
000043D8 6A00                       		bpl.s	loc_3F9A
000043DA 08E9 0000 0022             		bset	#0,$22(a1)
000043E0                            
000043E0                            loc_3F9A:
000043E0 4229 0015                  		clr.b	$15(a1)
000043E4 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000043EA 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000043F0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000043F4 0200 001F                  		andi.b	#$1F,d0
000043F8 6600                       		bne.s	locret_3FBE
000043FA 303C 00D0                  		move.w	#$D0,d0
000043FE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play water sound
00004404                            
00004404                            locret_3FBE:
00004404 4E75                       		rts	
00004406                            ; End of function LZWaterSlides
00004406                            
00004406                            ; ===========================================================================
00004406 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004415 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004416                            		even
00004416                            
00004416                            ; ---------------------------------------------------------------------------
00004416                            ; Subroutine to	move Sonic in demo mode
00004416                            ; ---------------------------------------------------------------------------
00004416                            
00004416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004416                            
00004416                            
00004416                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004416 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000441A 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000441C 4E75                       		rts	
0000441E                            ; ===========================================================================
0000441E                            
0000441E                            ; This is an unused subroutine for recording a demo
0000441E                            
0000441E                            MoveDemo_Record:
0000441E 43F9 0008 0000             		lea	($80000).l,a1
00004424 3038 F790                  		move.w	($FFFFF790).w,d0
00004428 D2C0                       		adda.w	d0,a1
0000442A 1038 F604                  		move.b	($FFFFF604).w,d0
0000442E B011                       		cmp.b	(a1),d0
00004430 6600                       		bne.s	loc_3FFA
00004432 5229 0001                  		addq.b	#1,1(a1)
00004436 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000443C 6700                       		beq.s	loc_3FFA
0000443E 4E75                       		rts	
00004440                            ; ===========================================================================
00004440                            
00004440                            loc_3FFA:				; XREF: MoveDemo_Record
00004440 1340 0002                  		move.b	d0,2(a1)
00004444 137C 0000 0003             		move.b	#0,3(a1)
0000444A 5478 F790                  		addq.w	#2,($FFFFF790).w
0000444E 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004454 4E75                       		rts	
00004456                            ; ===========================================================================
00004456                            
00004456                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004456 4A38 F604                  		tst.b	($FFFFF604).w
0000445A 6A00                       		bpl.s	loc_4022
0000445C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004460 6B00                       		bmi.s	loc_4022
00004462 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004468                            
00004468                            loc_4022:
00004468 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000446E 7000                       		moveq	#0,d0
00004470 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004474 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0000447A 6600                       		bne.s	loc_4038
0000447C 7006                       		moveq	#6,d0
0000447E                            
0000447E                            loc_4038:
0000447E E548                       		lsl.w	#2,d0
00004480 2271 0000                  		movea.l	(a1,d0.w),a1
00004484 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004488 6A00                       		bpl.s	loc_4056
0000448A 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004490 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004494 5340                       		subq.w	#1,d0
00004496 E548                       		lsl.w	#2,d0
00004498 2271 0000                  		movea.l	(a1,d0.w),a1
0000449C                            
0000449C                            loc_4056:
0000449C 3038 F790                  		move.w	($FFFFF790).w,d0
000044A0 D2C0                       		adda.w	d0,a1
000044A2 1011                       		move.b	(a1),d0
000044A4 41F8 F604                  		lea	($FFFFF604).w,a0
000044A8 1200                       		move.b	d0,d1
000044AA 1410                       		move.b	(a0),d2
000044AC B500                       		eor.b	d2,d0
000044AE 10C1                       		move.b	d1,(a0)+
000044B0 C001                       		and.b	d1,d0
000044B2 10C0                       		move.b	d0,(a0)+
000044B4 5338 F792                  		subq.b	#1,($FFFFF792).w
000044B8 6400                       		bcc.s	locret_407E
000044BA 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000044C0 5478 F790                  		addq.w	#2,($FFFFF790).w
000044C4                            
000044C4                            locret_407E:
000044C4 4E75                       		rts	
000044C6                            ; End of function MoveSonicInDemo
000044C6                            
000044C6                            ; ===========================================================================
000044C6                            ; ---------------------------------------------------------------------------
000044C6                            ; Demo sequence	pointers
000044C6                            ; ---------------------------------------------------------------------------
000044C6                            Demo_Index:
000044C6                            	include "_inc\Demo pointers for intro.asm"
000044C6                            ; ---------------------------------------------------------------------------
000044C6                            ; Demo sequence	pointers
000044C6                            ; ---------------------------------------------------------------------------
000044C6 0000 0000                  	dc.l Demo_GHZ
000044CA 0000 0000                  	dc.l Demo_GHZ
000044CE 0000 0000                  	dc.l Demo_MZ
000044D2 0000 0000                  	dc.l Demo_MZ
000044D6 0000 0000                  	dc.l Demo_SYZ
000044DA 0000 0000                  	dc.l Demo_SYZ
000044DE 0000 0000                  	dc.l Demo_SS
000044E2 0000 0000                  	dc.l Demo_SS
000044E2 0000 0000                  	dc.l Demo_SS
000044E6                            
000044E6                            Demo_EndIndex:
000044E6                            	include "_inc\Demo pointers for ending.asm"
000044E6                            ; ---------------------------------------------------------------------------
000044E6                            ; Demo (ending) sequence pointers
000044E6                            ; ---------------------------------------------------------------------------
000044E6 0000 0000                  	dc.l Demo_EndGHZ1
000044EA 0000 0000                  	dc.l Demo_EndMZ
000044EE 0000 0000                  	dc.l Demo_EndSYZ
000044F2 0000 0000                  	dc.l Demo_EndLZ
000044F6 0000 0000                  	dc.l Demo_EndSLZ
000044FA 0000 0000                  	dc.l Demo_EndSBZ1
000044FE 0000 0000                  	dc.l Demo_EndSBZ2
00004502 0000 0000                  	dc.l Demo_EndGHZ2
00004502 0000 0000                  	dc.l Demo_EndGHZ2
00004506                            
00004506 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004516 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004526 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004536                            		even
00004536                            
00004536                            ; ---------------------------------------------------------------------------
00004536                            ; Collision index loading subroutine
00004536                            ; ---------------------------------------------------------------------------
00004536                            
00004536                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004536                            
00004536                            
00004536                            ColIndexLoad:				; XREF: Level
00004536 7000                       		moveq	#0,d0
00004538 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000453C E548                       		lsl.w	#2,d0
0000453E 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004544 4E75                       		rts	
00004546                            ; End of function ColIndexLoad
00004546                            
00004546                            ; ===========================================================================
00004546                            ; ---------------------------------------------------------------------------
00004546                            ; Collision index pointers
00004546                            ; ---------------------------------------------------------------------------
00004546                            ColPointers:
00004546                            	include "_inc\Collision index pointers.asm"
00004546                            ; ---------------------------------------------------------------------------
00004546                            ; Collision index pointers
00004546                            ; ---------------------------------------------------------------------------
00004546 0000 0000                  	dc.l Col_GHZ
0000454A 0000 0000                  	dc.l Col_LZ
0000454E 0000 0000                  	dc.l Col_MZ
00004552 0000 0000                  	dc.l Col_SLZ
00004556 0000 0000                  	dc.l Col_SYZ
0000455A 0000 0000                  	dc.l Col_SBZ
0000455A 0000 0000                  	dc.l Col_SBZ
0000455E                            
0000455E                            ; ---------------------------------------------------------------------------
0000455E                            ; Oscillating number subroutine
0000455E                            ; ---------------------------------------------------------------------------
0000455E                            
0000455E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000455E                            
0000455E                            
0000455E                            OscillateNumInit:			; XREF: Level
0000455E 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004562 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004568 7220                       		moveq	#$20,d1
0000456A                            
0000456A                            Osc_Loop:
0000456A 32DA                       		move.w	(a2)+,(a1)+
0000456C 51C9 FFFC                  		dbf	d1,Osc_Loop
00004570 4E75                       		rts	
00004572                            ; End of function OscillateNumInit
00004572                            
00004572                            ; ===========================================================================
00004572 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004576 0000 0080                  		dc.w 0,	$80
0000457A 0000 0080                  		dc.w 0,	$80
0000457E 0000 0080                  		dc.w 0,	$80
00004582 0000 0080                  		dc.w 0,	$80
00004586 0000 0080                  		dc.w 0,	$80
0000458A 0000 0080                  		dc.w 0,	$80
0000458E 0000 0080                  		dc.w 0,	$80
00004592 0000 0080                  		dc.w 0,	$80
00004596 0000 50F0                  		dc.w 0,	$50F0
0000459A 011E 2080                  		dc.w $11E, $2080
0000459E 00B4 3080                  		dc.w $B4, $3080
000045A2 010E 5080                  		dc.w $10E, $5080
000045A6 01C2 7080                  		dc.w $1C2, $7080
000045AA 0276 0080                  		dc.w $276, $80
000045AE 0000 0080                  		dc.w 0,	$80
000045B2 0000                       		dc.w 0
000045B4                            		even
000045B4                            
000045B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045B4                            
000045B4                            
000045B4                            OscillateNumDo:				; XREF: Level
000045B4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000045BA 6400                       		bcc.s	locret_41C4
000045BC 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000045C0 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000045C6 3619                       		move.w	(a1)+,d3
000045C8 720F                       		moveq	#$F,d1
000045CA                            
000045CA                            loc_4184:
000045CA 341A                       		move.w	(a2)+,d2
000045CC 381A                       		move.w	(a2)+,d4
000045CE 0303                       		btst	d1,d3
000045D0 6600                       		bne.s	loc_41A4
000045D2 3029 0002                  		move.w	2(a1),d0
000045D6 D042                       		add.w	d2,d0
000045D8 3340 0002                  		move.w	d0,2(a1)
000045DC D151                       		add.w	d0,0(a1)
000045DE B811                       		cmp.b	0(a1),d4
000045E0 6200                       		bhi.s	loc_41BA
000045E2 03C3                       		bset	d1,d3
000045E4 6000                       		bra.s	loc_41BA
000045E6                            ; ===========================================================================
000045E6                            
000045E6                            loc_41A4:				; XREF: OscillateNumDo
000045E6 3029 0002                  		move.w	2(a1),d0
000045EA 9042                       		sub.w	d2,d0
000045EC 3340 0002                  		move.w	d0,2(a1)
000045F0 D151                       		add.w	d0,0(a1)
000045F2 B811                       		cmp.b	0(a1),d4
000045F4 6300                       		bls.s	loc_41BA
000045F6 0383                       		bclr	d1,d3
000045F8                            
000045F8                            loc_41BA:
000045F8 5849                       		addq.w	#4,a1
000045FA 51C9 FFCE                  		dbf	d1,loc_4184
000045FE 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004602                            
00004602                            locret_41C4:
00004602 4E75                       		rts	
00004604                            ; End of function OscillateNumDo
00004604                            
00004604                            ; ===========================================================================
00004604 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004608 0002 0018                  		dc.w 2,	$18
0000460C 0002 0020                  		dc.w 2,	$20
00004610 0002 0030                  		dc.w 2,	$30
00004614 0004 0020                  		dc.w 4,	$20
00004618 0008 0008                  		dc.w 8,	8
0000461C 0008 0040                  		dc.w 8,	$40
00004620 0004 0040                  		dc.w 4,	$40
00004624 0002 0050                  		dc.w 2,	$50
00004628 0002 0050                  		dc.w 2,	$50
0000462C 0002 0020                  		dc.w 2,	$20
00004630 0003 0030                  		dc.w 3,	$30
00004634 0005 0050                  		dc.w 5,	$50
00004638 0007 0070                  		dc.w 7,	$70
0000463C 0002 0010                  		dc.w 2,	$10
00004640 0002 0010                  		dc.w 2,	$10
00004644                            		even
00004644                            
00004644                            ; ---------------------------------------------------------------------------
00004644                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004644                            ; ---------------------------------------------------------------------------
00004644                            
00004644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004644                            
00004644                            
00004644                            ChangeRingFrame:			; XREF: Level
00004644 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004648 6A00                       		bpl.s	loc_421C
0000464A 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004650 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004654 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0000465A                            
0000465A                            loc_421C:
0000465A 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000465E 6A00                       		bpl.s	loc_4232
00004660 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004666 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0000466A 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004670                            
00004670                            loc_4232:
00004670 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004674 6A00                       		bpl.s	loc_4250
00004676 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000467C 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004680 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004686 6500                       		bcs.s	loc_4250
00004688 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000468E                            
0000468E                            loc_4250:
0000468E 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004692 6700                       		beq.s	locret_4272
00004694 7000                       		moveq	#0,d0
00004696 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
0000469A D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000469E 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000046A2 EF58                       		rol.w	#7,d0
000046A4 0240 0003                  		andi.w	#3,d0
000046A8 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000046AC 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000046B0                            
000046B0                            locret_4272:
000046B0 4E75                       		rts	
000046B2                            ; End of function ChangeRingFrame
000046B2                            
000046B2                            ; ---------------------------------------------------------------------------
000046B2                            ; End-of-act signpost pattern loading subroutine
000046B2                            ; ---------------------------------------------------------------------------
000046B2                            
000046B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046B2                            
000046B2                            
000046B2                            SignpostArtLoad:			; XREF: Level
000046B2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000046B6 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000046BA 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000046C0 6700                       		beq.s	Signpost_Exit	; if yes, branch
000046C2 3038 F700                  		move.w	($FFFFF700).w,d0
000046C6 3238 F72A                  		move.w	($FFFFF72A).w,d1
000046CA 0441 0100                  		subi.w	#$100,d1
000046CE B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000046D0 6D00                       		blt.s	Signpost_Exit	; if not, branch
000046D2 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000046D6 6700                       		beq.s	Signpost_Exit
000046D8 B278 F728                  		cmp.w	($FFFFF728).w,d1
000046DC 6700                       		beq.s	Signpost_Exit
000046DE 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000046E2 7012                       		moveq	#$12,d0
000046E4 6000 D0F0                  		bra.w	LoadPLC2	; load signpost	patterns
000046E8                            ; ===========================================================================
000046E8                            
000046E8                            Signpost_Exit:
000046E8 4E75                       		rts	
000046EA                            ; End of function SignpostArtLoad
000046EA                            
000046EA                            ; ===========================================================================
000046EA                            Demo_GHZ:	incbin	demodata\i_ghz.bin
0000476A                            Demo_MZ:	incbin	demodata\i_mz.bin
0000489A                            Demo_SYZ:	incbin	demodata\i_syz.bin
0000491A                            Demo_SS:	incbin	demodata\i_ss.bin
00004A1A                            ; ===========================================================================
00004A1A                            
00004A1A                            ; ---------------------------------------------------------------------------
00004A1A                            ; Special Stage
00004A1A                            ; ---------------------------------------------------------------------------
00004A1A                            
00004A1A                            SpecialStage:				; XREF: GameModeArray
00004A1A 303C 00CA                  		move.w	#$CA,d0
00004A1E 6100 CBA0                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004A22 6100 D742                  		bsr.w	Pal_MakeFlash
00004A26 46FC 2700                  		move	#$2700,sr
00004A2A 4DF9 00C0 0004             		lea	($C00004).l,a6
00004A30 3CBC 8B03                  		move.w	#$8B03,(a6)
00004A34 3CBC 8004                  		move.w	#$8004,(a6)
00004A38 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004A3E 3CBC 9011                  		move.w	#$9011,(a6)
00004A42 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A46 0200 00BF                  		andi.b	#$BF,d0
00004A4A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004A50 6100 CA96                  		bsr.w	ClearScreen
00004A54 46FC 2300                  		move	#$2300,sr
00004A58 4BF9 00C0 0004             		lea	($C00004).l,a5
00004A5E 3ABC 8F01                  		move.w	#$8F01,(a5)
00004A62 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004A68 3ABC 9780                  		move.w	#$9780,(a5)
00004A6C 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004A72 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004A7A                            
00004A7A                            loc_463C:
00004A7A 3215                       		move.w	(a5),d1
00004A7C 0801 0001                  		btst	#1,d1
00004A80 66F8                       		bne.s	loc_463C
00004A82 3ABC 8F02                  		move.w	#$8F02,(a5)
00004A86 6100 0000                  		bsr.w	SS_BGLoad
00004A8A 7014                       		moveq	#$14,d0
00004A8C 6100 CE82                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004A90 43F8 D000                  		lea	($FFFFD000).w,a1
00004A94 7000                       		moveq	#0,d0
00004A96 323C 07FF                  		move.w	#$7FF,d1
00004A9A                            
00004A9A                            SS_ClrObjRam:
00004A9A 22C0                       		move.l	d0,(a1)+
00004A9C 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004AA0                            
00004AA0 43F8 F700                  		lea	($FFFFF700).w,a1
00004AA4 7000                       		moveq	#0,d0
00004AA6 323C 003F                  		move.w	#$3F,d1
00004AAA                            
00004AAA                            SS_ClrRam:
00004AAA 22C0                       		move.l	d0,(a1)+
00004AAC 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004AB0                            
00004AB0 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004AB4 7000                       		moveq	#0,d0
00004AB6 323C 0027                  		move.w	#$27,d1
00004ABA                            
00004ABA                            SS_ClrRam2:
00004ABA 22C0                       		move.l	d0,(a1)+
00004ABC 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004AC0                            
00004AC0 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004AC4 7000                       		moveq	#0,d0
00004AC6 323C 007F                  		move.w	#$7F,d1
00004ACA                            
00004ACA                            SS_ClrNemRam:
00004ACA 22C0                       		move.l	d0,(a1)+
00004ACC 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004AD0                            
00004AD0 4238 F64E                  		clr.b	($FFFFF64E).w
00004AD4 4278 FE02                  		clr.w	($FFFFFE02).w
00004AD8 700A                       		moveq	#$A,d0
00004ADA 6100 D80A                  		bsr.w	PalLoad1	; load special stage pallet
00004ADE 4EB9 0000 0000             		jsr	SS_Load
00004AE4 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004AEC 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004AF4 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004AFA 6100 0000                  		bsr.w	PalCycle_SS
00004AFE 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004B02 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004B08 303C 0089                  		move.w	#$89,d0
00004B0C 6100 CAAC                  		bsr.w	PlaySound	; play special stage BG	music
00004B10 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004B16 43F9 0000 44C6             		lea	(Demo_Index).l,a1
00004B1C 7006                       		moveq	#6,d0
00004B1E E548                       		lsl.w	#2,d0
00004B20 2271 0000                  		movea.l	(a1,d0.w),a1
00004B24 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004B2A 5338 F792                  		subq.b	#1,($FFFFF792).w
00004B2E 4278 FE20                  		clr.w	($FFFFFE20).w
00004B32 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004B36 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004B3C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004B42 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004B46 6700                       		beq.s	SS_NoDebug	; if not, branch
00004B48 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004B4E 6700                       		beq.s	SS_NoDebug	; if not, branch
00004B50 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004B56                            
00004B56                            SS_NoDebug:
00004B56 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004B5A 0000 0040                  		ori.b	#$40,d0
00004B5E 33C0 00C0 0004             		move.w	d0,($C00004).l
00004B64 6100 D554                  		bsr.w	Pal_MakeWhite
00004B68                            
00004B68                            ; ---------------------------------------------------------------------------
00004B68                            ; Main Special Stage loop
00004B68                            ; ---------------------------------------------------------------------------
00004B68                            
00004B68                            SS_MainLoop:
00004B68 6100 CA62                  		bsr.w	PauseGame
00004B6C 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004B72 6100 E0BE                  		bsr.w	DelayProgram
00004B76 6100 F89E                  		bsr.w	MoveSonicInDemo
00004B7A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004B80 4EB9 0000 0000             		jsr	ObjectsLoad
00004B86 4EB9 0000 0000             		jsr	BuildSprites
00004B8C 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B92 6100 0000                  		bsr.w	SS_BGAnimate
00004B96 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004B9A 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004B9C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004BA0 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004BA4                            
00004BA4                            SS_ChkEnd:
00004BA4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004BAA 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004BAE                            
00004BAE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004BB2 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004BB6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004BBC 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004BC2 6500                       		bcs.s	SS_End		; if not, branch
00004BC4 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004BC8                            
00004BC8                            SS_End:
00004BC8 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004BCE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004BD4 4278 F794                  		clr.w	($FFFFF794).w
00004BD8                            
00004BD8                            SS_EndLoop:
00004BD8 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004BDE 6100 E052                  		bsr.w	DelayProgram
00004BE2 6100 F832                  		bsr.w	MoveSonicInDemo
00004BE6 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004BEC 4EB9 0000 0000             		jsr	ObjectsLoad
00004BF2 4EB9 0000 0000             		jsr	BuildSprites
00004BF8 4EB9 0000 0000             		jsr	SS_ShowLayout
00004BFE 6100 0000                  		bsr.w	SS_BGAnimate
00004C02 5378 F794                  		subq.w	#1,($FFFFF794).w
00004C06 6A00                       		bpl.s	loc_47D4
00004C08 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004C0E 6100 D576                  		bsr.w	Pal_ToWhite
00004C12                            
00004C12                            loc_47D4:
00004C12 4A78 F614                  		tst.w	($FFFFF614).w
00004C16 66C0                       		bne.s	SS_EndLoop
00004C18                            
00004C18 46FC 2700                  		move	#$2700,sr
00004C1C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C22 3CBC 8230                  		move.w	#$8230,(a6)
00004C26 3CBC 8407                  		move.w	#$8407,(a6)
00004C2A 3CBC 9001                  		move.w	#$9001,(a6)
00004C2E 6100 C8B8                  		bsr.w	ClearScreen
00004C32 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004C3C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004C42 6100 CA20                  		bsr.w	NemDec
00004C46 4EB9 0000 0000             		jsr	Hud_Base
00004C4C 46FC 2300                  		move	#$2300,sr
00004C50 7011                       		moveq	#$11,d0
00004C52 6100 D6AE                  		bsr.w	PalLoad2	; load results screen pallet
00004C56 7000                       		moveq	#0,d0
00004C58 6100 CB7C                  		bsr.w	LoadPLC2
00004C5C 701B                       		moveq	#$1B,d0
00004C5E 6100 CB44                  		bsr.w	LoadPLC		; load results screen patterns
00004C62 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004C68 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004C6E 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004C72 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004C76 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004C7A 303C 008E                  		move.w	#$8E,d0
00004C7E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004C84 43F8 D000                  		lea	($FFFFD000).w,a1
00004C88 7000                       		moveq	#0,d0
00004C8A 323C 07FF                  		move.w	#$7FF,d1
00004C8E                            
00004C8E                            SS_EndClrObjRam:
00004C8E 22C0                       		move.l	d0,(a1)+
00004C90 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004C94                            
00004C94 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004C9A                            
00004C9A                            SS_NormalExit:
00004C9A 6100 C930                  		bsr.w	PauseGame
00004C9E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004CA4 6100 DF8C                  		bsr.w	DelayProgram
00004CA8 4EB9 0000 0000             		jsr	ObjectsLoad
00004CAE 4EB9 0000 0000             		jsr	BuildSprites
00004CB4 6100 CB5A                  		bsr.w	RunPLC_RAM
00004CB8 4A78 FE02                  		tst.w	($FFFFFE02).w
00004CBC 67DC                       		beq.s	SS_NormalExit
00004CBE 4AB8 F680                  		tst.l	($FFFFF680).w
00004CC2 66D6                       		bne.s	SS_NormalExit
00004CC4 303C 00CA                  		move.w	#$CA,d0
00004CC8 6100 C8F6                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004CCC 6100 D498                  		bsr.w	Pal_MakeFlash
00004CD0 4E75                       		rts	
00004CD2                            ; ===========================================================================
00004CD2                            
00004CD2                            SS_ToSegaScreen:
00004CD2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004CD8 4E75                       		rts
00004CDA                            
00004CDA                            ; ---------------------------------------------------------------------------
00004CDA                            ; Special stage	background loading subroutine
00004CDA                            ; ---------------------------------------------------------------------------
00004CDA                            
00004CDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CDA                            
00004CDA                            
00004CDA                            SS_BGLoad:				; XREF: SpecialStage
00004CDA 43F9 00FF 0000             		lea	($FF0000).l,a1
00004CE0 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004CE6 303C 4051                  		move.w	#$4051,d0
00004CEA 6100 CC56                  		bsr.w	EniDec
00004CEE 263C 5000 0001             		move.l	#$50000001,d3
00004CF4 45F9 00FF 0080             		lea	($FF0080).l,a2
00004CFA 7E06                       		moveq	#6,d7
00004CFC                            
00004CFC                            loc_48BE:
00004CFC 2003                       		move.l	d3,d0
00004CFE 7C03                       		moveq	#3,d6
00004D00 7800                       		moveq	#0,d4
00004D02 0C47 0003                  		cmpi.w	#3,d7
00004D06 6400                       		bcc.s	loc_48CC
00004D08 7801                       		moveq	#1,d4
00004D0A                            
00004D0A                            loc_48CC:
00004D0A 7A07                       		moveq	#7,d5
00004D0C                            
00004D0C                            loc_48CE:
00004D0C 224A                       		movea.l	a2,a1
00004D0E 0A04 0001                  		eori.b	#1,d4
00004D12 6600                       		bne.s	loc_48E2
00004D14 0C47 0006                  		cmpi.w	#6,d7
00004D18 6600                       		bne.s	loc_48F2
00004D1A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D20                            
00004D20                            loc_48E2:
00004D20 48E7 F800                  		movem.l	d0-d4,-(sp)
00004D24 7207                       		moveq	#7,d1
00004D26 7407                       		moveq	#7,d2
00004D28 6100 C91A                  		bsr.w	ShowVDPGraphics
00004D2C 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004D30                            
00004D30                            loc_48F2:
00004D30 0680 0010 0000             		addi.l	#$100000,d0
00004D36 51CD FFD4                  		dbf	d5,loc_48CE
00004D3A 0680 0380 0000             		addi.l	#$3800000,d0
00004D40 0A04 0001                  		eori.b	#1,d4
00004D44 51CE FFC4                  		dbf	d6,loc_48CC
00004D48 0683 1000 0000             		addi.l	#$10000000,d3
00004D4E 6A00                       		bpl.s	loc_491C
00004D50 4843                       		swap	d3
00004D52 0683 0000 C000             		addi.l	#$C000,d3
00004D58 4843                       		swap	d3
00004D5A                            
00004D5A                            loc_491C:
00004D5A D4FC 0080                  		adda.w	#$80,a2
00004D5E 51CF FF9C                  		dbf	d7,loc_48BE
00004D62 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D68 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004D6E 303C 4000                  		move.w	#$4000,d0
00004D72 6100 CBCE                  		bsr.w	EniDec
00004D76 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D7C 203C 4000 0003             		move.l	#$40000003,d0
00004D82 723F                       		moveq	#$3F,d1
00004D84 741F                       		moveq	#$1F,d2
00004D86 6100 C8BC                  		bsr.w	ShowVDPGraphics
00004D8A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D90 203C 5000 0003             		move.l	#$50000003,d0
00004D96 723F                       		moveq	#$3F,d1
00004D98 743F                       		moveq	#$3F,d2
00004D9A 6100 C8A8                  		bsr.w	ShowVDPGraphics
00004D9E 4E75                       		rts	
00004DA0                            ; End of function SS_BGLoad
00004DA0                            
00004DA0                            ; ---------------------------------------------------------------------------
00004DA0                            ; Pallet cycling routine - special stage
00004DA0                            ; ---------------------------------------------------------------------------
00004DA0                            
00004DA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DA0                            
00004DA0                            
00004DA0                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004DA0 4A78 F63A                  		tst.w	($FFFFF63A).w
00004DA4 6600                       		bne.s	locret_49E6
00004DA6 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004DAA 6A00                       		bpl.s	locret_49E6
00004DAC 4DF9 00C0 0004             		lea	($C00004).l,a6
00004DB2 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004DB6 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004DBA 0240 001F                  		andi.w	#$1F,d0
00004DBE E548                       		lsl.w	#2,d0
00004DC0 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004DC6 D0C0                       		adda.w	d0,a0
00004DC8 1018                       		move.b	(a0)+,d0
00004DCA 6A00                       		bpl.s	loc_4992
00004DCC 303C 01FF                  		move.w	#$1FF,d0
00004DD0                            
00004DD0                            loc_4992:
00004DD0 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004DD4 7000                       		moveq	#0,d0
00004DD6 1018                       		move.b	(a0)+,d0
00004DD8 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004DDC 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004DE2 43F1 0000                  		lea	(a1,d0.w),a1
00004DE6 303C 8200                  		move.w	#-$7E00,d0
00004DEA 1019                       		move.b	(a1)+,d0
00004DEC 3C80                       		move.w	d0,(a6)
00004DEE 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004DF2 303C 8400                  		move.w	#-$7C00,d0
00004DF6 1018                       		move.b	(a0)+,d0
00004DF8 3C80                       		move.w	d0,(a6)
00004DFA 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004E04 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004E0C 7000                       		moveq	#0,d0
00004E0E 1018                       		move.b	(a0)+,d0
00004E10 6B00                       		bmi.s	loc_49E8
00004E12 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004E18 D2C0                       		adda.w	d0,a1
00004E1A 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004E1E 24D9                       		move.l	(a1)+,(a2)+
00004E20 24D9                       		move.l	(a1)+,(a2)+
00004E22 24D9                       		move.l	(a1)+,(a2)+
00004E24                            
00004E24                            locret_49E6:
00004E24 4E75                       		rts	
00004E26                            ; ===========================================================================
00004E26                            
00004E26                            loc_49E8:				; XREF: PalCycle_SS
00004E26 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004E2A 0C40 008A                  		cmpi.w	#$8A,d0
00004E2E 6500                       		bcs.s	loc_49F4
00004E30 5241                       		addq.w	#1,d1
00004E32                            
00004E32                            loc_49F4:
00004E32 C2FC 002A                  		mulu.w	#$2A,d1
00004E36 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004E3C D2C1                       		adda.w	d1,a1
00004E3E 0240 007F                  		andi.w	#$7F,d0
00004E42 0880 0000                  		bclr	#0,d0
00004E46 6700                       		beq.s	loc_4A18
00004E48 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004E4C 24D1                       		move.l	(a1),(a2)+
00004E4E 24E9 0004                  		move.l	4(a1),(a2)+
00004E52 24E9 0008                  		move.l	8(a1),(a2)+
00004E56                            
00004E56                            loc_4A18:
00004E56 D2FC 000C                  		adda.w	#$C,a1
00004E5A 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004E5E 0C40 000A                  		cmpi.w	#$A,d0
00004E62 6500                       		bcs.s	loc_4A2E
00004E64 0440 000A                  		subi.w	#$A,d0
00004E68 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004E6C                            
00004E6C                            loc_4A2E:
00004E6C 3200                       		move.w	d0,d1
00004E6E D040                       		add.w	d0,d0
00004E70 D041                       		add.w	d1,d0
00004E72 D2C0                       		adda.w	d0,a1
00004E74 24D9                       		move.l	(a1)+,(a2)+
00004E76 34D9                       		move.w	(a1)+,(a2)+
00004E78 4E75                       		rts	
00004E7A                            ; End of function PalCycle_SS
00004E7A                            
00004E7A                            ; ===========================================================================
00004E7A 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004E8A                            					; XREF: PalCycle_SS
00004E8A 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004E9A 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004EAA FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004EBA 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004ECA 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004EDA 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004EEA FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004EFA                            		even
00004EFA 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004F08                            					; XREF: PalCycle_SS
00004F08                            		even
00004F08                            
00004F08                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004F50                            		even
00004F50                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005022                            		even
00005022                            
00005022                            ; ---------------------------------------------------------------------------
00005022                            ; Subroutine to	make the special stage background animated
00005022                            ; ---------------------------------------------------------------------------
00005022                            
00005022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005022                            
00005022                            
00005022                            SS_BGAnimate:				; XREF: SpecialStage
00005022 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005026 6600                       		bne.s	loc_4BF6
00005028 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000502E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005034                            
00005034                            loc_4BF6:
00005034 0C40 0008                  		cmpi.w	#8,d0
00005038 6400                       		bcc.s	loc_4C4E
0000503A 0C40 0006                  		cmpi.w	#6,d0
0000503E 6600                       		bne.s	loc_4C10
00005040 5278 F718                  		addq.w	#1,($FFFFF718).w
00005044 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005048 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000504E                            
0000504E                            loc_4C10:
0000504E 7000                       		moveq	#0,d0
00005050 3038 F708                  		move.w	($FFFFF708).w,d0
00005054 4440                       		neg.w	d0
00005056 4840                       		swap	d0
00005058 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000505E 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005062 7609                       		moveq	#9,d3
00005064                            
00005064                            loc_4C26:
00005064 302B 0002                  		move.w	2(a3),d0
00005068 6100 DBFA                  		bsr.w	CalcSine
0000506C 7400                       		moveq	#0,d2
0000506E 1419                       		move.b	(a1)+,d2
00005070 C1C2                       		muls.w	d2,d0
00005072 E080                       		asr.l	#8,d0
00005074 36C0                       		move.w	d0,(a3)+
00005076 1419                       		move.b	(a1)+,d2
00005078 4882                       		ext.w	d2
0000507A D55B                       		add.w	d2,(a3)+
0000507C 51CB FFE6                  		dbf	d3,loc_4C26
00005080 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005084 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000508A 6000                       		bra.s	loc_4C7E
0000508C                            ; ===========================================================================
0000508C                            
0000508C                            loc_4C4E:				; XREF: SS_BGAnimate
0000508C 0C40 000C                  		cmpi.w	#$C,d0
00005090 6600                       		bne.s	loc_4C74
00005092 5378 F718                  		subq.w	#1,($FFFFF718).w
00005096 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000509A 243C 0001 8000             		move.l	#$18000,d2
000050A0 7206                       		moveq	#6,d1
000050A2                            
000050A2                            loc_4C64:
000050A2 2013                       		move.l	(a3),d0
000050A4 9082                       		sub.l	d2,d0
000050A6 26C0                       		move.l	d0,(a3)+
000050A8 0482 0000 2000             		subi.l	#$2000,d2
000050AE 51C9 FFF2                  		dbf	d1,loc_4C64
000050B2                            
000050B2                            loc_4C74:
000050B2 47F8 AB00                  		lea	($FFFFAB00).w,a3
000050B6 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000050BC                            
000050BC                            loc_4C7E:
000050BC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000050C0 3038 F718                  		move.w	($FFFFF718).w,d0
000050C4 4440                       		neg.w	d0
000050C6 4840                       		swap	d0
000050C8 7600                       		moveq	#0,d3
000050CA 161A                       		move.b	(a2)+,d3
000050CC 3438 F70C                  		move.w	($FFFFF70C).w,d2
000050D0 4442                       		neg.w	d2
000050D2 0242 00FF                  		andi.w	#$FF,d2
000050D6 E54A                       		lsl.w	#2,d2
000050D8                            
000050D8                            loc_4C9A:
000050D8 301B                       		move.w	(a3)+,d0
000050DA 544B                       		addq.w	#2,a3
000050DC 7200                       		moveq	#0,d1
000050DE 121A                       		move.b	(a2)+,d1
000050E0 5341                       		subq.w	#1,d1
000050E2                            
000050E2                            loc_4CA4:
000050E2 2380 2000                  		move.l	d0,(a1,d2.w)
000050E6 5842                       		addq.w	#4,d2
000050E8 0242 03FC                  		andi.w	#$3FC,d2
000050EC 51C9 FFF4                  		dbf	d1,loc_4CA4
000050F0 51CB FFE6                  		dbf	d3,loc_4C9A
000050F4 4E75                       		rts	
000050F6                            ; End of function SS_BGAnimate
000050F6                            
000050F6                            ; ===========================================================================
000050F6 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005102                            		even
00005102 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000510A                            		even
0000510A 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000511E                            		even
0000511E                            					; XREF: SS_BGAnimate
0000511E                            ; ===========================================================================
0000511E                            
0000511E                            ; ---------------------------------------------------------------------------
0000511E                            ; Continue screen
0000511E                            ; ---------------------------------------------------------------------------
0000511E                            
0000511E                            ContinueScreen:				; XREF: GameModeArray
0000511E 6100 CF1C                  		bsr.w	Pal_FadeFrom
00005122 46FC 2700                  		move	#$2700,sr
00005126 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000512A 0200 00BF                  		andi.b	#$BF,d0
0000512E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005134 4DF9 00C0 0004             		lea	($C00004).l,a6
0000513A 3CBC 8004                  		move.w	#$8004,(a6)
0000513E 3CBC 8700                  		move.w	#$8700,(a6)
00005142 6100 C3A4                  		bsr.w	ClearScreen
00005146 43F8 D000                  		lea	($FFFFD000).w,a1
0000514A 7000                       		moveq	#0,d0
0000514C 323C 07FF                  		move.w	#$7FF,d1
00005150                            
00005150                            Cont_ClrObjRam:
00005150 22C0                       		move.l	d0,(a1)+
00005152 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005156                            
00005156 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005160 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005166 6100 C4FC                  		bsr.w	NemDec
0000516A 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005174 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
0000517A 6100 C4E8                  		bsr.w	NemDec
0000517E 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005188 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000518E 6100 C4D4                  		bsr.w	NemDec
00005192 720A                       		moveq	#10,d1
00005194 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
0000519A 7012                       		moveq	#$12,d0
0000519C 6100 D148                  		bsr.w	PalLoad1	; load continue	screen pallet
000051A0 103C 0090                  		move.b	#$90,d0
000051A4 6100 C414                  		bsr.w	PlaySound	; play continue	music
000051A8 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000051AE 42B8 F700                  		clr.l	($FFFFF700).w
000051B2 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000051BA 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000051C0 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000051C6 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000051CC 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000051D2 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000051D8 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000051DE 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000051E4 4EB9 0000 0000             		jsr	ObjectsLoad
000051EA 4EB9 0000 0000             		jsr	BuildSprites
000051F0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000051F4 0000 0040                  		ori.b	#$40,d0
000051F8 33C0 00C0 0004             		move.w	d0,($C00004).l
000051FE 6100 CD96                  		bsr.w	Pal_FadeTo
00005202                            
00005202                            ; ---------------------------------------------------------------------------
00005202                            ; Continue screen main loop
00005202                            ; ---------------------------------------------------------------------------
00005202                            
00005202                            Cont_MainLoop:
00005202 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005208 6100 DA28                  		bsr.w	DelayProgram
0000520C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005212 6400                       		bcc.s	loc_4DF2
00005214 46FC 2700                  		move	#$2700,sr
00005218 3238 F614                  		move.w	($FFFFF614).w,d1
0000521C 82FC 003C                  		divu.w	#$3C,d1
00005220 0281 0000 000F             		andi.l	#$F,d1
00005226 4EB9 0000 0000             		jsr	ContScrCounter
0000522C 46FC 2300                  		move	#$2300,sr
00005230                            
00005230                            loc_4DF2:
00005230 4EB9 0000 0000             		jsr	ObjectsLoad
00005236 4EB9 0000 0000             		jsr	BuildSprites
0000523C 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005242 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005244 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000524A 64B6                       		bcc.s	Cont_MainLoop
0000524C 4A78 F614                  		tst.w	($FFFFF614).w
00005250 6600 FFB0                  		bne.w	Cont_MainLoop
00005254 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000525A 4E75                       		rts	
0000525C                            ; ===========================================================================
0000525C                            
0000525C                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000525C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005262 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005268 7000                       		moveq	#0,d0
0000526A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000526E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005272 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005276 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000527A 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000527E 4E75                       		rts	
00005280                            ; ===========================================================================
00005280                            
00005280                            ; ---------------------------------------------------------------------------
00005280                            ; Object 80 - Continue screen elements
00005280                            ; ---------------------------------------------------------------------------
00005280                            
00005280                            Obj80:					; XREF: Obj_Index
00005280 7000                       		moveq	#0,d0
00005282 1028 0024                  		move.b	$24(a0),d0
00005286 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000528A 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000528E                            ; ===========================================================================
0000528E 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005290 0000                       		dc.w Obj80_Display-Obj80_Index
00005292 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005294 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005296                            ; ===========================================================================
00005296                            
00005296                            Obj80_Main:				; XREF: Obj80_Index
00005296 5428 0024                  		addq.b	#2,$24(a0)
0000529A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000052A2 317C 8500 0002             		move.w	#$8500,2(a0)
000052A8 117C 0000 0001             		move.b	#0,1(a0)
000052AE 117C 003C 0019             		move.b	#$3C,$19(a0)
000052B4 317C 0120 0008             		move.w	#$120,8(a0)
000052BA 317C 00C0 000A             		move.w	#$C0,$A(a0)
000052C0 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000052C6                            
000052C6                            Obj80_Display:				; XREF: Obj80_Index
000052C6 4EF9 0000 0000             		jmp	DisplaySprite
000052CC                            ; ===========================================================================
000052CC                            Obj80_MiniSonicPos:
000052CC 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000052DE 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000052EA                            ; ===========================================================================
000052EA                            
000052EA                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000052EA 2248                       		movea.l	a0,a1
000052EC 45F9 0000 52CC             		lea	(Obj80_MiniSonicPos).l,a2
000052F2 7200                       		moveq	#0,d1
000052F4 1238 FE18                  		move.b	($FFFFFE18).w,d1
000052F8 5501                       		subq.b	#2,d1
000052FA 6400                       		bcc.s	loc_4EC4
000052FC 4EF9 0000 0000             		jmp	DeleteObject
00005302                            ; ===========================================================================
00005302                            
00005302                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005302 7601                       		moveq	#1,d3
00005304 0C01 000E                  		cmpi.b	#$E,d1
00005308 6500                       		bcs.s	loc_4ED0
0000530A 7600                       		moveq	#0,d3
0000530C 720E                       		moveq	#$E,d1
0000530E                            
0000530E                            loc_4ED0:
0000530E 1401                       		move.b	d1,d2
00005310 0202 0001                  		andi.b	#1,d2
00005314                            
00005314                            Obj80_MiniSonLoop:
00005314 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005318 335A 0008                  		move.w	(a2)+,8(a1)
0000531C 4A02                       		tst.b	d2
0000531E 6700                       		beq.s	loc_4EEA
00005320 0469 000A 0008             		subi.w	#$A,8(a1)
00005326                            
00005326                            loc_4EEA:
00005326 337C 00D0 000A             		move.w	#$D0,$A(a1)
0000532C 137C 0006 001A             		move.b	#6,$1A(a1)
00005332 137C 0006 0024             		move.b	#6,$24(a1)
00005338 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005340 337C 8551 0002             		move.w	#$8551,2(a1)
00005346 137C 0000 0001             		move.b	#0,1(a1)
0000534C 43E9 0040                  		lea	$40(a1),a1
00005350 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005354 43E9 FFC0                  		lea	-$40(a1),a1
00005358 1343 0028                  		move.b	d3,$28(a1)
0000535C                            
0000535C                            Obj80_ChkType:				; XREF: Obj80_Index
0000535C 4A28 0028                  		tst.b	$28(a0)
00005360 6700                       		beq.s	loc_4F40
00005362 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005368 6500                       		bcs.s	loc_4F40
0000536A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000536E 0200 0001                  		andi.b	#1,d0
00005372 6600                       		bne.s	loc_4F40
00005374 4A78 D010                  		tst.w	($FFFFD010).w
00005378 6600                       		bne.s	Obj80_Delete
0000537A 4E75                       		rts	
0000537C                            ; ===========================================================================
0000537C                            
0000537C                            loc_4F40:				; XREF: Obj80_ChkType
0000537C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005380 0200 000F                  		andi.b	#$F,d0
00005384 6600                       		bne.s	Obj80_Display2
00005386 0868 0000 001A             		bchg	#0,$1A(a0)
0000538C                            
0000538C                            Obj80_Display2:
0000538C 4EF9 0000 0000             		jmp	DisplaySprite
00005392                            ; ===========================================================================
00005392                            
00005392                            Obj80_Delete:				; XREF: Obj80_ChkType
00005392 4EF9 0000 0000             		jmp	DeleteObject
00005398                            ; ===========================================================================
00005398                            
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Object 81 - Sonic on the continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398                            
00005398                            Obj81:					; XREF: Obj_Index
00005398 7000                       		moveq	#0,d0
0000539A 1028 0024                  		move.b	$24(a0),d0
0000539E 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000053A2 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000053A6 4EF9 0000 0000             		jmp	DisplaySprite
000053AC                            ; ===========================================================================
000053AC 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000053AE 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000053B0 0000                       		dc.w Obj81_Animate-Obj81_Index
000053B2 0000                       		dc.w Obj81_Run-Obj81_Index
000053B4                            ; ===========================================================================
000053B4                            
000053B4                            Obj81_Main:				; XREF: Obj81_Index
000053B4 5428 0024                  		addq.b	#2,$24(a0)
000053B8 317C 00A0 0008             		move.w	#$A0,8(a0)
000053BE 317C 00C0 000C             		move.w	#$C0,$C(a0)
000053C4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000053CC 317C 0780 0002             		move.w	#$780,2(a0)
000053D2 117C 0004 0001             		move.b	#4,1(a0)
000053D8 117C 0002 0018             		move.b	#2,$18(a0)
000053DE 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000053E4 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000053EA                            
000053EA                            Obj81_ChkLand:				; XREF: Obj81_Index
000053EA 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000053F0 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000053F2 5428 0024                  		addq.b	#2,$24(a0)
000053F6 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000053FA 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005402 317C 8500 0002             		move.w	#$8500,2(a0)
00005408 117C 0000 001C             		move.b	#0,$1C(a0)
0000540E 6000                       		bra.s	Obj81_Animate
00005410                            ; ===========================================================================
00005410                            
00005410                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005410 4EB9 0000 0000             		jsr	SpeedToPos
00005416 4EB9 0000 0000             		jsr	Sonic_Animate
0000541C 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005422                            ; ===========================================================================
00005422                            
00005422                            Obj81_Animate:				; XREF: Obj81_Index
00005422 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005426 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005428 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000542E 4EF9 0000 0000             		jmp	AnimateSprite
00005434                            ; ===========================================================================
00005434                            
00005434                            Obj81_GetUp:				; XREF: Obj81_Animate
00005434 5428 0024                  		addq.b	#2,$24(a0)
00005438 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005440 317C 0780 0002             		move.w	#$780,2(a0)
00005446 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
0000544C 4268 0014                  		clr.w	$14(a0)
00005450 5168 000C                  		subq.w	#8,$C(a0)
00005454 103C 00E0                  		move.b	#$E0,d0
00005458 6100 C166                  		bsr.w	PlaySound_Special ; fade out music
0000545C                            
0000545C                            Obj81_Run:				; XREF: Obj81_Index
0000545C 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005462 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005464 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
0000546A 6000                       		bra.s	Obj81_ShowRun
0000546C                            ; ===========================================================================
0000546C                            
0000546C                            Obj81_AddSpeed:				; XREF: Obj81_Run
0000546C 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005472                            
00005472                            Obj81_ShowRun:				; XREF: Obj81_Run
00005472 4EB9 0000 0000             		jsr	SpeedToPos
00005478 4EB9 0000 0000             		jsr	Sonic_Animate
0000547E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005484                            ; ===========================================================================
00005484                            Ani_obj81:
00005484                            	include "_anim\obj81.asm"
00005484                            ; ---------------------------------------------------------------------------
00005484                            ; Animation script - Sonic on the continue screen
00005484                            ; ---------------------------------------------------------------------------
00005484 0000                       		dc.w byte_504A-Ani_obj81
00005486 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005492 00                         		even
00005492 00                         		even
00005492                            
00005492                            ; ---------------------------------------------------------------------------
00005492                            ; Sprite mappings - Continue screen
00005492                            ; ---------------------------------------------------------------------------
00005492                            Map_obj80:
00005492                            	include "_maps\obj80.asm"
00005492                            ; ---------------------------------------------------------------------------
00005492                            ; Sprite mappings - Continue screen
00005492                            ; ---------------------------------------------------------------------------
00005492 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005496 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
0000549A 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
0000549E 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000054A2 0B                         byte_5066:	dc.b $B
000054A3 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000054A8 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000054AD F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000054B2 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000054B7 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000054BC F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000054C1 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000054C6 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000054CB 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000054D0 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000054D5 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000054DA 03                         byte_509E:	dc.b 3
000054DB 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000054E0 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000054E5 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000054EA 03                         byte_50AE:	dc.b 3
000054EB 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000054F0 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000054F5 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000054FA 03                         byte_50BE:	dc.b 3
000054FB 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005500 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005505 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000550A 02                         byte_50CE:	dc.b 2
0000550B 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005510 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005515 01                         byte_50D9:	dc.b 1
00005516 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
0000551B 01                         byte_50DF:	dc.b 1
0000551C 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005522 00                         		even
00005522 00                         		even
00005522                            
00005522                            ; ===========================================================================
00005522                            ; ---------------------------------------------------------------------------
00005522                            ; Ending sequence in Green Hill	Zone
00005522                            ; ---------------------------------------------------------------------------
00005522                            
00005522                            EndingSequence:				; XREF: GameModeArray
00005522 103C 00E4                  		move.b	#$E4,d0
00005526 6100 C098                  		bsr.w	PlaySound_Special ; stop music
0000552A 6100 CB10                  		bsr.w	Pal_FadeFrom
0000552E 43F8 D000                  		lea	($FFFFD000).w,a1
00005532 7000                       		moveq	#0,d0
00005534 323C 07FF                  		move.w	#$7FF,d1
00005538                            
00005538                            End_ClrObjRam:
00005538 22C0                       		move.l	d0,(a1)+
0000553A 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000553E                            
0000553E 43F8 F628                  		lea	($FFFFF628).w,a1
00005542 7000                       		moveq	#0,d0
00005544 323C 0015                  		move.w	#$15,d1
00005548                            
00005548                            End_ClrRam:
00005548 22C0                       		move.l	d0,(a1)+
0000554A 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000554E                            
0000554E 43F8 F700                  		lea	($FFFFF700).w,a1
00005552 7000                       		moveq	#0,d0
00005554 323C 003F                  		move.w	#$3F,d1
00005558                            
00005558                            End_ClrRam2:
00005558 22C0                       		move.l	d0,(a1)+
0000555A 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000555E                            
0000555E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005562 7000                       		moveq	#0,d0
00005564 323C 0047                  		move.w	#$47,d1
00005568                            
00005568                            End_ClrRam3:
00005568 22C0                       		move.l	d0,(a1)+
0000556A 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000556E                            
0000556E 46FC 2700                  		move	#$2700,sr
00005572 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005576 0200 00BF                  		andi.b	#$BF,d0
0000557A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005580 6100 BF66                  		bsr.w	ClearScreen
00005584 4DF9 00C0 0004             		lea	($C00004).l,a6
0000558A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000558E 3CBC 8230                  		move.w	#$8230,(a6)
00005592 3CBC 8407                  		move.w	#$8407,(a6)
00005596 3CBC 857C                  		move.w	#$857C,(a6)
0000559A 3CBC 9001                  		move.w	#$9001,(a6)
0000559E 3CBC 8004                  		move.w	#$8004,(a6)
000055A2 3CBC 8720                  		move.w	#$8720,(a6)
000055A6 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000055AC 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000055B0 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000055B6 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000055BC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000055C2 6700                       		beq.s	End_LoadData	; if yes, branch
000055C4 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000055CA                            
000055CA                            End_LoadData:
000055CA 701C                       		moveq	#$1C,d0
000055CC 6100 C342                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000055D0 4EB9 0000 0000             		jsr	Hud_Base
000055D6 6100 0000                  		bsr.w	LevelSizeLoad
000055DA 6100 0000                  		bsr.w	DeformBgLayer
000055DE 08F8 0002 F754             		bset	#2,($FFFFF754).w
000055E4 6100 0000                  		bsr.w	MainLoadBlockLoad
000055E8 6100 0000                  		bsr.w	LoadTilesFromStart
000055EC 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000055F4 46FC 2300                  		move	#$2300,sr
000055F8 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000055FE 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005602 6100 C4BC                  		bsr.w	KosDec
00005606 7003                       		moveq	#3,d0
00005608 6100 CCDC                  		bsr.w	PalLoad1	; load Sonic's pallet
0000560C 303C 008B                  		move.w	#$8B,d0
00005610 6100 BFA8                  		bsr.w	PlaySound	; play ending sequence music
00005614 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000561A 6700                       		beq.s	End_LoadSonic	; if not, branch
0000561C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005622                            
00005622                            End_LoadSonic:
00005622 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005628 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000562E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005634 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000563A 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005640 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005646 4EB9 0000 0000             		jsr	ObjPosLoad
0000564C 4EB9 0000 0000             		jsr	ObjectsLoad
00005652 4EB9 0000 0000             		jsr	BuildSprites
00005658 7000                       		moveq	#0,d0
0000565A 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000565E 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005662 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005666 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
0000566A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000566E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005672 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005676 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000567A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000567E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005682 6100 EEDA                  		bsr.w	OscillateNumInit
00005686 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000568C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005692 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005698 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000569E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000056A4 6100 D58C                  		bsr.w	DelayProgram
000056A8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000056AC 0000 0040                  		ori.b	#$40,d0
000056B0 33C0 00C0 0004             		move.w	d0,($C00004).l
000056B6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000056BC 6100 C8D8                  		bsr.w	Pal_FadeTo
000056C0                            
000056C0                            ; ---------------------------------------------------------------------------
000056C0                            ; Main ending sequence loop
000056C0                            ; ---------------------------------------------------------------------------
000056C0                            
000056C0                            End_MainLoop:
000056C0 6100 BF0A                  		bsr.w	PauseGame
000056C4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000056CA 6100 D566                  		bsr.w	DelayProgram
000056CE 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000056D2 6100 0000                  		bsr.w	End_MoveSonic
000056D6 4EB9 0000 0000             		jsr	ObjectsLoad
000056DC 6100 0000                  		bsr.w	DeformBgLayer
000056E0 4EB9 0000 0000             		jsr	BuildSprites
000056E6 4EB9 0000 0000             		jsr	ObjPosLoad
000056EC 6100 C472                  		bsr.w	PalCycle_Load
000056F0 6100 EEC2                  		bsr.w	OscillateNumDo
000056F4 6100 EF4E                  		bsr.w	ChangeRingFrame
000056F8 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000056FE 6700                       		beq.s	loc_52DA	; if yes, branch
00005700 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005706 103C 0091                  		move.b	#$91,d0
0000570A 6100 BEB4                  		bsr.w	PlaySound_Special ; play credits music
0000570E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005714 4E75                       		rts	
00005716                            ; ===========================================================================
00005716                            
00005716                            loc_52DA:
00005716 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000571A 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000571E                            
0000571E 4278 FE02                  		clr.w	($FFFFFE02).w
00005722 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005728 4278 F794                  		clr.w	($FFFFF794).w
0000572C                            
0000572C                            End_AllEmlds:				; XREF: loc_5334
0000572C 6100 BE9E                  		bsr.w	PauseGame
00005730 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005736 6100 D4FA                  		bsr.w	DelayProgram
0000573A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000573E 6100 0000                  		bsr.w	End_MoveSonic
00005742 4EB9 0000 0000             		jsr	ObjectsLoad
00005748 6100 0000                  		bsr.w	DeformBgLayer
0000574C 4EB9 0000 0000             		jsr	BuildSprites
00005752 4EB9 0000 0000             		jsr	ObjPosLoad
00005758 6100 EE5A                  		bsr.w	OscillateNumDo
0000575C 6100 EEE6                  		bsr.w	ChangeRingFrame
00005760 5378 F794                  		subq.w	#1,($FFFFF794).w
00005764 6A00                       		bpl.s	loc_5334
00005766 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000576C 6100 CA18                  		bsr.w	Pal_ToWhite
00005770                            
00005770                            loc_5334:
00005770 4A78 FE02                  		tst.w	($FFFFFE02).w
00005774 6700 FFB6                  		beq.w	End_AllEmlds
00005778 4278 FE02                  		clr.w	($FFFFFE02).w
0000577C 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005782 4BF9 00C0 0004             		lea	($C00004).l,a5
00005788 4DF9 00C0 0000             		lea	($C00000).l,a6
0000578E 47F8 F700                  		lea	($FFFFF700).w,a3
00005792 49F8 A400                  		lea	($FFFFA400).w,a4
00005796 343C 4000                  		move.w	#$4000,d2
0000579A 6100 0000                  		bsr.w	LoadTilesFromStart2
0000579E 7013                       		moveq	#$13,d0
000057A0 6100 CB44                  		bsr.w	PalLoad1	; load ending pallet
000057A4 6100 C914                  		bsr.w	Pal_MakeWhite
000057A8 6000 FF16                  		bra.w	End_MainLoop
000057AC                            
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            ; Subroutine controlling Sonic on the ending sequence
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            
000057AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000057AC                            
000057AC                            
000057AC                            End_MoveSonic:				; XREF: End_MainLoop
000057AC 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000057B0 6600                       		bne.s	End_MoveSonic2
000057B2 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000057B8 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000057BA 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000057BE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000057C4 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000057CA 4E75                       		rts	
000057CC                            ; ===========================================================================
000057CC                            
000057CC                            End_MoveSonic2:				; XREF: End_MoveSonic
000057CC 5500                       		subq.b	#2,d0
000057CE 6600                       		bne.s	End_MoveSonic3
000057D0 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000057D6 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000057D8 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000057DC 7000                       		moveq	#0,d0
000057DE 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000057E2 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000057E6 31C0 D014                  		move.w	d0,($FFFFD014).w
000057EA 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000057F0 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000057F6 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000057FC 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005802 4E75                       		rts	
00005804                            ; ===========================================================================
00005804                            
00005804                            End_MoveSonic3:				; XREF: End_MoveSonic
00005804 5500                       		subq.b	#2,d0
00005806 6600                       		bne.s	End_MoveSonExit
00005808 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000580C 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005812 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005818 4278 D024                  		clr.w	($FFFFD024).w
0000581C                            
0000581C                            End_MoveSonExit:
0000581C 4E75                       		rts	
0000581E                            ; End of function End_MoveSonic
0000581E                            
0000581E                            ; ===========================================================================
0000581E                            ; ---------------------------------------------------------------------------
0000581E                            ; Object 87 - Sonic on ending sequence
0000581E                            ; ---------------------------------------------------------------------------
0000581E                            
0000581E                            Obj87:					; XREF: Obj_Index
0000581E 7000                       		moveq	#0,d0
00005820 1028 0025                  		move.b	$25(a0),d0
00005824 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005828 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
0000582C 4EF9 0000 0000             		jmp	DisplaySprite
00005832                            ; ===========================================================================
00005832 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005836 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
0000583A 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000583E 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005842 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005846                            ; ===========================================================================
00005846                            
00005846                            Obj87_Main:				; XREF: Obj87_Index
00005846 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000584C 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000584E 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005854 317C 00D8 0030             		move.w	#$D8,$30(a0)
0000585A 4E75                       		rts	
0000585C                            ; ===========================================================================
0000585C                            
0000585C                            Obj87_Main2:				; XREF: Obj87_Main
0000585C 5428 0025                  		addq.b	#2,$25(a0)
00005860 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005868 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000586E 117C 0004 0001             		move.b	#4,1(a0)
00005874 4228 0022                  		clr.b	$22(a0)
00005878 117C 0002 0018             		move.b	#2,$18(a0)
0000587E 117C 0000 001A             		move.b	#0,$1A(a0)
00005884 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
0000588A                            
0000588A                            Obj87_MakeEmlds:			; XREF: Obj87_Index
0000588A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000588E 6600                       		bne.s	Obj87_Wait
00005890 5428 0025                  		addq.b	#2,$25(a0)
00005894 317C 0001 001C             		move.w	#1,$1C(a0)
0000589A 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000058A0                            
000058A0                            Obj87_Wait:
000058A0 4E75                       		rts	
000058A2                            ; ===========================================================================
000058A2                            
000058A2                            Obj87_LookUp:				; XREF: Obj87_Index
000058A2 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000058AA 6600                       		bne.s	locret_5480
000058AC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000058B2 317C 005A 0030             		move.w	#$5A,$30(a0)
000058B8 5428 0025                  		addq.b	#2,$25(a0)
000058BC                            
000058BC                            locret_5480:
000058BC 4E75                       		rts	
000058BE                            ; ===========================================================================
000058BE                            
000058BE                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000058BE 5368 0030                  		subq.w	#1,$30(a0)
000058C2 6600                       		bne.s	Obj87_Wait2
000058C4 43F8 D400                  		lea	($FFFFD400).w,a1
000058C8 323C 00FF                  		move.w	#$FF,d1
000058CC                            
000058CC                            Obj87_ClrLoop:
000058CC 4299                       		clr.l	(a1)+
000058CE 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000058D2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000058D8 5428 0025                  		addq.b	#2,$25(a0)
000058DC 117C 0001 001C             		move.b	#1,$1C(a0)
000058E2 317C 003C 0030             		move.w	#$3C,$30(a0)
000058E8                            
000058E8                            Obj87_Wait2:
000058E8 4E75                       		rts	
000058EA                            ; ===========================================================================
000058EA                            
000058EA                            Obj87_MakeLogo:				; XREF: Obj87_Index
000058EA 5368 0030                  		subq.w	#1,$30(a0)
000058EE 6600                       		bne.s	Obj87_Wait3
000058F0 5428 0025                  		addq.b	#2,$25(a0)
000058F4 317C 00B4 0030             		move.w	#$B4,$30(a0)
000058FA 117C 0002 001C             		move.b	#2,$1C(a0)
00005900 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005906                            
00005906                            Obj87_Wait3:
00005906 4E75                       		rts	
00005908                            ; ===========================================================================
00005908                            
00005908                            Obj87_Animate:				; XREF: Obj87_Index
00005908 43F9 0000 0000             		lea	(Ani_obj87).l,a1
0000590E 4EF9 0000 0000             		jmp	AnimateSprite
00005914                            ; ===========================================================================
00005914                            
00005914                            Obj87_Leap:				; XREF: Obj87_Index
00005914 5368 0030                  		subq.w	#1,$30(a0)
00005918 6600                       		bne.s	Obj87_Wait4
0000591A 5428 0025                  		addq.b	#2,$25(a0)
0000591E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005926 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000592C 117C 0004 0001             		move.b	#4,1(a0)
00005932 4228 0022                  		clr.b	$22(a0)
00005936 117C 0002 0018             		move.b	#2,$18(a0)
0000593C 117C 0005 001A             		move.b	#5,$1A(a0)
00005942 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005948 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000594E 60B8                       		bra.s	Obj87_Animate
00005950                            ; ===========================================================================
00005950                            
00005950                            Obj87_Wait4:				; XREF: Obj87_Leap
00005950 4E75                       		rts	
00005952                            ; ===========================================================================
00005952                            Ani_obj87:
00005952                            	include "_anim\obj87.asm"
00005952                            ; ---------------------------------------------------------------------------
00005952                            ; Animation script - Sonic on the ending sequence
00005952                            ; ---------------------------------------------------------------------------
00005952 0000                       		dc.w byte_551C-Ani_obj87
00005954 0000                       		dc.w byte_552A-Ani_obj87
00005956 0000                       		dc.w byte_5534-Ani_obj87
00005958 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005966 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005970 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005978                            		even
00005978                            		even
00005978                            
00005978                            ; ===========================================================================
00005978                            ; ---------------------------------------------------------------------------
00005978                            ; Object 88 - chaos emeralds on	the ending sequence
00005978                            ; ---------------------------------------------------------------------------
00005978                            
00005978                            Obj88:					; XREF: Obj_Index
00005978 7000                       		moveq	#0,d0
0000597A 1028 0024                  		move.b	$24(a0),d0
0000597E 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005982 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005986 4EF9 0000 0000             		jmp	DisplaySprite
0000598C                            ; ===========================================================================
0000598C 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
0000598E 0000                       		dc.w Obj88_Move-Obj88_Index
00005990                            ; ===========================================================================
00005990                            
00005990                            Obj88_Main:				; XREF: Obj88_Index
00005990 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005996 6700                       		beq.s	Obj88_Main2
00005998 588F                       		addq.l	#4,sp
0000599A 4E75                       		rts	
0000599C                            ; ===========================================================================
0000599C                            
0000599C                            Obj88_Main2:				; XREF: Obj88_Main
0000599C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000059A2 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000059A8 2248                       		movea.l	a0,a1
000059AA 7600                       		moveq	#0,d3
000059AC 7401                       		moveq	#1,d2
000059AE 7205                       		moveq	#5,d1
000059B0                            
000059B0                            Obj88_MainLoop:
000059B0 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000059B4 5429 0024                  		addq.b	#2,$24(a1)
000059B8 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000059C0 337C 03C5 0002             		move.w	#$3C5,2(a1)
000059C6 137C 0004 0001             		move.b	#4,1(a1)
000059CC 137C 0001 0018             		move.b	#1,$18(a1)
000059D2 3368 0008 0038             		move.w	8(a0),$38(a1)
000059D8 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000059DE 1342 001C                  		move.b	d2,$1C(a1)
000059E2 1342 001A                  		move.b	d2,$1A(a1)
000059E6 5202                       		addq.b	#1,d2
000059E8 1343 0026                  		move.b	d3,$26(a1)
000059EC 0603 002A                  		addi.b	#$2A,d3
000059F0 43E9 0040                  		lea	$40(a1),a1
000059F4 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000059F8                            
000059F8                            Obj88_Move:				; XREF: Obj88_Index
000059F8 3028 003E                  		move.w	$3E(a0),d0
000059FC D168 0026                  		add.w	d0,$26(a0)
00005A00 1028 0026                  		move.b	$26(a0),d0
00005A04 4EB9 0000 2C64             		jsr	(CalcSine).l
00005A0A 7800                       		moveq	#0,d4
00005A0C 1828 003C                  		move.b	$3C(a0),d4
00005A10 C3C4                       		muls.w	d4,d1
00005A12 E081                       		asr.l	#8,d1
00005A14 C1C4                       		muls.w	d4,d0
00005A16 E080                       		asr.l	#8,d0
00005A18 D268 0038                  		add.w	$38(a0),d1
00005A1C D068 003A                  		add.w	$3A(a0),d0
00005A20 3141 0008                  		move.w	d1,8(a0)
00005A24 3140 000C                  		move.w	d0,$C(a0)
00005A28 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005A2E 6700                       		beq.s	loc_55FA
00005A30 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005A36                            
00005A36                            loc_55FA:
00005A36 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005A3C 6700                       		beq.s	loc_5608
00005A3E 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005A44                            
00005A44                            loc_5608:
00005A44 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005A4A 6700                       		beq.s	locret_5614
00005A4C 5368 003A                  		subq.w	#1,$3A(a0)
00005A50                            
00005A50                            locret_5614:
00005A50 4E75                       		rts	
00005A52                            ; ===========================================================================
00005A52                            ; ---------------------------------------------------------------------------
00005A52                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005A52                            ; ---------------------------------------------------------------------------
00005A52                            
00005A52                            Obj89:					; XREF: Obj_Index
00005A52 7000                       		moveq	#0,d0
00005A54 1028 0024                  		move.b	$24(a0),d0
00005A58 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005A5C 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005A60                            ; ===========================================================================
00005A60 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005A62 0000                       		dc.w Obj89_Move-Obj89_Index
00005A64 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005A66                            ; ===========================================================================
00005A66                            
00005A66                            Obj89_Main:				; XREF: Obj89_Index
00005A66 5428 0024                  		addq.b	#2,$24(a0)
00005A6A 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005A70 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005A76 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005A7E 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005A84 117C 0000 0001             		move.b	#0,1(a0)
00005A8A 117C 0000 0018             		move.b	#0,$18(a0)
00005A90                            
00005A90                            Obj89_Move:				; XREF: Obj89_Index
00005A90 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005A96 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005A98 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005A9E 4EB9 0000 0000             		jsr	DisplaySprite
00005AA4                            ; ===========================================================================
00005AA4                            
00005AA4                            Obj89_Delay:				; XREF: Obj89_Move
00005AA4 5428 0024                  		addq.b	#2,$24(a0)
00005AA8 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005AAE                            
00005AAE                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005AAE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005AB2 6A00                       		bpl.s	Obj89_Display
00005AB4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005ABA                            
00005ABA                            Obj89_Display:
00005ABA 4EB9 0000 0000             		jsr	DisplaySprite
00005AC0                            ; ===========================================================================
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - Sonic on the ending	sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            Map_obj87:
00005AC0                            	include "_maps\obj87.asm"
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - Sonic on the ending	sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005AC4 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005AC8 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005ACC 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005AD0 02                         byte_5690:	dc.b 2
00005AD1 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005AD6 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005ADB 03                         byte_569B:	dc.b 3
00005ADC FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005AE1 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005AE6 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005AEB 02                         byte_56AB:	dc.b 2
00005AEC EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005AF1 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005AF6 02                         byte_56B6:	dc.b 2
00005AF7 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005AFC FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005B01 02                         byte_56C1:	dc.b 2
00005B02 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005B07 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005B0C 03                         byte_56CC:	dc.b 3
00005B0D EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005B12 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005B17 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005B1C 07                         byte_56DC:	dc.b 7
00005B1D B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005B22 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005B27 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005B2C CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005B31 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005B36 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005B3B EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005B40 18                         byte_5700:	dc.b $18
00005B41 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005B46 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005B4B 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005B50 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005B55 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005B5A 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005B5F 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005B64 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005B69 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005B6E B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005B73 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005B78 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005B7D C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005B82 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005B87 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005B8C D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005B91 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005B96 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005B9B E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005BA0 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005BA5 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005BAA E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005BAF F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005BB4 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005BBA 00                         		even
00005BBA 00                         		even
00005BBA                            
00005BBA                            ; ---------------------------------------------------------------------------
00005BBA                            ; Sprite mappings - chaos emeralds on the ending sequence
00005BBA                            ; ---------------------------------------------------------------------------
00005BBA                            Map_obj88:
00005BBA                            	include "_maps\obj88.asm"
00005BBA                            ; ---------------------------------------------------------------------------
00005BBA                            ; Sprite mappings - chaos emeralds on the ending sequence
00005BBA                            ; ---------------------------------------------------------------------------
00005BBA 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005BBE 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005BC2 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005BC6 0000                       		dc.w byte_57AC-Map_obj88
00005BC8 01                         byte_5788:	dc.b 1
00005BC9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005BCE 01                         byte_578E:	dc.b 1
00005BCF F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005BD4 01                         byte_5794:	dc.b 1
00005BD5 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005BDA 01                         byte_579A:	dc.b 1
00005BDB F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005BE0 01                         byte_57A0:	dc.b 1
00005BE1 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005BE6 01                         byte_57A6:	dc.b 1
00005BE7 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005BEC 01                         byte_57AC:	dc.b 1
00005BED F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005BF2                            		even
00005BF2                            		even
00005BF2                            
00005BF2                            ; ---------------------------------------------------------------------------
00005BF2                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005BF2                            ; ---------------------------------------------------------------------------
00005BF2                            Map_obj89:
00005BF2                            	include "_maps\obj89.asm"
00005BF2                            ; ---------------------------------------------------------------------------
00005BF2                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005BF2                            ; ---------------------------------------------------------------------------
00005BF2 0000                       		dc.w byte_57B4-Map_obj89
00005BF4 03                         byte_57B4:	dc.b 3
00005BF5 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005BFA F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005BFF F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005C04                            		even
00005C04                            		even
00005C04                            
00005C04                            ; ===========================================================================
00005C04                            ; ---------------------------------------------------------------------------
00005C04                            ; Credits ending sequence
00005C04                            ; ---------------------------------------------------------------------------
00005C04                            
00005C04                            Credits:				; XREF: GameModeArray
00005C04 6100 BBFC                  		bsr.w	ClearPLC
00005C08 6100 C432                  		bsr.w	Pal_FadeFrom
00005C0C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C12 3CBC 8004                  		move.w	#$8004,(a6)
00005C16 3CBC 8230                  		move.w	#$8230,(a6)
00005C1A 3CBC 8407                  		move.w	#$8407,(a6)
00005C1E 3CBC 9001                  		move.w	#$9001,(a6)
00005C22 3CBC 9200                  		move.w	#$9200,(a6)
00005C26 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C2A 3CBC 8720                  		move.w	#$8720,(a6)
00005C2E 4238 F64E                  		clr.b	($FFFFF64E).w
00005C32 6100 B8B4                  		bsr.w	ClearScreen
00005C36 43F8 D000                  		lea	($FFFFD000).w,a1
00005C3A 7000                       		moveq	#0,d0
00005C3C 323C 07FF                  		move.w	#$7FF,d1
00005C40                            
00005C40                            Cred_ClrObjRam:
00005C40 22C0                       		move.l	d0,(a1)+
00005C42 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005C46                            
00005C46 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005C50 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005C56 6100 BA0C                  		bsr.w	NemDec
00005C5A 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005C5E 7000                       		moveq	#0,d0
00005C60 323C 001F                  		move.w	#$1F,d1
00005C64                            
00005C64                            Cred_ClrPallet:
00005C64 22C0                       		move.l	d0,(a1)+
00005C66 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005C6A                            
00005C6A 7003                       		moveq	#3,d0
00005C6C 6100 C678                  		bsr.w	PalLoad1	; load Sonic's pallet
00005C70 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005C76 4EB9 0000 0000             		jsr	ObjectsLoad
00005C7C 4EB9 0000 0000             		jsr	BuildSprites
00005C82 6100 0000                  		bsr.w	EndingDemoLoad
00005C86 7000                       		moveq	#0,d0
00005C88 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005C8C E948                       		lsl.w	#4,d0
00005C8E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005C94 45F2 0000                  		lea	(a2,d0.w),a2
00005C98 7000                       		moveq	#0,d0
00005C9A 1012                       		move.b	(a2),d0
00005C9C 6700                       		beq.s	loc_5862
00005C9E 6100 BB04                  		bsr.w	LoadPLC		; load level patterns
00005CA2                            
00005CA2                            loc_5862:
00005CA2 7001                       		moveq	#1,d0
00005CA4 6100 BAFE                  		bsr.w	LoadPLC		; load standard	level patterns
00005CA8 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005CAE 6100 C2E6                  		bsr.w	Pal_FadeTo
00005CB2                            
00005CB2                            Cred_WaitLoop:
00005CB2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005CB8 6100 CF78                  		bsr.w	DelayProgram
00005CBC 6100 BB52                  		bsr.w	RunPLC_RAM
00005CC0 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005CC4 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005CC6 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005CCA 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005CCC 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005CD2 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005CD6 4E75                       		rts	
00005CD8                            
00005CD8                            ; ---------------------------------------------------------------------------
00005CD8                            ; Ending sequence demo loading subroutine
00005CD8                            ; ---------------------------------------------------------------------------
00005CD8                            
00005CD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005CD8                            
00005CD8                            
00005CD8                            EndingDemoLoad:				; XREF: Credits
00005CD8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005CDC 0240 000F                  		andi.w	#$F,d0
00005CE0 D040                       		add.w	d0,d0
00005CE2 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005CE6 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005CEA 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005CEE 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005CF4 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005CF6 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005CFC 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005D02 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005D08 7000                       		moveq	#0,d0
00005D0A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005D0E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005D12 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005D16 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005D1A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005D20 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005D22 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005D28 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005D2C 303C 0008                  		move.w	#8,d0
00005D30                            
00005D30                            EndDemo_LampLoad:
00005D30 24D9                       		move.l	(a1)+,(a2)+
00005D32 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005D36                            
00005D36                            EndDemo_Exit:
00005D36 4E75                       		rts	
00005D38                            ; End of function EndingDemoLoad
00005D38                            
00005D38                            ; ===========================================================================
00005D38                            ; ---------------------------------------------------------------------------
00005D38                            ; Levels used in the end sequence demos
00005D38                            ; ---------------------------------------------------------------------------
00005D38                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005D48                            
00005D48                            ; ---------------------------------------------------------------------------
00005D48                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005D48                            ; ---------------------------------------------------------------------------
00005D48                            EndDemo_LampVar:
00005D48 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005D4A 0A00 062C 000D             		dc.w $A00, $62C, $D
00005D50 0000 0000                  		dc.l 0
00005D54 0000                       		dc.b 0,	0
00005D56 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005D6A 0101                       		dc.b 1,	1
00005D6C                            ; ===========================================================================
00005D6C                            ; ---------------------------------------------------------------------------
00005D6C                            ; "TRY AGAIN" and "END"	screens
00005D6C                            ; ---------------------------------------------------------------------------
00005D6C                            
00005D6C                            TryAgainEnd:				; XREF: Credits
00005D6C 6100 BA94                  		bsr.w	ClearPLC
00005D70 6100 C2CA                  		bsr.w	Pal_FadeFrom
00005D74 4DF9 00C0 0004             		lea	($C00004).l,a6
00005D7A 3CBC 8004                  		move.w	#$8004,(a6)
00005D7E 3CBC 8230                  		move.w	#$8230,(a6)
00005D82 3CBC 8407                  		move.w	#$8407,(a6)
00005D86 3CBC 9001                  		move.w	#$9001,(a6)
00005D8A 3CBC 9200                  		move.w	#$9200,(a6)
00005D8E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005D92 3CBC 8720                  		move.w	#$8720,(a6)
00005D96 4238 F64E                  		clr.b	($FFFFF64E).w
00005D9A 6100 B74C                  		bsr.w	ClearScreen
00005D9E 43F8 D000                  		lea	($FFFFD000).w,a1
00005DA2 7000                       		moveq	#0,d0
00005DA4 323C 07FF                  		move.w	#$7FF,d1
00005DA8                            
00005DA8                            TryAg_ClrObjRam:
00005DA8 22C0                       		move.l	d0,(a1)+
00005DAA 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005DAE                            
00005DAE 701D                       		moveq	#$1D,d0
00005DB0 6100 BB5E                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005DB4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005DB8 7000                       		moveq	#0,d0
00005DBA 323C 001F                  		move.w	#$1F,d1
00005DBE                            
00005DBE                            TryAg_ClrPallet:
00005DBE 22C0                       		move.l	d0,(a1)+
00005DC0 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005DC4                            
00005DC4 7013                       		moveq	#$13,d0
00005DC6 6100 C51E                  		bsr.w	PalLoad1	; load ending pallet
00005DCA 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005DCE 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005DD4 4EB9 0000 0000             		jsr	ObjectsLoad
00005DDA 4EB9 0000 0000             		jsr	BuildSprites
00005DE0 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005DE6 6100 C1AE                  		bsr.w	Pal_FadeTo
00005DEA                            
00005DEA                            ; ---------------------------------------------------------------------------
00005DEA                            ; "TRY AGAIN" and "END"	screen main loop
00005DEA                            ; ---------------------------------------------------------------------------
00005DEA                            TryAg_MainLoop:
00005DEA 6100 B7E0                  		bsr.w	PauseGame
00005DEE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005DF4 6100 CE3C                  		bsr.w	DelayProgram
00005DF8 4EB9 0000 0000             		jsr	ObjectsLoad
00005DFE 4EB9 0000 0000             		jsr	BuildSprites
00005E04 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005E0A 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005E0C 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005E10 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005E12 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005E18 67D0                       		beq.s	TryAg_MainLoop
00005E1A                            
00005E1A                            TryAg_Exit:
00005E1A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005E20 4E75                       		rts	
00005E22                            
00005E22                            ; ===========================================================================
00005E22                            ; ---------------------------------------------------------------------------
00005E22                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005E22                            ; ---------------------------------------------------------------------------
00005E22                            
00005E22                            Obj8B:					; XREF: Obj_Index
00005E22 7000                       		moveq	#0,d0
00005E24 1028 0024                  		move.b	$24(a0),d0
00005E28 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005E2C 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005E30 4EF9 0000 0000             		jmp	DisplaySprite
00005E36                            ; ===========================================================================
00005E36 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005E38 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005E3A 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005E3C 0000                       		dc.w loc_5A8E-Obj8B_Index
00005E3E                            ; ===========================================================================
00005E3E                            
00005E3E                            Obj8B_Main:				; XREF: Obj8B_Index
00005E3E 5428 0024                  		addq.b	#2,$24(a0)
00005E42 317C 0120 0008             		move.w	#$120,8(a0)
00005E48 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005E4E 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005E56 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005E5C 117C 0000 0001             		move.b	#0,1(a0)
00005E62 117C 0002 0018             		move.b	#2,$18(a0)
00005E68 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005E6E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005E74 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005E76 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005E7C 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005E82 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005E88 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005E8E                            
00005E8E                            Obj8B_Animate:				; XREF: Obj8B_Index
00005E8E 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005E94 4EF9 0000 0000             		jmp	AnimateSprite
00005E9A                            ; ===========================================================================
00005E9A                            
00005E9A                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005E9A 5428 0024                  		addq.b	#2,$24(a0)
00005E9E 7002                       		moveq	#2,d0
00005EA0 0828 0000 001C             		btst	#0,$1C(a0)
00005EA6 6700                       		beq.s	loc_5A6A
00005EA8 4440                       		neg.w	d0
00005EAA                            
00005EAA                            loc_5A6A:
00005EAA 43F8 D800                  		lea	($FFFFD800).w,a1
00005EAE 7205                       		moveq	#5,d1
00005EB0                            
00005EB0                            loc_5A70:
00005EB0 1340 003E                  		move.b	d0,$3E(a1)
00005EB4 3400                       		move.w	d0,d2
00005EB6 E742                       		asl.w	#3,d2
00005EB8 D529 0026                  		add.b	d2,$26(a1)
00005EBC 43E9 0040                  		lea	$40(a1),a1
00005EC0 51C9 FFEE                  		dbf	d1,loc_5A70
00005EC4 5228 001A                  		addq.b	#1,$1A(a0)
00005EC8 317C 0070 0030             		move.w	#112,$30(a0)
00005ECE                            
00005ECE                            loc_5A8E:				; XREF: Obj8B_Index
00005ECE 5368 0030                  		subq.w	#1,$30(a0)
00005ED2 6A00                       		bpl.s	locret_5AA0
00005ED4 0868 0000 001C             		bchg	#0,$1C(a0)
00005EDA 117C 0002 0024             		move.b	#2,$24(a0)
00005EE0                            
00005EE0                            locret_5AA0:
00005EE0 4E75                       		rts	
00005EE2                            ; ===========================================================================
00005EE2                            Ani_obj8B:
00005EE2                            	include "_anim\obj8B.asm"
00005EE2                            ; ---------------------------------------------------------------------------
00005EE2                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005EE2                            ; ---------------------------------------------------------------------------
00005EE2 0000                       		dc.w byte_5AA8-Ani_obj8B
00005EE4 0000                       		dc.w byte_5AAC-Ani_obj8B
00005EE6 0000                       		dc.w byte_5AB0-Ani_obj8B
00005EE8 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005EEC 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005EF0 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005F02                            		even
00005F02                            		even
00005F02                            
00005F02                            ; ===========================================================================
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            
00005F02                            Obj8C:					; XREF: Obj_Index
00005F02 7000                       		moveq	#0,d0
00005F04 1028 0024                  		move.b	$24(a0),d0
00005F08 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005F0C 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005F10 4EF9 0000 0000             		jmp	DisplaySprite
00005F16                            ; ===========================================================================
00005F16 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005F18 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005F1A                            ; ===========================================================================
00005F1A                            
00005F1A                            Obj8C_Main:				; XREF: Obj8C_Index
00005F1A 2248                       		movea.l	a0,a1
00005F1C 7400                       		moveq	#0,d2
00005F1E 7600                       		moveq	#0,d3
00005F20 7205                       		moveq	#5,d1
00005F22 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005F26                            
00005F26                            Obj8C_MakeEms:				; XREF: loc_5B42
00005F26 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005F2A 5429 0024                  		addq.b	#2,$24(a1)
00005F2E 237C 0000 5BBA 0004        		move.l	#Map_obj88,4(a1)
00005F36 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005F3C 137C 0000 0001             		move.b	#0,1(a1)
00005F42 137C 0001 0018             		move.b	#1,$18(a1)
00005F48 337C 0104 0008             		move.w	#$104,8(a1)
00005F4E 337C 0120 0038             		move.w	#$120,$38(a1)
00005F54 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005F5A 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005F60 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005F66 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005F6A                            
00005F6A                            Obj8C_ChkEms:
00005F6A 7000                       		moveq	#0,d0
00005F6C 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005F70 5340                       		subq.w	#1,d0
00005F72 6500                       		bcs.s	loc_5B42
00005F74                            
00005F74                            Obj8C_ChkEmLoop:
00005F74 B433 0000                  		cmp.b	(a3,d0.w),d2
00005F78 6600                       		bne.s	loc_5B3E
00005F7A 5202                       		addq.b	#1,d2
00005F7C 60EC                       		bra.s	Obj8C_ChkEms
00005F7E                            ; ===========================================================================
00005F7E                            
00005F7E                            loc_5B3E:
00005F7E 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005F82                            
00005F82                            loc_5B42:
00005F82 1342 001A                  		move.b	d2,$1A(a1)
00005F86 5229 001A                  		addq.b	#1,$1A(a1)
00005F8A 5202                       		addq.b	#1,d2
00005F8C 137C 0080 0026             		move.b	#$80,$26(a1)
00005F92 1343 001E                  		move.b	d3,$1E(a1)
00005F96 1343 001F                  		move.b	d3,$1F(a1)
00005F9A 0643 000A                  		addi.w	#$A,d3
00005F9E 43E9 0040                  		lea	$40(a1),a1
00005FA2 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005FA6                            
00005FA6                            Obj8C_Move:				; XREF: Obj8C_Index
00005FA6 4A68 003E                  		tst.w	$3E(a0)
00005FAA 6700                       		beq.s	locret_5BBA
00005FAC 4A28 001E                  		tst.b	$1E(a0)
00005FB0 6700                       		beq.s	loc_5B78
00005FB2 5328 001E                  		subq.b	#1,$1E(a0)
00005FB6 6600                       		bne.s	loc_5B80
00005FB8                            
00005FB8                            loc_5B78:
00005FB8 3028 003E                  		move.w	$3E(a0),d0
00005FBC D168 0026                  		add.w	d0,$26(a0)
00005FC0                            
00005FC0                            loc_5B80:
00005FC0 1028 0026                  		move.b	$26(a0),d0
00005FC4 6700                       		beq.s	loc_5B8C
00005FC6 0C00 0080                  		cmpi.b	#$80,d0
00005FCA 6600                       		bne.s	loc_5B96
00005FCC                            
00005FCC                            loc_5B8C:
00005FCC 4268 003E                  		clr.w	$3E(a0)
00005FD0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005FD6                            
00005FD6                            loc_5B96:
00005FD6 4EB9 0000 2C64             		jsr	(CalcSine).l
00005FDC 7800                       		moveq	#0,d4
00005FDE 1828 003C                  		move.b	$3C(a0),d4
00005FE2 C3C4                       		muls.w	d4,d1
00005FE4 E081                       		asr.l	#8,d1
00005FE6 C1C4                       		muls.w	d4,d0
00005FE8 E080                       		asr.l	#8,d0
00005FEA D268 0038                  		add.w	$38(a0),d1
00005FEE D068 003A                  		add.w	$3A(a0),d0
00005FF2 3141 0008                  		move.w	d1,8(a0)
00005FF6 3140 000A                  		move.w	d0,$A(a0)
00005FFA                            
00005FFA                            locret_5BBA:
00005FFA 4E75                       		rts	
00005FFC                            ; ===========================================================================
00005FFC                            ; ---------------------------------------------------------------------------
00005FFC                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005FFC                            ; ---------------------------------------------------------------------------
00005FFC                            Map_obj8B:
00005FFC                            	include "_maps\obj8B.asm"
00005FFC                            ; ---------------------------------------------------------------------------
00005FFC                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005FFC                            ; ---------------------------------------------------------------------------
00005FFC 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006000 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006004 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006008 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000600C 08                         byte_5BCC:	dc.b 8
0000600D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006012 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006017 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000601C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006021 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006026 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000602B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006030 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006035 08                         byte_5BF5:	dc.b 8
00006036 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000603B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006040 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006045 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000604A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000604F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006054 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006059 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000605E 08                         byte_5C1E:	dc.b 8
0000605F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006064 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006069 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000606E F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006073 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006078 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000607D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006082 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006087 08                         byte_5C47:	dc.b 8
00006088 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000608D F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006092 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006097 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
0000609C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000060A1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000060A6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060AB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060B0 0C                         byte_5C70:	dc.b $C
000060B1 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000060B6 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000060BB 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000060C0 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000060C5 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000060CA F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000060CF 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000060D4 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000060D9 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000060DE 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000060E3 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000060E8 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000060ED 0A                         byte_5CAD:	dc.b $A
000060EE D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000060F3 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000060F8 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000060FD D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006102 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006107 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000610C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006111 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006116 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000611B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006120 0A                         byte_5CE0:	dc.b $A
00006121 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006126 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000612B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006130 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006135 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000613A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000613F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006144 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006149 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000614E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006153 0C                         byte_5D13:	dc.b $C
00006154 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006159 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000615E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006163 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006168 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
0000616D FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006172 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006177 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
0000617C 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006181 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006186 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000618B 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006190                            		even
00006190                            		even
00006190                            
00006190                            ; ---------------------------------------------------------------------------
00006190                            ; Ending sequence demos
00006190                            ; ---------------------------------------------------------------------------
00006190                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000061BE                            		even
000061BE                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000061FE                            		even
000061FE                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000622E                            		even
0000622E                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000625E                            		even
0000625E                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000627E                            		even
0000627E                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000629E                            		even
0000629E                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000062CE                            		even
000062CE                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000062FE                            		even
000062FE                            
000062FE                            ; ---------------------------------------------------------------------------
000062FE                            ; Subroutine to	load level boundaries and start	locations
000062FE                            ; ---------------------------------------------------------------------------
000062FE                            
000062FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062FE                            
000062FE                            
000062FE                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000062FE 7000                       		moveq	#0,d0
00006300 11C0 F740                  		move.b	d0,($FFFFF740).w
00006304 11C0 F741                  		move.b	d0,($FFFFF741).w
00006308 11C0 F746                  		move.b	d0,($FFFFF746).w
0000630C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006310 11C0 F742                  		move.b	d0,($FFFFF742).w
00006314 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006318 ED08                       		lsl.b	#6,d0
0000631A E848                       		lsr.w	#4,d0
0000631C 3200                       		move.w	d0,d1
0000631E D040                       		add.w	d0,d0
00006320 D041                       		add.w	d1,d0
00006322 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006326 3018                       		move.w	(a0)+,d0
00006328 31C0 F730                  		move.w	d0,($FFFFF730).w
0000632C 2018                       		move.l	(a0)+,d0
0000632E 21C0 F728                  		move.l	d0,($FFFFF728).w
00006332 21C0 F720                  		move.l	d0,($FFFFF720).w
00006336 2018                       		move.l	(a0)+,d0
00006338 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000633C 21C0 F724                  		move.l	d0,($FFFFF724).w
00006340 3038 F728                  		move.w	($FFFFF728).w,d0
00006344 0640 0240                  		addi.w	#$240,d0
00006348 31C0 F732                  		move.w	d0,($FFFFF732).w
0000634C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006352 3018                       		move.w	(a0)+,d0
00006354 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006358 6000 0000                  		bra.w	LevSz_ChkLamp
0000635C                            ; ===========================================================================
0000635C                            ; ---------------------------------------------------------------------------
0000635C                            ; Level size array and ending start location array
0000635C                            ; ---------------------------------------------------------------------------
0000635C                            LevelSizeArray:	incbin	misc\lvl_size.bin
000064AC                            		even
000064AC                            
000064AC                            EndingStLocArray:
000064AC                            		incbin	misc\sloc_end.bin
000064CC                            		even
000064CC                            
000064CC                            ; ===========================================================================
000064CC                            
000064CC                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000064CC 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000064D0 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000064D2 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000064D8 3238 D008                  		move.w	($FFFFD008).w,d1
000064DC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000064E0 6000                       		bra.s	loc_60D0
000064E2                            ; ===========================================================================
000064E2                            
000064E2                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000064E2 3038 FE10                  		move.w	($FFFFFE10).w,d0
000064E6 ED08                       		lsl.b	#6,d0
000064E8 E848                       		lsr.w	#4,d0
000064EA 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000064EE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000064F2 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000064F4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000064F8 5340                       		subq.w	#1,d0
000064FA E548                       		lsl.w	#2,d0
000064FC 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006500                            
00006500                            LevSz_SonicPos:
00006500 7200                       		moveq	#0,d1
00006502 3219                       		move.w	(a1)+,d1
00006504 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006508 7000                       		moveq	#0,d0
0000650A 3011                       		move.w	(a1),d0
0000650C 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006510                            
00006510                            loc_60D0:				; XREF: LevSz_ChkLamp
00006510 0441 00A0                  		subi.w	#$A0,d1
00006514 6400                       		bcc.s	loc_60D8
00006516 7200                       		moveq	#0,d1
00006518                            
00006518                            loc_60D8:
00006518 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000651C B242                       		cmp.w	d2,d1
0000651E 6500                       		bcs.s	loc_60E2
00006520 3202                       		move.w	d2,d1
00006522                            
00006522                            loc_60E2:
00006522 31C1 F700                  		move.w	d1,($FFFFF700).w
00006526 0440 0060                  		subi.w	#$60,d0
0000652A 6400                       		bcc.s	loc_60EE
0000652C 7000                       		moveq	#0,d0
0000652E                            
0000652E                            loc_60EE:
0000652E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006532 6D00                       		blt.s	loc_60F8
00006534 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006538                            
00006538                            loc_60F8:
00006538 31C0 F704                  		move.w	d0,($FFFFF704).w
0000653C 6100 0000                  		bsr.w	BgScrollSpeed
00006540 7000                       		moveq	#0,d0
00006542 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006546 E508                       		lsl.b	#2,d0
00006548 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000654E 6000 0000                  		bra.w	LevSz_Unk
00006552                            ; ===========================================================================
00006552                            ; ---------------------------------------------------------------------------
00006552                            ; Sonic	start location array
00006552                            ; ---------------------------------------------------------------------------
00006552                            StartLocArray:	incbin	misc\sloc_lev.bin
000065C2                            		even
000065C2                            
000065C2                            ; ---------------------------------------------------------------------------
000065C2                            ; Which	256x256	tiles contain loops or roll-tunnels
000065C2                            ; ---------------------------------------------------------------------------
000065C2                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000065C2                            ; loop,	loop, tunnel, tunnel
000065C2                            ; ---------------------------------------------------------------------------
000065C2                            LoopTileNums:	incbin	misc\loopnums.bin
000065DE                            		even
000065DE                            
000065DE                            ; ===========================================================================
000065DE                            
000065DE                            LevSz_Unk:				; XREF: LevelSizeLoad
000065DE 7000                       		moveq	#0,d0
000065E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000065E4 E748                       		lsl.w	#3,d0
000065E6 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000065EA 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000065EE 24D9                       		move.l	(a1)+,(a2)+
000065F0 24D9                       		move.l	(a1)+,(a2)+
000065F2 4E75                       		rts	
000065F4                            ; End of function LevelSizeLoad
000065F4                            
000065F4                            ; ===========================================================================
000065F4 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000065FC 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006604 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000660C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006614 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000661C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006624 0070 0100 0100 0100        		dc.l $700100, $1000100
0000662C                            
0000662C                            ; ---------------------------------------------------------------------------
0000662C                            ; Subroutine to	set scroll speed of some backgrounds
0000662C                            ; ---------------------------------------------------------------------------
0000662C                            
0000662C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000662C                            
0000662C                            
0000662C                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000662C 4A38 FE30                  		tst.b	($FFFFFE30).w
00006630 6600                       		bne.s	loc_6206
00006632 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006636 31C0 F714                  		move.w	d0,($FFFFF714).w
0000663A 31C1 F708                  		move.w	d1,($FFFFF708).w
0000663E 31C1 F710                  		move.w	d1,($FFFFF710).w
00006642 31C1 F718                  		move.w	d1,($FFFFF718).w
00006646                            
00006646                            loc_6206:
00006646 7400                       		moveq	#0,d2
00006648 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000664C D442                       		add.w	d2,d2
0000664E 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006652 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006656                            ; End of function BgScrollSpeed
00006656                            
00006656                            ; ===========================================================================
00006656 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000665A 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000665E 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006662 0000                       		dc.w BgScroll_End-BgScroll_Index
00006664                            ; ===========================================================================
00006664                            
00006664                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006664 6000 0000                  		bra.w	Deform_GHZ
00006668                            ; ===========================================================================
00006668                            
00006668                            BgScroll_LZ:				; XREF: BgScroll_Index
00006668 E280                       		asr.l	#1,d0
0000666A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000666E 4E75                       		rts	
00006670                            ; ===========================================================================
00006670                            
00006670                            BgScroll_MZ:				; XREF: BgScroll_Index
00006670 4E75                       		rts	
00006672                            ; ===========================================================================
00006672                            
00006672                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006672 E280                       		asr.l	#1,d0
00006674 0640 00C0                  		addi.w	#$C0,d0
00006678 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000667C 4E75                       		rts	
0000667E                            ; ===========================================================================
0000667E                            
0000667E                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000667E E980                       		asl.l	#4,d0
00006680 2400                       		move.l	d0,d2
00006682 E380                       		asl.l	#1,d0
00006684 D082                       		add.l	d2,d0
00006686 E080                       		asr.l	#8,d0
00006688 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000668C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006690 4E75                       		rts	
00006692                            ; ===========================================================================
00006692                            
00006692                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006692 E980                       		asl.l	#4,d0
00006694 E380                       		asl.l	#1,d0
00006696 E080                       		asr.l	#8,d0
00006698 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000669C 4E75                       		rts	
0000669E                            ; ===========================================================================
0000669E                            
0000669E                            BgScroll_End:				; XREF: BgScroll_Index
0000669E 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000066A4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000066AA 4E75                       		rts	
000066AC                            ; ===========================================================================
000066AC 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000066B2 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000066B8 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000066BE 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000066C4 4E75                       		rts
000066C6                            
000066C6                            ; ---------------------------------------------------------------------------
000066C6                            ; Background layer deformation subroutines
000066C6                            ; ---------------------------------------------------------------------------
000066C6                            
000066C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066C6                            
000066C6                            
000066C6                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000066C6 4A38 F744                  		tst.b	($FFFFF744).w
000066CA 6700                       		beq.s	loc_628E
000066CC 4E75                       		rts	
000066CE                            ; ===========================================================================
000066CE                            
000066CE                            loc_628E:
000066CE 4278 F754                  		clr.w	($FFFFF754).w
000066D2 4278 F756                  		clr.w	($FFFFF756).w
000066D6 4278 F758                  		clr.w	($FFFFF758).w
000066DA 4278 F75A                  		clr.w	($FFFFF75A).w
000066DE 6100 0000                  		bsr.w	ScrollHoriz
000066E2 6100 0000                  		bsr.w	ScrollVertical
000066E6 6100 0000                  		bsr.w	DynScrResizeLoad
000066EA 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000066F0 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000066F6 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000066FC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006702 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006708 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000670E 7000                       		moveq	#0,d0
00006710 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006714 D040                       		add.w	d0,d0
00006716 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000671A 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000671E                            ; End of function DeformBgLayer
0000671E                            
0000671E                            ; ===========================================================================
0000671E                            ; ---------------------------------------------------------------------------
0000671E                            ; Offset index for background layer deformation	code
0000671E                            ; ---------------------------------------------------------------------------
0000671E 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006722 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006726 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000672A 0000                       		dc.w Deform_GHZ-Deform_Index
0000672C                            ; ---------------------------------------------------------------------------
0000672C                            ; Green	Hill Zone background layer deformation code
0000672C                            ; ---------------------------------------------------------------------------
0000672C                            
0000672C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000672C                            
0000672C                            
0000672C                            Deform_GHZ:				; XREF: Deform_Index
0000672C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006730 48C4                       		ext.l	d4
00006732 EB84                       		asl.l	#5,d4
00006734 2204                       		move.l	d4,d1
00006736 E384                       		asl.l	#1,d4
00006738 D881                       		add.l	d1,d4
0000673A 7A00                       		moveq	#0,d5
0000673C 6100 0000                  		bsr.w	ScrollBlock1
00006740 6100 0000                  		bsr.w	ScrollBlock4
00006744 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006748 3038 F704                  		move.w	($FFFFF704).w,d0
0000674C 0240 07FF                  		andi.w	#$7FF,d0
00006750 EA48                       		lsr.w	#5,d0
00006752 4440                       		neg.w	d0
00006754 0640 0026                  		addi.w	#$26,d0
00006758 31C0 F714                  		move.w	d0,($FFFFF714).w
0000675C 3800                       		move.w	d0,d4
0000675E 6100 0000                  		bsr.w	ScrollBlock3
00006762 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006768 323C 006F                  		move.w	#$6F,d1
0000676C 9244                       		sub.w	d4,d1
0000676E 3038 F700                  		move.w	($FFFFF700).w,d0
00006772 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006778 6600                       		bne.s	loc_633C
0000677A 7000                       		moveq	#0,d0
0000677C                            
0000677C                            loc_633C:
0000677C 4440                       		neg.w	d0
0000677E 4840                       		swap	d0
00006780 3038 F708                  		move.w	($FFFFF708).w,d0
00006784 4440                       		neg.w	d0
00006786                            
00006786                            loc_6346:
00006786 22C0                       		move.l	d0,(a1)+
00006788 51C9 FFFC                  		dbf	d1,loc_6346
0000678C 323C 0027                  		move.w	#$27,d1
00006790 3038 F710                  		move.w	($FFFFF710).w,d0
00006794 4440                       		neg.w	d0
00006796                            
00006796                            loc_6356:
00006796 22C0                       		move.l	d0,(a1)+
00006798 51C9 FFFC                  		dbf	d1,loc_6356
0000679C 3038 F710                  		move.w	($FFFFF710).w,d0
000067A0 0640 0000                  		addi.w	#0,d0
000067A4 3438 F700                  		move.w	($FFFFF700).w,d2
000067A8 0642 FE00                  		addi.w	#-$200,d2
000067AC 9440                       		sub.w	d0,d2
000067AE 48C2                       		ext.l	d2
000067B0 E182                       		asl.l	#8,d2
000067B2 85FC 0068                  		divs.w	#$68,d2
000067B6 48C2                       		ext.l	d2
000067B8 E182                       		asl.l	#8,d2
000067BA 7600                       		moveq	#0,d3
000067BC 3600                       		move.w	d0,d3
000067BE 323C 0047                  		move.w	#$47,d1
000067C2 D244                       		add.w	d4,d1
000067C4                            
000067C4                            loc_6384:
000067C4 3003                       		move.w	d3,d0
000067C6 4440                       		neg.w	d0
000067C8 22C0                       		move.l	d0,(a1)+
000067CA 4843                       		swap	d3
000067CC D682                       		add.l	d2,d3
000067CE 4843                       		swap	d3
000067D0 51C9 FFF2                  		dbf	d1,loc_6384
000067D4 4E75                       		rts	
000067D6                            ; End of function Deform_GHZ
000067D6                            
000067D6                            ; ---------------------------------------------------------------------------
000067D6                            ; Labyrinth Zone background layer deformation code
000067D6                            ; ---------------------------------------------------------------------------
000067D6                            
000067D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067D6                            
000067D6                            
000067D6                            Deform_LZ:				; XREF: Deform_Index
000067D6 3838 F73A                  		move.w	($FFFFF73A).w,d4
000067DA 48C4                       		ext.l	d4
000067DC EF84                       		asl.l	#7,d4
000067DE 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000067E2 48C5                       		ext.l	d5
000067E4 EF85                       		asl.l	#7,d5
000067E6 6100 0000                  		bsr.w	ScrollBlock1
000067EA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067F0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000067F4 323C 00DF                  		move.w	#$DF,d1
000067F8 3038 F700                  		move.w	($FFFFF700).w,d0
000067FC 4440                       		neg.w	d0
000067FE 4840                       		swap	d0
00006800 3038 F708                  		move.w	($FFFFF708).w,d0
00006804 4440                       		neg.w	d0
00006806                            
00006806                            loc_63C6:
00006806 22C0                       		move.l	d0,(a1)+
00006808 51C9 FFFC                  		dbf	d1,loc_63C6
0000680C 3038 F646                  		move.w	($FFFFF646).w,d0
00006810 9078 F704                  		sub.w	($FFFFF704).w,d0
00006814 4E75                       		rts	
00006816                            ; End of function Deform_LZ
00006816                            
00006816                            ; ---------------------------------------------------------------------------
00006816                            ; Marble Zone background layer deformation code
00006816                            ; ---------------------------------------------------------------------------
00006816                            
00006816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006816                            
00006816                            
00006816                            Deform_MZ:				; XREF: Deform_Index
00006816 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000681A 48C4                       		ext.l	d4
0000681C ED84                       		asl.l	#6,d4
0000681E 2204                       		move.l	d4,d1
00006820 E384                       		asl.l	#1,d4
00006822 D881                       		add.l	d1,d4
00006824 7A00                       		moveq	#0,d5
00006826 6100 0000                  		bsr.w	ScrollBlock1
0000682A 303C 0200                  		move.w	#$200,d0
0000682E 3238 F704                  		move.w	($FFFFF704).w,d1
00006832 0441 01C8                  		subi.w	#$1C8,d1
00006836 6500                       		bcs.s	loc_6402
00006838 3401                       		move.w	d1,d2
0000683A D241                       		add.w	d1,d1
0000683C D242                       		add.w	d2,d1
0000683E E441                       		asr.w	#2,d1
00006840 D041                       		add.w	d1,d0
00006842                            
00006842                            loc_6402:
00006842 31C0 F714                  		move.w	d0,($FFFFF714).w
00006846 6100 0000                  		bsr.w	ScrollBlock3
0000684A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006850 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006854 323C 00DF                  		move.w	#$DF,d1
00006858 3038 F700                  		move.w	($FFFFF700).w,d0
0000685C 4440                       		neg.w	d0
0000685E 4840                       		swap	d0
00006860 3038 F708                  		move.w	($FFFFF708).w,d0
00006864 4440                       		neg.w	d0
00006866                            
00006866                            loc_6426:
00006866 22C0                       		move.l	d0,(a1)+
00006868 51C9 FFFC                  		dbf	d1,loc_6426
0000686C 4E75                       		rts	
0000686E                            ; End of function Deform_MZ
0000686E                            
0000686E                            ; ---------------------------------------------------------------------------
0000686E                            ; Star Light Zone background layer deformation code
0000686E                            ; ---------------------------------------------------------------------------
0000686E                            
0000686E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000686E                            
0000686E                            
0000686E                            Deform_SLZ:				; XREF: Deform_Index
0000686E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006872 48C4                       		ext.l	d4
00006874 EB84                       		asl.l	#5,d4
00006876 2204                       		move.l	d4,d1
00006878 E384                       		asl.l	#1,d4
0000687A D881                       		add.l	d1,d4
0000687C 7A00                       		moveq	#0,d5
0000687E 6100 0000                  		bsr.w	ScrollBlock1
00006882 6100 0000                  		bsr.w	ScrollBlock3
00006886 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000688A                            	;	move.w	($FFFFF704).w,d0
0000688A                            	;	andi.w	#$7FF,d0
0000688A EA48                       		lsr.w	#5,d0
0000688C 4440                       		neg.w	d0
0000688E 0640 0026                  		addi.w	#$26,d0
00006892 31C0 F714                  		move.w	d0,($FFFFF714).w
00006896 3800                       		move.w	d0,d4
00006898                            	;	bsr.w	ScrollBlock3
00006898 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
0000689E 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000068A2                            
000068A2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068A6 4440                       		neg.w	d0			; negate (positive to negative)
000068A8 4840                       		swap	d0			; send to the left side of d0
000068AA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068AE 45F8 A800                  		lea	($FFFFA800).w,a2
000068B2 069A 0000 5000             		addi.l	#$5000,(a2)+
000068B8 069A 0000 C000             		addi.l	#$C000,(a2)+
000068BE 3038 A800                  		move.w	($FFFFA800).w,d0
000068C2 4440                       		neg.w	d0			; negate (positive to negative)
000068C4 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000068C6 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068CA                            slz_DeformLoop_1:
000068CA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068CC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000068D0                            
000068D0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068D4 4440                       		neg.w	d0			; negate (positive to negative)
000068D6 4840                       		swap	d0			; send to the left side of d0
000068D8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068DC 45F8 A800                  		lea	($FFFFA800).w,a2
000068E0 069A 0000 5000             		addi.l	#$5000,(a2)+
000068E6 069A 0000 C000             		addi.l	#$C000,(a2)+
000068EC 3038 A800                  		move.w	($FFFFA800).w,d0
000068F0 4440                       		neg.w	d0			; negate (positive to negative)
000068F2 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000068F4 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068F8                            slz_DeformLoop_2:
000068F8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068FA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
000068FE                            
000068FE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006902 4440                       		neg.w	d0			; negate (positive to negative)
00006904 4840                       		swap	d0			; send to the left side of d0
00006906 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000690A 45F8 A800                  		lea	($FFFFA800).w,a2
0000690E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006914 069A 0000 C000             		addi.l	#$C000,(a2)+
0000691A 3038 A800                  		move.w	($FFFFA800).w,d0
0000691E 4440                       		neg.w	d0			; negate (positive to negative)
00006920 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006922 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006926                            slz_DeformLoop_3:
00006926 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006928 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
0000692C                            
0000692C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006930 4440                       		neg.w	d0			; negate (positive to negative)
00006932 4840                       		swap	d0			; send to the left side of d0
00006934 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006938 45F8 A800                  		lea	($FFFFA800).w,a2
0000693C 069A 0000 5000             		addi.l	#$5000,(a2)+
00006942 069A 0000 C000             		addi.l	#$C000,(a2)+
00006948 3038 A800                  		move.w	($FFFFA800).w,d0
0000694C 4440                       		neg.w	d0			; negate (positive to negative)
0000694E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006950 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006954                            slz_DeformLoop_4:
00006954 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006956 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
0000695A                            
0000695A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000695E 4440                       		neg.w	d0			; negate (positive to negative)
00006960 4840                       		swap	d0			; send to the left side of d0
00006962 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006966 45F8 A800                  		lea	($FFFFA800).w,a2
0000696A 069A 0000 5000             		addi.l	#$5000,(a2)+
00006970 069A 0000 C000             		addi.l	#$C000,(a2)+
00006976 3038 A800                  		move.w	($FFFFA800).w,d0
0000697A 4440                       		neg.w	d0			; negate (positive to negative)
0000697C E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
0000697E 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006982                            slz_DeformLoop_5:
00006982 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006984 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006988                            
00006988 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000698C 4440                       		neg.w	d0			; negate (positive to negative)
0000698E 4840                       		swap	d0			; send to the left side of d0
00006990 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006994 4440                       		neg.w	d0			; negate (positive to negative)
00006996 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006998 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000699C                            slz_DeformLoop_6:
0000699C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000699E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
000069A2                            
000069A2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069A6 4440                       		neg.w	d0			; negate (positive to negative)
000069A8 4840                       		swap	d0			; send to the left side of d0
000069AA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069AE 4440                       		neg.w	d0			; negate (positive to negative)
000069B0 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
000069B2 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069B6                            slz_DeformLoop_7:
000069B6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069B8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
000069BC                            
000069BC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069C0 4440                       		neg.w	d0			; negate (positive to negative)
000069C2 4840                       		swap	d0			; send to the left side of d0
000069C4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069C8 4440                       		neg.w	d0			; negate (positive to negative)
000069CA EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
000069CC 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069D0                            slz_DeformLoop_8:
000069D0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069D2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
000069D6                            
000069D6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069DA 4440                       		neg.w	d0			; negate (positive to negative)
000069DC 4840                       		swap	d0			; send to the left side of d0
000069DE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069E2 4440                       		neg.w	d0			; negate (positive to negative)
000069E4 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000069E6 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069EA                            slz_DeformLoop_9:
000069EA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069EC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000069F0                            
000069F0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069F4 4440                       		neg.w	d0			; negate (positive to negative)
000069F6 4840                       		swap	d0			; send to the left side of d0
000069F8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069FC 4440                       		neg.w	d0			; negate (positive to negative)
000069FE E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A00 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A04                            slz_DeformLoop_10:
00006A04 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A06 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006A0A                            
00006A0A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A0E 4440                       		neg.w	d0			; negate (positive to negative)
00006A10 4840                       		swap	d0			; send to the left side of d0
00006A12 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A16 4440                       		neg.w	d0			; negate (positive to negative)
00006A18 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A1A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A1E                            slz_DeformLoop_11:
00006A1E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A20 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006A24                            
00006A24 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A28 4440                       		neg.w	d0			; negate (positive to negative)
00006A2A 4840                       		swap	d0			; send to the left side of d0
00006A2C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A30 4440                       		neg.w	d0			; negate (positive to negative)
00006A32 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006A34 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A38                            slz_DeformLoop_12:
00006A38 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A3A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006A3E                            
00006A3E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A42 4440                       		neg.w	d0			; negate (positive to negative)
00006A44 4840                       		swap	d0			; send to the left side of d0
00006A46 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A4A 4440                       		neg.w	d0			; negate (positive to negative)
00006A4C E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006A4E 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A52                            slz_DeformLoop_13:
00006A52 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A54 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006A58 4E75                       		rts	
00006A5A                            ; End of function Deform_SLZ
00006A5A 4E75                       		rts	
00006A5C                            ; End of function Deform_SLZ_2
00006A5C                            
00006A5C                            ; ---------------------------------------------------------------------------
00006A5C                            ; Spring Yard Zone background layer deformation	code
00006A5C                            ; ---------------------------------------------------------------------------
00006A5C                            
00006A5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A5C                            
00006A5C                            
00006A5C                            Deform_SYZ:				; XREF: Deform_Index
00006A5C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A60 48C4                       		ext.l	d4
00006A62 ED84                       		asl.l	#6,d4
00006A64 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A68 48C5                       		ext.l	d5
00006A6A E985                       		asl.l	#4,d5
00006A6C 2205                       		move.l	d5,d1
00006A6E E385                       		asl.l	#1,d5
00006A70 DA81                       		add.l	d1,d5
00006A72 6100 0000                  		bsr.w	ScrollBlock1
00006A76 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A7C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A80 323C 00DF                  		move.w	#$DF,d1
00006A84 3038 F700                  		move.w	($FFFFF700).w,d0
00006A88 4440                       		neg.w	d0
00006A8A 4840                       		swap	d0
00006A8C 3038 F708                  		move.w	($FFFFF708).w,d0
00006A90 4440                       		neg.w	d0
00006A92                            
00006A92                            loc_653C:
00006A92 22C0                       		move.l	d0,(a1)+
00006A94 51C9 FFFC                  		dbf	d1,loc_653C
00006A98 4E75                       		rts	
00006A9A                            ; End of function Deform_SYZ
00006A9A                            
00006A9A                            ; ---------------------------------------------------------------------------
00006A9A                            ; Scrap	Brain Zone background layer deformation	code
00006A9A                            ; ---------------------------------------------------------------------------
00006A9A                            
00006A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A9A                            
00006A9A                            
00006A9A                            Deform_SBZ:				; XREF: Deform_Index
00006A9A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A9E 48C4                       		ext.l	d4
00006AA0 ED84                       		asl.l	#6,d4
00006AA2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006AA6 48C5                       		ext.l	d5
00006AA8 E985                       		asl.l	#4,d5
00006AAA E385                       		asl.l	#1,d5
00006AAC 6100 0000                  		bsr.w	ScrollBlock1
00006AB0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AB6 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006ABA 323C 00DF                  		move.w	#$DF,d1
00006ABE 3038 F700                  		move.w	($FFFFF700).w,d0
00006AC2 4440                       		neg.w	d0
00006AC4 4840                       		swap	d0
00006AC6 3038 F708                  		move.w	($FFFFF708).w,d0
00006ACA 4440                       		neg.w	d0
00006ACC                            
00006ACC                            loc_6576:
00006ACC 22C0                       		move.l	d0,(a1)+
00006ACE 51C9 FFFC                  		dbf	d1,loc_6576
00006AD2 4E75                       		rts	
00006AD4                            ; End of function Deform_SBZ
00006AD4                            
00006AD4                            ; ---------------------------------------------------------------------------
00006AD4                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006AD4                            ; ---------------------------------------------------------------------------
00006AD4                            
00006AD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AD4                            
00006AD4                            
00006AD4                            ScrollHoriz:				; XREF: DeformBgLayer
00006AD4 3838 F700                  		move.w	($FFFFF700).w,d4
00006AD8 6100                       		bsr.s	ScrollHoriz2
00006ADA 3038 F700                  		move.w	($FFFFF700).w,d0
00006ADE 0240 0010                  		andi.w	#$10,d0
00006AE2 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006AE6 B300                       		eor.b	d1,d0
00006AE8 6600                       		bne.s	locret_65B0
00006AEA 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006AF0 3038 F700                  		move.w	($FFFFF700).w,d0
00006AF4 9044                       		sub.w	d4,d0
00006AF6 6A00                       		bpl.s	loc_65AA
00006AF8 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006AFE 4E75                       		rts	
00006B00                            ; ===========================================================================
00006B00                            
00006B00                            loc_65AA:
00006B00 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006B06                            
00006B06                            locret_65B0:
00006B06 4E75                       		rts	
00006B08                            ; End of function ScrollHoriz
00006B08                            
00006B08                            
00006B08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B08                            
00006B08                            
00006B08                            ScrollHoriz2:				; XREF: ScrollHoriz
00006B08 3038 D008                  		move.w	($FFFFD008).w,d0
00006B0C 9078 F700                  		sub.w	($FFFFF700).w,d0
00006B10 0440 0090                  		subi.w	#$90,d0
00006B14 6500                       		bcs.s	loc_65F6
00006B16 0440 0010                  		subi.w	#$10,d0
00006B1A 6400                       		bcc.s	loc_65CC
00006B1C 4278 F73A                  		clr.w	($FFFFF73A).w
00006B20 4E75                       		rts	
00006B22                            ; ===========================================================================
00006B22                            
00006B22                            loc_65CC:
00006B22 0C40 0010                  		cmpi.w	#$10,d0
00006B26 6500                       		bcs.s	loc_65D6
00006B28 303C 0010                  		move.w	#$10,d0
00006B2C                            
00006B2C                            loc_65D6:
00006B2C D078 F700                  		add.w	($FFFFF700).w,d0
00006B30 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006B34 6D00                       		blt.s	loc_65E4
00006B36 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006B3A                            
00006B3A                            loc_65E4:
00006B3A 3200                       		move.w	d0,d1
00006B3C 9278 F700                  		sub.w	($FFFFF700).w,d1
00006B40 E141                       		asl.w	#8,d1
00006B42 31C0 F700                  		move.w	d0,($FFFFF700).w
00006B46 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006B4A 4E75                       		rts	
00006B4C                            ; ===========================================================================
00006B4C                            
00006B4C                            loc_65F6:				; XREF: ScrollHoriz2
00006B4C D078 F700                  		add.w	($FFFFF700).w,d0
00006B50 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006B54 6EE4                       		bgt.s	loc_65E4
00006B56 3038 F728                  		move.w	($FFFFF728).w,d0
00006B5A 60DE                       		bra.s	loc_65E4
00006B5C                            ; End of function ScrollHoriz2
00006B5C                            
00006B5C                            ; ===========================================================================
00006B5C 4A40                       		tst.w	d0
00006B5E 6A00                       		bpl.s	loc_6610
00006B60 303C FFFE                  		move.w	#-2,d0
00006B64 60E6                       		bra.s	loc_65F6
00006B66                            ; ===========================================================================
00006B66                            
00006B66                            loc_6610:
00006B66 303C 0002                  		move.w	#2,d0
00006B6A 60B6                       		bra.s	loc_65CC
00006B6C                            
00006B6C                            ; ---------------------------------------------------------------------------
00006B6C                            ; Subroutine to	scroll the level vertically as Sonic moves
00006B6C                            ; ---------------------------------------------------------------------------
00006B6C                            
00006B6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B6C                            
00006B6C                            
00006B6C                            ScrollVertical:				; XREF: DeformBgLayer
00006B6C 7200                       		moveq	#0,d1
00006B6E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006B72 9078 F704                  		sub.w	($FFFFF704).w,d0
00006B76 0838 0002 D022             		btst	#2,($FFFFD022).w
00006B7C 6700                       		beq.s	loc_662A
00006B7E 5B40                       		subq.w	#5,d0
00006B80                            
00006B80                            loc_662A:
00006B80 0838 0001 D022             		btst	#1,($FFFFD022).w
00006B86 6700                       		beq.s	loc_664A
00006B88 0640 0020                  		addi.w	#$20,d0
00006B8C 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006B90 6500                       		bcs.s	loc_6696
00006B92 0440 0040                  		subi.w	#$40,d0
00006B96 6400                       		bcc.s	loc_6696
00006B98 4A38 F75C                  		tst.b	($FFFFF75C).w
00006B9C 6600                       		bne.s	loc_66A8
00006B9E 6000                       		bra.s	loc_6656
00006BA0                            ; ===========================================================================
00006BA0                            
00006BA0                            loc_664A:
00006BA0 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006BA4 6600                       		bne.s	loc_665C
00006BA6 4A38 F75C                  		tst.b	($FFFFF75C).w
00006BAA 6600                       		bne.s	loc_66A8
00006BAC                            
00006BAC                            loc_6656:
00006BAC 4278 F73C                  		clr.w	($FFFFF73C).w
00006BB0 4E75                       		rts	
00006BB2                            ; ===========================================================================
00006BB2                            
00006BB2                            loc_665C:
00006BB2 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006BB8 6600                       		bne.s	loc_6684
00006BBA 3238 D014                  		move.w	($FFFFD014).w,d1
00006BBE 6A00                       		bpl.s	loc_666C
00006BC0 4441                       		neg.w	d1
00006BC2                            
00006BC2                            loc_666C:
00006BC2 0C41 0800                  		cmpi.w	#$800,d1
00006BC6 6400                       		bcc.s	loc_6696
00006BC8 323C 0600                  		move.w	#$600,d1
00006BCC 0C40 0006                  		cmpi.w	#6,d0
00006BD0 6E00                       		bgt.s	loc_66F6
00006BD2 0C40 FFFA                  		cmpi.w	#-6,d0
00006BD6 6D00                       		blt.s	loc_66C0
00006BD8 6000                       		bra.s	loc_66AE
00006BDA                            ; ===========================================================================
00006BDA                            
00006BDA                            loc_6684:
00006BDA 323C 0200                  		move.w	#$200,d1
00006BDE 0C40 0002                  		cmpi.w	#2,d0
00006BE2 6E00                       		bgt.s	loc_66F6
00006BE4 0C40 FFFE                  		cmpi.w	#-2,d0
00006BE8 6D00                       		blt.s	loc_66C0
00006BEA 6000                       		bra.s	loc_66AE
00006BEC                            ; ===========================================================================
00006BEC                            
00006BEC                            loc_6696:
00006BEC 323C 1000                  		move.w	#$1000,d1
00006BF0 0C40 0010                  		cmpi.w	#$10,d0
00006BF4 6E00                       		bgt.s	loc_66F6
00006BF6 0C40 FFF0                  		cmpi.w	#-$10,d0
00006BFA 6D00                       		blt.s	loc_66C0
00006BFC 6000                       		bra.s	loc_66AE
00006BFE                            ; ===========================================================================
00006BFE                            
00006BFE                            loc_66A8:
00006BFE 7000                       		moveq	#0,d0
00006C00 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006C04                            
00006C04                            loc_66AE:
00006C04 7200                       		moveq	#0,d1
00006C06 3200                       		move.w	d0,d1
00006C08 D278 F704                  		add.w	($FFFFF704).w,d1
00006C0C 4A40                       		tst.w	d0
00006C0E 6A00 0000                  		bpl.w	loc_6700
00006C12 6000 0000                  		bra.w	loc_66CC
00006C16                            ; ===========================================================================
00006C16                            
00006C16                            loc_66C0:
00006C16 4441                       		neg.w	d1
00006C18 48C1                       		ext.l	d1
00006C1A E181                       		asl.l	#8,d1
00006C1C D2B8 F704                  		add.l	($FFFFF704).w,d1
00006C20 4841                       		swap	d1
00006C22                            
00006C22                            loc_66CC:
00006C22 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006C26 6E00                       		bgt.s	loc_6724
00006C28 0C41 FF00                  		cmpi.w	#-$100,d1
00006C2C 6E00                       		bgt.s	loc_66F0
00006C2E 0241 07FF                  		andi.w	#$7FF,d1
00006C32 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006C38 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006C3E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006C44 6000                       		bra.s	loc_6724
00006C46                            ; ===========================================================================
00006C46                            
00006C46                            loc_66F0:
00006C46 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006C4A 6000                       		bra.s	loc_6724
00006C4C                            ; ===========================================================================
00006C4C                            
00006C4C                            loc_66F6:
00006C4C 48C1                       		ext.l	d1
00006C4E E181                       		asl.l	#8,d1
00006C50 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006C54 4841                       		swap	d1
00006C56                            
00006C56                            loc_6700:
00006C56 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006C5A 6D00                       		blt.s	loc_6724
00006C5C 0441 0800                  		subi.w	#$800,d1
00006C60 6500                       		bcs.s	loc_6720
00006C62 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006C68 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006C6E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006C74 6000                       		bra.s	loc_6724
00006C76                            ; ===========================================================================
00006C76                            
00006C76                            loc_6720:
00006C76 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006C7A                            
00006C7A                            loc_6724:
00006C7A 3838 F704                  		move.w	($FFFFF704).w,d4
00006C7E 4841                       		swap	d1
00006C80 2601                       		move.l	d1,d3
00006C82 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006C86 E09B                       		ror.l	#8,d3
00006C88 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006C8C 21C1 F704                  		move.l	d1,($FFFFF704).w
00006C90 3038 F704                  		move.w	($FFFFF704).w,d0
00006C94 0240 0010                  		andi.w	#$10,d0
00006C98 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006C9C B300                       		eor.b	d1,d0
00006C9E 6600                       		bne.s	locret_6766
00006CA0 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006CA6 3038 F704                  		move.w	($FFFFF704).w,d0
00006CAA 9044                       		sub.w	d4,d0
00006CAC 6A00                       		bpl.s	loc_6760
00006CAE 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006CB4 4E75                       		rts	
00006CB6                            ; ===========================================================================
00006CB6                            
00006CB6                            loc_6760:
00006CB6 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006CBC                            
00006CBC                            locret_6766:
00006CBC 4E75                       		rts	
00006CBE                            ; End of function ScrollVertical
00006CBE                            
00006CBE                            
00006CBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CBE                            
00006CBE                            
00006CBE                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006CBE 2438 F708                  		move.l	($FFFFF708).w,d2
00006CC2 2002                       		move.l	d2,d0
00006CC4 D084                       		add.l	d4,d0
00006CC6 21C0 F708                  		move.l	d0,($FFFFF708).w
00006CCA 2200                       		move.l	d0,d1
00006CCC 4841                       		swap	d1
00006CCE 0241 0010                  		andi.w	#$10,d1
00006CD2 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006CD6 B701                       		eor.b	d3,d1
00006CD8 6600                       		bne.s	loc_679C
00006CDA 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006CE0 9082                       		sub.l	d2,d0
00006CE2 6A00                       		bpl.s	loc_6796
00006CE4 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006CEA 6000                       		bra.s	loc_679C
00006CEC                            ; ===========================================================================
00006CEC                            
00006CEC                            loc_6796:
00006CEC 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006CF2                            
00006CF2                            loc_679C:
00006CF2 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006CF6 2003                       		move.l	d3,d0
00006CF8 D085                       		add.l	d5,d0
00006CFA 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006CFE 2200                       		move.l	d0,d1
00006D00 4841                       		swap	d1
00006D02 0241 0010                  		andi.w	#$10,d1
00006D06 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006D0A B501                       		eor.b	d2,d1
00006D0C 6600                       		bne.s	locret_67D0
00006D0E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006D14 9083                       		sub.l	d3,d0
00006D16 6A00                       		bpl.s	loc_67CA
00006D18 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006D1E 4E75                       		rts	
00006D20                            ; ===========================================================================
00006D20                            
00006D20                            loc_67CA:
00006D20 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006D26                            
00006D26                            locret_67D0:
00006D26 4E75                       		rts	
00006D28                            ; End of function ScrollBlock1
00006D28                            
00006D28                            
00006D28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D28                            
00006D28                            
00006D28                            ScrollBlock2:				; XREF: Deform_SLZ
00006D28 2438 F708                  		move.l	($FFFFF708).w,d2
00006D2C 2002                       		move.l	d2,d0
00006D2E D084                       		add.l	d4,d0
00006D30 21C0 F708                  		move.l	d0,($FFFFF708).w
00006D34 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006D38 2003                       		move.l	d3,d0
00006D3A D085                       		add.l	d5,d0
00006D3C 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006D40 2200                       		move.l	d0,d1
00006D42 4841                       		swap	d1
00006D44 0241 0010                  		andi.w	#$10,d1
00006D48 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006D4C B501                       		eor.b	d2,d1
00006D4E 6600                       		bne.s	locret_6812
00006D50 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006D56 9083                       		sub.l	d3,d0
00006D58 6A00                       		bpl.s	loc_680C
00006D5A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006D60 4E75                       		rts	
00006D62                            ; ===========================================================================
00006D62                            
00006D62                            loc_680C:
00006D62 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006D68                            
00006D68                            locret_6812:
00006D68 4E75                       		rts	
00006D6A                            ; End of function ScrollBlock2
00006D6A                            
00006D6A                            
00006D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D6A                            
00006D6A                            
00006D6A                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006D6A 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006D6E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006D72 3200                       		move.w	d0,d1
00006D74 0241 0010                  		andi.w	#$10,d1
00006D78 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006D7C B501                       		eor.b	d2,d1
00006D7E 6600                       		bne.s	locret_6842
00006D80 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006D86 9043                       		sub.w	d3,d0
00006D88 6A00                       		bpl.s	loc_683C
00006D8A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006D90 4E75                       		rts	
00006D92                            ; ===========================================================================
00006D92                            
00006D92                            loc_683C:
00006D92 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006D98                            
00006D98                            locret_6842:
00006D98 4E75                       		rts	
00006D9A                            ; End of function ScrollBlock3
00006D9A                            
00006D9A                            
00006D9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D9A                            
00006D9A                            
00006D9A                            ScrollBlock4:				; XREF: Deform_GHZ
00006D9A 3438 F710                  		move.w	($FFFFF710).w,d2
00006D9E 3638 F714                  		move.w	($FFFFF714).w,d3
00006DA2 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006DA6 48C0                       		ext.l	d0
00006DA8 EF80                       		asl.l	#7,d0
00006DAA D1B8 F710                  		add.l	d0,($FFFFF710).w
00006DAE 3038 F710                  		move.w	($FFFFF710).w,d0
00006DB2 0240 0010                  		andi.w	#$10,d0
00006DB6 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006DBA B300                       		eor.b	d1,d0
00006DBC 6600                       		bne.s	locret_6884
00006DBE 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006DC4 3038 F710                  		move.w	($FFFFF710).w,d0
00006DC8 9042                       		sub.w	d2,d0
00006DCA 6A00                       		bpl.s	loc_687E
00006DCC 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006DD2 6000                       		bra.s	locret_6884
00006DD4                            ; ===========================================================================
00006DD4                            
00006DD4                            loc_687E:
00006DD4 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006DDA                            
00006DDA                            locret_6884:
00006DDA 4E75                       		rts	
00006DDC                            ; End of function ScrollBlock4
00006DDC                            
00006DDC                            
00006DDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DDC                            
00006DDC                            
00006DDC                            sub_6886:				; XREF: loc_C44
00006DDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00006DE2 4DF9 00C0 0000             		lea	($C00000).l,a6
00006DE8 45F8 F756                  		lea	($FFFFF756).w,a2
00006DEC 47F8 F708                  		lea	($FFFFF708).w,a3
00006DF0 49F8 A440                  		lea	($FFFFA440).w,a4
00006DF4 343C 6000                  		move.w	#$6000,d2
00006DF8 6100 0000                  		bsr.w	sub_6954
00006DFC 45F8 F758                  		lea	($FFFFF758).w,a2
00006E00 47F8 F710                  		lea	($FFFFF710).w,a3
00006E04 6000 0000                  		bra.w	sub_69F4
00006E08                            ; End of function sub_6886
00006E08                            
00006E08                            ; ---------------------------------------------------------------------------
00006E08                            ; Subroutine to	display	correct	tiles as you move
00006E08                            ; ---------------------------------------------------------------------------
00006E08                            
00006E08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E08                            
00006E08                            
00006E08                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006E08 4BF9 00C0 0004             		lea	($C00004).l,a5
00006E0E 4DF9 00C0 0000             		lea	($C00000).l,a6
00006E14 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006E18 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006E1C 49F8 A440                  		lea	($FFFFA440).w,a4
00006E20 343C 6000                  		move.w	#$6000,d2
00006E24 6100 0000                  		bsr.w	sub_6954
00006E28 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006E2C 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006E30 6100 0000                  		bsr.w	sub_69F4
00006E34 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006E38 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006E3C 49F8 A400                  		lea	($FFFFA400).w,a4
00006E40 343C 4000                  		move.w	#$4000,d2
00006E44 4A12                       		tst.b	(a2)
00006E46 6700                       		beq.s	locret_6952
00006E48 0892 0000                  		bclr	#0,(a2)
00006E4C 6700                       		beq.s	loc_6908
00006E4E 78F0                       		moveq	#-$10,d4
00006E50 7AF0                       		moveq	#-$10,d5
00006E52 6100 0000                  		bsr.w	sub_6C20
00006E56 78F0                       		moveq	#-$10,d4
00006E58 7AF0                       		moveq	#-$10,d5
00006E5A 6100 0000                  		bsr.w	sub_6AD8
00006E5E                            
00006E5E                            loc_6908:
00006E5E 0892 0001                  		bclr	#1,(a2)
00006E62 6700                       		beq.s	loc_6922
00006E64 383C 00E0                  		move.w	#$E0,d4
00006E68 7AF0                       		moveq	#-$10,d5
00006E6A 6100 0000                  		bsr.w	sub_6C20
00006E6E 383C 00E0                  		move.w	#$E0,d4
00006E72 7AF0                       		moveq	#-$10,d5
00006E74 6100 0000                  		bsr.w	sub_6AD8
00006E78                            
00006E78                            loc_6922:
00006E78 0892 0002                  		bclr	#2,(a2)
00006E7C 6700                       		beq.s	loc_6938
00006E7E 78F0                       		moveq	#-$10,d4
00006E80 7AF0                       		moveq	#-$10,d5
00006E82 6100 0000                  		bsr.w	sub_6C20
00006E86 78F0                       		moveq	#-$10,d4
00006E88 7AF0                       		moveq	#-$10,d5
00006E8A 6100 0000                  		bsr.w	sub_6B04
00006E8E                            
00006E8E                            loc_6938:
00006E8E 0892 0003                  		bclr	#3,(a2)
00006E92 6700                       		beq.s	locret_6952
00006E94 78F0                       		moveq	#-$10,d4
00006E96 3A3C 0140                  		move.w	#$140,d5
00006E9A 6100 0000                  		bsr.w	sub_6C20
00006E9E 78F0                       		moveq	#-$10,d4
00006EA0 3A3C 0140                  		move.w	#$140,d5
00006EA4 6100 0000                  		bsr.w	sub_6B04
00006EA8                            
00006EA8                            locret_6952:
00006EA8 4E75                       		rts	
00006EAA                            ; End of function LoadTilesAsYouMove
00006EAA                            
00006EAA                            
00006EAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EAA                            
00006EAA                            
00006EAA                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006EAA 4A12                       		tst.b	(a2)
00006EAC 6700 0000                  		beq.w	locret_69F2
00006EB0 0892 0000                  		bclr	#0,(a2)
00006EB4 6700                       		beq.s	loc_6972
00006EB6 78F0                       		moveq	#-$10,d4
00006EB8 7AF0                       		moveq	#-$10,d5
00006EBA 6100 0000                  		bsr.w	sub_6C20
00006EBE 78F0                       		moveq	#-$10,d4
00006EC0 7AF0                       		moveq	#-$10,d5
00006EC2 7C1F                       		moveq	#$1F,d6
00006EC4 6100 0000                  		bsr.w	sub_6ADA
00006EC8                            
00006EC8                            loc_6972:
00006EC8 0892 0001                  		bclr	#1,(a2)
00006ECC 6700                       		beq.s	loc_698E
00006ECE 383C 00E0                  		move.w	#$E0,d4
00006ED2 7AF0                       		moveq	#-$10,d5
00006ED4 6100 0000                  		bsr.w	sub_6C20
00006ED8 383C 00E0                  		move.w	#$E0,d4
00006EDC 7AF0                       		moveq	#-$10,d5
00006EDE 7C1F                       		moveq	#$1F,d6
00006EE0 6100 0000                  		bsr.w	sub_6ADA
00006EE4                            
00006EE4                            loc_698E:
00006EE4 0892 0002                  		bclr	#2,(a2)
00006EE8 6700                       		beq.s	loc_69BE
00006EEA 78F0                       		moveq	#-$10,d4
00006EEC 7AF0                       		moveq	#-$10,d5
00006EEE 6100 0000                  		bsr.w	sub_6C20
00006EF2 78F0                       		moveq	#-$10,d4
00006EF4 7AF0                       		moveq	#-$10,d5
00006EF6 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006EFA 322B 0004                  		move.w	4(a3),d1
00006EFE 0241 FFF0                  		andi.w	#-$10,d1
00006F02 9C41                       		sub.w	d1,d6
00006F04 6D00                       		blt.s	loc_69BE
00006F06 E84E                       		lsr.w	#4,d6
00006F08 0C46 000F                  		cmpi.w	#$F,d6
00006F0C 6500                       		bcs.s	loc_69BA
00006F0E 7C0F                       		moveq	#$F,d6
00006F10                            
00006F10                            loc_69BA:
00006F10 6100 0000                  		bsr.w	sub_6B06
00006F14                            
00006F14                            loc_69BE:
00006F14 0892 0003                  		bclr	#3,(a2)
00006F18 6700                       		beq.s	locret_69F2
00006F1A 78F0                       		moveq	#-$10,d4
00006F1C 3A3C 0140                  		move.w	#$140,d5
00006F20 6100 0000                  		bsr.w	sub_6C20
00006F24 78F0                       		moveq	#-$10,d4
00006F26 3A3C 0140                  		move.w	#$140,d5
00006F2A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F2E 322B 0004                  		move.w	4(a3),d1
00006F32 0241 FFF0                  		andi.w	#-$10,d1
00006F36 9C41                       		sub.w	d1,d6
00006F38 6D00                       		blt.s	locret_69F2
00006F3A E84E                       		lsr.w	#4,d6
00006F3C 0C46 000F                  		cmpi.w	#$F,d6
00006F40 6500                       		bcs.s	loc_69EE
00006F42 7C0F                       		moveq	#$F,d6
00006F44                            
00006F44                            loc_69EE:
00006F44 6100 0000                  		bsr.w	sub_6B06
00006F48                            
00006F48                            locret_69F2:
00006F48 4E75                       		rts	
00006F4A                            ; End of function sub_6954
00006F4A                            
00006F4A                            
00006F4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F4A                            
00006F4A                            
00006F4A                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006F4A 4A12                       		tst.b	(a2)
00006F4C 6700 0000                  		beq.w	locret_6A80
00006F50 0892 0002                  		bclr	#2,(a2)
00006F54 6700                       		beq.s	loc_6A3E
00006F56 0C53 0010                  		cmpi.w	#$10,(a3)
00006F5A 6500                       		bcs.s	loc_6A3E
00006F5C 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006F60 322B 0004                  		move.w	4(a3),d1
00006F64 0241 FFF0                  		andi.w	#-$10,d1
00006F68 9841                       		sub.w	d1,d4
00006F6A 3F04                       		move.w	d4,-(sp)
00006F6C 7AF0                       		moveq	#-$10,d5
00006F6E 6100 0000                  		bsr.w	sub_6C20
00006F72 381F                       		move.w	(sp)+,d4
00006F74 7AF0                       		moveq	#-$10,d5
00006F76 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F7A 322B 0004                  		move.w	4(a3),d1
00006F7E 0241 FFF0                  		andi.w	#-$10,d1
00006F82 9C41                       		sub.w	d1,d6
00006F84 6D00                       		blt.s	loc_6A3E
00006F86 E84E                       		lsr.w	#4,d6
00006F88 0446 000E                  		subi.w	#$E,d6
00006F8C 6400                       		bcc.s	loc_6A3E
00006F8E 4446                       		neg.w	d6
00006F90 6100 0000                  		bsr.w	sub_6B06
00006F94                            
00006F94                            loc_6A3E:
00006F94 0892 0003                  		bclr	#3,(a2)
00006F98 6700                       		beq.s	locret_6A80
00006F9A 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006F9E 322B 0004                  		move.w	4(a3),d1
00006FA2 0241 FFF0                  		andi.w	#-$10,d1
00006FA6 9841                       		sub.w	d1,d4
00006FA8 3F04                       		move.w	d4,-(sp)
00006FAA 3A3C 0140                  		move.w	#$140,d5
00006FAE 6100 0000                  		bsr.w	sub_6C20
00006FB2 381F                       		move.w	(sp)+,d4
00006FB4 3A3C 0140                  		move.w	#$140,d5
00006FB8 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FBC 322B 0004                  		move.w	4(a3),d1
00006FC0 0241 FFF0                  		andi.w	#-$10,d1
00006FC4 9C41                       		sub.w	d1,d6
00006FC6 6D00                       		blt.s	locret_6A80
00006FC8 E84E                       		lsr.w	#4,d6
00006FCA 0446 000E                  		subi.w	#$E,d6
00006FCE 6400                       		bcc.s	locret_6A80
00006FD0 4446                       		neg.w	d6
00006FD2 6100 0000                  		bsr.w	sub_6B06
00006FD6                            
00006FD6                            locret_6A80:
00006FD6 4E75                       		rts	
00006FD8                            ; End of function sub_69F4
00006FD8                            
00006FD8                            ; ===========================================================================
00006FD8 4A12                       		tst.b	(a2)
00006FDA 6700                       		beq.s	locret_6AD6
00006FDC 0892 0002                  		bclr	#2,(a2)
00006FE0 6700                       		beq.s	loc_6AAC
00006FE2 383C 00D0                  		move.w	#$D0,d4
00006FE6 322B 0004                  		move.w	4(a3),d1
00006FEA 0241 FFF0                  		andi.w	#-$10,d1
00006FEE 9841                       		sub.w	d1,d4
00006FF0 3F04                       		move.w	d4,-(sp)
00006FF2 7AF0                       		moveq	#-$10,d5
00006FF4 6100 0000                  		bsr.w	sub_6C3C
00006FF8 381F                       		move.w	(sp)+,d4
00006FFA 7AF0                       		moveq	#-$10,d5
00006FFC 7C02                       		moveq	#2,d6
00006FFE 6100 0000                  		bsr.w	sub_6B06
00007002                            
00007002                            loc_6AAC:
00007002 0892 0003                  		bclr	#3,(a2)
00007006 6700                       		beq.s	locret_6AD6
00007008 383C 00D0                  		move.w	#$D0,d4
0000700C 322B 0004                  		move.w	4(a3),d1
00007010 0241 FFF0                  		andi.w	#-$10,d1
00007014 9841                       		sub.w	d1,d4
00007016 3F04                       		move.w	d4,-(sp)
00007018 3A3C 0140                  		move.w	#$140,d5
0000701C 6100 0000                  		bsr.w	sub_6C3C
00007020 381F                       		move.w	(sp)+,d4
00007022 3A3C 0140                  		move.w	#$140,d5
00007026 7C02                       		moveq	#2,d6
00007028 6100 0000                  		bsr.w	sub_6B06
0000702C                            
0000702C                            locret_6AD6:
0000702C 4E75                       		rts	
0000702E                            
0000702E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000702E                            
0000702E                            
0000702E                            sub_6AD8:				; XREF: LoadTilesAsYouMove
0000702E 7C15                       		moveq	#$15,d6
00007030                            ; End of function sub_6AD8
00007030                            
00007030                            
00007030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007030                            
00007030                            
00007030                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007030 2E3C 0080 0000             		move.l	#$800000,d7
00007036 2200                       		move.l	d0,d1
00007038                            
00007038                            loc_6AE2:
00007038 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000703C 6100 0000                  		bsr.w	sub_6BD6
00007040 2001                       		move.l	d1,d0
00007042 6100 0000                  		bsr.w	sub_6B32
00007046 5801                       		addq.b	#4,d1
00007048 0201 007F                  		andi.b	#$7F,d1
0000704C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007050 0645 0010                  		addi.w	#$10,d5
00007054 51CE FFE2                  		dbf	d6,loc_6AE2
00007058 4E75                       		rts	
0000705A                            ; End of function sub_6ADA
0000705A                            
0000705A                            
0000705A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000705A                            
0000705A                            
0000705A                            sub_6B04:				; XREF: LoadTilesAsYouMove
0000705A 7C0F                       		moveq	#$F,d6
0000705C                            ; End of function sub_6B04
0000705C                            
0000705C                            
0000705C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000705C                            
0000705C                            
0000705C                            sub_6B06:				; XREF: sub_6954
0000705C 2E3C 0080 0000             		move.l	#$800000,d7
00007062 2200                       		move.l	d0,d1
00007064                            
00007064                            loc_6B0E:
00007064 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007068 6100 0000                  		bsr.w	sub_6BD6
0000706C 2001                       		move.l	d1,d0
0000706E 6100 0000                  		bsr.w	sub_6B32
00007072 0641 0100                  		addi.w	#$100,d1
00007076 0241 0FFF                  		andi.w	#$FFF,d1
0000707A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000707E 0644 0010                  		addi.w	#$10,d4
00007082 51CE FFE0                  		dbf	d6,loc_6B0E
00007086 4E75                       		rts	
00007088                            ; End of function sub_6B06
00007088                            
00007088                            
00007088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007088                            
00007088                            
00007088                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007088 8042                       		or.w	d2,d0
0000708A 4840                       		swap	d0
0000708C 0810 0004                  		btst	#4,(a0)
00007090 6600                       		bne.s	loc_6B6E
00007092 0810 0003                  		btst	#3,(a0)
00007096 6600                       		bne.s	loc_6B4E
00007098 2A80                       		move.l	d0,(a5)
0000709A 2C99                       		move.l	(a1)+,(a6)
0000709C D087                       		add.l	d7,d0
0000709E 2A80                       		move.l	d0,(a5)
000070A0 2C99                       		move.l	(a1)+,(a6)
000070A2 4E75                       		rts	
000070A4                            ; ===========================================================================
000070A4                            
000070A4                            loc_6B4E:
000070A4 2A80                       		move.l	d0,(a5)
000070A6 2819                       		move.l	(a1)+,d4
000070A8 0A84 0800 0800             		eori.l	#$8000800,d4
000070AE 4844                       		swap	d4
000070B0 2C84                       		move.l	d4,(a6)
000070B2 D087                       		add.l	d7,d0
000070B4 2A80                       		move.l	d0,(a5)
000070B6 2819                       		move.l	(a1)+,d4
000070B8 0A84 0800 0800             		eori.l	#$8000800,d4
000070BE 4844                       		swap	d4
000070C0 2C84                       		move.l	d4,(a6)
000070C2 4E75                       		rts	
000070C4                            ; ===========================================================================
000070C4                            
000070C4                            loc_6B6E:
000070C4 0810 0003                  		btst	#3,(a0)
000070C8 6600                       		bne.s	loc_6B90
000070CA 2A80                       		move.l	d0,(a5)
000070CC 2A19                       		move.l	(a1)+,d5
000070CE 2819                       		move.l	(a1)+,d4
000070D0 0A84 1000 1000             		eori.l	#$10001000,d4
000070D6 2C84                       		move.l	d4,(a6)
000070D8 D087                       		add.l	d7,d0
000070DA 2A80                       		move.l	d0,(a5)
000070DC 0A85 1000 1000             		eori.l	#$10001000,d5
000070E2 2C85                       		move.l	d5,(a6)
000070E4 4E75                       		rts	
000070E6                            ; ===========================================================================
000070E6                            
000070E6                            loc_6B90:
000070E6 2A80                       		move.l	d0,(a5)
000070E8 2A19                       		move.l	(a1)+,d5
000070EA 2819                       		move.l	(a1)+,d4
000070EC 0A84 1800 1800             		eori.l	#$18001800,d4
000070F2 4844                       		swap	d4
000070F4 2C84                       		move.l	d4,(a6)
000070F6 D087                       		add.l	d7,d0
000070F8 2A80                       		move.l	d0,(a5)
000070FA 0A85 1800 1800             		eori.l	#$18001800,d5
00007100 4845                       		swap	d5
00007102 2C85                       		move.l	d5,(a6)
00007104 4E75                       		rts	
00007106                            ; End of function sub_6B32
00007106                            
00007106                            ; ===========================================================================
00007106 4E75                       		rts	
00007108                            ; ===========================================================================
00007108 2A80                       		move.l	d0,(a5)
0000710A 3A3C 2000                  		move.w	#$2000,d5
0000710E 3819                       		move.w	(a1)+,d4
00007110 D845                       		add.w	d5,d4
00007112 3C84                       		move.w	d4,(a6)
00007114 3819                       		move.w	(a1)+,d4
00007116 D845                       		add.w	d5,d4
00007118 3C84                       		move.w	d4,(a6)
0000711A D087                       		add.l	d7,d0
0000711C 2A80                       		move.l	d0,(a5)
0000711E 3819                       		move.w	(a1)+,d4
00007120 D845                       		add.w	d5,d4
00007122 3C84                       		move.w	d4,(a6)
00007124 3819                       		move.w	(a1)+,d4
00007126 D845                       		add.w	d5,d4
00007128 3C84                       		move.w	d4,(a6)
0000712A 4E75                       		rts	
0000712C                            
0000712C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000712C                            
0000712C                            
0000712C                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
0000712C 43F8 B000                  		lea	($FFFFB000).w,a1
00007130 D86B 0004                  		add.w	4(a3),d4
00007134 DA53                       		add.w	(a3),d5
00007136 3604                       		move.w	d4,d3
00007138 E24B                       		lsr.w	#1,d3
0000713A 0243 0380                  		andi.w	#$380,d3
0000713E E64D                       		lsr.w	#3,d5
00007140 3005                       		move.w	d5,d0
00007142 EA48                       		lsr.w	#5,d0
00007144 0240 007F                  		andi.w	#$7F,d0
00007148 D043                       		add.w	d3,d0
0000714A 76FF                       		moveq	#-1,d3
0000714C 1634 0000                  		move.b	(a4,d0.w),d3
00007150 6700                       		beq.s	locret_6C1E
00007152 5303                       		subq.b	#1,d3
00007154 0243 007F                  		andi.w	#$7F,d3
00007158 EE5B                       		ror.w	#7,d3
0000715A D844                       		add.w	d4,d4
0000715C 0244 01E0                  		andi.w	#$1E0,d4
00007160 0245 001E                  		andi.w	#$1E,d5
00007164 D644                       		add.w	d4,d3
00007166 D645                       		add.w	d5,d3
00007168 2043                       		movea.l	d3,a0
0000716A 3610                       		move.w	(a0),d3
0000716C 0243 03FF                  		andi.w	#$3FF,d3
00007170 E74B                       		lsl.w	#3,d3
00007172 D2C3                       		adda.w	d3,a1
00007174                            
00007174                            locret_6C1E:
00007174 4E75                       		rts	
00007176                            ; End of function sub_6BD6
00007176                            
00007176                            
00007176                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007176                            
00007176                            
00007176                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007176 D86B 0004                  		add.w	4(a3),d4
0000717A DA53                       		add.w	(a3),d5
0000717C 0244 00F0                  		andi.w	#$F0,d4
00007180 0245 01F0                  		andi.w	#$1F0,d5
00007184 E94C                       		lsl.w	#4,d4
00007186 E44D                       		lsr.w	#2,d5
00007188 D845                       		add.w	d5,d4
0000718A 7003                       		moveq	#3,d0
0000718C 4840                       		swap	d0
0000718E 3004                       		move.w	d4,d0
00007190 4E75                       		rts	
00007192                            ; End of function sub_6C20
00007192                            
00007192                            
00007192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007192                            ; not used
00007192                            
00007192                            
00007192                            sub_6C3C:
00007192 D86B 0004                  		add.w	4(a3),d4
00007196 DA53                       		add.w	(a3),d5
00007198 0244 00F0                  		andi.w	#$F0,d4
0000719C 0245 01F0                  		andi.w	#$1F0,d5
000071A0 E94C                       		lsl.w	#4,d4
000071A2 E44D                       		lsr.w	#2,d5
000071A4 D845                       		add.w	d5,d4
000071A6 7002                       		moveq	#2,d0
000071A8 4840                       		swap	d0
000071AA 3004                       		move.w	d4,d0
000071AC 4E75                       		rts	
000071AE                            ; End of function sub_6C3C
000071AE                            
000071AE                            ; ---------------------------------------------------------------------------
000071AE                            ; Subroutine to	load tiles as soon as the level	appears
000071AE                            ; ---------------------------------------------------------------------------
000071AE                            
000071AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071AE                            
000071AE                            
000071AE                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000071AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000071B4 4DF9 00C0 0000             		lea	($C00000).l,a6
000071BA 47F8 F700                  		lea	($FFFFF700).w,a3
000071BE 49F8 A400                  		lea	($FFFFA400).w,a4
000071C2 343C 4000                  		move.w	#$4000,d2
000071C6 6100                       		bsr.s	LoadTilesFromStart2
000071C8 47F8 F708                  		lea	($FFFFF708).w,a3
000071CC 49F8 A440                  		lea	($FFFFA440).w,a4
000071D0 343C 6000                  		move.w	#$6000,d2
000071D4                            ; End of function LoadTilesFromStart
000071D4                            
000071D4                            
000071D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071D4                            
000071D4                            
000071D4                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000071D4 78F0                       		moveq	#-$10,d4
000071D6 7C0F                       		moveq	#$F,d6
000071D8                            
000071D8                            loc_6C82:
000071D8 48E7 0E00                  		movem.l	d4-d6,-(sp)
000071DC 7A00                       		moveq	#0,d5
000071DE 3204                       		move.w	d4,d1
000071E0 6100 FF94                  		bsr.w	sub_6C20
000071E4 3801                       		move.w	d1,d4
000071E6 7A00                       		moveq	#0,d5
000071E8 7C1F                       		moveq	#$1F,d6
000071EA 6100 FE44                  		bsr.w	sub_6ADA
000071EE 4CDF 0070                  		movem.l	(sp)+,d4-d6
000071F2 0644 0010                  		addi.w	#$10,d4
000071F6 51CE FFE0                  		dbf	d6,loc_6C82
000071FA 4E75                       		rts	
000071FC                            ; End of function LoadTilesFromStart2
000071FC                            
000071FC                            ; ---------------------------------------------------------------------------
000071FC                            ; Main Load Block loading subroutine
000071FC                            ; ---------------------------------------------------------------------------
000071FC                            
000071FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071FC                            
000071FC                            
000071FC                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000071FC 7000                       		moveq	#0,d0
000071FE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007202 E948                       		lsl.w	#4,d0
00007204 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000720A 45F2 0000                  		lea	(a2,d0.w),a2
0000720E 2F0A                       		move.l	a2,-(sp)
00007210 588A                       		addq.l	#4,a2
00007212 205A                       		movea.l	(a2)+,a0
00007214 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007218 303C 0000                  		move.w	#0,d0
0000721C 6100 A724                  		bsr.w	EniDec
00007220 205A                       		movea.l	(a2)+,a0
00007222 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007228 6100 A896                  		bsr.w	KosDec
0000722C 6100 0000                  		bsr.w	LevelLayoutLoad
00007230 301A                       		move.w	(a2)+,d0
00007232 3012                       		move.w	(a2),d0
00007234 0240 00FF                  		andi.w	#$FF,d0
00007238 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000723E 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007240 700C                       		moveq	#$C,d0		; use SB3 pallet
00007242                            
00007242                            MLB_ChkSBZPal:
00007242 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007248 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
0000724A 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007250 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007252                            
00007252                            MLB_UsePal0E:
00007252 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007254                            
00007254                            MLB_NormalPal:
00007254 6100 B090                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007258 245F                       		movea.l	(sp)+,a2
0000725A 584A                       		addq.w	#4,a2
0000725C 7000                       		moveq	#0,d0
0000725E 1012                       		move.b	(a2),d0
00007260 6700                       		beq.s	locret_6D10
00007262 6100 A540                  		bsr.w	LoadPLC		; load pattern load cues
00007266                            
00007266                            locret_6D10:
00007266 4E75                       		rts	
00007268                            ; End of function MainLoadBlockLoad
00007268                            
00007268                            ; ---------------------------------------------------------------------------
00007268                            ; Level	layout loading subroutine
00007268                            ; ---------------------------------------------------------------------------
00007268                            
00007268                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007268                            
00007268                            
00007268                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007268 47F8 A400                  		lea	($FFFFA400).w,a3
0000726C 323C 01FF                  		move.w	#$1FF,d1
00007270 7000                       		moveq	#0,d0
00007272                            
00007272                            LevLoad_ClrRam:
00007272 26C0                       		move.l	d0,(a3)+
00007274 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007278                            
00007278 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
0000727C 7200                       		moveq	#0,d1
0000727E 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007282 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007286 7202                       		moveq	#2,d1
00007288                            ; End of function LevelLayoutLoad
00007288                            
00007288                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007288                            
00007288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007288                            
00007288                            
00007288                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007288 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000728C ED08                       		lsl.b	#6,d0
0000728E EA48                       		lsr.w	#5,d0
00007290 3400                       		move.w	d0,d2
00007292 D040                       		add.w	d0,d0
00007294 D042                       		add.w	d2,d0
00007296 D041                       		add.w	d1,d0
00007298 43F9 0000 0000             		lea	(Level_Index).l,a1
0000729E 3031 0000                  		move.w	(a1,d0.w),d0
000072A2 43F1 0000                  		lea	(a1,d0.w),a1
000072A6 7200                       		moveq	#0,d1
000072A8 3401                       		move.w	d1,d2
000072AA 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000072AC 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000072AE                            
000072AE                            LevLoad_NumRows:
000072AE 3001                       		move.w	d1,d0
000072B0 204B                       		movea.l	a3,a0
000072B2                            
000072B2                            LevLoad_Row:
000072B2 10D9                       		move.b	(a1)+,(a0)+
000072B4 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000072B8 47EB 0080                  		lea	$80(a3),a3	; do next row
000072BC 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000072C0 4E75                       		rts	
000072C2                            ; End of function LevelLayoutLoad2
000072C2                            
000072C2                            ; ---------------------------------------------------------------------------
000072C2                            ; Dynamic screen resize	loading	subroutine
000072C2                            ; ---------------------------------------------------------------------------
000072C2                            
000072C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072C2                            
000072C2                            
000072C2                            DynScrResizeLoad:			; XREF: DeformBgLayer
000072C2 7000                       		moveq	#0,d0
000072C4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000072C8 D040                       		add.w	d0,d0
000072CA 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000072CE 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000072D2 7202                       		moveq	#2,d1
000072D4 3038 F726                  		move.w	($FFFFF726).w,d0
000072D8 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000072DC 6700                       		beq.s	locret_6DAA
000072DE 6400                       		bcc.s	loc_6DAC
000072E0 4441                       		neg.w	d1
000072E2 3038 F704                  		move.w	($FFFFF704).w,d0
000072E6 B078 F726                  		cmp.w	($FFFFF726).w,d0
000072EA 6300                       		bls.s	loc_6DA0
000072EC 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000072F0 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000072F6                            
000072F6                            loc_6DA0:
000072F6 D378 F72E                  		add.w	d1,($FFFFF72E).w
000072FA 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007300                            
00007300                            locret_6DAA:
00007300 4E75                       		rts	
00007302                            ; ===========================================================================
00007302                            
00007302                            loc_6DAC:				; XREF: DynScrResizeLoad
00007302 3038 F704                  		move.w	($FFFFF704).w,d0
00007306 5040                       		addq.w	#8,d0
00007308 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000730C 6500                       		bcs.s	loc_6DC4
0000730E 0838 0001 D022             		btst	#1,($FFFFD022).w
00007314 6700                       		beq.s	loc_6DC4
00007316 D241                       		add.w	d1,d1
00007318 D241                       		add.w	d1,d1
0000731A                            
0000731A                            loc_6DC4:
0000731A D378 F72E                  		add.w	d1,($FFFFF72E).w
0000731E 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007324 4E75                       		rts	
00007326                            ; End of function DynScrResizeLoad
00007326                            
00007326                            ; ===========================================================================
00007326                            ; ---------------------------------------------------------------------------
00007326                            ; Offset index for dynamic screen resizing
00007326                            ; ---------------------------------------------------------------------------
00007326 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
0000732A 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000732E 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007332 0000                       		dc.w Resize_Ending-Resize_Index
00007334                            ; ===========================================================================
00007334                            ; ---------------------------------------------------------------------------
00007334                            ; Green	Hill Zone dynamic screen resizing
00007334                            ; ---------------------------------------------------------------------------
00007334                            
00007334                            Resize_GHZ:				; XREF: Resize_Index
00007334 7000                       		moveq	#0,d0
00007336 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000733A D040                       		add.w	d0,d0
0000733C 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007340 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007344                            ; ===========================================================================
00007344 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007346 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007348 0000                       		dc.w Resize_GHZ3-Resize_GHZx
0000734A                            ; ===========================================================================
0000734A                            
0000734A                            Resize_GHZ1:
0000734A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007350 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007356 6500                       		bcs.s	locret_6E08	; if not, branch
00007358 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000735E                            
0000735E                            locret_6E08:
0000735E 4E75                       		rts	
00007360                            ; ===========================================================================
00007360                            
00007360                            Resize_GHZ2:
00007360 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007366 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
0000736C 6500                       		bcs.s	locret_6E3A
0000736E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007374 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
0000737A 6500                       		bcs.s	locret_6E3A
0000737C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007382 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007388 6500                       		bcs.s	locret_6E3A
0000738A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007390                            
00007390                            locret_6E3A:
00007390 4E75                       		rts	
00007392                            ; ===========================================================================
00007392                            
00007392                            Resize_GHZ3:
00007392 7000                       		moveq	#0,d0
00007394 1038 F742                  		move.b	($FFFFF742).w,d0
00007398 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000739C 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000073A0                            ; ===========================================================================
000073A0 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000073A2 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000073A4 0000                       		dc.w Resize_GHZ3end-off_6E4A
000073A6                            ; ===========================================================================
000073A6                            
000073A6                            Resize_GHZ3main:
000073A6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000073AC 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000073B2 6500                       		bcs.s	locret_6E96
000073B4 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000073BA 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000073C0 6500                       		bcs.s	locret_6E96
000073C2 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000073C8 6500                       		bcs.s	loc_6E98
000073CA 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000073D0 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000073D6 6400                       		bcc.s	loc_6E8E
000073D8 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000073DE 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000073E4                            
000073E4                            loc_6E8E:
000073E4 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000073EA 6400                       		bcc.s	loc_6E98
000073EC                            
000073EC                            locret_6E96:
000073EC 4E75                       		rts	
000073EE                            ; ===========================================================================
000073EE                            
000073EE                            loc_6E98:
000073EE 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000073F4 5438 F742                  		addq.b	#2,($FFFFF742).w
000073F8 4E75                       		rts	
000073FA                            ; ===========================================================================
000073FA                            
000073FA                            Resize_GHZ3boss:
000073FA 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007400 6400                       		bcc.s	loc_6EB0
00007402 5538 F742                  		subq.b	#2,($FFFFF742).w
00007406                            
00007406                            loc_6EB0:
00007406 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000740C 6500                       		bcs.s	locret_6EE8
0000740E 6100 0000                  		bsr.w	SingleObjLoad
00007412 6600                       		bne.s	loc_6ED0
00007414 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007418 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000741E 337C 0280 000C             		move.w	#$280,$C(a1)
00007424                            
00007424                            loc_6ED0:
00007424 303C 008C                  		move.w	#$8C,d0
00007428 6100 A190                  		bsr.w	PlaySound	; play boss music
0000742C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007432 5438 F742                  		addq.b	#2,($FFFFF742).w
00007436 7011                       		moveq	#$11,d0
00007438 6000 A36A                  		bra.w	LoadPLC		; load boss patterns
0000743C                            ; ===========================================================================
0000743C                            
0000743C                            locret_6EE8:
0000743C 4E75                       		rts	
0000743E                            ; ===========================================================================
0000743E                            
0000743E                            Resize_GHZ3end:
0000743E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007444 4E75                       		rts	
00007446                            ; ===========================================================================
00007446                            ; ---------------------------------------------------------------------------
00007446                            ; Labyrinth Zone dynamic screen	resizing
00007446                            ; ---------------------------------------------------------------------------
00007446                            
00007446                            Resize_LZ:				; XREF: Resize_Index
00007446 7000                       		moveq	#0,d0
00007448 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000744C D040                       		add.w	d0,d0
0000744E 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007452 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007456                            ; ===========================================================================
00007456 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007458 0000                       		dc.w Resize_LZ12-Resize_LZx
0000745A 0000                       		dc.w Resize_LZ3-Resize_LZx
0000745C 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000745E                            ; ===========================================================================
0000745E                            
0000745E                            Resize_LZ12:
0000745E 4E75                       		rts	
00007460                            ; ===========================================================================
00007460                            
00007460                            Resize_LZ3:
00007460 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00007464 6700                       		beq.s	loc_6F28	; if not, branch
00007466 43F8 A506                  		lea	($FFFFA506).w,a1
0000746A 0C11 0007                  		cmpi.b	#7,(a1)
0000746E 6700                       		beq.s	loc_6F28
00007470 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00007474 303C 00B7                  		move.w	#$B7,d0
00007478 6100 A146                  		bsr.w	PlaySound_Special ; play rumbling sound
0000747C                            
0000747C                            loc_6F28:
0000747C 4A38 F742                  		tst.b	($FFFFF742).w
00007480 6600                       		bne.s	locret_6F64
00007482 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007488 6500                       		bcs.s	locret_6F62
0000748A 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00007490 6400                       		bcc.s	locret_6F62
00007492 6100 0000                  		bsr.w	SingleObjLoad
00007496 6600                       		bne.s	loc_6F4A
00007498 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
0000749C                            
0000749C                            loc_6F4A:
0000749C 303C 008C                  		move.w	#$8C,d0
000074A0 6100 A118                  		bsr.w	PlaySound	; play boss music
000074A4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000074AA 5438 F742                  		addq.b	#2,($FFFFF742).w
000074AE 7011                       		moveq	#$11,d0
000074B0 6000 A2F2                  		bra.w	LoadPLC		; load boss patterns
000074B4                            ; ===========================================================================
000074B4                            
000074B4                            locret_6F62:
000074B4 4E75                       		rts	
000074B6                            ; ===========================================================================
000074B6                            
000074B6                            locret_6F64:
000074B6 4E75                       		rts	
000074B8                            ; ===========================================================================
000074B8                            
000074B8                            Resize_SBZ3:
000074B8 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000074BE 6500                       		bcs.s	locret_6F8C
000074C0 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000074C6 6400                       		bcc.s	locret_6F8C	; if not, branch
000074C8 4238 FE30                  		clr.b	($FFFFFE30).w
000074CC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000074D2 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000074D8 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000074DE                            
000074DE                            locret_6F8C:
000074DE 4E75                       		rts	
000074E0                            ; ===========================================================================
000074E0                            ; ---------------------------------------------------------------------------
000074E0                            ; Marble Zone dynamic screen resizing
000074E0                            ; ---------------------------------------------------------------------------
000074E0                            
000074E0                            Resize_MZ:				; XREF: Resize_Index
000074E0 7000                       		moveq	#0,d0
000074E2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000074E6 D040                       		add.w	d0,d0
000074E8 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000074EC 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000074F0                            ; ===========================================================================
000074F0 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000074F2 0000                       		dc.w Resize_MZ2-Resize_MZx
000074F4 0000                       		dc.w Resize_MZ3-Resize_MZx
000074F6                            ; ===========================================================================
000074F6                            
000074F6                            Resize_MZ1:
000074F6 7000                       		moveq	#0,d0
000074F8 1038 F742                  		move.b	($FFFFF742).w,d0
000074FC 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007500 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007504                            ; ===========================================================================
00007504 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007506 0000                       		dc.w loc_6FEA-off_6FB2
00007508 0000                       		dc.w loc_702E-off_6FB2
0000750A 0000                       		dc.w loc_7050-off_6FB2
0000750C                            ; ===========================================================================
0000750C                            
0000750C                            loc_6FBA:
0000750C 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007512 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007518 6500                       		bcs.s	locret_6FE8
0000751A 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007520 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007526 6500                       		bcs.s	locret_6FE8
00007528 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000752E 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007534 6500                       		bcs.s	locret_6FE8
00007536 5438 F742                  		addq.b	#2,($FFFFF742).w
0000753A                            
0000753A                            locret_6FE8:
0000753A 4E75                       		rts	
0000753C                            ; ===========================================================================
0000753C                            
0000753C                            loc_6FEA:
0000753C 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007542 6400                       		bcc.s	loc_6FF8
00007544 5538 F742                  		subq.b	#2,($FFFFF742).w
00007548 4E75                       		rts	
0000754A                            ; ===========================================================================
0000754A                            
0000754A                            loc_6FF8:
0000754A 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007550 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007556 6400                       		bcc.s	locret_702C
00007558 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
0000755E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007564 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
0000756A 6400                       		bcc.s	locret_702C
0000756C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007572 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007578 6500                       		bcs.s	locret_702C
0000757A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000757E                            
0000757E                            locret_702C:
0000757E 4E75                       		rts	
00007580                            ; ===========================================================================
00007580                            
00007580                            loc_702E:
00007580 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007586 6400                       		bcc.s	loc_703C
00007588 5538 F742                  		subq.b	#2,($FFFFF742).w
0000758C 4E75                       		rts	
0000758E                            ; ===========================================================================
0000758E                            
0000758E                            loc_703C:
0000758E 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007594 6500                       		bcs.s	locret_704E
00007596 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000759C 5438 F742                  		addq.b	#2,($FFFFF742).w
000075A0                            
000075A0                            locret_704E:
000075A0 4E75                       		rts	
000075A2                            ; ===========================================================================
000075A2                            
000075A2                            loc_7050:
000075A2 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000075A8 6500                       		bcs.s	locret_7072
000075AA 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000075B0 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000075B6 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000075BC 6500                       		bcs.s	locret_7072
000075BE 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000075C4                            
000075C4                            locret_7072:
000075C4 4E75                       		rts	
000075C6                            ; ===========================================================================
000075C6                            
000075C6                            Resize_MZ2:
000075C6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075CC 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000075D2 6500                       		bcs.s	locret_7088
000075D4 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000075DA                            
000075DA                            locret_7088:
000075DA 4E75                       		rts	
000075DC                            ; ===========================================================================
000075DC                            
000075DC                            Resize_MZ3:
000075DC 7000                       		moveq	#0,d0
000075DE 1038 F742                  		move.b	($FFFFF742).w,d0
000075E2 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000075E6 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000075EA                            ; ===========================================================================
000075EA 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000075EC 0000                       		dc.w Resize_MZ3end-off_7098
000075EE                            ; ===========================================================================
000075EE                            
000075EE                            Resize_MZ3boss:
000075EE 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000075F4 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000075FA 6500                       		bcs.s	locret_70E8
000075FC 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007602 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007608 6500                       		bcs.s	locret_70E8
0000760A 6100 0000                  		bsr.w	SingleObjLoad
0000760E 6600                       		bne.s	loc_70D0
00007610 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007614 337C 19F0 0008             		move.w	#$19F0,8(a1)
0000761A 337C 022C 000C             		move.w	#$22C,$C(a1)
00007620                            
00007620                            loc_70D0:
00007620 303C 008C                  		move.w	#$8C,d0
00007624 6100 9F94                  		bsr.w	PlaySound	; play boss music
00007628 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000762E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007632 7011                       		moveq	#$11,d0
00007634 6000 A16E                  		bra.w	LoadPLC		; load boss patterns
00007638                            ; ===========================================================================
00007638                            
00007638                            locret_70E8:
00007638 4E75                       		rts	
0000763A                            ; ===========================================================================
0000763A                            
0000763A                            Resize_MZ3end:
0000763A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007640 4E75                       		rts	
00007642                            ; ===========================================================================
00007642                            ; ---------------------------------------------------------------------------
00007642                            ; Star Light Zone dynamic screen resizing
00007642                            ; ---------------------------------------------------------------------------
00007642                            
00007642                            Resize_SLZ:				; XREF: Resize_Index
00007642 7000                       		moveq	#0,d0
00007644 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007648 D040                       		add.w	d0,d0
0000764A 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
0000764E 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007652                            ; ===========================================================================
00007652 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00007654 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00007656 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007658                            ; ===========================================================================
00007658                            
00007658                            Resize_SLZ1:
00007658 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
0000765E 4E75                       		rts	
00007660                            
00007660                            Resize_SLZ2:
00007660 4E75                       		rts	
00007662                            ; ===========================================================================
00007662                            
00007662                            Resize_SLZ3:
00007662 7000                       		moveq	#0,d0
00007664 1038 F742                  		move.b	($FFFFF742).w,d0
00007668 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000766C 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007670                            ; ===========================================================================
00007670 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007672 0000                       		dc.w Resize_SLZ3boss-off_7118
00007674 0000                       		dc.w Resize_SLZ3end-off_7118
00007676                            ; ===========================================================================
00007676                            
00007676                            Resize_SLZ3main:
00007676 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000767C 6500                       		bcs.s	locret_7130
0000767E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007684 5438 F742                  		addq.b	#2,($FFFFF742).w
00007688                            
00007688                            locret_7130:
00007688 4E75                       		rts	
0000768A                            ; ===========================================================================
0000768A                            
0000768A                            Resize_SLZ3boss:
0000768A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007690 6500                       		bcs.s	locret_715C
00007692 6100 0000                  		bsr.w	SingleObjLoad
00007696 6600                       		bne.s	loc_7144
00007698 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000769C                            
0000769C                            loc_7144:
0000769C 303C 008C                  		move.w	#$8C,d0
000076A0 6100 9F18                  		bsr.w	PlaySound	; play boss music
000076A4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076AA 5438 F742                  		addq.b	#2,($FFFFF742).w
000076AE 7011                       		moveq	#$11,d0
000076B0 6000 A0F2                  		bra.w	LoadPLC		; load boss patterns
000076B4                            ; ===========================================================================
000076B4                            
000076B4                            locret_715C:
000076B4 4E75                       		rts	
000076B6                            ; ===========================================================================
000076B6                            
000076B6                            Resize_SLZ3end:
000076B6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076BC 4E75                       		rts
000076BE 4E75                       		rts
000076C0                            ; ===========================================================================
000076C0                            ; ---------------------------------------------------------------------------
000076C0                            ; Spring Yard Zone dynamic screen resizing
000076C0                            ; ---------------------------------------------------------------------------
000076C0                            
000076C0                            Resize_SYZ:				; XREF: Resize_Index
000076C0 7000                       		moveq	#0,d0
000076C2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076C6 D040                       		add.w	d0,d0
000076C8 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000076CC 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000076D0                            ; ===========================================================================
000076D0 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000076D2 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000076D4 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000076D6                            ; ===========================================================================
000076D6                            
000076D6                            Resize_SYZ1:
000076D6 4E75                       		rts	
000076D8                            ; ===========================================================================
000076D8                            
000076D8                            Resize_SYZ2:
000076D8 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000076DE 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000076E4 6500                       		bcs.s	locret_71A2
000076E6 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000076EC 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000076F2 6500                       		bcs.s	locret_71A2
000076F4 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000076FA                            
000076FA                            locret_71A2:
000076FA 4E75                       		rts	
000076FC                            ; ===========================================================================
000076FC                            
000076FC                            Resize_SYZ3:
000076FC 7000                       		moveq	#0,d0
000076FE 1038 F742                  		move.b	($FFFFF742).w,d0
00007702 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007706 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000770A                            ; ===========================================================================
0000770A 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000770C 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000770E 0000                       		dc.w Resize_SYZ3end-off_71B2
00007710                            ; ===========================================================================
00007710                            
00007710                            Resize_SYZ3main:
00007710 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007716 6500                       		bcs.s	locret_71CE
00007718 6100 0000                  		bsr.w	SingleObjLoad
0000771C 6600                       		bne.s	locret_71CE
0000771E 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007722 5438 F742                  		addq.b	#2,($FFFFF742).w
00007726                            
00007726                            locret_71CE:
00007726 4E75                       		rts	
00007728                            ; ===========================================================================
00007728                            
00007728                            Resize_SYZ3boss:
00007728 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000772E 6500                       		bcs.s	locret_7200
00007730 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007736 6100 0000                  		bsr.w	SingleObjLoad
0000773A 6600                       		bne.s	loc_71EC
0000773C 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007740 5438 F742                  		addq.b	#2,($FFFFF742).w
00007744                            
00007744                            loc_71EC:
00007744 303C 008C                  		move.w	#$8C,d0
00007748 6100 9E70                  		bsr.w	PlaySound	; play boss music
0000774C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007752 7011                       		moveq	#$11,d0
00007754 6000 A04E                  		bra.w	LoadPLC		; load boss patterns
00007758                            ; ===========================================================================
00007758                            
00007758                            locret_7200:
00007758 4E75                       		rts	
0000775A                            ; ===========================================================================
0000775A                            
0000775A                            Resize_SYZ3end:
0000775A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007760 4E75                       		rts	
00007762                            ; ===========================================================================
00007762                            ; ---------------------------------------------------------------------------
00007762                            ; Scrap	Brain Zone dynamic screen resizing
00007762                            ; ---------------------------------------------------------------------------
00007762                            
00007762                            Resize_SBZ:				; XREF: Resize_Index
00007762 7000                       		moveq	#0,d0
00007764 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007768 D040                       		add.w	d0,d0
0000776A 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000776E 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007772                            ; ===========================================================================
00007772 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007774 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007776 0000                       		dc.w Resize_FZ-Resize_SBZx
00007778                            ; ===========================================================================
00007778                            
00007778                            Resize_SBZ1:
00007778 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000777E 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007784 6500                       		bcs.s	locret_7242
00007786 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000778C 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007792 6500                       		bcs.s	locret_7242
00007794 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000779A                            
0000779A                            locret_7242:
0000779A 4E75                       		rts	
0000779C                            ; ===========================================================================
0000779C                            
0000779C                            Resize_SBZ2:
0000779C 7000                       		moveq	#0,d0
0000779E 1038 F742                  		move.b	($FFFFF742).w,d0
000077A2 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000077A6 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000077AA                            ; ===========================================================================
000077AA 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000077AC 0000                       		dc.w Resize_SBZ2boss-off_7252
000077AE 0000                       		dc.w Resize_SBZ2boss2-off_7252
000077B0 0000                       		dc.w Resize_SBZ2end-off_7252
000077B2                            ; ===========================================================================
000077B2                            
000077B2                            Resize_SBZ2main:
000077B2 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000077B8 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000077BE 6500                       		bcs.s	locret_727A
000077C0 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000077C6 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000077CC 6500                       		bcs.s	locret_727A
000077CE 5438 F742                  		addq.b	#2,($FFFFF742).w
000077D2                            
000077D2                            locret_727A:
000077D2 4E75                       		rts	
000077D4                            ; ===========================================================================
000077D4                            
000077D4                            Resize_SBZ2boss:
000077D4 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000077DA 6500                       		bcs.s	locret_7298
000077DC 6100 0000                  		bsr.w	SingleObjLoad
000077E0 6600                       		bne.s	locret_7298
000077E2 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000077E6 5438 F742                  		addq.b	#2,($FFFFF742).w
000077EA 701E                       		moveq	#$1E,d0
000077EC 6000 9FB6                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000077F0                            ; ===========================================================================
000077F0                            
000077F0                            locret_7298:
000077F0 4E75                       		rts	
000077F2                            ; ===========================================================================
000077F2                            
000077F2                            Resize_SBZ2boss2:
000077F2 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000077F8 6500                       		bcs.s	loc_72B6
000077FA 6100 0000                  		bsr.w	SingleObjLoad
000077FE 6600                       		bne.s	loc_72B0
00007800 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007804 5438 F742                  		addq.b	#2,($FFFFF742).w
00007808                            
00007808                            loc_72B0:
00007808 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000780E                            
0000780E                            loc_72B6:
0000780E 6000                       		bra.s	loc_72C2
00007810                            ; ===========================================================================
00007810                            
00007810                            Resize_SBZ2end:
00007810 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007816 6500                       		bcs.s	loc_72C2
00007818 4E75                       		rts	
0000781A                            ; ===========================================================================
0000781A                            
0000781A                            loc_72C2:
0000781A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007820 4E75                       		rts	
00007822                            ; ===========================================================================
00007822                            
00007822                            Resize_FZ:
00007822 7000                       		moveq	#0,d0
00007824 1038 F742                  		move.b	($FFFFF742).w,d0
00007828 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000782C 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007830                            ; ===========================================================================
00007830 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007834 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007838 0000                       		dc.w Resize_FZend2-off_72D8
0000783A                            ; ===========================================================================
0000783A                            
0000783A                            Resize_FZmain:
0000783A 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007840 6500                       		bcs.s	loc_72F4
00007842 5438 F742                  		addq.b	#2,($FFFFF742).w
00007846 701F                       		moveq	#$1F,d0
00007848 6100 9F5A                  		bsr.w	LoadPLC		; load FZ boss patterns
0000784C                            
0000784C                            loc_72F4:
0000784C 60CC                       		bra.s	loc_72C2
0000784E                            ; ===========================================================================
0000784E                            
0000784E                            Resize_FZboss:
0000784E 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007854 6500                       		bcs.s	loc_7312
00007856 6100 0000                  		bsr.w	SingleObjLoad
0000785A 6600                       		bne.s	loc_7312
0000785C 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007860 5438 F742                  		addq.b	#2,($FFFFF742).w
00007864 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000786A                            
0000786A                            loc_7312:
0000786A 60AE                       		bra.s	loc_72C2
0000786C                            ; ===========================================================================
0000786C                            
0000786C                            Resize_FZend:
0000786C 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007872 6500                       		bcs.s	loc_7320
00007874 5438 F742                  		addq.b	#2,($FFFFF742).w
00007878                            
00007878                            loc_7320:
00007878 60A0                       		bra.s	loc_72C2
0000787A                            ; ===========================================================================
0000787A                            
0000787A                            locret_7322:
0000787A 4E75                       		rts	
0000787C                            ; ===========================================================================
0000787C                            
0000787C                            Resize_FZend2:
0000787C 609C                       		bra.s	loc_72C2
0000787E                            ; ===========================================================================
0000787E                            ; ---------------------------------------------------------------------------
0000787E                            ; Ending sequence dynamic screen resizing (empty)
0000787E                            ; ---------------------------------------------------------------------------
0000787E                            
0000787E                            Resize_Ending:				; XREF: Resize_Index
0000787E 4E75                       		rts	
00007880                            ; ===========================================================================
00007880                            ; ---------------------------------------------------------------------------
00007880                            ; Object 11 - GHZ bridge
00007880                            ; ---------------------------------------------------------------------------
00007880                            
00007880                            Obj11:					; XREF: Obj_Index
00007880 7000                       		moveq	#0,d0
00007882 1028 0024                  		move.b	$24(a0),d0
00007886 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
0000788A 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000788E                            ; ===========================================================================
0000788E 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007892 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007896 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000789A                            ; ===========================================================================
0000789A                            
0000789A                            Obj11_Main:				; XREF: Obj11_Index
0000789A 5428 0024                  		addq.b	#2,$24(a0)
0000789E 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
000078A6 317C 438E 0002             		move.w	#$438E,2(a0)
000078AC 117C 0004 0001             		move.b	#4,1(a0)
000078B2 117C 0003 0018             		move.b	#3,$18(a0)
000078B8 117C 0080 0019             		move.b	#$80,$19(a0)
000078BE 3428 000C                  		move.w	$C(a0),d2
000078C2 3628 0008                  		move.w	8(a0),d3
000078C6 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000078C8 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000078CC 7200                       		moveq	#0,d1
000078CE 1212                       		move.b	(a2),d1		; copy a2 to d1
000078D0 14FC 0000                  		move.b	#0,(a2)+
000078D4 3001                       		move.w	d1,d0
000078D6 E248                       		lsr.w	#1,d0
000078D8 E948                       		lsl.w	#4,d0
000078DA 9640                       		sub.w	d0,d3
000078DC 5501                       		subq.b	#2,d1
000078DE 6500                       		bcs.s	Obj11_Action
000078E0                            
000078E0                            Obj11_MakeBdg:
000078E0 6100 0000                  		bsr.w	SingleObjLoad
000078E4 6600                       		bne.s	Obj11_Action
000078E6 5228 0028                  		addq.b	#1,$28(a0)
000078EA B668 0008                  		cmp.w	8(a0),d3
000078EE 6600                       		bne.s	loc_73B8
000078F0 0643 0010                  		addi.w	#$10,d3
000078F4 3142 000C                  		move.w	d2,$C(a0)
000078F8 3142 003C                  		move.w	d2,$3C(a0)
000078FC 3A08                       		move.w	a0,d5
000078FE 0445 D000                  		subi.w	#-$3000,d5
00007902 EC4D                       		lsr.w	#6,d5
00007904 0245 007F                  		andi.w	#$7F,d5
00007908 14C5                       		move.b	d5,(a2)+
0000790A 5228 0028                  		addq.b	#1,$28(a0)
0000790E                            
0000790E                            loc_73B8:				; XREF: ROM:00007398j
0000790E 3A09                       		move.w	a1,d5
00007910 0445 D000                  		subi.w	#-$3000,d5
00007914 EC4D                       		lsr.w	#6,d5
00007916 0245 007F                  		andi.w	#$7F,d5
0000791A 14C5                       		move.b	d5,(a2)+
0000791C 137C 000A 0024             		move.b	#$A,$24(a1)
00007922 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007924 3342 000C                  		move.w	d2,$C(a1)
00007928 3342 003C                  		move.w	d2,$3C(a1)
0000792C 3343 0008                  		move.w	d3,8(a1)
00007930 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007938 337C 438E 0002             		move.w	#$438E,2(a1)
0000793E 137C 0004 0001             		move.b	#4,1(a1)
00007944 137C 0003 0018             		move.b	#3,$18(a1)
0000794A 137C 0008 0019             		move.b	#8,$19(a1)
00007950 0643 0010                  		addi.w	#$10,d3
00007954 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007958                            
00007958                            Obj11_Action:				; XREF: Obj11_Index
00007958 6100                       		bsr.s	Obj11_Solid
0000795A 4A28 003E                  		tst.b	$3E(a0)
0000795E 6700                       		beq.s	Obj11_Display
00007960 5928 003E                  		subq.b	#4,$3E(a0)
00007964 6100 0000                  		bsr.w	Obj11_Bend
00007968                            
00007968                            Obj11_Display:
00007968 6100 0000                  		bsr.w	DisplaySprite
0000796C 6000 0000                  		bra.w	Obj11_ChkDel
00007970                            
00007970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007970                            
00007970                            
00007970                            Obj11_Solid:				; XREF: Obj11_Action
00007970 7200                       		moveq	#0,d1
00007972 1228 0028                  		move.b	$28(a0),d1
00007976 E749                       		lsl.w	#3,d1
00007978 3401                       		move.w	d1,d2
0000797A 5041                       		addq.w	#8,d1
0000797C D442                       		add.w	d2,d2
0000797E 43F8 D000                  		lea	($FFFFD000).w,a1
00007982 4A69 0012                  		tst.w	$12(a1)
00007986 6B00 0000                  		bmi.w	locret_751E
0000798A 3029 0008                  		move.w	8(a1),d0
0000798E 9068 0008                  		sub.w	8(a0),d0
00007992 D041                       		add.w	d1,d0
00007994 6B00 0000                  		bmi.w	locret_751E
00007998 B042                       		cmp.w	d2,d0
0000799A 6400 0000                  		bcc.w	locret_751E
0000799E 6000                       		bra.s	Platform2
000079A0                            ; End of function Obj11_Solid
000079A0                            
000079A0                            ; ---------------------------------------------------------------------------
000079A0                            ; Platform subroutine
000079A0                            ; ---------------------------------------------------------------------------
000079A0                            
000079A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079A0                            
000079A0                            
000079A0                            PlatformObject:
000079A0 43F8 D000                  		lea	($FFFFD000).w,a1
000079A4 4A69 0012                  		tst.w	$12(a1)
000079A8 6B00 0000                  		bmi.w	locret_751E
000079AC 3029 0008                  		move.w	8(a1),d0
000079B0 9068 0008                  		sub.w	8(a0),d0
000079B4 D041                       		add.w	d1,d0
000079B6 6B00 0000                  		bmi.w	locret_751E
000079BA D241                       		add.w	d1,d1
000079BC B041                       		cmp.w	d1,d0
000079BE 6400 0000                  		bcc.w	locret_751E
000079C2                            
000079C2                            Platform2:
000079C2 3028 000C                  		move.w	$C(a0),d0
000079C6 5140                       		subq.w	#8,d0
000079C8                            
000079C8                            Platform3:
000079C8 3429 000C                  		move.w	$C(a1),d2
000079CC 1229 0016                  		move.b	$16(a1),d1
000079D0 4881                       		ext.w	d1
000079D2 D242                       		add.w	d2,d1
000079D4 5841                       		addq.w	#4,d1
000079D6 9041                       		sub.w	d1,d0
000079D8 6200 0000                  		bhi.w	locret_751E
000079DC 0C40 FFF0                  		cmpi.w	#-$10,d0
000079E0 6500 0000                  		bcs.w	locret_751E
000079E4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000079E8 6B00 0000                  		bmi.w	locret_751E
000079EC 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000079F2 6400 0000                  		bcc.w	locret_751E
000079F6 D440                       		add.w	d0,d2
000079F8 5642                       		addq.w	#3,d2
000079FA 3342 000C                  		move.w	d2,$C(a1)
000079FE 5428 0024                  		addq.b	#2,$24(a0)
00007A02                            
00007A02                            loc_74AE:
00007A02 0829 0003 0022             		btst	#3,$22(a1)
00007A08 6700                       		beq.s	loc_74DC
00007A0A 7000                       		moveq	#0,d0
00007A0C 1029 003D                  		move.b	$3D(a1),d0
00007A10 ED48                       		lsl.w	#6,d0
00007A12 0680 00FF D000             		addi.l	#$FFD000,d0
00007A18 2440                       		movea.l	d0,a2
00007A1A 08AA 0003 0022             		bclr	#3,$22(a2)
00007A20 422A 0025                  		clr.b	$25(a2)
00007A24 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007A2A 6600                       		bne.s	loc_74DC
00007A2C 552A 0024                  		subq.b	#2,$24(a2)
00007A30                            
00007A30                            loc_74DC:
00007A30 3008                       		move.w	a0,d0
00007A32 0440 D000                  		subi.w	#-$3000,d0
00007A36 EC48                       		lsr.w	#6,d0
00007A38 0240 007F                  		andi.w	#$7F,d0
00007A3C 1340 003D                  		move.b	d0,$3D(a1)
00007A40 137C 0000 0026             		move.b	#0,$26(a1)
00007A46 337C 0000 0012             		move.w	#0,$12(a1)
00007A4C 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007A52 0829 0001 0022             		btst	#1,$22(a1)
00007A58 6700                       		beq.s	loc_7512
00007A5A 2F08                       		move.l	a0,-(sp)
00007A5C 2049                       		movea.l	a1,a0
00007A5E 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007A64 205F                       		movea.l	(sp)+,a0
00007A66                            
00007A66                            loc_7512:
00007A66 08E9 0003 0022             		bset	#3,$22(a1)
00007A6C 08E8 0003 0022             		bset	#3,$22(a0)
00007A72                            
00007A72                            locret_751E:
00007A72 4E75                       		rts	
00007A74                            ; End of function PlatformObject
00007A74                            
00007A74                            ; ---------------------------------------------------------------------------
00007A74                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007A74                            ; ---------------------------------------------------------------------------
00007A74                            
00007A74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A74                            
00007A74                            
00007A74                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007A74 43F8 D000                  		lea	($FFFFD000).w,a1
00007A78 4A69 0012                  		tst.w	$12(a1)
00007A7C 6B00 FFF4                  		bmi.w	locret_751E
00007A80 3029 0008                  		move.w	8(a1),d0
00007A84 9068 0008                  		sub.w	8(a0),d0
00007A88 D041                       		add.w	d1,d0
00007A8A 6BE6                       		bmi.s	locret_751E
00007A8C D241                       		add.w	d1,d1
00007A8E B041                       		cmp.w	d1,d0
00007A90 64E0                       		bcc.s	locret_751E
00007A92 0828 0000 0001             		btst	#0,1(a0)
00007A98 6700                       		beq.s	loc_754A
00007A9A 4640                       		not.w	d0
00007A9C D041                       		add.w	d1,d0
00007A9E                            
00007A9E                            loc_754A:
00007A9E E248                       		lsr.w	#1,d0
00007AA0 7600                       		moveq	#0,d3
00007AA2 1632 0000                  		move.b	(a2,d0.w),d3
00007AA6 3028 000C                  		move.w	$C(a0),d0
00007AAA 9043                       		sub.w	d3,d0
00007AAC 6000 FF1A                  		bra.w	Platform3
00007AB0                            ; End of function SlopeObject
00007AB0                            
00007AB0                            
00007AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AB0                            
00007AB0                            
00007AB0                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007AB0 43F8 D000                  		lea	($FFFFD000).w,a1
00007AB4 4A69 0012                  		tst.w	$12(a1)
00007AB8 6B00 FFB8                  		bmi.w	locret_751E
00007ABC 3029 0008                  		move.w	8(a1),d0
00007AC0 9068 0008                  		sub.w	8(a0),d0
00007AC4 D041                       		add.w	d1,d0
00007AC6 6B00 FFAA                  		bmi.w	locret_751E
00007ACA D241                       		add.w	d1,d1
00007ACC B041                       		cmp.w	d1,d0
00007ACE 6400 FFA2                  		bcc.w	locret_751E
00007AD2 3028 000C                  		move.w	$C(a0),d0
00007AD6 9043                       		sub.w	d3,d0
00007AD8 6000 FEEE                  		bra.w	Platform3
00007ADC                            ; End of function Obj15_Solid
00007ADC                            
00007ADC                            ; ===========================================================================
00007ADC                            
00007ADC                            Obj11_Action2:				; XREF: Obj11_Index
00007ADC 6100                       		bsr.s	Obj11_WalkOff
00007ADE 6100 0000                  		bsr.w	DisplaySprite
00007AE2 6000 0000                  		bra.w	Obj11_ChkDel
00007AE6                            
00007AE6                            ; ---------------------------------------------------------------------------
00007AE6                            ; Subroutine allowing Sonic to walk off a bridge
00007AE6                            ; ---------------------------------------------------------------------------
00007AE6                            
00007AE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AE6                            
00007AE6                            
00007AE6                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007AE6 7200                       		moveq	#0,d1
00007AE8 1228 0028                  		move.b	$28(a0),d1
00007AEC E749                       		lsl.w	#3,d1
00007AEE 3401                       		move.w	d1,d2
00007AF0 5041                       		addq.w	#8,d1
00007AF2 6100                       		bsr.s	ExitPlatform2
00007AF4 6400                       		bcc.s	locret_75BE
00007AF6 E848                       		lsr.w	#4,d0
00007AF8 1140 003F                  		move.b	d0,$3F(a0)
00007AFC 1028 003E                  		move.b	$3E(a0),d0
00007B00 0C00 0040                  		cmpi.b	#$40,d0
00007B04 6700                       		beq.s	loc_75B6
00007B06 5828 003E                  		addq.b	#4,$3E(a0)
00007B0A                            
00007B0A                            loc_75B6:
00007B0A 6100 0000                  		bsr.w	Obj11_Bend
00007B0E 6100 0000                  		bsr.w	Obj11_MoveSonic
00007B12                            
00007B12                            locret_75BE:
00007B12 4E75                       		rts	
00007B14                            ; End of function Obj11_WalkOff
00007B14                            
00007B14                            ; ---------------------------------------------------------------------------
00007B14                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007B14                            ; ---------------------------------------------------------------------------
00007B14                            
00007B14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B14                            
00007B14                            
00007B14                            ExitPlatform:
00007B14 3401                       		move.w	d1,d2
00007B16                            
00007B16                            ExitPlatform2:
00007B16 D442                       		add.w	d2,d2
00007B18 43F8 D000                  		lea	($FFFFD000).w,a1
00007B1C 0829 0001 0022             		btst	#1,$22(a1)
00007B22 6600                       		bne.s	loc_75E0
00007B24 3029 0008                  		move.w	8(a1),d0
00007B28 9068 0008                  		sub.w	8(a0),d0
00007B2C D041                       		add.w	d1,d0
00007B2E 6B00                       		bmi.s	loc_75E0
00007B30 B042                       		cmp.w	d2,d0
00007B32 6500                       		bcs.s	locret_75F2
00007B34                            
00007B34                            loc_75E0:
00007B34 08A9 0003 0022             		bclr	#3,$22(a1)
00007B3A 117C 0002 0024             		move.b	#2,$24(a0)
00007B40 08A8 0003 0022             		bclr	#3,$22(a0)
00007B46                            
00007B46                            locret_75F2:
00007B46 4E75                       		rts	
00007B48                            ; End of function ExitPlatform
00007B48                            
00007B48                            
00007B48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B48                            
00007B48                            
00007B48                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007B48 7000                       		moveq	#0,d0
00007B4A 1028 003F                  		move.b	$3F(a0),d0
00007B4E 1030 0029                  		move.b	$29(a0,d0.w),d0
00007B52 ED48                       		lsl.w	#6,d0
00007B54 0680 00FF D000             		addi.l	#$FFD000,d0
00007B5A 2440                       		movea.l	d0,a2
00007B5C 43F8 D000                  		lea	($FFFFD000).w,a1
00007B60 302A 000C                  		move.w	$C(a2),d0
00007B64 5140                       		subq.w	#8,d0
00007B66 7200                       		moveq	#0,d1
00007B68 1229 0016                  		move.b	$16(a1),d1
00007B6C 9041                       		sub.w	d1,d0
00007B6E 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007B72 4E75                       		rts	
00007B74                            ; End of function Obj11_MoveSonic
00007B74                            
00007B74                            
00007B74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B74                            
00007B74                            
00007B74                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007B74 1028 003E                  		move.b	$3E(a0),d0
00007B78 6100 B0EA                  		bsr.w	CalcSine
00007B7C 3800                       		move.w	d0,d4
00007B7E 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007B84 7000                       		moveq	#0,d0
00007B86 1028 0028                  		move.b	$28(a0),d0
00007B8A E948                       		lsl.w	#4,d0
00007B8C 7600                       		moveq	#0,d3
00007B8E 1628 003F                  		move.b	$3F(a0),d3
00007B92 3403                       		move.w	d3,d2
00007B94 D640                       		add.w	d0,d3
00007B96 7A00                       		moveq	#0,d5
00007B98 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007B9E 1A35 3000                  		move.b	(a5,d3.w),d5
00007BA2 0243 000F                  		andi.w	#$F,d3
00007BA6 E94B                       		lsl.w	#4,d3
00007BA8 47F4 3000                  		lea	(a4,d3.w),a3
00007BAC 45E8 0029                  		lea	$29(a0),a2
00007BB0                            
00007BB0                            loc_765C:
00007BB0 7000                       		moveq	#0,d0
00007BB2 101A                       		move.b	(a2)+,d0
00007BB4 ED48                       		lsl.w	#6,d0
00007BB6 0680 00FF D000             		addi.l	#$FFD000,d0
00007BBC 2240                       		movea.l	d0,a1
00007BBE 7000                       		moveq	#0,d0
00007BC0 101B                       		move.b	(a3)+,d0
00007BC2 5240                       		addq.w	#1,d0
00007BC4 C0C5                       		mulu.w	d5,d0
00007BC6 C0C4                       		mulu.w	d4,d0
00007BC8 4840                       		swap	d0
00007BCA D069 003C                  		add.w	$3C(a1),d0
00007BCE 3340 000C                  		move.w	d0,$C(a1)
00007BD2 51CA FFDC                  		dbf	d2,loc_765C
00007BD6 7000                       		moveq	#0,d0
00007BD8 1028 0028                  		move.b	$28(a0),d0
00007BDC 7600                       		moveq	#0,d3
00007BDE 1628 003F                  		move.b	$3F(a0),d3
00007BE2 5203                       		addq.b	#1,d3
00007BE4 9600                       		sub.b	d0,d3
00007BE6 4403                       		neg.b	d3
00007BE8 6B00                       		bmi.s	locret_76CA
00007BEA 3403                       		move.w	d3,d2
00007BEC E94B                       		lsl.w	#4,d3
00007BEE 47F4 3000                  		lea	(a4,d3.w),a3
00007BF2 D6C2                       		adda.w	d2,a3
00007BF4 5342                       		subq.w	#1,d2
00007BF6 6500                       		bcs.s	locret_76CA
00007BF8                            
00007BF8                            loc_76A4:
00007BF8 7000                       		moveq	#0,d0
00007BFA 101A                       		move.b	(a2)+,d0
00007BFC ED48                       		lsl.w	#6,d0
00007BFE 0680 00FF D000             		addi.l	#$FFD000,d0
00007C04 2240                       		movea.l	d0,a1
00007C06 7000                       		moveq	#0,d0
00007C08 1023                       		move.b	-(a3),d0
00007C0A 5240                       		addq.w	#1,d0
00007C0C C0C5                       		mulu.w	d5,d0
00007C0E C0C4                       		mulu.w	d4,d0
00007C10 4840                       		swap	d0
00007C12 D069 003C                  		add.w	$3C(a1),d0
00007C16 3340 000C                  		move.w	d0,$C(a1)
00007C1A 51CA FFDC                  		dbf	d2,loc_76A4
00007C1E                            
00007C1E                            locret_76CA:
00007C1E 4E75                       		rts	
00007C20                            ; End of function Obj11_Bend
00007C20                            
00007C20                            ; ===========================================================================
00007C20                            ; ---------------------------------------------------------------------------
00007C20                            ; GHZ bridge-bending data
00007C20                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007C20                            ; ---------------------------------------------------------------------------
00007C20                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007D30                            		even
00007D30                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007E30                            		even
00007E30                            
00007E30                            ; ===========================================================================
00007E30                            
00007E30                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007E30 3028 0008                  		move.w	8(a0),d0
00007E34 0240 FF80                  		andi.w	#$FF80,d0
00007E38 3238 F700                  		move.w	($FFFFF700).w,d1
00007E3C 0441 0080                  		subi.w	#$80,d1
00007E40 0241 FF80                  		andi.w	#$FF80,d1
00007E44 9041                       		sub.w	d1,d0
00007E46 0C40 0280                  		cmpi.w	#$280,d0
00007E4A 6200 0000                  		bhi.w	Obj11_DelAll
00007E4E 4E75                       		rts	
00007E50                            ; ===========================================================================
00007E50                            
00007E50                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007E50 7400                       		moveq	#0,d2
00007E52 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007E56 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007E58 5302                       		subq.b	#1,d2		; subtract 1
00007E5A 6500                       		bcs.s	Obj11_Delete
00007E5C                            
00007E5C                            Obj11_DelLoop:
00007E5C 7000                       		moveq	#0,d0
00007E5E 101A                       		move.b	(a2)+,d0
00007E60 ED48                       		lsl.w	#6,d0
00007E62 0680 00FF D000             		addi.l	#$FFD000,d0
00007E68 2240                       		movea.l	d0,a1
00007E6A B048                       		cmp.w	a0,d0
00007E6C 6700                       		beq.s	loc_791E
00007E6E 6100 0000                  		bsr.w	DeleteObject2
00007E72                            
00007E72                            loc_791E:
00007E72 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007E76                            
00007E76                            Obj11_Delete:
00007E76 6100 0000                  		bsr.w	DeleteObject
00007E7A 4E75                       		rts	
00007E7C                            ; ===========================================================================
00007E7C                            
00007E7C                            Obj11_Delete2:				; XREF: Obj11_Index
00007E7C 6100 0000                  		bsr.w	DeleteObject
00007E80 4E75                       		rts	
00007E82                            ; ===========================================================================
00007E82                            
00007E82                            Obj11_Display2:				; XREF: Obj11_Index
00007E82 6100 0000                  		bsr.w	DisplaySprite
00007E86 4E75                       		rts	
00007E88                            ; ===========================================================================
00007E88                            ; ---------------------------------------------------------------------------
00007E88                            ; Sprite mappings - GHZ	bridge
00007E88                            ; ---------------------------------------------------------------------------
00007E88                            Map_obj11:
00007E88                            	include "_maps\obj11.asm"
00007E88                            ; ---------------------------------------------------------------------------
00007E88                            ; Sprite mappings - GHZ	bridge
00007E88                            ; ---------------------------------------------------------------------------
00007E88 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007E8C 0000                       		dc.w byte_794B-Map_obj11
00007E8E 01                         byte_793A:	dc.b 1
00007E8F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007E94 02                         byte_7940:	dc.b 2
00007E95 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007E9A 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007E9F 01                         byte_794B:	dc.b 1
00007EA0 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007EA6 00                         		even
00007EA6 00                         		even
00007EA6                            
00007EA6                            ; ===========================================================================
00007EA6                            ; ---------------------------------------------------------------------------
00007EA6                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007EA6                            ;	    - spiked ball on a chain (SBZ)
00007EA6                            ; ---------------------------------------------------------------------------
00007EA6                            
00007EA6                            Obj15:					; XREF: Obj_Index
00007EA6 7000                       		moveq	#0,d0
00007EA8 1028 0024                  		move.b	$24(a0),d0
00007EAC 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007EB0 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007EB4                            ; ===========================================================================
00007EB4 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007EB8 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007EBC 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007EC0 0000                       		dc.w Obj15_Action-Obj15_Index
00007EC2                            ; ===========================================================================
00007EC2                            
00007EC2                            Obj15_Main:				; XREF: Obj15_Index
00007EC2 5428 0024                  		addq.b	#2,$24(a0)
00007EC6 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007ECE 317C 4380 0002             		move.w	#$4380,2(a0)
00007ED4 117C 0004 0001             		move.b	#4,1(a0)
00007EDA 117C 0003 0018             		move.b	#3,$18(a0)
00007EE0 117C 0018 0019             		move.b	#$18,$19(a0)
00007EE6 117C 0008 0016             		move.b	#8,$16(a0)
00007EEC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007EF2 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007EF8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007EFE 6600                       		bne.s	Obj15_NotSLZ
00007F00 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007F08 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007F0E 117C 0020 0019             		move.b	#$20,$19(a0)
00007F14 117C 0010 0016             		move.b	#$10,$16(a0)
00007F1A 117C 0099 0020             		move.b	#$99,$20(a0)
00007F20                            
00007F20                            Obj15_NotSLZ:
00007F20 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007F26 6600                       		bne.s	Obj15_SetLength
00007F28 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007F30 317C 0391 0002             		move.w	#$391,2(a0)
00007F36 117C 0018 0019             		move.b	#$18,$19(a0)
00007F3C 117C 0018 0016             		move.b	#$18,$16(a0)
00007F42 117C 0086 0020             		move.b	#$86,$20(a0)
00007F48 117C 000C 0024             		move.b	#$C,$24(a0)
00007F4E                            
00007F4E                            Obj15_SetLength:
00007F4E 1810                       		move.b	0(a0),d4
00007F50 7200                       		moveq	#0,d1
00007F52 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007F56 1212                       		move.b	(a2),d1		; move a2 to d1
00007F58 3F01                       		move.w	d1,-(sp)
00007F5A 0241 000F                  		andi.w	#$F,d1
00007F5E 14FC 0000                  		move.b	#0,(a2)+
00007F62 3601                       		move.w	d1,d3
00007F64 E94B                       		lsl.w	#4,d3
00007F66 5003                       		addq.b	#8,d3
00007F68 1143 003C                  		move.b	d3,$3C(a0)
00007F6C 5103                       		subq.b	#8,d3
00007F6E 4A28 001A                  		tst.b	$1A(a0)
00007F72 6700                       		beq.s	Obj15_MakeChain
00007F74 5003                       		addq.b	#8,d3
00007F76 5341                       		subq.w	#1,d1
00007F78                            
00007F78                            Obj15_MakeChain:
00007F78 6100 0000                  		bsr.w	SingleObjLoad
00007F7C 6600                       		bne.s	loc_7A92
00007F7E 5228 0028                  		addq.b	#1,$28(a0)
00007F82 3A09                       		move.w	a1,d5
00007F84 0445 D000                  		subi.w	#-$3000,d5
00007F88 EC4D                       		lsr.w	#6,d5
00007F8A 0245 007F                  		andi.w	#$7F,d5
00007F8E 14C5                       		move.b	d5,(a2)+
00007F90 137C 000A 0024             		move.b	#$A,$24(a1)
00007F96 1284                       		move.b	d4,0(a1)	; load swinging	object
00007F98 2368 0004 0004             		move.l	4(a0),4(a1)
00007F9E 3368 0002 0002             		move.w	2(a0),2(a1)
00007FA4 08A9 0006 0002             		bclr	#6,2(a1)
00007FAA 137C 0004 0001             		move.b	#4,1(a1)
00007FB0 137C 0004 0018             		move.b	#4,$18(a1)
00007FB6 137C 0008 0019             		move.b	#8,$19(a1)
00007FBC 137C 0001 001A             		move.b	#1,$1A(a1)
00007FC2 1343 003C                  		move.b	d3,$3C(a1)
00007FC6 0403 0010                  		subi.b	#$10,d3
00007FCA 6400                       		bcc.s	loc_7A8E
00007FCC 137C 0002 001A             		move.b	#2,$1A(a1)
00007FD2 137C 0003 0018             		move.b	#3,$18(a1)
00007FD8 08E9 0006 0002             		bset	#6,2(a1)
00007FDE                            
00007FDE                            loc_7A8E:
00007FDE 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007FE2                            
00007FE2                            loc_7A92:
00007FE2 3A08                       		move.w	a0,d5
00007FE4 0445 D000                  		subi.w	#-$3000,d5
00007FE8 EC4D                       		lsr.w	#6,d5
00007FEA 0245 007F                  		andi.w	#$7F,d5
00007FEE 14C5                       		move.b	d5,(a2)+
00007FF0 317C 4080 0026             		move.w	#$4080,$26(a0)
00007FF6 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007FFC 321F                       		move.w	(sp)+,d1
00007FFE 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008002 6700                       		beq.s	loc_7AD4	; if not, branch
00008004 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
0000800C 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008012 117C 0001 001A             		move.b	#1,$1A(a0)
00008018 117C 0002 0018             		move.b	#2,$18(a0)
0000801E 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008024                            
00008024                            loc_7AD4:
00008024 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000802A 6700                       		beq.s	Obj15_Action	; if yes, branch
0000802C                            
0000802C                            Obj15_SetSolid:				; XREF: Obj15_Index
0000802C 7200                       		moveq	#0,d1
0000802E 1228 0019                  		move.b	$19(a0),d1
00008032 7600                       		moveq	#0,d3
00008034 1628 0016                  		move.b	$16(a0),d3
00008038 6100 FA76                  		bsr.w	Obj15_Solid
0000803C                            
0000803C                            Obj15_Action:				; XREF: Obj15_Index
0000803C 6100 0000                  		bsr.w	Obj15_Move
00008040 6100 0000                  		bsr.w	DisplaySprite
00008044 6000 0000                  		bra.w	Obj15_ChkDel
00008048                            ; ===========================================================================
00008048                            
00008048                            Obj15_Action2:				; XREF: Obj15_Index
00008048 7200                       		moveq	#0,d1
0000804A 1228 0019                  		move.b	$19(a0),d1
0000804E 6100 FAC4                  		bsr.w	ExitPlatform
00008052 3F28 0008                  		move.w	8(a0),-(sp)
00008056 6100 0000                  		bsr.w	Obj15_Move
0000805A 341F                       		move.w	(sp)+,d2
0000805C 7600                       		moveq	#0,d3
0000805E 1628 0016                  		move.b	$16(a0),d3
00008062 5203                       		addq.b	#1,d3
00008064 6100 0000                  		bsr.w	MvSonicOnPtfm
00008068 6100 0000                  		bsr.w	DisplaySprite
0000806C 6000 0000                  		bra.w	Obj15_ChkDel
00008070                            
00008070 4E75                       		rts
00008072                            
00008072                            ; ---------------------------------------------------------------------------
00008072                            ; Subroutine to	change Sonic's position with a platform
00008072                            ; ---------------------------------------------------------------------------
00008072                            
00008072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008072                            
00008072                            
00008072                            MvSonicOnPtfm:
00008072 43F8 D000                  		lea	($FFFFD000).w,a1
00008076 3028 000C                  		move.w	$C(a0),d0
0000807A 9043                       		sub.w	d3,d0
0000807C 6000                       		bra.s	MvSonic2
0000807E                            ; End of function MvSonicOnPtfm
0000807E                            
0000807E                            ; ---------------------------------------------------------------------------
0000807E                            ; Subroutine to	change Sonic's position with a platform
0000807E                            ; ---------------------------------------------------------------------------
0000807E                            
0000807E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000807E                            
0000807E                            
0000807E                            MvSonicOnPtfm2:
0000807E 43F8 D000                  		lea	($FFFFD000).w,a1
00008082 3028 000C                  		move.w	$C(a0),d0
00008086 0440 0009                  		subi.w	#9,d0
0000808A                            
0000808A                            MvSonic2:
0000808A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000808E 6B00                       		bmi.s	locret_7B62
00008090 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008096 6400                       		bcc.s	locret_7B62
00008098 4A78 FE08                  		tst.w	($FFFFFE08).w
0000809C 6600                       		bne.s	locret_7B62
0000809E 7200                       		moveq	#0,d1
000080A0 1229 0016                  		move.b	$16(a1),d1
000080A4 9041                       		sub.w	d1,d0
000080A6 3340 000C                  		move.w	d0,$C(a1)
000080AA 9468 0008                  		sub.w	8(a0),d2
000080AE 9569 0008                  		sub.w	d2,8(a1)
000080B2                            
000080B2                            locret_7B62:
000080B2 4E75                       		rts	
000080B4                            ; End of function MvSonicOnPtfm2
000080B4                            
000080B4                            
000080B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080B4                            
000080B4                            
000080B4                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
000080B4 1038 FE78                  		move.b	($FFFFFE78).w,d0
000080B8 323C 0080                  		move.w	#$80,d1
000080BC 0828 0000 0022             		btst	#0,$22(a0)
000080C2 6700                       		beq.s	loc_7B78
000080C4 4440                       		neg.w	d0
000080C6 D041                       		add.w	d1,d0
000080C8                            
000080C8                            loc_7B78:
000080C8 6000                       		bra.s	Obj15_Move2
000080CA                            ; End of function Obj15_Move
000080CA                            
000080CA                            
000080CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080CA                            
000080CA                            
000080CA                            Obj48_Move:				; XREF: Obj48_Display2
000080CA 4A28 003D                  		tst.b	$3D(a0)
000080CE 6600                       		bne.s	loc_7B9C
000080D0 3028 003E                  		move.w	$3E(a0),d0
000080D4 5040                       		addq.w	#8,d0
000080D6 3140 003E                  		move.w	d0,$3E(a0)
000080DA D168 0026                  		add.w	d0,$26(a0)
000080DE 0C40 0200                  		cmpi.w	#$200,d0
000080E2 6600                       		bne.s	loc_7BB6
000080E4 117C 0001 003D             		move.b	#1,$3D(a0)
000080EA 6000                       		bra.s	loc_7BB6
000080EC                            ; ===========================================================================
000080EC                            
000080EC                            loc_7B9C:
000080EC 3028 003E                  		move.w	$3E(a0),d0
000080F0 5140                       		subq.w	#8,d0
000080F2 3140 003E                  		move.w	d0,$3E(a0)
000080F6 D168 0026                  		add.w	d0,$26(a0)
000080FA 0C40 FE00                  		cmpi.w	#-$200,d0
000080FE 6600                       		bne.s	loc_7BB6
00008100 117C 0000 003D             		move.b	#0,$3D(a0)
00008106                            
00008106                            loc_7BB6:
00008106 1028 0026                  		move.b	$26(a0),d0
0000810A                            ; End of function Obj48_Move
0000810A                            
0000810A                            
0000810A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000810A                            
0000810A                            
0000810A                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000810A 6100 AB58                  		bsr.w	CalcSine
0000810E 3428 0038                  		move.w	$38(a0),d2
00008112 3628 003A                  		move.w	$3A(a0),d3
00008116 45E8 0028                  		lea	$28(a0),a2
0000811A 7C00                       		moveq	#0,d6
0000811C 1C1A                       		move.b	(a2)+,d6
0000811E                            
0000811E                            loc_7BCE:
0000811E 7800                       		moveq	#0,d4
00008120 181A                       		move.b	(a2)+,d4
00008122 ED4C                       		lsl.w	#6,d4
00008124 0684 00FF D000             		addi.l	#$FFD000,d4
0000812A 2244                       		movea.l	d4,a1
0000812C 7800                       		moveq	#0,d4
0000812E 1829 003C                  		move.b	$3C(a1),d4
00008132 2A04                       		move.l	d4,d5
00008134 C9C0                       		muls.w	d0,d4
00008136 E084                       		asr.l	#8,d4
00008138 CBC1                       		muls.w	d1,d5
0000813A E085                       		asr.l	#8,d5
0000813C D842                       		add.w	d2,d4
0000813E DA43                       		add.w	d3,d5
00008140 3344 000C                  		move.w	d4,$C(a1)
00008144 3345 0008                  		move.w	d5,8(a1)
00008148 51CE FFD4                  		dbf	d6,loc_7BCE
0000814C 4E75                       		rts	
0000814E                            ; End of function Obj15_Move2
0000814E                            
0000814E                            ; ===========================================================================
0000814E                            
0000814E                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000814E 3028 003A                  		move.w	$3A(a0),d0
00008152 0240 FF80                  		andi.w	#$FF80,d0
00008156 3238 F700                  		move.w	($FFFFF700).w,d1
0000815A 0441 0080                  		subi.w	#$80,d1
0000815E 0241 FF80                  		andi.w	#$FF80,d1
00008162 9041                       		sub.w	d1,d0
00008164 0C40 0280                  		cmpi.w	#$280,d0
00008168 6200 0000                  		bhi.w	Obj15_DelAll
0000816C 4E75                       		rts	
0000816E                            ; ===========================================================================
0000816E                            
0000816E                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000816E 7400                       		moveq	#0,d2
00008170 45E8 0028                  		lea	$28(a0),a2
00008174 141A                       		move.b	(a2)+,d2
00008176                            
00008176                            Obj15_DelLoop:
00008176 7000                       		moveq	#0,d0
00008178 101A                       		move.b	(a2)+,d0
0000817A ED48                       		lsl.w	#6,d0
0000817C 0680 00FF D000             		addi.l	#$FFD000,d0
00008182 2240                       		movea.l	d0,a1
00008184 6100 0000                  		bsr.w	DeleteObject2
00008188 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000818C 4E75                       		rts	
0000818E                            ; ===========================================================================
0000818E                            
0000818E                            Obj15_Delete:				; XREF: Obj15_Index
0000818E 6100 0000                  		bsr.w	DeleteObject
00008192 4E75                       		rts	
00008194                            ; ===========================================================================
00008194                            
00008194                            Obj15_Display:				; XREF: Obj15_Index
00008194 6000 0000                  		bra.w	DisplaySprite
00008198                            ; ===========================================================================
00008198                            ; ---------------------------------------------------------------------------
00008198                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008198                            ; ---------------------------------------------------------------------------
00008198                            Map_obj15:
00008198                            	include "_maps\obj15ghz.asm"
00008198                            ; ---------------------------------------------------------------------------
00008198                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008198                            ; ---------------------------------------------------------------------------
00008198 0000                       		dc.w byte_7C4E-Map_obj15
0000819A 0000                       		dc.w byte_7C59-Map_obj15
0000819C 0000                       		dc.w byte_7C5F-Map_obj15
0000819E 02                         byte_7C4E:	dc.b 2
0000819F F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000081A4 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000081A9 01                         byte_7C59:	dc.b 1
000081AA F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000081AF 01                         byte_7C5F:	dc.b 1
000081B0 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000081B6 00                         		even
000081B6 00                         		even
000081B6                            
000081B6                            ; ---------------------------------------------------------------------------
000081B6                            ; Sprite mappings - SLZ	swinging platforms
000081B6                            ; ---------------------------------------------------------------------------
000081B6                            Map_obj15a:
000081B6                            	include "_maps\obj15slz.asm"
000081B6                            ; ---------------------------------------------------------------------------
000081B6                            ; Sprite mappings - SLZ	swinging platforms
000081B6                            ; ---------------------------------------------------------------------------
000081B6 0000                       		dc.w byte_7C6C-Map_obj15a
000081B8 0000                       		dc.w byte_7C95-Map_obj15a
000081BA 0000                       		dc.w byte_7C9B-Map_obj15a
000081BC 08                         byte_7C6C:	dc.b 8
000081BD F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000081C2 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000081C7 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000081CC F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000081D1 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000081D6 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000081DB 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000081E0 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000081E5 01                         byte_7C95:	dc.b 1
000081E6 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000081EB 01                         byte_7C9B:	dc.b 1
000081EC F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000081F2 00                         		even
000081F2 00                         		even
000081F2                            
000081F2                            ; ===========================================================================
000081F2                            ; ---------------------------------------------------------------------------
000081F2                            ; Object 17 - helix of spikes on a pole	(GHZ)
000081F2                            ; ---------------------------------------------------------------------------
000081F2                            
000081F2                            Obj17:					; XREF: Obj_Index
000081F2 7000                       		moveq	#0,d0
000081F4 1028 0024                  		move.b	$24(a0),d0
000081F8 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000081FC 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008200                            ; ===========================================================================
00008200 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008202 0000                       		dc.w Obj17_Action-Obj17_Index
00008204 0000                       		dc.w Obj17_Action-Obj17_Index
00008206 0000                       		dc.w Obj17_Delete-Obj17_Index
00008208 0000                       		dc.w Obj17_Display-Obj17_Index
0000820A                            ; ===========================================================================
0000820A                            
0000820A                            Obj17_Main:				; XREF: Obj17_Index
0000820A 5428 0024                  		addq.b	#2,$24(a0)
0000820E 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008216 317C 4398 0002             		move.w	#$4398,2(a0)
0000821C 117C 0007 0022             		move.b	#7,$22(a0)
00008222 117C 0004 0001             		move.b	#4,1(a0)
00008228 117C 0003 0018             		move.b	#3,$18(a0)
0000822E 117C 0008 0019             		move.b	#8,$19(a0)
00008234 3428 000C                  		move.w	$C(a0),d2
00008238 3628 0008                  		move.w	8(a0),d3
0000823C 1810                       		move.b	0(a0),d4
0000823E 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008242 7200                       		moveq	#0,d1
00008244 1212                       		move.b	(a2),d1		; move a2 to d1
00008246 14FC 0000                  		move.b	#0,(a2)+
0000824A 3001                       		move.w	d1,d0
0000824C E248                       		lsr.w	#1,d0
0000824E E948                       		lsl.w	#4,d0
00008250 9640                       		sub.w	d0,d3
00008252 5501                       		subq.b	#2,d1
00008254 6500                       		bcs.s	Obj17_Action
00008256 7C00                       		moveq	#0,d6
00008258                            
00008258                            Obj17_MakeHelix:
00008258 6100 0000                  		bsr.w	SingleObjLoad
0000825C 6600                       		bne.s	Obj17_Action
0000825E 5228 0028                  		addq.b	#1,$28(a0)
00008262 3A09                       		move.w	a1,d5
00008264 0445 D000                  		subi.w	#$D000,d5
00008268 EC4D                       		lsr.w	#6,d5
0000826A 0245 007F                  		andi.w	#$7F,d5
0000826E 14C5                       		move.b	d5,(a2)+
00008270 137C 0008 0024             		move.b	#8,$24(a1)
00008276 1284                       		move.b	d4,0(a1)
00008278 3342 000C                  		move.w	d2,$C(a1)
0000827C 3343 0008                  		move.w	d3,8(a1)
00008280 2368 0004 0004             		move.l	4(a0),4(a1)
00008286 337C 4398 0002             		move.w	#$4398,2(a1)
0000828C 137C 0004 0001             		move.b	#4,1(a1)
00008292 137C 0003 0018             		move.b	#3,$18(a1)
00008298 137C 0008 0019             		move.b	#8,$19(a1)
0000829E 1346 003E                  		move.b	d6,$3E(a1)
000082A2 5206                       		addq.b	#1,d6
000082A4 0206 0007                  		andi.b	#7,d6
000082A8 0643 0010                  		addi.w	#$10,d3
000082AC B668 0008                  		cmp.w	8(a0),d3
000082B0 6600                       		bne.s	loc_7D78
000082B2 1146 003E                  		move.b	d6,$3E(a0)
000082B6 5206                       		addq.b	#1,d6
000082B8 0206 0007                  		andi.b	#7,d6
000082BC 0643 0010                  		addi.w	#$10,d3
000082C0 5228 0028                  		addq.b	#1,$28(a0)
000082C4                            
000082C4                            loc_7D78:
000082C4 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000082C8                            
000082C8                            Obj17_Action:				; XREF: Obj17_Index
000082C8 6100 0000                  		bsr.w	Obj17_RotateSpikes
000082CC 6100 0000                  		bsr.w	DisplaySprite
000082D0 6000 0000                  		bra.w	Obj17_ChkDel
000082D4                            
000082D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082D4                            
000082D4                            
000082D4                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000082D4 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000082D8 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000082DE D028 003E                  		add.b	$3E(a0),d0
000082E2 0200 0007                  		andi.b	#7,d0
000082E6 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000082EA 6600                       		bne.s	locret_7DA6
000082EC 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000082F2                            
000082F2                            locret_7DA6:
000082F2 4E75                       		rts	
000082F4                            ; End of function Obj17_RotateSpikes
000082F4                            
000082F4                            ; ===========================================================================
000082F4                            
000082F4                            Obj17_ChkDel:				; XREF: Obj17_Action
000082F4 3028 0008                  		move.w	8(a0),d0
000082F8 0240 FF80                  		andi.w	#$FF80,d0
000082FC 3238 F700                  		move.w	($FFFFF700).w,d1
00008300 0441 0080                  		subi.w	#$80,d1
00008304 0241 FF80                  		andi.w	#$FF80,d1
00008308 9041                       		sub.w	d1,d0
0000830A 0C40 0280                  		cmpi.w	#$280,d0
0000830E 6200 0000                  		bhi.w	Obj17_DelAll
00008312 4E75                       		rts	
00008314                            ; ===========================================================================
00008314                            
00008314                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008314 7400                       		moveq	#0,d2
00008316 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000831A 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000831C 5502                       		subq.b	#2,d2
0000831E 6500                       		bcs.s	Obj17_Delete
00008320                            
00008320                            Obj17_DelLoop:
00008320 7000                       		moveq	#0,d0
00008322 101A                       		move.b	(a2)+,d0
00008324 ED48                       		lsl.w	#6,d0
00008326 0680 00FF D000             		addi.l	#$FFD000,d0
0000832C 2240                       		movea.l	d0,a1
0000832E 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008332 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008336                            
00008336                            Obj17_Delete:				; XREF: Obj17_Index
00008336 6100 0000                  		bsr.w	DeleteObject
0000833A 4E75                       		rts	
0000833C                            ; ===========================================================================
0000833C                            
0000833C                            Obj17_Display:				; XREF: Obj17_Index
0000833C 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008340 6000 0000                  		bra.w	DisplaySprite
00008344                            ; ===========================================================================
00008344                            ; ---------------------------------------------------------------------------
00008344                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008344                            ; ---------------------------------------------------------------------------
00008344                            Map_obj17:
00008344                            	include "_maps\obj17.asm"
00008344                            ; ---------------------------------------------------------------------------
00008344                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008344                            ; ---------------------------------------------------------------------------
00008344 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008348 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000834C 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008350 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008354 01                         byte_7E08:	dc.b 1
00008355 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
0000835A 01                         byte_7E0E:	dc.b 1
0000835B F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008360 01                         byte_7E14:	dc.b 1
00008361 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008366 01                         byte_7E1A:	dc.b 1
00008367 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000836C 01                         byte_7E20:	dc.b 1
0000836D 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008372 01                         byte_7E26:	dc.b 1
00008373 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008378 01                         byte_7E2C:	dc.b 1
00008379 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000837E                            		even
0000837E                            		even
0000837E                            
0000837E                            ; ===========================================================================
0000837E                            ; ---------------------------------------------------------------------------
0000837E                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000837E                            ; ---------------------------------------------------------------------------
0000837E                            
0000837E                            Obj18:					; XREF: Obj_Index
0000837E 7000                       		moveq	#0,d0
00008380 1028 0024                  		move.b	$24(a0),d0
00008384 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008388 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000838C                            ; ===========================================================================
0000838C 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000838E 0000                       		dc.w Obj18_Solid-Obj18_Index
00008390 0000                       		dc.w Obj18_Action2-Obj18_Index
00008392 0000                       		dc.w Obj18_Delete-Obj18_Index
00008394 0000                       		dc.w Obj18_Action-Obj18_Index
00008396                            ; ===========================================================================
00008396                            
00008396                            Obj18_Main:				; XREF: Obj18_Index
00008396 5428 0024                  		addq.b	#2,$24(a0)
0000839A 317C 4000 0002             		move.w	#$4000,2(a0)
000083A0 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000083A8 117C 0020 0019             		move.b	#$20,$19(a0)
000083AE 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000083B4 6600                       		bne.s	Obj18_NotSYZ
000083B6 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000083BE 117C 0020 0019             		move.b	#$20,$19(a0)
000083C4                            
000083C4                            Obj18_NotSYZ:
000083C4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000083CA 6600                       		bne.s	Obj18_NotSLZ
000083CC 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000083D4 117C 0020 0019             		move.b	#$20,$19(a0)
000083DA 317C 4000 0002             		move.w	#$4000,2(a0)
000083E0 117C 0003 0028             		move.b	#3,$28(a0)
000083E6                            
000083E6                            Obj18_NotSLZ:
000083E6 117C 0004 0001             		move.b	#4,1(a0)
000083EC 117C 0004 0018             		move.b	#4,$18(a0)
000083F2 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000083F8 3168 000C 0034             		move.w	$C(a0),$34(a0)
000083FE 3168 0008 0032             		move.w	8(a0),$32(a0)
00008404 317C 0080 0026             		move.w	#$80,$26(a0)
0000840A 7200                       		moveq	#0,d1
0000840C 1028 0028                  		move.b	$28(a0),d0
00008410 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008414 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008416 5201                       		addq.b	#1,d1		; use frame #1
00008418 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000841E                            
0000841E                            Obj18_SetFrame:
0000841E 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008422                            
00008422                            Obj18_Solid:				; XREF: Obj18_Index
00008422 4A28 0038                  		tst.b	$38(a0)
00008426 6700                       		beq.s	loc_7EE0
00008428 5928 0038                  		subq.b	#4,$38(a0)
0000842C                            
0000842C                            loc_7EE0:
0000842C 7200                       		moveq	#0,d1
0000842E 1228 0019                  		move.b	$19(a0),d1
00008432 6100 F56C                  		bsr.w	PlatformObject
00008436                            
00008436                            Obj18_Action:				; XREF: Obj18_Index
00008436 6100 0000                  		bsr.w	Obj18_Move
0000843A 6100 0000                  		bsr.w	Obj18_Nudge
0000843E 6100 0000                  		bsr.w	DisplaySprite
00008442 6000 0000                  		bra.w	Obj18_ChkDel
00008446                            ; ===========================================================================
00008446                            
00008446                            Obj18_Action2:				; XREF: Obj18_Index
00008446 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000844C 6700                       		beq.s	loc_7F06
0000844E 5828 0038                  		addq.b	#4,$38(a0)
00008452                            
00008452                            loc_7F06:
00008452 7200                       		moveq	#0,d1
00008454 1228 0019                  		move.b	$19(a0),d1
00008458 6100 F6BA                  		bsr.w	ExitPlatform
0000845C 3F28 0008                  		move.w	8(a0),-(sp)
00008460 6100 0000                  		bsr.w	Obj18_Move
00008464 6100 0000                  		bsr.w	Obj18_Nudge
00008468 341F                       		move.w	(sp)+,d2
0000846A 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000846E 6100 0000                  		bsr.w	DisplaySprite
00008472 6000 0000                  		bra.w	Obj18_ChkDel
00008476                            
00008476 4E75                       		rts
00008478                            
00008478                            ; ---------------------------------------------------------------------------
00008478                            ; Subroutine to	move platform slightly when you	stand on it
00008478                            ; ---------------------------------------------------------------------------
00008478                            
00008478                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008478                            
00008478                            
00008478                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008478 1028 0038                  		move.b	$38(a0),d0
0000847C 6100 A7E6                  		bsr.w	CalcSine
00008480 323C 0400                  		move.w	#$400,d1
00008484 C1C1                       		muls.w	d1,d0
00008486 4840                       		swap	d0
00008488 D068 002C                  		add.w	$2C(a0),d0
0000848C 3140 000C                  		move.w	d0,$C(a0)
00008490 4E75                       		rts	
00008492                            ; End of function Obj18_Nudge
00008492                            
00008492                            ; ---------------------------------------------------------------------------
00008492                            ; Subroutine to	move platforms
00008492                            ; ---------------------------------------------------------------------------
00008492                            
00008492                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008492                            
00008492                            
00008492                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008492 7000                       		moveq	#0,d0
00008494 1028 0028                  		move.b	$28(a0),d0
00008498 0240 000F                  		andi.w	#$F,d0
0000849C D040                       		add.w	d0,d0
0000849E 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000084A2 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000084A6                            ; End of function Obj18_Move
000084A6                            
000084A6                            ; ===========================================================================
000084A6 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000084AA 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000084AE 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000084B2 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000084B6 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000084BA 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000084BE 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000084C0                            ; ===========================================================================
000084C0                            
000084C0                            Obj18_Type00:
000084C0 4E75                       		rts			; platform 00 doesn't move
000084C2                            ; ===========================================================================
000084C2                            
000084C2                            Obj18_Type05:
000084C2 3028 0032                  		move.w	$32(a0),d0
000084C6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000084CA 4401                       		neg.b	d1		; reverse platform-motion
000084CC 0601 0040                  		addi.b	#$40,d1
000084D0 6000                       		bra.s	Obj18_01_Move
000084D2                            ; ===========================================================================
000084D2                            
000084D2                            Obj18_Type01:
000084D2 3028 0032                  		move.w	$32(a0),d0
000084D6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000084DA 0401 0040                  		subi.b	#$40,d1
000084DE                            
000084DE                            Obj18_01_Move:
000084DE 4881                       		ext.w	d1
000084E0 D041                       		add.w	d1,d0
000084E2 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000084E6 6000 0000                  		bra.w	Obj18_ChgMotion
000084EA                            ; ===========================================================================
000084EA                            
000084EA                            Obj18_Type0C:
000084EA 3028 0034                  		move.w	$34(a0),d0
000084EE 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000084F2 4401                       		neg.b	d1		; reverse platform-motion
000084F4 0601 0030                  		addi.b	#$30,d1
000084F8 6000                       		bra.s	Obj18_02_Move
000084FA                            ; ===========================================================================
000084FA                            
000084FA                            Obj18_Type0B:
000084FA 3028 0034                  		move.w	$34(a0),d0
000084FE 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008502 0401 0030                  		subi.b	#$30,d1
00008506 6000                       		bra.s	Obj18_02_Move
00008508                            ; ===========================================================================
00008508                            
00008508                            Obj18_Type06:
00008508 3028 0034                  		move.w	$34(a0),d0
0000850C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008510 4401                       		neg.b	d1		; reverse platform-motion
00008512 0601 0040                  		addi.b	#$40,d1
00008516 6000                       		bra.s	Obj18_02_Move
00008518                            ; ===========================================================================
00008518                            
00008518                            Obj18_Type02:
00008518 3028 0034                  		move.w	$34(a0),d0
0000851C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008520 0401 0040                  		subi.b	#$40,d1
00008524                            
00008524                            Obj18_02_Move:
00008524 4881                       		ext.w	d1
00008526 D041                       		add.w	d1,d0
00008528 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000852C 6000 0000                  		bra.w	Obj18_ChgMotion
00008530                            ; ===========================================================================
00008530                            
00008530                            Obj18_Type03:
00008530 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008534 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008536 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000853C 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000853E 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008544                            
00008544                            Obj18_03_NoMove:
00008544 4E75                       		rts	
00008546                            ; ===========================================================================
00008546                            
00008546                            Obj18_03_Wait:
00008546 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000854A 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000854C 317C 0020 003A             		move.w	#32,$3A(a0)
00008552 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008556 4E75                       		rts	
00008558                            ; ===========================================================================
00008558                            
00008558                            Obj18_Type04:
00008558 4A68 003A                  		tst.w	$3A(a0)
0000855C 6700                       		beq.s	loc_8048
0000855E 5368 003A                  		subq.w	#1,$3A(a0)
00008562 6600                       		bne.s	loc_8048
00008564 0828 0003 0022             		btst	#3,$22(a0)
0000856A 6700                       		beq.s	loc_8042
0000856C 08E9 0001 0022             		bset	#1,$22(a1)
00008572 08A9 0003 0022             		bclr	#3,$22(a1)
00008578 137C 0002 0024             		move.b	#2,$24(a1)
0000857E 08A8 0003 0022             		bclr	#3,$22(a0)
00008584 4228 0025                  		clr.b	$25(a0)
00008588 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000858E                            
0000858E                            loc_8042:
0000858E 117C 0008 0024             		move.b	#8,$24(a0)
00008594                            
00008594                            loc_8048:
00008594 2628 002C                  		move.l	$2C(a0),d3
00008598 3028 0012                  		move.w	$12(a0),d0
0000859C 48C0                       		ext.l	d0
0000859E E180                       		asl.l	#8,d0
000085A0 D680                       		add.l	d0,d3
000085A2 2143 002C                  		move.l	d3,$2C(a0)
000085A6 0668 0038 0012             		addi.w	#$38,$12(a0)
000085AC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000085B0 0640 00E0                  		addi.w	#$E0,d0
000085B4 B068 002C                  		cmp.w	$2C(a0),d0
000085B8 6400                       		bcc.s	locret_8074
000085BA 117C 0006 0024             		move.b	#6,$24(a0)
000085C0                            
000085C0                            locret_8074:
000085C0 4E75                       		rts	
000085C2                            ; ===========================================================================
000085C2                            
000085C2                            Obj18_Type07:
000085C2 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000085C6 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000085C8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000085CC 7000                       		moveq	#0,d0
000085CE 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000085D2 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000085D4 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000085D8 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000085DA 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000085E0                            
000085E0                            Obj18_07_NoMove:
000085E0 4E75                       		rts	
000085E2                            ; ===========================================================================
000085E2                            
000085E2                            Obj18_07_Wait:
000085E2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000085E6 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000085E8 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000085EC 4E75                       		rts	
000085EE                            ; ===========================================================================
000085EE                            
000085EE                            Obj18_Type08:
000085EE 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000085F2 3028 0034                  		move.w	$34(a0),d0
000085F6 0440 0200                  		subi.w	#$200,d0
000085FA B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000085FE 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008600 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008604                            
00008604                            Obj18_08_NoStop:
00008604 4E75                       		rts	
00008606                            ; ===========================================================================
00008606                            
00008606                            Obj18_Type0A:
00008606 3028 0034                  		move.w	$34(a0),d0
0000860A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000860E 0401 0040                  		subi.b	#$40,d1
00008612 4881                       		ext.w	d1
00008614 E241                       		asr.w	#1,d1
00008616 D041                       		add.w	d1,d0
00008618 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000861C                            
0000861C                            Obj18_ChgMotion:
0000861C 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008622 4E75                       		rts	
00008624                            ; ===========================================================================
00008624                            
00008624                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008624 3028 0032                  		move.w	$32(a0),d0
00008628 0240 FF80                  		andi.w	#$FF80,d0
0000862C 3238 F700                  		move.w	($FFFFF700).w,d1
00008630 0441 0080                  		subi.w	#$80,d1
00008634 0241 FF80                  		andi.w	#$FF80,d1
00008638 9041                       		sub.w	d1,d0
0000863A 0C40 0280                  		cmpi.w	#$280,d0
0000863E 6200                       		bhi.s	Obj18_Delete
00008640 4E75                       		rts	
00008642                            ; ===========================================================================
00008642                            
00008642                            Obj18_Delete:				; XREF: Obj18_Index
00008642 6000 0000                  		bra.w	DeleteObject
00008646                            ; ===========================================================================
00008646                            ; ---------------------------------------------------------------------------
00008646                            ; Sprite mappings - unused
00008646                            ; ---------------------------------------------------------------------------
00008646                            Map_obj18x:
00008646                            	include "_maps\obj18x.asm"
00008646                            ; ---------------------------------------------------------------------------
00008646                            ; Sprite mappings - unused
00008646                            ; ---------------------------------------------------------------------------
00008646 0000                       		dc.w byte_80FE-Map_obj18x
00008648 0000                       		dc.w byte_8109-Map_obj18x
0000864A 02                         byte_80FE:	dc.b 2
0000864B F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008650 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008655 0A                         byte_8109:	dc.b $A
00008656 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000865B 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008660 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008665 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000866A 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000866F F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008674 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008679 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000867E 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008683 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008688                            		even
00008688                            		even
00008688                            
00008688                            ; ---------------------------------------------------------------------------
00008688                            ; Sprite mappings - GHZ	platforms
00008688                            ; ---------------------------------------------------------------------------
00008688                            Map_obj18:
00008688                            	include "_maps\obj18ghz.asm"
00008688                            ; ---------------------------------------------------------------------------
00008688                            ; Sprite mappings - GHZ	platforms
00008688                            ; ---------------------------------------------------------------------------
00008688 0000                       		dc.w byte_8140-Map_obj18
0000868A 0000                       		dc.w byte_8155-Map_obj18
0000868C 04                         byte_8140:	dc.b 4
0000868D F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008692 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008697 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000869C F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000086A1 0A                         byte_8155:	dc.b $A
000086A2 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000086A7 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000086AC 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000086B1 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000086B6 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000086BB F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000086C0 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000086C5 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000086CA 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000086CF 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000086D4                            		even
000086D4                            		even
000086D4                            
000086D4                            ; ---------------------------------------------------------------------------
000086D4                            ; Sprite mappings - SYZ	platforms
000086D4                            ; ---------------------------------------------------------------------------
000086D4                            Map_obj18a:
000086D4                            	include "_maps\obj18syz.asm"
000086D4                            ; ---------------------------------------------------------------------------
000086D4                            ; Sprite mappings - SYZ	platforms
000086D4                            ; ---------------------------------------------------------------------------
000086D4 0000                       		dc.w byte_818A-Map_obj18a
000086D6 03                         byte_818A:	dc.b 3
000086D7 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000086DC F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000086E1 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000086E6                            		even
000086E6                            		even
000086E6                            
000086E6                            ; ---------------------------------------------------------------------------
000086E6                            ; Sprite mappings - SLZ	platforms
000086E6                            ; ---------------------------------------------------------------------------
000086E6                            Map_obj18b:
000086E6                            	include "_maps\obj18slz.asm"
000086E6                            ; ---------------------------------------------------------------------------
000086E6                            ; Sprite mappings - SLZ	platforms
000086E6                            ; ---------------------------------------------------------------------------
000086E6 0000                       		dc.w byte_819C-Map_obj18b
000086E8 02                         byte_819C:	dc.b 2
000086E9 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000086EE F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000086F4 00                         		even
000086F4 00                         		even
000086F4                            
000086F4                            ; ===========================================================================
000086F4                            ; ---------------------------------------------------------------------------
000086F4                            ; Object 19 - blank
000086F4                            ; ---------------------------------------------------------------------------
000086F4                            
000086F4                            Obj19:					; XREF: Obj_Index
000086F4 4E75                       		rts	
000086F6                            ; ===========================================================================
000086F6                            ; ---------------------------------------------------------------------------
000086F6                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000086F6                            ; ---------------------------------------------------------------------------
000086F6                            Map_obj48:
000086F6                            	include "_maps\obj48.asm"
000086F6                            ; ---------------------------------------------------------------------------
000086F6                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000086F6                            ; ---------------------------------------------------------------------------
000086F6 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000086FA 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000086FE 06                         byte_81B2:	dc.b 6
000086FF F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008704 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008709 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000870E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008713 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008718 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000871D 04                         byte_81D1:	dc.b 4
0000871E E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008723 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008728 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000872D 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008732 04                         byte_81E6:	dc.b 4
00008733 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008738 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000873D 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008742 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008747 04                         byte_81FB:	dc.b 4
00008748 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000874D E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008752 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008757 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000875C                            		even
0000875C                            		even
0000875C                            
0000875C                            ; ===========================================================================
0000875C                            ; ---------------------------------------------------------------------------
0000875C                            ; Object 1A - GHZ collapsing ledge
0000875C                            ; ---------------------------------------------------------------------------
0000875C                            
0000875C                            Obj1A:					; XREF: Obj_Index
0000875C 7000                       		moveq	#0,d0
0000875E 1028 0024                  		move.b	$24(a0),d0
00008762 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008766 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000876A                            ; ===========================================================================
0000876A 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000876E 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008772 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008776                            ; ===========================================================================
00008776                            
00008776                            Obj1A_Main:				; XREF: Obj1A_Index
00008776 5428 0024                  		addq.b	#2,$24(a0)
0000877A 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008782 317C 4000 0002             		move.w	#$4000,2(a0)
00008788 0028 0004 0001             		ori.b	#4,1(a0)
0000878E 117C 0004 0018             		move.b	#4,$18(a0)
00008794 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000879A 117C 0064 0019             		move.b	#$64,$19(a0)
000087A0 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000087A6 117C 0038 0016             		move.b	#$38,$16(a0)
000087AC 08E8 0004 0001             		bset	#4,1(a0)
000087B2                            
000087B2                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000087B2 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000087B6 6700                       		beq.s	Obj1A_Slope	; if not, branch
000087B8 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000087BC 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000087C0 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000087C4                            
000087C4                            Obj1A_Slope:
000087C4 323C 0030                  		move.w	#$30,d1
000087C8 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000087CE 6100 F2A4                  		bsr.w	SlopeObject
000087D2 6000 0000                  		bra.w	MarkObjGone
000087D6                            ; ===========================================================================
000087D6                            
000087D6                            Obj1A_Touch:				; XREF: Obj1A_Index
000087D6 4A28 0038                  		tst.b	$38(a0)
000087DA 6700 0000                  		beq.w	loc_847A
000087DE 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000087E4 5328 0038                  		subq.b	#1,$38(a0)
000087E8                            
000087E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087E8                            
000087E8                            
000087E8                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000087E8 323C 0030                  		move.w	#$30,d1
000087EC 6100 F326                  		bsr.w	ExitPlatform
000087F0 323C 0030                  		move.w	#$30,d1
000087F4 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000087FA 3428 0008                  		move.w	8(a0),d2
000087FE 6100 0000                  		bsr.w	SlopeObject2
00008802 6000 0000                  		bra.w	MarkObjGone
00008806                            ; End of function Obj1A_WalkOff
00008806                            
00008806                            ; ===========================================================================
00008806                            
00008806                            Obj1A_Display:				; XREF: Obj1A_Index
00008806 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000880A 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000880C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008810 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008814 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008818 6000 0000                  		bra.w	DisplaySprite
0000881C                            ; ===========================================================================
0000881C                            
0000881C                            loc_82D0:				; XREF: Obj1A_Display
0000881C 5328 0038                  		subq.b	#1,$38(a0)
00008820 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008824 43F8 D000                  		lea	($FFFFD000).w,a1
00008828 0829 0003 0022             		btst	#3,$22(a1)
0000882E 6700                       		beq.s	loc_82FC
00008830 4A28 0038                  		tst.b	$38(a0)
00008834 6600                       		bne.s	locret_8308
00008836 08A9 0003 0022             		bclr	#3,$22(a1)
0000883C 08A9 0005 0022             		bclr	#5,$22(a1)
00008842 137C 0001 001D             		move.b	#1,$1D(a1)
00008848                            
00008848                            loc_82FC:
00008848 117C 0000 003A             		move.b	#0,$3A(a0)
0000884E 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008854                            
00008854                            locret_8308:
00008854 4E75                       		rts	
00008856                            ; ===========================================================================
00008856                            
00008856                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008856 6100 0000                  		bsr.w	ObjectFall
0000885A 6100 0000                  		bsr.w	DisplaySprite
0000885E 4A28 0001                  		tst.b	1(a0)
00008862 6A00                       		bpl.s	Obj1A_Delete
00008864 4E75                       		rts	
00008866                            ; ===========================================================================
00008866                            
00008866                            Obj1A_Delete:				; XREF: Obj1A_Index
00008866 6100 0000                  		bsr.w	DeleteObject
0000886A 4E75                       		rts	
0000886C                            ; ===========================================================================
0000886C                            ; ---------------------------------------------------------------------------
0000886C                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000886C                            ; ---------------------------------------------------------------------------
0000886C                            
0000886C                            Obj53:					; XREF: Obj_Index
0000886C 7000                       		moveq	#0,d0
0000886E 1028 0024                  		move.b	$24(a0),d0
00008872 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008876 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0000887A                            ; ===========================================================================
0000887A 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000887E 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008882 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008886                            ; ===========================================================================
00008886                            
00008886                            Obj53_Main:				; XREF: Obj53_Index
00008886 5428 0024                  		addq.b	#2,$24(a0)
0000888A 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008892 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008898 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000889E 6600                       		bne.s	Obj53_NotSLZ
000088A0 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000088A6 5428 001A                  		addq.b	#2,$1A(a0)
000088AA                            
000088AA                            Obj53_NotSLZ:
000088AA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000088B0 6600                       		bne.s	Obj53_NotSBZ
000088B2 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000088B8                            
000088B8                            Obj53_NotSBZ:
000088B8 0028 0004 0001             		ori.b	#4,1(a0)
000088BE 117C 0004 0018             		move.b	#4,$18(a0)
000088C4 117C 0007 0038             		move.b	#7,$38(a0)
000088CA 117C 0044 0019             		move.b	#$44,$19(a0)
000088D0                            
000088D0                            Obj53_ChkTouch:				; XREF: Obj53_Index
000088D0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000088D4 6700                       		beq.s	Obj53_Solid	; if not, branch
000088D6 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000088DA 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000088DE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000088E2                            
000088E2                            Obj53_Solid:
000088E2 323C 0020                  		move.w	#$20,d1
000088E6 6100 F0B8                  		bsr.w	PlatformObject
000088EA 4A28 0028                  		tst.b	$28(a0)
000088EE 6A00                       		bpl.s	Obj53_MarkAsGone
000088F0 0829 0003 0022             		btst	#3,$22(a1)
000088F6 6700                       		beq.s	Obj53_MarkAsGone
000088F8 08A8 0000 0001             		bclr	#0,1(a0)
000088FE 3029 0008                  		move.w	8(a1),d0
00008902 9068 0008                  		sub.w	8(a0),d0
00008906 6400                       		bcc.s	Obj53_MarkAsGone
00008908 08E8 0000 0001             		bset	#0,1(a0)
0000890E                            
0000890E                            Obj53_MarkAsGone:
0000890E 6000 0000                  		bra.w	MarkObjGone
00008912                            ; ===========================================================================
00008912                            
00008912                            Obj53_Touch:				; XREF: Obj53_Index
00008912 4A28 0038                  		tst.b	$38(a0)
00008916 6700 0000                  		beq.w	loc_8458
0000891A 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008920 5328 0038                  		subq.b	#1,$38(a0)
00008924                            
00008924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008924                            
00008924                            
00008924                            Obj53_WalkOff:				; XREF: Obj53_Index
00008924 323C 0020                  		move.w	#$20,d1
00008928 6100 F1EA                  		bsr.w	ExitPlatform
0000892C 3428 0008                  		move.w	8(a0),d2
00008930 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008934 6000 0000                  		bra.w	MarkObjGone
00008938                            ; End of function Obj53_WalkOff
00008938                            
00008938                            ; ===========================================================================
00008938                            
00008938                            Obj53_Display:				; XREF: Obj53_Index
00008938 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000893C 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000893E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008942 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008946 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000894A 6000 0000                  		bra.w	DisplaySprite
0000894E                            ; ===========================================================================
0000894E                            
0000894E                            loc_8402:
0000894E 5328 0038                  		subq.b	#1,$38(a0)
00008952 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008956 43F8 D000                  		lea	($FFFFD000).w,a1
0000895A 0829 0003 0022             		btst	#3,$22(a1)
00008960 6700                       		beq.s	loc_842E
00008962 4A28 0038                  		tst.b	$38(a0)
00008966 6600                       		bne.s	locret_843A
00008968 08A9 0003 0022             		bclr	#3,$22(a1)
0000896E 08A9 0005 0022             		bclr	#5,$22(a1)
00008974 137C 0001 001D             		move.b	#1,$1D(a1)
0000897A                            
0000897A                            loc_842E:
0000897A 117C 0000 003A             		move.b	#0,$3A(a0)
00008980 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008986                            
00008986                            locret_843A:
00008986 4E75                       		rts	
00008988                            ; ===========================================================================
00008988                            
00008988                            Obj53_TimeZero:				; XREF: Obj53_Display
00008988 6100 0000                  		bsr.w	ObjectFall
0000898C 6100 0000                  		bsr.w	DisplaySprite
00008990 4A28 0001                  		tst.b	1(a0)
00008994 6A00                       		bpl.s	Obj53_Delete
00008996 4E75                       		rts	
00008998                            ; ===========================================================================
00008998                            
00008998                            Obj53_Delete:				; XREF: Obj53_Index
00008998 6100 0000                  		bsr.w	DeleteObject
0000899C 4E75                       		rts	
0000899E                            ; ===========================================================================
0000899E                            
0000899E                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000899E 117C 0000 003A             		move.b	#0,$3A(a0)
000089A4                            
000089A4                            loc_8458:				; XREF: Obj53_Touch
000089A4 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000089AA 0828 0000 0028             		btst	#0,$28(a0)
000089B0 6700                       		beq.s	loc_846C
000089B2 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000089B8                            
000089B8                            loc_846C:
000089B8 7207                       		moveq	#7,d1
000089BA 5228 001A                  		addq.b	#1,$1A(a0)
000089BE 6000                       		bra.s	loc_8486
000089C0                            ; ===========================================================================
000089C0                            
000089C0                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000089C0 117C 0000 003A             		move.b	#0,$3A(a0)
000089C6                            
000089C6                            loc_847A:				; XREF: Obj1A_Touch
000089C6 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000089CC 7218                       		moveq	#$18,d1
000089CE 5428 001A                  		addq.b	#2,$1A(a0)
000089D2                            
000089D2                            loc_8486:				; XREF: Obj53_Collapse
000089D2 7000                       		moveq	#0,d0
000089D4 1028 001A                  		move.b	$1A(a0),d0
000089D8 D040                       		add.w	d0,d0
000089DA 2668 0004                  		movea.l	4(a0),a3
000089DE D6F3 0000                  		adda.w	(a3,d0.w),a3
000089E2 524B                       		addq.w	#1,a3
000089E4 08E8 0005 0001             		bset	#5,1(a0)
000089EA 1810                       		move.b	0(a0),d4
000089EC 1A28 0001                  		move.b	1(a0),d5
000089F0 2248                       		movea.l	a0,a1
000089F2 6000                       		bra.s	loc_84B2
000089F4                            ; ===========================================================================
000089F4                            
000089F4                            loc_84AA:
000089F4 6100 0000                  		bsr.w	SingleObjLoad
000089F8 6600                       		bne.s	loc_84F2
000089FA 5A4B                       		addq.w	#5,a3
000089FC                            
000089FC                            loc_84B2:
000089FC 137C 0006 0024             		move.b	#6,$24(a1)
00008A02 1284                       		move.b	d4,0(a1)
00008A04 234B 0004                  		move.l	a3,4(a1)
00008A08 1345 0001                  		move.b	d5,1(a1)
00008A0C 3368 0008 0008             		move.w	8(a0),8(a1)
00008A12 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008A18 3368 0002 0002             		move.w	2(a0),2(a1)
00008A1E 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008A24 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008A2A 135C 0038                  		move.b	(a4)+,$38(a1)
00008A2E B3C8                       		cmpa.l	a0,a1
00008A30 6400                       		bcc.s	loc_84EE
00008A32 6100 0000                  		bsr.w	DisplaySprite2
00008A36                            
00008A36                            loc_84EE:
00008A36 51C9 FFBC                  		dbf	d1,loc_84AA
00008A3A                            
00008A3A                            loc_84F2:
00008A3A 6100 0000                  		bsr.w	DisplaySprite
00008A3E 303C 00B9                  		move.w	#$B9,d0
00008A42 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008A48                            ; ===========================================================================
00008A48                            ; ---------------------------------------------------------------------------
00008A48                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008A48                            ; ---------------------------------------------------------------------------
00008A48 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008A58 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008A62 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008A6A 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008A72                            
00008A72                            ; ---------------------------------------------------------------------------
00008A72                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008A72                            ; ---------------------------------------------------------------------------
00008A72                            
00008A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A72                            
00008A72                            
00008A72                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008A72 43F8 D000                  		lea	($FFFFD000).w,a1
00008A76 0829 0003 0022             		btst	#3,$22(a1)
00008A7C 6700                       		beq.s	locret_856E
00008A7E 3029 0008                  		move.w	8(a1),d0
00008A82 9068 0008                  		sub.w	8(a0),d0
00008A86 D041                       		add.w	d1,d0
00008A88 E248                       		lsr.w	#1,d0
00008A8A 0828 0000 0001             		btst	#0,1(a0)
00008A90 6700                       		beq.s	loc_854E
00008A92 4640                       		not.w	d0
00008A94 D041                       		add.w	d1,d0
00008A96                            
00008A96                            loc_854E:
00008A96 7200                       		moveq	#0,d1
00008A98 1232 0000                  		move.b	(a2,d0.w),d1
00008A9C 3028 000C                  		move.w	$C(a0),d0
00008AA0 9041                       		sub.w	d1,d0
00008AA2 7200                       		moveq	#0,d1
00008AA4 1229 0016                  		move.b	$16(a1),d1
00008AA8 9041                       		sub.w	d1,d0
00008AAA 3340 000C                  		move.w	d0,$C(a1)
00008AAE 9468 0008                  		sub.w	8(a0),d2
00008AB2 9569 0008                  		sub.w	d2,8(a1)
00008AB6                            
00008AB6                            locret_856E:
00008AB6 4E75                       		rts	
00008AB8                            ; End of function SlopeObject2
00008AB8                            
00008AB8                            ; ===========================================================================
00008AB8                            ; ---------------------------------------------------------------------------
00008AB8                            ; Collision data for GHZ collapsing ledge
00008AB8                            ; ---------------------------------------------------------------------------
00008AB8                            Obj1A_SlopeData:
00008AB8                            		incbin	misc\ghzledge.bin
00008AE8                            		even
00008AE8                            
00008AE8                            ; ---------------------------------------------------------------------------
00008AE8                            ; Sprite mappings - GHZ	collapsing ledge
00008AE8                            ; ---------------------------------------------------------------------------
00008AE8                            Map_obj1A:
00008AE8                            	include "_maps\obj1A.asm"
00008AE8                            ; ---------------------------------------------------------------------------
00008AE8                            ; Sprite mappings - GHZ	collapsing ledge
00008AE8                            ; ---------------------------------------------------------------------------
00008AE8 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008AEC 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008AF0 10                         byte_85A8:	dc.b $10
00008AF1 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008AF6 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008AFB E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008B00 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008B05 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B0A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008B0F F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008B14 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008B19 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B1E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008B23 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008B28 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B2D 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008B32 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008B37 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008B3C 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B41 10                         byte_85F9:	dc.b $10
00008B42 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008B47 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008B4C E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008B51 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008B56 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B5B D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008B60 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008B65 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008B6A F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B6F F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008B74 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008B79 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B7E 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008B83 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008B88 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008B8D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B92 19                         byte_864A:	dc.b $19
00008B93 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008B98 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008B9D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008BA2 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008BA7 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008BAC E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008BB1 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008BB6 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008BBB D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008BC0 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008BC5 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008BCA F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008BCF F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008BD4 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008BD9 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008BDE F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008BE3 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008BE8 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008BED 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008BF2 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008BF7 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008BFC 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008C01 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008C06 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008C0B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C10 19                         byte_86C8:	dc.b $19
00008C11 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008C16 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008C1B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008C20 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008C25 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008C2A E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008C2F E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008C34 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008C39 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C3E D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008C43 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008C48 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008C4D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008C52 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008C57 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008C5C F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008C61 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008C66 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008C6B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008C70 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008C75 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008C7A 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008C7F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008C84 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008C89 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C8E                            		even
00008C8E                            		even
00008C8E                            
00008C8E                            ; ---------------------------------------------------------------------------
00008C8E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008C8E                            ; ---------------------------------------------------------------------------
00008C8E                            Map_obj53:
00008C8E                            	include "_maps\obj53.asm"
00008C8E                            ; ---------------------------------------------------------------------------
00008C8E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008C8E                            ; ---------------------------------------------------------------------------
00008C8E 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008C92 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008C96 04                         byte_874E:	dc.b 4
00008C97 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008C9C 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008CA1 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008CA6 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008CAB 08                         byte_8763:	dc.b 8
00008CAC F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008CB1 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008CB6 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008CBB F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008CC0 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008CC5 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008CCA 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008CCF 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008CD4 04                         byte_878C:	dc.b 4
00008CD5 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008CDA 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008CDF F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008CE4 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008CE9 08                         byte_87A1:	dc.b 8
00008CEA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008CEF F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008CF4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008CF9 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008CFE 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008D03 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008D08 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008D0D 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008D12                            		even
00008D12                            		even
00008D12                            
00008D12                            ; ===========================================================================
00008D12                            ; ---------------------------------------------------------------------------
00008D12                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008D12                            ; ---------------------------------------------------------------------------
00008D12                            
00008D12                            Obj1C:					; XREF: Obj_Index
00008D12 7000                       		moveq	#0,d0
00008D14 1028 0024                  		move.b	$24(a0),d0
00008D18 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008D1C 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008D20                            ; ===========================================================================
00008D20 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008D22 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008D24                            ; ===========================================================================
00008D24                            
00008D24                            Obj1C_Main:				; XREF: Obj1C_Index
00008D24 5428 0024                  		addq.b	#2,$24(a0)
00008D28 7000                       		moveq	#0,d0
00008D2A 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008D2E C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008D32 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008D36 2159 0004                  		move.l	(a1)+,4(a0)
00008D3A 3159 0002                  		move.w	(a1)+,2(a0)
00008D3E 0028 0004 0001             		ori.b	#4,1(a0)
00008D44 1159 001A                  		move.b	(a1)+,$1A(a0)
00008D48 1159 0019                  		move.b	(a1)+,$19(a0)
00008D4C 1159 0018                  		move.b	(a1)+,$18(a0)
00008D50 1159 0020                  		move.b	(a1)+,$20(a0)
00008D54                            
00008D54                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008D54 3028 0008                  		move.w	8(a0),d0
00008D58 0240 FF80                  		andi.w	#$FF80,d0
00008D5C 3238 F700                  		move.w	($FFFFF700).w,d1
00008D60 0441 0080                  		subi.w	#$80,d1
00008D64 0241 FF80                  		andi.w	#$FF80,d1
00008D68 9041                       		sub.w	d1,d0
00008D6A 0C40 0280                  		cmpi.w	#$280,d0
00008D6E 6200 0000                  		bhi.w	DeleteObject
00008D72 6000 0000                  		bra.w	DisplaySprite
00008D76                            ; ===========================================================================
00008D76                            ; ---------------------------------------------------------------------------
00008D76                            ; Variables for	object $1C are stored in an array
00008D76                            ; ---------------------------------------------------------------------------
00008D76 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008D7A 44D8                       		dc.w $44D8		; VRAM setting
00008D7C 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008D80 0000 0000                  		dc.l Map_obj1C
00008D84 44D8                       		dc.w $44D8
00008D86 0008 0200                  		dc.b 0,	8, 2, 0
00008D8A 0000 0000                  		dc.l Map_obj1C
00008D8E 44D8                       		dc.w $44D8
00008D90 0008 0200                  		dc.b 0,	8, 2, 0
00008D94 0000 7E88                  		dc.l Map_obj11
00008D98 438E                       		dc.w $438E
00008D9A 0110 0100                  		dc.b 1,	$10, 1,	0
00008D9E                            ; ---------------------------------------------------------------------------
00008D9E                            ; Sprite mappings - SLZ	lava thrower
00008D9E                            ; ---------------------------------------------------------------------------
00008D9E                            Map_obj1C:
00008D9E                            	include "_maps\obj1C.asm"
00008D9E                            ; ---------------------------------------------------------------------------
00008D9E                            ; Sprite mappings - SLZ	lava thrower
00008D9E                            ; ---------------------------------------------------------------------------
00008D9E 0000                       		dc.w byte_8858-Map_obj1C
00008DA0 01                         byte_8858:	dc.b 1
00008DA1 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008DA6                            		even
00008DA6                            		even
00008DA6                            
00008DA6                            ; ===========================================================================
00008DA6                            ; ---------------------------------------------------------------------------
00008DA6                            ; Object 1D - switch that activates when Sonic touches it
00008DA6                            ; (this	is not used anywhere in	the game)
00008DA6                            ; ---------------------------------------------------------------------------
00008DA6                            
00008DA6                            Obj1D:					; XREF: Obj_Index
00008DA6 7000                       		moveq	#0,d0
00008DA8 1028 0024                  		move.b	$24(a0),d0
00008DAC 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008DB0 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008DB4                            ; ===========================================================================
00008DB4 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008DB6 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008DB8 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008DBA                            ; ===========================================================================
00008DBA                            
00008DBA                            Obj1D_Main:				; XREF: Obj1D_Index
00008DBA 5428 0024                  		addq.b	#2,$24(a0)
00008DBE 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008DC6 317C 4000 0002             		move.w	#$4000,2(a0)
00008DCC 117C 0004 0001             		move.b	#4,1(a0)
00008DD2 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008DD8 117C 0010 0019             		move.b	#$10,$19(a0)
00008DDE 117C 0005 0018             		move.b	#5,$18(a0)
00008DE4                            
00008DE4                            Obj1D_Action:				; XREF: Obj1D_Index
00008DE4 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008DEA 323C 0010                  		move.w	#$10,d1
00008DEE 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008DF2 6700                       		beq.s	Obj1D_ChkDel
00008DF4 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008DF8 7001                       		moveq	#1,d0
00008DFA 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008DFE                            
00008DFE                            Obj1D_ChkDel:
00008DFE 6100 0000                  		bsr.w	DisplaySprite
00008E02 3028 0008                  		move.w	8(a0),d0
00008E06 0240 FF80                  		andi.w	#$FF80,d0
00008E0A 3238 F700                  		move.w	($FFFFF700).w,d1
00008E0E 0441 0080                  		subi.w	#$80,d1
00008E12 0241 FF80                  		andi.w	#$FF80,d1
00008E16 9041                       		sub.w	d1,d0
00008E18 0C40 0280                  		cmpi.w	#$280,d0
00008E1C 6200 0000                  		bhi.w	Obj1D_Delete
00008E20 4E75                       		rts	
00008E22                            ; ===========================================================================
00008E22                            
00008E22                            Obj1D_Delete:				; XREF: Obj1D_Index
00008E22 6100 0000                  		bsr.w	DeleteObject
00008E26 4E75                       		rts	
00008E28                            ; ---------------------------------------------------------------------------
00008E28                            ; Subroutine to	check if Sonic touches the object
00008E28                            ; ---------------------------------------------------------------------------
00008E28                            
00008E28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E28                            
00008E28                            
00008E28                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008E28 43F8 D000                  		lea	($FFFFD000).w,a1
00008E2C 3029 0008                  		move.w	8(a1),d0
00008E30 9068 0008                  		sub.w	8(a0),d0
00008E34 D041                       		add.w	d1,d0
00008E36 6B00                       		bmi.s	loc_8918
00008E38 D241                       		add.w	d1,d1
00008E3A B041                       		cmp.w	d1,d0
00008E3C 6400                       		bcc.s	loc_8918
00008E3E 3429 000C                  		move.w	$C(a1),d2
00008E42 1229 0016                  		move.b	$16(a1),d1
00008E46 4881                       		ext.w	d1
00008E48 D242                       		add.w	d2,d1
00008E4A 3028 000C                  		move.w	$C(a0),d0
00008E4E 0440 0010                  		subi.w	#$10,d0
00008E52 9041                       		sub.w	d1,d0
00008E54 6200                       		bhi.s	loc_8918
00008E56 0C40 FFF0                  		cmpi.w	#-$10,d0
00008E5A 6500                       		bcs.s	loc_8918
00008E5C 70FF                       		moveq	#-1,d0
00008E5E 4E75                       		rts	
00008E60                            ; ===========================================================================
00008E60                            
00008E60                            loc_8918:
00008E60 7000                       		moveq	#0,d0
00008E62 4E75                       		rts	
00008E64                            ; End of function Obj1D_ChkTouch
00008E64                            
00008E64                            ; ===========================================================================
00008E64                            ; ---------------------------------------------------------------------------
00008E64                            ; Sprite mappings - object 1D
00008E64                            ; ---------------------------------------------------------------------------
00008E64                            Map_obj1D:
00008E64                            	include "_maps\obj1D.asm"
00008E64                            ; ---------------------------------------------------------------------------
00008E64                            ; Sprite mappings - object 1D
00008E64                            ; ---------------------------------------------------------------------------
00008E64 0000                       		dc.w byte_891E-Map_obj1D
00008E66 04                         byte_891E:	dc.b 4
00008E67 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008E6C 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008E71 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008E76 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008E7C 00                         		even
00008E7C 00                         		even
00008E7C                            
00008E7C                            ; ===========================================================================
00008E7C                            ; ---------------------------------------------------------------------------
00008E7C                            ; Object 2A - doors (SBZ)
00008E7C                            ; ---------------------------------------------------------------------------
00008E7C                            
00008E7C                            Obj2A:					; XREF: Obj_Index
00008E7C 7000                       		moveq	#0,d0
00008E7E 1028 0024                  		move.b	$24(a0),d0
00008E82 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008E86 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008E8A                            ; ===========================================================================
00008E8A 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008E8C 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008E8E                            ; ===========================================================================
00008E8E                            
00008E8E                            Obj2A_Main:				; XREF: Obj2A_Index
00008E8E 5428 0024                  		addq.b	#2,$24(a0)
00008E92 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008E9A 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008EA0 0028 0004 0001             		ori.b	#4,1(a0)
00008EA6 117C 0008 0019             		move.b	#8,$19(a0)
00008EAC 117C 0004 0018             		move.b	#4,$18(a0)
00008EB2                            
00008EB2                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008EB2 323C 0040                  		move.w	#$40,d1
00008EB6 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008EBA 3038 D008                  		move.w	($FFFFD008).w,d0
00008EBE D041                       		add.w	d1,d0
00008EC0 B068 0008                  		cmp.w	8(a0),d0
00008EC4 6500                       		bcs.s	Obj2A_Animate
00008EC6 9041                       		sub.w	d1,d0
00008EC8 9041                       		sub.w	d1,d0
00008ECA B068 0008                  		cmp.w	8(a0),d0
00008ECE 6400                       		bcc.s	Obj2A_Animate
00008ED0 D041                       		add.w	d1,d0
00008ED2 B068 0008                  		cmp.w	8(a0),d0
00008ED6 6400                       		bcc.s	loc_899A
00008ED8 0828 0000 0022             		btst	#0,$22(a0)
00008EDE 6600                       		bne.s	Obj2A_Animate
00008EE0 6000                       		bra.s	Obj2A_Open
00008EE2                            ; ===========================================================================
00008EE2                            
00008EE2                            loc_899A:				; XREF: Obj2A_OpenShut
00008EE2 0828 0000 0022             		btst	#0,$22(a0)
00008EE8 6700                       		beq.s	Obj2A_Animate
00008EEA                            
00008EEA                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008EEA 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008EF0                            
00008EF0                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008EF0 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008EF6 6100 0000                  		bsr.w	AnimateSprite
00008EFA 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008EFE 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008F00 323C 0011                  		move.w	#$11,d1
00008F04 343C 0020                  		move.w	#$20,d2
00008F08 3602                       		move.w	d2,d3
00008F0A 5243                       		addq.w	#1,d3
00008F0C 3828 0008                  		move.w	8(a0),d4
00008F10 6100 0000                  		bsr.w	SolidObject
00008F14                            
00008F14                            Obj2A_MarkAsUsed:
00008F14 6000 0000                  		bra.w	MarkObjGone
00008F18                            ; ===========================================================================
00008F18                            Ani_obj2A:
00008F18                            	include "_anim\obj2A.asm"
00008F18                            ; ---------------------------------------------------------------------------
00008F18                            ; Animation script - doors (SBZ)
00008F18                            ; ---------------------------------------------------------------------------
00008F18 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008F1A 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008F1C 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008F28 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008F34                            		even
00008F34                            		even
00008F34                            
00008F34                            ; ---------------------------------------------------------------------------
00008F34                            ; Sprite mappings - doors (SBZ)
00008F34                            ; ---------------------------------------------------------------------------
00008F34                            Map_obj2A:
00008F34                            	include "_maps\obj2A.asm"
00008F34                            ; ---------------------------------------------------------------------------
00008F34                            ; Sprite mappings - doors (SBZ)
00008F34                            ; ---------------------------------------------------------------------------
00008F34 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008F38 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008F3C 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008F40 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008F44 0000                       		dc.w byte_8A56-Map_obj2A
00008F46 02                         byte_89FE:	dc.b 2
00008F47 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008F4C 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008F51 02                         byte_8A09:	dc.b 2
00008F52 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008F57 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008F5C 02                         byte_8A14:	dc.b 2
00008F5D D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008F62 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008F67 02                         byte_8A1F:	dc.b 2
00008F68 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008F6D 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008F72 02                         byte_8A2A:	dc.b 2
00008F73 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008F78 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008F7D 02                         byte_8A35:	dc.b 2
00008F7E CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008F83 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008F88 02                         byte_8A40:	dc.b 2
00008F89 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008F8E 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008F93 02                         byte_8A4B:	dc.b 2
00008F94 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008F99 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008F9E 02                         byte_8A56:	dc.b 2
00008F9F C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008FA4 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008FAA 00                         		even
00008FAA 00                         		even
00008FAA                            
00008FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FAA                            
00008FAA                            
00008FAA                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008FAA 6100 0000                  		bsr.w	Obj44_SolidWall2
00008FAE 6700                       		beq.s	loc_8AA8
00008FB0 6B00 0000                  		bmi.w	loc_8AC4
00008FB4 4A40                       		tst.w	d0
00008FB6 6700 0000                  		beq.w	loc_8A92
00008FBA 6B00                       		bmi.s	loc_8A7C
00008FBC 4A69 0010                  		tst.w	$10(a1)
00008FC0 6B00                       		bmi.s	loc_8A92
00008FC2 6000                       		bra.s	loc_8A82
00008FC4                            ; ===========================================================================
00008FC4                            
00008FC4                            loc_8A7C:
00008FC4 4A69 0010                  		tst.w	$10(a1)
00008FC8 6A00                       		bpl.s	loc_8A92
00008FCA                            
00008FCA                            loc_8A82:
00008FCA 9169 0008                  		sub.w	d0,8(a1)
00008FCE 337C 0000 0014             		move.w	#0,$14(a1)
00008FD4 337C 0000 0010             		move.w	#0,$10(a1)
00008FDA                            
00008FDA                            loc_8A92:
00008FDA 0829 0001 0022             		btst	#1,$22(a1)
00008FE0 6600                       		bne.s	loc_8AB6
00008FE2 08E9 0005 0022             		bset	#5,$22(a1)
00008FE8 08E8 0005 0022             		bset	#5,$22(a0)
00008FEE 4E75                       		rts	
00008FF0                            ; ===========================================================================
00008FF0                            
00008FF0                            loc_8AA8:
00008FF0 0828 0005 0022             		btst	#5,$22(a0)
00008FF6 6700                       		beq.s	locret_8AC2
00008FF8 337C 0001 001C             		move.w	#1,$1C(a1)
00008FFE                            
00008FFE                            loc_8AB6:
00008FFE 08A8 0005 0022             		bclr	#5,$22(a0)
00009004 08A9 0005 0022             		bclr	#5,$22(a1)
0000900A                            
0000900A                            locret_8AC2:
0000900A 4E75                       		rts	
0000900C                            ; ===========================================================================
0000900C                            
0000900C                            loc_8AC4:
0000900C 4A69 0012                  		tst.w	$12(a1)
00009010 6A00                       		bpl.s	locret_8AD8
00009012 4A43                       		tst.w	d3
00009014 6A00                       		bpl.s	locret_8AD8
00009016 9769 000C                  		sub.w	d3,$C(a1)
0000901A 337C 0000 0012             		move.w	#0,$12(a1)
00009020                            
00009020                            locret_8AD8:
00009020 4E75                       		rts	
00009022                            ; End of function Obj44_SolidWall
00009022                            
00009022                            
00009022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009022                            
00009022                            
00009022                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009022 43F8 D000                  		lea	($FFFFD000).w,a1
00009026 3029 0008                  		move.w	8(a1),d0
0000902A 9068 0008                  		sub.w	8(a0),d0
0000902E D041                       		add.w	d1,d0
00009030 6B00                       		bmi.s	loc_8B48
00009032 3601                       		move.w	d1,d3
00009034 D643                       		add.w	d3,d3
00009036 B043                       		cmp.w	d3,d0
00009038 6200                       		bhi.s	loc_8B48
0000903A 1629 0016                  		move.b	$16(a1),d3
0000903E 4883                       		ext.w	d3
00009040 D443                       		add.w	d3,d2
00009042 3629 000C                  		move.w	$C(a1),d3
00009046 9668 000C                  		sub.w	$C(a0),d3
0000904A D642                       		add.w	d2,d3
0000904C 6B00                       		bmi.s	loc_8B48
0000904E 3802                       		move.w	d2,d4
00009050 D844                       		add.w	d4,d4
00009052 B644                       		cmp.w	d4,d3
00009054 6400                       		bcc.s	loc_8B48
00009056 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000905A 6B00                       		bmi.s	loc_8B48
0000905C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009062 6400                       		bcc.s	loc_8B48
00009064 4A78 FE08                  		tst.w	($FFFFFE08).w
00009068 6600                       		bne.s	loc_8B48
0000906A 3A00                       		move.w	d0,d5
0000906C B240                       		cmp.w	d0,d1
0000906E 6400                       		bcc.s	loc_8B30
00009070 D241                       		add.w	d1,d1
00009072 9041                       		sub.w	d1,d0
00009074 3A00                       		move.w	d0,d5
00009076 4445                       		neg.w	d5
00009078                            
00009078                            loc_8B30:
00009078 3203                       		move.w	d3,d1
0000907A B443                       		cmp.w	d3,d2
0000907C 6400                       		bcc.s	loc_8B3C
0000907E 9644                       		sub.w	d4,d3
00009080 3203                       		move.w	d3,d1
00009082 4441                       		neg.w	d1
00009084                            
00009084                            loc_8B3C:
00009084 BA41                       		cmp.w	d1,d5
00009086 6200                       		bhi.s	loc_8B44
00009088 7801                       		moveq	#1,d4
0000908A 4E75                       		rts	
0000908C                            ; ===========================================================================
0000908C                            
0000908C                            loc_8B44:
0000908C 78FF                       		moveq	#-1,d4
0000908E 4E75                       		rts	
00009090                            ; ===========================================================================
00009090                            
00009090                            loc_8B48:
00009090 7800                       		moveq	#0,d4
00009092 4E75                       		rts	
00009094                            ; End of function Obj44_SolidWall2
00009094                            
00009094                            ; ===========================================================================
00009094                            ; ---------------------------------------------------------------------------
00009094                            ; Object 1E - Ball Hog enemy (SBZ)
00009094                            ; ---------------------------------------------------------------------------
00009094                            
00009094                            Obj1E:					; XREF: Obj_Index
00009094 7000                       		moveq	#0,d0
00009096 1028 0024                  		move.b	$24(a0),d0
0000909A 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000909E 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000090A2                            ; ===========================================================================
000090A2 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000090A4 0000                       		dc.w Obj1E_Action-Obj1E_Index
000090A6                            ; ===========================================================================
000090A6                            
000090A6                            Obj1E_Main:				; XREF: Obj1E_Index
000090A6 117C 0013 0016             		move.b	#$13,$16(a0)
000090AC 117C 0008 0017             		move.b	#8,$17(a0)
000090B2 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000090BA 317C 2302 0002             		move.w	#$2302,2(a0)
000090C0 117C 0004 0001             		move.b	#4,1(a0)
000090C6 117C 0004 0018             		move.b	#4,$18(a0)
000090CC 117C 0005 0020             		move.b	#5,$20(a0)
000090D2 117C 000C 0019             		move.b	#$C,$19(a0)
000090D8 6100 0000                  		bsr.w	ObjectFall
000090DC 4EB9 0000 0000             		jsr	ObjHitFloor
000090E2 4A41                       		tst.w	d1
000090E4 6A00                       		bpl.s	locret_8BAC
000090E6 D368 000C                  		add.w	d1,$C(a0)
000090EA 317C 0000 0012             		move.w	#0,$12(a0)
000090F0 5428 0024                  		addq.b	#2,$24(a0)
000090F4                            
000090F4                            locret_8BAC:
000090F4 4E75                       		rts	
000090F6                            ; ===========================================================================
000090F6                            
000090F6                            Obj1E_Action:				; XREF: Obj1E_Index
000090F6 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
000090FC 6100 0000                  		bsr.w	AnimateSprite
00009100 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009106 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009108 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000910C 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000910E 6000                       		bra.s	Obj1E_MarkAsGone
00009110                            ; ===========================================================================
00009110                            
00009110                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009110 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009114                            
00009114                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009114 6000 0000                  		bra.w	MarkObjGone
00009118                            ; ===========================================================================
00009118                            
00009118                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009118 117C 0001 0032             		move.b	#1,$32(a0)
0000911E 6100 0000                  		bsr.w	SingleObjLoad
00009122 6600                       		bne.s	loc_8C1A
00009124 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009128 3368 0008 0008             		move.w	8(a0),8(a1)
0000912E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009134 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000913A 337C 0000 0012             		move.w	#0,$12(a1)
00009140 70FC                       		moveq	#-4,d0
00009142 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009148 6700                       		beq.s	loc_8C0A	; if not, branch
0000914A 4440                       		neg.w	d0
0000914C 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009150                            
00009150                            loc_8C0A:
00009150 D169 0008                  		add.w	d0,8(a1)
00009154 0669 000C 000C             		addi.w	#$C,$C(a1)
0000915A 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009160                            
00009160                            loc_8C1A:
00009160 60B2                       		bra.s	Obj1E_MarkAsGone
00009162                            ; ===========================================================================
00009162                            ; ---------------------------------------------------------------------------
00009162                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009162                            ; ---------------------------------------------------------------------------
00009162                            
00009162                            Obj20:					; XREF: Obj_Index
00009162 7000                       		moveq	#0,d0
00009164 1028 0024                  		move.b	$24(a0),d0
00009168 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000916C 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009170                            ; ===========================================================================
00009170 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009172 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009174                            ; ===========================================================================
00009174                            
00009174                            Obj20_Main:				; XREF: Obj20_Index
00009174 5428 0024                  		addq.b	#2,$24(a0)
00009178 117C 0007 0016             		move.b	#7,$16(a0)
0000917E 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009186 317C 2302 0002             		move.w	#$2302,2(a0)
0000918C 117C 0004 0001             		move.b	#4,1(a0)
00009192 117C 0003 0018             		move.b	#3,$18(a0)
00009198 117C 0087 0020             		move.b	#$87,$20(a0)
0000919E 117C 0008 0019             		move.b	#8,$19(a0)
000091A4 7000                       		moveq	#0,d0
000091A6 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000091AA C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000091AE 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000091B2 117C 0004 001A             		move.b	#4,$1A(a0)
000091B8                            
000091B8                            Obj20_Bounce:				; XREF: Obj20_Index
000091B8 4EB9 0000 0000             		jsr	ObjectFall
000091BE 4A68 0012                  		tst.w	$12(a0)
000091C2 6B00                       		bmi.s	Obj20_ChkExplode
000091C4 4EB9 0000 0000             		jsr	ObjHitFloor
000091CA 4A41                       		tst.w	d1
000091CC 6A00                       		bpl.s	Obj20_ChkExplode
000091CE D368 000C                  		add.w	d1,$C(a0)
000091D2 317C FD00 0012             		move.w	#-$300,$12(a0)
000091D8 4A03                       		tst.b	d3
000091DA 6700                       		beq.s	Obj20_ChkExplode
000091DC 6B00                       		bmi.s	loc_8CA4
000091DE 4A68 0010                  		tst.w	$10(a0)
000091E2 6A00                       		bpl.s	Obj20_ChkExplode
000091E4 4468 0010                  		neg.w	$10(a0)
000091E8 6000                       		bra.s	Obj20_ChkExplode
000091EA                            ; ===========================================================================
000091EA                            
000091EA                            loc_8CA4:				; XREF: Obj20_Bounce
000091EA 4A68 0010                  		tst.w	$10(a0)
000091EE 6B00                       		bmi.s	Obj20_ChkExplode
000091F0 4468 0010                  		neg.w	$10(a0)
000091F4                            
000091F4                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000091F4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000091F8 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000091FA 10BC 0024                  		move.b	#$24,0(a0)
000091FE 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009202 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009208 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000920C                            ; ===========================================================================
0000920C                            
0000920C                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000920C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009210 6A00                       		bpl.s	Obj20_Display
00009212 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009218 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000921E                            
0000921E                            Obj20_Display:
0000921E 6100 0000                  		bsr.w	DisplaySprite
00009222 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009226 0640 00E0                  		addi.w	#$E0,d0
0000922A B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000922E 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009232 4E75                       		rts	
00009234                            ; ===========================================================================
00009234                            ; ---------------------------------------------------------------------------
00009234                            ; Object 24 - explosion	from a destroyed monitor
00009234                            ; ---------------------------------------------------------------------------
00009234                            
00009234                            Obj24:					; XREF: Obj_Index
00009234 7000                       		moveq	#0,d0
00009236 1028 0024                  		move.b	$24(a0),d0
0000923A 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000923E 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009242                            ; ===========================================================================
00009242 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009244 0000                       		dc.w Obj24_Animate-Obj24_Index
00009246                            ; ===========================================================================
00009246                            
00009246                            Obj24_Main:				; XREF: Obj24_Index
00009246 5428 0024                  		addq.b	#2,$24(a0)
0000924A 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009252 317C 041C 0002             		move.w	#$41C,2(a0)
00009258 117C 0004 0001             		move.b	#4,1(a0)
0000925E 117C 0001 0018             		move.b	#1,$18(a0)
00009264 117C 0000 0020             		move.b	#0,$20(a0)
0000926A 117C 000C 0019             		move.b	#$C,$19(a0)
00009270 117C 0009 001E             		move.b	#9,$1E(a0)
00009276 117C 0000 001A             		move.b	#0,$1A(a0)
0000927C 303C 00A5                  		move.w	#$A5,d0
00009280 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play explosion sound
00009286                            
00009286                            Obj24_Animate:				; XREF: Obj24_Index
00009286 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000928A 6A00                       		bpl.s	Obj24_Display
0000928C 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009292 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009296 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000929C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000092A0                            
000092A0                            Obj24_Display:
000092A0 6000 0000                  		bra.w	DisplaySprite
000092A4                            ; ===========================================================================
000092A4                            ; ---------------------------------------------------------------------------
000092A4                            ; Object 27 - explosion	from a destroyed enemy
000092A4                            ; ---------------------------------------------------------------------------
000092A4                            
000092A4                            Obj27:					; XREF: Obj_Index
000092A4 7000                       		moveq	#0,d0
000092A6 1028 0024                  		move.b	$24(a0),d0
000092AA 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000092AE 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000092B2                            ; ===========================================================================
000092B2 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000092B4 0000                       		dc.w Obj27_Main-Obj27_Index
000092B6 0000                       		dc.w Obj27_Animate-Obj27_Index
000092B8                            ; ===========================================================================
000092B8                            
000092B8                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000092B8 5428 0024                  		addq.b	#2,$24(a0)
000092BC 6100 0000                  		bsr.w	SingleObjLoad
000092C0 6600                       		bne.s	Obj27_Main
000092C2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000092C6 3368 0008 0008             		move.w	8(a0),8(a1)
000092CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000092D2 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000092D8                            
000092D8                            Obj27_Main:				; XREF: Obj27_Index
000092D8 5428 0024                  		addq.b	#2,$24(a0)
000092DC 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000092E4 317C 05A0 0002             		move.w	#$5A0,2(a0)
000092EA 117C 0004 0001             		move.b	#4,1(a0)
000092F0 117C 0001 0018             		move.b	#1,$18(a0)
000092F6 117C 0000 0020             		move.b	#0,$20(a0)
000092FC 117C 000C 0019             		move.b	#$C,$19(a0)
00009302                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009302 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009308 117C 0000 001A             		move.b	#0,$1A(a0)
0000930E 303C 00C1                  		move.w	#$C1,d0
00009312 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009318                            
00009318 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000931E 1028 0028                  		move.b	$28(a0),d0
00009322 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009328 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
0000932E                            
0000932E                            Obj27_Animate:				; XREF: Obj27_Index
0000932E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009332 6A00                       		bpl.s	Obj27_Display
00009334                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009334 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
0000933A 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000933E 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009344 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009348                            
00009348                            Obj27_Display:
00009348 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
0000934E 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009354 6000 0000                  		bra.w	DisplaySprite
00009358                            ; ===========================================================================
00009358                            ; ---------------------------------------------------------------------------
00009358                            Obj27_ExplosionXYSpd:
00009358                            		; dc.w	-$350, -$300	; Left
00009358                            		; dc.w	-$200, -$450	; Near middle (left)
00009358                            		; dc.w	0, -$500	; Middle
00009358                            		; dc.w	$200, -$450	; Near middle (right)
00009358                            		; dc.w	$350, -$300	; Right
00009358                            
00009358 FEB0 FC00                  		dc.w	-$150, -$400	; Left
0000935C FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
00009360 0000 FA00                  		dc.w	0, -$600	; Middle
00009364 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009368 0150 FC00                  		dc.w	$150, -$400	; Right
0000936C                            
0000936C 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009386                            ; ---------------------------------------------------------------------------
00009386                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009386                            ; ---------------------------------------------------------------------------
00009386                            
00009386                            Obj3F:					; XREF: Obj_Index
00009386 7000                       		moveq	#0,d0
00009388 1028 0024                  		move.b	$24(a0),d0
0000938C 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009390 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009394                            ; ===========================================================================
00009394 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009396 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009398                            ; ===========================================================================
00009398                            
00009398                            Obj3F_Main:				; XREF: Obj3F_Index
00009398 5428 0024                  		addq.b	#2,$24(a0)
0000939C 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000093A4 317C 05A0 0002             		move.w	#$5A0,2(a0)
000093AA 117C 0004 0001             		move.b	#4,1(a0)
000093B0 117C 0001 0018             		move.b	#1,$18(a0)
000093B6 117C 0000 0020             		move.b	#0,$20(a0)
000093BC 117C 000C 0019             		move.b	#$C,$19(a0)
000093C2 117C 0007 001E             		move.b	#7,$1E(a0)
000093C8 117C 0000 001A             		move.b	#0,$1A(a0)
000093CE 303C 00C4                  		move.w	#$C4,d0
000093D2 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000093D8                            ; ===========================================================================
000093D8                            Ani_obj1E:
000093D8                            	include "_anim\obj1E.asm"
000093D8                            ; ---------------------------------------------------------------------------
000093D8                            ; Animation script - doors (SBZ)
000093D8                            ; ---------------------------------------------------------------------------
000093D8 0000                       		dc.w byte_8E4A-Ani_obj1E
000093DA 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000093F2 00                         		even
000093F2 00                         		even
000093F2                            
000093F2                            ; ---------------------------------------------------------------------------
000093F2                            ; Sprite mappings - Ball Hog enemy (SBZ)
000093F2                            ; ---------------------------------------------------------------------------
000093F2                            Map_obj1E:
000093F2                            	include "_maps\obj1E.asm"
000093F2                            ; ---------------------------------------------------------------------------
000093F2                            ; Sprite mappings - Ball Hog enemy (SBZ)
000093F2                            ; ---------------------------------------------------------------------------
000093F2 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000093F6 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000093FA 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000093FE 02                         byte_8E6E:	dc.b 2
000093FF EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009404 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009409 02                         byte_8E79:	dc.b 2
0000940A EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000940F FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009414 02                         byte_8E84:	dc.b 2
00009415 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000941A 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000941F 02                         byte_8E8F:	dc.b 2
00009420 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009425 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000942A 01                         byte_8E9A:	dc.b 1
0000942B F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00009430 01                         byte_8EA0:	dc.b 1
00009431 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009436                            		even
00009436                            		even
00009436                            
00009436                            ; ---------------------------------------------------------------------------
00009436                            ; Sprite mappings - explosion
00009436                            ; ---------------------------------------------------------------------------
00009436                            Map_obj24:
00009436                            	include "_maps\obj24.asm"
00009436                            ; ---------------------------------------------------------------------------
00009436                            ; Sprite mappings - explosion
00009436                            ; ---------------------------------------------------------------------------
00009436 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000943A 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000943E 01                         byte_8EAE:	dc.b 1
0000943F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009444 01                         byte_8EB4:	dc.b 1
00009445 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000944A 01                         byte_8EBA:	dc.b 1
0000944B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009450 01                         byte_8EC0:	dc.b 1
00009451 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009456                            		even
00009456                            		even
00009456                            
00009456                            ; ---------------------------------------------------------------------------
00009456                            ; Sprite mappings - explosion
00009456                            ; ---------------------------------------------------------------------------
00009456 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000945A 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000945E 0000                       		dc.w byte_8EF7-Map_obj27
00009460 01                         byte_8ED0:	dc.b 1
00009461 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009466 01                         byte_8ED6:	dc.b 1
00009467 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000946C 01                         byte_8EDC:	dc.b 1
0000946D F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009472 04                         byte_8EE2:	dc.b 4
00009473 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009478 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000947D 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009482 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009487 04                         byte_8EF7:	dc.b 4
00009488 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000948D EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009492 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009497 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000949C                            		even
0000949C                            ; ---------------------------------------------------------------------------
0000949C                            ; Sprite mappings - explosion from when	a boss is destroyed
0000949C                            ; ---------------------------------------------------------------------------
0000949C FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000949E 0000                       		dc.w byte_8F16-Map_obj3F
000094A0 0000                       		dc.w byte_8F1C-Map_obj3F
000094A2 FFD6                       		dc.w byte_8EE2-Map_obj3F
000094A4 FFEB                       		dc.w byte_8EF7-Map_obj3F
000094A6 01                         byte_8F16:	dc.b 1
000094A7 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000094AC 01                         byte_8F1C:	dc.b 1
000094AD F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000094B2                            		even
000094B2                            ; ===========================================================================
000094B2                            ; ---------------------------------------------------------------------------
000094B2                            ; Object 28 - animals
000094B2                            ; ---------------------------------------------------------------------------
000094B2                            
000094B2                            Obj28:					; XREF: Obj_Index
000094B2 7000                       		moveq	#0,d0
000094B4 1028 0024                  		move.b	$24(a0),d0
000094B8 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000094BC 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000094C0                            ; ===========================================================================
000094C0 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000094C4 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000094C8 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000094CC 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000094D0 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000094D4 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000094D8 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000094DC 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000094E0 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000094E4 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000094E8 0000                       		dc.w loc_92D6-Obj28_Index
000094EA                            
000094EA 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000094F6                            
000094F6 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000094FA 0000 0000                  		dc.l Map_obj28
000094FE FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009502 0000 0000                  		dc.l Map_obj28a		; mappings address
00009506 FE80 FD00                  		dc.w $FE80, $FD00
0000950A 0000 0000                  		dc.l Map_obj28
0000950E FEC0 FE80                  		dc.w $FEC0, $FE80
00009512 0000 0000                  		dc.l Map_obj28a
00009516 FE40 FD00                  		dc.w $FE40, $FD00
0000951A 0000 0000                  		dc.l Map_obj28b
0000951E FD00 FC00                  		dc.w $FD00, $FC00
00009522 0000 0000                  		dc.l Map_obj28a
00009526 FD80 FC80                  		dc.w $FD80, $FC80
0000952A 0000 0000                  		dc.l Map_obj28b
0000952E                            
0000952E FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000953E FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000954E FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000955A                            
0000955A 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000956E 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009582 0000 0000                  		dc.l Map_obj28b
00009586                            
00009586 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009598 0565 05B3                  		dc.w $565, $5B3
0000959C                            ; ===========================================================================
0000959C                            
0000959C                            Obj28_Ending:				; XREF: Obj28_Index
0000959C 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000095A0 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000095A4 7000                       		moveq	#0,d0
000095A6 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000095AA D040                       		add.w	d0,d0		; multiply d0 by 2
000095AC 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000095B0 0440 0014                  		subi.w	#$14,d0
000095B4 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000095BA D040                       		add.w	d0,d0
000095BC 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000095C2 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000095C6 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000095CC 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000095D2 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000095D8 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000095DE 117C 000C 0016             		move.b	#$C,$16(a0)
000095E4 117C 0004 0001             		move.b	#4,1(a0)
000095EA 08E8 0000 0001             		bset	#0,1(a0)
000095F0 117C 0006 0018             		move.b	#6,$18(a0)
000095F6 117C 0008 0019             		move.b	#8,$19(a0)
000095FC 117C 0007 001E             		move.b	#7,$1E(a0)
00009602 6000 0000                  		bra.w	DisplaySprite
00009606                            ; ===========================================================================
00009606                            
00009606                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009606 5428 0024                  		addq.b	#2,$24(a0)
0000960A 6100 9632                  		bsr.w	RandomNumber
0000960E 0240 0001                  		andi.w	#1,d0
00009612 7200                       		moveq	#0,d1
00009614 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009618 D241                       		add.w	d1,d1
0000961A D240                       		add.w	d0,d1
0000961C 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009620 1031 1000                  		move.b	(a1,d1.w),d0
00009624 1140 0030                  		move.b	d0,$30(a0)
00009628 E748                       		lsl.w	#3,d0
0000962A 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000962E D2C0                       		adda.w	d0,a1
00009630 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009634 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009638 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000963C 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009642 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009648 6700                       		beq.s	loc_90C0	; if yes, branch
0000964A 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009650                            
00009650                            loc_90C0:
00009650 117C 000C 0016             		move.b	#$C,$16(a0)
00009656 117C 0004 0001             		move.b	#4,1(a0)
0000965C 08E8 0000 0001             		bset	#0,1(a0)
00009662 117C 0006 0018             		move.b	#6,$18(a0)
00009668 117C 0008 0019             		move.b	#8,$19(a0)
0000966E 117C 0007 001E             		move.b	#7,$1E(a0)
00009674 117C 0002 001A             		move.b	#2,$1A(a0)
0000967A 317C FC00 0012             		move.w	#-$400,$12(a0)
00009680 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009684 6600                       		bne.s	loc_911C
00009686 6100 0000                  		bsr.w	SingleObjLoad
0000968A 6600                       		bne.s	Obj28_Display
0000968C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009690 3368 0008 0008             		move.w	8(a0),8(a1)
00009696 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000969C 3028 003E                  		move.w	$3E(a0),d0
000096A0 E248                       		lsr.w	#1,d0
000096A2 1340 001A                  		move.b	d0,$1A(a1)
000096A6                            
000096A6                            Obj28_Display:
000096A6 6000 0000                  		bra.w	DisplaySprite
000096AA                            ; ===========================================================================
000096AA                            
000096AA                            loc_911C:
000096AA 117C 0012 0024             		move.b	#$12,$24(a0)
000096B0 4268 0010                  		clr.w	$10(a0)
000096B4 6000 0000                  		bra.w	DisplaySprite
000096B8                            ; ===========================================================================
000096B8                            
000096B8                            loc_912A:				; XREF: Obj28_Index
000096B8 4A28 0001                  		tst.b	1(a0)
000096BC 6A00 0000                  		bpl.w	DeleteObject
000096C0 6100 0000                  		bsr.w	ObjectFall
000096C4 4A68 0012                  		tst.w	$12(a0)
000096C8 6B00                       		bmi.s	loc_9180
000096CA 4EB9 0000 0000             		jsr	ObjHitFloor
000096D0 4A41                       		tst.w	d1
000096D2 6A00                       		bpl.s	loc_9180
000096D4 D368 000C                  		add.w	d1,$C(a0)
000096D8 3168 0032 0010             		move.w	$32(a0),$10(a0)
000096DE 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096E4 117C 0001 001A             		move.b	#1,$1A(a0)
000096EA 1028 0030                  		move.b	$30(a0),d0
000096EE D000                       		add.b	d0,d0
000096F0 5800                       		addq.b	#4,d0
000096F2 1140 0024                  		move.b	d0,$24(a0)
000096F6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000096FA 6700                       		beq.s	loc_9180
000096FC 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009702 6700                       		beq.s	loc_9180
00009704 4468 0010                  		neg.w	$10(a0)
00009708 0868 0000 0001             		bchg	#0,1(a0)
0000970E                            
0000970E                            loc_9180:
0000970E 6000 0000                  		bra.w	DisplaySprite
00009712                            ; ===========================================================================
00009712                            
00009712                            loc_9184:				; XREF: Obj28_Index
00009712 6100 0000                  		bsr.w	ObjectFall
00009716 117C 0001 001A             		move.b	#1,$1A(a0)
0000971C 4A68 0012                  		tst.w	$12(a0)
00009720 6B00                       		bmi.s	loc_91AE
00009722 117C 0000 001A             		move.b	#0,$1A(a0)
00009728 4EB9 0000 0000             		jsr	ObjHitFloor
0000972E 4A41                       		tst.w	d1
00009730 6A00                       		bpl.s	loc_91AE
00009732 D368 000C                  		add.w	d1,$C(a0)
00009736 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000973C                            
0000973C                            loc_91AE:
0000973C 4A28 0028                  		tst.b	$28(a0)
00009740 6600                       		bne.s	loc_9224
00009742 4A28 0001                  		tst.b	1(a0)
00009746 6A00 0000                  		bpl.w	DeleteObject
0000974A 6000 0000                  		bra.w	DisplaySprite
0000974E                            ; ===========================================================================
0000974E                            
0000974E                            loc_91C0:				; XREF: Obj28_Index
0000974E 6100 0000                  		bsr.w	SpeedToPos
00009752 0668 0018 0012             		addi.w	#$18,$12(a0)
00009758 4A68 0012                  		tst.w	$12(a0)
0000975C 6B00                       		bmi.s	loc_91FC
0000975E 4EB9 0000 0000             		jsr	ObjHitFloor
00009764 4A41                       		tst.w	d1
00009766 6A00                       		bpl.s	loc_91FC
00009768 D368 000C                  		add.w	d1,$C(a0)
0000976C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009772 4A28 0028                  		tst.b	$28(a0)
00009776 6700                       		beq.s	loc_91FC
00009778 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000977E 6700                       		beq.s	loc_91FC
00009780 4468 0010                  		neg.w	$10(a0)
00009784 0868 0000 0001             		bchg	#0,1(a0)
0000978A                            
0000978A                            loc_91FC:
0000978A 5328 001E                  		subq.b	#1,$1E(a0)
0000978E 6A00                       		bpl.s	loc_9212
00009790 117C 0001 001E             		move.b	#1,$1E(a0)
00009796 5228 001A                  		addq.b	#1,$1A(a0)
0000979A 0228 0001 001A             		andi.b	#1,$1A(a0)
000097A0                            
000097A0                            loc_9212:
000097A0 4A28 0028                  		tst.b	$28(a0)
000097A4 6600                       		bne.s	loc_9224
000097A6 4A28 0001                  		tst.b	1(a0)
000097AA 6A00 0000                  		bpl.w	DeleteObject
000097AE 6000 0000                  		bra.w	DisplaySprite
000097B2                            ; ===========================================================================
000097B2                            
000097B2                            loc_9224:				; XREF: Obj28_Index
000097B2 3028 0008                  		move.w	8(a0),d0
000097B6 9078 D008                  		sub.w	($FFFFD008).w,d0
000097BA 6500                       		bcs.s	loc_923C
000097BC 0440 0180                  		subi.w	#$180,d0
000097C0 6A00                       		bpl.s	loc_923C
000097C2 4A28 0001                  		tst.b	1(a0)
000097C6 6A00 0000                  		bpl.w	DeleteObject
000097CA                            
000097CA                            loc_923C:
000097CA 6000 0000                  		bra.w	DisplaySprite
000097CE                            ; ===========================================================================
000097CE                            
000097CE                            loc_9240:				; XREF: Obj28_Index
000097CE 4A28 0001                  		tst.b	1(a0)
000097D2 6A00 0000                  		bpl.w	DeleteObject
000097D6 5368 0036                  		subq.w	#1,$36(a0)
000097DA 6600 0000                  		bne.w	loc_925C
000097DE 117C 0002 0024             		move.b	#2,$24(a0)
000097E4 117C 0003 0018             		move.b	#3,$18(a0)
000097EA                            
000097EA                            loc_925C:
000097EA 6000 0000                  		bra.w	DisplaySprite
000097EE                            ; ===========================================================================
000097EE                            
000097EE                            loc_9260:				; XREF: Obj28_Index
000097EE 6100 0000                  		bsr.w	sub_9404
000097F2 6400                       		bcc.s	loc_927C
000097F4 3168 0032 0010             		move.w	$32(a0),$10(a0)
000097FA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009800 117C 000E 0024             		move.b	#$E,$24(a0)
00009806 6000 FF46                  		bra.w	loc_91C0
0000980A                            ; ===========================================================================
0000980A                            
0000980A                            loc_927C:
0000980A 6000 FFA6                  		bra.w	loc_9224
0000980E                            ; ===========================================================================
0000980E                            
0000980E                            loc_9280:				; XREF: Obj28_Index
0000980E 6100 0000                  		bsr.w	sub_9404
00009812 6A00                       		bpl.s	loc_92B6
00009814 4268 0010                  		clr.w	$10(a0)
00009818 4268 0032                  		clr.w	$32(a0)
0000981C 6100 0000                  		bsr.w	SpeedToPos
00009820 0668 0018 0012             		addi.w	#$18,$12(a0)
00009826 6100 0000                  		bsr.w	loc_93C4
0000982A 6100 0000                  		bsr.w	loc_93EC
0000982E 5328 001E                  		subq.b	#1,$1E(a0)
00009832 6A00                       		bpl.s	loc_92B6
00009834 117C 0001 001E             		move.b	#1,$1E(a0)
0000983A 5228 001A                  		addq.b	#1,$1A(a0)
0000983E 0228 0001 001A             		andi.b	#1,$1A(a0)
00009844                            
00009844                            loc_92B6:
00009844 6000 FF6C                  		bra.w	loc_9224
00009848                            ; ===========================================================================
00009848                            
00009848                            loc_92BA:				; XREF: Obj28_Index
00009848 6100 0000                  		bsr.w	sub_9404
0000984C 6A00                       		bpl.s	loc_9310
0000984E 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009854 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000985A 117C 0004 0024             		move.b	#4,$24(a0)
00009860 6000 FEB0                  		bra.w	loc_9184
00009864                            ; ===========================================================================
00009864                            
00009864                            loc_92D6:				; XREF: Obj28_Index
00009864 6100 0000                  		bsr.w	ObjectFall
00009868 117C 0001 001A             		move.b	#1,$1A(a0)
0000986E 4A68 0012                  		tst.w	$12(a0)
00009872 6B00                       		bmi.s	loc_9310
00009874 117C 0000 001A             		move.b	#0,$1A(a0)
0000987A 4EB9 0000 0000             		jsr	ObjHitFloor
00009880 4A41                       		tst.w	d1
00009882 6A00                       		bpl.s	loc_9310
00009884 4628 0029                  		not.b	$29(a0)
00009888 6600                       		bne.s	loc_9306
0000988A 4468 0010                  		neg.w	$10(a0)
0000988E 0868 0000 0001             		bchg	#0,1(a0)
00009894                            
00009894                            loc_9306:
00009894 D368 000C                  		add.w	d1,$C(a0)
00009898 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000989E                            
0000989E                            loc_9310:
0000989E 6000 FF12                  		bra.w	loc_9224
000098A2                            ; ===========================================================================
000098A2                            
000098A2                            loc_9314:				; XREF: Obj28_Index
000098A2 6100 0000                  		bsr.w	sub_9404
000098A6 6A00                       		bpl.s	loc_932E
000098A8 4268 0010                  		clr.w	$10(a0)
000098AC 4268 0032                  		clr.w	$32(a0)
000098B0 6100 0000                  		bsr.w	ObjectFall
000098B4 6100 0000                  		bsr.w	loc_93C4
000098B8 6100 0000                  		bsr.w	loc_93EC
000098BC                            
000098BC                            loc_932E:
000098BC 6000 FEF4                  		bra.w	loc_9224
000098C0                            ; ===========================================================================
000098C0                            
000098C0                            loc_9332:				; XREF: Obj28_Index
000098C0 6100 0000                  		bsr.w	sub_9404
000098C4 6A00                       		bpl.s	loc_936C
000098C6 6100 0000                  		bsr.w	ObjectFall
000098CA 117C 0001 001A             		move.b	#1,$1A(a0)
000098D0 4A68 0012                  		tst.w	$12(a0)
000098D4 6B00                       		bmi.s	loc_936C
000098D6 117C 0000 001A             		move.b	#0,$1A(a0)
000098DC 4EB9 0000 0000             		jsr	ObjHitFloor
000098E2 4A41                       		tst.w	d1
000098E4 6A00                       		bpl.s	loc_936C
000098E6 4468 0010                  		neg.w	$10(a0)
000098EA 0868 0000 0001             		bchg	#0,1(a0)
000098F0 D368 000C                  		add.w	d1,$C(a0)
000098F4 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098FA                            
000098FA                            loc_936C:
000098FA 6000 FEB6                  		bra.w	loc_9224
000098FE                            ; ===========================================================================
000098FE                            
000098FE                            loc_9370:				; XREF: Obj28_Index
000098FE 6100 0000                  		bsr.w	sub_9404
00009902 6A00                       		bpl.s	loc_93C0
00009904 6100 0000                  		bsr.w	SpeedToPos
00009908 0668 0018 0012             		addi.w	#$18,$12(a0)
0000990E 4A68 0012                  		tst.w	$12(a0)
00009912 6B00                       		bmi.s	loc_93AA
00009914 4EB9 0000 0000             		jsr	ObjHitFloor
0000991A 4A41                       		tst.w	d1
0000991C 6A00                       		bpl.s	loc_93AA
0000991E 4628 0029                  		not.b	$29(a0)
00009922 6600                       		bne.s	loc_93A0
00009924 4468 0010                  		neg.w	$10(a0)
00009928 0868 0000 0001             		bchg	#0,1(a0)
0000992E                            
0000992E                            loc_93A0:
0000992E D368 000C                  		add.w	d1,$C(a0)
00009932 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009938                            
00009938                            loc_93AA:
00009938 5328 001E                  		subq.b	#1,$1E(a0)
0000993C 6A00                       		bpl.s	loc_93C0
0000993E 117C 0001 001E             		move.b	#1,$1E(a0)
00009944 5228 001A                  		addq.b	#1,$1A(a0)
00009948 0228 0001 001A             		andi.b	#1,$1A(a0)
0000994E                            
0000994E                            loc_93C0:
0000994E 6000 FE62                  		bra.w	loc_9224
00009952                            ; ===========================================================================
00009952                            
00009952                            loc_93C4:
00009952 117C 0001 001A             		move.b	#1,$1A(a0)
00009958 4A68 0012                  		tst.w	$12(a0)
0000995C 6B00                       		bmi.s	locret_93EA
0000995E 117C 0000 001A             		move.b	#0,$1A(a0)
00009964 4EB9 0000 0000             		jsr	ObjHitFloor
0000996A 4A41                       		tst.w	d1
0000996C 6A00                       		bpl.s	locret_93EA
0000996E D368 000C                  		add.w	d1,$C(a0)
00009972 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009978                            
00009978                            locret_93EA:
00009978 4E75                       		rts	
0000997A                            ; ===========================================================================
0000997A                            
0000997A                            loc_93EC:
0000997A 08E8 0000 0001             		bset	#0,1(a0)
00009980 3028 0008                  		move.w	8(a0),d0
00009984 9078 D008                  		sub.w	($FFFFD008).w,d0
00009988 6400                       		bcc.s	locret_9402
0000998A 08A8 0000 0001             		bclr	#0,1(a0)
00009990                            
00009990                            locret_9402:
00009990 4E75                       		rts	
00009992                            
00009992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009992                            
00009992                            
00009992                            sub_9404:
00009992 3038 D008                  		move.w	($FFFFD008).w,d0
00009996 9068 0008                  		sub.w	8(a0),d0
0000999A 0440 00B8                  		subi.w	#$B8,d0
0000999E 4E75                       		rts	
000099A0                            ; End of function sub_9404
000099A0                            
000099A0                            ; ===========================================================================
000099A0                            ; ---------------------------------------------------------------------------
000099A0                            ; Object 29 - points that appear when you destroy something
000099A0                            ; ---------------------------------------------------------------------------
000099A0                            
000099A0                            Obj29:					; XREF: Obj_Index
000099A0 7000                       		moveq	#0,d0
000099A2 1028 0024                  		move.b	$24(a0),d0
000099A6 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
000099AA 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
000099AE 6000 0000                  		bra.w	DisplaySprite
000099B2                            ; ===========================================================================
000099B2 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
000099B4 0000                       		dc.w Obj29_Slower-Obj29_Index
000099B6                            ; ===========================================================================
000099B6                            
000099B6                            Obj29_Main:				; XREF: Obj29_Index
000099B6 5428 0024                  		addq.b	#2,$24(a0)
000099BA 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
000099C2 317C 2797 0002             		move.w	#$2797,2(a0)
000099C8 117C 0004 0001             		move.b	#4,1(a0)
000099CE 117C 0001 0018             		move.b	#1,$18(a0)
000099D4 117C 0008 0019             		move.b	#8,$19(a0)
000099DA 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
000099E0                            
000099E0                            Obj29_Slower:				; XREF: Obj29_Index
000099E0 4A68 0012                  		tst.w	$12(a0)		; is object moving?
000099E4 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
000099E8 6100 0000                  		bsr.w	SpeedToPos
000099EC 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
000099F2 4E75                       		rts	
000099F4                            ; ===========================================================================
000099F4                            ; ---------------------------------------------------------------------------
000099F4                            ; Sprite mappings - animals
000099F4                            ; ---------------------------------------------------------------------------
000099F4                            Map_obj28:
000099F4                            	include "_maps\obj28.asm"
000099F4                            ; ---------------------------------------------------------------------------
000099F4                            ; Sprite mappings - animals
000099F4                            ; ---------------------------------------------------------------------------
000099F4 0000                       		dc.w byte_9472-Map_obj28
000099F6 0000                       		dc.w byte_9478-Map_obj28
000099F8 0000                       		dc.w byte_946C-Map_obj28
000099FA 01                         byte_946C:	dc.b 1
000099FB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009A00 01                         byte_9472:	dc.b 1
00009A01 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009A06 01                         byte_9478:	dc.b 1
00009A07 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009A0C                            		even
00009A0C                            		even
00009A0C                            
00009A0C                            Map_obj28a:
00009A0C                            	include "_maps\obj28a.asm"
00009A0C                            ; ---------------------------------------------------------------------------
00009A0C                            ; Sprite mappings - animals
00009A0C                            ; ---------------------------------------------------------------------------
00009A0C 0000                       		dc.w byte_948A-Map_obj28a
00009A0E 0000                       		dc.w byte_9490-Map_obj28a
00009A10 0000                       		dc.w byte_9484-Map_obj28a
00009A12 01                         byte_9484:	dc.b 1
00009A13 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009A18 01                         byte_948A:	dc.b 1
00009A19 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009A1E 01                         byte_9490:	dc.b 1
00009A1F FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009A24                            		even
00009A24                            		even
00009A24                            
00009A24                            Map_obj28b:
00009A24                            	include "_maps\obj28b.asm"
00009A24                            ; ---------------------------------------------------------------------------
00009A24                            ; Sprite mappings - animals
00009A24                            ; ---------------------------------------------------------------------------
00009A24 0000                       		dc.w byte_94A2-Map_obj28b
00009A26 0000                       		dc.w byte_94A8-Map_obj28b
00009A28 0000                       		dc.w byte_949C-Map_obj28b
00009A2A 01                         byte_949C:	dc.b 1
00009A2B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009A30 01                         byte_94A2:	dc.b 1
00009A31 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009A36 01                         byte_94A8:	dc.b 1
00009A37 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009A3C                            		even
00009A3C                            		even
00009A3C                            
00009A3C                            ; ---------------------------------------------------------------------------
00009A3C                            ; Sprite mappings - points that	appear when you	destroy	something
00009A3C                            ; ---------------------------------------------------------------------------
00009A3C                            Map_obj29:
00009A3C                            	include "_maps\obj29.asm"
00009A3C                            ; ---------------------------------------------------------------------------
00009A3C                            ; Sprite mappings - points that	appear when you	destroy	something
00009A3C                            ; ---------------------------------------------------------------------------
00009A3C 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009A40 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009A44 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009A48 0000                       		dc.w byte_94E5-Map_obj29
00009A4A 01                         byte_94BC:	dc.b 1
00009A4B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009A50 01                         byte_94C2:	dc.b 1
00009A51 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009A56 01                         byte_94C8:	dc.b 1
00009A57 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009A5C 01                         byte_94CE:	dc.b 1
00009A5D FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009A62 01                         byte_94D4:	dc.b 1
00009A63 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009A68 02                         byte_94DA:	dc.b 2
00009A69 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009A6E FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009A73 02                         byte_94E5:	dc.b 2
00009A74 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009A79 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009A7E                            		even
00009A7E                            		even
00009A7E                            
00009A7E                            ; ===========================================================================
00009A7E                            ; ---------------------------------------------------------------------------
00009A7E                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009A7E                            ; ---------------------------------------------------------------------------
00009A7E                            
00009A7E                            Obj1F:					; XREF: Obj_Index
00009A7E 7000                       		moveq	#0,d0
00009A80 1028 0024                  		move.b	$24(a0),d0
00009A84 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009A88 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009A8C                            ; ===========================================================================
00009A8C 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009A8E 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009A90 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009A92 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009A94 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009A96                            ; ===========================================================================
00009A96                            
00009A96                            Obj1F_Main:				; XREF: Obj1F_Index
00009A96 117C 0010 0016             		move.b	#$10,$16(a0)
00009A9C 117C 0008 0017             		move.b	#8,$17(a0)
00009AA2 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009AAA 317C 0400 0002             		move.w	#$400,2(a0)
00009AB0 117C 0004 0001             		move.b	#4,1(a0)
00009AB6 117C 0003 0018             		move.b	#3,$18(a0)
00009ABC 117C 0006 0020             		move.b	#6,$20(a0)
00009AC2 117C 0015 0019             		move.b	#$15,$19(a0)
00009AC8 6100 0000                  		bsr.w	ObjectFall
00009ACC 4EB9 0000 0000             		jsr	ObjHitFloor
00009AD2 4A41                       		tst.w	d1
00009AD4 6A00                       		bpl.s	locret_955A
00009AD6 D368 000C                  		add.w	d1,$C(a0)
00009ADA 1143 0026                  		move.b	d3,$26(a0)
00009ADE 317C 0000 0012             		move.w	#0,$12(a0)
00009AE4 5428 0024                  		addq.b	#2,$24(a0)
00009AE8                            
00009AE8                            locret_955A:
00009AE8 4E75                       		rts	
00009AEA                            ; ===========================================================================
00009AEA                            
00009AEA                            Obj1F_Action:				; XREF: Obj1F_Index
00009AEA 7000                       		moveq	#0,d0
00009AEC 1028 0025                  		move.b	$25(a0),d0
00009AF0 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009AF4 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009AF8 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009AFE 6100 0000                  		bsr.w	AnimateSprite
00009B02 6000 0000                  		bra.w	MarkObjGone
00009B06                            ; ===========================================================================
00009B06 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009B08 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009B0A                            ; ===========================================================================
00009B0A                            
00009B0A                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009B0A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009B0E 6A00                       		bpl.s	locret_95B6
00009B10 4A28 0001                  		tst.b	1(a0)
00009B14 6A00                       		bpl.s	Obj1F_Move
00009B16 0868 0001 0032             		bchg	#1,$32(a0)
00009B1C 6600                       		bne.s	Obj1F_MakeFire
00009B1E                            
00009B1E                            Obj1F_Move:
00009B1E 5428 0025                  		addq.b	#2,$25(a0)
00009B22 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009B28 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009B2E 6100 0000                  		bsr.w	Obj1F_SetAni
00009B32 5600                       		addq.b	#3,d0
00009B34 1140 001C                  		move.b	d0,$1C(a0)
00009B38 0868 0000 0022             		bchg	#0,$22(a0)
00009B3E 6600                       		bne.s	locret_95B6
00009B40 4468 0010                  		neg.w	$10(a0)		; change direction
00009B44                            
00009B44                            locret_95B6:
00009B44 4E75                       		rts	
00009B46                            ; ===========================================================================
00009B46                            
00009B46                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009B46 317C 003B 0030             		move.w	#$3B,$30(a0)
00009B4C 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009B52 6100 0000                  		bsr.w	SingleObjLoad
00009B56 6600                       		bne.s	Obj1F_MakeFire2
00009B58 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009B5C 137C 0006 0024             		move.b	#6,$24(a1)
00009B62 3368 0008 0008             		move.w	8(a0),8(a1)
00009B68 0469 0010 0008             		subi.w	#$10,8(a1)
00009B6E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009B74 337C FF00 0010             		move.w	#-$100,$10(a1)
00009B7A                            
00009B7A                            Obj1F_MakeFire2:
00009B7A 6100 0000                  		bsr.w	SingleObjLoad
00009B7E 6600                       		bne.s	locret_9618
00009B80 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009B84 137C 0006 0024             		move.b	#6,$24(a1)
00009B8A 3368 0008 0008             		move.w	8(a0),8(a1)
00009B90 0669 0010 0008             		addi.w	#$10,8(a1)
00009B96 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009B9C 337C 0100 0010             		move.w	#$100,$10(a1)
00009BA2                            
00009BA2                            locret_9618:
00009BA2 4E75                       		rts	
00009BA4                            ; ===========================================================================
00009BA4                            
00009BA4                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009BA4 5368 0030                  		subq.w	#1,$30(a0)
00009BA8 6B00                       		bmi.s	loc_966E
00009BAA 6100 0000                  		bsr.w	SpeedToPos
00009BAE 0868 0000 0032             		bchg	#0,$32(a0)
00009BB4 6600                       		bne.s	loc_9654
00009BB6 3628 0008                  		move.w	8(a0),d3
00009BBA 0643 0010                  		addi.w	#$10,d3
00009BBE 0828 0000 0022             		btst	#0,$22(a0)
00009BC4 6700                       		beq.s	loc_9640
00009BC6 0443 0020                  		subi.w	#$20,d3
00009BCA                            
00009BCA                            loc_9640:
00009BCA 4EB9 0000 0000             		jsr	ObjHitFloor2
00009BD0 0C41 FFF8                  		cmpi.w	#-8,d1
00009BD4 6D00                       		blt.s	loc_966E
00009BD6 0C41 000C                  		cmpi.w	#$C,d1
00009BDA 6C00                       		bge.s	loc_966E
00009BDC 4E75                       		rts	
00009BDE                            ; ===========================================================================
00009BDE                            
00009BDE                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009BDE 4EB9 0000 0000             		jsr	ObjHitFloor
00009BE4 D368 000C                  		add.w	d1,$C(a0)
00009BE8 1143 0026                  		move.b	d3,$26(a0)
00009BEC 6100 0000                  		bsr.w	Obj1F_SetAni
00009BF0 5600                       		addq.b	#3,d0
00009BF2 1140 001C                  		move.b	d0,$1C(a0)
00009BF6 4E75                       		rts	
00009BF8                            ; ===========================================================================
00009BF8                            
00009BF8                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009BF8 5528 0025                  		subq.b	#2,$25(a0)
00009BFC 317C 003B 0030             		move.w	#59,$30(a0)
00009C02 317C 0000 0010             		move.w	#0,$10(a0)
00009C08 6100 0000                  		bsr.w	Obj1F_SetAni
00009C0C 1140 001C                  		move.b	d0,$1C(a0)
00009C10 4E75                       		rts	
00009C12                            ; ---------------------------------------------------------------------------
00009C12                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009C12                            ; ---------------------------------------------------------------------------
00009C12                            
00009C12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C12                            
00009C12                            
00009C12                            Obj1F_SetAni:				; XREF: loc_966E
00009C12 7000                       		moveq	#0,d0
00009C14 1628 0026                  		move.b	$26(a0),d3
00009C18 6B00                       		bmi.s	loc_96A4
00009C1A 0C03 0006                  		cmpi.b	#6,d3
00009C1E 6500                       		bcs.s	locret_96A2
00009C20 7001                       		moveq	#1,d0
00009C22 0828 0000 0022             		btst	#0,$22(a0)
00009C28 6600                       		bne.s	locret_96A2
00009C2A 7002                       		moveq	#2,d0
00009C2C                            
00009C2C                            locret_96A2:
00009C2C 4E75                       		rts	
00009C2E                            ; ===========================================================================
00009C2E                            
00009C2E                            loc_96A4:				; XREF: Obj1F_SetAni
00009C2E 0C03 00FA                  		cmpi.b	#-6,d3
00009C32 6200                       		bhi.s	locret_96B6
00009C34 7002                       		moveq	#2,d0
00009C36 0828 0000 0022             		btst	#0,$22(a0)
00009C3C 6600                       		bne.s	locret_96B6
00009C3E 7001                       		moveq	#1,d0
00009C40                            
00009C40                            locret_96B6:
00009C40 4E75                       		rts	
00009C42                            ; End of function Obj1F_SetAni
00009C42                            
00009C42                            ; ===========================================================================
00009C42                            
00009C42                            Obj1F_Delete:				; XREF: Obj1F_Index
00009C42 6100 0000                  		bsr.w	DeleteObject
00009C46 4E75                       		rts	
00009C48                            ; ===========================================================================
00009C48                            ; ---------------------------------------------------------------------------
00009C48                            ; Sub-object - missile that the	Crabmeat throws
00009C48                            ; ---------------------------------------------------------------------------
00009C48                            
00009C48                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009C48 5428 0024                  		addq.b	#2,$24(a0)
00009C4C 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009C54 317C 0400 0002             		move.w	#$400,2(a0)
00009C5A 117C 0004 0001             		move.b	#4,1(a0)
00009C60 117C 0003 0018             		move.b	#3,$18(a0)
00009C66 117C 0087 0020             		move.b	#$87,$20(a0)
00009C6C 117C 0008 0019             		move.b	#8,$19(a0)
00009C72 317C FC00 0012             		move.w	#-$400,$12(a0)
00009C78 117C 0007 001C             		move.b	#7,$1C(a0)
00009C7E                            
00009C7E                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009C7E 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009C84 6100 0000                  		bsr.w	AnimateSprite
00009C88 6100 0000                  		bsr.w	ObjectFall
00009C8C 6100 0000                  		bsr.w	DisplaySprite
00009C90 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009C94 0640 00E0                  		addi.w	#$E0,d0
00009C98 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009C9C 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009C9E 4E75                       		rts	
00009CA0                            ; ===========================================================================
00009CA0                            
00009CA0                            Obj1F_Delete2:
00009CA0 6000 0000                  		bra.w	DeleteObject
00009CA4                            ; ===========================================================================
00009CA4                            Ani_obj1F:
00009CA4                            	include "_anim\obj1F.asm"
00009CA4                            ; ---------------------------------------------------------------------------
00009CA4                            ; Animation script - Crabmeat enemy
00009CA4                            ; ---------------------------------------------------------------------------
00009CA4 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009CAA 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009CB0 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009CB4 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009CB8 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009CBC 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009CC0 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009CC6 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009CCC 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009CD2 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009CD6 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009CDA                            		even
00009CDA                            		even
00009CDA                            
00009CDA                            ; ---------------------------------------------------------------------------
00009CDA                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009CDA                            ; ---------------------------------------------------------------------------
00009CDA                            Map_obj1F:
00009CDA                            	include "_maps\obj1F.asm"
00009CDA                            Map_1514:
00009CDA 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009CDC 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009CDE 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009CE0 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009CE2 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009CE4 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009CE6 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009CE8 03                         Map_1514_E: 	dc.b $3
00009CE9 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009CEE F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009CF3 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009CF8 03                         Map_1514_1E: 	dc.b $3
00009CF9 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009CFE F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009D03 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009D08 03                         Map_1514_2E: 	dc.b $3
00009D09 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009D0E F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009D13 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009D18 03                         Map_1514_3E: 	dc.b $3
00009D19 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009D1E F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009D23 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009D28 03                         Map_1514_4E: 	dc.b $3
00009D29 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009D2E F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009D33 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009D38 01                         Map_1514_5E: 	dc.b $1
00009D39 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009D3E 01                         Map_1514_64: 	dc.b $1
00009D3F F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009D44                            	even
00009D44                            	even
00009D44                            
00009D44                            ; ===========================================================================
00009D44                            ; ---------------------------------------------------------------------------
00009D44                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009D44                            ; ---------------------------------------------------------------------------
00009D44                            
00009D44                            Obj22:					; XREF: Obj_Index
00009D44 7000                       		moveq	#0,d0
00009D46 1028 0024                  		move.b	$24(a0),d0
00009D4A 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009D4E 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009D52                            ; ===========================================================================
00009D52 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009D54 0000                       		dc.w Obj22_Action-Obj22_Index
00009D56 0000                       		dc.w Obj22_Delete-Obj22_Index
00009D58                            ; ===========================================================================
00009D58                            
00009D58                            Obj22_Main:				; XREF: Obj22_Index
00009D58 5428 0024                  		addq.b	#2,$24(a0)
00009D5C 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009D64 317C 0444 0002             		move.w	#$444,2(a0)
00009D6A 117C 0004 0001             		move.b	#4,1(a0)
00009D70 117C 0003 0018             		move.b	#3,$18(a0)
00009D76 117C 0008 0020             		move.b	#8,$20(a0)
00009D7C 117C 0018 0019             		move.b	#$18,$19(a0)
00009D82                            
00009D82                            Obj22_Action:				; XREF: Obj22_Index
00009D82 7000                       		moveq	#0,d0
00009D84 1028 0025                  		move.b	$25(a0),d0
00009D88 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009D8C 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009D90 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009D96 6100 0000                  		bsr.w	AnimateSprite
00009D9A 6000 0000                  		bra.w	MarkObjGone
00009D9E                            ; ===========================================================================
00009D9E 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009DA0 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009DA2                            ; ===========================================================================
00009DA2                            
00009DA2                            Obj22_Move:				; XREF: Obj22_Index2
00009DA2 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009DA6 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009DA8 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009DAE 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009DB0 5428 0025                  		addq.b	#2,$25(a0)
00009DB4 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009DBA 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009DC0 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009DC6 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009DCC 6600                       		bne.s	locret_986C	; if not, branch
00009DCE 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009DD2                            
00009DD2                            locret_986C:
00009DD2 4E75                       		rts	
00009DD4                            ; ===========================================================================
00009DD4                            
00009DD4                            Obj22_Fire:				; XREF: Obj22_Move
00009DD4 6100 0000                  		bsr.w	SingleObjLoad
00009DD8 6600                       		bne.s	locret_98D0
00009DDA 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009DDE 3368 0008 0008             		move.w	8(a0),8(a1)
00009DE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009DEA 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009DF0 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009DF6 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009DFC 303C 0018                  		move.w	#$18,d0
00009E00 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009E06 6600                       		bne.s	loc_98AA	; if not, branch
00009E08 4440                       		neg.w	d0
00009E0A 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009E0E                            
00009E0E                            loc_98AA:
00009E0E D169 0008                  		add.w	d0,8(a1)
00009E12 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009E18 337C 000E 0032             		move.w	#$E,$32(a1)
00009E1E 2348 003C                  		move.l	a0,$3C(a1)
00009E22 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009E28 317C 003B 0032             		move.w	#$3B,$32(a0)
00009E2E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009E34                            
00009E34                            locret_98D0:
00009E34 4E75                       		rts	
00009E36                            ; ===========================================================================
00009E36                            
00009E36                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009E36 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009E3A 6B00                       		bmi.s	Obj22_ChgDir
00009E3C 6100 0000                  		bsr.w	SpeedToPos
00009E40 4A28 0034                  		tst.b	$34(a0)
00009E44 6600                       		bne.s	locret_992A
00009E46 3038 D008                  		move.w	($FFFFD008).w,d0
00009E4A 9068 0008                  		sub.w	8(a0),d0
00009E4E 6A00                       		bpl.s	Obj22_SetNrSonic
00009E50 4440                       		neg.w	d0
00009E52                            
00009E52                            Obj22_SetNrSonic:
00009E52 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009E56 6400                       		bcc.s	locret_992A	; if not, branch
00009E58 4A28 0001                  		tst.b	1(a0)
00009E5C 6A00                       		bpl.s	locret_992A
00009E5E 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009E64 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009E6A 6000                       		bra.s	Obj22_Stop
00009E6C                            ; ===========================================================================
00009E6C                            
00009E6C                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009E6C 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009E72 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009E78 317C 003B 0032             		move.w	#59,$32(a0)
00009E7E                            
00009E7E                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009E7E 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009E82 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009E88 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009E8E                            
00009E8E                            locret_992A:
00009E8E 4E75                       		rts	
00009E90                            ; ===========================================================================
00009E90                            
00009E90                            Obj22_Delete:				; XREF: Obj22_Index
00009E90 6100 0000                  		bsr.w	DeleteObject
00009E94 4E75                       		rts	
00009E96                            ; ===========================================================================
00009E96                            ; ---------------------------------------------------------------------------
00009E96                            ; Object 23 - missile that Buzz	Bomber throws
00009E96                            ; ---------------------------------------------------------------------------
00009E96                            
00009E96                            Obj23:					; XREF: Obj_Index
00009E96 7000                       		moveq	#0,d0
00009E98 1028 0024                  		move.b	$24(a0),d0
00009E9C 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009EA0 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009EA4                            ; ===========================================================================
00009EA4 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009EA6 0000                       		dc.w Obj23_Animate-Obj23_Index
00009EA8 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009EAA 0000                       		dc.w Obj23_Delete-Obj23_Index
00009EAC 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009EAE                            ; ===========================================================================
00009EAE                            
00009EAE                            Obj23_Main:				; XREF: Obj23_Index
00009EAE 5368 0032                  		subq.w	#1,$32(a0)
00009EB2 6A00                       		bpl.s	Obj23_ChkCancel
00009EB4 5428 0024                  		addq.b	#2,$24(a0)
00009EB8 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009EC0 317C 2444 0002             		move.w	#$2444,2(a0)
00009EC6 117C 0004 0001             		move.b	#4,1(a0)
00009ECC 117C 0003 0018             		move.b	#3,$18(a0)
00009ED2 117C 0008 0019             		move.b	#8,$19(a0)
00009ED8 0228 0003 0022             		andi.b	#3,$22(a0)
00009EDE 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009EE2 6700                       		beq.s	Obj23_Animate	; if not, branch
00009EE4 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009EEA 117C 0087 0020             		move.b	#$87,$20(a0)
00009EF0 117C 0001 001C             		move.b	#1,$1C(a0)
00009EF6 6000                       		bra.s	Obj23_Animate2
00009EF8                            ; ===========================================================================
00009EF8                            
00009EF8                            Obj23_Animate:				; XREF: Obj23_Index
00009EF8 6100                       		bsr.s	Obj23_ChkCancel
00009EFA 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009F00 6100 0000                  		bsr.w	AnimateSprite
00009F04 6000 0000                  		bra.w	DisplaySprite
00009F08                            ; ---------------------------------------------------------------------------
00009F08                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009F08                            ; destroyed, and if it has, then cancel	the missile
00009F08                            ; ---------------------------------------------------------------------------
00009F08                            
00009F08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F08                            
00009F08                            
00009F08                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009F08 2268 003C                  		movea.l	$3C(a0),a1
00009F0C 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009F10 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009F12 4E75                       		rts	
00009F14                            ; End of function Obj23_ChkCancel
00009F14                            
00009F14                            ; ===========================================================================
00009F14                            
00009F14                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009F14 0828 0007 0022             		btst	#7,$22(a0)
00009F1A 6600                       		bne.s	Obj23_Explode
00009F1C 117C 0087 0020             		move.b	#$87,$20(a0)
00009F22 117C 0001 001C             		move.b	#1,$1C(a0)
00009F28 6100 0000                  		bsr.w	SpeedToPos
00009F2C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009F32 6100 0000                  		bsr.w	AnimateSprite
00009F36 6100 0000                  		bsr.w	DisplaySprite
00009F3A 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009F3E 0640 00E0                  		addi.w	#$E0,d0
00009F42 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009F46 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009F48 4E75                       		rts	
00009F4A                            ; ===========================================================================
00009F4A                            
00009F4A                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009F4A 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009F4E 117C 0000 0024             		move.b	#0,$24(a0)
00009F54 6000 F2DE                  		bra.w	Obj24
00009F58                            ; ===========================================================================
00009F58                            
00009F58                            Obj23_Delete:				; XREF: Obj23_Index
00009F58 6100 0000                  		bsr.w	DeleteObject
00009F5C 4E75                       		rts	
00009F5E                            ; ===========================================================================
00009F5E                            
00009F5E                            Obj23_FromNewt:				; XREF: Obj23_Index
00009F5E 4A28 0001                  		tst.b	1(a0)
00009F62 6AF4                       		bpl.s	Obj23_Delete
00009F64 6100 0000                  		bsr.w	SpeedToPos
00009F68                            
00009F68                            Obj23_Animate2:				; XREF: Obj23_Main
00009F68 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009F6E 6100 0000                  		bsr.w	AnimateSprite
00009F72 6100 0000                  		bsr.w	DisplaySprite
00009F76 4E75                       		rts	
00009F78                            ; ===========================================================================
00009F78                            Ani_obj22:
00009F78                            	include "_anim\obj22.asm"
00009F78                            ; ---------------------------------------------------------------------------
00009F78                            ; Animation script - Buzz Bomber enemy
00009F78                            ; ---------------------------------------------------------------------------
00009F78 0000                       		dc.w byte_9A1E-Ani_obj22
00009F7A 0000                       		dc.w byte_9A22-Ani_obj22
00009F7C 0000                       		dc.w byte_9A26-Ani_obj22
00009F7E 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009F82 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009F86 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009F8A                            		even
00009F8A                            		even
00009F8A                            
00009F8A                            Ani_obj23:
00009F8A                            	include "_anim\obj23.asm"
00009F8A                            ; ---------------------------------------------------------------------------
00009F8A                            ; Animation script - missile that Buzz Bomber throws
00009F8A                            ; ---------------------------------------------------------------------------
00009F8A 0000                       		dc.w byte_9A2E-Ani_obj23
00009F8C 0000                       		dc.w byte_9A32-Ani_obj23
00009F8E 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009F92 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009F96                            		even
00009F96                            		even
00009F96                            
00009F96                            ; ---------------------------------------------------------------------------
00009F96                            ; Sprite mappings - Buzz Bomber	enemy
00009F96                            ; ---------------------------------------------------------------------------
00009F96                            Map_obj22:
00009F96                            	include "_maps\obj22.asm"
00009F96                            Map_e97a:
00009F96 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009F98 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009F9A 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009F9C 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009F9E 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009FA0 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009FA2 06                         Map_e97a_C: 	dc.b $6
00009FA3 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009FA8 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009FAD 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009FB2 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009FB7 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009FBC F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009FC1 06                         Map_e97a_2B: 	dc.b $6
00009FC2 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009FC7 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009FCC 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009FD1 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009FD6 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009FDB F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009FE0 07                         Map_e97a_4A: 	dc.b $7
00009FE1 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009FE6 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009FEB F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009FF0 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009FF5 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009FFA F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009FFF F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A004 07                         Map_e97a_6E: 	dc.b $7
0000A005 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A00A F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A00F F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A014 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A019 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A01E F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A023 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A028 06                         Map_e97a_92: 	dc.b $6
0000A029 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A02E 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A033 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A038 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A03D F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A042 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A047 04                         Map_e97a_B1: 	dc.b $4
0000A048 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A04D 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A052 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A057 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A05C                            	even
0000A05C                            	even
0000A05C                            
0000A05C                            ; ---------------------------------------------------------------------------
0000A05C                            ; Sprite mappings - missile that Buzz Bomber throws
0000A05C                            ; ---------------------------------------------------------------------------
0000A05C                            Map_obj23:
0000A05C                            	include "_maps\obj23.asm"
0000A05C                            ; ---------------------------------------------------------------------------
0000A05C                            ; Sprite mappings - missile that Buzz Bomber throws
0000A05C                            ; ---------------------------------------------------------------------------
0000A05C 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A060 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A064 01                         byte_9B0E:	dc.b 1
0000A065 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A06A 01                         byte_9B14:	dc.b 1
0000A06B F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A070 01                         byte_9B1A:	dc.b 1
0000A071 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A076 01                         byte_9B20:	dc.b 1
0000A077 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A07C                            		even
0000A07C                            		even
0000A07C                            
0000A07C                            ; ===========================================================================
0000A07C                            ; ---------------------------------------------------------------------------
0000A07C                            ; Object 25 - rings
0000A07C                            ; ---------------------------------------------------------------------------
0000A07C                            
0000A07C                            Obj25:					; XREF: Obj_Index
0000A07C 7000                       		moveq	#0,d0
0000A07E 1028 0024                  		move.b	$24(a0),d0
0000A082 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A086 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A08A                            ; ===========================================================================
0000A08A 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A08C 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A08E 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A090 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A092 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A094                            ; ---------------------------------------------------------------------------
0000A094                            ; Distances between rings (format: horizontal, vertical)
0000A094                            ; ---------------------------------------------------------------------------
0000A094 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A096 1800                       		dc.b $18, 0		; horizontal normal
0000A098 2000                       		dc.b $20, 0		; horizontal wide
0000A09A 0010                       		dc.b 0,	$10		; vertical tight
0000A09C 0018                       		dc.b 0,	$18		; vertical normal
0000A09E 0020                       		dc.b 0,	$20		; vertical wide
0000A0A0 1010                       		dc.b $10, $10		; diagonal
0000A0A2 1818                       		dc.b $18, $18
0000A0A4 2020                       		dc.b $20, $20
0000A0A6 F010                       		dc.b $F0, $10
0000A0A8 E818                       		dc.b $E8, $18
0000A0AA E020                       		dc.b $E0, $20
0000A0AC 1008                       		dc.b $10, 8
0000A0AE 1810                       		dc.b $18, $10
0000A0B0 F008                       		dc.b $F0, 8
0000A0B2 E810                       		dc.b $E8, $10
0000A0B4                            ; ===========================================================================
0000A0B4                            
0000A0B4                            Obj25_Main:				; XREF: Obj25_Index
0000A0B4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A0B8 7000                       		moveq	#0,d0
0000A0BA 1028 0023                  		move.b	$23(a0),d0
0000A0BE 45F2 0002                  		lea	2(a2,d0.w),a2
0000A0C2 1812                       		move.b	(a2),d4
0000A0C4 1228 0028                  		move.b	$28(a0),d1
0000A0C8 1001                       		move.b	d1,d0
0000A0CA 0241 0007                  		andi.w	#7,d1
0000A0CE 0C41 0007                  		cmpi.w	#7,d1
0000A0D2 6600                       		bne.s	loc_9B80
0000A0D4 7206                       		moveq	#6,d1
0000A0D6                            
0000A0D6                            loc_9B80:
0000A0D6 4841                       		swap	d1
0000A0D8 323C 0000                  		move.w	#0,d1
0000A0DC E808                       		lsr.b	#4,d0
0000A0DE D040                       		add.w	d0,d0
0000A0E0 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A0E4 4885                       		ext.w	d5
0000A0E6 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A0EA 4886                       		ext.w	d6
0000A0EC 2248                       		movea.l	a0,a1
0000A0EE 3428 0008                  		move.w	8(a0),d2
0000A0F2 3628 000C                  		move.w	$C(a0),d3
0000A0F6 E20C                       		lsr.b	#1,d4
0000A0F8 6500                       		bcs.s	loc_9C02
0000A0FA 0892 0007                  		bclr	#7,(a2)
0000A0FE 6000                       		bra.s	loc_9BBA
0000A100                            ; ===========================================================================
0000A100                            
0000A100                            Obj25_MakeRings:
0000A100 4841                       		swap	d1
0000A102 E20C                       		lsr.b	#1,d4
0000A104 6500                       		bcs.s	loc_9C02
0000A106 0892 0007                  		bclr	#7,(a2)
0000A10A 6100 0000                  		bsr.w	SingleObjLoad
0000A10E 6600                       		bne.s	loc_9C0E
0000A110                            
0000A110                            loc_9BBA:				; XREF: Obj25_Main
0000A110 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A114 5429 0024                  		addq.b	#2,$24(a1)
0000A118 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A11C 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A122 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A126 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A12E 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A134 137C 0004 0001             		move.b	#4,1(a1)
0000A13A 137C 0002 0018             		move.b	#2,$18(a1)
0000A140 137C 0047 0020             		move.b	#$47,$20(a1)
0000A146 137C 0008 0019             		move.b	#8,$19(a1)
0000A14C 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A152 1341 0034                  		move.b	d1,$34(a1)
0000A156                            
0000A156                            loc_9C02:
0000A156 5241                       		addq.w	#1,d1
0000A158 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A15A D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A15C 4841                       		swap	d1
0000A15E 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A162                            
0000A162                            loc_9C0E:
0000A162 0812 0000                  		btst	#0,(a2)
0000A166 6600 0000                  		bne.w	DeleteObject
0000A16A                            
0000A16A                            Obj25_Animate:				; XREF: Obj25_Index
0000A16A 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A170 6100 0000                  		bsr.w	DisplaySprite
0000A174 3028 0032                  		move.w	$32(a0),d0
0000A178 0240 FF80                  		andi.w	#$FF80,d0
0000A17C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A180 0441 0080                  		subi.w	#$80,d1
0000A184 0241 FF80                  		andi.w	#$FF80,d1
0000A188 9041                       		sub.w	d1,d0
0000A18A 0C40 0280                  		cmpi.w	#$280,d0
0000A18E 6200                       		bhi.s	Obj25_Delete
0000A190 4E75                       		rts	
0000A192                            ; ===========================================================================
0000A192                            
0000A192                            Obj25_Collect:				; XREF: Obj25_Index
0000A192 5428 0024                  		addq.b	#2,$24(a0)
0000A196 117C 0000 0020             		move.b	#0,$20(a0)
0000A19C 117C 0001 0018             		move.b	#1,$18(a0)
0000A1A2 6100 0000                  		bsr.w	CollectRing
0000A1A6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A1AA 7000                       		moveq	#0,d0
0000A1AC 1028 0023                  		move.b	$23(a0),d0
0000A1B0 1228 0034                  		move.b	$34(a0),d1
0000A1B4 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A1B8                            
0000A1B8                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A1B8 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A1BE 6100 0000                  		bsr.w	AnimateSprite
0000A1C2 6000 0000                  		bra.w	DisplaySprite
0000A1C6                            ; ===========================================================================
0000A1C6                            
0000A1C6                            Obj25_Delete:				; XREF: Obj25_Index
0000A1C6 6000 0000                  		bra.w	DeleteObject
0000A1CA                            
0000A1CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A1CA                            
0000A1CA                            
0000A1CA                            CollectRing:				; XREF: Obj25_Collect
0000A1CA 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A1CE 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A1D4 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A1D8 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A1DE 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A1E0 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A1E6 6700                       		beq.s	loc_9CA4
0000A1E8 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A1EE 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A1F0 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A1F6 6600                       		bne.s	Obj25_PlaySnd
0000A1F8                            
0000A1F8                            loc_9CA4:
0000A1F8 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A1FC 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A200 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A204                            
0000A204                            Obj25_PlaySnd:
0000A204 4EF9 0000 15C0             		jmp	(PlaySound_Special).l
0000A20A                            ; End of function CollectRing
0000A20A                            
0000A20A                            ; ===========================================================================
0000A20A                            ; ---------------------------------------------------------------------------
0000A20A                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A20A                            ; ---------------------------------------------------------------------------
0000A20A                            
0000A20A                            Obj37:					; XREF: Obj_Index
0000A20A 7000                       		moveq	#0,d0
0000A20C 1028 0024                  		move.b	$24(a0),d0
0000A210 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A214 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A218                            ; ===========================================================================
0000A218 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A21A 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A21C 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A21E 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A220 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A222                            ; ===========================================================================
0000A222                            
0000A222                            Obj37_CountRings:			; XREF: Obj37_Index
0000A222 2248                       		movea.l	a0,a1
0000A224 7A00                       		moveq	#0,d5
0000A226 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A22A 7020                       		moveq	#32,d0
0000A22C BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A22E 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A230 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A232                            
0000A232                            loc_9CDE:
0000A232 5345                       		subq.w	#1,d5
0000A234 383C 0288                  		move.w	#$288,d4
0000A238 6000                       		bra.s	Obj37_MakeRings
0000A23A                            ; ===========================================================================
0000A23A                            
0000A23A                            Obj37_Loop:
0000A23A 6100 0000                  		bsr.w	SingleObjLoad
0000A23E 6600 0000                  		bne.w	Obj37_ResetCounter
0000A242                            
0000A242                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A242 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A246 5429 0024                  		addq.b	#2,$24(a1)
0000A24A 137C 0008 0016             		move.b	#8,$16(a1)
0000A250 137C 0008 0017             		move.b	#8,$17(a1)
0000A256 3368 0008 0008             		move.w	8(a0),8(a1)
0000A25C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A262 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A26A 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A270 137C 0004 0001             		move.b	#4,1(a1)
0000A276 137C 0003 0018             		move.b	#3,$18(a1)
0000A27C 137C 0047 0020             		move.b	#$47,$20(a1)
0000A282 137C 0008 0019             		move.b	#8,$19(a1)
0000A288 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A28E 4A44                       		tst.w	d4
0000A290 6B00                       		bmi.s	loc_9D62
0000A292 3004                       		move.w	d4,d0
0000A294 6100 89CE                  		bsr.w	CalcSine
0000A298 3404                       		move.w	d4,d2
0000A29A E04A                       		lsr.w	#8,d2
0000A29C E560                       		asl.w	d2,d0
0000A29E E561                       		asl.w	d2,d1
0000A2A0 3400                       		move.w	d0,d2
0000A2A2 3601                       		move.w	d1,d3
0000A2A4 0604 0010                  		addi.b	#$10,d4
0000A2A8 6400                       		bcc.s	loc_9D62
0000A2AA 0444 0080                  		subi.w	#$80,d4
0000A2AE 6400                       		bcc.s	loc_9D62
0000A2B0 383C 0288                  		move.w	#$288,d4
0000A2B4                            
0000A2B4                            loc_9D62:
0000A2B4 3342 0010                  		move.w	d2,$10(a1)
0000A2B8 3343 0012                  		move.w	d3,$12(a1)
0000A2BC 4442                       		neg.w	d2
0000A2BE 4444                       		neg.w	d4
0000A2C0 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A2C4                            
0000A2C4                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A2C4 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A2CA 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A2D0 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A2D6 303C 00C6                  		move.w	#$C6,d0
0000A2DA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A2E0                            
0000A2E0                            Obj37_Bounce:				; XREF: Obj37_Index
0000A2E0 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A2E6 6100 0000                  		bsr.w	SpeedToPos
0000A2EA 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A2F0 6B00                       		bmi.s	Obj37_ChkDel
0000A2F2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A2F6 D007                       		add.b	d7,d0
0000A2F8 0200 0003                  		andi.b	#3,d0
0000A2FC 6600                       		bne.s	Obj37_ChkDel
0000A2FE 4EB9 0000 0000             		jsr	ObjHitFloor
0000A304 4A41                       		tst.w	d1
0000A306 6A00                       		bpl.s	Obj37_ChkDel
0000A308 D368 000C                  		add.w	d1,$C(a0)
0000A30C 3028 0012                  		move.w	$12(a0),d0
0000A310 E440                       		asr.w	#2,d0
0000A312 9168 0012                  		sub.w	d0,$12(a0)
0000A316 4468 0012                  		neg.w	$12(a0)
0000A31A                            
0000A31A                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A31A 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A31E 6700                       		beq.s	Obj37_Delete
0000A320 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A324 0640 00E0                  		addi.w	#$E0,d0
0000A328 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A32C 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A32E 6000 0000                  		bra.w	DisplaySprite
0000A332                            ; ===========================================================================
0000A332                            
0000A332                            Obj37_Collect:				; XREF: Obj37_Index
0000A332 5428 0024                  		addq.b	#2,$24(a0)
0000A336 117C 0000 0020             		move.b	#0,$20(a0)
0000A33C 117C 0001 0018             		move.b	#1,$18(a0)
0000A342 6100 FE86                  		bsr.w	CollectRing
0000A346                            
0000A346                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A346 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A34C 6100 0000                  		bsr.w	AnimateSprite
0000A350 6000 0000                  		bra.w	DisplaySprite
0000A354                            ; ===========================================================================
0000A354                            
0000A354                            Obj37_Delete:				; XREF: Obj37_Index
0000A354 6000 0000                  		bra.w	DeleteObject
0000A358                            ; ===========================================================================
0000A358                            ; ---------------------------------------------------------------------------
0000A358                            ; Object 4B - giant ring for entry to special stage
0000A358                            ; ---------------------------------------------------------------------------
0000A358                            
0000A358                            Obj4B:					; XREF: Obj_Index
0000A358 7000                       		moveq	#0,d0
0000A35A 1028 0024                  		move.b	$24(a0),d0
0000A35E 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A362 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A366                            ; ===========================================================================
0000A366 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A368 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A36A 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A36C 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A36E                            ; ===========================================================================
0000A36E                            
0000A36E                            Obj4B_Main:				; XREF: Obj4B_Index
0000A36E 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A376 317C 2400 0002             		move.w	#$2400,2(a0)
0000A37C 0028 0004 0001             		ori.b	#4,1(a0)
0000A382 117C 0040 0019             		move.b	#$40,$19(a0)
0000A388 4A28 0001                  		tst.b	1(a0)
0000A38C 6A00                       		bpl.s	Obj4B_Animate
0000A38E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A394 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A398 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A39E 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A3A0 4E75                       		rts	
0000A3A2                            ; ===========================================================================
0000A3A2                            
0000A3A2                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A3A2 5428 0024                  		addq.b	#2,$24(a0)
0000A3A6 117C 0002 0018             		move.b	#2,$18(a0)
0000A3AC 117C 0052 0020             		move.b	#$52,$20(a0)
0000A3B2 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A3B8                            
0000A3B8                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A3B8 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A3BE 3028 0008                  		move.w	8(a0),d0
0000A3C2 0240 FF80                  		andi.w	#$FF80,d0
0000A3C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000A3CA 0441 0080                  		subi.w	#$80,d1
0000A3CE 0241 FF80                  		andi.w	#$FF80,d1
0000A3D2 9041                       		sub.w	d1,d0
0000A3D4 0C40 0280                  		cmpi.w	#$280,d0
0000A3D8 6200 0000                  		bhi.w	DeleteObject
0000A3DC 6000 0000                  		bra.w	DisplaySprite
0000A3E0                            ; ===========================================================================
0000A3E0                            
0000A3E0                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A3E0 5528 0024                  		subq.b	#2,$24(a0)
0000A3E4 117C 0000 0020             		move.b	#0,$20(a0)
0000A3EA 6100 0000                  		bsr.w	SingleObjLoad
0000A3EE 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A3F2 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A3F6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A402 2348 003C                  		move.l	a0,$3C(a1)
0000A406 3038 D008                  		move.w	($FFFFD008).w,d0
0000A40A B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A40E 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A410 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A416                            
0000A416                            Obj4B_PlaySnd:
0000A416 303C 00C3                  		move.w	#$C3,d0
0000A41A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A420 6096                       		bra.s	Obj4B_Animate
0000A422                            ; ===========================================================================
0000A422                            
0000A422                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A422 6000 0000                  		bra.w	DeleteObject
0000A426                            ; ===========================================================================
0000A426                            ; ---------------------------------------------------------------------------
0000A426                            ; Object 7C - flash effect when	you collect the	giant ring
0000A426                            ; ---------------------------------------------------------------------------
0000A426                            
0000A426                            Obj7C:					; XREF: Obj_Index
0000A426 7000                       		moveq	#0,d0
0000A428 1028 0024                  		move.b	$24(a0),d0
0000A42C 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A430 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A434                            ; ===========================================================================
0000A434 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A436 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A438 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A43A                            ; ===========================================================================
0000A43A                            
0000A43A                            Obj7C_Main:				; XREF: Obj7C_Index
0000A43A 5428 0024                  		addq.b	#2,$24(a0)
0000A43E 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A446 317C 2462 0002             		move.w	#$2462,2(a0)
0000A44C 0028 0004 0001             		ori.b	#4,1(a0)
0000A452 117C 0000 0018             		move.b	#0,$18(a0)
0000A458 117C 0020 0019             		move.b	#$20,$19(a0)
0000A45E 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A464                            
0000A464                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A464 6100                       		bsr.s	Obj7C_Collect
0000A466 3028 0008                  		move.w	8(a0),d0
0000A46A 0240 FF80                  		andi.w	#$FF80,d0
0000A46E 3238 F700                  		move.w	($FFFFF700).w,d1
0000A472 0441 0080                  		subi.w	#$80,d1
0000A476 0241 FF80                  		andi.w	#$FF80,d1
0000A47A 9041                       		sub.w	d1,d0
0000A47C 0C40 0280                  		cmpi.w	#$280,d0
0000A480 6200 0000                  		bhi.w	DeleteObject
0000A484 6000 0000                  		bra.w	DisplaySprite
0000A488                            
0000A488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A488                            
0000A488                            
0000A488                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A488 5328 001E                  		subq.b	#1,$1E(a0)
0000A48C 6A00                       		bpl.s	locret_9F76
0000A48E 117C 0001 001E             		move.b	#1,$1E(a0)
0000A494 5228 001A                  		addq.b	#1,$1A(a0)
0000A498 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A49E 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A4A0 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A4A6 6600                       		bne.s	locret_9F76	; if not, branch
0000A4A8 2268 003C                  		movea.l	$3C(a0),a1
0000A4AC 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A4B2 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A4B8 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A4BE 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A4C2 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A4C6                            
0000A4C6                            locret_9F76:
0000A4C6 4E75                       		rts	
0000A4C8                            ; ===========================================================================
0000A4C8                            
0000A4C8                            Obj7C_End:				; XREF: Obj7C_Collect
0000A4C8 5428 0024                  		addq.b	#2,$24(a0)
0000A4CC 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A4D2 588F                       		addq.l	#4,sp
0000A4D4 4E75                       		rts	
0000A4D6                            ; End of function Obj7C_Collect
0000A4D6                            
0000A4D6                            ; ===========================================================================
0000A4D6                            
0000A4D6                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A4D6 6000 0000                  		bra.w	DeleteObject
0000A4DA                            ; ===========================================================================
0000A4DA                            Ani_obj25:
0000A4DA                            	include "_anim\obj25.asm"
0000A4DA                            ; ---------------------------------------------------------------------------
0000A4DA                            ; Animation script - ring
0000A4DA                            ; ---------------------------------------------------------------------------
0000A4DA 0000                       		dc.w byte_9F8C-Ani_obj25
0000A4DC 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A4E2                            		even
0000A4E2                            		even
0000A4E2                            
0000A4E2                            ; ---------------------------------------------------------------------------
0000A4E2                            ; Sprite mappings - rings
0000A4E2                            ; ---------------------------------------------------------------------------
0000A4E2                            Map_obj25:
0000A4E2                            	include "_maps\obj25.asm"
0000A4E2                            ; ---------------------------------------------------------------------------
0000A4E2                            ; Sprite mappings - rings
0000A4E2                            ; ---------------------------------------------------------------------------
0000A4E2 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A4E6 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A4EA 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A4EE 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A4F2 01                         byte_9FA2:	dc.b 1
0000A4F3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A4F8 01                         byte_9FA8:	dc.b 1
0000A4F9 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A4FE 01                         byte_9FAE:	dc.b 1
0000A4FF F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A504 01                         byte_9FB4:	dc.b 1
0000A505 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A50A 01                         byte_9FBA:	dc.b 1
0000A50B F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A510 01                         byte_9FC0:	dc.b 1
0000A511 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A516 01                         byte_9FC6:	dc.b 1
0000A517 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A51C 01                         byte_9FCC:	dc.b 1
0000A51D F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A522                            		even
0000A522                            		even
0000A522                            
0000A522                            ; ---------------------------------------------------------------------------
0000A522                            ; Sprite mappings - giant ring
0000A522                            ; ---------------------------------------------------------------------------
0000A522                            Map_obj4B:
0000A522                            	include "_maps\obj4B.asm"
0000A522                            ; ---------------------------------------------------------------------------
0000A522                            ; Sprite mappings - giant ring
0000A522                            ; ---------------------------------------------------------------------------
0000A522 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A526 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A52A 0A                         byte_9FDA:	dc.b $A
0000A52B E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A530 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A535 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A53A E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A53F F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A544 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A549 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A54E 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A553 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A558 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A55D 08                         byte_A00D:	dc.b 8
0000A55E E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A563 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A568 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A56D F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A572 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A577 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A57C 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A581 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A586 04                         byte_A036:	dc.b 4
0000A587 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A58C E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A591 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A596 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A59B 08                         byte_A04B:	dc.b 8
0000A59C E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A5A1 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A5A6 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A5AB F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A5B0 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A5B5 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A5BA 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A5BF 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A5C4                            		even
0000A5C4                            		even
0000A5C4                            
0000A5C4                            ; ---------------------------------------------------------------------------
0000A5C4                            ; Sprite mappings - flash effect when you collect the giant ring
0000A5C4                            ; ---------------------------------------------------------------------------
0000A5C4                            Map_obj7C:
0000A5C4                            	include "_maps\obj7C.asm"
0000A5C4                            ; ---------------------------------------------------------------------------
0000A5C4                            ; Sprite mappings - flash effect when you collect the giant ring
0000A5C4                            ; ---------------------------------------------------------------------------
0000A5C4 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A5C8 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A5CC 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A5D0 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A5D4 02                         byte_A084:	dc.b 2
0000A5D5 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A5DA 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A5DF 04                         byte_A08F:	dc.b 4
0000A5E0 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A5E5 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A5EA 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A5EF 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A5F4 04                         byte_A0A4:	dc.b 4
0000A5F5 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A5FA E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A5FF 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A604 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A609 04                         byte_A0B9:	dc.b 4
0000A60A E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A60F E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A614 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A619 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A61E 04                         byte_A0CE:	dc.b 4
0000A61F E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A624 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A629 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A62E 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A633 04                         byte_A0E3:	dc.b 4
0000A634 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A639 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A63E 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A643 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A648 02                         byte_A0F8:	dc.b 2
0000A649 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A64E 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A653 04                         byte_A103:	dc.b 4
0000A654 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A659 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A65E 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A663 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A668                            		even
0000A668                            		even
0000A668                            
0000A668                            ; ===========================================================================
0000A668                            ; ---------------------------------------------------------------------------
0000A668                            ; Object 26 - monitors
0000A668                            ; ---------------------------------------------------------------------------
0000A668                            
0000A668                            Obj26:					; XREF: Obj_Index
0000A668 7000                       		moveq	#0,d0
0000A66A 1028 0024                  		move.b	$24(a0),d0
0000A66E 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A672 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A676                            ; ===========================================================================
0000A676 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A678 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A67A 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A67C 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A67E 0000                       		dc.w Obj26_Display-Obj26_Index
0000A680                            ; ===========================================================================
0000A680                            
0000A680                            Obj26_Main:				; XREF: Obj26_Index
0000A680 5428 0024                  		addq.b	#2,$24(a0)
0000A684 117C 000E 0016             		move.b	#$E,$16(a0)
0000A68A 117C 000E 0017             		move.b	#$E,$17(a0)
0000A690 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A698 317C 0680 0002             		move.w	#$680,2(a0)
0000A69E 117C 0004 0001             		move.b	#4,1(a0)
0000A6A4 117C 0003 0018             		move.b	#3,$18(a0)
0000A6AA 117C 000F 0019             		move.b	#$F,$19(a0)
0000A6B0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A6B4 7000                       		moveq	#0,d0
0000A6B6 1028 0023                  		move.b	$23(a0),d0
0000A6BA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A6C0 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A6C6 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A6C8 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A6CE 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A6D4 4E75                       		rts	
0000A6D6                            ; ===========================================================================
0000A6D6                            
0000A6D6                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A6D6 117C 0046 0020             		move.b	#$46,$20(a0)
0000A6DC 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A6E2                            
0000A6E2                            Obj26_Solid:				; XREF: Obj26_Index
0000A6E2 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A6E6 6700                       		beq.s	loc_A1EC	; if not, branch
0000A6E8 5500                       		subq.b	#2,d0
0000A6EA 6600                       		bne.s	Obj26_Fall
0000A6EC 7200                       		moveq	#0,d1
0000A6EE 1228 0019                  		move.b	$19(a0),d1
0000A6F2 0641 000B                  		addi.w	#$B,d1
0000A6F6 6100 D41C                  		bsr.w	ExitPlatform
0000A6FA 0829 0003 0022             		btst	#3,$22(a1)
0000A700 6600 0000                  		bne.w	loc_A1BC
0000A704 4228 0025                  		clr.b	$25(a0)
0000A708 6000 0000                  		bra.w	Obj26_Animate
0000A70C                            ; ===========================================================================
0000A70C                            
0000A70C                            loc_A1BC:				; XREF: Obj26_Solid
0000A70C 363C 0010                  		move.w	#$10,d3
0000A710 3428 0008                  		move.w	8(a0),d2
0000A714 6100 D95C                  		bsr.w	MvSonicOnPtfm
0000A718 6000 0000                  		bra.w	Obj26_Animate
0000A71C                            ; ===========================================================================
0000A71C                            
0000A71C                            Obj26_Fall:				; XREF: Obj26_Solid
0000A71C 6100 0000                  		bsr.w	ObjectFall
0000A720 4EB9 0000 0000             		jsr	ObjHitFloor
0000A726 4A41                       		tst.w	d1
0000A728 6A00 0000                  		bpl.w	Obj26_Animate
0000A72C D368 000C                  		add.w	d1,$C(a0)
0000A730 4268 0012                  		clr.w	$12(a0)
0000A734 4228 0025                  		clr.b	$25(a0)
0000A738 6000 0000                  		bra.w	Obj26_Animate
0000A73C                            ; ===========================================================================
0000A73C                            
0000A73C                            loc_A1EC:				; XREF: Obj26_Solid
0000A73C 323C 001A                  		move.w	#$1A,d1
0000A740 343C 000F                  		move.w	#$F,d2
0000A744 6100 0000                  		bsr.w	Obj26_SolidSides
0000A748 6700 0000                  		beq.w	loc_A25C
0000A74C 4A69 0012                  		tst.w	$12(a1)
0000A750 6B00                       		bmi.s	loc_A20A
0000A752 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A758 6700                       		beq.s	loc_A25C	; if yes, branch
0000A75A                            
0000A75A                            loc_A20A:
0000A75A 4A41                       		tst.w	d1
0000A75C 6A00                       		bpl.s	loc_A220
0000A75E 9769 000C                  		sub.w	d3,$C(a1)
0000A762 6100 D29E                  		bsr.w	loc_74AE
0000A766 117C 0002 0025             		move.b	#2,$25(a0)
0000A76C 6000 0000                  		bra.w	Obj26_Animate
0000A770                            ; ===========================================================================
0000A770                            
0000A770                            loc_A220:
0000A770 4A40                       		tst.w	d0
0000A772 6700 0000                  		beq.w	loc_A246
0000A776 6B00                       		bmi.s	loc_A230
0000A778 4A69 0010                  		tst.w	$10(a1)
0000A77C 6B00                       		bmi.s	loc_A246
0000A77E 6000                       		bra.s	loc_A236
0000A780                            ; ===========================================================================
0000A780                            
0000A780                            loc_A230:
0000A780 4A69 0010                  		tst.w	$10(a1)
0000A784 6A00                       		bpl.s	loc_A246
0000A786                            
0000A786                            loc_A236:
0000A786 9169 0008                  		sub.w	d0,8(a1)
0000A78A 337C 0000 0014             		move.w	#0,$14(a1)
0000A790 337C 0000 0010             		move.w	#0,$10(a1)
0000A796                            
0000A796                            loc_A246:
0000A796 0829 0001 0022             		btst	#1,$22(a1)
0000A79C 6600                       		bne.s	loc_A26A
0000A79E 08E9 0005 0022             		bset	#5,$22(a1)
0000A7A4 08E8 0005 0022             		bset	#5,$22(a0)
0000A7AA 6000                       		bra.s	Obj26_Animate
0000A7AC                            ; ===========================================================================
0000A7AC                            
0000A7AC                            loc_A25C:
0000A7AC 0828 0005 0022             		btst	#5,$22(a0)
0000A7B2 6700                       		beq.s	Obj26_Animate
0000A7B4 337C 0001 001C             		move.w	#1,$1C(a1)
0000A7BA                            
0000A7BA                            loc_A26A:
0000A7BA 08A8 0005 0022             		bclr	#5,$22(a0)
0000A7C0 08A9 0005 0022             		bclr	#5,$22(a1)
0000A7C6                            
0000A7C6                            Obj26_Animate:				; XREF: Obj26_Index
0000A7C6 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A7CC 6100 0000                  		bsr.w	AnimateSprite
0000A7D0                            
0000A7D0                            Obj26_Display:				; XREF: Obj26_Index
0000A7D0 6100 0000                  		bsr.w	DisplaySprite
0000A7D4 3028 0008                  		move.w	8(a0),d0
0000A7D8 0240 FF80                  		andi.w	#$FF80,d0
0000A7DC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A7E0 0441 0080                  		subi.w	#$80,d1
0000A7E4 0241 FF80                  		andi.w	#$FF80,d1
0000A7E8 9041                       		sub.w	d1,d0
0000A7EA 0C40 0280                  		cmpi.w	#$280,d0
0000A7EE 6200 0000                  		bhi.w	DeleteObject
0000A7F2 4E75                       		rts	
0000A7F4                            ; ===========================================================================
0000A7F4                            
0000A7F4                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A7F4 5428 0024                  		addq.b	#2,$24(a0)
0000A7F8 117C 0000 0020             		move.b	#0,$20(a0)
0000A7FE 6100 0000                  		bsr.w	SingleObjLoad
0000A802 6600                       		bne.s	Obj26_Explode
0000A804 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A808 3368 0008 0008             		move.w	8(a0),8(a1)
0000A80E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A814 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A81A 7400                       		moveq	#0,d2	; GMZ
0000A81C 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A81E                            
0000A81E                            Obj26_Explode:
0000A81E 6100 0000                  		bsr.w	SingleObjLoad
0000A822 6600                       		bne.s	Obj26_SetBroken
0000A824 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A828 5429 0024                  		addq.b	#2,$24(a1)
0000A82C 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A830 3368 0008 0008             		move.w	8(a0),8(a1)
0000A836 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A83C                            
0000A83C                            Obj26_NextExplosion:
0000A83C 5802                       		addq.b	#4,d2
0000A83E 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A842                            
0000A842                            Obj26_SetBroken:
0000A842 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A846 7000                       		moveq	#0,d0
0000A848 1028 0023                  		move.b	$23(a0),d0
0000A84C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A852 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A858 6000 0000                  		bra.w	DisplaySprite
0000A85C                            ; ===========================================================================
0000A85C                            ; ---------------------------------------------------------------------------
0000A85C                            ; Object 2E - contents of monitors
0000A85C                            ; ---------------------------------------------------------------------------
0000A85C                            
0000A85C                            Obj2E:					; XREF: Obj_Index
0000A85C 7000                       		moveq	#0,d0
0000A85E 1028 0024                  		move.b	$24(a0),d0
0000A862 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A866 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A86A 6000 0000                  		bra.w	DisplaySprite
0000A86E                            ; ===========================================================================
0000A86E 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A870 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A872 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A874                            ; ===========================================================================
0000A874                            
0000A874                            Obj2E_Main:				; XREF: Obj2E_Index
0000A874 5428 0024                  		addq.b	#2,$24(a0)
0000A878 317C 0680 0002             		move.w	#$680,2(a0)
0000A87E 117C 0024 0001             		move.b	#$24,1(a0)
0000A884 117C 0003 0018             		move.b	#3,$18(a0)
0000A88A 117C 0008 0019             		move.b	#8,$19(a0)
0000A890 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A896 7000                       		moveq	#0,d0
0000A898 1028 001C                  		move.b	$1C(a0),d0
0000A89C 5400                       		addq.b	#2,d0
0000A89E 1140 001A                  		move.b	d0,$1A(a0)
0000A8A2 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A8A8 D000                       		add.b	d0,d0
0000A8AA D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A8AE 5249                       		addq.w	#1,a1
0000A8B0 2149 0004                  		move.l	a1,4(a0)
0000A8B4                            
0000A8B4                            Obj2E_Move:				; XREF: Obj2E_Index
0000A8B4 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A8B8 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A8BC 6100 0000                  		bsr.w	SpeedToPos
0000A8C0 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A8C6 4E75                       		rts	
0000A8C8                            ; ===========================================================================
0000A8C8                            
0000A8C8                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A8C8 5428 0024                  		addq.b	#2,$24(a0)
0000A8CC 317C 001D 001E             		move.w	#29,$1E(a0)
0000A8D2 1028 001C                  		move.b	$1C(a0),d0
0000A8D6 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A8DA 6600                       		bne.s	Obj2E_ChkSonic
0000A8DC 4E75                       		rts			; Eggman monitor does nothing
0000A8DE                            ; ===========================================================================
0000A8DE                            
0000A8DE                            Obj2E_ChkSonic:
0000A8DE 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A8E2 6600                       		bne.s	Obj2E_ChkShoes
0000A8E4                            
0000A8E4                            ExtraLife:
0000A8E4 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A8E8 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A8EC 303C 0088                  		move.w	#$88,d0
0000A8F0 4EF9 0000 15BA             		jmp	(PlaySound).l	; play extra life music
0000A8F6                            ; ===========================================================================
0000A8F6                            
0000A8F6                            Obj2E_ChkShoes:
0000A8F6 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A8FA 6600                       		bne.s	Obj2E_ChkShield
0000A8FC 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A902 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A908 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A90E 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A914 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A91A 303C 00E2                  		move.w	#$E2,d0
0000A91E 4EF9 0000 15BA             		jmp	(PlaySound).l	; Speed	up the music
0000A924                            ; ===========================================================================
0000A924                            
0000A924                            Obj2E_ChkShield:
0000A924 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A928 6600                       		bne.s	Obj2E_ChkInvinc
0000A92A 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A930 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A936 303C 00AF                  		move.w	#$AF,d0
0000A93A 4EF9 0000 15BA             		jmp	(PlaySound).l	; play shield sound
0000A940                            ; ===========================================================================
0000A940                            
0000A940                            Obj2E_ChkInvinc:
0000A940 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A944 6600                       		bne.s	Obj2E_ChkRings
0000A946 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A94C 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A952 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A958 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A95E 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A964 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A96A 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A970 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A976 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A97C 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A982 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A986 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A988 303C 0087                  		move.w	#$87,d0
0000A98C 4EF9 0000 15BA             		jmp	(PlaySound).l	; play invincibility music
0000A992                            ; ===========================================================================
0000A992                            
0000A992                            Obj2E_NoMusic:
0000A992 4E75                       		rts	
0000A994                            ; ===========================================================================
0000A994                            
0000A994                            Obj2E_ChkRings:
0000A994 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A998 6600                       		bne.s	Obj2E_ChkS
0000A99A 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A9A0 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A9A6 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A9AC 6500                       		bcs.s	Obj2E_RingSound
0000A9AE 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A9B4 6700 FF2E                  		beq.w	ExtraLife
0000A9B8 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A9BE 6500                       		bcs.s	Obj2E_RingSound
0000A9C0 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A9C6 6700 FF1C                  		beq.w	ExtraLife
0000A9CA                            
0000A9CA                            Obj2E_RingSound:
0000A9CA 303C 00B5                  		move.w	#$B5,d0
0000A9CE 4EF9 0000 15BA             		jmp	(PlaySound).l	; play ring sound
0000A9D4                            ; ===========================================================================
0000A9D4                            
0000A9D4                            Obj2E_ChkS:
0000A9D4 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A9D8 6600                       		bne.s	Obj2E_ChkEnd
0000A9DA                            		; nop	
0000A9DA 7201                       		moveq	#1,d1
0000A9DC B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A9E0                            
0000A9E0                            Obj2E_ChkEnd:
0000A9E0 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A9E2                            ; ===========================================================================
0000A9E2                            
0000A9E2                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A9E2 5368 001E                  		subq.w	#1,$1E(a0)
0000A9E6 6B00 0000                  		bmi.w	DeleteObject
0000A9EA 4E75                       		rts	
0000A9EC                            ; ---------------------------------------------------------------------------
0000A9EC                            ; Subroutine to	make the sides of a monitor solid
0000A9EC                            ; ---------------------------------------------------------------------------
0000A9EC                            
0000A9EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A9EC                            
0000A9EC                            
0000A9EC                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A9EC 43F8 D000                  		lea	($FFFFD000).w,a1
0000A9F0 3029 0008                  		move.w	8(a1),d0
0000A9F4 9068 0008                  		sub.w	8(a0),d0
0000A9F8 D041                       		add.w	d1,d0
0000A9FA 6B00                       		bmi.s	loc_A4E6
0000A9FC 3601                       		move.w	d1,d3
0000A9FE D643                       		add.w	d3,d3
0000AA00 B043                       		cmp.w	d3,d0
0000AA02 6200                       		bhi.s	loc_A4E6
0000AA04 1629 0016                  		move.b	$16(a1),d3
0000AA08 4883                       		ext.w	d3
0000AA0A D443                       		add.w	d3,d2
0000AA0C 3629 000C                  		move.w	$C(a1),d3
0000AA10 9668 000C                  		sub.w	$C(a0),d3
0000AA14 D642                       		add.w	d2,d3
0000AA16 6B00                       		bmi.s	loc_A4E6
0000AA18 D442                       		add.w	d2,d2
0000AA1A B642                       		cmp.w	d2,d3
0000AA1C 6400                       		bcc.s	loc_A4E6
0000AA1E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AA22 6B00                       		bmi.s	loc_A4E6
0000AA24 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AA2A 6400                       		bcc.s	loc_A4E6
0000AA2C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AA30 6600                       		bne.s	loc_A4E6
0000AA32 B240                       		cmp.w	d0,d1
0000AA34 6400                       		bcc.s	loc_A4DC
0000AA36 D241                       		add.w	d1,d1
0000AA38 9041                       		sub.w	d1,d0
0000AA3A                            
0000AA3A                            loc_A4DC:
0000AA3A 0C43 0010                  		cmpi.w	#$10,d3
0000AA3E 6500                       		bcs.s	loc_A4EA
0000AA40                            
0000AA40                            loc_A4E2:
0000AA40 7201                       		moveq	#1,d1
0000AA42 4E75                       		rts	
0000AA44                            ; ===========================================================================
0000AA44                            
0000AA44                            loc_A4E6:
0000AA44 7200                       		moveq	#0,d1
0000AA46 4E75                       		rts	
0000AA48                            ; ===========================================================================
0000AA48                            
0000AA48                            loc_A4EA:
0000AA48 7200                       		moveq	#0,d1
0000AA4A 1228 0019                  		move.b	$19(a0),d1
0000AA4E 5841                       		addq.w	#4,d1
0000AA50 3401                       		move.w	d1,d2
0000AA52 D442                       		add.w	d2,d2
0000AA54 D269 0008                  		add.w	8(a1),d1
0000AA58 9268 0008                  		sub.w	8(a0),d1
0000AA5C 6BE2                       		bmi.s	loc_A4E2
0000AA5E B242                       		cmp.w	d2,d1
0000AA60 64DE                       		bcc.s	loc_A4E2
0000AA62 72FF                       		moveq	#-1,d1
0000AA64 4E75                       		rts	
0000AA66                            ; End of function Obj26_SolidSides
0000AA66                            
0000AA66                            ; ===========================================================================
0000AA66                            Ani_obj26:
0000AA66                            	include "_anim\obj26.asm"
0000AA66                            ; ---------------------------------------------------------------------------
0000AA66                            ; Animation script - monitors
0000AA66                            ; ---------------------------------------------------------------------------
0000AA66 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AA6C 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AA72 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AA78 0000                       		dc.w byte_A582-Ani_obj26
0000AA7A 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AA80 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AA8C 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AA98 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AAA4 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AAB0 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AABC 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AAC8 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AAD4 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AAE0 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AAE8                            		even
0000AAE8                            		even
0000AAE8                            
0000AAE8                            ; ---------------------------------------------------------------------------
0000AAE8                            ; Sprite mappings - monitors
0000AAE8                            ; ---------------------------------------------------------------------------
0000AAE8                            Map_obj26:
0000AAE8                            	include "_maps\obj26.asm"
0000AAE8                            ; ================================================================================
0000AAE8                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AAE8                            ; ================================================================================
0000AAE8                            
0000AAE8                            DATAY1U343IF3L:
0000AAE8 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AAEC 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AAF0 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AAF4 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AAF8 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AAFC 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AB00 05                         DATAY1U343IF3L_0: dc.b $5
0000AB01 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB06 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB0B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB10 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB15 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB1A 06                         DATAY1U343IF3L_1: dc.b $6
0000AB1B F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AB20 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB25 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB2A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB2F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB34 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB39 05                         DATAY1U343IF3L_2: dc.b $5
0000AB3A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB3F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB44 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB49 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB4E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB53 05                         DATAY1U343IF3L_3: dc.b $5
0000AB54 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB59 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB5E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB63 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB68 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB6D 06                         DATAY1U343IF3L_4: dc.b $6
0000AB6E F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AB73 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB78 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB7D E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB82 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB87 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB8C 06                         DATAY1U343IF3L_5: dc.b $6
0000AB8D F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AB92 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB97 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB9C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABA1 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ABA6 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ABAB 06                         DATAY1U343IF3L_6: dc.b $6
0000ABAC F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000ABB1 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ABB6 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ABBB E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABC0 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ABC5 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ABCA 06                         DATAY1U343IF3L_7: dc.b $6
0000ABCB F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000ABD0 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ABD5 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ABDA E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABDF 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ABE4 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ABE9 06                         DATAY1U343IF3L_8: dc.b $6
0000ABEA F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000ABEF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ABF4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ABF9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABFE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC03 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC08 06                         DATAY1U343IF3L_9: dc.b $6
0000AC09 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AC0E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC13 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC18 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC1D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC22 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC27 05                         DATAY1U343IF3L_A: dc.b $5
0000AC28 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC2D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC32 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC37 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC3C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC41 01                         DATAY1U343IF3L_B: dc.b $1
0000AC42 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AC48 00                         	even
0000AC48 00                         	even
0000AC48                            
0000AC48                            ; ===========================================================================
0000AC48                            ; ---------------------------------------------------------------------------
0000AC48                            ; Object 0E - Sonic on the title screen
0000AC48                            ; ---------------------------------------------------------------------------
0000AC48                            
0000AC48                            Obj0E:					; XREF: Obj_Index
0000AC48 7000                       		moveq	#0,d0
0000AC4A 1028 0024                  		move.b	$24(a0),d0
0000AC4E 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AC52 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AC56                            ; ===========================================================================
0000AC56 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AC58 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AC5A 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AC5C 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AC5E                            ; ===========================================================================
0000AC5E                            
0000AC5E                            Obj0E_Main:				; XREF: Obj0E_Index
0000AC5E 5428 0024                  		addq.b	#2,$24(a0)
0000AC62 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AC68 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AC6E 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AC76 317C 2300 0002             		move.w	#$2300,2(a0)
0000AC7C 117C 0001 0018             		move.b	#1,$18(a0)
0000AC82 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AC88 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AC8E 6100 0000                  		bsr.w	AnimateSprite
0000AC92                            
0000AC92                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AC92 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AC96 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AC98 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AC9C 6000 0000                  		bra.w	DisplaySprite
0000ACA0                            ; ===========================================================================
0000ACA0                            
0000ACA0                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000ACA0 4E75                       		rts	
0000ACA2                            ; ===========================================================================
0000ACA2                            
0000ACA2                            Obj0E_Move:				; XREF: Obj0E_Index
0000ACA2 5168 000A                  		subq.w	#8,$A(a0)
0000ACA6 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000ACAC 6600                       		bne.s	Obj0E_Display
0000ACAE 5428 0024                  		addq.b	#2,$24(a0)
0000ACB2                            
0000ACB2                            Obj0E_Display:
0000ACB2 6000 0000                  		bra.w	DisplaySprite
0000ACB6                            ; ===========================================================================
0000ACB6 4E75                       		rts	
0000ACB8                            ; ===========================================================================
0000ACB8                            
0000ACB8                            Obj0E_Animate:				; XREF: Obj0E_Index
0000ACB8 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ACBE 6100 0000                  		bsr.w	AnimateSprite
0000ACC2 6000 0000                  		bra.w	DisplaySprite
0000ACC6                            ; ===========================================================================
0000ACC6 4E75                       		rts	
0000ACC8                            ; ===========================================================================
0000ACC8                            ; ---------------------------------------------------------------------------
0000ACC8                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000ACC8                            ; ---------------------------------------------------------------------------
0000ACC8                            
0000ACC8                            Obj0F:					; XREF: Obj_Index
0000ACC8 7000                       		moveq	#0,d0
0000ACCA 1028 0024                  		move.b	$24(a0),d0
0000ACCE 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000ACD2 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000ACD6 6000 0000                  		bra.w	DisplaySprite
0000ACDA                            ; ===========================================================================
0000ACDA 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000ACDC 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000ACDE 0000                       		dc.w locret_A6F8-Obj0F_Index
0000ACE0                            ; ===========================================================================
0000ACE0                            
0000ACE0                            Obj0F_Main:				; XREF: Obj0F_Index
0000ACE0 5428 0024                  		addq.b	#2,$24(a0)
0000ACE4 317C 00D0 0008             		move.w	#$D0,8(a0)
0000ACEA 317C 0130 000A             		move.w	#$130,$A(a0)
0000ACF0 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000ACF8 317C 0200 0002             		move.w	#$200,2(a0)
0000ACFE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AD04 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AD06 5428 0024                  		addq.b	#2,$24(a0)
0000AD0A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AD10 6600                       		bne.s	locret_A6F8	; if not, branch
0000AD12 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AD18 317C 0170 0008             		move.w	#$170,8(a0)
0000AD1E 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AD24                            
0000AD24                            locret_A6F8:				; XREF: Obj0F_Index
0000AD24 4E75                       		rts	
0000AD26                            ; ===========================================================================
0000AD26                            
0000AD26                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AD26 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AD2C 6000 0000                  		bra.w	AnimateSprite
0000AD30                            ; ===========================================================================
0000AD30                            Ani_obj0E:
0000AD30                            	include "_anim\obj0E.asm"
0000AD30                            ; ---------------------------------------------------------------------------
0000AD30                            ; Animation script - Sonic on the title screen
0000AD30                            ; ---------------------------------------------------------------------------
0000AD30 0000                       		dc.w byte_A706-Ani_obj0E
0000AD32 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AD3E                            		even
0000AD3E                            		even
0000AD3E                            
0000AD3E                            Ani_obj0F:
0000AD3E                            	include "_anim\obj0F.asm"
0000AD3E                            ; ---------------------------------------------------------------------------
0000AD3E                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AD3E                            ; ---------------------------------------------------------------------------
0000AD3E 0000                       		dc.w byte_A714-Ani_obj0F
0000AD40 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AD44                            		even
0000AD44                            		even
0000AD44                            
0000AD44                            ; ---------------------------------------------------------------------------
0000AD44                            ; Subroutine to	animate	a sprite using an animation script
0000AD44                            ; ---------------------------------------------------------------------------
0000AD44                            
0000AD44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD44                            
0000AD44                            
0000AD44                            AnimateSprite:
0000AD44 7000                       		moveq	#0,d0
0000AD46 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AD4A B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AD4E 6700                       		beq.s	Anim_Run	; if not, branch
0000AD50 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AD54 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AD5A 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AD60                            
0000AD60                            Anim_Run:
0000AD60 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AD64 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AD66 D040                       		add.w	d0,d0
0000AD68 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AD6C 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AD70 7200                       		moveq	#0,d1
0000AD72 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AD76 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AD7A 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AD7C                            
0000AD7C                            Anim_Next:
0000AD7C 1200                       		move.b	d0,d1
0000AD7E 0200 001F                  		andi.b	#$1F,d0
0000AD82 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AD86 1028 0022                  		move.b	$22(a0),d0
0000AD8A E719                       		rol.b	#3,d1
0000AD8C B101                       		eor.b	d0,d1
0000AD8E 0201 0003                  		andi.b	#3,d1
0000AD92 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AD98 8328 0001                  		or.b	d1,1(a0)
0000AD9C 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000ADA0                            
0000ADA0                            Anim_Wait:
0000ADA0 4E75                       		rts	
0000ADA2                            ; ===========================================================================
0000ADA2                            
0000ADA2                            Anim_End_FF:
0000ADA2 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000ADA4 6600                       		bne.s	Anim_End_FE	; if not, branch
0000ADA6 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000ADAC 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000ADB0 60CA                       		bra.s	Anim_Next
0000ADB2                            ; ===========================================================================
0000ADB2                            
0000ADB2                            Anim_End_FE:
0000ADB2 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000ADB4 6600                       		bne.s	Anim_End_FD	; if not, branch
0000ADB6 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000ADBA 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000ADBE 9200                       		sub.b	d0,d1
0000ADC0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000ADC4 60B6                       		bra.s	Anim_Next
0000ADC6                            ; ===========================================================================
0000ADC6                            
0000ADC6                            Anim_End_FD:
0000ADC6 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000ADC8 6600                       		bne.s	Anim_End_FC	; if not, branch
0000ADCA 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000ADD0                            
0000ADD0                            Anim_End_FC:
0000ADD0 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000ADD2 6600                       		bne.s	Anim_End_FB	; if not, branch
0000ADD4 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000ADD8                            
0000ADD8                            Anim_End_FB:
0000ADD8 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000ADDA 6600                       		bne.s	Anim_End_FA	; if not, branch
0000ADDC 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000ADE2 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000ADE6                            
0000ADE6                            Anim_End_FA:
0000ADE6 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000ADE8 6600                       		bne.s	Anim_End	; if not, branch
0000ADEA 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000ADEE                            
0000ADEE                            Anim_End:
0000ADEE 4E75                       		rts	
0000ADF0                            ; End of function AnimateSprite
0000ADF0                            
0000ADF0                            ; ===========================================================================
0000ADF0                            ; ---------------------------------------------------------------------------
0000ADF0                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ADF0                            ; ---------------------------------------------------------------------------
0000ADF0                            Map_obj0F:
0000ADF0                            	include "_maps\obj0F.asm"
0000ADF0                            ; ---------------------------------------------------------------------------
0000ADF0                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ADF0                            ; ---------------------------------------------------------------------------
0000ADF0 0000                       		dc.w byte_A7CD-Map_obj0F
0000ADF2 0000                       		dc.w byte_A7CC-Map_obj0F
0000ADF4 0000                       		dc.w byte_A7EB-Map_obj0F
0000ADF6 0000                       		dc.w byte_A882-Map_obj0F
0000ADF8 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000ADF9 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000ADFE 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AE03 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AE08 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AE0D 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AE12 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AE17 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AE18 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE1D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE22 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE27 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE2C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE31 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE36 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE3B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE40 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE45 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE4A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AE4F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AE54 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AE59 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AE5E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AE63 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AE68 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AE6D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AE72 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AE77 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AE7C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE81 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE86 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE8B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE90 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE95 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE9A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE9F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEA4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEA9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEAE 01                         byte_A882:	dc.b 1			; "TM"
0000AEAF FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AEB4                            		even
0000AEB4                            		even
0000AEB4                            
0000AEB4                            ; ---------------------------------------------------------------------------
0000AEB4                            ; Sprite mappings - Sonic on the title screen
0000AEB4                            ; ---------------------------------------------------------------------------
0000AEB4                            Map_obj0E:
0000AEB4                            	include "_maps\obj0E.asm"
0000AEB4                            ; ================================================================================
0000AEB4                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000AEB4                            ; ================================================================================
0000AEB4                            
0000AEB4                            DATAGKI0HYDQBXP:
0000AEB4 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000AEB8 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000AEBC 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000AEC0 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000AEC4 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000AEC5 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000AECA 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000AECF 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000AED4 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000AED9 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000AEDE 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000AEE3 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000AEE8 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000AEED 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000AEEE 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000AEF3 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000AEF8 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000AEFD 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000AF02 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000AF07 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000AF0C 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000AF11 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000AF16 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000AF1B 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000AF20 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000AF25 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000AF26 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000AF2B F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000AF30 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000AF35 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000AF3A 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000AF3F 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000AF44 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000AF49 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000AF4E 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000AF53 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000AF58 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000AF5D 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000AF5E FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000AF63 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000AF68 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000AF6D 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000AF72 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000AF77 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000AF7C 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000AF81 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000AF86 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000AF8B 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000AF90 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000AF91 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000AF96 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000AF9B 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000AFA0 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000AFA5 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000AFAA 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000AFAF 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000AFB4 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000AFB9 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000AFBE 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000AFC3 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000AFC8 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000AFCD 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000AFD2 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000AFD7 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000AFDC 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000AFE1 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000AFE2 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000AFE7 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000AFEC 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000AFF1 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000AFF6 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000AFFB 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B000 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B005 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B00A 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B00F 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B014 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B019 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B01A EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B01F 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B024 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B029 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B02E 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B033 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B038 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B03D 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B042 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B047 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B04C 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B051 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B056 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B05B 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B060 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B065 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B066 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B06B 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B070 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B075 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B07A 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B07F 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B084 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B089 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B08E 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B093 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B098 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B09D 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B0A2 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B0A7 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B0AC 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B0B2 00                         	even
0000B0B2 00                         	even
0000B0B2                            
0000B0B2                            ; ===========================================================================
0000B0B2                            ; ---------------------------------------------------------------------------
0000B0B2                            ; Object 2B - Chopper enemy (GHZ)
0000B0B2                            ; ---------------------------------------------------------------------------
0000B0B2                            
0000B0B2                            Obj2B:					; XREF: Obj_Index
0000B0B2 7000                       		moveq	#0,d0
0000B0B4 1028 0024                  		move.b	$24(a0),d0
0000B0B8 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B0BC 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B0C0 6000 0000                  		bra.w	MarkObjGone
0000B0C4                            ; ===========================================================================
0000B0C4 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B0C6 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B0C8                            ; ===========================================================================
0000B0C8                            
0000B0C8                            Obj2B_Main:				; XREF: Obj2B_Index
0000B0C8 5428 0024                  		addq.b	#2,$24(a0)
0000B0CC 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B0D4 317C 047B 0002             		move.w	#$47B,2(a0)
0000B0DA 117C 0004 0001             		move.b	#4,1(a0)
0000B0E0 117C 0004 0018             		move.b	#4,$18(a0)
0000B0E6 117C 0009 0020             		move.b	#9,$20(a0)
0000B0EC 117C 0010 0019             		move.b	#$10,$19(a0)
0000B0F2 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B0F8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B0FE                            
0000B0FE                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B0FE 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B104 6100 FC3E                  		bsr.w	AnimateSprite
0000B108 6100 0000                  		bsr.w	SpeedToPos
0000B10C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B112 3028 0030                  		move.w	$30(a0),d0
0000B116 B068 000C                  		cmp.w	$C(a0),d0
0000B11A 6400                       		bcc.s	Obj2B_ChgAni
0000B11C 3140 000C                  		move.w	d0,$C(a0)
0000B120 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B126                            
0000B126                            Obj2B_ChgAni:
0000B126 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B12C 0440 00C0                  		subi.w	#$C0,d0
0000B130 B068 000C                  		cmp.w	$C(a0),d0
0000B134 6400                       		bcc.s	locret_ABB6
0000B136 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B13C 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B140 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B142 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B148                            
0000B148                            locret_ABB6:
0000B148 4E75                       		rts	
0000B14A                            ; ===========================================================================
0000B14A                            Ani_obj2B:
0000B14A                            	include "_anim\obj2B.asm"
0000B14A                            ; ---------------------------------------------------------------------------
0000B14A                            ; Animation script - Chopper enemy
0000B14A                            ; ---------------------------------------------------------------------------
0000B14A 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B14C 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B14E 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B150 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B154 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B158 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B15C 00                         		even
0000B15C 00                         		even
0000B15C                            
0000B15C                            ; ---------------------------------------------------------------------------
0000B15C                            ; Sprite mappings - Chopper enemy (GHZ)
0000B15C                            ; ---------------------------------------------------------------------------
0000B15C                            Map_obj2B:
0000B15C                            	include "_maps\obj2B.asm"
0000B15C                            Map_1ff1:
0000B15C 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B15E 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B160 02                         Map_1ff1_4: 	dc.b $2
0000B161 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B166 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B16B 02                         Map_1ff1_F: 	dc.b $2
0000B16C E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B171 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B176                            	even
0000B176                            	even
0000B176                            
0000B176                            ; ===========================================================================
0000B176                            ; ---------------------------------------------------------------------------
0000B176                            ; Object 2C - Jaws enemy (LZ)
0000B176                            ; ---------------------------------------------------------------------------
0000B176                            
0000B176                            Obj2C:					; XREF: Obj_Index
0000B176 7000                       		moveq	#0,d0
0000B178 1028 0024                  		move.b	$24(a0),d0
0000B17C 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B180 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B184                            ; ===========================================================================
0000B184 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B186 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B188                            ; ===========================================================================
0000B188                            
0000B188                            Obj2C_Main:				; XREF: Obj2C_Index
0000B188 5428 0024                  		addq.b	#2,$24(a0)
0000B18C 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B194 317C 2486 0002             		move.w	#$2486,2(a0)
0000B19A 0028 0004 0001             		ori.b	#4,1(a0)
0000B1A0 117C 000A 0020             		move.b	#$A,$20(a0)
0000B1A6 117C 0004 0018             		move.b	#4,$18(a0)
0000B1AC 117C 0010 0019             		move.b	#$10,$19(a0)
0000B1B2 7000                       		moveq	#0,d0
0000B1B4 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B1B8 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B1BA 5340                       		subq.w	#1,d0
0000B1BC 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B1C0 3140 0032                  		move.w	d0,$32(a0)
0000B1C4 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B1CA 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B1D0 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B1D2 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B1D6                            
0000B1D6                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B1D6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B1DA 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B1DC 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B1E2 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B1E6 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B1EC 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B1F2                            
0000B1F2                            Obj2C_Animate:
0000B1F2 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B1F8 6100 FB4A                  		bsr.w	AnimateSprite
0000B1FC 6100 0000                  		bsr.w	SpeedToPos
0000B200 6000 0000                  		bra.w	MarkObjGone
0000B204                            ; ===========================================================================
0000B204                            Ani_obj2C:
0000B204                            	include "_anim\obj2C.asm"
0000B204                            ; ---------------------------------------------------------------------------
0000B204                            ; Animation script - Jaws enemy
0000B204                            ; ---------------------------------------------------------------------------
0000B204 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B206 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B20C                            		even
0000B20C                            		even
0000B20C                            
0000B20C                            ; ---------------------------------------------------------------------------
0000B20C                            ; Sprite mappings - Jaws enemy (LZ)
0000B20C                            ; ---------------------------------------------------------------------------
0000B20C                            Map_obj2C:
0000B20C                            	include "_maps\obj2C.asm"
0000B20C                            ; ---------------------------------------------------------------------------
0000B20C                            ; Sprite mappings - Jaws enemy (LZ)
0000B20C                            ; ---------------------------------------------------------------------------
0000B20C 0000                       		dc.w byte_AC78-Map_obj2C
0000B20E 0000                       		dc.w byte_AC83-Map_obj2C
0000B210 0000                       		dc.w byte_AC8E-Map_obj2C
0000B212 0000                       		dc.w byte_AC99-Map_obj2C
0000B214 02                         byte_AC78:	dc.b 2
0000B215 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B21A F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B21F 02                         byte_AC83:	dc.b 2
0000B220 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B225 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B22A 02                         byte_AC8E:	dc.b 2
0000B22B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B230 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B235 02                         byte_AC99:	dc.b 2
0000B236 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B23B F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B240                            		even
0000B240                            		even
0000B240                            
0000B240                            ; ===========================================================================
0000B240                            ; ---------------------------------------------------------------------------
0000B240                            ; Object 2D - Burrobot enemy (LZ)
0000B240                            ; ---------------------------------------------------------------------------
0000B240                            
0000B240                            Obj2D:					; XREF: Obj_Index
0000B240 7000                       		moveq	#0,d0
0000B242 1028 0024                  		move.b	$24(a0),d0
0000B246 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B24A 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B24E                            ; ===========================================================================
0000B24E 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B250 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B252                            ; ===========================================================================
0000B252                            
0000B252                            Obj2D_Main:				; XREF: Obj2D_Index
0000B252 5428 0024                  		addq.b	#2,$24(a0)
0000B256 117C 0013 0016             		move.b	#$13,$16(a0)
0000B25C 117C 0008 0017             		move.b	#8,$17(a0)
0000B262 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B26A 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B270 0028 0004 0001             		ori.b	#4,1(a0)
0000B276 117C 0004 0018             		move.b	#4,$18(a0)
0000B27C 117C 0005 0020             		move.b	#5,$20(a0)
0000B282 117C 000C 0019             		move.b	#$C,$19(a0)
0000B288 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B28C 117C 0002 001C             		move.b	#2,$1C(a0)
0000B292                            
0000B292                            Obj2D_Action:				; XREF: Obj2D_Index
0000B292 7000                       		moveq	#0,d0
0000B294 1028 0025                  		move.b	$25(a0),d0
0000B298 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B29C 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B2A0 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B2A6 6100 FA9C                  		bsr.w	AnimateSprite
0000B2AA 6000 0000                  		bra.w	MarkObjGone
0000B2AE                            ; ===========================================================================
0000B2AE 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B2B0 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B2B2 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B2B4 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B2B6                            ; ===========================================================================
0000B2B6                            
0000B2B6                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B2B6 5368 0030                  		subq.w	#1,$30(a0)
0000B2BA 6A00                       		bpl.s	locret_AD42
0000B2BC 5428 0025                  		addq.b	#2,$25(a0)
0000B2C0 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B2C6 317C 0080 0010             		move.w	#$80,$10(a0)
0000B2CC 117C 0001 001C             		move.b	#1,$1C(a0)
0000B2D2 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B2D8 6700                       		beq.s	locret_AD42
0000B2DA 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B2DE                            
0000B2DE                            locret_AD42:
0000B2DE 4E75                       		rts	
0000B2E0                            ; ===========================================================================
0000B2E0                            
0000B2E0                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B2E0 5368 0030                  		subq.w	#1,$30(a0)
0000B2E4 6B00                       		bmi.s	loc_AD84
0000B2E6 6100 0000                  		bsr.w	SpeedToPos
0000B2EA 0868 0000 0032             		bchg	#0,$32(a0)
0000B2F0 6600                       		bne.s	loc_AD78
0000B2F2 3628 0008                  		move.w	8(a0),d3
0000B2F6 0643 000C                  		addi.w	#$C,d3
0000B2FA 0828 0000 0022             		btst	#0,$22(a0)
0000B300 6600                       		bne.s	loc_AD6A
0000B302 0443 0018                  		subi.w	#$18,d3
0000B306                            
0000B306                            loc_AD6A:
0000B306 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B30C 0C41 000C                  		cmpi.w	#$C,d1
0000B310 6C00                       		bge.s	loc_AD84
0000B312 4E75                       		rts	
0000B314                            ; ===========================================================================
0000B314                            
0000B314                            loc_AD78:				; XREF: Obj2D_Move
0000B314 4EB9 0000 0000             		jsr	ObjHitFloor
0000B31A D368 000C                  		add.w	d1,$C(a0)
0000B31E 4E75                       		rts	
0000B320                            ; ===========================================================================
0000B320                            
0000B320                            loc_AD84:				; XREF: Obj2D_Move
0000B320 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B326 6700                       		beq.s	loc_ADA4
0000B328 5528 0025                  		subq.b	#2,$25(a0)
0000B32C 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B332 317C 0000 0010             		move.w	#0,$10(a0)
0000B338 117C 0000 001C             		move.b	#0,$1C(a0)
0000B33E 4E75                       		rts	
0000B340                            ; ===========================================================================
0000B340                            
0000B340                            loc_ADA4:
0000B340 5428 0025                  		addq.b	#2,$25(a0)
0000B344 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B34A 117C 0002 001C             		move.b	#2,$1C(a0)
0000B350 4E75                       		rts	
0000B352                            ; ===========================================================================
0000B352                            
0000B352                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B352 6100 0000                  		bsr.w	SpeedToPos
0000B356 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B35C 6B00                       		bmi.s	locret_ADF0
0000B35E 117C 0003 001C             		move.b	#3,$1C(a0)
0000B364 4EB9 0000 0000             		jsr	ObjHitFloor
0000B36A 4A41                       		tst.w	d1
0000B36C 6A00                       		bpl.s	locret_ADF0
0000B36E D368 000C                  		add.w	d1,$C(a0)
0000B372 317C 0000 0012             		move.w	#0,$12(a0)
0000B378 117C 0001 001C             		move.b	#1,$1C(a0)
0000B37E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B384 5528 0025                  		subq.b	#2,$25(a0)
0000B388 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B38C                            
0000B38C                            locret_ADF0:
0000B38C 4E75                       		rts	
0000B38E                            ; ===========================================================================
0000B38E                            
0000B38E                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B38E 343C 0060                  		move.w	#$60,d2
0000B392 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B396 6400                       		bcc.s	locret_AE20
0000B398 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B39C 9068 000C                  		sub.w	$C(a0),d0
0000B3A0 6400                       		bcc.s	locret_AE20
0000B3A2 0C40 FF80                  		cmpi.w	#-$80,d0
0000B3A6 6500                       		bcs.s	locret_AE20
0000B3A8 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B3AC 6600                       		bne.s	locret_AE20
0000B3AE 5528 0025                  		subq.b	#2,$25(a0)
0000B3B2 3141 0010                  		move.w	d1,$10(a0)
0000B3B6 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B3BC                            
0000B3BC                            locret_AE20:
0000B3BC 4E75                       		rts	
0000B3BE                            
0000B3BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B3BE                            
0000B3BE                            
0000B3BE                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B3BE 323C 0080                  		move.w	#$80,d1
0000B3C2 08E8 0000 0022             		bset	#0,$22(a0)
0000B3C8 3038 D008                  		move.w	($FFFFD008).w,d0
0000B3CC 9068 0008                  		sub.w	8(a0),d0
0000B3D0 6400                       		bcc.s	loc_AE40
0000B3D2 4440                       		neg.w	d0
0000B3D4 4441                       		neg.w	d1
0000B3D6 08A8 0000 0022             		bclr	#0,$22(a0)
0000B3DC                            
0000B3DC                            loc_AE40:
0000B3DC B042                       		cmp.w	d2,d0
0000B3DE 4E75                       		rts	
0000B3E0                            ; End of function Obj2D_ChkSonic2
0000B3E0                            
0000B3E0                            ; ===========================================================================
0000B3E0                            Ani_obj2D:
0000B3E0                            	include "_anim\obj2D.asm"
0000B3E0                            ; ---------------------------------------------------------------------------
0000B3E0                            ; Animation script - Burrobot enemy but craig
0000B3E0                            ; ---------------------------------------------------------------------------
0000B3E0 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B3E2 0000                       		dc.w byte_AE50-Ani_obj2D
0000B3E4 0000                       		dc.w byte_AE54-Ani_obj2D
0000B3E6 0000                       		dc.w byte_AE58-Ani_obj2D
0000B3E8 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B3EB 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B3EF 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B3FD 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B400                            		even
0000B400                            		even
0000B400                            
0000B400                            ; ---------------------------------------------------------------------------
0000B400                            ; Sprite mappings - Burrobot enemy (LZ)
0000B400                            ; ---------------------------------------------------------------------------
0000B400                            Map_obj2D:
0000B400                            	include "_maps\obj2D.asm"
0000B400                            Map_e3a3:
0000B400 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B402 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B404 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B406 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B408 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B40A 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B40C 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B40E 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B410 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B412 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B414 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B416 02                         Map_e3a3_16: 	dc.b $2
0000B417 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B41C 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B421 02                         Map_e3a3_21: 	dc.b $2
0000B422 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B427 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B42C 02                         Map_e3a3_2C: 	dc.b $2
0000B42D EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B432 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B437 02                         Map_e3a3_37: 	dc.b $2
0000B438 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B43D FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B442 02                         Map_e3a3_42: 	dc.b $2
0000B443 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B448 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B44D 02                         Map_e3a3_4D: 	dc.b $2
0000B44E EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B453 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B458 02                         Map_e3a3_58: 	dc.b $2
0000B459 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B45E FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B463 02                         Map_e3a3_63: 	dc.b $2
0000B464 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B469 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B46E 02                         Map_e3a3_6E: 	dc.b $2
0000B46F EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B474 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B479 02                         Map_e3a3_79: 	dc.b $2
0000B47A EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B47F 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B484 02                         Map_e3a3_84: 	dc.b $2
0000B485 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B48A 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B490 00                         	even
0000B490 00                         	even
0000B490                            
0000B490                            ; ===========================================================================
0000B490                            ; ---------------------------------------------------------------------------
0000B490                            ; Object 2F - large moving platforms (MZ)
0000B490                            ; ---------------------------------------------------------------------------
0000B490                            
0000B490                            Obj2F:					; XREF: Obj_Index
0000B490 7000                       		moveq	#0,d0
0000B492 1028 0024                  		move.b	$24(a0),d0
0000B496 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B49A 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B49E                            ; ===========================================================================
0000B49E 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B4A0 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B4A2                            
0000B4A2 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B4A4 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B4A6 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B4A8 0140                       		dc.b 1,	$40
0000B4AA 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B4AC 0220                       		dc.b 2,	$20
0000B4AE                            ; ===========================================================================
0000B4AE                            
0000B4AE                            Obj2F_Main:				; XREF: Obj2F_Index
0000B4AE 5428 0024                  		addq.b	#2,$24(a0)
0000B4B2 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B4BA 317C C000 0002             		move.w	#$C000,2(a0)
0000B4C0 117C 0004 0001             		move.b	#4,1(a0)
0000B4C6 117C 0005 0018             		move.b	#5,$18(a0)
0000B4CC 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B4D2 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B4D8 7000                       		moveq	#0,d0
0000B4DA 1028 0028                  		move.b	$28(a0),d0
0000B4DE E448                       		lsr.w	#2,d0
0000B4E0 0240 001C                  		andi.w	#$1C,d0
0000B4E4 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B4E8 3019                       		move.w	(a1)+,d0
0000B4EA 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B4EE 214A 0030                  		move.l	a2,$30(a0)
0000B4F2 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B4F6 1151 0019                  		move.b	(a1),$19(a0)
0000B4FA 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B500 117C 0040 0016             		move.b	#$40,$16(a0)
0000B506 08E8 0004 0001             		bset	#4,1(a0)
0000B50C                            
0000B50C                            Obj2F_Action:				; XREF: Obj2F_Index
0000B50C 6100 0000                  		bsr.w	Obj2F_Types
0000B510 4A28 0025                  		tst.b	$25(a0)
0000B514 6700                       		beq.s	Obj2F_Solid
0000B516 7200                       		moveq	#0,d1
0000B518 1228 0019                  		move.b	$19(a0),d1
0000B51C 0641 000B                  		addi.w	#$B,d1
0000B520 6100 C5F2                  		bsr.w	ExitPlatform
0000B524 0829 0003 0022             		btst	#3,$22(a1)
0000B52A 6600 0000                  		bne.w	Obj2F_Slope
0000B52E 4228 0025                  		clr.b	$25(a0)
0000B532 6000                       		bra.s	Obj2F_Display
0000B534                            ; ===========================================================================
0000B534                            
0000B534                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B534 7200                       		moveq	#0,d1
0000B536 1228 0019                  		move.b	$19(a0),d1
0000B53A 0641 000B                  		addi.w	#$B,d1
0000B53E 2468 0030                  		movea.l	$30(a0),a2
0000B542 3428 0008                  		move.w	8(a0),d2
0000B546 6100 D52A                  		bsr.w	SlopeObject2
0000B54A 6000                       		bra.s	Obj2F_Display
0000B54C                            ; ===========================================================================
0000B54C                            
0000B54C                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B54C 7200                       		moveq	#0,d1
0000B54E 1228 0019                  		move.b	$19(a0),d1
0000B552 0641 000B                  		addi.w	#$B,d1
0000B556 343C 0020                  		move.w	#$20,d2
0000B55A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B560 6600                       		bne.s	loc_AF8E
0000B562 343C 0030                  		move.w	#$30,d2
0000B566                            
0000B566                            loc_AF8E:
0000B566 2468 0030                  		movea.l	$30(a0),a2
0000B56A 6100 0000                  		bsr.w	SolidObject2F
0000B56E                            
0000B56E                            Obj2F_Display:				; XREF: Obj2F_Action
0000B56E 6100 0000                  		bsr.w	DisplaySprite
0000B572 6000 0000                  		bra.w	Obj2F_ChkDel
0000B576                            
0000B576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B576                            
0000B576                            
0000B576                            Obj2F_Types:				; XREF: Obj2F_Action
0000B576 7000                       		moveq	#0,d0
0000B578 1028 0028                  		move.b	$28(a0),d0
0000B57C 0240 0007                  		andi.w	#7,d0
0000B580 D040                       		add.w	d0,d0
0000B582 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B586 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B58A                            ; End of function Obj2F_Types
0000B58A                            
0000B58A                            ; ===========================================================================
0000B58A 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B58C 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B58E 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B590 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B592 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B594 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B596                            ; ===========================================================================
0000B596                            
0000B596                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B596 4E75                       		rts			; type 00 platform doesn't move
0000B598                            ; ===========================================================================
0000B598                            
0000B598                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B598 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B59C 323C 0020                  		move.w	#$20,d1
0000B5A0 6000                       		bra.s	Obj2F_Move
0000B5A2                            ; ===========================================================================
0000B5A2                            
0000B5A2                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B5A2 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B5A6 323C 0030                  		move.w	#$30,d1
0000B5AA 6000                       		bra.s	Obj2F_Move
0000B5AC                            ; ===========================================================================
0000B5AC                            
0000B5AC                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B5AC 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B5B0 323C 0040                  		move.w	#$40,d1
0000B5B4 6000                       		bra.s	Obj2F_Move
0000B5B6                            ; ===========================================================================
0000B5B6                            
0000B5B6                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B5B6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B5BA 323C 0060                  		move.w	#$60,d1
0000B5BE                            
0000B5BE                            Obj2F_Move:
0000B5BE 0828 0003 0028             		btst	#3,$28(a0)
0000B5C4 6700                       		beq.s	loc_AFF2
0000B5C6 4440                       		neg.w	d0
0000B5C8 D041                       		add.w	d1,d0
0000B5CA                            
0000B5CA                            loc_AFF2:
0000B5CA 3228 002C                  		move.w	$2C(a0),d1
0000B5CE 9240                       		sub.w	d0,d1
0000B5D0 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B5D4 4E75                       		rts	
0000B5D6                            ; ===========================================================================
0000B5D6                            
0000B5D6                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B5D6 1028 0034                  		move.b	$34(a0),d0
0000B5DA 4A28 0025                  		tst.b	$25(a0)
0000B5DE 6600                       		bne.s	loc_B010
0000B5E0 5500                       		subq.b	#2,d0
0000B5E2 6400                       		bcc.s	loc_B01C
0000B5E4 7000                       		moveq	#0,d0
0000B5E6 6000                       		bra.s	loc_B01C
0000B5E8                            ; ===========================================================================
0000B5E8                            
0000B5E8                            loc_B010:
0000B5E8 5800                       		addq.b	#4,d0
0000B5EA 0C00 0040                  		cmpi.b	#$40,d0
0000B5EE 6500                       		bcs.s	loc_B01C
0000B5F0 103C 0040                  		move.b	#$40,d0
0000B5F4                            
0000B5F4                            loc_B01C:
0000B5F4 1140 0034                  		move.b	d0,$34(a0)
0000B5F8 4EB9 0000 2C64             		jsr	(CalcSine).l
0000B5FE E848                       		lsr.w	#4,d0
0000B600 3200                       		move.w	d0,d1
0000B602 D068 002C                  		add.w	$2C(a0),d0
0000B606 3140 000C                  		move.w	d0,$C(a0)
0000B60A 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B610 6600                       		bne.s	loc_B07A
0000B612 4A28 0035                  		tst.b	$35(a0)
0000B616 6600                       		bne.s	loc_B07A
0000B618 117C 0001 0035             		move.b	#1,$35(a0)
0000B61E 6100 0000                  		bsr.w	SingleObjLoad2
0000B622 6600                       		bne.s	loc_B07A
0000B624 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B628 3368 0008 0008             		move.w	8(a0),8(a1)
0000B62E 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B634 5069 002C                  		addq.w	#8,$2C(a1)
0000B638 5769 002C                  		subq.w	#3,$2C(a1)
0000B63C 0469 0040 0008             		subi.w	#$40,8(a1)
0000B642 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B648 2348 0038                  		move.l	a0,$38(a1)
0000B64C 2448                       		movea.l	a0,a2
0000B64E 6100                       		bsr.s	sub_B09C
0000B650                            
0000B650                            loc_B07A:
0000B650 7400                       		moveq	#0,d2
0000B652 45E8 0036                  		lea	$36(a0),a2
0000B656 141A                       		move.b	(a2)+,d2
0000B658 5302                       		subq.b	#1,d2
0000B65A 6500                       		bcs.s	locret_B09A
0000B65C                            
0000B65C                            loc_B086:
0000B65C 7000                       		moveq	#0,d0
0000B65E 101A                       		move.b	(a2)+,d0
0000B660 ED48                       		lsl.w	#6,d0
0000B662 0640 D000                  		addi.w	#-$3000,d0
0000B666 3240                       		movea.w	d0,a1
0000B668 3341 003C                  		move.w	d1,$3C(a1)
0000B66C 51CA FFEE                  		dbf	d2,loc_B086
0000B670                            
0000B670                            locret_B09A:
0000B670 4E75                       		rts	
0000B672                            
0000B672                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B672                            
0000B672                            
0000B672                            sub_B09C:
0000B672 45EA 0036                  		lea	$36(a2),a2
0000B676 7000                       		moveq	#0,d0
0000B678 1012                       		move.b	(a2),d0
0000B67A 5212                       		addq.b	#1,(a2)
0000B67C 45F2 0001                  		lea	1(a2,d0.w),a2
0000B680 3009                       		move.w	a1,d0
0000B682 0440 D000                  		subi.w	#-$3000,d0
0000B686 EC48                       		lsr.w	#6,d0
0000B688 0240 007F                  		andi.w	#$7F,d0
0000B68C 1480                       		move.b	d0,(a2)
0000B68E 4E75                       		rts	
0000B690                            ; End of function sub_B09C
0000B690                            
0000B690                            ; ===========================================================================
0000B690                            
0000B690                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B690 4A28 0035                  		tst.b	$35(a0)
0000B694 6700                       		beq.s	loc_B0C6
0000B696 4A28 0001                  		tst.b	1(a0)
0000B69A 6A00                       		bpl.s	Obj2F_DelFlames
0000B69C                            
0000B69C                            loc_B0C6:
0000B69C 3028 002A                  		move.w	$2A(a0),d0
0000B6A0 0240 FF80                  		andi.w	#$FF80,d0
0000B6A4 3238 F700                  		move.w	($FFFFF700).w,d1
0000B6A8 0441 0080                  		subi.w	#$80,d1
0000B6AC 0241 FF80                  		andi.w	#$FF80,d1
0000B6B0 9041                       		sub.w	d1,d0
0000B6B2 0C40 0280                  		cmpi.w	#$280,d0
0000B6B6 6200 0000                  		bhi.w	DeleteObject
0000B6BA 4E75                       		rts	
0000B6BC                            ; ===========================================================================
0000B6BC                            
0000B6BC                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B6BC 7400                       		moveq	#0,d2
0000B6BE                            
0000B6BE                            loc_B0E8:
0000B6BE 45E8 0036                  		lea	$36(a0),a2
0000B6C2 1412                       		move.b	(a2),d2
0000B6C4 421A                       		clr.b	(a2)+
0000B6C6 5302                       		subq.b	#1,d2
0000B6C8 6500                       		bcs.s	locret_B116
0000B6CA                            
0000B6CA                            loc_B0F4:
0000B6CA 7000                       		moveq	#0,d0
0000B6CC 1012                       		move.b	(a2),d0
0000B6CE 421A                       		clr.b	(a2)+
0000B6D0 ED48                       		lsl.w	#6,d0
0000B6D2 0640 D000                  		addi.w	#-$3000,d0
0000B6D6 3240                       		movea.w	d0,a1
0000B6D8 6100 0000                  		bsr.w	DeleteObject2
0000B6DC 51CA FFEC                  		dbf	d2,loc_B0F4
0000B6E0 117C 0000 0035             		move.b	#0,$35(a0)
0000B6E6 117C 0000 0034             		move.b	#0,$34(a0)
0000B6EC                            
0000B6EC                            locret_B116:
0000B6EC 4E75                       		rts	
0000B6EE                            ; ===========================================================================
0000B6EE                            ; ---------------------------------------------------------------------------
0000B6EE                            ; Collision data for large moving platforms (MZ)
0000B6EE                            ; ---------------------------------------------------------------------------
0000B6EE                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B73A                            		even
0000B73A                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B766                            		even
0000B766                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B7B2                            		even
0000B7B2                            ; ===========================================================================
0000B7B2                            ; ---------------------------------------------------------------------------
0000B7B2                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B7B2                            ; (appears when	you walk on sinking platforms)
0000B7B2                            ; ---------------------------------------------------------------------------
0000B7B2                            
0000B7B2                            Obj35:					; XREF: Obj_Index
0000B7B2 7000                       		moveq	#0,d0
0000B7B4 1028 0024                  		move.b	$24(a0),d0
0000B7B8 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B7BC 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B7C0                            ; ===========================================================================
0000B7C0 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B7C2 0000                       		dc.w loc_B238-Obj35_Index
0000B7C4 0000                       		dc.w Obj35_Move-Obj35_Index
0000B7C6                            ; ===========================================================================
0000B7C6                            
0000B7C6                            Obj35_Main:				; XREF: Obj35_Index
0000B7C6 5428 0024                  		addq.b	#2,$24(a0)
0000B7CA 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B7D2 317C 0345 0002             		move.w	#$345,2(a0)
0000B7D8 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B7DE 117C 0004 0001             		move.b	#4,1(a0)
0000B7E4 117C 0001 0018             		move.b	#1,$18(a0)
0000B7EA 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B7F0 117C 0008 0019             		move.b	#8,$19(a0)
0000B7F6 303C 00C8                  		move.w	#$C8,d0
0000B7FA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000B800 4A28 0028                  		tst.b	$28(a0)
0000B804 6700                       		beq.s	loc_B238
0000B806 5428 0024                  		addq.b	#2,$24(a0)
0000B80A 6000 0000                  		bra.w	Obj35_Move
0000B80E                            ; ===========================================================================
0000B80E                            
0000B80E                            loc_B238:				; XREF: Obj35_Index
0000B80E 2268 0030                  		movea.l	$30(a0),a1
0000B812 3228 0008                  		move.w	8(a0),d1
0000B816 9268 002A                  		sub.w	$2A(a0),d1
0000B81A 0641 000C                  		addi.w	#$C,d1
0000B81E 3001                       		move.w	d1,d0
0000B820 E248                       		lsr.w	#1,d0
0000B822 1031 0000                  		move.b	(a1,d0.w),d0
0000B826 4440                       		neg.w	d0
0000B828 D068 002C                  		add.w	$2C(a0),d0
0000B82C 3400                       		move.w	d0,d2
0000B82E D068 003C                  		add.w	$3C(a0),d0
0000B832 3140 000C                  		move.w	d0,$C(a0)
0000B836 0C41 0084                  		cmpi.w	#$84,d1
0000B83A 6400                       		bcc.s	loc_B2B0
0000B83C 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B844 0C41 0080                  		cmpi.w	#$80,d1
0000B848 6400                       		bcc.s	loc_B2B0
0000B84A 2028 0008                  		move.l	8(a0),d0
0000B84E 0680 0008 0000             		addi.l	#$80000,d0
0000B854 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B85A 6600                       		bne.s	loc_B2B0
0000B85C 6100 0000                  		bsr.w	SingleObjLoad2
0000B860 6600                       		bne.s	loc_B2B0
0000B862 12BC 0035                  		move.b	#$35,0(a1)
0000B866 3368 0008 0008             		move.w	8(a0),8(a1)
0000B86C 3342 002C                  		move.w	d2,$2C(a1)
0000B870 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B876 137C 0001 0028             		move.b	#1,$28(a1)
0000B87C 2468 0038                  		movea.l	$38(a0),a2
0000B880 6100 FDF0                  		bsr.w	sub_B09C
0000B884                            
0000B884                            loc_B2B0:
0000B884 6000                       		bra.s	Obj35_Animate
0000B886                            ; ===========================================================================
0000B886                            
0000B886                            Obj35_Move:				; XREF: Obj35_Index
0000B886 3028 002C                  		move.w	$2C(a0),d0
0000B88A D068 003C                  		add.w	$3C(a0),d0
0000B88E 3140 000C                  		move.w	d0,$C(a0)
0000B892                            
0000B892                            Obj35_Animate:				; XREF: loc_B238
0000B892 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B898 6100 F4AA                  		bsr.w	AnimateSprite
0000B89C 6000 0000                  		bra.w	DisplaySprite
0000B8A0                            ; ===========================================================================
0000B8A0                            Ani_obj35:
0000B8A0                            	include "_anim\obj35.asm"
0000B8A0                            ; ---------------------------------------------------------------------------
0000B8A0                            ; Animation script - fireball that sits on the	floor (MZ)
0000B8A0                            ; ---------------------------------------------------------------------------
0000B8A0 0000                       		dc.w byte_B2CE-Ani_obj35
0000B8A2 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B8A8                            		even
0000B8A8                            		even
0000B8A8                            
0000B8A8                            ; ---------------------------------------------------------------------------
0000B8A8                            ; Sprite mappings - large moving platforms (MZ)
0000B8A8                            ; ---------------------------------------------------------------------------
0000B8A8                            Map_obj2F:
0000B8A8                            	include "_maps\obj2F.asm"
0000B8A8                            ; ---------------------------------------------------------------------------
0000B8A8                            ; Sprite mappings - large moving platforms (MZ)
0000B8A8                            ; ---------------------------------------------------------------------------
0000B8A8 0000                       		dc.w byte_B2DA-Map_obj2F
0000B8AA 0000                       		dc.w byte_B31C-Map_obj2F
0000B8AC 0000                       		dc.w byte_B34F-Map_obj2F
0000B8AE 0D                         byte_B2DA:	dc.b $D
0000B8AF D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B8B4 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B8B9 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B8BE D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B8C3 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B8C8 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B8CD D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B8D2 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B8D7 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B8DC F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B8E1 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B8E6 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B8EB F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B8F0 0A                         byte_B31C:	dc.b $A
0000B8F1 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B8F6 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B8FB 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B900 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B905 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B90A F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B90F C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B914 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B919 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B91E E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B923 06                         byte_B34F:	dc.b 6
0000B924 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B929 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B92E 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B933 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B938 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B93D 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B942                            		even
0000B942                            		even
0000B942                            
0000B942                            ; ---------------------------------------------------------------------------
0000B942                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B942                            ; ---------------------------------------------------------------------------
0000B942                            Map_obj14:
0000B942                            	include "_maps\obj14.asm"
0000B942                            ; --------------------------------------------------------------------------------
0000B942                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B942                            ; --------------------------------------------------------------------------------
0000B942                            
0000B942                            SME_C6wT7:	
0000B942 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000B946 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000B94A 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000B94E 01                         SME_C6wT7_C:	dc.b 1	
0000B94F E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000B954 01                         SME_C6wT7_12:	dc.b 1	
0000B955 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000B95A 02                         SME_C6wT7_18:	dc.b 2	
0000B95B EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000B960 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000B965 01                         SME_C6wT7_23:	dc.b 1	
0000B966 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000B96B 01                         SME_C6wT7_29:	dc.b 1	
0000B96C F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000B971 01                         SME_C6wT7_2F:	dc.b 1	
0000B972 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000B978 00                         		even
0000B978 00                         		even
0000B978                            
0000B978                            ; ===========================================================================
0000B978                            ; ---------------------------------------------------------------------------
0000B978                            ; Object 30 - large green glassy blocks	(MZ)
0000B978                            ; ---------------------------------------------------------------------------
0000B978                            
0000B978                            Obj30:					; XREF: Obj_Index
0000B978 7000                       		moveq	#0,d0
0000B97A 1028 0024                  		move.b	$24(a0),d0
0000B97E 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B982 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B986 3028 0008                  		move.w	8(a0),d0
0000B98A 0240 FF80                  		andi.w	#$FF80,d0
0000B98E 3238 F700                  		move.w	($FFFFF700).w,d1
0000B992 0441 0080                  		subi.w	#$80,d1
0000B996 0241 FF80                  		andi.w	#$FF80,d1
0000B99A 9041                       		sub.w	d1,d0
0000B99C 0C40 0280                  		cmpi.w	#$280,d0
0000B9A0 6200 0000                  		bhi.w	Obj30_Delete
0000B9A4 6000 0000                  		bra.w	DisplaySprite
0000B9A8                            ; ===========================================================================
0000B9A8                            
0000B9A8                            Obj30_Delete:
0000B9A8 6000 0000                  		bra.w	DeleteObject
0000B9AC                            ; ===========================================================================
0000B9AC 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B9AE 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B9B0 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B9B2 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B9B4 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B9B6                            
0000B9B6 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B9B9 0400 01                    		dc.b 4,	0, 1
0000B9BC 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B9BF 0800 01                    		dc.b 8,	0, 1
0000B9C2                            ; ===========================================================================
0000B9C2                            
0000B9C2                            Obj30_Main:				; XREF: Obj30_Index
0000B9C2 45F9 0000 B9B6             		lea	(Obj30_Vars1).l,a2
0000B9C8 7201                       		moveq	#1,d1
0000B9CA 117C 0048 0016             		move.b	#$48,$16(a0)
0000B9D0 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B9D6 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B9D8 45F9 0000 B9BC             		lea	(Obj30_Vars2).l,a2
0000B9DE 7201                       		moveq	#1,d1
0000B9E0 117C 0038 0016             		move.b	#$38,$16(a0)
0000B9E6                            
0000B9E6                            loc_B40C:
0000B9E6 2248                       		movea.l	a0,a1
0000B9E8 6000                       		bra.s	Obj30_Load	; load main object
0000B9EA                            ; ===========================================================================
0000B9EA                            
0000B9EA                            Obj30_Loop:
0000B9EA 6100 0000                  		bsr.w	SingleObjLoad2
0000B9EE 6600                       		bne.s	loc_B480
0000B9F0                            
0000B9F0                            Obj30_Load:				; XREF: Obj30_Main
0000B9F0 135A 0024                  		move.b	(a2)+,$24(a1)
0000B9F4 12BC 0030                  		move.b	#$30,0(a1)
0000B9F8 3368 0008 0008             		move.w	8(a0),8(a1)
0000B9FE 101A                       		move.b	(a2)+,d0
0000BA00 4880                       		ext.w	d0
0000BA02 D068 000C                  		add.w	$C(a0),d0
0000BA06 3340 000C                  		move.w	d0,$C(a1)
0000BA0A 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BA12 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BA18 137C 0004 0001             		move.b	#4,1(a1)
0000BA1E 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BA24 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BA2A 137C 0020 0019             		move.b	#$20,$19(a1)
0000BA30 137C 0004 0018             		move.b	#4,$18(a1)
0000BA36 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BA3A 2348 003C                  		move.l	a0,$3C(a1)
0000BA3E 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BA42                            
0000BA42 137C 0010 0019             		move.b	#$10,$19(a1)
0000BA48 137C 0003 0018             		move.b	#3,$18(a1)
0000BA4E 5029 0028                  		addq.b	#8,$28(a1)
0000BA52 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BA58                            
0000BA58                            loc_B480:
0000BA58 317C 0090 0032             		move.w	#$90,$32(a0)
0000BA5E 08E8 0004 0001             		bset	#4,1(a0)
0000BA64                            
0000BA64                            Obj30_Block012:				; XREF: Obj30_Index
0000BA64 6100 0000                  		bsr.w	Obj30_Types
0000BA68 323C 002B                  		move.w	#$2B,d1
0000BA6C 343C 0048                  		move.w	#$48,d2
0000BA70 363C 0049                  		move.w	#$49,d3
0000BA74 3828 0008                  		move.w	8(a0),d4
0000BA78 6000 0000                  		bra.w	SolidObject
0000BA7C                            ; ===========================================================================
0000BA7C                            
0000BA7C                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BA7C 2268 003C                  		movea.l	$3C(a0),a1
0000BA80 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BA86 6000 0000                  		bra.w	Obj30_Types
0000BA8A                            ; ===========================================================================
0000BA8A                            
0000BA8A                            Obj30_Block34:				; XREF: Obj30_Index
0000BA8A 6100 0000                  		bsr.w	Obj30_Types
0000BA8E 323C 002B                  		move.w	#$2B,d1
0000BA92 343C 0038                  		move.w	#$38,d2
0000BA96 363C 0039                  		move.w	#$39,d3
0000BA9A 3828 0008                  		move.w	8(a0),d4
0000BA9E 6000 0000                  		bra.w	SolidObject
0000BAA2                            ; ===========================================================================
0000BAA2                            
0000BAA2                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BAA2 2268 003C                  		movea.l	$3C(a0),a1
0000BAA6 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BAAC 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BAB2 6000 0002                  		bra.w	*+4
0000BAB6                            
0000BAB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BAB6                            
0000BAB6                            
0000BAB6                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BAB6 7000                       		moveq	#0,d0
0000BAB8 1028 0028                  		move.b	$28(a0),d0
0000BABC 0240 0007                  		andi.w	#7,d0
0000BAC0 D040                       		add.w	d0,d0
0000BAC2 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BAC6 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BACA                            ; End of function Obj30_Types
0000BACA                            
0000BACA                            ; ===========================================================================
0000BACA 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BACC 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BACE 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BAD0 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BAD2 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BAD4                            ; ===========================================================================
0000BAD4                            
0000BAD4                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BAD4 4E75                       		rts	
0000BAD6                            ; ===========================================================================
0000BAD6                            
0000BAD6                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BAD6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BADA 323C 0040                  		move.w	#$40,d1
0000BADE 6000                       		bra.s	loc_B514
0000BAE0                            ; ===========================================================================
0000BAE0                            
0000BAE0                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BAE0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BAE4 323C 0040                  		move.w	#$40,d1
0000BAE8 4440                       		neg.w	d0
0000BAEA D041                       		add.w	d1,d0
0000BAEC                            
0000BAEC                            loc_B514:				; XREF: Obj30_Type01
0000BAEC 0828 0003 0028             		btst	#3,$28(a0)
0000BAF2 6700                       		beq.s	loc_B526
0000BAF4 4440                       		neg.w	d0
0000BAF6 D041                       		add.w	d1,d0
0000BAF8 E208                       		lsr.b	#1,d0
0000BAFA 0640 0020                  		addi.w	#$20,d0
0000BAFE                            
0000BAFE                            loc_B526:
0000BAFE 6000 0000                  		bra.w	loc_B5EE
0000BB02                            ; ===========================================================================
0000BB02                            
0000BB02                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BB02 0828 0003 0028             		btst	#3,$28(a0)
0000BB08 6700                       		beq.s	loc_B53E
0000BB0A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BB0E 0440 0010                  		subi.w	#$10,d0
0000BB12 6000 0000                  		bra.w	loc_B5EE
0000BB16                            ; ===========================================================================
0000BB16                            
0000BB16                            loc_B53E:
0000BB16 0828 0003 0022             		btst	#3,$22(a0)
0000BB1C 6600                       		bne.s	loc_B54E
0000BB1E 08A8 0000 0034             		bclr	#0,$34(a0)
0000BB24 6000                       		bra.s	loc_B582
0000BB26                            ; ===========================================================================
0000BB26                            
0000BB26                            loc_B54E:
0000BB26 4A28 0034                  		tst.b	$34(a0)
0000BB2A 6600                       		bne.s	loc_B582
0000BB2C 117C 0001 0034             		move.b	#1,$34(a0)
0000BB32 08E8 0000 0035             		bset	#0,$35(a0)
0000BB38 6700                       		beq.s	loc_B582
0000BB3A 08E8 0007 0034             		bset	#7,$34(a0)
0000BB40 317C 0010 0036             		move.w	#$10,$36(a0)
0000BB46 117C 000A 0038             		move.b	#$A,$38(a0)
0000BB4C 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BB52 6600                       		bne.s	loc_B582
0000BB54 317C 0040 0036             		move.w	#$40,$36(a0)
0000BB5A                            
0000BB5A                            loc_B582:
0000BB5A 4A28 0034                  		tst.b	$34(a0)
0000BB5E 6A00                       		bpl.s	loc_B5AA
0000BB60 4A28 0038                  		tst.b	$38(a0)
0000BB64 6700                       		beq.s	loc_B594
0000BB66 5328 0038                  		subq.b	#1,$38(a0)
0000BB6A 6600                       		bne.s	loc_B5AA
0000BB6C                            
0000BB6C                            loc_B594:
0000BB6C 4A68 0032                  		tst.w	$32(a0)
0000BB70 6700                       		beq.s	loc_B5A4
0000BB72 5368 0032                  		subq.w	#1,$32(a0)
0000BB76 5368 0036                  		subq.w	#1,$36(a0)
0000BB7A 6600                       		bne.s	loc_B5AA
0000BB7C                            
0000BB7C                            loc_B5A4:
0000BB7C 08A8 0007 0034             		bclr	#7,$34(a0)
0000BB82                            
0000BB82                            loc_B5AA:
0000BB82 3028 0032                  		move.w	$32(a0),d0
0000BB86 6000                       		bra.s	loc_B5EE
0000BB88                            ; ===========================================================================
0000BB88                            
0000BB88                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BB88 0828 0003 0028             		btst	#3,$28(a0)
0000BB8E 6700                       		beq.s	Obj30_ChkSwitch
0000BB90 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BB94 0440 0010                  		subi.w	#$10,d0
0000BB98 6000                       		bra.s	loc_B5EE
0000BB9A                            ; ===========================================================================
0000BB9A                            
0000BB9A                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BB9A 4A28 0034                  		tst.b	$34(a0)
0000BB9E 6600                       		bne.s	loc_B5E0
0000BBA0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BBA4 7000                       		moveq	#0,d0
0000BBA6 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BBAA E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BBAC 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BBB0 6700                       		beq.s	loc_B5EA	; if not, branch
0000BBB2 117C 0001 0034             		move.b	#1,$34(a0)
0000BBB8                            
0000BBB8                            loc_B5E0:
0000BBB8 4A68 0032                  		tst.w	$32(a0)
0000BBBC 6700                       		beq.s	loc_B5EA
0000BBBE 5568 0032                  		subq.w	#2,$32(a0)
0000BBC2                            
0000BBC2                            loc_B5EA:
0000BBC2 3028 0032                  		move.w	$32(a0),d0
0000BBC6                            
0000BBC6                            loc_B5EE:
0000BBC6 3228 0030                  		move.w	$30(a0),d1
0000BBCA 9240                       		sub.w	d0,d1
0000BBCC 3141 000C                  		move.w	d1,$C(a0)
0000BBD0 4E75                       		rts	
0000BBD2                            ; ===========================================================================
0000BBD2                            ; ---------------------------------------------------------------------------
0000BBD2                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BBD2                            ; ---------------------------------------------------------------------------
0000BBD2                            Map_obj30:
0000BBD2                            	include "_maps\obj30.asm"
0000BBD2                            ; ---------------------------------------------------------------------------
0000BBD2                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BBD2                            ; ---------------------------------------------------------------------------
0000BBD2 0000                       		dc.w byte_B600-Map_obj30
0000BBD4 0000                       		dc.w byte_B63D-Map_obj30
0000BBD6 0000                       		dc.w byte_B648-Map_obj30
0000BBD8 0C                         byte_B600:	dc.b $C
0000BBD9 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BBDE B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BBE3 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BBE8 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BBED E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BBF2 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BBF7 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BBFC 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BC01 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BC06 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BC0B 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BC10 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BC15 02                         byte_B63D:	dc.b 2
0000BC16 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BC1B 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BC20 0A                         byte_B648:	dc.b $A
0000BC21 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BC26 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BC2B D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BC30 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BC35 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BC3A F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BC3F 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BC44 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BC49 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BC4E 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BC54 00                         		even
0000BC54 00                         		even
0000BC54                            
0000BC54                            ; ===========================================================================
0000BC54                            ; ---------------------------------------------------------------------------
0000BC54                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BC54                            ; ---------------------------------------------------------------------------
0000BC54                            
0000BC54                            Obj31:					; XREF: Obj_Index
0000BC54 7000                       		moveq	#0,d0
0000BC56 1028 0024                  		move.b	$24(a0),d0
0000BC5A 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BC5E 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BC62                            ; ===========================================================================
0000BC62 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BC64 0000                       		dc.w loc_B798-Obj31_Index
0000BC66 0000                       		dc.w loc_B7FE-Obj31_Index
0000BC68 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BC6A 0000                       		dc.w loc_B7E2-Obj31_Index
0000BC6C                            
0000BC6C 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BC6E 0100                       		dc.b 1,	0
0000BC70                            
0000BC70 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BC73 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BC76 08CC 03                    		dc.b 8,	$CC, 3
0000BC79 06F0 02                    		dc.b 6,	$F0, 2
0000BC7C                            
0000BC7C 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BC80 5000 7800                  		dc.w $5000, $7800
0000BC84 3800 5800                  		dc.w $3800, $5800
0000BC88 B800                       		dc.w $B800
0000BC8A                            ; ===========================================================================
0000BC8A                            
0000BC8A                            Obj31_Main:				; XREF: Obj31_Index
0000BC8A 7000                       		moveq	#0,d0
0000BC8C 1028 0028                  		move.b	$28(a0),d0
0000BC90 6A00                       		bpl.s	loc_B6CE
0000BC92 0240 007F                  		andi.w	#$7F,d0
0000BC96 D040                       		add.w	d0,d0
0000BC98 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BC9C 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BCA0 101A                       		move.b	(a2)+,d0
0000BCA2 1140 0028                  		move.b	d0,$28(a0)
0000BCA6                            
0000BCA6                            loc_B6CE:
0000BCA6 0200 000F                  		andi.b	#$F,d0
0000BCAA D040                       		add.w	d0,d0
0000BCAC 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BCB0 4A40                       		tst.w	d0
0000BCB2 6600                       		bne.s	loc_B6E0
0000BCB4 3142 0032                  		move.w	d2,$32(a0)
0000BCB8                            
0000BCB8                            loc_B6E0:
0000BCB8 45F9 0000 BC70             		lea	(Obj31_Var).l,a2
0000BCBE 2248                       		movea.l	a0,a1
0000BCC0 7203                       		moveq	#3,d1
0000BCC2 6000                       		bra.s	Obj31_MakeStomper
0000BCC4                            ; ===========================================================================
0000BCC4                            
0000BCC4                            Obj31_Loop:
0000BCC4 6100 0000                  		bsr.w	SingleObjLoad2
0000BCC8 6600 0000                  		bne.w	Obj31_SetSize
0000BCCC                            
0000BCCC                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BCCC 135A 0024                  		move.b	(a2)+,$24(a1)
0000BCD0 12BC 0031                  		move.b	#$31,0(a1)
0000BCD4 3368 0008 0008             		move.w	8(a0),8(a1)
0000BCDA 101A                       		move.b	(a2)+,d0
0000BCDC 4880                       		ext.w	d0
0000BCDE D068 000C                  		add.w	$C(a0),d0
0000BCE2 3340 000C                  		move.w	d0,$C(a1)
0000BCE6 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BCEE 337C 0300 0002             		move.w	#$300,2(a1)
0000BCF4 137C 0004 0001             		move.b	#4,1(a1)
0000BCFA 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BD00 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BD06 137C 0010 0019             		move.b	#$10,$19(a1)
0000BD0C 3342 0034                  		move.w	d2,$34(a1)
0000BD10 137C 0004 0018             		move.b	#4,$18(a1)
0000BD16 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BD1A 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BD20 6600                       		bne.s	loc_B76A
0000BD22 5341                       		subq.w	#1,d1
0000BD24 1028 0028                  		move.b	$28(a0),d0
0000BD28 0240 00F0                  		andi.w	#$F0,d0
0000BD2C 0C40 0020                  		cmpi.w	#$20,d0
0000BD30 679A                       		beq.s	Obj31_MakeStomper
0000BD32 137C 0038 0019             		move.b	#$38,$19(a1)
0000BD38 137C 0090 0020             		move.b	#$90,$20(a1)
0000BD3E 5241                       		addq.w	#1,d1
0000BD40                            
0000BD40                            loc_B76A:
0000BD40 2348 003C                  		move.l	a0,$3C(a1)
0000BD44 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BD48                            
0000BD48 137C 0003 0018             		move.b	#3,$18(a1)
0000BD4E                            
0000BD4E                            Obj31_SetSize:
0000BD4E 7000                       		moveq	#0,d0
0000BD50 1028 0028                  		move.b	$28(a0),d0
0000BD54 E648                       		lsr.w	#3,d0
0000BD56 0200 000E                  		andi.b	#$E,d0
0000BD5A 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BD5E 115A 0019                  		move.b	(a2)+,$19(a0)
0000BD62 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BD66 6000                       		bra.s	loc_B798
0000BD68                            ; ===========================================================================
0000BD68 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BD6A 3009                       		dc.b $30, 9
0000BD6C 100A                       		dc.b $10, $A
0000BD6E                            ; ===========================================================================
0000BD6E                            
0000BD6E                            loc_B798:				; XREF: Obj31_Index
0000BD6E 6100 0000                  		bsr.w	Obj31_Types
0000BD72 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BD78 7200                       		moveq	#0,d1
0000BD7A 1228 0019                  		move.b	$19(a0),d1
0000BD7E 0641 000B                  		addi.w	#$B,d1
0000BD82 343C 000C                  		move.w	#$C,d2
0000BD86 363C 000D                  		move.w	#$D,d3
0000BD8A 3828 0008                  		move.w	8(a0),d4
0000BD8E 6100 0000                  		bsr.w	SolidObject
0000BD92 0828 0003 0022             		btst	#3,$22(a0)
0000BD98 6700                       		beq.s	Obj31_Display
0000BD9A 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BDA0 6400                       		bcc.s	Obj31_Display
0000BDA2 2448                       		movea.l	a0,a2
0000BDA4 41F8 D000                  		lea	($FFFFD000).w,a0
0000BDA8 4EB9 0000 0000             		jsr	KillSonic
0000BDAE 204A                       		movea.l	a2,a0
0000BDB0                            
0000BDB0                            Obj31_Display:
0000BDB0 6100 0000                  		bsr.w	DisplaySprite
0000BDB4 6000 0000                  		bra.w	Obj31_ChkDel
0000BDB8                            ; ===========================================================================
0000BDB8                            
0000BDB8                            loc_B7E2:				; XREF: Obj31_Index
0000BDB8 117C 0080 0016             		move.b	#$80,$16(a0)
0000BDBE 08E8 0004 0001             		bset	#4,1(a0)
0000BDC4 2268 003C                  		movea.l	$3C(a0),a1
0000BDC8 1029 0032                  		move.b	$32(a1),d0
0000BDCC EA08                       		lsr.b	#5,d0
0000BDCE 5600                       		addq.b	#3,d0
0000BDD0 1140 001A                  		move.b	d0,$1A(a0)
0000BDD4                            
0000BDD4                            loc_B7FE:				; XREF: Obj31_Index
0000BDD4 2268 003C                  		movea.l	$3C(a0),a1
0000BDD8 7000                       		moveq	#0,d0
0000BDDA 1029 0032                  		move.b	$32(a1),d0
0000BDDE D068 0030                  		add.w	$30(a0),d0
0000BDE2 3140 000C                  		move.w	d0,$C(a0)
0000BDE6                            
0000BDE6                            Obj31_Display2:				; XREF: Obj31_Index
0000BDE6 6100 0000                  		bsr.w	DisplaySprite
0000BDEA                            
0000BDEA                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BDEA 3028 0008                  		move.w	8(a0),d0
0000BDEE 0240 FF80                  		andi.w	#$FF80,d0
0000BDF2 3238 F700                  		move.w	($FFFFF700).w,d1
0000BDF6 0441 0080                  		subi.w	#$80,d1
0000BDFA 0241 FF80                  		andi.w	#$FF80,d1
0000BDFE 9041                       		sub.w	d1,d0
0000BE00 0C40 0280                  		cmpi.w	#$280,d0
0000BE04 6200 0000                  		bhi.w	DeleteObject
0000BE08 4E75                       		rts	
0000BE0A                            ; ===========================================================================
0000BE0A                            
0000BE0A                            Obj31_Types:				; XREF: loc_B798
0000BE0A 1028 0028                  		move.b	$28(a0),d0
0000BE0E 0240 000F                  		andi.w	#$F,d0
0000BE12 D040                       		add.w	d0,d0
0000BE14 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BE18 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BE1C                            ; ===========================================================================
0000BE1C 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BE1E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BE20 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BE22 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BE24 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BE26 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BE28 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BE2A                            ; ===========================================================================
0000BE2A                            
0000BE2A                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BE2A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BE2E 7000                       		moveq	#0,d0
0000BE30 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BE34 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BE38 6700                       		beq.s	loc_B8A8	; if not, branch
0000BE3A 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BE3E 6A00                       		bpl.s	loc_B872
0000BE40 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BE46 6700                       		beq.s	loc_B8A0
0000BE48                            
0000BE48                            loc_B872:
0000BE48 4A68 0032                  		tst.w	$32(a0)
0000BE4C 6700                       		beq.s	loc_B8A0
0000BE4E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BE52 0200 000F                  		andi.b	#$F,d0
0000BE56 6600                       		bne.s	loc_B892
0000BE58 4A28 0001                  		tst.b	1(a0)
0000BE5C 6A00                       		bpl.s	loc_B892
0000BE5E 303C 00C7                  		move.w	#$C7,d0
0000BE62 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BE68                            
0000BE68                            loc_B892:
0000BE68 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BE6E 6400                       		bcc.s	Obj31_Restart
0000BE70 317C 0000 0032             		move.w	#0,$32(a0)
0000BE76                            
0000BE76                            loc_B8A0:
0000BE76 317C 0000 0012             		move.w	#0,$12(a0)
0000BE7C 6000                       		bra.s	Obj31_Restart
0000BE7E                            ; ===========================================================================
0000BE7E                            
0000BE7E                            loc_B8A8:				; XREF: Obj31_Type00
0000BE7E 3228 0034                  		move.w	$34(a0),d1
0000BE82 B268 0032                  		cmp.w	$32(a0),d1
0000BE86 6700                       		beq.s	Obj31_Restart
0000BE88 3028 0012                  		move.w	$12(a0),d0
0000BE8C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BE92 D168 0032                  		add.w	d0,$32(a0)
0000BE96 B268 0032                  		cmp.w	$32(a0),d1
0000BE9A 6200                       		bhi.s	Obj31_Restart
0000BE9C 3141 0032                  		move.w	d1,$32(a0)
0000BEA0 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BEA6 4A28 0001                  		tst.b	1(a0)
0000BEAA 6A00                       		bpl.s	Obj31_Restart
0000BEAC 303C 00BD                  		move.w	#$BD,d0
0000BEB0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BEB6                            
0000BEB6                            Obj31_Restart:
0000BEB6 7000                       		moveq	#0,d0
0000BEB8 1028 0032                  		move.b	$32(a0),d0
0000BEBC D068 0030                  		add.w	$30(a0),d0
0000BEC0 3140 000C                  		move.w	d0,$C(a0)
0000BEC4 4E75                       		rts	
0000BEC6                            ; ===========================================================================
0000BEC6                            
0000BEC6                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BEC6 4A68 0036                  		tst.w	$36(a0)
0000BECA 6700                       		beq.s	loc_B938
0000BECC 4A68 0038                  		tst.w	$38(a0)
0000BED0 6700                       		beq.s	loc_B902
0000BED2 5368 0038                  		subq.w	#1,$38(a0)
0000BED6 6000                       		bra.s	loc_B97C
0000BED8                            ; ===========================================================================
0000BED8                            
0000BED8                            loc_B902:
0000BED8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BEDC 0200 000F                  		andi.b	#$F,d0
0000BEE0 6600                       		bne.s	loc_B91C
0000BEE2 4A28 0001                  		tst.b	1(a0)
0000BEE6 6A00                       		bpl.s	loc_B91C
0000BEE8 303C 00C7                  		move.w	#$C7,d0
0000BEEC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BEF2                            
0000BEF2                            loc_B91C:
0000BEF2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BEF8 6400                       		bcc.s	loc_B97C
0000BEFA 317C 0000 0032             		move.w	#0,$32(a0)
0000BF00 317C 0000 0012             		move.w	#0,$12(a0)
0000BF06 317C 0000 0036             		move.w	#0,$36(a0)
0000BF0C 6000                       		bra.s	loc_B97C
0000BF0E                            ; ===========================================================================
0000BF0E                            
0000BF0E                            loc_B938:				; XREF: Obj31_Type01
0000BF0E 3228 0034                  		move.w	$34(a0),d1
0000BF12 B268 0032                  		cmp.w	$32(a0),d1
0000BF16 6700                       		beq.s	loc_B97C
0000BF18 3028 0012                  		move.w	$12(a0),d0
0000BF1C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BF22 D168 0032                  		add.w	d0,$32(a0)
0000BF26 B268 0032                  		cmp.w	$32(a0),d1
0000BF2A 6200                       		bhi.s	loc_B97C
0000BF2C 3141 0032                  		move.w	d1,$32(a0)
0000BF30 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BF36 317C 0001 0036             		move.w	#1,$36(a0)
0000BF3C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BF42 4A28 0001                  		tst.b	1(a0)
0000BF46 6A00                       		bpl.s	loc_B97C
0000BF48 303C 00BD                  		move.w	#$BD,d0
0000BF4C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BF52                            
0000BF52                            loc_B97C:
0000BF52 6000 FF62                  		bra.w	Obj31_Restart
0000BF56                            ; ===========================================================================
0000BF56                            
0000BF56                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BF56 3038 D008                  		move.w	($FFFFD008).w,d0
0000BF5A 9068 0008                  		sub.w	8(a0),d0
0000BF5E 6400                       		bcc.s	loc_B98C
0000BF60 4440                       		neg.w	d0
0000BF62                            
0000BF62                            loc_B98C:
0000BF62 0C40 0090                  		cmpi.w	#$90,d0
0000BF66 6400                       		bcc.s	loc_B996
0000BF68 5228 0028                  		addq.b	#1,$28(a0)
0000BF6C                            
0000BF6C                            loc_B996:
0000BF6C 6000 FF48                  		bra.w	Obj31_Restart
0000BF70                            ; ===========================================================================
0000BF70                            ; ---------------------------------------------------------------------------
0000BF70                            ; Object 45 - spiked metal block from beta version (MZ)
0000BF70                            ; ---------------------------------------------------------------------------
0000BF70                            
0000BF70                            Obj45:					; XREF: Obj_Index
0000BF70 7000                       		moveq	#0,d0
0000BF72 1028 0024                  		move.b	$24(a0),d0
0000BF76 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BF7A 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BF7E                            ; ===========================================================================
0000BF7E 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BF80 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BF82 0000                       		dc.w loc_BA8E-Obj45_Index
0000BF84 0000                       		dc.w Obj45_Display-Obj45_Index
0000BF86 0000                       		dc.w loc_BA7A-Obj45_Index
0000BF88                            
0000BF88 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BF8B 04E4 01                    		dc.b	4, $E4,	  1
0000BF8E 0834 03                    		dc.b	8, $34,	  3
0000BF91 0628 02                    		dc.b	6, $28,	  2
0000BF94                            
0000BF94 3800                       word_B9BE:	dc.w $3800
0000BF96 A000                       		dc.w -$6000
0000BF98 5000                       		dc.w $5000
0000BF9A                            ; ===========================================================================
0000BF9A                            
0000BF9A                            Obj45_Main:				; XREF: Obj45_Index
0000BF9A 7000                       		moveq	#0,d0
0000BF9C 1028 0028                  		move.b	$28(a0),d0
0000BFA0 D040                       		add.w	d0,d0
0000BFA2 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BFA6 45F9 0000 BF88             		lea	(Obj45_Var).l,a2
0000BFAC 2248                       		movea.l	a0,a1
0000BFAE 7203                       		moveq	#3,d1
0000BFB0 6000                       		bra.s	Obj45_Load
0000BFB2                            ; ===========================================================================
0000BFB2                            
0000BFB2                            Obj45_Loop:
0000BFB2 6100 0000                  		bsr.w	SingleObjLoad2
0000BFB6 6600                       		bne.s	loc_BA52
0000BFB8                            
0000BFB8                            Obj45_Load:				; XREF: Obj45_Main
0000BFB8 135A 0024                  		move.b	(a2)+,$24(a1)
0000BFBC 12BC 0045                  		move.b	#$45,0(a1)
0000BFC0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BFC6 101A                       		move.b	(a2)+,d0
0000BFC8 4880                       		ext.w	d0
0000BFCA D068 0008                  		add.w	8(a0),d0
0000BFCE 3340 0008                  		move.w	d0,8(a1)
0000BFD2 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BFDA 337C 0300 0002             		move.w	#$300,2(a1)
0000BFE0 137C 0004 0001             		move.b	#4,1(a1)
0000BFE6 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BFEC 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BFF2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BFF8 137C 0020 0019             		move.b	#$20,$19(a1)
0000BFFE 3342 0034                  		move.w	d2,$34(a1)
0000C002 137C 0004 0018             		move.b	#4,$18(a1)
0000C008 0C12 0001                  		cmpi.b	#1,(a2)
0000C00C 6600                       		bne.s	loc_BA40
0000C00E 137C 0091 0020             		move.b	#$91,$20(a1)
0000C014                            
0000C014                            loc_BA40:
0000C014 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C018 2348 003C                  		move.l	a0,$3C(a1)
0000C01C 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C020                            
0000C020 137C 0003 0018             		move.b	#3,$18(a1)
0000C026                            
0000C026                            loc_BA52:
0000C026 117C 0010 0019             		move.b	#$10,$19(a0)
0000C02C                            
0000C02C                            Obj45_Solid:				; XREF: Obj45_Index
0000C02C 3F28 0008                  		move.w	8(a0),-(sp)
0000C030 6100 0000                  		bsr.w	Obj45_Move
0000C034 323C 0017                  		move.w	#$17,d1
0000C038 343C 0020                  		move.w	#$20,d2
0000C03C 363C 0020                  		move.w	#$20,d3
0000C040 381F                       		move.w	(sp)+,d4
0000C042 6100 0000                  		bsr.w	SolidObject
0000C046 6100 0000                  		bsr.w	DisplaySprite
0000C04A 6000 0000                  		bra.w	Obj45_ChkDel
0000C04E                            ; ===========================================================================
0000C04E                            
0000C04E                            loc_BA7A:				; XREF: Obj45_Index
0000C04E 2268 003C                  		movea.l	$3C(a0),a1
0000C052 1029 0032                  		move.b	$32(a1),d0
0000C056 0600 0010                  		addi.b	#$10,d0
0000C05A EA08                       		lsr.b	#5,d0
0000C05C 5600                       		addq.b	#3,d0
0000C05E 1140 001A                  		move.b	d0,$1A(a0)
0000C062                            
0000C062                            loc_BA8E:				; XREF: Obj45_Index
0000C062 2268 003C                  		movea.l	$3C(a0),a1
0000C066 7000                       		moveq	#0,d0
0000C068 1029 0032                  		move.b	$32(a1),d0
0000C06C 4440                       		neg.w	d0
0000C06E D068 0030                  		add.w	$30(a0),d0
0000C072 3140 0008                  		move.w	d0,8(a0)
0000C076                            
0000C076                            Obj45_Display:				; XREF: Obj45_Index
0000C076 6100 0000                  		bsr.w	DisplaySprite
0000C07A                            
0000C07A                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C07A 3028 003A                  		move.w	$3A(a0),d0
0000C07E 0240 FF80                  		andi.w	#$FF80,d0
0000C082 3238 F700                  		move.w	($FFFFF700).w,d1
0000C086 0441 0080                  		subi.w	#$80,d1
0000C08A 0241 FF80                  		andi.w	#$FF80,d1
0000C08E 9041                       		sub.w	d1,d0
0000C090 0C40 0280                  		cmpi.w	#$280,d0
0000C094 6200 0000                  		bhi.w	DeleteObject
0000C098 4E75                       		rts	
0000C09A                            
0000C09A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C09A                            
0000C09A                            
0000C09A                            Obj45_Move:				; XREF: Obj45_Solid
0000C09A 7000                       		moveq	#0,d0
0000C09C 1028 0028                  		move.b	$28(a0),d0
0000C0A0 D040                       		add.w	d0,d0
0000C0A2 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C0A6 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C0AA                            ; End of function Obj45_Move
0000C0AA                            
0000C0AA                            ; ===========================================================================
0000C0AA 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C0AC 0000                       		dc.w loc_BADA-off_BAD6
0000C0AE                            ; ===========================================================================
0000C0AE                            
0000C0AE                            loc_BADA:				; XREF: off_BAD6
0000C0AE 4A68 0036                  		tst.w	$36(a0)
0000C0B2 6700                       		beq.s	loc_BB08
0000C0B4 4A68 0038                  		tst.w	$38(a0)
0000C0B8 6700                       		beq.s	loc_BAEC
0000C0BA 5368 0038                  		subq.w	#1,$38(a0)
0000C0BE 6000                       		bra.s	loc_BB3C
0000C0C0                            ; ===========================================================================
0000C0C0                            
0000C0C0                            loc_BAEC:
0000C0C0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C0C6 6400                       		bcc.s	loc_BB3C
0000C0C8 317C 0000 0032             		move.w	#0,$32(a0)
0000C0CE 317C 0000 0010             		move.w	#0,$10(a0)
0000C0D4 317C 0000 0036             		move.w	#0,$36(a0)
0000C0DA 6000                       		bra.s	loc_BB3C
0000C0DC                            ; ===========================================================================
0000C0DC                            
0000C0DC                            loc_BB08:				; XREF: loc_BADA
0000C0DC 3228 0034                  		move.w	$34(a0),d1
0000C0E0 B268 0032                  		cmp.w	$32(a0),d1
0000C0E4 6700                       		beq.s	loc_BB3C
0000C0E6 3028 0010                  		move.w	$10(a0),d0
0000C0EA 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C0F0 D168 0032                  		add.w	d0,$32(a0)
0000C0F4 B268 0032                  		cmp.w	$32(a0),d1
0000C0F8 6200                       		bhi.s	loc_BB3C
0000C0FA 3141 0032                  		move.w	d1,$32(a0)
0000C0FE 317C 0000 0010             		move.w	#0,$10(a0)
0000C104 317C 0001 0036             		move.w	#1,$36(a0)
0000C10A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C110                            
0000C110                            loc_BB3C:
0000C110 7000                       		moveq	#0,d0
0000C112 1028 0032                  		move.b	$32(a0),d0
0000C116 4440                       		neg.w	d0
0000C118 D068 0030                  		add.w	$30(a0),d0
0000C11C 3140 0008                  		move.w	d0,8(a0)
0000C120 4E75                       		rts	
0000C122                            ; ===========================================================================
0000C122                            ; ---------------------------------------------------------------------------
0000C122                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C122                            ; ---------------------------------------------------------------------------
0000C122                            Map_obj31:
0000C122                            	include "_maps\obj31.asm"
0000C122                            ; ---------------------------------------------------------------------------
0000C122                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C122                            ; ---------------------------------------------------------------------------
0000C122 0000                       		dc.w byte_BB64-Map_obj31
0000C124 0000                       		dc.w byte_BB7E-Map_obj31
0000C126 0000                       		dc.w byte_BB98-Map_obj31
0000C128 0000                       		dc.w byte_BB9E-Map_obj31
0000C12A 0000                       		dc.w byte_BBA9-Map_obj31
0000C12C 0000                       		dc.w byte_BBBE-Map_obj31
0000C12E 0000                       		dc.w byte_BBDD-Map_obj31
0000C130 0000                       		dc.w byte_BC06-Map_obj31
0000C132 0000                       		dc.w byte_BC06-Map_obj31
0000C134 0000                       		dc.w byte_BC39-Map_obj31
0000C136 0000                       		dc.w byte_BC53-Map_obj31
0000C138 05                         byte_BB64:	dc.b 5
0000C139 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C13E F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C143 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C148 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C14D F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C152 05                         byte_BB7E:	dc.b 5
0000C153 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C158 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C15D F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C162 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C167 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C16C 01                         byte_BB98:	dc.b 1
0000C16D DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C172 02                         byte_BB9E:	dc.b 2
0000C173 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C178 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C17D 04                         byte_BBA9:	dc.b 4
0000C17E E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C183 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C188 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C18D 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C192 06                         byte_BBBE:	dc.b 6
0000C193 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C198 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C19D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C1A2 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C1A7 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C1AC 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C1B1 08                         byte_BBDD:	dc.b 8
0000C1B2 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C1B7 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C1BC C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C1C1 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C1C6 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C1CB F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C1D0 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C1D5 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C1DA 0A                         byte_BC06:	dc.b $A
0000C1DB 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C1E0 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C1E5 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C1EA B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C1EF C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C1F4 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C1F9 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C1FE F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C203 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C208 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C20D 05                         byte_BC39:	dc.b 5
0000C20E F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C213 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C218 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C21D F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C222 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C227 01                         byte_BC53:	dc.b 1
0000C228 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C22E 00                         		even
0000C22E 00                         		even
0000C22E                            
0000C22E                            ; ---------------------------------------------------------------------------
0000C22E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C22E                            ; ---------------------------------------------------------------------------
0000C22E                            Map_obj45:
0000C22E                            	include "_maps\obj45.asm"
0000C22E                            ; ---------------------------------------------------------------------------
0000C22E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C22E                            ; ---------------------------------------------------------------------------
0000C22E 0000                       		dc.w byte_BC6C-Map_obj45
0000C230 0000                       		dc.w byte_BC7C-Map_obj45
0000C232 0000                       		dc.w byte_BC8C-Map_obj45
0000C234 0000                       		dc.w byte_BC92-Map_obj45
0000C236 0000                       		dc.w byte_BC9D-Map_obj45
0000C238 0000                       		dc.w byte_BCB2-Map_obj45
0000C23A 0000                       		dc.w byte_BCD1-Map_obj45
0000C23C 0000                       		dc.w byte_BCFA-Map_obj45
0000C23E 0000                       		dc.w byte_BCFA-Map_obj45
0000C240 03                         byte_BC6C:	dc.b 3
0000C241 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C246 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C24B F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C250 03                         byte_BC7C:	dc.b 3
0000C251 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C256 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C25B 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C260 01                         byte_BC8C:	dc.b 1
0000C261 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C266 02                         byte_BC92:	dc.b 2
0000C267 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C26C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C271 04                         byte_BC9D:	dc.b 4
0000C272 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C277 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C27C F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C281 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C286 06                         byte_BCB2:	dc.b 6
0000C287 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C28C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C291 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C296 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C29B F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C2A0 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C2A5 08                         byte_BCD1:	dc.b 8
0000C2A6 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C2AB F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C2B0 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C2B5 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C2BA F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C2BF F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C2C4 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C2C9 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C2CE 08                         byte_BCFA:	dc.b 8
0000C2CF F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C2D4 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C2D9 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C2DE F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C2E3 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C2E8 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C2ED F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C2F2 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C2F7 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C2FC F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C302 00                         		even
0000C302 00                         		even
0000C302                            
0000C302                            ; ===========================================================================
0000C302                            ; ---------------------------------------------------------------------------
0000C302                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C302                            ; ---------------------------------------------------------------------------
0000C302                            
0000C302                            Obj32:					; XREF: Obj_Index
0000C302 7000                       		moveq	#0,d0
0000C304 1028 0024                  		move.b	$24(a0),d0
0000C308 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C30C 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C310                            ; ===========================================================================
0000C310 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C312 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C314                            ; ===========================================================================
0000C314                            
0000C314                            Obj32_Main:				; XREF: Obj32_Index
0000C314 5428 0024                  		addq.b	#2,$24(a0)
0000C318 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C320 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C326 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C32C 6700                       		beq.s	loc_BD60
0000C32E 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C334                            
0000C334                            loc_BD60:
0000C334 117C 0004 0001             		move.b	#4,1(a0)
0000C33A 117C 0010 0019             		move.b	#$10,$19(a0)
0000C340 117C 0004 0018             		move.b	#4,$18(a0)
0000C346 5668 000C                  		addq.w	#3,$C(a0)
0000C34A                            
0000C34A                            Obj32_Pressed:				; XREF: Obj32_Index
0000C34A 4A28 0001                  		tst.b	1(a0)
0000C34E 6A00                       		bpl.s	Obj32_Display
0000C350 323C 001B                  		move.w	#$1B,d1
0000C354 343C 0005                  		move.w	#5,d2
0000C358 363C 0005                  		move.w	#5,d3
0000C35C 3828 0008                  		move.w	8(a0),d4
0000C360 6100 0000                  		bsr.w	SolidObject
0000C364 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C36A 1028 0028                  		move.b	$28(a0),d0
0000C36E 0240 000F                  		andi.w	#$F,d0
0000C372 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C376 47F3 0000                  		lea	(a3,d0.w),a3
0000C37A 7600                       		moveq	#0,d3
0000C37C 0828 0006 0028             		btst	#6,$28(a0)
0000C382 6700                       		beq.s	loc_BDB2
0000C384 7607                       		moveq	#7,d3
0000C386                            
0000C386                            loc_BDB2:
0000C386 4A28 0028                  		tst.b	$28(a0)
0000C38A 6A00                       		bpl.s	loc_BDBE
0000C38C 6100 0000                  		bsr.w	Obj32_MZBlock
0000C390 6600                       		bne.s	loc_BDC8
0000C392                            
0000C392                            loc_BDBE:
0000C392 4A28 0025                  		tst.b	$25(a0)
0000C396 6600                       		bne.s	loc_BDC8
0000C398 0793                       		bclr	d3,(a3)
0000C39A 6000                       		bra.s	loc_BDDE
0000C39C                            ; ===========================================================================
0000C39C                            
0000C39C                            loc_BDC8:
0000C39C 4A13                       		tst.b	(a3)
0000C39E 6600                       		bne.s	loc_BDD6
0000C3A0 303C 00CD                  		move.w	#$CD,d0
0000C3A4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play switch sound
0000C3AA                            
0000C3AA                            loc_BDD6:
0000C3AA 07D3                       		bset	d3,(a3)
0000C3AC 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C3B2                            
0000C3B2                            loc_BDDE:
0000C3B2 0828 0005 0028             		btst	#5,$28(a0)
0000C3B8 6700                       		beq.s	Obj32_Display
0000C3BA 5328 001E                  		subq.b	#1,$1E(a0)
0000C3BE 6A00                       		bpl.s	Obj32_Display
0000C3C0 117C 0007 001E             		move.b	#7,$1E(a0)
0000C3C6 0868 0001 001A             		bchg	#1,$1A(a0)
0000C3CC                            
0000C3CC                            Obj32_Display:
0000C3CC 6100 0000                  		bsr.w	DisplaySprite
0000C3D0 3028 0008                  		move.w	8(a0),d0
0000C3D4 0240 FF80                  		andi.w	#$FF80,d0
0000C3D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000C3DC 0441 0080                  		subi.w	#$80,d1
0000C3E0 0241 FF80                  		andi.w	#$FF80,d1
0000C3E4 9041                       		sub.w	d1,d0
0000C3E6 0C40 0280                  		cmpi.w	#$280,d0
0000C3EA 6200 0000                  		bhi.w	Obj32_Delete
0000C3EE 4E75                       		rts	
0000C3F0                            ; ===========================================================================
0000C3F0                            
0000C3F0                            Obj32_Delete:
0000C3F0 6100 0000                  		bsr.w	DeleteObject
0000C3F4 4E75                       		rts	
0000C3F6                            
0000C3F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C3F6                            
0000C3F6                            
0000C3F6                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C3F6 3F03                       		move.w	d3,-(sp)
0000C3F8 3428 0008                  		move.w	8(a0),d2
0000C3FC 3628 000C                  		move.w	$C(a0),d3
0000C400 0442 0010                  		subi.w	#$10,d2
0000C404 5143                       		subq.w	#8,d3
0000C406 383C 0020                  		move.w	#$20,d4
0000C40A 3A3C 0010                  		move.w	#$10,d5
0000C40E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C412 3C3C 005F                  		move.w	#$5F,d6
0000C416                            
0000C416                            Obj32_MZLoop:
0000C416 4A29 0001                  		tst.b	1(a1)
0000C41A 6A00                       		bpl.s	loc_BE4E
0000C41C 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C420 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C422                            
0000C422                            loc_BE4E:
0000C422 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C426 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C42A                            
0000C42A 361F                       		move.w	(sp)+,d3
0000C42C 7000                       		moveq	#0,d0
0000C42E                            
0000C42E                            locret_BE5A:
0000C42E 4E75                       		rts	
0000C430                            ; ===========================================================================
0000C430 1010                       Obj32_MZData:	dc.b $10, $10
0000C432                            ; ===========================================================================
0000C432                            
0000C432                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C432 7001                       		moveq	#1,d0
0000C434 0240 003F                  		andi.w	#$3F,d0
0000C438 D040                       		add.w	d0,d0
0000C43A 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C43E 121A                       		move.b	(a2)+,d1
0000C440 4881                       		ext.w	d1
0000C442 3029 0008                  		move.w	8(a1),d0
0000C446 9041                       		sub.w	d1,d0
0000C448 9042                       		sub.w	d2,d0
0000C44A 6400                       		bcc.s	loc_BE80
0000C44C D241                       		add.w	d1,d1
0000C44E D041                       		add.w	d1,d0
0000C450 6500                       		bcs.s	loc_BE84
0000C452 60CE                       		bra.s	loc_BE4E
0000C454                            ; ===========================================================================
0000C454                            
0000C454                            loc_BE80:
0000C454 B044                       		cmp.w	d4,d0
0000C456 62CA                       		bhi.s	loc_BE4E
0000C458                            
0000C458                            loc_BE84:
0000C458 121A                       		move.b	(a2)+,d1
0000C45A 4881                       		ext.w	d1
0000C45C 3029 000C                  		move.w	$C(a1),d0
0000C460 9041                       		sub.w	d1,d0
0000C462 9043                       		sub.w	d3,d0
0000C464 6400                       		bcc.s	loc_BE9A
0000C466 D241                       		add.w	d1,d1
0000C468 D041                       		add.w	d1,d0
0000C46A 6500                       		bcs.s	loc_BE9E
0000C46C 60B4                       		bra.s	loc_BE4E
0000C46E                            ; ===========================================================================
0000C46E                            
0000C46E                            loc_BE9A:
0000C46E B045                       		cmp.w	d5,d0
0000C470 62B0                       		bhi.s	loc_BE4E
0000C472                            
0000C472                            loc_BE9E:
0000C472 361F                       		move.w	(sp)+,d3
0000C474 7001                       		moveq	#1,d0
0000C476 4E75                       		rts	
0000C478                            ; End of function Obj32_MZBlock
0000C478                            
0000C478                            ; ===========================================================================
0000C478                            ; ---------------------------------------------------------------------------
0000C478                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C478                            ; ---------------------------------------------------------------------------
0000C478                            Map_obj32:
0000C478                            	include "_maps\obj32.asm"
0000C478                            ; ---------------------------------------------------------------------------
0000C478                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C478                            ; ---------------------------------------------------------------------------
0000C478 0000                       		dc.w byte_BEAC-Map_obj32
0000C47A 0000                       		dc.w byte_BEB7-Map_obj32
0000C47C 0000                       		dc.w byte_BEC2-Map_obj32
0000C47E 0000                       		dc.w byte_BEB7-Map_obj32
0000C480 02                         byte_BEAC:	dc.b 2
0000C481 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C486 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C48B 02                         byte_BEB7:	dc.b 2
0000C48C F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C491 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C496 02                         byte_BEC2:	dc.b 2
0000C497 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C49C F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C4A1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C4A6                            		even
0000C4A6                            		even
0000C4A6                            
0000C4A6                            ; ===========================================================================
0000C4A6                            ; ---------------------------------------------------------------------------
0000C4A6                            ; Object 33 - pushable blocks (MZ, LZ)
0000C4A6                            ; ---------------------------------------------------------------------------
0000C4A6                            
0000C4A6                            Obj33:					; XREF: Obj_Index
0000C4A6 7000                       		moveq	#0,d0
0000C4A8 1028 0024                  		move.b	$24(a0),d0
0000C4AC 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C4B0 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C4B4                            ; ===========================================================================
0000C4B4 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C4B6 0000                       		dc.w loc_BF6E-Obj33_Index
0000C4B8 0000                       		dc.w loc_C02C-Obj33_Index
0000C4BA                            
0000C4BA 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C4BC 4001                       		dc.b $40, 1
0000C4BE                            ; ===========================================================================
0000C4BE                            
0000C4BE                            Obj33_Main:				; XREF: Obj33_Index
0000C4BE 5428 0024                  		addq.b	#2,$24(a0)
0000C4C2 117C 000F 0016             		move.b	#$F,$16(a0)
0000C4C8 117C 000F 0017             		move.b	#$F,$17(a0)
0000C4CE 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C4D6 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C4DC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C4E2 6600                       		bne.s	loc_BF16
0000C4E4 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C4EA                            
0000C4EA                            loc_BF16:
0000C4EA 117C 0004 0001             		move.b	#4,1(a0)
0000C4F0 117C 0003 0018             		move.b	#3,$18(a0)
0000C4F6 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C4FC 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C502 7000                       		moveq	#0,d0
0000C504 1028 0028                  		move.b	$28(a0),d0
0000C508 D040                       		add.w	d0,d0
0000C50A 0240 000E                  		andi.w	#$E,d0
0000C50E 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C512 115A 0019                  		move.b	(a2)+,$19(a0)
0000C516 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C51A 4A28 0028                  		tst.b	$28(a0)
0000C51E 6700                       		beq.s	Obj33_ChkGone
0000C520 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C526                            
0000C526                            Obj33_ChkGone:
0000C526 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C52A 7000                       		moveq	#0,d0
0000C52C 1028 0023                  		move.b	$23(a0),d0
0000C530 6700                       		beq.s	loc_BF6E
0000C532 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C538 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C53E 6600 0000                  		bne.w	DeleteObject
0000C542                            
0000C542                            loc_BF6E:				; XREF: Obj33_Index
0000C542 4A28 0032                  		tst.b	$32(a0)
0000C546 6600 0000                  		bne.w	loc_C046
0000C54A 7200                       		moveq	#0,d1
0000C54C 1228 0019                  		move.b	$19(a0),d1
0000C550 0641 000B                  		addi.w	#$B,d1
0000C554 343C 0010                  		move.w	#$10,d2
0000C558 363C 0011                  		move.w	#$11,d3
0000C55C 3828 0008                  		move.w	8(a0),d4
0000C560 6100 0000                  		bsr.w	loc_C186
0000C564 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C56A 6600                       		bne.s	loc_BFC6	; if not, branch
0000C56C 08A8 0007 0028             		bclr	#7,$28(a0)
0000C572 3028 0008                  		move.w	8(a0),d0
0000C576 0C40 0A20                  		cmpi.w	#$A20,d0
0000C57A 6500                       		bcs.s	loc_BFC6
0000C57C 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C580 6400                       		bcc.s	loc_BFC6
0000C582 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C586 0440 001C                  		subi.w	#$1C,d0
0000C58A 3140 000C                  		move.w	d0,$C(a0)
0000C58E 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C594 08E8 0007 0028             		bset	#7,$28(a0)
0000C59A                            
0000C59A                            loc_BFC6:
0000C59A 3028 0008                  		move.w	8(a0),d0
0000C59E 0240 FF80                  		andi.w	#$FF80,d0
0000C5A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000C5A6 0441 0080                  		subi.w	#$80,d1
0000C5AA 0241 FF80                  		andi.w	#$FF80,d1
0000C5AE 9041                       		sub.w	d1,d0
0000C5B0 0C40 0280                  		cmpi.w	#$280,d0
0000C5B4 6200                       		bhi.s	loc_BFE6
0000C5B6 6000 0000                  		bra.w	DisplaySprite
0000C5BA                            ; ===========================================================================
0000C5BA                            
0000C5BA                            loc_BFE6:
0000C5BA 3028 0034                  		move.w	$34(a0),d0
0000C5BE 0240 FF80                  		andi.w	#$FF80,d0
0000C5C2 3238 F700                  		move.w	($FFFFF700).w,d1
0000C5C6 0441 0080                  		subi.w	#$80,d1
0000C5CA 0241 FF80                  		andi.w	#$FF80,d1
0000C5CE 9041                       		sub.w	d1,d0
0000C5D0 0C40 0280                  		cmpi.w	#$280,d0
0000C5D4 6200                       		bhi.s	loc_C016
0000C5D6 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C5DC 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C5E2 117C 0004 0024             		move.b	#4,$24(a0)
0000C5E8 6000                       		bra.s	loc_C02C
0000C5EA                            ; ===========================================================================
0000C5EA                            
0000C5EA                            loc_C016:
0000C5EA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C5EE 7000                       		moveq	#0,d0
0000C5F0 1028 0023                  		move.b	$23(a0),d0
0000C5F4 6700                       		beq.s	loc_C028
0000C5F6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C5FC                            
0000C5FC                            loc_C028:
0000C5FC 6000 0000                  		bra.w	DeleteObject
0000C600                            ; ===========================================================================
0000C600                            
0000C600                            loc_C02C:				; XREF: Obj33_Index
0000C600 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C604 6700                       		beq.s	locret_C044
0000C606 117C 0002 0024             		move.b	#2,$24(a0)
0000C60C 4228 0032                  		clr.b	$32(a0)
0000C610 4268 0010                  		clr.w	$10(a0)
0000C614 4268 0012                  		clr.w	$12(a0)
0000C618                            
0000C618                            locret_C044:
0000C618 4E75                       		rts	
0000C61A                            ; ===========================================================================
0000C61A                            
0000C61A                            loc_C046:				; XREF: loc_BF6E
0000C61A 3F28 0008                  		move.w	8(a0),-(sp)
0000C61E 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C624 6400                       		bcc.s	loc_C056
0000C626 6100 0000                  		bsr.w	SpeedToPos
0000C62A                            
0000C62A                            loc_C056:
0000C62A 0828 0001 0022             		btst	#1,$22(a0)
0000C630 6700                       		beq.s	loc_C0A0
0000C632 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C638 4EB9 0000 0000             		jsr	ObjHitFloor
0000C63E 4A41                       		tst.w	d1
0000C640 6A00 0000                  		bpl.w	loc_C09E
0000C644 D368 000C                  		add.w	d1,$C(a0)
0000C648 4268 0012                  		clr.w	$12(a0)
0000C64C 08A8 0001 0022             		bclr	#1,$22(a0)
0000C652 3011                       		move.w	(a1),d0
0000C654 0240 03FF                  		andi.w	#$3FF,d0
0000C658 0C40 016A                  		cmpi.w	#$16A,d0
0000C65C 6500                       		bcs.s	loc_C09E
0000C65E 3028 0030                  		move.w	$30(a0),d0
0000C662 E640                       		asr.w	#3,d0
0000C664 3140 0010                  		move.w	d0,$10(a0)
0000C668 117C 0001 0032             		move.b	#1,$32(a0)
0000C66E 4268 000E                  		clr.w	$E(a0)
0000C672                            
0000C672                            loc_C09E:
0000C672 6000                       		bra.s	loc_C0E6
0000C674                            ; ===========================================================================
0000C674                            
0000C674                            loc_C0A0:
0000C674 4A68 0010                  		tst.w	$10(a0)
0000C678 6700 0000                  		beq.w	loc_C0D6
0000C67C 6B00                       		bmi.s	loc_C0BC
0000C67E 7600                       		moveq	#0,d3
0000C680 1628 0019                  		move.b	$19(a0),d3
0000C684 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C68A 4A41                       		tst.w	d1		; has block touched a wall?
0000C68C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C68E 6000                       		bra.s	loc_C0E6
0000C690                            ; ===========================================================================
0000C690                            
0000C690                            loc_C0BC:
0000C690 7600                       		moveq	#0,d3
0000C692 1628 0019                  		move.b	$19(a0),d3
0000C696 4643                       		not.w	d3
0000C698 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C69E 4A41                       		tst.w	d1		; has block touched a wall?
0000C6A0 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C6A2 6000                       		bra.s	loc_C0E6
0000C6A4                            ; ===========================================================================
0000C6A4                            
0000C6A4                            Obj33_StopPush:
0000C6A4 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C6A8 6000                       		bra.s	loc_C0E6
0000C6AA                            ; ===========================================================================
0000C6AA                            
0000C6AA                            loc_C0D6:
0000C6AA 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C6B2 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C6B8 6400                       		bcc.s	loc_C104
0000C6BA                            
0000C6BA                            loc_C0E6:
0000C6BA 7200                       		moveq	#0,d1
0000C6BC 1228 0019                  		move.b	$19(a0),d1
0000C6C0 0641 000B                  		addi.w	#$B,d1
0000C6C4 343C 0010                  		move.w	#$10,d2
0000C6C8 363C 0011                  		move.w	#$11,d3
0000C6CC 381F                       		move.w	(sp)+,d4
0000C6CE 6100 0000                  		bsr.w	loc_C186
0000C6D2 6100                       		bsr.s	Obj33_ChkLava
0000C6D4 6000 FEC4                  		bra.w	loc_BFC6
0000C6D8                            ; ===========================================================================
0000C6D8                            
0000C6D8                            loc_C104:
0000C6D8 381F                       		move.w	(sp)+,d4
0000C6DA 43F8 D000                  		lea	($FFFFD000).w,a1
0000C6DE 08A9 0003 0022             		bclr	#3,$22(a1)
0000C6E4 08A8 0003 0022             		bclr	#3,$22(a0)
0000C6EA 6000 FECE                  		bra.w	loc_BFE6
0000C6EE                            ; ===========================================================================
0000C6EE                            
0000C6EE                            Obj33_ChkLava:
0000C6EE 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C6F4 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C6F6 343C FFE0                  		move.w	#-$20,d2
0000C6FA 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C700 6700                       		beq.s	Obj33_LoadLava
0000C702 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C708 6700                       		beq.s	Obj33_LoadLava
0000C70A 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C710 6700                       		beq.s	Obj33_LoadLava
0000C712 4E75                       		rts	
0000C714                            ; ===========================================================================
0000C714                            
0000C714                            Obj33_ChkLava2:
0000C714 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C71A 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C71C 343C 0020                  		move.w	#$20,d2
0000C720 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C726 6700                       		beq.s	Obj33_LoadLava
0000C728 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C72E 6700                       		beq.s	Obj33_LoadLava
0000C730                            
0000C730                            Obj33_NoLava:
0000C730 4E75                       		rts	
0000C732                            ; ===========================================================================
0000C732                            
0000C732                            Obj33_LoadLava:
0000C732 6100 0000                  		bsr.w	SingleObjLoad
0000C736 6600                       		bne.s	locret_C184
0000C738 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C73C 3368 0008 0008             		move.w	8(a0),8(a1)
0000C742 D569 0008                  		add.w	d2,8(a1)
0000C746 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C74C 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C752 2348 003C                  		move.l	a0,$3C(a1)
0000C756                            
0000C756                            locret_C184:
0000C756 4E75                       		rts	
0000C758                            ; ===========================================================================
0000C758                            
0000C758                            loc_C186:				; XREF: loc_BF6E
0000C758 1028 0025                  		move.b	$25(a0),d0
0000C75C 6700 0000                  		beq.w	loc_C218
0000C760 5500                       		subq.b	#2,d0
0000C762 6600                       		bne.s	loc_C1AA
0000C764 6100 B3AE                  		bsr.w	ExitPlatform
0000C768 0829 0003 0022             		btst	#3,$22(a1)
0000C76E 6600                       		bne.s	loc_C1A4
0000C770 4228 0025                  		clr.b	$25(a0)
0000C774 4E75                       		rts	
0000C776                            ; ===========================================================================
0000C776                            
0000C776                            loc_C1A4:
0000C776 3404                       		move.w	d4,d2
0000C778 6000 B8F8                  		bra.w	MvSonicOnPtfm
0000C77C                            ; ===========================================================================
0000C77C                            
0000C77C                            loc_C1AA:
0000C77C 5500                       		subq.b	#2,d0
0000C77E 6600                       		bne.s	loc_C1F2
0000C780 6100 0000                  		bsr.w	SpeedToPos
0000C784 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C78A 4EB9 0000 0000             		jsr	ObjHitFloor
0000C790 4A41                       		tst.w	d1
0000C792 6A00 0000                  		bpl.w	locret_C1F0
0000C796 D368 000C                  		add.w	d1,$C(a0)
0000C79A 4268 0012                  		clr.w	$12(a0)
0000C79E 4228 0025                  		clr.b	$25(a0)
0000C7A2 3011                       		move.w	(a1),d0
0000C7A4 0240 03FF                  		andi.w	#$3FF,d0
0000C7A8 0C40 016A                  		cmpi.w	#$16A,d0
0000C7AC 6500                       		bcs.s	locret_C1F0
0000C7AE 3028 0030                  		move.w	$30(a0),d0
0000C7B2 E640                       		asr.w	#3,d0
0000C7B4 3140 0010                  		move.w	d0,$10(a0)
0000C7B8 117C 0001 0032             		move.b	#1,$32(a0)
0000C7BE 4268 000E                  		clr.w	$E(a0)
0000C7C2                            
0000C7C2                            locret_C1F0:
0000C7C2 4E75                       		rts	
0000C7C4                            ; ===========================================================================
0000C7C4                            
0000C7C4                            loc_C1F2:
0000C7C4 6100 0000                  		bsr.w	SpeedToPos
0000C7C8 3028 0008                  		move.w	8(a0),d0
0000C7CC 0240 000C                  		andi.w	#$C,d0
0000C7D0 6600 0000                  		bne.w	locret_C2E4
0000C7D4 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C7DA 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C7E0 4268 0010                  		clr.w	$10(a0)
0000C7E4 5528 0025                  		subq.b	#2,$25(a0)
0000C7E8 4E75                       		rts	
0000C7EA                            ; ===========================================================================
0000C7EA                            
0000C7EA                            loc_C218:
0000C7EA 6100 0000                  		bsr.w	loc_FAC8
0000C7EE 4A44                       		tst.w	d4
0000C7F0 6700 0000                  		beq.w	locret_C2E4
0000C7F4 6B00 0000                  		bmi.w	locret_C2E4
0000C7F8 4A28 0032                  		tst.b	$32(a0)
0000C7FC 6700                       		beq.s	loc_C230
0000C7FE 6000 0000                  		bra.w	locret_C2E4
0000C802                            ; ===========================================================================
0000C802                            
0000C802                            loc_C230:
0000C802 4A40                       		tst.w	d0
0000C804 6700 0000                  		beq.w	locret_C2E4
0000C808 6B00                       		bmi.s	loc_C268
0000C80A 0829 0000 0022             		btst	#0,$22(a1)
0000C810 6600 0000                  		bne.w	locret_C2E4
0000C814 3F00                       		move.w	d0,-(sp)
0000C816 7600                       		moveq	#0,d3
0000C818 1628 0019                  		move.b	$19(a0),d3
0000C81C 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C822 301F                       		move.w	(sp)+,d0
0000C824 4A41                       		tst.w	d1
0000C826 6B00 0000                  		bmi.w	locret_C2E4
0000C82A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C832 7001                       		moveq	#1,d0
0000C834 323C 0040                  		move.w	#$40,d1
0000C838 6000                       		bra.s	loc_C294
0000C83A                            ; ===========================================================================
0000C83A                            
0000C83A                            loc_C268:
0000C83A 0829 0000 0022             		btst	#0,$22(a1)
0000C840 6700                       		beq.s	locret_C2E4
0000C842 3F00                       		move.w	d0,-(sp)
0000C844 7600                       		moveq	#0,d3
0000C846 1628 0019                  		move.b	$19(a0),d3
0000C84A 4643                       		not.w	d3
0000C84C 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C852 301F                       		move.w	(sp)+,d0
0000C854 4A41                       		tst.w	d1
0000C856 6B00                       		bmi.s	locret_C2E4
0000C858 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C860 70FF                       		moveq	#-1,d0
0000C862 323C FFC0                  		move.w	#-$40,d1
0000C866                            
0000C866                            loc_C294:
0000C866 43F8 D000                  		lea	($FFFFD000).w,a1
0000C86A D169 0008                  		add.w	d0,8(a1)
0000C86E 3341 0014                  		move.w	d1,$14(a1)
0000C872 337C 0000 0010             		move.w	#0,$10(a1)
0000C878 3F00                       		move.w	d0,-(sp)
0000C87A 303C 00A7                  		move.w	#$A7,d0
0000C87E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C884 301F                       		move.w	(sp)+,d0
0000C886 4A28 0028                  		tst.b	$28(a0)
0000C88A 6B00                       		bmi.s	locret_C2E4
0000C88C 3F00                       		move.w	d0,-(sp)
0000C88E 4EB9 0000 0000             		jsr	ObjHitFloor
0000C894 301F                       		move.w	(sp)+,d0
0000C896 0C41 0004                  		cmpi.w	#4,d1
0000C89A 6F00                       		ble.s	loc_C2E0
0000C89C 317C 0400 0010             		move.w	#$400,$10(a0)
0000C8A2 4A40                       		tst.w	d0
0000C8A4 6A00                       		bpl.s	loc_C2D8
0000C8A6 4468 0010                  		neg.w	$10(a0)
0000C8AA                            
0000C8AA                            loc_C2D8:
0000C8AA 117C 0006 0025             		move.b	#6,$25(a0)
0000C8B0 6000                       		bra.s	locret_C2E4
0000C8B2                            ; ===========================================================================
0000C8B2                            
0000C8B2                            loc_C2E0:
0000C8B2 D368 000C                  		add.w	d1,$C(a0)
0000C8B6                            
0000C8B6                            locret_C2E4:
0000C8B6 4E75                       		rts	
0000C8B8                            ; ===========================================================================
0000C8B8                            ; ---------------------------------------------------------------------------
0000C8B8                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C8B8                            ; ---------------------------------------------------------------------------
0000C8B8                            Map_obj33:
0000C8B8                            	include "_maps\obj33.asm"
0000C8B8                            ; ---------------------------------------------------------------------------
0000C8B8                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C8B8                            ; ---------------------------------------------------------------------------
0000C8B8 0000                       		dc.w byte_C2EA-Map_obj33
0000C8BA 0000                       		dc.w byte_C2F0-Map_obj33
0000C8BC 01                         byte_C2EA:	dc.b 1
0000C8BD F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C8C2 04                         byte_C2F0:	dc.b 4
0000C8C3 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C8C8 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C8CD F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C8D2 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C8D8 00                         		even
0000C8D8 00                         		even
0000C8D8                            
0000C8D8                            ; ===========================================================================
0000C8D8                            ; ---------------------------------------------------------------------------
0000C8D8                            ; Object 34 - zone title cards
0000C8D8                            ; ---------------------------------------------------------------------------
0000C8D8                            
0000C8D8                            Obj34:					; XREF: Obj_Index
0000C8D8 7000                       		moveq	#0,d0
0000C8DA 1028 0024                  		move.b	$24(a0),d0
0000C8DE 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C8E2 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C8E6                            ; ===========================================================================
0000C8E6 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C8E8 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C8EA 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C8EC 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C8EE                            ; ===========================================================================
0000C8EE                            
0000C8EE                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C8EE 2248                       		movea.l	a0,a1
0000C8F0 7000                       		moveq	#0,d0
0000C8F2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C8F6 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C8FC 6600                       		bne.s	Obj34_CheckFZ
0000C8FE 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C900                            
0000C900                            Obj34_CheckFZ:
0000C900 3400                       		move.w	d0,d2
0000C902 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C908 6600                       		bne.s	Obj34_LoadConfig
0000C90A 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C90C 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C90E                            
0000C90E                            Obj34_LoadConfig:
0000C90E 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C914 E948                       		lsl.w	#4,d0
0000C916 D6C0                       		adda.w	d0,a3
0000C918 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C91E 7203                       		moveq	#3,d1
0000C920                            
0000C920                            Obj34_Loop:
0000C920 12BC 0034                  		move.b	#$34,0(a1)
0000C924 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C928 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C92C 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C930 335A 000A                  		move.w	(a2)+,$A(a1)
0000C934 135A 0024                  		move.b	(a2)+,$24(a1)
0000C938 101A                       		move.b	(a2)+,d0
0000C93A 6600                       		bne.s	Obj34_ActNumber
0000C93C 1002                       		move.b	d2,d0
0000C93E                            
0000C93E                            Obj34_ActNumber:
0000C93E 0C00 0007                  		cmpi.b	#7,d0
0000C942 6600                       		bne.s	Obj34_MakeSprite
0000C944 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C948 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C94E 6600                       		bne.s	Obj34_MakeSprite
0000C950 5300                       		subq.b	#1,d0
0000C952                            
0000C952                            Obj34_MakeSprite:
0000C952 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C956 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C95E 337C 8580 0002             		move.w	#$8580,2(a1)
0000C964 137C 0078 0019             		move.b	#$78,$19(a1)
0000C96A 137C 0000 0001             		move.b	#0,1(a1)
0000C970 137C 0000 0018             		move.b	#0,$18(a1)
0000C976 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C97C 43E9 0040                  		lea	$40(a1),a1	; next object
0000C980 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C984                            
0000C984                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C984 7210                       		moveq	#$10,d1		; set horizontal speed
0000C986 3028 0030                  		move.w	$30(a0),d0
0000C98A B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C98E 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C990 6C00                       		bge.s	Obj34_Move
0000C992 4441                       		neg.w	d1
0000C994                            
0000C994                            Obj34_Move:
0000C994 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C998                            
0000C998                            loc_C3C8:
0000C998 3028 0008                  		move.w	8(a0),d0
0000C99C 6B00                       		bmi.s	locret_C3D8
0000C99E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C9A2 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C9A4 6000 0000                  		bra.w	DisplaySprite
0000C9A8                            ; ===========================================================================
0000C9A8                            
0000C9A8                            locret_C3D8:
0000C9A8 4E75                       		rts	
0000C9AA                            ; ===========================================================================
0000C9AA                            
0000C9AA                            Obj34_Wait:				; XREF: Obj34_Index
0000C9AA 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C9AE 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C9B0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C9B4 6000 0000                  		bra.w	DisplaySprite
0000C9B8                            ; ===========================================================================
0000C9B8                            
0000C9B8                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C9B8 4A28 0001                  		tst.b	1(a0)
0000C9BC 6A00                       		bpl.s	Obj34_ChangeArt
0000C9BE 7220                       		moveq	#$20,d1
0000C9C0 3028 0032                  		move.w	$32(a0),d0
0000C9C4 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C9C8 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C9CA 6C00                       		bge.s	Obj34_Move2
0000C9CC 4441                       		neg.w	d1
0000C9CE                            
0000C9CE                            Obj34_Move2:
0000C9CE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C9D2 3028 0008                  		move.w	8(a0),d0
0000C9D6 6B00                       		bmi.s	locret_C412
0000C9D8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C9DC 6400                       		bcc.s	locret_C412	; if yes, branch
0000C9DE 6000 0000                  		bra.w	DisplaySprite
0000C9E2                            ; ===========================================================================
0000C9E2                            
0000C9E2                            locret_C412:
0000C9E2 4E75                       		rts	
0000C9E4                            ; ===========================================================================
0000C9E4                            
0000C9E4                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C9E4 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C9EA 6600                       		bne.s	Obj34_Delete
0000C9EC 7002                       		moveq	#2,d0
0000C9EE 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
0000C9F4 7000                       		moveq	#0,d0
0000C9F6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C9FA 0640 0015                  		addi.w	#$15,d0
0000C9FE 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns
0000CA04                            
0000CA04                            Obj34_Delete:
0000CA04 6000 0000                  		bra.w	DeleteObject
0000CA08                            ; ===========================================================================
0000CA08 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CA0A 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CA0C 00E4                       		dc.w $E4
0000CA0E 0206                       		dc.b 2,	6
0000CA10 00EA                       		dc.w $EA
0000CA12 0207                       		dc.b 2,	7
0000CA14 00E0                       		dc.w $E0
0000CA16 020A                       		dc.b 2,	$A
0000CA18                            ; ---------------------------------------------------------------------------
0000CA18                            ; Title	card configuration data
0000CA18                            ; Format:
0000CA18                            ; 4 bytes per item (YYYY XXXX)
0000CA18                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CA18                            ; ---------------------------------------------------------------------------
0000CA18 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CA28 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CA38 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CA48 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CA58 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CA68 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CA78 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CA88                            ; ===========================================================================
0000CA88                            ; ---------------------------------------------------------------------------
0000CA88                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CA88                            ; ---------------------------------------------------------------------------
0000CA88                            
0000CA88                            Obj39:					; XREF: Obj_Index
0000CA88 7000                       		moveq	#0,d0
0000CA8A 1028 0024                  		move.b	$24(a0),d0
0000CA8E 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CA92 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CA96                            ; ===========================================================================
0000CA96 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CA98 0000                       		dc.w loc_C50C-Obj39_Index
0000CA9A 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CA9C                            ; ===========================================================================
0000CA9C                            
0000CA9C                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CA9C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CAA0 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CAA2 4E75                       		rts	
0000CAA4                            ; ===========================================================================
0000CAA4                            
0000CAA4                            Obj39_Main:
0000CAA4 5428 0024                  		addq.b	#2,$24(a0)
0000CAA8 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CAAE 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CAB4 6700                       		beq.s	loc_C4EC	; if not, branch
0000CAB6 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CABC                            
0000CABC                            loc_C4EC:
0000CABC 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CAC2 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CACA 317C 855E 0002             		move.w	#$855E,2(a0)
0000CAD0 117C 0000 0001             		move.b	#0,1(a0)
0000CAD6 117C 0000 0018             		move.b	#0,$18(a0)
0000CADC                            
0000CADC                            loc_C50C:				; XREF: Obj39_Index
0000CADC 7210                       		moveq	#$10,d1		; set horizontal speed
0000CADE 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CAE4 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CAE6 6500                       		bcs.s	Obj39_Move
0000CAE8 4441                       		neg.w	d1
0000CAEA                            
0000CAEA                            Obj39_Move:
0000CAEA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CAEE 6000 0000                  		bra.w	DisplaySprite
0000CAF2                            ; ===========================================================================
0000CAF2                            
0000CAF2                            Obj39_SetWait:				; XREF: Obj39_Main
0000CAF2 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CAF8 5428 0024                  		addq.b	#2,$24(a0)
0000CAFC 4E75                       		rts	
0000CAFE                            ; ===========================================================================
0000CAFE                            
0000CAFE                            Obj39_Wait:				; XREF: Obj39_Index
0000CAFE 1038 F605                  		move.b	($FFFFF605).w,d0
0000CB02 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CB06 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CB08 0828 0000 001A             		btst	#0,$1A(a0)
0000CB0E 6600                       		bne.s	Obj39_Display
0000CB10 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CB14 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CB16 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CB1A 6000 0000                  		bra.w	DisplaySprite
0000CB1E                            ; ===========================================================================
0000CB1E                            
0000CB1E                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CB1E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CB22 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CB24 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CB2A 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CB2E 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CB30 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CB36 6000                       		bra.s	Obj39_Display
0000CB38                            ; ===========================================================================
0000CB38                            
0000CB38                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CB38 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CB3E                            
0000CB3E                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CB3E 6000 0000                  		bra.w	DisplaySprite
0000CB42                            ; ===========================================================================
0000CB42                            ; ---------------------------------------------------------------------------
0000CB42                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CB42                            ; ---------------------------------------------------------------------------
0000CB42                            
0000CB42                            Obj3A:					; XREF: Obj_Index
0000CB42 7000                       		moveq	#0,d0
0000CB44 1028 0024                  		move.b	$24(a0),d0
0000CB48 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CB4C 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CB50                            ; ===========================================================================
0000CB50 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CB52 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CB54 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CB56 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CB58 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CB5A 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CB5C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CB5E 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CB60 0000                       		dc.w loc_C766-Obj3A_Index
0000CB62                            ; ===========================================================================
0000CB62                            
0000CB62                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CB62 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CB66 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CB68 4E75                       		rts	
0000CB6A                            ; ===========================================================================
0000CB6A                            
0000CB6A                            Obj3A_Main:
0000CB6A 2248                       		movea.l	a0,a1
0000CB6C 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CB72 7206                       		moveq	#6,d1
0000CB74                            
0000CB74                            Obj3A_Loop:
0000CB74 12BC 003A                  		move.b	#$3A,0(a1)
0000CB78 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CB7C 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CB80 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CB84 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CB88 135A 0024                  		move.b	(a2)+,$24(a1)
0000CB8C 101A                       		move.b	(a2)+,d0
0000CB8E 0C00 0006                  		cmpi.b	#6,d0
0000CB92 6600                       		bne.s	loc_C5CA
0000CB94 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CB98                            
0000CB98                            loc_C5CA:
0000CB98 1340 001A                  		move.b	d0,$1A(a1)
0000CB9C 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CBA4 337C 8580 0002             		move.w	#$8580,2(a1)
0000CBAA 137C 0000 0001             		move.b	#0,1(a1)
0000CBB0 43E9 0040                  		lea	$40(a1),a1
0000CBB4 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CBB8                            
0000CBB8                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CBB8 7210                       		moveq	#$10,d1		; set horizontal speed
0000CBBA 3028 0030                  		move.w	$30(a0),d0
0000CBBE B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CBC2 6700                       		beq.s	loc_C61A	; if yes, branch
0000CBC4 6C00                       		bge.s	Obj3A_Move
0000CBC6 4441                       		neg.w	d1
0000CBC8                            
0000CBC8                            Obj3A_Move:
0000CBC8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CBCC                            
0000CBCC                            loc_C5FE:				; XREF: loc_C61A
0000CBCC 3028 0008                  		move.w	8(a0),d0
0000CBD0 6B00                       		bmi.s	locret_C60E
0000CBD2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CBD6 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CBD8 6000 0000                  		bra.w	DisplaySprite
0000CBDC                            ; ===========================================================================
0000CBDC                            
0000CBDC                            locret_C60E:
0000CBDC 4E75                       		rts	
0000CBDE                            ; ===========================================================================
0000CBDE                            
0000CBDE                            loc_C610:				; XREF: loc_C61A
0000CBDE 117C 000E 0024             		move.b	#$E,$24(a0)
0000CBE4 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CBE8                            ; ===========================================================================
0000CBE8                            
0000CBE8                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CBE8 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CBEE 67EE                       		beq.s	loc_C610
0000CBF0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CBF6 66D4                       		bne.s	loc_C5FE
0000CBF8 5428 0024                  		addq.b	#2,$24(a0)
0000CBFC 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CC02                            
0000CC02                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CC02 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CC06 6600                       		bne.s	Obj3A_Display
0000CC08 5428 0024                  		addq.b	#2,$24(a0)
0000CC0C                            
0000CC0C                            Obj3A_Display:
0000CC0C 6000 0000                  		bra.w	DisplaySprite
0000CC10                            ; ===========================================================================
0000CC10                            
0000CC10                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CC10 6100 0000                  		bsr.w	DisplaySprite
0000CC14 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CC1A 7000                       		moveq	#0,d0
0000CC1C 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CC20 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CC22 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CC26 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CC2C                            
0000CC2C                            Obj3A_RingBonus:
0000CC2C 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CC30 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CC32 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CC36 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CC3C                            
0000CC3C                            Obj3A_ChkBonus:
0000CC3C 4A40                       		tst.w	d0		; is there any bonus?
0000CC3E 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CC40 303C 00C5                  		move.w	#$C5,d0
0000CC44 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CC4A 5428 0024                  		addq.b	#2,$24(a0)
0000CC4E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CC54 6600                       		bne.s	Obj3A_SetDelay
0000CC56 5828 0024                  		addq.b	#4,$24(a0)
0000CC5A                            
0000CC5A                            Obj3A_SetDelay:
0000CC5A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CC60                            
0000CC60                            locret_C692:
0000CC60 4E75                       		rts	
0000CC62                            ; ===========================================================================
0000CC62                            
0000CC62                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CC62 4EB9 0000 0000             		jsr	AddPoints
0000CC68 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CC6C 0200 0003                  		andi.b	#3,d0
0000CC70 66EE                       		bne.s	locret_C692
0000CC72 303C 00CD                  		move.w	#$CD,d0
0000CC76 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CC7C                            ; ===========================================================================
0000CC7C                            
0000CC7C                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CC7C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CC80 0240 0007                  		andi.w	#7,d0
0000CC84 E748                       		lsl.w	#3,d0
0000CC86 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CC8A 0241 0003                  		andi.w	#3,d1
0000CC8E D241                       		add.w	d1,d1
0000CC90 D041                       		add.w	d1,d0
0000CC92 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CC96 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CC9A 4A40                       		tst.w	d0
0000CC9C 6600                       		bne.s	Obj3A_ChkSS
0000CC9E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CCA4 6000                       		bra.s	Obj3A_Display2
0000CCA6                            ; ===========================================================================
0000CCA6                            
0000CCA6                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CCA6 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CCAA 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CCAE 6700                       		beq.s	loc_C6EA	; if not, branch
0000CCB0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CCB6 6000                       		bra.s	Obj3A_Display2
0000CCB8                            ; ===========================================================================
0000CCB8                            
0000CCB8                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CCB8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CCBE                            
0000CCBE                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CCBE 6000 0000                  		bra.w	DisplaySprite
0000CCC2                            ; ===========================================================================
0000CCC2                            ; ---------------------------------------------------------------------------
0000CCC2                            ; Level	order array
0000CCC2                            ; ---------------------------------------------------------------------------
0000CCC2                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CCF2                            		even
0000CCF2                            ; ===========================================================================
0000CCF2                            
0000CCF2                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CCF2 7220                       		moveq	#$20,d1		; set horizontal speed
0000CCF4 3028 0032                  		move.w	$32(a0),d0
0000CCF8 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CCFC 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CCFE 6C00                       		bge.s	Obj3A_Move2
0000CD00 4441                       		neg.w	d1
0000CD02                            
0000CD02                            Obj3A_Move2:
0000CD02 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD06 3028 0008                  		move.w	8(a0),d0
0000CD0A 6B00                       		bmi.s	locret_C748
0000CD0C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD10 6400                       		bcc.s	locret_C748	; if yes, branch
0000CD12 6000 0000                  		bra.w	DisplaySprite
0000CD16                            ; ===========================================================================
0000CD16                            
0000CD16                            locret_C748:
0000CD16 4E75                       		rts	
0000CD18                            ; ===========================================================================
0000CD18                            
0000CD18                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CD18 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CD1E 6600 0000                  		bne.w	DeleteObject
0000CD22 5428 0024                  		addq.b	#2,$24(a0)
0000CD26 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CD2A 303C 008D                  		move.w	#$8D,d0
0000CD2E 4EF9 0000 15BA             		jmp	(PlaySound).l	; play FZ music
0000CD34                            ; ===========================================================================
0000CD34                            
0000CD34                            loc_C766:				; XREF: Obj3A_Index
0000CD34 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CD38 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CD3E 6700 0000                  		beq.w	DeleteObject
0000CD42 4E75                       		rts	
0000CD44                            ; ===========================================================================
0000CD44 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CD4A 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CD4C FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CD52 0201                       		dc.b 2,	1
0000CD54 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CD5A 0206                       		dc.b 2,	6
0000CD5C 0520 0120 00EC             		dc.w $520, $120, $EC
0000CD62 0202                       		dc.b 2,	2
0000CD64 0540 0120 00FC             		dc.w $540, $120, $FC
0000CD6A 0203                       		dc.b 2,	3
0000CD6C 0560 0120 010C             		dc.w $560, $120, $10C
0000CD72 0204                       		dc.b 2,	4
0000CD74 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CD7A 0205                       		dc.b 2,	5
0000CD7C                            ; ===========================================================================
0000CD7C                            ; ---------------------------------------------------------------------------
0000CD7C                            ; Object 7E - special stage results screen
0000CD7C                            ; ---------------------------------------------------------------------------
0000CD7C                            
0000CD7C                            Obj7E:					; XREF: Obj_Index
0000CD7C 7000                       		moveq	#0,d0
0000CD7E 1028 0024                  		move.b	$24(a0),d0
0000CD82 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CD86 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CD8A                            ; ===========================================================================
0000CD8A 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CD8C 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CD8E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD90 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CD92 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD94 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CD96 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD98 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CD9A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD9C 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CD9E 0000                       		dc.w loc_C91A-Obj7E_Index
0000CDA0                            ; ===========================================================================
0000CDA0                            
0000CDA0                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CDA0 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CDA4 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CDA6 4E75                       		rts	
0000CDA8                            ; ===========================================================================
0000CDA8                            
0000CDA8                            Obj7E_Main:
0000CDA8 2248                       		movea.l	a0,a1
0000CDAA 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CDB0 7203                       		moveq	#3,d1
0000CDB2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CDB8 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CDBA 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CDBC                            
0000CDBC                            Obj7E_Loop:
0000CDBC 12BC 007E                  		move.b	#$7E,0(a1)
0000CDC0 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CDC4 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CDC8 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CDCC 135A 0024                  		move.b	(a2)+,$24(a1)
0000CDD0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CDD4 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CDDC 337C 8580 0002             		move.w	#$8580,2(a1)
0000CDE2 137C 0000 0001             		move.b	#0,1(a1)
0000CDE8 43E9 0040                  		lea	$40(a1),a1
0000CDEC 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CDF0                            
0000CDF0 7007                       		moveq	#7,d0
0000CDF2 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CDF6 6700                       		beq.s	loc_C842
0000CDF8 7000                       		moveq	#0,d0
0000CDFA 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CDFE 6600                       		bne.s	loc_C842	; if not, branch
0000CE00 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CE02 317C 0018 0008             		move.w	#$18,8(a0)
0000CE08 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CE0E                            
0000CE0E                            loc_C842:
0000CE0E 1140 001A                  		move.b	d0,$1A(a0)
0000CE12                            
0000CE12                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CE12 7210                       		moveq	#$10,d1		; set horizontal speed
0000CE14 3028 0030                  		move.w	$30(a0),d0
0000CE18 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CE1C 6700                       		beq.s	loc_C86C	; if yes, branch
0000CE1E 6C00                       		bge.s	Obj7E_Move
0000CE20 4441                       		neg.w	d1
0000CE22                            
0000CE22                            Obj7E_Move:
0000CE22 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE26                            
0000CE26                            loc_C85A:				; XREF: loc_C86C
0000CE26 3028 0008                  		move.w	8(a0),d0
0000CE2A 6B00                       		bmi.s	locret_C86A
0000CE2C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CE30 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CE32 6000 0000                  		bra.w	DisplaySprite
0000CE36                            ; ===========================================================================
0000CE36                            
0000CE36                            locret_C86A:
0000CE36 4E75                       		rts	
0000CE38                            ; ===========================================================================
0000CE38                            
0000CE38                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CE38 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CE3E 66E6                       		bne.s	loc_C85A
0000CE40 5428 0024                  		addq.b	#2,$24(a0)
0000CE44 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CE4A 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CE50                            
0000CE50                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CE50 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CE54 6600                       		bne.s	Obj7E_Display
0000CE56 5428 0024                  		addq.b	#2,$24(a0)
0000CE5A                            
0000CE5A                            Obj7E_Display:
0000CE5A 6000 0000                  		bra.w	DisplaySprite
0000CE5E                            ; ===========================================================================
0000CE5E                            
0000CE5E                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CE5E 6100 0000                  		bsr.w	DisplaySprite
0000CE62 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CE68 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CE6C 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CE6E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CE74 700A                       		moveq	#10,d0		; add 10 to score
0000CE76 4EB9 0000 0000             		jsr	AddPoints
0000CE7C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE80 0200 0003                  		andi.b	#3,d0
0000CE84 6600                       		bne.s	locret_C8EA
0000CE86 303C 00CD                  		move.w	#$CD,d0
0000CE8A 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CE90                            ; ===========================================================================
0000CE90                            
0000CE90                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CE90 303C 00C5                  		move.w	#$C5,d0
0000CE94 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CE9A 5428 0024                  		addq.b	#2,$24(a0)
0000CE9E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CEA4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CEAA 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CEAC 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CEB2 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CEB6                            
0000CEB6                            locret_C8EA:
0000CEB6 4E75                       		rts	
0000CEB8                            ; ===========================================================================
0000CEB8                            
0000CEB8                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CEB8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CEBE 6000 0000                  		bra.w	DisplaySprite
0000CEC2                            ; ===========================================================================
0000CEC2                            
0000CEC2                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CEC2 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CEC8 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CECE 303C 00BF                  		move.w	#$BF,d0
0000CED2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play continues music
0000CED8 5428 0024                  		addq.b	#2,$24(a0)
0000CEDC 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CEE2 6000 0000                  		bra.w	DisplaySprite
0000CEE6                            ; ===========================================================================
0000CEE6                            
0000CEE6                            loc_C91A:				; XREF: Obj7E_Index
0000CEE6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CEEA 0200 000F                  		andi.b	#$F,d0
0000CEEE 6600                       		bne.s	Obj7E_Display2
0000CEF0 0868 0000 001A             		bchg	#0,$1A(a0)
0000CEF6                            
0000CEF6                            Obj7E_Display2:
0000CEF6 6000 0000                  		bra.w	DisplaySprite
0000CEFA                            ; ===========================================================================
0000CEFA 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CF00 0200                       		dc.b 2,	0		; rountine number, frame number
0000CF02 0320 0120 0118             		dc.w $320, $120, $118
0000CF08 0201                       		dc.b 2,	1
0000CF0A 0360 0120 0128             		dc.w $360, $120, $128
0000CF10 0202                       		dc.b 2,	2
0000CF12 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CF18 0203                       		dc.b 2,	3
0000CF1A 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CF20 0206                       		dc.b 2,	6
0000CF22                            ; ===========================================================================
0000CF22                            ; ---------------------------------------------------------------------------
0000CF22                            ; Object 7F - chaos emeralds from the special stage results screen
0000CF22                            ; ---------------------------------------------------------------------------
0000CF22                            
0000CF22                            Obj7F:					; XREF: Obj_Index
0000CF22 7000                       		moveq	#0,d0
0000CF24 1028 0024                  		move.b	$24(a0),d0
0000CF28 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CF2C 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CF30                            ; ===========================================================================
0000CF30 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CF32 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CF34                            
0000CF34                            ; ---------------------------------------------------------------------------
0000CF34                            ; X-axis positions for chaos emeralds
0000CF34                            ; ---------------------------------------------------------------------------
0000CF34 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CF40                            ; ===========================================================================
0000CF40                            
0000CF40                            Obj7F_Main:				; XREF: Obj7F_Index
0000CF40 2248                       		movea.l	a0,a1
0000CF42 45F9 0000 CF34             		lea	(Obj7F_PosData).l,a2
0000CF48 7400                       		moveq	#0,d2
0000CF4A 7200                       		moveq	#0,d1
0000CF4C 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CF50 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CF52 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CF56                            
0000CF56                            Obj7F_Loop:
0000CF56 12BC 007F                  		move.b	#$7F,0(a1)
0000CF5A 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CF5E 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CF64 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CF68 1633 2000                  		move.b	(a3,d2.w),d3
0000CF6C 1343 001A                  		move.b	d3,$1A(a1)
0000CF70 1343 001C                  		move.b	d3,$1C(a1)
0000CF74 5202                       		addq.b	#1,d2
0000CF76 5429 0024                  		addq.b	#2,$24(a1)
0000CF7A 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CF82 337C 8541 0002             		move.w	#$8541,2(a1)
0000CF88 137C 0000 0001             		move.b	#0,1(a1)
0000CF8E 43E9 0040                  		lea	$40(a1),a1	; next object
0000CF92 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CF96                            
0000CF96                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CF96 1028 001A                  		move.b	$1A(a0),d0
0000CF9A 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CFA0 0C00 0006                  		cmpi.b	#6,d0
0000CFA4 6600                       		bne.s	Obj7F_Display
0000CFA6 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CFAC                            
0000CFAC                            Obj7F_Display:
0000CFAC 6000 0000                  		bra.w	DisplaySprite
0000CFB0                            ; ===========================================================================
0000CFB0                            ; ---------------------------------------------------------------------------
0000CFB0                            ; Sprite mappings - zone title cards
0000CFB0                            ; ---------------------------------------------------------------------------
0000CFB0 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CFB2 0000                       		dc.w byte_CA2C-Map_obj34
0000CFB4 0000                       		dc.w byte_CA5A-Map_obj34
0000CFB6 0000                       		dc.w byte_CA7A-Map_obj34
0000CFB8 0000                       		dc.w byte_CAA8-Map_obj34
0000CFBA 0000                       		dc.w byte_CADC-Map_obj34
0000CFBC 0000                       		dc.w byte_CB10-Map_obj34
0000CFBE 0000                       		dc.w byte_CB26-Map_obj34
0000CFC0 0000                       		dc.w byte_CB31-Map_obj34
0000CFC2 0000                       		dc.w byte_CB3C-Map_obj34
0000CFC4 0000                       		dc.w byte_CB47-Map_obj34
0000CFC6 0000                       		dc.w byte_CB8A-Map_obj34
0000CFC8 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CFC9 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CFCE F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CFD3 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CFD8 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CFDD F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CFE2 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CFE7 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CFEC F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CFF1 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CFF6 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CFFB F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000D000 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000D005 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000D006 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000D00B F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000D010 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000D015 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000D01A F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000D01F F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000D024 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D029 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000D02E F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000D033 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000D038 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000D03D F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000D042 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000D047 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000D04C F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000D051 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000D056 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000D05B F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000D060 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000D065 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000D06A F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000D06F F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000D074 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000D075 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000D07A F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000D07F F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000D084 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000D089 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D08E 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D08F F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D094 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D099 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D09E F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D0A3 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D0A8 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D0AD F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D0B2 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D0B7 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D0BC F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D0C1 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D0C6 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D0CB F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D0D0 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D0D5 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D0DA F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D0DF F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D0E4 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D0E5 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D0EA F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D0EF F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D0F4 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D0F9 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D0FE F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D103 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D108 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D10D F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D112 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D117 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D11C F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D121 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D126 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D12B F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D130 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D135 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D13A F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D13F F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D144 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D149 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D14E 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D14F F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D154 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D159 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D15E F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D163 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D168 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D16D F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D172 04                         byte_CB10:	dc.b 4			; ZONE
0000D173 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D178 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D17D F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D182 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D187 00                         		dc.b 0
0000D188 02                         byte_CB26:	dc.b 2			; ACT 1
0000D189 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D18E F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D193 02                         byte_CB31:	dc.b 2			; ACT 2
0000D194 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D199 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D19E 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D19F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D1A4 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D1A9 0D                         byte_CB47:	dc.b $D			; Oval
0000D1AA E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D1AF E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D1B4 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D1B9 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D1BE 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D1C3 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D1C8 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D1CD FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D1D2 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D1D7 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D1DC FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D1E1 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D1E6 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D1EB 00                         		dc.b 0
0000D1EC 05                         byte_CB8A:	dc.b 5			; FINAL
0000D1ED F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D1F2 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D1F7 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D1FC F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D201 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D206                            		even
0000D206                            ; ---------------------------------------------------------------------------
0000D206                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D206                            ; ---------------------------------------------------------------------------
0000D206                            Map_obj39:
0000D206                            	include "_maps\obj39.asm"
0000D206                            ; ---------------------------------------------------------------------------
0000D206                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D206                            ; ---------------------------------------------------------------------------
0000D206 0000                       		dc.w byte_CBAC-Map_obj39
0000D208 0000                       		dc.w byte_CBB7-Map_obj39
0000D20A 0000                       		dc.w byte_CBC2-Map_obj39
0000D20C 0000                       		dc.w byte_CBCD-Map_obj39
0000D20E 02                         byte_CBAC:	dc.b 2
0000D20F F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D214 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D219 02                         byte_CBB7:	dc.b 2
0000D21A F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D21F F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D224 02                         byte_CBC2:	dc.b 2
0000D225 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D22A F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D22F 02                         byte_CBCD:	dc.b 2
0000D230 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D235 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D23A                            		even
0000D23A                            		even
0000D23A                            
0000D23A                            ; ---------------------------------------------------------------------------
0000D23A                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D23A                            ; ---------------------------------------------------------------------------
0000D23A 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D23C 0000                       		dc.w byte_CC13-Map_obj3A
0000D23E 0000                       		dc.w byte_CC32-Map_obj3A
0000D240 0000                       		dc.w byte_CC51-Map_obj3A
0000D242 0000                       		dc.w byte_CC75-Map_obj3A
0000D244 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D246 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D248 FF59                       		dc.w byte_CB31-Map_obj3A
0000D24A FF64                       		dc.w byte_CB3C-Map_obj3A
0000D24C 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D24D F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D252 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D257 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D25C F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D261 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D266 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D26B F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D270 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D275 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D27A F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D27F F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D284 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D289 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D28E F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D293 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D298 06                         byte_CC13:	dc.b 6			; PASSED
0000D299 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D29E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D2A3 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D2A8 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D2AD F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D2B2 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D2B7 06                         byte_CC32:	dc.b 6			; SCORE
0000D2B8 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D2BD F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D2C2 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D2C7 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D2CC F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D2D1 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D2D6 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D2D7 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D2DC F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D2E1 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D2E6 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D2EB FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D2F0 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D2F5 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D2FA 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D2FB F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D300 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D305 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D30A F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D30F FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D314 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D319 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D31E                            		even
0000D31E                            ; ---------------------------------------------------------------------------
0000D31E                            ; Sprite mappings - special stage results screen
0000D31E                            ; ---------------------------------------------------------------------------
0000D31E 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D320 0000                       		dc.w byte_CCEE-Map_obj7E
0000D322 0000                       		dc.w byte_CD0D-Map_obj7E
0000D324 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D326 0000                       		dc.w byte_CD31-Map_obj7E
0000D328 0000                       		dc.w byte_CD46-Map_obj7E
0000D32A 0000                       		dc.w byte_CD5B-Map_obj7E
0000D32C 0000                       		dc.w byte_CD6B-Map_obj7E
0000D32E 0000                       		dc.w byte_CDA8-Map_obj7E
0000D330 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D331 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D336 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D33B F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D340 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D345 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D34A F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D34F F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D354 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D359 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D35E F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D363 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D368 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D36D F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D372 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D373 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D378 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D37D F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D382 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D387 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D38C FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D391 07                         byte_CD0D:	dc.b 7
0000D392 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D397 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D39C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D3A1 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D3A6 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D3AB F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D3B0 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D3B5 04                         byte_CD31:	dc.b 4
0000D3B6 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D3BB F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D3C0 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D3C5 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D3CA 04                         byte_CD46:	dc.b 4
0000D3CB F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D3D0 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D3D5 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D3DA F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D3DF 03                         byte_CD5B:	dc.b 3
0000D3E0 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D3E5 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D3EA F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D3EF 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D3F0 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D3F5 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D3FA F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D3FF F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D404 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D409 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D40E F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D413 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D418 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D41D F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D422 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D427 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D42C 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D42D F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D432 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D437 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D43C F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D441 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D446 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D44B F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D450 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D455 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D45A F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D45F F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D464 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D469 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D46E F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D473 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D478                            		even
0000D478                            ; ---------------------------------------------------------------------------
0000D478                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D478                            ; ---------------------------------------------------------------------------
0000D478                            Map_obj7F:
0000D478                            	include "_maps\obj7F.asm"
0000D478                            ; ---------------------------------------------------------------------------
0000D478                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D478                            ; ---------------------------------------------------------------------------
0000D478 0000                       		dc.w byte_CE02-Map_obj7F
0000D47A 0000                       		dc.w byte_CE08-Map_obj7F
0000D47C 0000                       		dc.w byte_CE0E-Map_obj7F
0000D47E 0000                       		dc.w byte_CE14-Map_obj7F
0000D480 0000                       		dc.w byte_CE1A-Map_obj7F
0000D482 0000                       		dc.w byte_CE20-Map_obj7F
0000D484 0000                       		dc.w byte_CE26-Map_obj7F
0000D486 01                         byte_CE02:	dc.b 1
0000D487 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D48C 01                         byte_CE08:	dc.b 1
0000D48D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D492 01                         byte_CE0E:	dc.b 1
0000D493 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D498 01                         byte_CE14:	dc.b 1
0000D499 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D49E 01                         byte_CE1A:	dc.b 1
0000D49F F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D4A4 01                         byte_CE20:	dc.b 1
0000D4A5 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D4AA 00                         byte_CE26:	dc.b 0			; Blank frame
0000D4AC 00                         		even
0000D4AC 00                         		even
0000D4AC                            
0000D4AC                            ; ===========================================================================
0000D4AC                            ; ---------------------------------------------------------------------------
0000D4AC                            ; Object 36 - spikes
0000D4AC                            ; ---------------------------------------------------------------------------
0000D4AC                            
0000D4AC                            Obj36:					; XREF: Obj_Index
0000D4AC 7000                       		moveq	#0,d0
0000D4AE 1028 0024                  		move.b	$24(a0),d0
0000D4B2 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D4B6 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D4BA                            ; ===========================================================================
0000D4BA 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D4BC 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D4BE                            
0000D4BE 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D4C0 0110                       		dc.b 1,	$10
0000D4C2 0204                       		dc.b 2,	4
0000D4C4 031C                       		dc.b 3,	$1C
0000D4C6 0440                       		dc.b 4,	$40
0000D4C8 0510                       		dc.b 5,	$10
0000D4CA                            ; ===========================================================================
0000D4CA                            
0000D4CA                            Obj36_Main:				; XREF: Obj36_Index
0000D4CA 5428 0024                  		addq.b	#2,$24(a0)
0000D4CE 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D4D6 317C 051B 0002             		move.w	#$51B,2(a0)
0000D4DC 0028 0004 0001             		ori.b	#4,1(a0)
0000D4E2 117C 0004 0018             		move.b	#4,$18(a0)
0000D4E8 1028 0028                  		move.b	$28(a0),d0
0000D4EC 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D4F2 0240 00F0                  		andi.w	#$F0,d0
0000D4F6 43F9 0000 D4BE             		lea	(Obj36_Var).l,a1
0000D4FC E648                       		lsr.w	#3,d0
0000D4FE D2C0                       		adda.w	d0,a1
0000D500 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D504 1159 0019                  		move.b	(a1)+,$19(a0)
0000D508 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D50E 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D514                            
0000D514                            Obj36_Solid:				; XREF: Obj36_Index
0000D514 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D518 343C 0004                  		move.w	#4,d2
0000D51C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D522 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D524 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D52A 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D52C 343C 0014                  		move.w	#$14,d2
0000D530                            
0000D530                            ; Spikes types $1x and $5x face	sideways
0000D530                            
0000D530                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D530 323C 001B                  		move.w	#$1B,d1
0000D534 3602                       		move.w	d2,d3
0000D536 5243                       		addq.w	#1,d3
0000D538 3828 0008                  		move.w	8(a0),d4
0000D53C 6100 0000                  		bsr.w	SolidObject
0000D540 0828 0003 0022             		btst	#3,$22(a0)
0000D546 6600                       		bne.s	Obj36_Display
0000D548 0C44 0001                  		cmpi.w	#1,d4
0000D54C 6700                       		beq.s	Obj36_Hurt
0000D54E 6000                       		bra.s	Obj36_Display
0000D550                            ; ===========================================================================
0000D550                            
0000D550                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D550                            
0000D550                            Obj36_Upright:				; XREF: Obj36_Solid
0000D550 7200                       		moveq	#0,d1
0000D552 1228 0019                  		move.b	$19(a0),d1
0000D556 0641 000B                  		addi.w	#$B,d1
0000D55A 343C 0010                  		move.w	#$10,d2
0000D55E 363C 0011                  		move.w	#$11,d3
0000D562 3828 0008                  		move.w	8(a0),d4
0000D566 6100 0000                  		bsr.w	SolidObject
0000D56A 0828 0003 0022             		btst	#3,$22(a0)
0000D570 6600                       		bne.s	Obj36_Hurt
0000D572 4A44                       		tst.w	d4
0000D574 6A00                       		bpl.s	Obj36_Display
0000D576                            
0000D576                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D576 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D57A 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D57C 2F08                       		move.l	a0,-(sp)
0000D57E 2448                       		movea.l	a0,a2
0000D580 41F8 D000                  		lea	($FFFFD000).w,a0
0000D584 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D58A 6400                       		bcc.s	loc_CF20
0000D58C 2628 000C                  		move.l	$C(a0),d3
0000D590 3028 0012                  		move.w	$12(a0),d0
0000D594 48C0                       		ext.l	d0
0000D596 E180                       		asl.l	#8,d0
0000D598 9680                       		sub.l	d0,d3
0000D59A 2143 000C                  		move.l	d3,$C(a0)
0000D59E 4EB9 0000 0000             		jsr	HurtSonic
0000D5A4                            
0000D5A4                            loc_CF20:
0000D5A4 205F                       		movea.l	(sp)+,a0
0000D5A6                            
0000D5A6                            Obj36_Display:
0000D5A6 6100 0000                  		bsr.w	DisplaySprite
0000D5AA 3028 0030                  		move.w	$30(a0),d0
0000D5AE 0240 FF80                  		andi.w	#$FF80,d0
0000D5B2 3238 F700                  		move.w	($FFFFF700).w,d1
0000D5B6 0441 0080                  		subi.w	#$80,d1
0000D5BA 0241 FF80                  		andi.w	#$FF80,d1
0000D5BE 9041                       		sub.w	d1,d0
0000D5C0 0C40 0280                  		cmpi.w	#$280,d0
0000D5C4 6200 0000                  		bhi.w	DeleteObject
0000D5C8 4E75                       		rts	
0000D5CA                            ; ===========================================================================
0000D5CA                            
0000D5CA                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D5CA 7000                       		moveq	#0,d0
0000D5CC 1028 0028                  		move.b	$28(a0),d0
0000D5D0 D040                       		add.w	d0,d0
0000D5D2 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D5D6 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D5DA                            ; ===========================================================================
0000D5DA 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D5DC 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D5DE 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D5E0                            ; ===========================================================================
0000D5E0                            
0000D5E0                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D5E0 4E75                       		rts			; don't move the object
0000D5E2                            ; ===========================================================================
0000D5E2                            
0000D5E2                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D5E2 6100 0000                  		bsr.w	Obj36_Wait
0000D5E6 7000                       		moveq	#0,d0
0000D5E8 1028 0034                  		move.b	$34(a0),d0
0000D5EC D068 0032                  		add.w	$32(a0),d0
0000D5F0 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D5F4 4E75                       		rts	
0000D5F6                            ; ===========================================================================
0000D5F6                            
0000D5F6                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D5F6 6100 0000                  		bsr.w	Obj36_Wait
0000D5FA 7000                       		moveq	#0,d0
0000D5FC 1028 0034                  		move.b	$34(a0),d0
0000D600 D068 0030                  		add.w	$30(a0),d0
0000D604 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D608 4E75                       		rts	
0000D60A                            ; ===========================================================================
0000D60A                            
0000D60A                            Obj36_Wait:
0000D60A 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D60E 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D610 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D614 6600                       		bne.s	locret_CFE6
0000D616 4A28 0001                  		tst.b	1(a0)
0000D61A 6A00                       		bpl.s	locret_CFE6
0000D61C 303C 00B6                  		move.w	#$B6,d0
0000D620 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D626 6000                       		bra.s	locret_CFE6
0000D628                            ; ===========================================================================
0000D628                            
0000D628                            loc_CFA4:
0000D628 4A68 0036                  		tst.w	$36(a0)
0000D62C 6700                       		beq.s	loc_CFC6
0000D62E 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D634 6400                       		bcc.s	locret_CFE6
0000D636 317C 0000 0034             		move.w	#0,$34(a0)
0000D63C 317C 0000 0036             		move.w	#0,$36(a0)
0000D642 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D648 6000                       		bra.s	locret_CFE6
0000D64A                            ; ===========================================================================
0000D64A                            
0000D64A                            loc_CFC6:
0000D64A 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D650 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D656 6500                       		bcs.s	locret_CFE6
0000D658 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D65E 317C 0001 0036             		move.w	#1,$36(a0)
0000D664 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D66A                            
0000D66A                            locret_CFE6:
0000D66A 4E75                       		rts	
0000D66C                            ; ===========================================================================
0000D66C                            ; ---------------------------------------------------------------------------
0000D66C                            ; Sprite mappings - spikes
0000D66C                            ; ---------------------------------------------------------------------------
0000D66C                            Map_obj36:
0000D66C                            	include "_maps\obj36.asm"
0000D66C                            ; ---------------------------------------------------------------------------
0000D66C                            ; Sprite mappings - spikes
0000D66C                            ; ---------------------------------------------------------------------------
0000D66C 0000                       		dc.w byte_CFF4-Map_obj36
0000D66E 0000                       		dc.w byte_D004-Map_obj36
0000D670 0000                       		dc.w byte_D014-Map_obj36
0000D672 0000                       		dc.w byte_D01A-Map_obj36
0000D674 0000                       		dc.w byte_D02A-Map_obj36
0000D676 0000                       		dc.w byte_D049-Map_obj36
0000D678 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D679 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D67E F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D683 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D688 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D689 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D68E FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D693 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D698 01                         byte_D014:	dc.b 1			; 1 spike
0000D699 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D69E 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D69F F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D6A4 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D6A9 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D6AE 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D6AF F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D6B4 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D6B9 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D6BE F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D6C3 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D6C8 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D6CD 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D6CE FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D6D4 00                         		even
0000D6D4 00                         		even
0000D6D4                            
0000D6D4                            ; ===========================================================================
0000D6D4                            ; ---------------------------------------------------------------------------
0000D6D4                            ; Object 3B - purple rock (GHZ)
0000D6D4                            ; ---------------------------------------------------------------------------
0000D6D4                            
0000D6D4                            Obj3B:					; XREF: Obj_Index
0000D6D4 7000                       		moveq	#0,d0
0000D6D6 1028 0024                  		move.b	$24(a0),d0
0000D6DA 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D6DE 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D6E2                            ; ===========================================================================
0000D6E2 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D6E4 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D6E6                            ; ===========================================================================
0000D6E6                            
0000D6E6                            Obj3B_Main:				; XREF: Obj3B_Index
0000D6E6 5428 0024                  		addq.b	#2,$24(a0)
0000D6EA 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D6F2 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D6F8 117C 0004 0001             		move.b	#4,1(a0)
0000D6FE 117C 0013 0019             		move.b	#$13,$19(a0)
0000D704 117C 0004 0018             		move.b	#4,$18(a0)
0000D70A                            
0000D70A                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D70A 323C 001B                  		move.w	#$1B,d1
0000D70E 343C 0010                  		move.w	#$10,d2
0000D712 363C 0010                  		move.w	#$10,d3
0000D716 3828 0008                  		move.w	8(a0),d4
0000D71A 6100 0000                  		bsr.w	SolidObject
0000D71E 6100 0000                  		bsr.w	DisplaySprite
0000D722 3028 0008                  		move.w	8(a0),d0
0000D726 0240 FF80                  		andi.w	#$FF80,d0
0000D72A 3238 F700                  		move.w	($FFFFF700).w,d1
0000D72E 0441 0080                  		subi.w	#$80,d1
0000D732 0241 FF80                  		andi.w	#$FF80,d1
0000D736 9041                       		sub.w	d1,d0
0000D738 0C40 0280                  		cmpi.w	#$280,d0
0000D73C 6200 0000                  		bhi.w	DeleteObject
0000D740 4E75                       		rts	
0000D742                            ; ===========================================================================
0000D742                            ; ---------------------------------------------------------------------------
0000D742                            ; Object 49 - waterfall	sound effect (GHZ)
0000D742                            ; ---------------------------------------------------------------------------
0000D742                            
0000D742                            Obj49:					; XREF: Obj_Index
0000D742 7000                       		moveq	#0,d0
0000D744 1028 0024                  		move.b	$24(a0),d0
0000D748 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D74C 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D750                            ; ===========================================================================
0000D750 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D752 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D754                            ; ===========================================================================
0000D754                            
0000D754                            Obj49_Main:				; XREF: Obj49_Index
0000D754 5428 0024                  		addq.b	#2,$24(a0)
0000D758 117C 0004 0001             		move.b	#4,1(a0)
0000D75E                            
0000D75E                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D75E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D762 0200 003F                  		andi.b	#$3F,d0
0000D766 6600                       		bne.s	Obj49_ChkDel
0000D768 303C 00D0                  		move.w	#$D0,d0
0000D76C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D772                            
0000D772                            Obj49_ChkDel:
0000D772 3028 0008                  		move.w	8(a0),d0
0000D776 0240 FF80                  		andi.w	#$FF80,d0
0000D77A 3238 F700                  		move.w	($FFFFF700).w,d1
0000D77E 0441 0080                  		subi.w	#$80,d1
0000D782 0241 FF80                  		andi.w	#$FF80,d1
0000D786 9041                       		sub.w	d1,d0
0000D788 0C40 0280                  		cmpi.w	#$280,d0
0000D78C 6200 0000                  		bhi.w	DeleteObject
0000D790 4E75                       		rts	
0000D792                            ; ===========================================================================
0000D792                            ; ---------------------------------------------------------------------------
0000D792                            ; Sprite mappings - purple rock	(GHZ)
0000D792                            ; ---------------------------------------------------------------------------
0000D792                            Map_obj3B:
0000D792                            	include "_maps\obj3B.asm"
0000D792                            ; ---------------------------------------------------------------------------
0000D792                            ; Sprite mappings - purple rock	(GHZ)
0000D792                            ; ---------------------------------------------------------------------------
0000D792 0000                       		dc.w byte_D110-Map_obj3B
0000D794 02                         byte_D110:	dc.b 2
0000D795 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D79A F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D7A0 00                         		even
0000D7A0 00                         		even
0000D7A0                            
0000D7A0                            ; ===========================================================================
0000D7A0                            ; ---------------------------------------------------------------------------
0000D7A0                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D7A0                            ; ---------------------------------------------------------------------------
0000D7A0                            
0000D7A0                            Obj3C:					; XREF: Obj_Index
0000D7A0 7000                       		moveq	#0,d0
0000D7A2 1028 0024                  		move.b	$24(a0),d0
0000D7A6 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D7AA 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D7AE 6000 0000                  		bra.w	MarkObjGone
0000D7B2                            ; ===========================================================================
0000D7B2 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D7B4 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D7B6 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D7B8                            ; ===========================================================================
0000D7B8                            
0000D7B8                            Obj3C_Main:				; XREF: Obj3C_Index
0000D7B8 5428 0024                  		addq.b	#2,$24(a0)
0000D7BC 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D7C4 317C 450F 0002             		move.w	#$450F,2(a0)
0000D7CA 117C 0004 0001             		move.b	#4,1(a0)
0000D7D0 117C 0010 0019             		move.b	#$10,$19(a0)
0000D7D6 117C 0004 0018             		move.b	#4,$18(a0)
0000D7DC 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D7E2                            
0000D7E2                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D7E2 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D7E8 323C 001B                  		move.w	#$1B,d1
0000D7EC 343C 0020                  		move.w	#$20,d2
0000D7F0 363C 0020                  		move.w	#$20,d3
0000D7F4 3828 0008                  		move.w	8(a0),d4
0000D7F8 6100 0000                  		bsr.w	SolidObject
0000D7FC 0828 0005 0022             		btst	#5,$22(a0)
0000D802 6600                       		bne.s	Obj3C_ChkRoll
0000D804                            
0000D804                            locret_D180:
0000D804 4E75                       		rts	
0000D806                            ; ===========================================================================
0000D806                            
0000D806                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D806 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D80C 66F6                       		bne.s	locret_D180	; if not, branch
0000D80E 3028 0030                  		move.w	$30(a0),d0
0000D812 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D814 4440                       		neg.w	d0
0000D816                            
0000D816                            Obj3C_ChkSpeed:
0000D816 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D81A 65E8                       		bcs.s	locret_D180	; if not, branch
0000D81C 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D822 5869 0008                  		addq.w	#4,8(a1)
0000D826 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D82C 3028 0008                  		move.w	8(a0),d0
0000D830 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D834 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D836 5169 0008                  		subq.w	#8,8(a1)
0000D83A 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D840                            
0000D840                            Obj3C_Smash:
0000D840 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D846 08A8 0005 0022             		bclr	#5,$22(a0)
0000D84C 08A9 0005 0022             		bclr	#5,$22(a1)
0000D852 7207                       		moveq	#7,d1		; load 8 fragments
0000D854 343C 0070                  		move.w	#$70,d2
0000D858 6100                       		bsr.s	SmashObject
0000D85A                            
0000D85A                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D85A 6100 0000                  		bsr.w	SpeedToPos
0000D85E 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D864 6100 0000                  		bsr.w	DisplaySprite
0000D868 4A28 0001                  		tst.b	1(a0)
0000D86C 6A00 0000                  		bpl.w	DeleteObject
0000D870 4E75                       		rts	
0000D872                            
0000D872                            ; ---------------------------------------------------------------------------
0000D872                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D872                            ; ---------------------------------------------------------------------------
0000D872                            
0000D872                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D872                            
0000D872                            
0000D872                            SmashObject:				; XREF: Obj3C_Smash
0000D872 7000                       		moveq	#0,d0
0000D874 1028 001A                  		move.b	$1A(a0),d0
0000D878 D040                       		add.w	d0,d0
0000D87A 2668 0004                  		movea.l	4(a0),a3
0000D87E D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D882 524B                       		addq.w	#1,a3
0000D884 08E8 0005 0001             		bset	#5,1(a0)
0000D88A 1810                       		move.b	0(a0),d4
0000D88C 1A28 0001                  		move.b	1(a0),d5
0000D890 2248                       		movea.l	a0,a1
0000D892 6000                       		bra.s	Smash_LoadFrag
0000D894                            ; ===========================================================================
0000D894                            
0000D894                            Smash_Loop:
0000D894 6100 0000                  		bsr.w	SingleObjLoad
0000D898 6600                       		bne.s	Smash_PlaySnd
0000D89A 5A4B                       		addq.w	#5,a3
0000D89C                            
0000D89C                            Smash_LoadFrag:				; XREF: SmashObject
0000D89C 137C 0004 0024             		move.b	#4,$24(a1)
0000D8A2 1284                       		move.b	d4,0(a1)
0000D8A4 234B 0004                  		move.l	a3,4(a1)
0000D8A8 1345 0001                  		move.b	d5,1(a1)
0000D8AC 3368 0008 0008             		move.w	8(a0),8(a1)
0000D8B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D8B8 3368 0002 0002             		move.w	2(a0),2(a1)
0000D8BE 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D8C4 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D8CA 335C 0010                  		move.w	(a4)+,$10(a1)
0000D8CE 335C 0012                  		move.w	(a4)+,$12(a1)
0000D8D2 B3C8                       		cmpa.l	a0,a1
0000D8D4 6400                       		bcc.s	loc_D268
0000D8D6 2F08                       		move.l	a0,-(sp)
0000D8D8 2049                       		movea.l	a1,a0
0000D8DA 6100 0000                  		bsr.w	SpeedToPos
0000D8DE D568 0012                  		add.w	d2,$12(a0)
0000D8E2 205F                       		movea.l	(sp)+,a0
0000D8E4 6100 0000                  		bsr.w	DisplaySprite2
0000D8E8                            
0000D8E8                            loc_D268:
0000D8E8 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D8EC                            
0000D8EC                            Smash_PlaySnd:
0000D8EC 303C 00CB                  		move.w	#$CB,d0
0000D8F0 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D8F6                            ; End of function SmashObject
0000D8F6                            
0000D8F6                            ; ===========================================================================
0000D8F6                            ; Smashed block	fragment speeds
0000D8F6                            ;
0000D8F6 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D8FA 0600 FF00                  		dc.w $600, $FF00
0000D8FE 0600 0100                  		dc.w $600, $100
0000D902 0400 0500                  		dc.w $400, $500
0000D906 0600 FA00                  		dc.w $600, $FA00
0000D90A 0800 FE00                  		dc.w $800, $FE00
0000D90E 0800 0200                  		dc.w $800, $200
0000D912 0600 0600                  		dc.w $600, $600
0000D916                            
0000D916 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D91A F800 FE00                  		dc.w $F800, $FE00
0000D91E F800 0200                  		dc.w $F800, $200
0000D922 FA00 0600                  		dc.w $FA00, $600
0000D926 FC00 FB00                  		dc.w $FC00, $FB00
0000D92A FA00 FF00                  		dc.w $FA00, $FF00
0000D92E FA00 0100                  		dc.w $FA00, $100
0000D932 FC00 0500                  		dc.w $FC00, $500
0000D936                            ; ---------------------------------------------------------------------------
0000D936                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D936                            ; ---------------------------------------------------------------------------
0000D936                            Map_obj3C:
0000D936                            	include "_maps\obj3C.asm"
0000D936                            ; ---------------------------------------------------------------------------
0000D936                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D936                            ; ---------------------------------------------------------------------------
0000D936 0000                       		dc.w byte_D2BC-Map_obj3C
0000D938 0000                       		dc.w byte_D2E5-Map_obj3C
0000D93A 0000                       		dc.w byte_D30E-Map_obj3C
0000D93C 08                         byte_D2BC:	dc.b 8
0000D93D E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D942 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D947 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D94C 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D951 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D956 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D95B 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D960 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D965 08                         byte_D2E5:	dc.b 8
0000D966 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D96B F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D970 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D975 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D97A E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D97F F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D984 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D989 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D98E 08                         byte_D30E:	dc.b 8
0000D98F E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D994 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D999 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D99E 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D9A3 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D9A8 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D9AD 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D9B2 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D9B8 00                         		even
0000D9B8 00                         		even
0000D9B8                            
0000D9B8                            ; ---------------------------------------------------------------------------
0000D9B8                            ; Object code loading subroutine
0000D9B8                            ; ---------------------------------------------------------------------------
0000D9B8                            
0000D9B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9B8                            
0000D9B8                            
0000D9B8                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D9B8 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D9BC 7E7F                       		moveq	#$7F,d7
0000D9BE 7000                       		moveq	#0,d0
0000D9C0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D9C6 6400                       		bcc.s	loc_D362
0000D9C8                            
0000D9C8                            loc_D348:
0000D9C8 1010                       		move.b	(a0),d0		; load object number from RAM
0000D9CA 6700                       		beq.s	loc_D358
0000D9CC D040                       		add.w	d0,d0
0000D9CE D040                       		add.w	d0,d0
0000D9D0 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D9D4 4E91                       		jsr	(a1)		; run the object's code
0000D9D6 7000                       		moveq	#0,d0
0000D9D8                            
0000D9D8                            loc_D358:
0000D9D8 41E8 0040                  		lea	$40(a0),a0	; next object
0000D9DC 51CF FFEA                  		dbf	d7,loc_D348
0000D9E0 4E75                       		rts	
0000D9E2                            ; ===========================================================================
0000D9E2                            
0000D9E2                            loc_D362:
0000D9E2 7E1F                       		moveq	#$1F,d7
0000D9E4 61E2                       		bsr.s	loc_D348
0000D9E6 7E5F                       		moveq	#$5F,d7
0000D9E8                            
0000D9E8                            loc_D368:
0000D9E8 7000                       		moveq	#0,d0
0000D9EA 1010                       		move.b	(a0),d0
0000D9EC 6700                       		beq.s	loc_D378
0000D9EE 4A28 0001                  		tst.b	1(a0)
0000D9F2 6A00                       		bpl.s	loc_D378
0000D9F4 6100 0000                  		bsr.w	DisplaySprite
0000D9F8                            
0000D9F8                            loc_D378:
0000D9F8 41E8 0040                  		lea	$40(a0),a0
0000D9FC                            
0000D9FC                            loc_D37C:
0000D9FC 51CF FFEA                  		dbf	d7,loc_D368
0000DA00 4E75                       		rts	
0000DA02                            ; End of function ObjectsLoad
0000DA02                            
0000DA02                            ; ===========================================================================
0000DA02                            ; ---------------------------------------------------------------------------
0000DA02                            ; Object pointers
0000DA02                            ; ---------------------------------------------------------------------------
0000DA02                            Obj_Index:
0000DA02                            	include "_inc\Object pointers.asm"
0000DA02                            ; ---------------------------------------------------------------------------
0000DA02                            ; Object pointers
0000DA02                            ; ---------------------------------------------------------------------------
0000DA02 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DA12 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DA22 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DA32 0000 0000 0000 AC48 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DA42 0000 7880 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DA52 0000 7EA6 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DA62 0000 86F4 0000 875C 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DA72 0000 8DA6 0000 9094 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DA82 0000 0000 0000 9D44 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DA92 0000 A07C 0000 A668 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DAA2 0000 99A0 0000 8E7C 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DAB2 0000 B240 0000 A85C 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DAC2 0000 BC54 0000 C302 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DAD2 0000 B7B2 0000 D4AC 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DAE2 0000 CA88 0000 CB42 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DAF2 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DB02 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DB12 0000 BF70 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DB22 0000 D742 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DB32 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DB42 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DB52 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DB62 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DB72 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DB82 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DB92 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DBA2 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DBB2 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DBC2 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DBD2 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DBE2 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DBF2 0000 0000 0000 CD7C 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DC02 0000 5398 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DC12 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DC22 0000 5A52 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DC22 0000 5A52 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DC32                            
0000DC32                            ; ---------------------------------------------------------------------------
0000DC32                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DC32                            ; ---------------------------------------------------------------------------
0000DC32                            
0000DC32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC32                            
0000DC32                            
0000DC32                            ObjectFall:
0000DC32 2428 0008                  		move.l	8(a0),d2
0000DC36 2628 000C                  		move.l	$C(a0),d3
0000DC3A 3028 0010                  		move.w	$10(a0),d0
0000DC3E 48C0                       		ext.l	d0
0000DC40 E180                       		asl.l	#8,d0
0000DC42 D480                       		add.l	d0,d2
0000DC44 3028 0012                  		move.w	$12(a0),d0
0000DC48 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DC4E 48C0                       		ext.l	d0
0000DC50 E180                       		asl.l	#8,d0
0000DC52 D680                       		add.l	d0,d3
0000DC54 2142 0008                  		move.l	d2,8(a0)
0000DC58 2143 000C                  		move.l	d3,$C(a0)
0000DC5C 4E75                       		rts	
0000DC5E                            ; End of function ObjectFall
0000DC5E                            
0000DC5E                            ; ---------------------------------------------------------------------------
0000DC5E                            ; Subroutine translating object	speed to update	object position
0000DC5E                            ; ---------------------------------------------------------------------------
0000DC5E                            
0000DC5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC5E                            
0000DC5E                            
0000DC5E                            SpeedToPos:
0000DC5E 2428 0008                  		move.l	8(a0),d2
0000DC62 2628 000C                  		move.l	$C(a0),d3
0000DC66 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DC6A 48C0                       		ext.l	d0
0000DC6C E180                       		asl.l	#8,d0		; multiply speed by $100
0000DC6E D480                       		add.l	d0,d2		; add to x-axis	position
0000DC70 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DC74 48C0                       		ext.l	d0
0000DC76 E180                       		asl.l	#8,d0		; multiply by $100
0000DC78 D680                       		add.l	d0,d3		; add to y-axis	position
0000DC7A 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DC7E 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DC82 4E75                       		rts	
0000DC84                            ; End of function SpeedToPos
0000DC84                            
0000DC84                            ; ---------------------------------------------------------------------------
0000DC84                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DC84                            ; ---------------------------------------------------------------------------
0000DC84                            
0000DC84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC84                            
0000DC84                            
0000DC84                            DisplaySprite:
0000DC84 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DC88 3028 0018                  		move.w	$18(a0),d0
0000DC8C E248                       		lsr.w	#1,d0
0000DC8E 0240 0380                  		andi.w	#$380,d0
0000DC92 D2C0                       		adda.w	d0,a1
0000DC94 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DC98 6400                       		bcc.s	locret_D620
0000DC9A 5451                       		addq.w	#2,(a1)
0000DC9C D2D1                       		adda.w	(a1),a1
0000DC9E 3288                       		move.w	a0,(a1)
0000DCA0                            
0000DCA0                            locret_D620:
0000DCA0 4E75                       		rts	
0000DCA2                            ; End of function DisplaySprite
0000DCA2                            
0000DCA2                            ; ---------------------------------------------------------------------------
0000DCA2                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DCA2                            ; ---------------------------------------------------------------------------
0000DCA2                            
0000DCA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCA2                            
0000DCA2                            
0000DCA2                            DisplaySprite2:
0000DCA2 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DCA6 3029 0018                  		move.w	$18(a1),d0
0000DCAA E248                       		lsr.w	#1,d0
0000DCAC 0240 0380                  		andi.w	#$380,d0
0000DCB0 D4C0                       		adda.w	d0,a2
0000DCB2 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DCB6 6400                       		bcc.s	locret_D63E
0000DCB8 5452                       		addq.w	#2,(a2)
0000DCBA D4D2                       		adda.w	(a2),a2
0000DCBC 3489                       		move.w	a1,(a2)
0000DCBE                            
0000DCBE                            locret_D63E:
0000DCBE 4E75                       		rts	
0000DCC0                            ; End of function DisplaySprite2
0000DCC0                            
0000DCC0                            ; ---------------------------------------------------------------------------
0000DCC0                            ; Subroutine to	delete an object
0000DCC0                            ; ---------------------------------------------------------------------------
0000DCC0                            
0000DCC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCC0                            
0000DCC0                            
0000DCC0                            DeleteObject:
0000DCC0 2248                       		movea.l	a0,a1
0000DCC2                            
0000DCC2                            DeleteObject2:
0000DCC2 7200                       		moveq	#0,d1
0000DCC4 700F                       		moveq	#$F,d0
0000DCC6                            
0000DCC6                            loc_D646:
0000DCC6 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DCC8 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DCCC 4E75                       		rts	
0000DCCE                            ; End of function DeleteObject
0000DCCE                            
0000DCCE                            ; ===========================================================================
0000DCCE 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DCD2 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DCD6 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DCDA 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DCDE                            ; ---------------------------------------------------------------------------
0000DCDE                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DCDE                            ; ---------------------------------------------------------------------------
0000DCDE                            
0000DCDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCDE                            
0000DCDE                            
0000DCDE                            BuildSprites:				; XREF: TitleScreen; et al
0000DCDE 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DCE2 7A00                       		moveq	#0,d5
0000DCE4 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DCE8 7E07                       		moveq	#7,d7
0000DCEA                            
0000DCEA                            loc_D66A:
0000DCEA 4A54                       		tst.w	(a4)
0000DCEC 6700 0000                  		beq.w	loc_D72E
0000DCF0 7C02                       		moveq	#2,d6
0000DCF2                            
0000DCF2                            loc_D672:
0000DCF2 3074 6000                  		movea.w	(a4,d6.w),a0
0000DCF6 4A10                       		tst.b	(a0)
0000DCF8 6700 0000                  		beq.w	loc_D726
0000DCFC 08A8 0007 0001             		bclr	#7,1(a0)
0000DD02 1028 0001                  		move.b	1(a0),d0
0000DD06 1800                       		move.b	d0,d4
0000DD08 0240 000C                  		andi.w	#$C,d0
0000DD0C 6700                       		beq.s	loc_D6DE
0000DD0E 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DD12 7000                       		moveq	#0,d0
0000DD14 1028 0019                  		move.b	$19(a0),d0
0000DD18 3628 0008                  		move.w	8(a0),d3
0000DD1C 9651                       		sub.w	(a1),d3
0000DD1E 3203                       		move.w	d3,d1
0000DD20 D240                       		add.w	d0,d1
0000DD22 6B00 0000                  		bmi.w	loc_D726
0000DD26 3203                       		move.w	d3,d1
0000DD28 9240                       		sub.w	d0,d1
0000DD2A 0C41 0140                  		cmpi.w	#$140,d1
0000DD2E 6C00                       		bge.s	loc_D726
0000DD30 0643 0080                  		addi.w	#$80,d3
0000DD34 0804 0004                  		btst	#4,d4
0000DD38 6700                       		beq.s	loc_D6E8
0000DD3A 7000                       		moveq	#0,d0
0000DD3C 1028 0016                  		move.b	$16(a0),d0
0000DD40 3428 000C                  		move.w	$C(a0),d2
0000DD44 9469 0004                  		sub.w	4(a1),d2
0000DD48 3202                       		move.w	d2,d1
0000DD4A D240                       		add.w	d0,d1
0000DD4C 6B00                       		bmi.s	loc_D726
0000DD4E 3202                       		move.w	d2,d1
0000DD50 9240                       		sub.w	d0,d1
0000DD52 0C41 00E0                  		cmpi.w	#$E0,d1
0000DD56 6C00                       		bge.s	loc_D726
0000DD58 0642 0080                  		addi.w	#$80,d2
0000DD5C 6000                       		bra.s	loc_D700
0000DD5E                            ; ===========================================================================
0000DD5E                            
0000DD5E                            loc_D6DE:
0000DD5E 3428 000A                  		move.w	$A(a0),d2
0000DD62 3628 0008                  		move.w	8(a0),d3
0000DD66 6000                       		bra.s	loc_D700
0000DD68                            ; ===========================================================================
0000DD68                            
0000DD68                            loc_D6E8:
0000DD68 3428 000C                  		move.w	$C(a0),d2
0000DD6C 9469 0004                  		sub.w	4(a1),d2
0000DD70 0642 0080                  		addi.w	#$80,d2
0000DD74 0C42 0060                  		cmpi.w	#$60,d2
0000DD78 6500                       		bcs.s	loc_D726
0000DD7A 0C42 0180                  		cmpi.w	#$180,d2
0000DD7E 6400                       		bcc.s	loc_D726
0000DD80                            
0000DD80                            loc_D700:
0000DD80 2268 0004                  		movea.l	4(a0),a1
0000DD84 7200                       		moveq	#0,d1
0000DD86 0804 0005                  		btst	#5,d4
0000DD8A 6600                       		bne.s	loc_D71C
0000DD8C 1228 001A                  		move.b	$1A(a0),d1
0000DD90 D201                       		add.b	d1,d1
0000DD92 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DD96 1219                       		move.b	(a1)+,d1
0000DD98 5301                       		subq.b	#1,d1
0000DD9A 6B00                       		bmi.s	loc_D720
0000DD9C                            
0000DD9C                            loc_D71C:
0000DD9C 6100 0000                  		bsr.w	sub_D750
0000DDA0                            
0000DDA0                            loc_D720:
0000DDA0 08E8 0007 0001             		bset	#7,1(a0)
0000DDA6                            
0000DDA6                            loc_D726:
0000DDA6 5446                       		addq.w	#2,d6
0000DDA8 5554                       		subq.w	#2,(a4)
0000DDAA 6600 FF46                  		bne.w	loc_D672
0000DDAE                            
0000DDAE                            loc_D72E:
0000DDAE 49EC 0080                  		lea	$80(a4),a4
0000DDB2 51CF FF36                  		dbf	d7,loc_D66A
0000DDB6 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DDBA 0C05 0050                  		cmpi.b	#$50,d5
0000DDBE 6700                       		beq.s	loc_D748
0000DDC0 24BC 0000 0000             		move.l	#0,(a2)
0000DDC6 4E75                       		rts	
0000DDC8                            ; ===========================================================================
0000DDC8                            
0000DDC8                            loc_D748:
0000DDC8 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DDCE 4E75                       		rts	
0000DDD0                            ; End of function BuildSprites
0000DDD0                            
0000DDD0                            
0000DDD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDD0                            
0000DDD0                            
0000DDD0                            sub_D750:				; XREF: BuildSprites
0000DDD0 3668 0002                  		movea.w	2(a0),a3
0000DDD4 0804 0000                  		btst	#0,d4
0000DDD8 6600                       		bne.s	loc_D796
0000DDDA 0804 0001                  		btst	#1,d4
0000DDDE 6600 0000                  		bne.w	loc_D7E4
0000DDE2                            ; End of function sub_D750
0000DDE2                            
0000DDE2                            
0000DDE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDE2                            
0000DDE2                            
0000DDE2                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DDE2 0C05 0050                  		cmpi.b	#$50,d5
0000DDE6 6700                       		beq.s	locret_D794
0000DDE8 1019                       		move.b	(a1)+,d0
0000DDEA 4880                       		ext.w	d0
0000DDEC D042                       		add.w	d2,d0
0000DDEE 34C0                       		move.w	d0,(a2)+
0000DDF0 14D9                       		move.b	(a1)+,(a2)+
0000DDF2 5205                       		addq.b	#1,d5
0000DDF4 14C5                       		move.b	d5,(a2)+
0000DDF6 1019                       		move.b	(a1)+,d0
0000DDF8 E148                       		lsl.w	#8,d0
0000DDFA 1019                       		move.b	(a1)+,d0
0000DDFC D04B                       		add.w	a3,d0
0000DDFE 34C0                       		move.w	d0,(a2)+
0000DE00 1019                       		move.b	(a1)+,d0
0000DE02 4880                       		ext.w	d0
0000DE04 D043                       		add.w	d3,d0
0000DE06 0240 01FF                  		andi.w	#$1FF,d0
0000DE0A 6600                       		bne.s	loc_D78E
0000DE0C 5240                       		addq.w	#1,d0
0000DE0E                            
0000DE0E                            loc_D78E:
0000DE0E 34C0                       		move.w	d0,(a2)+
0000DE10 51C9 FFD0                  		dbf	d1,sub_D762
0000DE14                            
0000DE14                            locret_D794:
0000DE14 4E75                       		rts	
0000DE16                            ; End of function sub_D762
0000DE16                            
0000DE16                            ; ===========================================================================
0000DE16                            
0000DE16                            loc_D796:
0000DE16 0804 0001                  		btst	#1,d4
0000DE1A 6600 0000                  		bne.w	loc_D82A
0000DE1E                            
0000DE1E                            loc_D79E:
0000DE1E 0C05 0050                  		cmpi.b	#$50,d5
0000DE22 6700                       		beq.s	locret_D7E2
0000DE24 1019                       		move.b	(a1)+,d0
0000DE26 4880                       		ext.w	d0
0000DE28 D042                       		add.w	d2,d0
0000DE2A 34C0                       		move.w	d0,(a2)+
0000DE2C 1819                       		move.b	(a1)+,d4
0000DE2E 14C4                       		move.b	d4,(a2)+
0000DE30 5205                       		addq.b	#1,d5
0000DE32 14C5                       		move.b	d5,(a2)+
0000DE34 1019                       		move.b	(a1)+,d0
0000DE36 E148                       		lsl.w	#8,d0
0000DE38 1019                       		move.b	(a1)+,d0
0000DE3A D04B                       		add.w	a3,d0
0000DE3C 0A40 0800                  		eori.w	#$800,d0
0000DE40 34C0                       		move.w	d0,(a2)+
0000DE42 1019                       		move.b	(a1)+,d0
0000DE44 4880                       		ext.w	d0
0000DE46 4440                       		neg.w	d0
0000DE48 D804                       		add.b	d4,d4
0000DE4A 0244 0018                  		andi.w	#$18,d4
0000DE4E 5044                       		addq.w	#8,d4
0000DE50 9044                       		sub.w	d4,d0
0000DE52 D043                       		add.w	d3,d0
0000DE54 0240 01FF                  		andi.w	#$1FF,d0
0000DE58 6600                       		bne.s	loc_D7DC
0000DE5A 5240                       		addq.w	#1,d0
0000DE5C                            
0000DE5C                            loc_D7DC:
0000DE5C 34C0                       		move.w	d0,(a2)+
0000DE5E 51C9 FFBE                  		dbf	d1,loc_D79E
0000DE62                            
0000DE62                            locret_D7E2:
0000DE62 4E75                       		rts	
0000DE64                            ; ===========================================================================
0000DE64                            
0000DE64                            loc_D7E4:				; XREF: sub_D750
0000DE64 0C05 0050                  		cmpi.b	#$50,d5
0000DE68 6700                       		beq.s	locret_D828
0000DE6A 1019                       		move.b	(a1)+,d0
0000DE6C 1811                       		move.b	(a1),d4
0000DE6E 4880                       		ext.w	d0
0000DE70 4440                       		neg.w	d0
0000DE72 E70C                       		lsl.b	#3,d4
0000DE74 0244 0018                  		andi.w	#$18,d4
0000DE78 5044                       		addq.w	#8,d4
0000DE7A 9044                       		sub.w	d4,d0
0000DE7C D042                       		add.w	d2,d0
0000DE7E 34C0                       		move.w	d0,(a2)+
0000DE80 14D9                       		move.b	(a1)+,(a2)+
0000DE82 5205                       		addq.b	#1,d5
0000DE84 14C5                       		move.b	d5,(a2)+
0000DE86 1019                       		move.b	(a1)+,d0
0000DE88 E148                       		lsl.w	#8,d0
0000DE8A 1019                       		move.b	(a1)+,d0
0000DE8C D04B                       		add.w	a3,d0
0000DE8E 0A40 1000                  		eori.w	#$1000,d0
0000DE92 34C0                       		move.w	d0,(a2)+
0000DE94 1019                       		move.b	(a1)+,d0
0000DE96 4880                       		ext.w	d0
0000DE98 D043                       		add.w	d3,d0
0000DE9A 0240 01FF                  		andi.w	#$1FF,d0
0000DE9E 6600                       		bne.s	loc_D822
0000DEA0 5240                       		addq.w	#1,d0
0000DEA2                            
0000DEA2                            loc_D822:
0000DEA2 34C0                       		move.w	d0,(a2)+
0000DEA4 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DEA8                            
0000DEA8                            locret_D828:
0000DEA8 4E75                       		rts	
0000DEAA                            ; ===========================================================================
0000DEAA                            
0000DEAA                            loc_D82A:
0000DEAA 0C05 0050                  		cmpi.b	#$50,d5
0000DEAE 6700                       		beq.s	locret_D87C
0000DEB0 1019                       		move.b	(a1)+,d0
0000DEB2 1811                       		move.b	(a1),d4
0000DEB4 4880                       		ext.w	d0
0000DEB6 4440                       		neg.w	d0
0000DEB8 E70C                       		lsl.b	#3,d4
0000DEBA 0244 0018                  		andi.w	#$18,d4
0000DEBE 5044                       		addq.w	#8,d4
0000DEC0 9044                       		sub.w	d4,d0
0000DEC2 D042                       		add.w	d2,d0
0000DEC4 34C0                       		move.w	d0,(a2)+
0000DEC6 1819                       		move.b	(a1)+,d4
0000DEC8 14C4                       		move.b	d4,(a2)+
0000DECA 5205                       		addq.b	#1,d5
0000DECC 14C5                       		move.b	d5,(a2)+
0000DECE 1019                       		move.b	(a1)+,d0
0000DED0 E148                       		lsl.w	#8,d0
0000DED2 1019                       		move.b	(a1)+,d0
0000DED4 D04B                       		add.w	a3,d0
0000DED6 0A40 1800                  		eori.w	#$1800,d0
0000DEDA 34C0                       		move.w	d0,(a2)+
0000DEDC 1019                       		move.b	(a1)+,d0
0000DEDE 4880                       		ext.w	d0
0000DEE0 4440                       		neg.w	d0
0000DEE2 D804                       		add.b	d4,d4
0000DEE4 0244 0018                  		andi.w	#$18,d4
0000DEE8 5044                       		addq.w	#8,d4
0000DEEA 9044                       		sub.w	d4,d0
0000DEEC D043                       		add.w	d3,d0
0000DEEE 0240 01FF                  		andi.w	#$1FF,d0
0000DEF2 6600                       		bne.s	loc_D876
0000DEF4 5240                       		addq.w	#1,d0
0000DEF6                            
0000DEF6                            loc_D876:
0000DEF6 34C0                       		move.w	d0,(a2)+
0000DEF8 51C9 FFB0                  		dbf	d1,loc_D82A
0000DEFC                            
0000DEFC                            locret_D87C:
0000DEFC 4E75                       		rts	
0000DEFE                            ; ---------------------------------------------------------------------------
0000DEFE                            ; Subroutine to	check if an object is on the screen
0000DEFE                            ; ---------------------------------------------------------------------------
0000DEFE                            
0000DEFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEFE                            
0000DEFE                            
0000DEFE                            ChkObjOnScreen:
0000DEFE 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DF02 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DF06 6B00                       		bmi.s	NotOnScreen
0000DF08 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DF0C 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DF0E                            
0000DF0E 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DF12 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DF16 6B00                       		bmi.s	NotOnScreen
0000DF18 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DF1C 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DF1E                            
0000DF1E 7000                       		moveq	#0,d0		; set flag to 0
0000DF20 4E75                       		rts	
0000DF22                            ; ===========================================================================
0000DF22                            
0000DF22                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DF22 7001                       		moveq	#1,d0		; set flag to 1
0000DF24 4E75                       		rts	
0000DF26                            ; End of function ChkObjOnScreen
0000DF26                            
0000DF26                            
0000DF26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF26                            
0000DF26                            
0000DF26                            ChkObjOnScreen2:
0000DF26 7200                       		moveq	#0,d1
0000DF28 1228 0019                  		move.b	$19(a0),d1
0000DF2C 3028 0008                  		move.w	8(a0),d0
0000DF30 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DF34 D041                       		add.w	d1,d0
0000DF36 6B00                       		bmi.s	NotOnScreen2
0000DF38 D241                       		add.w	d1,d1
0000DF3A 9041                       		sub.w	d1,d0
0000DF3C 0C40 0140                  		cmpi.w	#320,d0
0000DF40 6C00                       		bge.s	NotOnScreen2
0000DF42                            
0000DF42 3228 000C                  		move.w	$C(a0),d1
0000DF46 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DF4A 6B00                       		bmi.s	NotOnScreen2
0000DF4C 0C41 00E0                  		cmpi.w	#224,d1
0000DF50 6C00                       		bge.s	NotOnScreen2
0000DF52                            
0000DF52 7000                       		moveq	#0,d0
0000DF54 4E75                       		rts	
0000DF56                            ; ===========================================================================
0000DF56                            
0000DF56                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DF56 7001                       		moveq	#1,d0
0000DF58 4E75                       		rts	
0000DF5A                            ; End of function ChkObjOnScreen2
0000DF5A                            
0000DF5A                            ; ---------------------------------------------------------------------------
0000DF5A                            ; Subroutine to	load a level's objects
0000DF5A                            ; ---------------------------------------------------------------------------
0000DF5A                            
0000DF5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF5A                            
0000DF5A                            
0000DF5A                            ObjPosLoad:				; XREF: Level; et al
0000DF5A 7000                       		moveq	#0,d0
0000DF5C 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DF60 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DF64 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DF68                            ; End of function ObjPosLoad
0000DF68                            
0000DF68                            ; ===========================================================================
0000DF68 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DF6A 0000                       		dc.w OPL_Next-OPL_Index
0000DF6C                            ; ===========================================================================
0000DF6C                            
0000DF6C                            OPL_Main:				; XREF: OPL_Index
0000DF6C 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DF70 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DF74 ED08                       		lsl.b	#6,d0
0000DF76 E848                       		lsr.w	#4,d0
0000DF78 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DF7E 2248                       		movea.l	a0,a1
0000DF80 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DF84 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF88 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF8C D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DF90 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DF94 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DF98 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF9C 34FC 0101                  		move.w	#$101,(a2)+
0000DFA0 303C 005E                  		move.w	#$5E,d0
0000DFA4                            
0000DFA4                            OPL_ClrList:
0000DFA4 429A                       		clr.l	(a2)+
0000DFA6 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DFAA                            
0000DFAA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DFAE 7400                       		moveq	#0,d2
0000DFB0 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DFB4 0446 0080                  		subi.w	#$80,d6
0000DFB8 6400                       		bcc.s	loc_D93C
0000DFBA 7C00                       		moveq	#0,d6
0000DFBC                            
0000DFBC                            loc_D93C:
0000DFBC 0246 FF80                  		andi.w	#$FF80,d6
0000DFC0 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DFC4                            
0000DFC4                            loc_D944:
0000DFC4 BC50                       		cmp.w	(a0),d6
0000DFC6 6300                       		bls.s	loc_D956
0000DFC8 4A28 0004                  		tst.b	4(a0)
0000DFCC 6A00                       		bpl.s	loc_D952
0000DFCE 1412                       		move.b	(a2),d2
0000DFD0 5212                       		addq.b	#1,(a2)
0000DFD2                            
0000DFD2                            loc_D952:
0000DFD2 5C48                       		addq.w	#6,a0
0000DFD4 60EE                       		bra.s	loc_D944
0000DFD6                            ; ===========================================================================
0000DFD6                            
0000DFD6                            loc_D956:
0000DFD6 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DFDA 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DFDE 0446 0080                  		subi.w	#$80,d6
0000DFE2 6500                       		bcs.s	loc_D976
0000DFE4                            
0000DFE4                            loc_D964:
0000DFE4 BC50                       		cmp.w	(a0),d6
0000DFE6 6300                       		bls.s	loc_D976
0000DFE8 4A28 0004                  		tst.b	4(a0)
0000DFEC 6A00                       		bpl.s	loc_D972
0000DFEE 522A 0001                  		addq.b	#1,1(a2)
0000DFF2                            
0000DFF2                            loc_D972:
0000DFF2 5C48                       		addq.w	#6,a0
0000DFF4 60EE                       		bra.s	loc_D964
0000DFF6                            ; ===========================================================================
0000DFF6                            
0000DFF6                            loc_D976:
0000DFF6 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DFFA 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E000                            
0000E000                            OPL_Next:				; XREF: OPL_Index
0000E000 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E004 7400                       		moveq	#0,d2
0000E006 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E00A 0246 FF80                  		andi.w	#$FF80,d6
0000E00E BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E012 6700 0000                  		beq.w	locret_DA3A
0000E016 6C00                       		bge.s	loc_D9F6
0000E018 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E01C 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E020 0446 0080                  		subi.w	#$80,d6
0000E024 6500                       		bcs.s	loc_D9D2
0000E026                            
0000E026                            loc_D9A6:
0000E026 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E02A 6C00                       		bge.s	loc_D9D2
0000E02C 5D48                       		subq.w	#6,a0
0000E02E 4A28 0004                  		tst.b	4(a0)
0000E032 6A00                       		bpl.s	loc_D9BC
0000E034 532A 0001                  		subq.b	#1,1(a2)
0000E038 142A 0001                  		move.b	1(a2),d2
0000E03C                            
0000E03C                            loc_D9BC:
0000E03C 6100 0000                  		bsr.w	loc_DA3C
0000E040 6600                       		bne.s	loc_D9C6
0000E042 5D48                       		subq.w	#6,a0
0000E044 60E0                       		bra.s	loc_D9A6
0000E046                            ; ===========================================================================
0000E046                            
0000E046                            loc_D9C6:
0000E046 4A28 0004                  		tst.b	4(a0)
0000E04A 6A00                       		bpl.s	loc_D9D0
0000E04C 522A 0001                  		addq.b	#1,1(a2)
0000E050                            
0000E050                            loc_D9D0:
0000E050 5C48                       		addq.w	#6,a0
0000E052                            
0000E052                            loc_D9D2:
0000E052 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E056 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E05A 0646 0300                  		addi.w	#$300,d6
0000E05E                            
0000E05E                            loc_D9DE:
0000E05E BC68 FFFA                  		cmp.w	-6(a0),d6
0000E062 6E00                       		bgt.s	loc_D9F0
0000E064 4A28 FFFE                  		tst.b	-2(a0)
0000E068 6A00                       		bpl.s	loc_D9EC
0000E06A 5312                       		subq.b	#1,(a2)
0000E06C                            
0000E06C                            loc_D9EC:
0000E06C 5D48                       		subq.w	#6,a0
0000E06E 60EE                       		bra.s	loc_D9DE
0000E070                            ; ===========================================================================
0000E070                            
0000E070                            loc_D9F0:
0000E070 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E074 4E75                       		rts	
0000E076                            ; ===========================================================================
0000E076                            
0000E076                            loc_D9F6:
0000E076 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E07A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E07E 0646 0280                  		addi.w	#$280,d6
0000E082                            
0000E082                            loc_DA02:
0000E082 BC50                       		cmp.w	(a0),d6
0000E084 6300                       		bls.s	loc_DA16
0000E086 4A28 0004                  		tst.b	4(a0)
0000E08A 6A00                       		bpl.s	loc_DA10
0000E08C 1412                       		move.b	(a2),d2
0000E08E 5212                       		addq.b	#1,(a2)
0000E090                            
0000E090                            loc_DA10:
0000E090 6100 0000                  		bsr.w	loc_DA3C
0000E094 67EC                       		beq.s	loc_DA02
0000E096                            
0000E096                            loc_DA16:
0000E096 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E09A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E09E 0446 0300                  		subi.w	#$300,d6
0000E0A2 6500                       		bcs.s	loc_DA36
0000E0A4                            
0000E0A4                            loc_DA24:
0000E0A4 BC50                       		cmp.w	(a0),d6
0000E0A6 6300                       		bls.s	loc_DA36
0000E0A8 4A28 0004                  		tst.b	4(a0)
0000E0AC 6A00                       		bpl.s	loc_DA32
0000E0AE 522A 0001                  		addq.b	#1,1(a2)
0000E0B2                            
0000E0B2                            loc_DA32:
0000E0B2 5C48                       		addq.w	#6,a0
0000E0B4 60EE                       		bra.s	loc_DA24
0000E0B6                            ; ===========================================================================
0000E0B6                            
0000E0B6                            loc_DA36:
0000E0B6 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E0BA                            
0000E0BA                            locret_DA3A:
0000E0BA 4E75                       		rts	
0000E0BC                            ; ===========================================================================
0000E0BC                            
0000E0BC                            loc_DA3C:
0000E0BC 4A28 0004                  		tst.b	4(a0)
0000E0C0 6A00                       		bpl.s	OPL_MakeItem
0000E0C2 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E0C8 6700                       		beq.s	OPL_MakeItem
0000E0CA 5C48                       		addq.w	#6,a0
0000E0CC 7000                       		moveq	#0,d0
0000E0CE 4E75                       		rts	
0000E0D0                            ; ===========================================================================
0000E0D0                            
0000E0D0                            OPL_MakeItem:
0000E0D0 6100 0000                  		bsr.w	SingleObjLoad
0000E0D4 6600                       		bne.s	locret_DA8A
0000E0D6 3358 0008                  		move.w	(a0)+,8(a1)
0000E0DA 3018                       		move.w	(a0)+,d0
0000E0DC 3200                       		move.w	d0,d1
0000E0DE 0240 0FFF                  		andi.w	#$FFF,d0
0000E0E2 3340 000C                  		move.w	d0,$C(a1)
0000E0E6 E559                       		rol.w	#2,d1
0000E0E8 0201 0003                  		andi.b	#3,d1
0000E0EC 1341 0001                  		move.b	d1,1(a1)
0000E0F0 1341 0022                  		move.b	d1,$22(a1)
0000E0F4 1018                       		move.b	(a0)+,d0
0000E0F6 6A00                       		bpl.s	loc_DA80
0000E0F8 0200 007F                  		andi.b	#$7F,d0
0000E0FC 1342 0023                  		move.b	d2,$23(a1)
0000E100                            
0000E100                            loc_DA80:
0000E100 1280                       		move.b	d0,0(a1)
0000E102 1358 0028                  		move.b	(a0)+,$28(a1)
0000E106 7000                       		moveq	#0,d0
0000E108                            
0000E108                            locret_DA8A:
0000E108 4E75                       		rts	
0000E10A                            ; ---------------------------------------------------------------------------
0000E10A                            ; Single object	loading	subroutine
0000E10A                            ; ---------------------------------------------------------------------------
0000E10A                            
0000E10A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E10A                            
0000E10A                            
0000E10A                            SingleObjLoad:
0000E10A 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E10E 303C 005F                  		move.w	#$5F,d0
0000E112                            
0000E112                            loc_DA94:
0000E112 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E114 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E116 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E11A 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E11E                            
0000E11E                            locret_DAA0:
0000E11E 4E75                       		rts	
0000E120                            ; End of function SingleObjLoad
0000E120                            
0000E120                            
0000E120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E120                            
0000E120                            
0000E120                            SingleObjLoad2:
0000E120 2248                       		movea.l	a0,a1
0000E122 303C F000                  		move.w	#-$1000,d0
0000E126 9048                       		sub.w	a0,d0
0000E128 EC48                       		lsr.w	#6,d0
0000E12A 5340                       		subq.w	#1,d0
0000E12C 6500                       		bcs.s	locret_DABC
0000E12E                            
0000E12E                            loc_DAB0:
0000E12E 4A11                       		tst.b	(a1)
0000E130 6700                       		beq.s	locret_DABC
0000E132 43E9 0040                  		lea	$40(a1),a1
0000E136 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E13A                            
0000E13A                            locret_DABC:
0000E13A 4E75                       		rts	
0000E13C                            ; End of function SingleObjLoad2
0000E13C                            
0000E13C                            ; ===========================================================================
0000E13C                            ; ---------------------------------------------------------------------------
0000E13C                            ; Object 41 - springs
0000E13C                            ; ---------------------------------------------------------------------------
0000E13C                            
0000E13C                            Obj41:					; XREF: Obj_Index
0000E13C 7000                       		moveq	#0,d0
0000E13E 1028 0024                  		move.b	$24(a0),d0
0000E142 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E146 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E14A 6100 FB38                  		bsr.w	DisplaySprite
0000E14E 3028 0008                  		move.w	8(a0),d0
0000E152 0240 FF80                  		andi.w	#$FF80,d0
0000E156 3238 F700                  		move.w	($FFFFF700).w,d1
0000E15A 0441 0080                  		subi.w	#$80,d1
0000E15E 0241 FF80                  		andi.w	#$FF80,d1
0000E162 9041                       		sub.w	d1,d0
0000E164 0C40 0280                  		cmpi.w	#$280,d0
0000E168 6200 FB56                  		bhi.w	DeleteObject
0000E16C 4E75                       		rts	
0000E16E                            ; ===========================================================================
0000E16E 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E170 0000                       		dc.w Obj41_Up-Obj41_Index
0000E172 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E174 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E176 0000                       		dc.w Obj41_LR-Obj41_Index
0000E178 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E17A 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E17C 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E17E 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E180 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E182                            
0000E182 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E184 F600                       		dc.w -$A00		; power	of yellow spring
0000E186                            ; ===========================================================================
0000E186                            
0000E186                            Obj41_Main:				; XREF: Obj41_Index
0000E186 5428 0024                  		addq.b	#2,$24(a0)
0000E18A 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E192 317C 0523 0002             		move.w	#$523,2(a0)
0000E198 0028 0004 0001             		ori.b	#4,1(a0)
0000E19E 117C 0010 0019             		move.b	#$10,$19(a0)
0000E1A4 117C 0004 0018             		move.b	#4,$18(a0)
0000E1AA 1028 0028                  		move.b	$28(a0),d0
0000E1AE 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E1B2 6700                       		beq.s	loc_DB54	; if not, branch
0000E1B4 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E1BA 117C 0001 001C             		move.b	#1,$1C(a0)
0000E1C0 117C 0003 001A             		move.b	#3,$1A(a0)
0000E1C6 317C 0533 0002             		move.w	#$533,2(a0)
0000E1CC 117C 0008 0019             		move.b	#8,$19(a0)
0000E1D2                            
0000E1D2                            loc_DB54:
0000E1D2 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E1D6 6700                       		beq.s	loc_DB66	; if not, branch
0000E1D8 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E1DE 08E8 0001 0022             		bset	#1,$22(a0)
0000E1E4                            
0000E1E4                            loc_DB66:
0000E1E4 0800 0001                  		btst	#1,d0
0000E1E8 6700                       		beq.s	loc_DB72
0000E1EA 08E8 0005 0002             		bset	#5,2(a0)
0000E1F0                            
0000E1F0                            loc_DB72:
0000E1F0 0240 000F                  		andi.w	#$F,d0
0000E1F4 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E1FA 4E75                       		rts	
0000E1FC                            ; ===========================================================================
0000E1FC                            
0000E1FC                            Obj41_Up:				; XREF: Obj41_Index
0000E1FC 323C 001B                  		move.w	#$1B,d1
0000E200 343C 0008                  		move.w	#8,d2
0000E204 363C 0010                  		move.w	#$10,d3
0000E208 3828 0008                  		move.w	8(a0),d4
0000E20C 6100 0000                  		bsr.w	SolidObject
0000E210 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E214 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E216 4E75                       		rts	
0000E218                            ; ===========================================================================
0000E218                            
0000E218                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E218 5428 0024                  		addq.b	#2,$24(a0)
0000E21C 5069 000C                  		addq.w	#8,$C(a1)
0000E220 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E226 08E9 0001 0022             		bset	#1,$22(a1)
0000E22C 08A9 0003 0022             		bclr	#3,$22(a1)
0000E232 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E238 137C 0002 0024             		move.b	#2,$24(a1)
0000E23E 08A8 0003 0022             		bclr	#3,$22(a0)
0000E244 4228 0025                  		clr.b	$25(a0)
0000E248 303C 00CC                  		move.w	#$CC,d0
0000E24C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E252                            
0000E252                            Obj41_AniUp:				; XREF: Obj41_Index
0000E252 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E258 6000 CAEA                  		bra.w	AnimateSprite
0000E25C                            ; ===========================================================================
0000E25C                            
0000E25C                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E25C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E262 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E266 4E75                       		rts	
0000E268                            ; ===========================================================================
0000E268                            
0000E268                            Obj41_LR:				; XREF: Obj41_Index
0000E268 323C 0013                  		move.w	#$13,d1
0000E26C 343C 000E                  		move.w	#$E,d2
0000E270 363C 000F                  		move.w	#$F,d3
0000E274 3828 0008                  		move.w	8(a0),d4
0000E278 6100 0000                  		bsr.w	SolidObject
0000E27C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E282 6600                       		bne.s	loc_DC0C
0000E284 117C 0008 0024             		move.b	#8,$24(a0)
0000E28A                            
0000E28A                            loc_DC0C:
0000E28A 0828 0005 0022             		btst	#5,$22(a0)
0000E290 6600                       		bne.s	Obj41_BounceLR
0000E292 4E75                       		rts	
0000E294                            ; ===========================================================================
0000E294                            
0000E294                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E294 5428 0024                  		addq.b	#2,$24(a0)
0000E298 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E29E 5069 0008                  		addq.w	#8,8(a1)
0000E2A2 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E2A8 6600                       		bne.s	loc_DC36	; if yes, branch
0000E2AA 0469 0010 0008             		subi.w	#$10,8(a1)
0000E2B0 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E2B4                            
0000E2B4                            loc_DC36:
0000E2B4 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E2BA 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E2C0 0869 0000 0022             		bchg	#0,$22(a1)
0000E2C6 0829 0002 0022             		btst	#2,$22(a1)
0000E2CC 6600                       		bne.s	loc_DC56
0000E2CE 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E2D4                            
0000E2D4                            loc_DC56:
0000E2D4 08A8 0005 0022             		bclr	#5,$22(a0)
0000E2DA 08A9 0005 0022             		bclr	#5,$22(a1)
0000E2E0 303C 00CC                  		move.w	#$CC,d0
0000E2E4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E2EA                            
0000E2EA                            Obj41_AniLR:				; XREF: Obj41_Index
0000E2EA 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E2F0 6000 CA52                  		bra.w	AnimateSprite
0000E2F4                            ; ===========================================================================
0000E2F4                            
0000E2F4                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E2F4 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E2FA 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E2FE 4E75                       		rts	
0000E300                            ; ===========================================================================
0000E300                            
0000E300                            Obj41_Dwn:				; XREF: Obj41_Index
0000E300 323C 001B                  		move.w	#$1B,d1
0000E304 343C 0008                  		move.w	#8,d2
0000E308 363C 0010                  		move.w	#$10,d3
0000E30C 3828 0008                  		move.w	8(a0),d4
0000E310 6100 0000                  		bsr.w	SolidObject
0000E314 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E31A 6600                       		bne.s	loc_DCA4
0000E31C 117C 000E 0024             		move.b	#$E,$24(a0)
0000E322                            
0000E322                            loc_DCA4:
0000E322 4A28 0025                  		tst.b	$25(a0)
0000E326 6600                       		bne.s	locret_DCAE
0000E328 4A44                       		tst.w	d4
0000E32A 6B00                       		bmi.s	Obj41_BounceDwn
0000E32C                            
0000E32C                            locret_DCAE:
0000E32C 4E75                       		rts	
0000E32E                            ; ===========================================================================
0000E32E                            
0000E32E                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E32E 5428 0024                  		addq.b	#2,$24(a0)
0000E332 5169 000C                  		subq.w	#8,$C(a1)
0000E336 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E33C 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E340 08E9 0001 0022             		bset	#1,$22(a1)
0000E346 08A9 0003 0022             		bclr	#3,$22(a1)
0000E34C 137C 0002 0024             		move.b	#2,$24(a1)
0000E352 08A8 0003 0022             		bclr	#3,$22(a0)
0000E358 4228 0025                  		clr.b	$25(a0)
0000E35C 303C 00CC                  		move.w	#$CC,d0
0000E360 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E366                            
0000E366                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E366 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E36C 6000 C9D6                  		bra.w	AnimateSprite
0000E370                            ; ===========================================================================
0000E370                            
0000E370                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E370 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E376 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E37A 4E75                       		rts	
0000E37C                            ; ===========================================================================
0000E37C                            Ani_obj41:
0000E37C                            	include "_anim\obj41.asm"
0000E37C                            ; ---------------------------------------------------------------------------
0000E37C                            ; Animation script - springs
0000E37C                            ; ---------------------------------------------------------------------------
0000E37C 0000                       		dc.w byte_DD02-Ani_obj41
0000E37E 0000                       		dc.w byte_DD0E-Ani_obj41
0000E380 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E38C 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E398                            		even
0000E398                            		even
0000E398                            
0000E398                            ; ---------------------------------------------------------------------------
0000E398                            ; Sprite mappings - springs
0000E398                            ; ---------------------------------------------------------------------------
0000E398                            Map_obj41:
0000E398                            	include "_maps\obj41.asm"
0000E398                            ; ---------------------------------------------------------------------------
0000E398                            ; Sprite mappings - springs
0000E398                            ; ---------------------------------------------------------------------------
0000E398 0000                       		dc.w byte_DD26-Map_obj41
0000E39A 0000                       		dc.w byte_DD31-Map_obj41
0000E39C 0000                       		dc.w byte_DD37-Map_obj41
0000E39E 0000                       		dc.w byte_DD47-Map_obj41
0000E3A0 0000                       		dc.w byte_DD4D-Map_obj41
0000E3A2 0000                       		dc.w byte_DD53-Map_obj41
0000E3A4 02                         byte_DD26:	dc.b 2
0000E3A5 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E3AA 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E3AF 01                         byte_DD31:	dc.b 1
0000E3B0 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E3B5 03                         byte_DD37:	dc.b 3
0000E3B6 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E3BB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E3C0 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E3C5 01                         byte_DD47:	dc.b 1
0000E3C6 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E3CB 01                         byte_DD4D:	dc.b 1
0000E3CC F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E3D1 04                         byte_DD53:	dc.b 4
0000E3D2 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E3D7 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E3DC F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E3E1 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E3E6                            		even
0000E3E6                            		even
0000E3E6                            
0000E3E6                            ; ===========================================================================
0000E3E6                            ; ---------------------------------------------------------------------------
0000E3E6                            ; Object 42 - Newtron enemy (GHZ)
0000E3E6                            ; ---------------------------------------------------------------------------
0000E3E6                            
0000E3E6                            Obj42:					; XREF: Obj_Index
0000E3E6 7000                       		moveq	#0,d0
0000E3E8 1028 0024                  		move.b	$24(a0),d0
0000E3EC 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E3F0 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E3F4                            ; ===========================================================================
0000E3F4 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E3F6 0000                       		dc.w Obj42_Action-Obj42_Index
0000E3F8 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E3FA                            ; ===========================================================================
0000E3FA                            
0000E3FA                            Obj42_Main:				; XREF: Obj42_Index
0000E3FA 5428 0024                  		addq.b	#2,$24(a0)
0000E3FE 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E406 317C 049B 0002             		move.w	#$49B,2(a0)
0000E40C 117C 0004 0001             		move.b	#4,1(a0)
0000E412 117C 0004 0018             		move.b	#4,$18(a0)
0000E418 117C 0014 0019             		move.b	#$14,$19(a0)
0000E41E 117C 0010 0016             		move.b	#$10,$16(a0)
0000E424 117C 0008 0017             		move.b	#8,$17(a0)
0000E42A                            
0000E42A                            Obj42_Action:				; XREF: Obj42_Index
0000E42A 7000                       		moveq	#0,d0
0000E42C 1028 0025                  		move.b	$25(a0),d0
0000E430 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E434 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E438 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E43E 6100 C904                  		bsr.w	AnimateSprite
0000E442 6000 0000                  		bra.w	MarkObjGone
0000E446                            ; ===========================================================================
0000E446 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E448 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E44A 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E44C 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E44E 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E450                            ; ===========================================================================
0000E450                            
0000E450                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E450 08E8 0000 0022             		bset	#0,$22(a0)
0000E456 3038 D008                  		move.w	($FFFFD008).w,d0
0000E45A 9068 0008                  		sub.w	8(a0),d0
0000E45E 6400                       		bcc.s	loc_DDEA
0000E460 4440                       		neg.w	d0
0000E462 08A8 0000 0022             		bclr	#0,$22(a0)
0000E468                            
0000E468                            loc_DDEA:
0000E468 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E46C 6400                       		bcc.s	locret_DE12	; if not, branch
0000E46E 5428 0025                  		addq.b	#2,$25(a0)
0000E472 117C 0001 001C             		move.b	#1,$1C(a0)
0000E478 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E47C 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E47E 317C 249B 0002             		move.w	#$249B,2(a0)
0000E484 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E48A 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E490                            
0000E490                            locret_DE12:
0000E490 4E75                       		rts	
0000E492                            ; ===========================================================================
0000E492                            
0000E492                            Obj42_Type00:				; XREF: Obj42_Index2
0000E492 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E498 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E49A 08E8 0000 0022             		bset	#0,$22(a0)
0000E4A0 3038 D008                  		move.w	($FFFFD008).w,d0
0000E4A4 9068 0008                  		sub.w	8(a0),d0
0000E4A8 6400                       		bcc.s	locret_DE32
0000E4AA 08A8 0000 0022             		bclr	#0,$22(a0)
0000E4B0                            
0000E4B0                            locret_DE32:
0000E4B0 4E75                       		rts	
0000E4B2                            ; ===========================================================================
0000E4B2                            
0000E4B2                            Obj42_Fall:				; XREF: Obj42_Type00
0000E4B2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E4B8 6600                       		bne.s	loc_DE42
0000E4BA 117C 000C 0020             		move.b	#$C,$20(a0)
0000E4C0                            
0000E4C0                            loc_DE42:
0000E4C0 6100 F770                  		bsr.w	ObjectFall
0000E4C4 6100 0000                  		bsr.w	ObjHitFloor
0000E4C8 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E4CA 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E4CC D368 000C                  		add.w	d1,$C(a0)
0000E4D0 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E4D6 5428 0025                  		addq.b	#2,$25(a0)
0000E4DA 117C 0002 001C             		move.b	#2,$1C(a0)
0000E4E0 0828 0005 0002             		btst	#5,2(a0)
0000E4E6 6700                       		beq.s	Obj42_Move
0000E4E8 5228 001C                  		addq.b	#1,$1C(a0)
0000E4EC                            
0000E4EC                            Obj42_Move:
0000E4EC 117C 000D 0020             		move.b	#$D,$20(a0)
0000E4F2 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E4F8 0828 0000 0022             		btst	#0,$22(a0)
0000E4FE 6600                       		bne.s	locret_DE86
0000E500 4468 0010                  		neg.w	$10(a0)
0000E504                            
0000E504                            locret_DE86:
0000E504 4E75                       		rts	
0000E506                            ; ===========================================================================
0000E506                            
0000E506                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E506 6100 F756                  		bsr.w	SpeedToPos
0000E50A 6100 0000                  		bsr.w	ObjHitFloor
0000E50E 0C41 FFF8                  		cmpi.w	#-8,d1
0000E512 6D00                       		blt.s	loc_DEA2
0000E514 0C41 000C                  		cmpi.w	#$C,d1
0000E518 6C00                       		bge.s	loc_DEA2
0000E51A D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E51E 4E75                       		rts	
0000E520                            ; ===========================================================================
0000E520                            
0000E520                            loc_DEA2:
0000E520 5428 0025                  		addq.b	#2,$25(a0)
0000E524 4E75                       		rts	
0000E526                            ; ===========================================================================
0000E526                            
0000E526                            Obj42_Speed:				; XREF: Obj42_Index2
0000E526 6100 F736                  		bsr.w	SpeedToPos
0000E52A 4E75                       		rts	
0000E52C                            ; ===========================================================================
0000E52C                            
0000E52C                            Obj42_Type01:				; XREF: Obj42_Index2
0000E52C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E532 6600                       		bne.s	Obj42_FireMissile
0000E534 117C 000C 0020             		move.b	#$C,$20(a0)
0000E53A                            
0000E53A                            Obj42_FireMissile:
0000E53A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E540 6600                       		bne.s	locret_DF14
0000E542 4A28 0032                  		tst.b	$32(a0)
0000E546 6600                       		bne.s	locret_DF14
0000E548 117C 0001 0032             		move.b	#1,$32(a0)
0000E54E 6100 FBBA                  		bsr.w	SingleObjLoad
0000E552 6600                       		bne.s	locret_DF14
0000E554 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E558 3368 0008 0008             		move.w	8(a0),8(a1)
0000E55E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E564 5169 000C                  		subq.w	#8,$C(a1)
0000E568 337C 0200 0010             		move.w	#$200,$10(a1)
0000E56E 303C 0014                  		move.w	#$14,d0
0000E572 0828 0000 0022             		btst	#0,$22(a0)
0000E578 6600                       		bne.s	loc_DF04
0000E57A 4440                       		neg.w	d0
0000E57C 4469 0010                  		neg.w	$10(a1)
0000E580                            
0000E580                            loc_DF04:
0000E580 D169 0008                  		add.w	d0,8(a1)
0000E584 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E58A 137C 0001 0028             		move.b	#1,$28(a1)
0000E590                            
0000E590                            locret_DF14:
0000E590 4E75                       		rts	
0000E592                            ; ===========================================================================
0000E592                            
0000E592                            Obj42_Delete:				; XREF: Obj42_Index
0000E592 6000 F72C                  		bra.w	DeleteObject
0000E596                            ; ===========================================================================
0000E596                            Ani_obj42:
0000E596                            	include "_anim\obj42.asm"
0000E596                            ; ---------------------------------------------------------------------------
0000E596                            ; Animation script - Newtron enemy
0000E596                            ; ---------------------------------------------------------------------------
0000E596 0000                       		dc.w byte_DF24-Ani_obj42
0000E598 0000                       		dc.w byte_DF28-Ani_obj42
0000E59A 0000                       		dc.w byte_DF30-Ani_obj42
0000E59C 0000                       		dc.w byte_DF34-Ani_obj42
0000E59E 0000                       		dc.w byte_DF38-Ani_obj42
0000E5A0 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E5A4 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E5AC 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E5B0 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E5B4 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E5BE                            		even
0000E5BE                            		even
0000E5BE                            
0000E5BE                            ; ---------------------------------------------------------------------------
0000E5BE                            ; Sprite mappings - Newtron enemy (GHZ)
0000E5BE                            ; ---------------------------------------------------------------------------
0000E5BE                            Map_obj42:
0000E5BE                            	include "_maps\obj42.asm"
0000E5BE                            ; ---------------------------------------------------------------------------
0000E5BE                            ; Sprite mappings - Newtron enemy (GHZ)
0000E5BE                            ; ---------------------------------------------------------------------------
0000E5BE 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E5C2 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E5C6 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E5CA 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E5CE 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E5D2 0000                       		dc.w byte_DFF8-Map_obj42
0000E5D4 03                         byte_DF58:	dc.b 3
0000E5D5 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E5DA F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E5DF FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E5E4 03                         byte_DF68:	dc.b 3
0000E5E5 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E5EA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E5EF FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E5F4 03                         byte_DF78:	dc.b 3
0000E5F5 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E5FA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E5FF FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E604 04                         byte_DF88:	dc.b 4
0000E605 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E60A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E60F FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E614 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E619 03                         byte_DF9D:	dc.b 3
0000E61A F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E61F FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E624 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E629 02                         byte_DFAD:	dc.b 2
0000E62A F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E62F F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E634 03                         byte_DFB8:	dc.b 3
0000E635 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E63A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E63F FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E644 03                         byte_DFC8:	dc.b 3
0000E645 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E64A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E64F FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E654 03                         byte_DFD8:	dc.b 3
0000E655 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E65A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E65F FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E664 03                         byte_DFE8:	dc.b 3
0000E665 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E66A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E66F FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E674 00                         byte_DFF8:	dc.b 0
0000E676 00                         		even
0000E676 00                         		even
0000E676                            
0000E676                            ; ===========================================================================
0000E676                            ; ---------------------------------------------------------------------------
0000E676                            ; Object 43 - Roller enemy (SYZ)
0000E676                            ; ---------------------------------------------------------------------------
0000E676                            
0000E676                            Obj43:					; XREF: Obj_Index
0000E676 7000                       		moveq	#0,d0
0000E678 1028 0024                  		move.b	$24(a0),d0
0000E67C 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E680 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E684                            ; ===========================================================================
0000E684 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E686 0000                       		dc.w Obj43_Action-Obj43_Index
0000E688                            ; ===========================================================================
0000E688                            
0000E688                            Obj43_Main:				; XREF: Obj43_Index
0000E688 117C 000E 0016             		move.b	#$E,$16(a0)
0000E68E 117C 0008 0017             		move.b	#8,$17(a0)
0000E694 6100 F59C                  		bsr.w	ObjectFall
0000E698 6100 0000                  		bsr.w	ObjHitFloor
0000E69C 4A41                       		tst.w	d1
0000E69E 6A00                       		bpl.s	locret_E052
0000E6A0 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E6A4 317C 0000 0012             		move.w	#0,$12(a0)
0000E6AA 5428 0024                  		addq.b	#2,$24(a0)
0000E6AE 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E6B6 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E6BC 117C 0004 0001             		move.b	#4,1(a0)
0000E6C2 117C 0004 0018             		move.b	#4,$18(a0)
0000E6C8 117C 0010 0019             		move.b	#$10,$19(a0)
0000E6CE                            
0000E6CE                            locret_E052:
0000E6CE 4E75                       		rts	
0000E6D0                            ; ===========================================================================
0000E6D0                            
0000E6D0                            Obj43_Action:				; XREF: Obj43_Index
0000E6D0 7000                       		moveq	#0,d0
0000E6D2 1028 0025                  		move.b	$25(a0),d0
0000E6D6 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E6DA 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E6DE 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E6E4 6100 C65E                  		bsr.w	AnimateSprite
0000E6E8 3028 0008                  		move.w	8(a0),d0
0000E6EC 0240 FF80                  		andi.w	#$FF80,d0
0000E6F0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E6F4 0441 0080                  		subi.w	#$80,d1
0000E6F8 0241 FF80                  		andi.w	#$FF80,d1
0000E6FC 9041                       		sub.w	d1,d0
0000E6FE 0C40 0280                  		cmpi.w	#$280,d0
0000E702 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E706 6000 F57C                  		bra.w	DisplaySprite
0000E70A                            ; ===========================================================================
0000E70A                            
0000E70A                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E70A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E70E 7000                       		moveq	#0,d0
0000E710 1028 0023                  		move.b	$23(a0),d0
0000E714 6700                       		beq.s	Obj43_Delete
0000E716 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E71C                            
0000E71C                            Obj43_Delete:
0000E71C 6000 F5A2                  		bra.w	DeleteObject
0000E720                            ; ===========================================================================
0000E720 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E722 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E724 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E726 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E728                            ; ===========================================================================
0000E728                            
0000E728                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E728 3038 D008                  		move.w	($FFFFD008).w,d0
0000E72C 0440 0100                  		subi.w	#$100,d0
0000E730 6500                       		bcs.s	loc_E0D2
0000E732 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E736 6500                       		bcs.s	loc_E0D2
0000E738 5828 0025                  		addq.b	#4,$25(a0)
0000E73C 117C 0002 001C             		move.b	#2,$1C(a0)
0000E742 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E748 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E74E                            
0000E74E                            loc_E0D2:
0000E74E 588F                       		addq.l	#4,sp
0000E750 4E75                       		rts	
0000E752                            ; ===========================================================================
0000E752                            
0000E752                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E752 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E758 6700                       		beq.s	loc_E0F8
0000E75A 5368 0030                  		subq.w	#1,$30(a0)
0000E75E 6A00                       		bpl.s	locret_E0F6
0000E760 117C 0001 001C             		move.b	#1,$1C(a0)
0000E766 317C 0700 0010             		move.w	#$700,$10(a0)
0000E76C 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E772                            
0000E772                            locret_E0F6:
0000E772 4E75                       		rts	
0000E774                            ; ===========================================================================
0000E774                            
0000E774                            loc_E0F8:
0000E774 5428 0025                  		addq.b	#2,$25(a0)
0000E778 4E75                       		rts	
0000E77A                            ; ===========================================================================
0000E77A                            
0000E77A                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E77A 6100 0000                  		bsr.w	Obj43_Stop
0000E77E 6100 F4DE                  		bsr.w	SpeedToPos
0000E782 6100 0000                  		bsr.w	ObjHitFloor
0000E786 0C41 FFF8                  		cmpi.w	#-8,d1
0000E78A 6D00                       		blt.s	Obj43_Jump
0000E78C 0C41 000C                  		cmpi.w	#$C,d1
0000E790 6C00                       		bge.s	Obj43_Jump
0000E792 D368 000C                  		add.w	d1,$C(a0)
0000E796 4E75                       		rts	
0000E798                            ; ===========================================================================
0000E798                            
0000E798                            Obj43_Jump:
0000E798 5428 0025                  		addq.b	#2,$25(a0)
0000E79C 08E8 0000 0032             		bset	#0,$32(a0)
0000E7A2 6700                       		beq.s	locret_E12E
0000E7A4 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E7AA                            
0000E7AA                            locret_E12E:
0000E7AA 4E75                       		rts	
0000E7AC                            ; ===========================================================================
0000E7AC                            
0000E7AC                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E7AC 6100 F484                  		bsr.w	ObjectFall
0000E7B0 4A68 0012                  		tst.w	$12(a0)
0000E7B4 6B00                       		bmi.s	locret_E150
0000E7B6 6100 0000                  		bsr.w	ObjHitFloor
0000E7BA 4A41                       		tst.w	d1
0000E7BC 6A00                       		bpl.s	locret_E150
0000E7BE D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E7C2 5528 0025                  		subq.b	#2,$25(a0)
0000E7C6 317C 0000 0012             		move.w	#0,$12(a0)
0000E7CC                            
0000E7CC                            locret_E150:
0000E7CC 4E75                       		rts	
0000E7CE                            
0000E7CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E7CE                            
0000E7CE                            
0000E7CE                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E7CE 4A28 0032                  		tst.b	$32(a0)
0000E7D2 6B00                       		bmi.s	locret_E188
0000E7D4 3038 D008                  		move.w	($FFFFD008).w,d0
0000E7D8 0440 0030                  		subi.w	#$30,d0
0000E7DC 9068 0008                  		sub.w	8(a0),d0
0000E7E0 6400                       		bcc.s	locret_E188
0000E7E2 117C 0000 001C             		move.b	#0,$1C(a0)
0000E7E8 117C 000E 0020             		move.b	#$E,$20(a0)
0000E7EE 4268 0010                  		clr.w	$10(a0)
0000E7F2 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E7F8 117C 0002 0025             		move.b	#2,$25(a0)
0000E7FE 08E8 0007 0032             		bset	#7,$32(a0)
0000E804                            
0000E804                            locret_E188:
0000E804 4E75                       		rts	
0000E806                            ; End of function Obj43_Stop
0000E806                            
0000E806                            ; ===========================================================================
0000E806                            Ani_obj43:
0000E806                            	include "_anim\obj43.asm"
0000E806                            ; ---------------------------------------------------------------------------
0000E806                            ; Animation script - Roller enemy
0000E806                            ; ---------------------------------------------------------------------------
0000E806 0000                       		dc.w byte_E190-Ani_obj43
0000E808 0000                       		dc.w byte_E196-Ani_obj43
0000E80A 0000                       		dc.w byte_E19C-Ani_obj43
0000E80C 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E812 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E818 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E81E 00                         		even
0000E81E 00                         		even
0000E81E                            
0000E81E                            ; ---------------------------------------------------------------------------
0000E81E                            ; Sprite mappings - Roller enemy (SYZ)
0000E81E                            ; ---------------------------------------------------------------------------
0000E81E                            Map_obj43:
0000E81E                            	include "_maps\obj43.asm"
0000E81E                            Map_61da:
0000E81E 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E820 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E822 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E824 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E826 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E828 02                         Map_61da_A: 	dc.b $2
0000E829 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E82E F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E833 02                         Map_61da_15: 	dc.b $2
0000E834 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E839 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E83E 01                         Map_61da_20: 	dc.b $1
0000E83F F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E844 01                         Map_61da_26: 	dc.b $1
0000E845 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E84A 01                         Map_61da_2C: 	dc.b $1
0000E84B F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E850                            	even
0000E850                            	even
0000E850                            
0000E850                            ; ===========================================================================
0000E850                            ; ---------------------------------------------------------------------------
0000E850                            ; Object 44 - walls (GHZ)
0000E850                            ; ---------------------------------------------------------------------------
0000E850                            
0000E850                            Obj44:					; XREF: Obj_Index
0000E850 7000                       		moveq	#0,d0
0000E852 1028 0024                  		move.b	$24(a0),d0
0000E856 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E85A 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E85E                            ; ===========================================================================
0000E85E 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E860 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E862 0000                       		dc.w Obj44_Display-Obj44_Index
0000E864                            ; ===========================================================================
0000E864                            
0000E864                            Obj44_Main:				; XREF: Obj44_Index
0000E864 5428 0024                  		addq.b	#2,$24(a0)
0000E868 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E870 317C 434C 0002             		move.w	#$434C,2(a0)
0000E876 0028 0004 0001             		ori.b	#4,1(a0)
0000E87C 117C 0008 0019             		move.b	#8,$19(a0)
0000E882 117C 0006 0018             		move.b	#6,$18(a0)
0000E888 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E88E 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E894 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E896 5428 0024                  		addq.b	#2,$24(a0)
0000E89A 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E89C                            ; ===========================================================================
0000E89C                            
0000E89C                            Obj44_Solid:				; XREF: Obj44_Index
0000E89C 323C 0013                  		move.w	#$13,d1
0000E8A0 343C 0028                  		move.w	#$28,d2
0000E8A4 6100 A704                  		bsr.w	Obj44_SolidWall
0000E8A8                            
0000E8A8                            Obj44_Display:				; XREF: Obj44_Index
0000E8A8 6100 F3DA                  		bsr.w	DisplaySprite
0000E8AC 3028 0008                  		move.w	8(a0),d0
0000E8B0 0240 FF80                  		andi.w	#$FF80,d0
0000E8B4 3238 F700                  		move.w	($FFFFF700).w,d1
0000E8B8 0441 0080                  		subi.w	#$80,d1
0000E8BC 0241 FF80                  		andi.w	#$FF80,d1
0000E8C0 9041                       		sub.w	d1,d0
0000E8C2 0C40 0280                  		cmpi.w	#$280,d0
0000E8C6 6200 F3F8                  		bhi.w	DeleteObject
0000E8CA 4E75                       		rts	
0000E8CC                            ; ===========================================================================
0000E8CC                            ; ---------------------------------------------------------------------------
0000E8CC                            ; Sprite mappings - walls (GHZ)
0000E8CC                            ; ---------------------------------------------------------------------------
0000E8CC                            Map_obj44:
0000E8CC                            	include "_maps\obj44.asm"
0000E8CC                            ; ---------------------------------------------------------------------------
0000E8CC                            ; Sprite mappings - walls (GHZ)
0000E8CC                            ; ---------------------------------------------------------------------------
0000E8CC 0000                       		dc.w byte_E256-Map_obj44
0000E8CE 0000                       		dc.w byte_E26B-Map_obj44
0000E8D0 0000                       		dc.w byte_E280-Map_obj44
0000E8D2 04                         byte_E256:	dc.b 4
0000E8D3 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E8D8 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E8DD 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E8E2 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E8E7 04                         byte_E26B:	dc.b 4
0000E8E8 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E8ED F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E8F2 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E8F7 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E8FC 04                         byte_E280:	dc.b 4
0000E8FD E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E902 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E907 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E90C 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E912 00                         		even
0000E912 00                         		even
0000E912                            
0000E912                            ; ===========================================================================
0000E912                            ; ---------------------------------------------------------------------------
0000E912                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E912                            ; ---------------------------------------------------------------------------
0000E912                            
0000E912                            Obj13:					; XREF: Obj_Index
0000E912 7000                       		moveq	#0,d0
0000E914 1028 0024                  		move.b	$24(a0),d0
0000E918 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E91C 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E920 6000 0000                  		bra.w	Obj14_ChkDel
0000E924                            ; ===========================================================================
0000E924 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E926 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E928                            ; ---------------------------------------------------------------------------
0000E928                            ;
0000E928                            ; Lava ball production rates
0000E928                            ;
0000E928 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E92E                            ; ===========================================================================
0000E92E                            
0000E92E                            Obj13_Main:				; XREF: Obj13_Index
0000E92E 5428 0024                  		addq.b	#2,$24(a0)
0000E932 1028 0028                  		move.b	$28(a0),d0
0000E936 E848                       		lsr.w	#4,d0
0000E938 0240 000F                  		andi.w	#$F,d0
0000E93C 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E942 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E948 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E94E                            
0000E94E                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E94E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E952 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E954 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E95A 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E95E 6600                       		bne.s	locret_E302
0000E960 6100 F7A8                  		bsr.w	SingleObjLoad
0000E964 6600                       		bne.s	locret_E302
0000E966 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E96A 3368 0008 0008             		move.w	8(a0),8(a1)
0000E970 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E976 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E97C                            
0000E97C                            locret_E302:
0000E97C 4E75                       		rts	
0000E97E                            ; ===========================================================================
0000E97E                            ; ---------------------------------------------------------------------------
0000E97E                            ; Object 14 - lava balls (MZ, SLZ)
0000E97E                            ; ---------------------------------------------------------------------------
0000E97E                            
0000E97E                            Obj14:					; XREF: Obj_Index
0000E97E 7000                       		moveq	#0,d0
0000E980 1028 0024                  		move.b	$24(a0),d0
0000E984 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E988 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E98C 6000 F2F6                  		bra.w	DisplaySprite
0000E990                            ; ===========================================================================
0000E990 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E992 0000                       		dc.w Obj14_Action-Obj14_Index
0000E994 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E996                            
0000E996 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E9A0 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E9A8                            ; ===========================================================================
0000E9A8                            
0000E9A8                            Obj14_Main:				; XREF: Obj14_Index
0000E9A8 5428 0024                  		addq.b	#2,$24(a0)
0000E9AC 117C 0008 0016             		move.b	#8,$16(a0)
0000E9B2 117C 0008 0017             		move.b	#8,$17(a0)
0000E9B8 217C 0000 B942 0004        		move.l	#Map_obj14,4(a0)
0000E9C0 317C 0345 0002             		move.w	#$345,2(a0)
0000E9C6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E9CC 6600                       		bne.s	loc_E35A
0000E9CE 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E9D4                            
0000E9D4                            loc_E35A:
0000E9D4 117C 0004 0001             		move.b	#4,1(a0)
0000E9DA 117C 0003 0018             		move.b	#3,$18(a0)
0000E9E0 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E9E6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E9EC 4A28 0029                  		tst.b	$29(a0)
0000E9F0 6700                       		beq.s	Obj14_SetSpeed
0000E9F2 5428 0018                  		addq.b	#2,$18(a0)
0000E9F6                            
0000E9F6                            Obj14_SetSpeed:
0000E9F6 7000                       		moveq	#0,d0
0000E9F8 1028 0028                  		move.b	$28(a0),d0
0000E9FC D040                       		add.w	d0,d0
0000E9FE 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EA04 117C 0008 0019             		move.b	#8,$19(a0)
0000EA0A 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EA10 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EA12 117C 0010 0019             		move.b	#$10,$19(a0)
0000EA18 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EA1E 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EA24 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EA2A                            
0000EA2A                            Obj14_PlaySnd:
0000EA2A 303C 00AE                  		move.w	#$AE,d0
0000EA2E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EA34                            
0000EA34                            Obj14_Action:				; XREF: Obj14_Index
0000EA34 7000                       		moveq	#0,d0
0000EA36 1028 0028                  		move.b	$28(a0),d0
0000EA3A D040                       		add.w	d0,d0
0000EA3C 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EA40 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EA44 6100 F218                  		bsr.w	SpeedToPos
0000EA48 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EA4E 6100 C2F4                  		bsr.w	AnimateSprite
0000EA52                            
0000EA52                            Obj14_ChkDel:				; XREF: Obj13
0000EA52 3028 0008                  		move.w	8(a0),d0
0000EA56 0240 FF80                  		andi.w	#$FF80,d0
0000EA5A 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA5E 0441 0080                  		subi.w	#$80,d1
0000EA62 0241 FF80                  		andi.w	#$FF80,d1
0000EA66 9041                       		sub.w	d1,d0
0000EA68 0C40 0280                  		cmpi.w	#$280,d0
0000EA6C 6200 F252                  		bhi.w	DeleteObject
0000EA70 4E75                       		rts	
0000EA72                            ; ===========================================================================
0000EA72 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EA76 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EA7A 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EA7E 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EA82 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EA84                            ; ===========================================================================
0000EA84                            ; lavaball types 00-03 fly up and fall back down
0000EA84                            
0000EA84                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EA84 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EA8A 3028 0030                  		move.w	$30(a0),d0
0000EA8E B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EA92 6400                       		bcc.s	loc_E41E	; if not, branch
0000EA94 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EA98                            
0000EA98                            loc_E41E:
0000EA98 08A8 0001 0022             		bclr	#1,$22(a0)
0000EA9E 4A68 0012                  		tst.w	$12(a0)
0000EAA2 6A00                       		bpl.s	locret_E430
0000EAA4 08E8 0001 0022             		bset	#1,$22(a0)
0000EAAA                            
0000EAAA                            locret_E430:
0000EAAA 4E75                       		rts	
0000EAAC                            ; ===========================================================================
0000EAAC                            ; lavaball type	04 flies up until it hits the ceiling
0000EAAC                            
0000EAAC                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EAAC 08E8 0001 0022             		bset	#1,$22(a0)
0000EAB2 6100 0000                  		bsr.w	ObjHitCeiling
0000EAB6 4A41                       		tst.w	d1
0000EAB8 6A00                       		bpl.s	locret_E452
0000EABA 117C 0008 0028             		move.b	#8,$28(a0)
0000EAC0 117C 0001 001C             		move.b	#1,$1C(a0)
0000EAC6 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EACC                            
0000EACC                            locret_E452:
0000EACC 4E75                       		rts	
0000EACE                            ; ===========================================================================
0000EACE                            ; lavaball type	05 falls down until it hits the	floor
0000EACE                            
0000EACE                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EACE 08A8 0001 0022             		bclr	#1,$22(a0)
0000EAD4 6100 0000                  		bsr.w	ObjHitFloor
0000EAD8 4A41                       		tst.w	d1
0000EADA 6A00                       		bpl.s	locret_E474
0000EADC 117C 0008 0028             		move.b	#8,$28(a0)
0000EAE2 117C 0001 001C             		move.b	#1,$1C(a0)
0000EAE8 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EAEE                            
0000EAEE                            locret_E474:
0000EAEE 4E75                       		rts	
0000EAF0                            ; ===========================================================================
0000EAF0                            ; lavaball types 06-07 move sideways
0000EAF0                            
0000EAF0                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EAF0 08E8 0000 0022             		bset	#0,$22(a0)
0000EAF6 76F8                       		moveq	#-8,d3
0000EAF8 6100 0000                  		bsr.w	ObjHitWallLeft
0000EAFC 4A41                       		tst.w	d1
0000EAFE 6A00                       		bpl.s	locret_E498
0000EB00 117C 0008 0028             		move.b	#8,$28(a0)
0000EB06 117C 0003 001C             		move.b	#3,$1C(a0)
0000EB0C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EB12                            
0000EB12                            locret_E498:
0000EB12 4E75                       		rts	
0000EB14                            ; ===========================================================================
0000EB14                            
0000EB14                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EB14 08A8 0000 0022             		bclr	#0,$22(a0)
0000EB1A 7608                       		moveq	#8,d3
0000EB1C 6100 0000                  		bsr.w	ObjHitWallRight
0000EB20 4A41                       		tst.w	d1
0000EB22 6A00                       		bpl.s	locret_E4BC
0000EB24 117C 0008 0028             		move.b	#8,$28(a0)
0000EB2A 117C 0003 001C             		move.b	#3,$1C(a0)
0000EB30 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EB36                            
0000EB36                            locret_E4BC:
0000EB36 4E75                       		rts	
0000EB38                            ; ===========================================================================
0000EB38                            
0000EB38                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EB38 4E75                       		rts	
0000EB3A                            ; ===========================================================================
0000EB3A                            
0000EB3A                            Obj14_Delete:				; XREF: Obj14_Index
0000EB3A 6000 F184                  		bra.w	DeleteObject
0000EB3E                            ; ===========================================================================
0000EB3E                            Ani_obj14:
0000EB3E                            	include "_anim\obj14.asm"
0000EB3E                            ; ---------------------------------------------------------------------------
0000EB3E                            ; Animation script - lava balls
0000EB3E                            ; ---------------------------------------------------------------------------
0000EB3E 0000                       		dc.w byte_E4CC-Ani_obj14
0000EB40 0000                       		dc.w byte_E4D2-Ani_obj14
0000EB42 0000                       		dc.w byte_E4D6-Ani_obj14
0000EB44 0000                       		dc.w byte_E4DC-Ani_obj14
0000EB46 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EB4C 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EB50 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EB56 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EB5A                            		even
0000EB5A                            		even
0000EB5A                            
0000EB5A                            ; ===========================================================================
0000EB5A                            ; ---------------------------------------------------------------------------
0000EB5A                            ; Object 6D - flame thrower (SBZ)
0000EB5A                            ; ---------------------------------------------------------------------------
0000EB5A                            
0000EB5A                            Obj6D:					; XREF: Obj_Index
0000EB5A 7000                       		moveq	#0,d0
0000EB5C 1028 0024                  		move.b	$24(a0),d0
0000EB60 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EB64 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EB68                            ; ===========================================================================
0000EB68 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EB6A 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EB6C                            ; ===========================================================================
0000EB6C                            
0000EB6C                            Obj6D_Main:				; XREF: Obj6D_Index
0000EB6C 5428 0024                  		addq.b	#2,$24(a0)
0000EB70 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EB78 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EB7E 0028 0004 0001             		ori.b	#4,1(a0)
0000EB84 117C 0001 0018             		move.b	#1,$18(a0)
0000EB8A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EB90 117C 000C 0019             		move.b	#$C,$19(a0)
0000EB96 1028 0028                  		move.b	$28(a0),d0
0000EB9A 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EB9E D040                       		add.w	d0,d0		; multiply by 2
0000EBA0 3140 0030                  		move.w	d0,$30(a0)
0000EBA4 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EBA8 1028 0028                  		move.b	$28(a0),d0
0000EBAC 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EBB0 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EBB2 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EBB6 117C 000A 0036             		move.b	#$A,$36(a0)
0000EBBC 0828 0001 0022             		btst	#1,$22(a0)
0000EBC2 6700                       		beq.s	Obj6D_Action
0000EBC4 117C 0002 001C             		move.b	#2,$1C(a0)
0000EBCA 117C 0015 0036             		move.b	#$15,$36(a0)
0000EBD0                            
0000EBD0                            Obj6D_Action:				; XREF: Obj6D_Index
0000EBD0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EBD4 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EBD6 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EBDC 0868 0000 001C             		bchg	#0,$1C(a0)
0000EBE2 6700                       		beq.s	loc_E57A
0000EBE4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EBEA 303C 00B3                  		move.w	#$B3,d0
0000EBEE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000EBF4                            
0000EBF4                            loc_E57A:
0000EBF4 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EBFA 6100 C148                  		bsr.w	AnimateSprite
0000EBFE 117C 0000 0020             		move.b	#0,$20(a0)
0000EC04 1028 0036                  		move.b	$36(a0),d0
0000EC08 B028 001A                  		cmp.b	$1A(a0),d0
0000EC0C 6600                       		bne.s	Obj6D_ChkDel
0000EC0E 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EC14                            
0000EC14                            Obj6D_ChkDel:
0000EC14 3028 0008                  		move.w	8(a0),d0
0000EC18 0240 FF80                  		andi.w	#$FF80,d0
0000EC1C 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC20 0441 0080                  		subi.w	#$80,d1
0000EC24 0241 FF80                  		andi.w	#$FF80,d1
0000EC28 9041                       		sub.w	d1,d0
0000EC2A 0C40 0280                  		cmpi.w	#$280,d0
0000EC2E 6200 F090                  		bhi.w	DeleteObject
0000EC32 6000 F050                  		bra.w	DisplaySprite
0000EC36                            ; ===========================================================================
0000EC36                            Ani_obj6D:
0000EC36                            	include "_anim\obj6D.asm"
0000EC36                            ; ---------------------------------------------------------------------------
0000EC36                            ; Animation script - flamethrower (SBZ)
0000EC36                            ; ---------------------------------------------------------------------------
0000EC36 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EC38 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EC3A 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EC3C 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EC3E 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EC4C 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EC56 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EC64 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EC6E                            		even
0000EC6E                            		even
0000EC6E                            
0000EC6E                            ; ---------------------------------------------------------------------------
0000EC6E                            ; Sprite mappings - flame thrower (SBZ)
0000EC6E                            ; ---------------------------------------------------------------------------
0000EC6E                            Map_obj6D:
0000EC6E                            	include "_maps\obj6D.asm"
0000EC6E                            ; ---------------------------------------------------------------------------
0000EC6E                            ; Sprite mappings - flame thrower (SBZ)
0000EC6E                            ; ---------------------------------------------------------------------------
0000EC6E 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EC72 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EC76 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EC7A 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EC7E 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EC82 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EC86 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EC8A 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EC8E 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EC92 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EC96 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EC9A 01                         byte_E620:	dc.b 1
0000EC9B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECA0 02                         byte_E626:	dc.b 2
0000ECA1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECA6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECAB 02                         byte_E631:	dc.b 2
0000ECAC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECB1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECB6 03                         byte_E63C:	dc.b 3
0000ECB7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECBC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECC1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECC6 03                         byte_E64C:	dc.b 3
0000ECC7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECCC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECD1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECD6 04                         byte_E65C:	dc.b 4
0000ECD7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECDC 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECE1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECE6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECEB 04                         byte_E671:	dc.b 4
0000ECEC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ECF1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECF6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECFB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED00 05                         byte_E686:	dc.b 5
0000ED01 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000ED06 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED0B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED10 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED15 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED1A 05                         byte_E6A0:	dc.b 5
0000ED1B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED20 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED25 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED2A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED2F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED34 06                         byte_E6BA:	dc.b 6
0000ED35 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ED3A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ED3F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED44 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ED49 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED4E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED53 06                         byte_E6D9:	dc.b 6
0000ED54 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ED59 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED5E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ED63 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED68 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED6D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED72 01                         byte_E6F8:	dc.b 1
0000ED73 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED78 02                         byte_E6FE:	dc.b 2
0000ED79 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED7E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED83 02                         byte_E709:	dc.b 2
0000ED84 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED89 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED8E 03                         byte_E714:	dc.b 3
0000ED8F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED94 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED99 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED9E 03                         byte_E724:	dc.b 3
0000ED9F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDA4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDA9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDAE 04                         byte_E734:	dc.b 4
0000EDAF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EDB4 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDB9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDBE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDC3 04                         byte_E749:	dc.b 4
0000EDC4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EDC9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDCE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDD3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDD8 05                         byte_E75E:	dc.b 5
0000EDD9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EDDE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EDE3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDE8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDED 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDF2 05                         byte_E778:	dc.b 5
0000EDF3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EDF8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EDFD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE02 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE07 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE0C 06                         byte_E792:	dc.b 6
0000EE0D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EE12 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EE17 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE1C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EE21 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE26 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE2B 06                         byte_E7B1:	dc.b 6
0000EE2C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EE31 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE36 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EE3B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE40 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE45 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE4A                            		even
0000EE4A                            		even
0000EE4A                            
0000EE4A                            ; ===========================================================================
0000EE4A                            ; ---------------------------------------------------------------------------
0000EE4A                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EE4A                            ; ---------------------------------------------------------------------------
0000EE4A                            
0000EE4A                            Obj46:					; XREF: Obj_Index
0000EE4A 7000                       		moveq	#0,d0
0000EE4C 1028 0024                  		move.b	$24(a0),d0
0000EE50 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EE54 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EE58                            ; ===========================================================================
0000EE58 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EE5A 0000                       		dc.w Obj46_Action-Obj46_Index
0000EE5C                            ; ===========================================================================
0000EE5C                            
0000EE5C                            Obj46_Main:				; XREF: Obj46_Index
0000EE5C 5428 0024                  		addq.b	#2,$24(a0)
0000EE60 117C 000F 0016             		move.b	#$F,$16(a0)
0000EE66 117C 000F 0017             		move.b	#$F,$17(a0)
0000EE6C 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EE74 317C 4000 0002             		move.w	#$4000,2(a0)
0000EE7A 117C 0004 0001             		move.b	#4,1(a0)
0000EE80 117C 0003 0018             		move.b	#3,$18(a0)
0000EE86 117C 0010 0019             		move.b	#$10,$19(a0)
0000EE8C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE92 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EE98                            
0000EE98                            Obj46_Action:				; XREF: Obj46_Index
0000EE98 4A28 0001                  		tst.b	1(a0)
0000EE9C 6A00                       		bpl.s	Obj46_ChkDel
0000EE9E 7000                       		moveq	#0,d0
0000EEA0 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EEA4 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EEA8 D040                       		add.w	d0,d0
0000EEAA 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EEAE 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EEB2 323C 001B                  		move.w	#$1B,d1
0000EEB6 343C 0010                  		move.w	#$10,d2
0000EEBA 363C 0011                  		move.w	#$11,d3
0000EEBE 3828 0008                  		move.w	8(a0),d4
0000EEC2 6100 0000                  		bsr.w	SolidObject
0000EEC6                            
0000EEC6                            Obj46_ChkDel:
0000EEC6 6100 EDBC                  		bsr.w	DisplaySprite
0000EECA 3028 0008                  		move.w	8(a0),d0
0000EECE 0240 FF80                  		andi.w	#$FF80,d0
0000EED2 3238 F700                  		move.w	($FFFFF700).w,d1
0000EED6 0441 0080                  		subi.w	#$80,d1
0000EEDA 0241 FF80                  		andi.w	#$FF80,d1
0000EEDE 9041                       		sub.w	d1,d0
0000EEE0 0C40 0280                  		cmpi.w	#$280,d0
0000EEE4 6200 EDDA                  		bhi.w	DeleteObject
0000EEE8 4E75                       		rts	
0000EEEA                            ; ===========================================================================
0000EEEA 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EEEC 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EEEE 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EEF0 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EEF2 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EEF4                            ; ===========================================================================
0000EEF4                            
0000EEF4                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EEF4 4E75                       		rts	
0000EEF6                            ; ===========================================================================
0000EEF6                            
0000EEF6                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EEF6 3038 D008                  		move.w	($FFFFD008).w,d0
0000EEFA 9068 0008                  		sub.w	8(a0),d0
0000EEFE 6400                       		bcc.s	loc_E888
0000EF00 4440                       		neg.w	d0
0000EF02                            
0000EF02                            loc_E888:
0000EF02 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EF06 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EF08 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EF0E                            
0000EF0E                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EF0E 7000                       		moveq	#0,d0
0000EF10 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EF14 0828 0003 0028             		btst	#3,$28(a0)
0000EF1A 6700                       		beq.s	loc_E8A8
0000EF1C 4440                       		neg.w	d0
0000EF1E 0640 0010                  		addi.w	#$10,d0
0000EF22                            
0000EF22                            loc_E8A8:
0000EF22 3228 0030                  		move.w	$30(a0),d1
0000EF26 9240                       		sub.w	d0,d1
0000EF28 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EF2C 4E75                       		rts	
0000EF2E                            ; ===========================================================================
0000EF2E                            
0000EF2E                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EF2E 6100 ED2E                  		bsr.w	SpeedToPos
0000EF32 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EF38 6100 0000                  		bsr.w	ObjHitFloor
0000EF3C 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EF3E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EF42 D368 000C                  		add.w	d1,$C(a0)
0000EF46 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EF4A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF50 117C 0004 0028             		move.b	#4,$28(a0)
0000EF56 3011                       		move.w	(a1),d0
0000EF58 0240 03FF                  		andi.w	#$3FF,d0
0000EF5C 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EF60 6400                       		bcc.s	locret_E8EE
0000EF62 117C 0000 0028             		move.b	#0,$28(a0)
0000EF68                            
0000EF68                            locret_E8EE:
0000EF68 4E75                       		rts	
0000EF6A                            ; ===========================================================================
0000EF6A                            
0000EF6A                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EF6A 7000                       		moveq	#0,d0
0000EF6C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EF70 E648                       		lsr.w	#3,d0
0000EF72 3228 0030                  		move.w	$30(a0),d1
0000EF76 9240                       		sub.w	d0,d1
0000EF78 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EF7C 4E75                       		rts	
0000EF7E                            ; ===========================================================================
0000EF7E                            ; ---------------------------------------------------------------------------
0000EF7E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EF7E                            ; ---------------------------------------------------------------------------
0000EF7E                            Map_obj46:
0000EF7E                            	include "_maps\obj46.asm"
0000EF7E                            ; ---------------------------------------------------------------------------
0000EF7E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EF7E                            ; ---------------------------------------------------------------------------
0000EF7E 0000                       		dc.w byte_E906-Map_obj46
0000EF80 01                         byte_E906:	dc.b 1
0000EF81 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EF86                            		even
0000EF86                            		even
0000EF86                            
0000EF86                            ; ===========================================================================
0000EF86                            ; ---------------------------------------------------------------------------
0000EF86                            ; Object 12 - lamp (SYZ)
0000EF86                            ; ---------------------------------------------------------------------------
0000EF86                            
0000EF86                            Obj12:					; XREF: Obj_Index
0000EF86 7000                       		moveq	#0,d0
0000EF88 1028 0024                  		move.b	$24(a0),d0
0000EF8C 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EF90 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EF94                            ; ===========================================================================
0000EF94 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EF96 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EF98                            ; ===========================================================================
0000EF98                            
0000EF98                            Obj12_Main:				; XREF: Obj12_Index
0000EF98 5428 0024                  		addq.b	#2,$24(a0)
0000EF9C 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EFA4 317C 0000 0002             		move.w	#0,2(a0)
0000EFAA 117C 0004 0001             		move.b	#4,1(a0)
0000EFB0 117C 0010 0019             		move.b	#$10,$19(a0)
0000EFB6 117C 0006 0018             		move.b	#6,$18(a0)
0000EFBC                            
0000EFBC                            Obj12_Animate:				; XREF: Obj12_Index
0000EFBC 5328 001E                  		subq.b	#1,$1E(a0)
0000EFC0 6A00                       		bpl.s	Obj12_ChkDel
0000EFC2 117C 0007 001E             		move.b	#7,$1E(a0)
0000EFC8 5228 001A                  		addq.b	#1,$1A(a0)
0000EFCC 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EFD2 6500                       		bcs.s	Obj12_ChkDel
0000EFD4 117C 0000 001A             		move.b	#0,$1A(a0)
0000EFDA                            
0000EFDA                            Obj12_ChkDel:
0000EFDA 3028 0008                  		move.w	8(a0),d0
0000EFDE 0240 FF80                  		andi.w	#$FF80,d0
0000EFE2 3238 F700                  		move.w	($FFFFF700).w,d1
0000EFE6 0441 0080                  		subi.w	#$80,d1
0000EFEA 0241 FF80                  		andi.w	#$FF80,d1
0000EFEE 9041                       		sub.w	d1,d0
0000EFF0 0C40 0280                  		cmpi.w	#$280,d0
0000EFF4 6200 ECCA                  		bhi.w	DeleteObject
0000EFF8 6000 EC8A                  		bra.w	DisplaySprite
0000EFFC                            ; ===========================================================================
0000EFFC                            ; ---------------------------------------------------------------------------
0000EFFC                            ; Sprite mappings - lamp (SYZ)
0000EFFC                            ; ---------------------------------------------------------------------------
0000EFFC                            Map_obj12:
0000EFFC                            	include "_maps\obj12.asm"
0000EFFC                            ; ---------------------------------------------------------------------------
0000EFFC                            ; Sprite mappings - lamp (SYZ)
0000EFFC                            ; ---------------------------------------------------------------------------
0000EFFC 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F000 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F004 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F008 02                         byte_E98E:	dc.b 2
0000F009 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F00E 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F013 02                         byte_E999:	dc.b 2
0000F014 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F019 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F01E 02                         byte_E9A4:	dc.b 2
0000F01F F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F024 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F029 02                         byte_E9AF:	dc.b 2
0000F02A F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F02F 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F034 02                         byte_E9BA:	dc.b 2
0000F035 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F03A 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F03F 02                         byte_E9C5:	dc.b 2
0000F040 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F045 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F04A                            		even
0000F04A                            		even
0000F04A                            
0000F04A                            ; ===========================================================================
0000F04A                            ; ---------------------------------------------------------------------------
0000F04A                            ; Object 47 - pinball bumper (SYZ)
0000F04A                            ; ---------------------------------------------------------------------------
0000F04A                            
0000F04A                            Obj47:					; XREF: Obj_Index
0000F04A 7000                       		moveq	#0,d0
0000F04C 1028 0024                  		move.b	$24(a0),d0
0000F050 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F054 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F058                            ; ===========================================================================
0000F058 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F05A 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F05C                            ; ===========================================================================
0000F05C                            
0000F05C                            Obj47_Main:				; XREF: Obj47_Index
0000F05C 5428 0024                  		addq.b	#2,$24(a0)
0000F060 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F068 317C 0380 0002             		move.w	#$380,2(a0)
0000F06E 117C 0004 0001             		move.b	#4,1(a0)
0000F074 117C 0010 0019             		move.b	#$10,$19(a0)
0000F07A 117C 0001 0018             		move.b	#1,$18(a0)
0000F080 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F086                            
0000F086                            Obj47_Hit:				; XREF: Obj47_Index
0000F086 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F08A 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F08E 4228 0021                  		clr.b	$21(a0)
0000F092 43F8 D000                  		lea	($FFFFD000).w,a1
0000F096 3228 0008                  		move.w	8(a0),d1
0000F09A 3428 000C                  		move.w	$C(a0),d2
0000F09E 9269 0008                  		sub.w	8(a1),d1
0000F0A2 9469 000C                  		sub.w	$C(a1),d2
0000F0A6 4EB9 0000 2F32             		jsr	(CalcAngle).l
0000F0AC 4EB9 0000 2C64             		jsr	(CalcSine).l
0000F0B2 C3FC F900                  		muls.w	#-$700,d1
0000F0B6 E081                       		asr.l	#8,d1
0000F0B8 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F0BC C1FC F900                  		muls.w	#-$700,d0
0000F0C0 E080                       		asr.l	#8,d0
0000F0C2 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F0C6 08E9 0001 0022             		bset	#1,$22(a1)
0000F0CC 08A9 0004 0022             		bclr	#4,$22(a1)
0000F0D2 08A9 0005 0022             		bclr	#5,$22(a1)
0000F0D8 4229 003C                  		clr.b	$3C(a1)
0000F0DC 117C 0001 001C             		move.b	#1,$1C(a0)
0000F0E2 303C 00B4                  		move.w	#$B4,d0
0000F0E6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F0EC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F0F0 7000                       		moveq	#0,d0
0000F0F2 1028 0023                  		move.b	$23(a0),d0
0000F0F6 6700                       		beq.s	Obj47_Score
0000F0F8 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F0FE 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F100 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F104                            
0000F104                            Obj47_Score:
0000F104 7001                       		moveq	#1,d0
0000F106 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F10C 6100 EFFC                  		bsr.w	SingleObjLoad
0000F110 6600                       		bne.s	Obj47_Display
0000F112 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F116 3368 0008 0008             		move.w	8(a0),8(a1)
0000F11C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F122 137C 0004 001A             		move.b	#4,$1A(a1)
0000F128                            
0000F128                            Obj47_Display:
0000F128 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F12E 6100 BC14                  		bsr.w	AnimateSprite
0000F132 3028 0008                  		move.w	8(a0),d0
0000F136 0240 FF80                  		andi.w	#$FF80,d0
0000F13A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F13E 0441 0080                  		subi.w	#$80,d1
0000F142 0241 FF80                  		andi.w	#$FF80,d1
0000F146 9041                       		sub.w	d1,d0
0000F148 0C40 0280                  		cmpi.w	#$280,d0
0000F14C 6200                       		bhi.s	Obj47_ChkHit
0000F14E 6000 EB34                  		bra.w	DisplaySprite
0000F152                            ; ===========================================================================
0000F152                            
0000F152                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F152 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F156 7000                       		moveq	#0,d0
0000F158 1028 0023                  		move.b	$23(a0),d0
0000F15C 6700                       		beq.s	Obj47_Delete
0000F15E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F164                            
0000F164                            Obj47_Delete:
0000F164 6000 EB5A                  		bra.w	DeleteObject
0000F168                            ; ===========================================================================
0000F168                            Ani_obj47:
0000F168                            	include "_anim\obj47.asm"
0000F168                            ; ---------------------------------------------------------------------------
0000F168                            ; Animation script - flamethrower (SBZ)
0000F168                            ; ---------------------------------------------------------------------------
0000F168 0000                       		dc.w byte_EAF4-Ani_obj47
0000F16A 0000                       		dc.w byte_EAF8-Ani_obj47
0000F16C 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F170 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F178                            		even
0000F178                            		even
0000F178                            
0000F178                            ; ---------------------------------------------------------------------------
0000F178                            ; Sprite mappings - pinball bumper (SYZ)
0000F178                            ; ---------------------------------------------------------------------------
0000F178                            Map_obj47:
0000F178                            	include "_maps\obj47.asm"
0000F178                            ; ---------------------------------------------------------------------------
0000F178                            ; Sprite mappings - pinball bumper (SYZ)
0000F178                            ; ---------------------------------------------------------------------------
0000F178 0000                       		dc.w byte_EB06-Map_obj47
0000F17A 0000                       		dc.w byte_EB11-Map_obj47
0000F17C 0000                       		dc.w byte_EB1C-Map_obj47
0000F17E 02                         byte_EB06:	dc.b 2
0000F17F F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F184 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F189 02                         byte_EB11:	dc.b 2
0000F18A F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F18F F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F194 02                         byte_EB1C:	dc.b 2
0000F195 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F19A F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F1A0 00                         		even
0000F1A0 00                         		even
0000F1A0                            
0000F1A0                            ; ===========================================================================
0000F1A0                            ; ---------------------------------------------------------------------------
0000F1A0                            ; Object 0D - signpost at the end of a level
0000F1A0                            ; ---------------------------------------------------------------------------
0000F1A0                            
0000F1A0                            Obj0D:					; XREF: Obj_Index
0000F1A0 7000                       		moveq	#0,d0
0000F1A2 1028 0024                  		move.b	$24(a0),d0
0000F1A6 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F1AA 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F1AE 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F1B4 6100 BB8E                  		bsr.w	AnimateSprite
0000F1B8 6100 EACA                  		bsr.w	DisplaySprite
0000F1BC 3028 0008                  		move.w	8(a0),d0
0000F1C0 0240 FF80                  		andi.w	#$FF80,d0
0000F1C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F1C8 0441 0080                  		subi.w	#$80,d1
0000F1CC 0241 FF80                  		andi.w	#$FF80,d1
0000F1D0 9041                       		sub.w	d1,d0
0000F1D2 0C40 0280                  		cmpi.w	#$280,d0
0000F1D6 6200 EAE8                  		bhi.w	DeleteObject
0000F1DA 4E75                       		rts	
0000F1DC                            ; ===========================================================================
0000F1DC 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F1DE 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F1E0 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F1E2 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F1E4 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F1E6                            ; ===========================================================================
0000F1E6                            
0000F1E6                            Obj0D_Main:				; XREF: Obj0D_Index
0000F1E6 5428 0024                  		addq.b	#2,$24(a0)
0000F1EA 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F1F2 317C 0680 0002             		move.w	#$680,2(a0)
0000F1F8 117C 0004 0001             		move.b	#4,1(a0)
0000F1FE 117C 0018 0019             		move.b	#$18,$19(a0)
0000F204 117C 0004 0018             		move.b	#4,$18(a0)
0000F20A                            
0000F20A                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F20A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F20E 9068 0008                  		sub.w	8(a0),d0
0000F212 6500                       		bcs.s	locret_EBBA
0000F214 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F218 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F21A 303C 00CF                  		move.w	#$CF,d0
0000F21E 4EB9 0000 15BA             		jsr	(PlaySound).l	; play signpost	sound
0000F224 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F228 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F22E 5428 0024                  		addq.b	#2,$24(a0)
0000F232                            
0000F232                            locret_EBBA:
0000F232 4E75                       		rts	
0000F234                            ; ===========================================================================
0000F234                            
0000F234                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F234 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F238 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F23A 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F240 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F244 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F24A 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F24C 5428 0024                  		addq.b	#2,$24(a0)
0000F250                            
0000F250                            Obj0D_Sparkle:
0000F250 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F254 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F256 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F25C 7000                       		moveq	#0,d0
0000F25E 1028 0034                  		move.b	$34(a0),d0
0000F262 5428 0034                  		addq.b	#2,$34(a0)
0000F266 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F26C 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F270 6100 EE98                  		bsr.w	SingleObjLoad
0000F274 6600                       		bne.s	locret_EC42
0000F276 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F27A 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F280 101A                       		move.b	(a2)+,d0
0000F282 4880                       		ext.w	d0
0000F284 D068 0008                  		add.w	8(a0),d0
0000F288 3340 0008                  		move.w	d0,8(a1)
0000F28C 101A                       		move.b	(a2)+,d0
0000F28E 4880                       		ext.w	d0
0000F290 D068 000C                  		add.w	$C(a0),d0
0000F294 3340 000C                  		move.w	d0,$C(a1)
0000F298 237C 0000 A4E2 0004        		move.l	#Map_obj25,4(a1)
0000F2A0 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F2A6 137C 0004 0001             		move.b	#4,1(a1)
0000F2AC 137C 0002 0018             		move.b	#2,$18(a1)
0000F2B2 137C 0008 0019             		move.b	#8,$19(a1)
0000F2B8                            
0000F2B8                            locret_EC42:
0000F2B8 4E75                       		rts	
0000F2BA                            ; ===========================================================================
0000F2BA E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F2BC 0808                       		dc.b	8,   8
0000F2BE F000                       		dc.b -$10,   0
0000F2C0 18F8                       		dc.b  $18,  -8
0000F2C2 00F8                       		dc.b	0,  -8
0000F2C4 1000                       		dc.b  $10,   0
0000F2C6 E808                       		dc.b -$18,   8
0000F2C8 1810                       		dc.b  $18, $10
0000F2CA                            ; ===========================================================================
0000F2CA                            
0000F2CA                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F2CA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F2CE 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F2D2 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F2D8 6600                       		bne.s	loc_EC70
0000F2DA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F2E0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F2E6 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F2E8 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F2EE 6000                       		bra.s	loc_EC70
0000F2F0                            
0000F2F0                            Obj0D_MoveLeft:
0000F2F0 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F2F6                            
0000F2F6                            loc_EC70:
0000F2F6 4A38 D000                  		tst.b	($FFFFD000).w
0000F2FA 6700                       		beq.s	loc_EC86
0000F2FC 3038 D008                  		move.w	($FFFFD008).w,d0
0000F300 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F304 0641 0128                  		addi.w	#$128,d1
0000F308 B041                       		cmp.w	d1,d0
0000F30A 6500                       		bcs.s	locret_ECEE
0000F30C                            
0000F30C                            loc_EC86:
0000F30C 5428 0024                  		addq.b	#2,$24(a0)
0000F310                            
0000F310                            ; ---------------------------------------------------------------------------
0000F310                            ; Subroutine to	set up bonuses at the end of an	act
0000F310                            ; ---------------------------------------------------------------------------
0000F310                            
0000F310                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F310                            
0000F310                            
0000F310                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F310 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F314 6600                       		bne.s	locret_ECEE
0000F316 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F31C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F320 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F324 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F32A 7010                       		moveq	#$10,d0
0000F32C 4EB9 0000 17D6             		jsr	(LoadPLC2).l	; load title card patterns
0000F332 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F338 7000                       		moveq	#0,d0
0000F33A 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F33E C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F342 7200                       		moveq	#0,d1
0000F344 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F348 D041                       		add.w	d1,d0		; add up your time
0000F34A 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F34E 7214                       		moveq	#$14,d1
0000F350 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F352 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F354 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F356                            
0000F356                            loc_ECD0:
0000F356 D040                       		add.w	d0,d0
0000F358 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F35E 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F362 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F366 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F36A 303C 008E                  		move.w	#$8E,d0
0000F36E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F374                            
0000F374                            locret_ECEE:
0000F374 4E75                       		rts	
0000F376                            ; End of function GotThroughAct
0000F376                            
0000F376                            ; ===========================================================================
0000F376 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F38A 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F3A0                            ; ===========================================================================
0000F3A0                            
0000F3A0                            locret_ED1A:				; XREF: Obj0D_Index
0000F3A0 4E75                       		rts	
0000F3A2                            ; ===========================================================================
0000F3A2                            Ani_obj0D:
0000F3A2                            	include "_anim\obj0D.asm"
0000F3A2                            ; ---------------------------------------------------------------------------
0000F3A2                            ; Animation script - signpost
0000F3A2                            ; ---------------------------------------------------------------------------
0000F3A2 0000                       		dc.w byte_ED24-Ani_obj0D
0000F3A4 0000                       		dc.w byte_ED28-Ani_obj0D
0000F3A6 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F3A8 0000                       		dc.w byte_ED34-Ani_obj0D
0000F3AA 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F3AE 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F3B4 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F3BA 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F3BE 00                         		even
0000F3BE 00                         		even
0000F3BE                            
0000F3BE                            ; ---------------------------------------------------------------------------
0000F3BE                            ; Sprite mappings - signpost
0000F3BE                            ; ---------------------------------------------------------------------------
0000F3BE                            Map_obj0D:
0000F3BE                            	include "_maps\obj0D.asm"
0000F3BE                            ; ---------------------------------------------------------------------------
0000F3BE                            ; Sprite mappings - signpost
0000F3BE                            ; ---------------------------------------------------------------------------
0000F3BE 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F3C2 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F3C6 0000                       		dc.w byte_ED73-Map_obj0D
0000F3C8 03                         byte_ED42:	dc.b 3
0000F3C9 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F3CE F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F3D3 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F3D8 02                         byte_ED52:	dc.b 2
0000F3D9 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F3DE 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F3E3 02                         byte_ED5D:	dc.b 2
0000F3E4 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F3E9 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F3EE 02                         byte_ED68:	dc.b 2
0000F3EF F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F3F4 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F3F9 03                         byte_ED73:	dc.b 3
0000F3FA F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F3FF F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F404 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F40A 00                         		even
0000F40A 00                         		even
0000F40A                            
0000F40A                            ; ===========================================================================
0000F40A                            ; ---------------------------------------------------------------------------
0000F40A                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F40A                            ; ---------------------------------------------------------------------------
0000F40A                            
0000F40A                            Obj4C:					; XREF: Obj_Index
0000F40A 7000                       		moveq	#0,d0
0000F40C 1028 0024                  		move.b	$24(a0),d0
0000F410 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F414 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F418 6000 0000                  		bra.w	Obj4D_ChkDel
0000F41C                            ; ===========================================================================
0000F41C 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F41E 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F420 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F422 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F424 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F426 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F428                            ; ===========================================================================
0000F428                            
0000F428                            Obj4C_Main:				; XREF: Obj4C_Index
0000F428 5428 0024                  		addq.b	#2,$24(a0)
0000F42C 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F434 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F43A 117C 0004 0001             		move.b	#4,1(a0)
0000F440 117C 0001 0018             		move.b	#1,$18(a0)
0000F446 117C 0038 0019             		move.b	#$38,$19(a0)
0000F44C 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F452                            
0000F452                            loc_EDCC:				; XREF: Obj4C_Index
0000F452 5368 0032                  		subq.w	#1,$32(a0)
0000F456 6A00                       		bpl.s	locret_EDF0
0000F458 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F45E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F462 3228 000C                  		move.w	$C(a0),d1
0000F466 B041                       		cmp.w	d1,d0
0000F468 6400                       		bcc.s	locret_EDF0
0000F46A 0441 0170                  		subi.w	#$170,d1
0000F46E B041                       		cmp.w	d1,d0
0000F470 6500                       		bcs.s	locret_EDF0
0000F472 5428 0024                  		addq.b	#2,$24(a0)
0000F476                            
0000F476                            locret_EDF0:
0000F476 4E75                       		rts	
0000F478                            ; ===========================================================================
0000F478                            
0000F478                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F478 5428 0024                  		addq.b	#2,$24(a0)
0000F47C 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F480 6600                       		bne.s	loc_EE18
0000F482 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F486 3368 0008 0008             		move.w	8(a0),8(a1)
0000F48C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F492 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F498 2348 003C                  		move.l	a0,$3C(a1)
0000F49C                            
0000F49C                            loc_EE18:
0000F49C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F4A2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F4A6 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F4A8 117C 0004 001C             		move.b	#4,$1C(a0)
0000F4AE 6000                       		bra.s	Obj4C_Display
0000F4B0                            ; ===========================================================================
0000F4B0                            
0000F4B0                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F4B0 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F4B4 08E9 0001 0022             		bset	#1,$22(a1)
0000F4BA 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F4C0 6000                       		bra.s	Obj4C_Display
0000F4C2                            ; ===========================================================================
0000F4C2                            
0000F4C2                            loc_EE3E:				; XREF: Obj4C_Index
0000F4C2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F4C6 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F4C8 5428 0024                  		addq.b	#2,$24(a0)
0000F4CC 4E75                       		rts	
0000F4CE                            ; ===========================================================================
0000F4CE                            
0000F4CE                            Obj4C_Display:				; XREF: Obj4C_Index
0000F4CE 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F4D4 6100 B86E                  		bsr.w	AnimateSprite
0000F4D8 6100 E7AA                  		bsr.w	DisplaySprite
0000F4DC 4E75                       		rts	
0000F4DE                            ; ===========================================================================
0000F4DE                            
0000F4DE                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F4DE 117C 0000 001C             		move.b	#0,$1C(a0)
0000F4E4 117C 0002 0024             		move.b	#2,$24(a0)
0000F4EA 4A28 0028                  		tst.b	$28(a0)
0000F4EE 6700 E7D0                  		beq.w	DeleteObject
0000F4F2 4E75                       		rts	
0000F4F4                            ; ===========================================================================
0000F4F4                            ; ---------------------------------------------------------------------------
0000F4F4                            ; Object 4D - lava geyser / lavafall (MZ)
0000F4F4                            ; ---------------------------------------------------------------------------
0000F4F4                            
0000F4F4                            Obj4D:					; XREF: Obj_Index
0000F4F4 7000                       		moveq	#0,d0
0000F4F6 1028 0024                  		move.b	$24(a0),d0
0000F4FA 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F4FE 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F502 6000 E780                  		bra.w	DisplaySprite
0000F506                            ; ===========================================================================
0000F506 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F508 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F50A 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F50C 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F50E                            
0000F50E FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F512                            ; ===========================================================================
0000F512                            
0000F512                            Obj4D_Main:				; XREF: Obj4D_Index
0000F512 5428 0024                  		addq.b	#2,$24(a0)
0000F516 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F51C 4A28 0028                  		tst.b	$28(a0)
0000F520 6700                       		beq.s	loc_EEA4
0000F522 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F528                            
0000F528                            loc_EEA4:
0000F528 7000                       		moveq	#0,d0
0000F52A 1028 0028                  		move.b	$28(a0),d0
0000F52E D040                       		add.w	d0,d0
0000F530 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F536 2248                       		movea.l	a0,a1
0000F538 7201                       		moveq	#1,d1
0000F53A 6100                       		bsr.s	Obj4D_MakeLava
0000F53C 6000                       		bra.s	loc_EF10
0000F53E                            ; ===========================================================================
0000F53E                            
0000F53E                            Obj4D_Loop:
0000F53E 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F542 6600                       		bne.s	loc_EF0A
0000F544                            
0000F544                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F544 12BC 004D                  		move.b	#$4D,0(a1)
0000F548 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F550 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F556 137C 0004 0001             		move.b	#4,1(a1)
0000F55C 137C 0020 0019             		move.b	#$20,$19(a1)
0000F562 3368 0008 0008             		move.w	8(a0),8(a1)
0000F568 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F56E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F574 137C 0001 0018             		move.b	#1,$18(a1)
0000F57A 137C 0005 001C             		move.b	#5,$1C(a1)
0000F580 4A28 0028                  		tst.b	$28(a0)
0000F584 6700                       		beq.s	loc_EF0A
0000F586 137C 0002 001C             		move.b	#2,$1C(a1)
0000F58C                            
0000F58C                            loc_EF0A:
0000F58C 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F590 4E75                       		rts	
0000F592                            ; ===========================================================================
0000F592                            
0000F592                            loc_EF10:				; XREF: Obj4D_Main
0000F592 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F598 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F59E 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F5A4 137C 0093 0020             		move.b	#$93,$20(a1)
0000F5AA 137C 0080 0016             		move.b	#$80,$16(a1)
0000F5B0 08E9 0004 0001             		bset	#4,1(a1)
0000F5B6 5829 0024                  		addq.b	#4,$24(a1)
0000F5BA 2348 003C                  		move.l	a0,$3C(a1)
0000F5BE 4A28 0028                  		tst.b	$28(a0)
0000F5C2 6700                       		beq.s	Obj4D_PlaySnd
0000F5C4 7200                       		moveq	#0,d1
0000F5C6 6100 FF76                  		bsr.w	Obj4D_Loop
0000F5CA 5429 0024                  		addq.b	#2,$24(a1)
0000F5CE 08E9 0004 0002             		bset	#4,2(a1)
0000F5D4 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F5DA 137C 0000 0018             		move.b	#0,$18(a1)
0000F5E0 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F5E6 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F5EC 117C 0000 0028             		move.b	#0,$28(a0)
0000F5F2                            
0000F5F2                            Obj4D_PlaySnd:
0000F5F2 303C 00C8                  		move.w	#$C8,d0
0000F5F6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000F5FC                            
0000F5FC                            Obj4D_Action:				; XREF: Obj4D_Index
0000F5FC 7000                       		moveq	#0,d0
0000F5FE 1028 0028                  		move.b	$28(a0),d0
0000F602 D040                       		add.w	d0,d0
0000F604 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F608 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F60C 6100 E650                  		bsr.w	SpeedToPos
0000F610 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F616 6100 B72C                  		bsr.w	AnimateSprite
0000F61A                            
0000F61A                            Obj4D_ChkDel:				; XREF: Obj4C
0000F61A 3028 0008                  		move.w	8(a0),d0
0000F61E 0240 FF80                  		andi.w	#$FF80,d0
0000F622 3238 F700                  		move.w	($FFFFF700).w,d1
0000F626 0441 0080                  		subi.w	#$80,d1
0000F62A 0241 FF80                  		andi.w	#$FF80,d1
0000F62E 9041                       		sub.w	d1,d0
0000F630 0C40 0280                  		cmpi.w	#$280,d0
0000F634 6200 E68A                  		bhi.w	DeleteObject
0000F638 4E75                       		rts	
0000F63A                            ; ===========================================================================
0000F63A 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F63C 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F63E                            ; ===========================================================================
0000F63E                            
0000F63E                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F63E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F644 3028 0030                  		move.w	$30(a0),d0
0000F648 B068 000C                  		cmp.w	$C(a0),d0
0000F64C 6400                       		bcc.s	locret_EFDA
0000F64E 5828 0024                  		addq.b	#4,$24(a0)
0000F652 2268 003C                  		movea.l	$3C(a0),a1
0000F656 137C 0003 001C             		move.b	#3,$1C(a1)
0000F65C                            
0000F65C                            locret_EFDA:
0000F65C 4E75                       		rts	
0000F65E                            ; ===========================================================================
0000F65E                            
0000F65E                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F65E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F664 3028 0030                  		move.w	$30(a0),d0
0000F668 B068 000C                  		cmp.w	$C(a0),d0
0000F66C 6400                       		bcc.s	locret_EFFA
0000F66E 5828 0024                  		addq.b	#4,$24(a0)
0000F672 2268 003C                  		movea.l	$3C(a0),a1
0000F676 137C 0001 001C             		move.b	#1,$1C(a1)
0000F67C                            
0000F67C                            locret_EFFA:
0000F67C 4E75                       		rts	
0000F67E                            ; ===========================================================================
0000F67E                            
0000F67E                            loc_EFFC:				; XREF: Obj4D_Index
0000F67E 2268 003C                  		movea.l	$3C(a0),a1
0000F682 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F688 6700 0000                  		beq.w	Obj4D_Delete
0000F68C 3029 000C                  		move.w	$C(a1),d0
0000F690 0640 0060                  		addi.w	#$60,d0
0000F694 3140 000C                  		move.w	d0,$C(a0)
0000F698 9068 0030                  		sub.w	$30(a0),d0
0000F69C 4440                       		neg.w	d0
0000F69E 7208                       		moveq	#8,d1
0000F6A0 0C40 0040                  		cmpi.w	#$40,d0
0000F6A4 6C00                       		bge.s	loc_F026
0000F6A6 720B                       		moveq	#$B,d1
0000F6A8                            
0000F6A8                            loc_F026:
0000F6A8 0C40 0080                  		cmpi.w	#$80,d0
0000F6AC 6F00                       		ble.s	loc_F02E
0000F6AE 720E                       		moveq	#$E,d1
0000F6B0                            
0000F6B0                            loc_F02E:
0000F6B0 5328 001E                  		subq.b	#1,$1E(a0)
0000F6B4 6A00                       		bpl.s	loc_F04C
0000F6B6 117C 0007 001E             		move.b	#7,$1E(a0)
0000F6BC 5228 001B                  		addq.b	#1,$1B(a0)
0000F6C0 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F6C6 6500                       		bcs.s	loc_F04C
0000F6C8 117C 0000 001B             		move.b	#0,$1B(a0)
0000F6CE                            
0000F6CE                            loc_F04C:
0000F6CE 1028 001B                  		move.b	$1B(a0),d0
0000F6D2 D001                       		add.b	d1,d0
0000F6D4 1140 001A                  		move.b	d0,$1A(a0)
0000F6D8 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F6DC                            ; ===========================================================================
0000F6DC                            
0000F6DC                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F6DC 6000 E5E2                  		bra.w	DeleteObject
0000F6E0                            ; ===========================================================================
0000F6E0                            ; ---------------------------------------------------------------------------
0000F6E0                            ; Object 4E - advancing	wall of	lava (MZ)
0000F6E0                            ; ---------------------------------------------------------------------------
0000F6E0                            
0000F6E0                            Obj4E:					; XREF: Obj_Index
0000F6E0 7000                       		moveq	#0,d0
0000F6E2 1028 0024                  		move.b	$24(a0),d0
0000F6E6 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F6EA 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F6EE                            ; ===========================================================================
0000F6EE 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F6F0 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F6F2 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F6F4 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F6F6 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F6F8                            ; ===========================================================================
0000F6F8                            
0000F6F8                            Obj4E_Main:				; XREF: Obj4E_Index
0000F6F8 5828 0024                  		addq.b	#4,$24(a0)
0000F6FC 2248                       		movea.l	a0,a1
0000F6FE 7201                       		moveq	#1,d1
0000F700 6000                       		bra.s	Obj4E_Main2
0000F702                            ; ===========================================================================
0000F702                            
0000F702                            Obj4E_Loop:
0000F702 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F706 6600                       		bne.s	loc_F0C8
0000F708                            
0000F708                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F708 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F70C 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F714 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F71A 137C 0004 0001             		move.b	#4,1(a1)
0000F720 137C 0050 0019             		move.b	#$50,$19(a1)
0000F726 3368 0008 0008             		move.w	8(a0),8(a1)
0000F72C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F732 137C 0001 0018             		move.b	#1,$18(a1)
0000F738 137C 0000 001C             		move.b	#0,$1C(a1)
0000F73E 137C 0094 0020             		move.b	#$94,$20(a1)
0000F744 2348 003C                  		move.l	a0,$3C(a1)
0000F748                            
0000F748                            loc_F0C8:
0000F748 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F74C                            
0000F74C 5C29 0024                  		addq.b	#6,$24(a1)
0000F750 137C 0004 001A             		move.b	#4,$1A(a1)
0000F756                            
0000F756                            Obj4E_Action:				; XREF: Obj4E_Index
0000F756 3038 D008                  		move.w	($FFFFD008).w,d0
0000F75A 9068 0008                  		sub.w	8(a0),d0
0000F75E 6400                       		bcc.s	Obj4E_ChkSonic
0000F760 4440                       		neg.w	d0
0000F762                            
0000F762                            Obj4E_ChkSonic:
0000F762 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F766 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F768 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F76C 9068 000C                  		sub.w	$C(a0),d0
0000F770 6400                       		bcc.s	loc_F0F4
0000F772 4440                       		neg.w	d0
0000F774                            
0000F774                            loc_F0F4:
0000F774 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F778 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F77A 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F780 6000                       		bra.s	Obj4E_Solid
0000F782                            ; ===========================================================================
0000F782                            
0000F782                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F782 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F786 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F788 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F78E 5528 0024                  		subq.b	#2,$24(a0)
0000F792                            
0000F792                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F792 323C 002B                  		move.w	#$2B,d1
0000F796 343C 0018                  		move.w	#$18,d2
0000F79A 3602                       		move.w	d2,d3
0000F79C 5243                       		addq.w	#1,d3
0000F79E 3828 0008                  		move.w	8(a0),d4
0000F7A2 1028 0024                  		move.b	$24(a0),d0
0000F7A6 3F00                       		move.w	d0,-(sp)
0000F7A8 6100 0000                  		bsr.w	SolidObject
0000F7AC 301F                       		move.w	(sp)+,d0
0000F7AE 1140 0024                  		move.b	d0,$24(a0)
0000F7B2 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F7B8 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F7BA 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F7BE 4228 0036                  		clr.b	$36(a0)
0000F7C2                            
0000F7C2                            Obj4E_Animate:
0000F7C2 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F7C8 6100 B57A                  		bsr.w	AnimateSprite
0000F7CC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F7D2 6400                       		bcc.s	Obj4E_ChkDel
0000F7D4 6100 E488                  		bsr.w	SpeedToPos
0000F7D8                            
0000F7D8                            Obj4E_ChkDel:
0000F7D8 6100 E4AA                  		bsr.w	DisplaySprite
0000F7DC 4A28 0036                  		tst.b	$36(a0)
0000F7E0 6600                       		bne.s	locret_F17E
0000F7E2 3028 0008                  		move.w	8(a0),d0
0000F7E6 0240 FF80                  		andi.w	#$FF80,d0
0000F7EA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F7EE 0441 0080                  		subi.w	#$80,d1
0000F7F2 0241 FF80                  		andi.w	#$FF80,d1
0000F7F6 9041                       		sub.w	d1,d0
0000F7F8 0C40 0280                  		cmpi.w	#$280,d0
0000F7FC 6200                       		bhi.s	Obj4E_ChkGone
0000F7FE                            
0000F7FE                            locret_F17E:
0000F7FE 4E75                       		rts	
0000F800                            ; ===========================================================================
0000F800                            
0000F800                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F800 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F804 7000                       		moveq	#0,d0
0000F806 1028 0023                  		move.b	$23(a0),d0
0000F80A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F810 117C 0008 0024             		move.b	#8,$24(a0)
0000F816 4E75                       		rts	
0000F818                            ; ===========================================================================
0000F818                            
0000F818                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F818 2268 003C                  		movea.l	$3C(a0),a1
0000F81C 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F822 6700                       		beq.s	Obj4E_Delete
0000F824 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F82A 0468 0080 0008             		subi.w	#$80,8(a0)
0000F830 6000 E452                  		bra.w	DisplaySprite
0000F834                            ; ===========================================================================
0000F834                            
0000F834                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F834 6000 E48A                  		bra.w	DeleteObject
0000F838                            ; ===========================================================================
0000F838                            ; ---------------------------------------------------------------------------
0000F838                            ; Object 54 - invisible	lava tag (MZ)
0000F838                            ; ---------------------------------------------------------------------------
0000F838                            
0000F838                            Obj54:					; XREF: Obj_Index
0000F838 7000                       		moveq	#0,d0
0000F83A 1028 0024                  		move.b	$24(a0),d0
0000F83E 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F842 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F846                            ; ===========================================================================
0000F846 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F848 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F84A                            
0000F84A 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F84E                            ; ===========================================================================
0000F84E                            
0000F84E                            Obj54_Main:				; XREF: Obj54_Index
0000F84E 5428 0024                  		addq.b	#2,$24(a0)
0000F852 7000                       		moveq	#0,d0
0000F854 1028 0028                  		move.b	$28(a0),d0
0000F858 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F85E 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F866 117C 0084 0001             		move.b	#$84,1(a0)
0000F86C                            
0000F86C                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F86C 3028 0008                  		move.w	8(a0),d0
0000F870 0240 FF80                  		andi.w	#$FF80,d0
0000F874 3238 F700                  		move.w	($FFFFF700).w,d1
0000F878 0441 0080                  		subi.w	#$80,d1
0000F87C 0241 FF80                  		andi.w	#$FF80,d1
0000F880 9041                       		sub.w	d1,d0
0000F882 6B00 E43C                  		bmi.w	DeleteObject
0000F886 0C40 0280                  		cmpi.w	#$280,d0
0000F88A 6200 E434                  		bhi.w	DeleteObject
0000F88E 4E75                       		rts	
0000F890                            ; ===========================================================================
0000F890                            ; ---------------------------------------------------------------------------
0000F890                            ; Sprite mappings - invisible lava tag (MZ)
0000F890                            ; ---------------------------------------------------------------------------
0000F890                            Map_obj54:
0000F890                            	include "_maps\obj54.asm"
0000F890                            ; ---------------------------------------------------------------------------
0000F890                            ; Sprite mappings - invisible lava tag (MZ)
0000F890                            ; ---------------------------------------------------------------------------
0000F890 0000                       		dc.w byte_F212-Map_obj54
0000F892 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F894 00                         		even
0000F894 00                         		even
0000F894                            
0000F894                            Ani_obj4C:
0000F894                            	include "_anim\obj4C.asm"
0000F894                            ; ---------------------------------------------------------------------------
0000F894                            ; Animation script - geyser of lava (MZ)
0000F894                            ; ---------------------------------------------------------------------------
0000F894 0000                       		dc.w byte_F220-Ani_obj4C
0000F896 0000                       		dc.w byte_F22A-Ani_obj4C
0000F898 0000                       		dc.w byte_F22E-Ani_obj4C
0000F89A 0000                       		dc.w byte_F232-Ani_obj4C
0000F89C 0000                       		dc.w byte_F23A-Ani_obj4C
0000F89E 0000                       		dc.w byte_F23E-Ani_obj4C
0000F8A0 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F8AA 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F8AE 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F8B2 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F8BA 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F8BE 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F8C2                            		even
0000F8C2                            		even
0000F8C2                            
0000F8C2                            Ani_obj4E:
0000F8C2                            	include "_anim\obj4E.asm"
0000F8C2                            ; ---------------------------------------------------------------------------
0000F8C2                            ; Animation script - advancing wall of lava (MZ)
0000F8C2                            ; ---------------------------------------------------------------------------
0000F8C2 0000                       		dc.w byte_F244-Ani_obj4E
0000F8C4 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F8CA                            		even
0000F8CA                            		even
0000F8CA                            
0000F8CA                            ; ---------------------------------------------------------------------------
0000F8CA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F8CA                            ; ---------------------------------------------------------------------------
0000F8CA                            Map_obj4C:
0000F8CA                            	include "_maps\obj4C.asm"
0000F8CA                            ; ---------------------------------------------------------------------------
0000F8CA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F8CA                            ; ---------------------------------------------------------------------------
0000F8CA 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F8CE 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F8D2 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F8D6 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F8DA 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F8DE 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F8E2 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F8E6 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F8EA 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F8EE 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F8F2 02                         byte_F272:	dc.b 2
0000F8F3 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F8F8 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F8FD 02                         byte_F27D:	dc.b 2
0000F8FE EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F903 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F908 04                         byte_F288:	dc.b 4
0000F909 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F90E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F913 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F918 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F91D 04                         byte_F29D:	dc.b 4
0000F91E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F923 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F928 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F92D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F932 06                         byte_F2B2:	dc.b 6
0000F933 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F938 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F93D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F942 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F947 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F94C E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F951 06                         byte_F2D1:	dc.b 6
0000F952 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F957 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F95C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F961 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F966 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F96B E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F970 02                         byte_F2F0:	dc.b 2
0000F971 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F976 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F97B 02                         byte_F2FB:	dc.b 2
0000F97C E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F981 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F986 0A                         byte_F306:	dc.b $A
0000F987 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F98C 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F991 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F996 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F99B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F9A0 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F9A5 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F9AA F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F9AF 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F9B4 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F9B9 0A                         byte_F339:	dc.b $A
0000F9BA 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F9BF 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F9C4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F9C9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F9CE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F9D3 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F9D8 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F9DD F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F9E2 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F9E7 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F9EC 0A                         byte_F36C:	dc.b $A
0000F9ED 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F9F2 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F9F7 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F9FC B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FA01 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FA06 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FA0B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FA10 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FA15 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FA1A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FA1F 06                         byte_F39F:	dc.b 6
0000FA20 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FA25 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FA2A B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FA2F B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FA34 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FA39 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FA3E 06                         byte_F3BE:	dc.b 6
0000FA3F 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FA44 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FA49 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FA4E B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FA53 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FA58 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FA5D 06                         byte_F3DD:	dc.b 6
0000FA5E 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FA63 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FA68 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FA6D B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FA72 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FA77 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FA7C 10                         byte_F3FC:	dc.b $10
0000FA7D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FA82 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FA87 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FA8C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FA91 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FA96 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FA9B F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FAA0 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FAA5 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FAAA 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FAAF 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FAB4 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FAB9 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FABE 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FAC3 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FAC8 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FACD 10                         byte_F44D:	dc.b $10
0000FACE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FAD3 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FAD8 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FADD B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FAE2 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FAE7 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FAEC F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FAF1 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FAF6 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FAFB 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FB00 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FB05 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FB0A 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FB0F 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FB14 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FB19 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FB1E 10                         byte_F49E:	dc.b $10
0000FB1F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FB24 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FB29 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FB2E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FB33 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FB38 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FB3D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FB42 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FB47 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FB4C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FB51 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FB56 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FB5B 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FB60 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FB65 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FB6A 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FB6F 06                         byte_F4EF:	dc.b 6
0000FB70 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FB75 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FB7A E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FB7F E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FB84 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FB89 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FB8E 06                         byte_F50E:	dc.b 6
0000FB8F E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FB94 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FB99 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FB9E E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FBA3 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FBA8 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FBAD 00                         byte_F52D:	dc.b 0
0000FBAE                            		even
0000FBAE                            		even
0000FBAE                            
0000FBAE                            ; ---------------------------------------------------------------------------
0000FBAE                            ; Sprite mappings - advancing wall of lava (MZ)
0000FBAE                            ; ---------------------------------------------------------------------------
0000FBAE                            Map_obj4E:
0000FBAE                            	include "_maps\obj4E.asm"
0000FBAE                            ; ---------------------------------------------------------------------------
0000FBAE                            ; Sprite mappings - advancing wall of lava (MZ)
0000FBAE                            ; ---------------------------------------------------------------------------
0000FBAE 0000                       		dc.w byte_F538-Map_obj4E
0000FBB0 0000                       		dc.w byte_F566-Map_obj4E
0000FBB2 0000                       		dc.w byte_F594-Map_obj4E
0000FBB4 0000                       		dc.w byte_F5C2-Map_obj4E
0000FBB6 0000                       		dc.w byte_F5F0-Map_obj4E
0000FBB8 09                         byte_F538:	dc.b 9
0000FBB9 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FBBE 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FBC3 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FBC8 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FBCD 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBD2 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FBD7 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FBDC E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FBE1 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FBE6 09                         byte_F566:	dc.b 9
0000FBE7 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FBEC 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FBF1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FBF6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FBFB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FC00 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FC05 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FC0A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FC0F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FC14 09                         byte_F594:	dc.b 9
0000FC15 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FC1A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FC1F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FC24 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FC29 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FC2E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FC33 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FC38 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FC3D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FC42 09                         byte_F5C2:	dc.b 9
0000FC43 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FC48 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FC4D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FC52 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FC57 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FC5C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FC61 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FC66 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FC6B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FC70 08                         byte_F5F0:	dc.b 8
0000FC71 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FC76 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FC7B E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FC80 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FC85 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FC8A 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FC8F E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FC94 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FC9A 00                         		even
0000FC9A 00                         		even
0000FC9A                            
0000FC9A                            ; ===========================================================================
0000FC9A                            ; ---------------------------------------------------------------------------
0000FC9A                            ; Object 40 - Moto Bug enemy (GHZ)
0000FC9A                            ; ---------------------------------------------------------------------------
0000FC9A                            
0000FC9A                            Obj40:					; XREF: Obj_Index
0000FC9A 7000                       		moveq	#0,d0
0000FC9C 1028 0024                  		move.b	$24(a0),d0
0000FCA0 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FCA4 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FCA8                            ; ===========================================================================
0000FCA8 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FCAA 0000                       		dc.w Obj40_Action-Obj40_Index
0000FCAC 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FCAE 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FCB0                            ; ===========================================================================
0000FCB0                            
0000FCB0                            Obj40_Main:				; XREF: Obj40_Index
0000FCB0 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FCB8 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FCBE 117C 0004 0001             		move.b	#4,1(a0)
0000FCC4 117C 0004 0018             		move.b	#4,$18(a0)
0000FCCA 117C 0014 0019             		move.b	#$14,$19(a0)
0000FCD0 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FCD4 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FCD6 117C 000E 0016             		move.b	#$E,$16(a0)
0000FCDC 117C 0008 0017             		move.b	#8,$17(a0)
0000FCE2 117C 000C 0020             		move.b	#$C,$20(a0)
0000FCE8 6100 DF48                  		bsr.w	ObjectFall
0000FCEC 4EB9 0000 0000             		jsr	ObjHitFloor
0000FCF2 4A41                       		tst.w	d1
0000FCF4 6A00                       		bpl.s	locret_F68A
0000FCF6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FCFA 317C 0000 0012             		move.w	#0,$12(a0)
0000FD00 5428 0024                  		addq.b	#2,$24(a0)
0000FD04 0868 0000 0022             		bchg	#0,$22(a0)
0000FD0A                            
0000FD0A                            locret_F68A:
0000FD0A 4E75                       		rts	
0000FD0C                            ; ===========================================================================
0000FD0C                            
0000FD0C                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FD0C 5828 0024                  		addq.b	#4,$24(a0)
0000FD10 6000 0000                  		bra.w	Obj40_Animate
0000FD14                            ; ===========================================================================
0000FD14                            
0000FD14                            Obj40_Action:				; XREF: Obj40_Index
0000FD14 7000                       		moveq	#0,d0
0000FD16 1028 0025                  		move.b	$25(a0),d0
0000FD1A 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FD1E 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FD22 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FD28 6100 B01A                  		bsr.w	AnimateSprite
0000FD2C                            
0000FD2C                            ; ---------------------------------------------------------------------------
0000FD2C                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FD2C                            ; ---------------------------------------------------------------------------
0000FD2C                            
0000FD2C                            MarkObjGone:
0000FD2C 3028 0008                  		move.w	8(a0),d0
0000FD30 0240 FF80                  		andi.w	#$FF80,d0
0000FD34 3238 F700                  		move.w	($FFFFF700).w,d1
0000FD38 0441 0080                  		subi.w	#$80,d1
0000FD3C 0241 FF80                  		andi.w	#$FF80,d1
0000FD40 9041                       		sub.w	d1,d0
0000FD42 0C40 0280                  		cmpi.w	#$280,d0
0000FD46 6200 0000                  		bhi.w	Mark_ChkGone
0000FD4A 6000 DF38                  		bra.w	DisplaySprite
0000FD4E                            ; ===========================================================================
0000FD4E                            
0000FD4E                            Mark_ChkGone:
0000FD4E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FD52 7000                       		moveq	#0,d0
0000FD54 1028 0023                  		move.b	$23(a0),d0
0000FD58 6700                       		beq.s	Mark_Delete
0000FD5A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FD60                            
0000FD60                            Mark_Delete:
0000FD60 6000 DF5E                  		bra.w	DeleteObject
0000FD64                            
0000FD64                            ; ===========================================================================
0000FD64 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FD66 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FD68                            ; ===========================================================================
0000FD68                            
0000FD68                            Obj40_Move:				; XREF: Obj40_Index2
0000FD68 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FD6C 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FD6E 5428 0025                  		addq.b	#2,$25(a0)
0000FD72 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FD78 117C 0001 001C             		move.b	#1,$1C(a0)
0000FD7E 0868 0000 0022             		bchg	#0,$22(a0)
0000FD84 6600                       		bne.s	locret_F70A
0000FD86 4468 0010                  		neg.w	$10(a0)		; change direction
0000FD8A                            
0000FD8A                            locret_F70A:
0000FD8A 4E75                       		rts	
0000FD8C                            ; ===========================================================================
0000FD8C                            
0000FD8C                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FD8C 6100 DED0                  		bsr.w	SpeedToPos
0000FD90 4EB9 0000 0000             		jsr	ObjHitFloor
0000FD96 0C41 FFF8                  		cmpi.w	#-8,d1
0000FD9A 6D00                       		blt.s	Obj40_Pause
0000FD9C 0C41 000C                  		cmpi.w	#$C,d1
0000FDA0 6C00                       		bge.s	Obj40_Pause
0000FDA2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FDA6 5328 0033                  		subq.b	#1,$33(a0)
0000FDAA 6A00                       		bpl.s	locret_F756
0000FDAC 117C 000F 0033             		move.b	#$F,$33(a0)
0000FDB2 6100 E356                  		bsr.w	SingleObjLoad
0000FDB6 6600                       		bne.s	locret_F756
0000FDB8 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FDBC 3368 0008 0008             		move.w	8(a0),8(a1)
0000FDC2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FDC8 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FDCE 137C 0002 001C             		move.b	#2,$1C(a1)
0000FDD4                            
0000FDD4                            locret_F756:
0000FDD4 4E75                       		rts	
0000FDD6                            ; ===========================================================================
0000FDD6                            
0000FDD6                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FDD6 5528 0025                  		subq.b	#2,$25(a0)
0000FDDA 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FDE0 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FDE6 117C 0000 001C             		move.b	#0,$1C(a0)
0000FDEC 4E75                       		rts	
0000FDEE                            ; ===========================================================================
0000FDEE                            
0000FDEE                            Obj40_Animate:				; XREF: Obj40_Index
0000FDEE 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FDF4 6100 AF4E                  		bsr.w	AnimateSprite
0000FDF8 6000 DE8A                  		bra.w	DisplaySprite
0000FDFC                            ; ===========================================================================
0000FDFC                            
0000FDFC                            Obj40_Delete:				; XREF: Obj40_Index
0000FDFC 6000 DEC2                  		bra.w	DeleteObject
0000FE00                            ; ===========================================================================
0000FE00                            Ani_obj40:
0000FE00                            	include "_anim\obj40.asm"
0000FE00                            ; ---------------------------------------------------------------------------
0000FE00                            ; Animation script - Motobug enemy
0000FE00                            ; ---------------------------------------------------------------------------
0000FE00 0000                       		dc.w byte_F788-Ani_obj40
0000FE02 0000                       		dc.w byte_F78C-Ani_obj40
0000FE04 0000                       		dc.w byte_F792-Ani_obj40
0000FE06 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FE0A 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FE10 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FE1E                            		even
0000FE1E                            		even
0000FE1E                            
0000FE1E                            ; ---------------------------------------------------------------------------
0000FE1E                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FE1E                            ; ---------------------------------------------------------------------------
0000FE1E                            Map_obj40:
0000FE1E                            	include "_maps\obj40.asm"
0000FE1E                            Map_cedc:
0000FE1E 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FE20 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FE22 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FE24 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FE26 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FE28 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FE2A 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FE2C 04                         Map_cedc_E: 	dc.b $4
0000FE2D F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FE32 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FE37 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FE3C 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FE41 04                         Map_cedc_23: 	dc.b $4
0000FE42 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FE47 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FE4C F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FE51 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FE56 05                         Map_cedc_38: 	dc.b $5
0000FE57 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FE5C 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FE61 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FE66 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FE6B 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FE70 01                         Map_cedc_52: 	dc.b $1
0000FE71 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FE76 01                         Map_cedc_58: 	dc.b $1
0000FE77 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FE7C 01                         Map_cedc_5E: 	dc.b $1
0000FE7D FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FE82 00                         Map_cedc_64: 	dc.b $0
0000FE84 00                         	even
0000FE84 00                         	even
0000FE84                            
0000FE84                            ; ===========================================================================
0000FE84                            ; ---------------------------------------------------------------------------
0000FE84                            ; Object 4F - blank
0000FE84                            ; ---------------------------------------------------------------------------
0000FE84                            
0000FE84                            Obj4F:					; XREF: Obj_Index
0000FE84 4E75                       		rts	
0000FE86                            
0000FE86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE86                            
0000FE86                            
0000FE86                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FE86 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FE8A D047                       		add.w	d7,d0
0000FE8C 0240 0003                  		andi.w	#3,d0
0000FE90 6600                       		bne.s	loc_F836
0000FE92 7600                       		moveq	#0,d3
0000FE94 1628 0019                  		move.b	$19(a0),d3
0000FE98 4A68 0010                  		tst.w	$10(a0)
0000FE9C 6B00                       		bmi.s	loc_F82C
0000FE9E 6100 0000                  		bsr.w	ObjHitWallRight
0000FEA2 4A41                       		tst.w	d1
0000FEA4 6A00                       		bpl.s	loc_F836
0000FEA6                            
0000FEA6                            loc_F828:
0000FEA6 7001                       		moveq	#1,d0
0000FEA8 4E75                       		rts	
0000FEAA                            ; ===========================================================================
0000FEAA                            
0000FEAA                            loc_F82C:
0000FEAA 4643                       		not.w	d3
0000FEAC 6100 0000                  		bsr.w	ObjHitWallLeft
0000FEB0 4A41                       		tst.w	d1
0000FEB2 6BF2                       		bmi.s	loc_F828
0000FEB4                            
0000FEB4                            loc_F836:
0000FEB4 7000                       		moveq	#0,d0
0000FEB6 4E75                       		rts	
0000FEB8                            ; End of function Obj50_ChkWall
0000FEB8                            
0000FEB8                            ; ===========================================================================
0000FEB8                            ; ---------------------------------------------------------------------------
0000FEB8                            ; Object 50 - Yadrin enemy (SYZ)
0000FEB8                            ; ---------------------------------------------------------------------------
0000FEB8                            
0000FEB8                            Obj50:					; XREF: Obj_Index
0000FEB8 7000                       		moveq	#0,d0
0000FEBA 1028 0024                  		move.b	$24(a0),d0
0000FEBE 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FEC2 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FEC6                            ; ===========================================================================
0000FEC6 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FEC8 0000                       		dc.w Obj50_Action-Obj50_Index
0000FECA                            ; ===========================================================================
0000FECA                            
0000FECA                            Obj50_Main:				; XREF: Obj50_Index
0000FECA 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FED2 317C 247B 0002             		move.w	#$247B,2(a0)
0000FED8 117C 0004 0001             		move.b	#4,1(a0)
0000FEDE 117C 0004 0018             		move.b	#4,$18(a0)
0000FEE4 117C 0014 0019             		move.b	#$14,$19(a0)
0000FEEA 117C 0011 0016             		move.b	#$11,$16(a0)
0000FEF0 117C 0008 0017             		move.b	#8,$17(a0)
0000FEF6 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FEFC 6100 DD34                  		bsr.w	ObjectFall
0000FF00 6100 0000                  		bsr.w	ObjHitFloor
0000FF04 4A41                       		tst.w	d1
0000FF06 6A00                       		bpl.s	locret_F89E
0000FF08 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FF0C 317C 0000 0012             		move.w	#0,$12(a0)
0000FF12 5428 0024                  		addq.b	#2,$24(a0)
0000FF16 0868 0000 0022             		bchg	#0,$22(a0)
0000FF1C                            
0000FF1C                            locret_F89E:
0000FF1C 4E75                       		rts	
0000FF1E                            ; ===========================================================================
0000FF1E                            
0000FF1E                            Obj50_Action:				; XREF: Obj50_Index
0000FF1E 7000                       		moveq	#0,d0
0000FF20 1028 0025                  		move.b	$25(a0),d0
0000FF24 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FF28 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FF2C 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FF32 6100 AE10                  		bsr.w	AnimateSprite
0000FF36 6000 FDF4                  		bra.w	MarkObjGone
0000FF3A                            ; ===========================================================================
0000FF3A 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FF3C 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FF3E                            ; ===========================================================================
0000FF3E                            
0000FF3E                            Obj50_Move:				; XREF: Obj50_Index2
0000FF3E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FF42 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FF44 5428 0025                  		addq.b	#2,$25(a0)
0000FF48 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FF4E 117C 0001 001C             		move.b	#1,$1C(a0)
0000FF54 0868 0000 0022             		bchg	#0,$22(a0)
0000FF5A 6600                       		bne.s	locret_F8E2
0000FF5C 4468 0010                  		neg.w	$10(a0)		; change direction
0000FF60                            
0000FF60                            locret_F8E2:
0000FF60 4E75                       		rts	
0000FF62                            ; ===========================================================================
0000FF62                            
0000FF62                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FF62 6100 DCFA                  		bsr.w	SpeedToPos
0000FF66 6100 0000                  		bsr.w	ObjHitFloor
0000FF6A 0C41 FFF8                  		cmpi.w	#-8,d1
0000FF6E 6D00                       		blt.s	Obj50_Pause
0000FF70 0C41 000C                  		cmpi.w	#$C,d1
0000FF74 6C00                       		bge.s	Obj50_Pause
0000FF76 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FF7A 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FF7E 6600                       		bne.s	Obj50_Pause
0000FF80 4E75                       		rts	
0000FF82                            ; ===========================================================================
0000FF82                            
0000FF82                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FF82 5528 0025                  		subq.b	#2,$25(a0)
0000FF86 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FF8C 317C 0000 0010             		move.w	#0,$10(a0)
0000FF92 117C 0000 001C             		move.b	#0,$1C(a0)
0000FF98 4E75                       		rts	
0000FF9A                            ; ===========================================================================
0000FF9A                            Ani_obj50:
0000FF9A                            	include "_anim\obj50.asm"
0000FF9A                            ; ---------------------------------------------------------------------------
0000FF9A                            ; Animation script - Yadrin enemy
0000FF9A                            ; ---------------------------------------------------------------------------
0000FF9A 0000                       		dc.w byte_F920-Ani_obj50
0000FF9C 0000                       		dc.w byte_F924-Ani_obj50
0000FF9E 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FFA2 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FFAC                            		even
0000FFAC                            		even
0000FFAC                            
0000FFAC                            ; ---------------------------------------------------------------------------
0000FFAC                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FFAC                            ; ---------------------------------------------------------------------------
0000FFAC                            Map_obj50:
0000FFAC                            	include "_maps\obj50.asm"
0000FFAC                            Map_ff24:
0000FFAC 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
0000FFAE 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
0000FFB0 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
0000FFB2 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
0000FFB4 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
0000FFB6 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
0000FFB8 05                         Map_ff24_C: 	dc.b $5
0000FFB9 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0000FFBE FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0000FFC3 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0000FFC8 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0000FFCD 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0000FFD2 05                         Map_ff24_26: 	dc.b $5
0000FFD3 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
0000FFD8 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0000FFDD EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0000FFE2 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0000FFE7 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0000FFEC 05                         Map_ff24_40: 	dc.b $5
0000FFED F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0000FFF2 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
0000FFF7 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0000FFFC F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010001 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010006 05                         Map_ff24_5A: 	dc.b $5
00010007 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001000C FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010011 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010016 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001001B 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010020 05                         Map_ff24_74: 	dc.b $5
00010021 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010026 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001002B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010030 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010035 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001003A 05                         Map_ff24_8E: 	dc.b $5
0001003B F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010040 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010045 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001004A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001004F 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010054                            	even
00010054                            	even
00010054                            
00010054                            ; ---------------------------------------------------------------------------
00010054                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010054                            ;
00010054                            ; variables:
00010054                            ; d1 = width
00010054                            ; d2 = height /	2 (when	jumping)
00010054                            ; d3 = height /	2 (when	walking)
00010054                            ; d4 = x-axis position
00010054                            ; ---------------------------------------------------------------------------
00010054                            
00010054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010054                            
00010054                            
00010054                            SolidObject:
00010054 4A28 0025                  		tst.b	$25(a0)
00010058 6700 0000                  		beq.w	loc_FAC8
0001005C 3401                       		move.w	d1,d2
0001005E D442                       		add.w	d2,d2
00010060 43F8 D000                  		lea	($FFFFD000).w,a1
00010064 0829 0001 0022             		btst	#1,$22(a1)
0001006A 6600                       		bne.s	loc_F9FE
0001006C 3029 0008                  		move.w	8(a1),d0
00010070 9068 0008                  		sub.w	8(a0),d0
00010074 D041                       		add.w	d1,d0
00010076 6B00                       		bmi.s	loc_F9FE
00010078 B042                       		cmp.w	d2,d0
0001007A 6500                       		bcs.s	loc_FA12
0001007C                            
0001007C                            loc_F9FE:
0001007C 08A9 0003 0022             		bclr	#3,$22(a1)
00010082 08A8 0003 0022             		bclr	#3,$22(a0)
00010088 4228 0025                  		clr.b	$25(a0)
0001008C 7800                       		moveq	#0,d4
0001008E 4E75                       		rts	
00010090                            ; ===========================================================================
00010090                            
00010090                            loc_FA12:
00010090 3404                       		move.w	d4,d2
00010092                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
00010092 7800                       		moveq	#0,d4
00010094 4E75                       		rts	
00010096                            ; ===========================================================================
00010096                            
00010096                            SolidObject71:				; XREF: Obj71_Solid
00010096 4A28 0025                  		tst.b	$25(a0)
0001009A 6700 0000                  		beq.w	loc_FAD0
0001009E 3401                       		move.w	d1,d2
000100A0 D442                       		add.w	d2,d2
000100A2 43F8 D000                  		lea	($FFFFD000).w,a1
000100A6 0829 0001 0022             		btst	#1,$22(a1)
000100AC 6600                       		bne.s	loc_FA44
000100AE 3029 0008                  		move.w	8(a1),d0
000100B2 9068 0008                  		sub.w	8(a0),d0
000100B6 D041                       		add.w	d1,d0
000100B8 6B00                       		bmi.s	loc_FA44
000100BA B042                       		cmp.w	d2,d0
000100BC 6500                       		bcs.s	loc_FA58
000100BE                            
000100BE                            loc_FA44:
000100BE 08A9 0003 0022             		bclr	#3,$22(a1)
000100C4 08A8 0003 0022             		bclr	#3,$22(a0)
000100CA 4228 0025                  		clr.b	$25(a0)
000100CE 7800                       		moveq	#0,d4
000100D0 4E75                       		rts	
000100D2                            ; ===========================================================================
000100D2                            
000100D2                            loc_FA58:
000100D2 3404                       		move.w	d4,d2
000100D4                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
000100D4 7800                       		moveq	#0,d4
000100D6 4E75                       		rts	
000100D8                            ; ===========================================================================
000100D8                            
000100D8                            SolidObject2F:				; XREF: Obj2F_Solid
000100D8 43F8 D000                  		lea	($FFFFD000).w,a1
000100DC 4A28 0001                  		tst.b	1(a0)
000100E0 6A00 0000                  		bpl.w	loc_FB92
000100E4 3029 0008                  		move.w	8(a1),d0
000100E8 9068 0008                  		sub.w	8(a0),d0
000100EC D041                       		add.w	d1,d0
000100EE 6B00 0000                  		bmi.w	loc_FB92
000100F2 3601                       		move.w	d1,d3
000100F4 D643                       		add.w	d3,d3
000100F6 B043                       		cmp.w	d3,d0
000100F8 6200 0000                  		bhi.w	loc_FB92
000100FC 3A00                       		move.w	d0,d5
000100FE 0828 0000 0001             		btst	#0,1(a0)
00010104 6700                       		beq.s	loc_FA94
00010106 4645                       		not.w	d5
00010108 DA43                       		add.w	d3,d5
0001010A                            
0001010A                            loc_FA94:
0001010A E24D                       		lsr.w	#1,d5
0001010C 7600                       		moveq	#0,d3
0001010E 1632 5000                  		move.b	(a2,d5.w),d3
00010112 9612                       		sub.b	(a2),d3
00010114 3A28 000C                  		move.w	$C(a0),d5
00010118 9A43                       		sub.w	d3,d5
0001011A 1629 0016                  		move.b	$16(a1),d3
0001011E 4883                       		ext.w	d3
00010120 D443                       		add.w	d3,d2
00010122 3629 000C                  		move.w	$C(a1),d3
00010126 9645                       		sub.w	d5,d3
00010128 5843                       		addq.w	#4,d3
0001012A D642                       		add.w	d2,d3
0001012C 6B00 0000                  		bmi.w	loc_FB92
00010130 3802                       		move.w	d2,d4
00010132 D844                       		add.w	d4,d4
00010134 B644                       		cmp.w	d4,d3
00010136 6400 0000                  		bcc.w	loc_FB92
0001013A 6000 0000                  		bra.w	loc_FB0E
0001013E                            ; ===========================================================================
0001013E                            
0001013E                            loc_FAC8:
0001013E 4A28 0001                  		tst.b	1(a0)
00010142 6A00 0000                  		bpl.w	loc_FB92
00010146                            
00010146                            loc_FAD0:
00010146 43F8 D000                  		lea	($FFFFD000).w,a1
0001014A 3029 0008                  		move.w	8(a1),d0
0001014E 9068 0008                  		sub.w	8(a0),d0
00010152 D041                       		add.w	d1,d0
00010154 6B00 0000                  		bmi.w	loc_FB92
00010158 3601                       		move.w	d1,d3
0001015A D643                       		add.w	d3,d3
0001015C B043                       		cmp.w	d3,d0
0001015E 6200 0000                  		bhi.w	loc_FB92
00010162 1629 0016                  		move.b	$16(a1),d3
00010166 4883                       		ext.w	d3
00010168 D443                       		add.w	d3,d2
0001016A 3629 000C                  		move.w	$C(a1),d3
0001016E 9668 000C                  		sub.w	$C(a0),d3
00010172 5843                       		addq.w	#4,d3
00010174 D642                       		add.w	d2,d3
00010176 6B00 0000                  		bmi.w	loc_FB92
0001017A 3802                       		move.w	d2,d4
0001017C D844                       		add.w	d4,d4
0001017E B644                       		cmp.w	d4,d3
00010180 6400 0000                  		bcc.w	loc_FB92
00010184                            
00010184                            loc_FB0E:
00010184 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010188 6B00 0000                  		bmi.w	loc_FB92
0001018C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010192 6400 0000                  		bcc.w	loc_FB92
00010196 4A78 FE08                  		tst.w	($FFFFFE08).w
0001019A 6600 0000                  		bne.w	loc_FBAC
0001019E 3A00                       		move.w	d0,d5
000101A0 B240                       		cmp.w	d0,d1
000101A2 6400                       		bcc.s	loc_FB36
000101A4 D241                       		add.w	d1,d1
000101A6 9041                       		sub.w	d1,d0
000101A8 3A00                       		move.w	d0,d5
000101AA 4445                       		neg.w	d5
000101AC                            
000101AC                            loc_FB36:
000101AC 3203                       		move.w	d3,d1
000101AE B443                       		cmp.w	d3,d2
000101B0 6400                       		bcc.s	loc_FB44
000101B2 5943                       		subq.w	#4,d3
000101B4 9644                       		sub.w	d4,d3
000101B6 3203                       		move.w	d3,d1
000101B8 4441                       		neg.w	d1
000101BA                            
000101BA                            loc_FB44:
000101BA BA41                       		cmp.w	d1,d5
000101BC 6200 0000                  		bhi.w	loc_FBB0
000101C0 0C41 0004                  		cmpi.w	#4,d1
000101C4 6300                       		bls.s	loc_FB8C
000101C6 4A40                       		tst.w	d0
000101C8 6700                       		beq.s	loc_FB70
000101CA 6B00                       		bmi.s	loc_FB5E
000101CC 4A69 0010                  		tst.w	$10(a1)
000101D0 6B00                       		bmi.s	loc_FB70
000101D2 6000                       		bra.s	loc_FB64
000101D4                            ; ===========================================================================
000101D4                            
000101D4                            loc_FB5E:
000101D4 4A69 0010                  		tst.w	$10(a1)
000101D8 6A00                       		bpl.s	loc_FB70
000101DA                            
000101DA                            loc_FB64:
000101DA 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000101E0 337C 0000 0010             		move.w	#0,$10(a1)
000101E6                            
000101E6                            loc_FB70:
000101E6 9169 0008                  		sub.w	d0,8(a1)
000101EA 0829 0001 0022             		btst	#1,$22(a1)
000101F0 6600                       		bne.s	loc_FB8C
000101F2 08E9 0005 0022             		bset	#5,$22(a1)
000101F8 08E8 0005 0022             		bset	#5,$22(a0)
000101FE 7801                       		moveq	#1,d4
00010200 4E75                       		rts	
00010202                            ; ===========================================================================
00010202                            
00010202                            loc_FB8C:
00010202 6100                       		bsr.s	loc_FBA0
00010204 7801                       		moveq	#1,d4
00010206 4E75                       		rts	
00010208                            ; ===========================================================================
00010208                            
00010208                            loc_FB92:
00010208 0828 0005 0022             		btst	#5,$22(a0)
0001020E 6700                       		beq.s	loc_FBAC
00010210 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010216                            
00010216                            loc_FBA0:
00010216 08A8 0005 0022             		bclr	#5,$22(a0)
0001021C 08A9 0005 0022             		bclr	#5,$22(a1)
00010222                            
00010222                            loc_FBAC:
00010222 7800                       		moveq	#0,d4
00010224 4E75                       		rts	
00010226                            ; ===========================================================================
00010226                            
00010226                            loc_FBB0:
00010226 4A43                       		tst.w	d3
00010228 6B00                       		bmi.s	loc_FBBC
0001022A 0C43 0010                  		cmpi.w	#$10,d3
0001022E 6500                       		bcs.s	loc_FBEE
00010230 60D6                       		bra.s	loc_FB92
00010232                            ; ===========================================================================
00010232                            
00010232                            loc_FBBC:
00010232 4A69 0012                  		tst.w	$12(a1)
00010236 6700                       		beq.s	loc_FBD6
00010238 6A00                       		bpl.s	loc_FBD2
0001023A 4A43                       		tst.w	d3
0001023C 6A00                       		bpl.s	loc_FBD2
0001023E 9769 000C                  		sub.w	d3,$C(a1)
00010242 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010248                            
00010248                            loc_FBD2:
00010248 78FF                       		moveq	#-1,d4
0001024A 4E75                       		rts	
0001024C                            ; ===========================================================================
0001024C                            
0001024C                            loc_FBD6:
0001024C 0829 0001 0022             		btst	#1,$22(a1)
00010252 66F4                       		bne.s	loc_FBD2
00010254 2F08                       		move.l	a0,-(sp)
00010256 2049                       		movea.l	a1,a0
00010258 4EB9 0000 0000             		jsr	KillSonic
0001025E 205F                       		movea.l	(sp)+,a0
00010260 78FF                       		moveq	#-1,d4
00010262 4E75                       		rts	
00010264                            ; ===========================================================================
00010264                            
00010264                            loc_FBEE:
00010264 5943                       		subq.w	#4,d3
00010266 7200                       		moveq	#0,d1
00010268 1228 0019                  		move.b	$19(a0),d1
0001026C 3401                       		move.w	d1,d2
0001026E D442                       		add.w	d2,d2
00010270 D269 0008                  		add.w	8(a1),d1
00010274 9268 0008                  		sub.w	8(a0),d1
00010278 6B00                       		bmi.s	loc_FC28
0001027A B242                       		cmp.w	d2,d1
0001027C 6400                       		bcc.s	loc_FC28
0001027E 4A69 0012                  		tst.w	$12(a1)
00010282 6B00                       		bmi.s	loc_FC28
00010284 9769 000C                  		sub.w	d3,$C(a1)
00010288 5369 000C                  		subq.w	#1,$C(a1)
0001028C 6100                       		bsr.s	sub_FC2C
0001028E 117C 0002 0025             		move.b	#2,$25(a0)
00010294 08E8 0003 0022             		bset	#3,$22(a0)
0001029A 78FF                       		moveq	#-1,d4
0001029C 4E75                       		rts	
0001029E                            ; ===========================================================================
0001029E                            
0001029E                            loc_FC28:
0001029E 7800                       		moveq	#0,d4
000102A0 4E75                       		rts	
000102A2                            ; End of function SolidObject
000102A2                            
000102A2                            
000102A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000102A2                            
000102A2                            
000102A2                            sub_FC2C:				; XREF: SolidObject
000102A2 0829 0003 0022             		btst	#3,$22(a1)
000102A8 6700                       		beq.s	loc_FC4E
000102AA 7000                       		moveq	#0,d0
000102AC 1029 003D                  		move.b	$3D(a1),d0
000102B0 ED48                       		lsl.w	#6,d0
000102B2 0680 00FF D000             		addi.l	#$FFD000,d0
000102B8 2440                       		movea.l	d0,a2
000102BA 08AA 0003 0022             		bclr	#3,$22(a2)
000102C0 422A 0025                  		clr.b	$25(a2)
000102C4                            
000102C4                            loc_FC4E:
000102C4 3008                       		move.w	a0,d0
000102C6 0440 D000                  		subi.w	#-$3000,d0
000102CA EC48                       		lsr.w	#6,d0
000102CC 0240 007F                  		andi.w	#$7F,d0
000102D0 1340 003D                  		move.b	d0,$3D(a1)
000102D4 137C 0000 0026             		move.b	#0,$26(a1)
000102DA 337C 0000 0012             		move.w	#0,$12(a1)
000102E0 3369 0010 0014             		move.w	$10(a1),$14(a1)
000102E6 0829 0001 0022             		btst	#1,$22(a1)
000102EC 6700                       		beq.s	loc_FC84
000102EE 2F08                       		move.l	a0,-(sp)
000102F0 2049                       		movea.l	a1,a0
000102F2 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000102F8 205F                       		movea.l	(sp)+,a0
000102FA                            
000102FA                            loc_FC84:
000102FA 08E9 0003 0022             		bset	#3,$22(a1)
00010300 08E8 0003 0022             		bset	#3,$22(a0)
00010306 4E75                       		rts	
00010308                            ; End of function sub_FC2C
00010308                            
00010308                            ; ===========================================================================
00010308                            ; ---------------------------------------------------------------------------
00010308                            ; Object 51 - smashable	green block (MZ)
00010308                            ; ---------------------------------------------------------------------------
00010308                            
00010308                            Obj51:					; XREF: Obj_Index
00010308 7000                       		moveq	#0,d0
0001030A 1028 0024                  		move.b	$24(a0),d0
0001030E 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010312 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010316 6000 FA14                  		bra.w	MarkObjGone
0001031A                            ; ===========================================================================
0001031A 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0001031C 0000                       		dc.w Obj51_Solid-Obj51_Index
0001031E 0000                       		dc.w Obj51_Display-Obj51_Index
00010320                            ; ===========================================================================
00010320                            
00010320                            Obj51_Main:				; XREF: Obj51_Index
00010320 5428 0024                  		addq.b	#2,$24(a0)
00010324 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0001032C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010332 117C 0004 0001             		move.b	#4,1(a0)
00010338 117C 0010 0019             		move.b	#$10,$19(a0)
0001033E 117C 0004 0018             		move.b	#4,$18(a0)
00010344 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001034A                            
0001034A                            Obj51_Solid:				; XREF: Obj51_Index
0001034A 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010350 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010356 323C 001B                  		move.w	#$1B,d1
0001035A 343C 0010                  		move.w	#$10,d2
0001035E 363C 0011                  		move.w	#$11,d3
00010362 3828 0008                  		move.w	8(a0),d4
00010366 6100 FCEC                  		bsr.w	SolidObject
0001036A 0828 0003 0022             		btst	#3,$22(a0)
00010370 6600                       		bne.s	Obj51_Smash
00010372                            
00010372                            locret_FCFC:
00010372 4E75                       		rts	
00010374                            ; ===========================================================================
00010374                            
00010374                            Obj51_Smash:				; XREF: Obj51_Solid
00010374 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0001037A 66F6                       		bne.s	locret_FCFC	; if not, branch
0001037C 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010382 08E9 0002 0022             		bset	#2,$22(a1)
00010388 137C 000E 0016             		move.b	#$E,$16(a1)
0001038E 137C 0007 0017             		move.b	#7,$17(a1)
00010394 137C 0002 001C             		move.b	#2,$1C(a1)
0001039A 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000103A0 08E9 0001 0022             		bset	#1,$22(a1)
000103A6 08A9 0003 0022             		bclr	#3,$22(a1)
000103AC 137C 0002 0024             		move.b	#2,$24(a1)
000103B2 08A8 0003 0022             		bclr	#3,$22(a0)
000103B8 4228 0025                  		clr.b	$25(a0)
000103BC 117C 0001 001A             		move.b	#1,$1A(a0)
000103C2 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000103C8 7203                       		moveq	#3,d1		; set number of	fragments to 4
000103CA 343C 0038                  		move.w	#$38,d2
000103CE 6100 D4A2                  		bsr.w	SmashObject
000103D2 6100 DD36                  		bsr.w	SingleObjLoad
000103D6 6600                       		bne.s	Obj51_Display
000103D8 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000103DC 3368 0008 0008             		move.w	8(a0),8(a1)
000103E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000103E8 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000103EC 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000103F0 0C42 0006                  		cmpi.w	#6,d2
000103F4 6500                       		bcs.s	Obj51_Bonus
000103F6 7406                       		moveq	#6,d2
000103F8                            
000103F8                            Obj51_Bonus:
000103F8 7000                       		moveq	#0,d0
000103FA 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000103FE 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010404 6500                       		bcs.s	loc_FD98	; if not, branch
00010406 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001040A 740A                       		moveq	#10,d2
0001040C                            
0001040C                            loc_FD98:
0001040C 4EB9 0000 0000             		jsr	AddPoints
00010412 E24A                       		lsr.w	#1,d2
00010414 1342 001A                  		move.b	d2,$1A(a1)
00010418                            
00010418                            Obj51_Display:				; XREF: Obj51_Index
00010418 6100 D844                  		bsr.w	SpeedToPos
0001041C 0668 0038 0012             		addi.w	#$38,$12(a0)
00010422 6100 D860                  		bsr.w	DisplaySprite
00010426 4A28 0001                  		tst.b	1(a0)
0001042A 6A00 D894                  		bpl.w	DeleteObject
0001042E 4E75                       		rts	
00010430                            ; ===========================================================================
00010430 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010434 FF00 FF00                  		dc.w $FF00, $FF00
00010438 0200 FE00                  		dc.w $200, $FE00
0001043C 0100 FF00                  		dc.w $100, $FF00
00010440                            
00010440 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010448                            ; ---------------------------------------------------------------------------
00010448                            ; Sprite mappings - smashable green block (MZ)
00010448                            ; ---------------------------------------------------------------------------
00010448                            Map_obj51:
00010448                            	include "_maps\obj51.asm"
00010448                            ; ---------------------------------------------------------------------------
00010448                            ; Sprite mappings - smashable green block (MZ)
00010448                            ; ---------------------------------------------------------------------------
00010448 0000                       		dc.w byte_FDD8-Map_obj51
0001044A 0000                       		dc.w byte_FDE3-Map_obj51
0001044C 02                         byte_FDD8:	dc.b 2
0001044D F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010452 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010457 04                         byte_FDE3:	dc.b 4
00010458 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0001045D 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010462 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010467 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0001046C                            		even
0001046C                            		even
0001046C                            
0001046C                            ; ===========================================================================
0001046C                            ; ---------------------------------------------------------------------------
0001046C                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0001046C                            ; ---------------------------------------------------------------------------
0001046C                            
0001046C                            Obj52:					; XREF: Obj_Index
0001046C 7000                       		moveq	#0,d0
0001046E 1028 0024                  		move.b	$24(a0),d0
00010472 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010476 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001047A                            ; ===========================================================================
0001047A 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0001047C 0000                       		dc.w Obj52_Platform-Obj52_Index
0001047E 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010480                            
00010480 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010482 2001                       		dc.b $20, 1
00010484 2002                       		dc.b $20, 2
00010486 4003                       		dc.b $40, 3
00010488 3004                       		dc.b $30, 4
0001048A                            ; ===========================================================================
0001048A                            
0001048A                            Obj52_Main:				; XREF: Obj52_Index
0001048A 5428 0024                  		addq.b	#2,$24(a0)
0001048E 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010496 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001049C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000104A2 6600                       		bne.s	loc_FE44
000104A4 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000104AC 317C 43BC 0002             		move.w	#$43BC,2(a0)
000104B2 117C 0007 0016             		move.b	#7,$16(a0)
000104B8                            
000104B8                            loc_FE44:
000104B8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000104BE 6600                       		bne.s	loc_FE60
000104C0 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000104C6 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000104CC 6700                       		beq.s	loc_FE60	; if yes, branch
000104CE 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000104D4                            
000104D4                            loc_FE60:
000104D4 117C 0004 0001             		move.b	#4,1(a0)
000104DA 7000                       		moveq	#0,d0
000104DC 1028 0028                  		move.b	$28(a0),d0
000104E0 E648                       		lsr.w	#3,d0
000104E2 0240 001E                  		andi.w	#$1E,d0
000104E6 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000104EA 115A 0019                  		move.b	(a2)+,$19(a0)
000104EE 115A 001A                  		move.b	(a2)+,$1A(a0)
000104F2 117C 0004 0018             		move.b	#4,$18(a0)
000104F8 3168 0008 0030             		move.w	8(a0),$30(a0)
000104FE 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010504 0228 000F 0028             		andi.b	#$F,$28(a0)
0001050A                            
0001050A                            Obj52_Platform:				; XREF: Obj52_Index
0001050A 6100 0000                  		bsr.w	Obj52_Move
0001050E 7200                       		moveq	#0,d1
00010510 1228 0019                  		move.b	$19(a0),d1
00010514 4EB9 0000 79A0             		jsr	(PlatformObject).l
0001051A 6000                       		bra.s	Obj52_ChkDel
0001051C                            ; ===========================================================================
0001051C                            
0001051C                            Obj52_StandOn:				; XREF: Obj52_Index
0001051C 7200                       		moveq	#0,d1
0001051E 1228 0019                  		move.b	$19(a0),d1
00010522 4EB9 0000 7B14             		jsr	(ExitPlatform).l
00010528 3F28 0008                  		move.w	8(a0),-(sp)
0001052C 6100 0000                  		bsr.w	Obj52_Move
00010530 341F                       		move.w	(sp)+,d2
00010532 4EB9 0000 807E             		jsr	(MvSonicOnPtfm2).l
00010538                            
00010538                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010538 3028 0030                  		move.w	$30(a0),d0
0001053C 0240 FF80                  		andi.w	#$FF80,d0
00010540 3238 F700                  		move.w	($FFFFF700).w,d1
00010544 0441 0080                  		subi.w	#$80,d1
00010548 0241 FF80                  		andi.w	#$FF80,d1
0001054C 9041                       		sub.w	d1,d0
0001054E 0C40 0280                  		cmpi.w	#$280,d0
00010552 6200 D76C                  		bhi.w	DeleteObject
00010556 6000 D72C                  		bra.w	DisplaySprite
0001055A                            ; ===========================================================================
0001055A                            
0001055A                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001055A 7000                       		moveq	#0,d0
0001055C 1028 0028                  		move.b	$28(a0),d0
00010560 0240 000F                  		andi.w	#$F,d0
00010564 D040                       		add.w	d0,d0
00010566 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001056A 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0001056E                            ; ===========================================================================
0001056E 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010572 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010576 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001057A 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0001057E 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010582 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010584                            ; ===========================================================================
00010584                            
00010584                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010584 4E75                       		rts	
00010586                            ; ===========================================================================
00010586                            
00010586                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010586 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001058A 323C 0060                  		move.w	#$60,d1
0001058E 0828 0000 0022             		btst	#0,$22(a0)
00010594 6700                       		beq.s	loc_FF26
00010596 4440                       		neg.w	d0
00010598 D041                       		add.w	d1,d0
0001059A                            
0001059A                            loc_FF26:
0001059A 3228 0030                  		move.w	$30(a0),d1
0001059E 9240                       		sub.w	d0,d1
000105A0 3141 0008                  		move.w	d1,8(a0)
000105A4 4E75                       		rts	
000105A6                            ; ===========================================================================
000105A6                            
000105A6                            Obj52_Type02:				; XREF: Obj52_TypeIndex
000105A6 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000105AC 6600                       		bne.s	Obj52_02_Wait
000105AE 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000105B2                            
000105B2                            Obj52_02_Wait:
000105B2 4E75                       		rts	
000105B4                            ; ===========================================================================
000105B4                            
000105B4                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000105B4 7600                       		moveq	#0,d3
000105B6 1628 0019                  		move.b	$19(a0),d3
000105BA 6100 0000                  		bsr.w	ObjHitWallRight
000105BE 4A41                       		tst.w	d1		; has the platform hit a wall?
000105C0 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000105C2 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000105C6 3168 0008 0030             		move.w	8(a0),$30(a0)
000105CC 4E75                       		rts	
000105CE                            ; ===========================================================================
000105CE                            
000105CE                            Obj52_03_End:
000105CE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000105D2 4E75                       		rts	
000105D4                            ; ===========================================================================
000105D4                            
000105D4                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000105D4 7600                       		moveq	#0,d3
000105D6 1628 0019                  		move.b	$19(a0),d3
000105DA 6100 0000                  		bsr.w	ObjHitWallRight
000105DE 4A41                       		tst.w	d1		; has the platform hit a wall?
000105E0 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000105E2 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000105E6 3168 0008 0030             		move.w	8(a0),$30(a0)
000105EC 4E75                       		rts	
000105EE                            ; ===========================================================================
000105EE                            
000105EE                            Obj52_05_End:
000105EE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000105F2 4E75                       		rts	
000105F4                            ; ===========================================================================
000105F4                            
000105F4                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000105F4 6100 D668                  		bsr.w	SpeedToPos
000105F8 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000105FE 6100 0000                  		bsr.w	ObjHitFloor
00010602 4A41                       		tst.w	d1		; has platform hit the floor?
00010604 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010608 D368 000C                  		add.w	d1,$C(a0)
0001060C 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010610 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010614                            
00010614                            locret_FFA0:
00010614 4E75                       		rts	
00010616                            ; ===========================================================================
00010616                            
00010616                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010616 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001061A 6700                       		beq.s	Obj52_07_ChkDel
0001061C 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010620                            
00010620                            Obj52_07_ChkDel:
00010620 588F                       		addq.l	#4,sp
00010622 3028 0030                  		move.w	$30(a0),d0
00010626 0240 FF80                  		andi.w	#$FF80,d0
0001062A 3238 F700                  		move.w	($FFFFF700).w,d1
0001062E 0441 0080                  		subi.w	#$80,d1
00010632 0241 FF80                  		andi.w	#$FF80,d1
00010636 9041                       		sub.w	d1,d0
00010638 0C40 0280                  		cmpi.w	#$280,d0
0001063C 6200 D682                  		bhi.w	DeleteObject
00010640 4E75                       		rts	
00010642                            ; ===========================================================================
00010642                            
00010642                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010642 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010646 323C 0080                  		move.w	#$80,d1
0001064A 0828 0000 0022             		btst	#0,$22(a0)
00010650 6700                       		beq.s	loc_FFE2
00010652 4440                       		neg.w	d0
00010654 D041                       		add.w	d1,d0
00010656                            
00010656                            loc_FFE2:
00010656 3228 0032                  		move.w	$32(a0),d1
0001065A 9240                       		sub.w	d0,d1
0001065C 3141 000C                  		move.w	d1,$C(a0)
00010660 4E75                       		rts	
00010662                            ; ===========================================================================
00010662                            
00010662                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010662 7600                       		moveq	#0,d3
00010664 1628 0019                  		move.b	$19(a0),d3
00010668 D643                       		add.w	d3,d3
0001066A 7208                       		moveq	#8,d1
0001066C 0828 0000 0022             		btst	#0,$22(a0)
00010672 6700                       		beq.s	loc_10004
00010674 4441                       		neg.w	d1
00010676 4443                       		neg.w	d3
00010678                            
00010678                            loc_10004:
00010678 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0001067C 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
0001067E 3028 0008                  		move.w	8(a0),d0
00010682 9068 0030                  		sub.w	$30(a0),d0
00010686 B043                       		cmp.w	d3,d0
00010688 6700                       		beq.s	Obj52_0A_Wait
0001068A D368 0008                  		add.w	d1,8(a0)	; move platform
0001068E 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010694 4E75                       		rts	
00010696                            ; ===========================================================================
00010696                            
00010696                            Obj52_0A_Wait:
00010696 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001069A 6600                       		bne.s	locret_1002E	; if time remains, branch
0001069C 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000106A2                            
000106A2                            locret_1002E:
000106A2 4E75                       		rts	
000106A4                            ; ===========================================================================
000106A4                            
000106A4                            Obj52_0A_Back:
000106A4 3028 0008                  		move.w	8(a0),d0
000106A8 9068 0030                  		sub.w	$30(a0),d0
000106AC 6700                       		beq.s	Obj52_0A_Reset
000106AE 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000106B2 4E75                       		rts	
000106B4                            ; ===========================================================================
000106B4                            
000106B4                            Obj52_0A_Reset:
000106B4 4268 0036                  		clr.w	$36(a0)
000106B8 5328 0028                  		subq.b	#1,$28(a0)
000106BC 4E75                       		rts	
000106BE                            ; ===========================================================================
000106BE                            ; ---------------------------------------------------------------------------
000106BE                            ; Sprite mappings - moving blocks (MZ, SBZ)
000106BE                            ; ---------------------------------------------------------------------------
000106BE                            Map_obj52:
000106BE                            	include "_maps\obj52mz.asm"
000106BE                            ; ---------------------------------------------------------------------------
000106BE                            ; Sprite mappings - moving blocks (MZ, SBZ)
000106BE                            ; ---------------------------------------------------------------------------
000106BE 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000106C2 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000106C6 0000                       		dc.w byte_1008F-Map_obj52
000106C8 01                         byte_10054:	dc.b 1
000106C9 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000106CE 02                         byte_1005A:	dc.b 2
000106CF F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000106D4 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000106D9 04                         byte_10065:	dc.b 4
000106DA F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000106DF 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000106E4 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000106E9 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000106EE 04                         byte_1007A:	dc.b 4
000106EF F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000106F4 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000106F9 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000106FE F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010703 03                         byte_1008F:	dc.b 3
00010704 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010709 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001070E F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010714 00                         		even
00010714 00                         		even
00010714                            
00010714                            ; ---------------------------------------------------------------------------
00010714                            ; Sprite mappings - moving block (LZ)
00010714                            ; ---------------------------------------------------------------------------
00010714                            Map_obj52a:
00010714                            	include "_maps\obj52lz.asm"
00010714                            ; ---------------------------------------------------------------------------
00010714                            ; Sprite mappings - moving block (LZ)
00010714                            ; ---------------------------------------------------------------------------
00010714 0000                       		dc.w byte_100A2-Map_obj52a
00010716 01                         byte_100A2:	dc.b 1
00010717 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001071C                            		even
0001071C                            		even
0001071C                            
0001071C                            ; ===========================================================================
0001071C                            ; ---------------------------------------------------------------------------
0001071C                            ; Object 55 - Basaran enemy (MZ)
0001071C                            ; ---------------------------------------------------------------------------
0001071C                            
0001071C                            Obj55:					; XREF: Obj_Index
0001071C 7000                       		moveq	#0,d0
0001071E 1028 0024                  		move.b	$24(a0),d0
00010722 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010726 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001072A                            ; ===========================================================================
0001072A 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
0001072C 0000                       		dc.w Obj55_Action-Obj55_Index
0001072E                            ; ===========================================================================
0001072E                            
0001072E                            Obj55_Main:				; XREF: Obj55_Index
0001072E 5428 0024                  		addq.b	#2,$24(a0)
00010732 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001073A 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010740 117C 0004 0001             		move.b	#4,1(a0)
00010746 117C 000C 0016             		move.b	#$C,$16(a0)
0001074C 117C 0002 0018             		move.b	#2,$18(a0)
00010752 117C 000B 0020             		move.b	#$B,$20(a0)
00010758 117C 0010 0019             		move.b	#$10,$19(a0)
0001075E                            
0001075E                            Obj55_Action:				; XREF: Obj55_Index
0001075E 7000                       		moveq	#0,d0
00010760 1028 0025                  		move.b	$25(a0),d0
00010764 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010768 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
0001076C 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010772 6100 A5D0                  		bsr.w	AnimateSprite
00010776 6000 F5B4                  		bra.w	MarkObjGone
0001077A                            ; ===========================================================================
0001077A 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
0001077C 0000                       		dc.w Obj55_DropFly-Obj55_Index2
0001077E 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010780 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010782                            ; ===========================================================================
00010782                            
00010782                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010782 343C 0080                  		move.w	#$80,d2
00010786 6100 0000                  		bsr.w	Obj55_ChkSonic
0001078A 6400                       		bcc.s	Obj55_NoDrop
0001078C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010790 3140 0036                  		move.w	d0,$36(a0)
00010794 9068 000C                  		sub.w	$C(a0),d0
00010798 6500                       		bcs.s	Obj55_NoDrop
0001079A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
0001079E 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000107A0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000107A4 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000107A6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000107AA D007                       		add.b	d7,d0
000107AC 0200 0007                  		andi.b	#7,d0
000107B0 6600                       		bne.s	Obj55_NoDrop
000107B2 117C 0001 001C             		move.b	#1,$1C(a0)
000107B8 5428 0025                  		addq.b	#2,$25(a0)
000107BC                            
000107BC                            Obj55_NoDrop:
000107BC 4E75                       		rts	
000107BE                            ; ===========================================================================
000107BE                            
000107BE                            Obj55_DropFly:				; XREF: Obj55_Index2
000107BE 6100 D49E                  		bsr.w	SpeedToPos
000107C2 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000107C8 343C 0080                  		move.w	#$80,d2
000107CC 6100 0000                  		bsr.w	Obj55_ChkSonic
000107D0 3028 0036                  		move.w	$36(a0),d0
000107D4 9068 000C                  		sub.w	$C(a0),d0
000107D8 6500                       		bcs.s	Obj55_ChkDel
000107DA 0C40 0010                  		cmpi.w	#$10,d0
000107DE 6400                       		bcc.s	locret_10180
000107E0 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000107E4 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000107EA 117C 0002 001C             		move.b	#2,$1C(a0)
000107F0 5428 0025                  		addq.b	#2,$25(a0)
000107F4                            
000107F4                            locret_10180:
000107F4 4E75                       		rts	
000107F6                            ; ===========================================================================
000107F6                            
000107F6                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000107F6 4A28 0001                  		tst.b	1(a0)
000107FA 6A00 D4C4                  		bpl.w	DeleteObject
000107FE 4E75                       		rts	
00010800                            ; ===========================================================================
00010800                            
00010800                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010800 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010804 0200 000F                  		andi.b	#$F,d0
00010808 6600                       		bne.s	loc_101A0
0001080A 303C 00C0                  		move.w	#$C0,d0
0001080E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flapping sound
00010814                            
00010814                            loc_101A0:
00010814 6100 D448                  		bsr.w	SpeedToPos
00010818 3038 D008                  		move.w	($FFFFD008).w,d0
0001081C 9068 0008                  		sub.w	8(a0),d0
00010820 6400                       		bcc.s	loc_101B0
00010822 4440                       		neg.w	d0
00010824                            
00010824                            loc_101B0:
00010824 0C40 0080                  		cmpi.w	#$80,d0
00010828 6500                       		bcs.s	locret_101C6
0001082A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001082E D007                       		add.b	d7,d0
00010830 0200 0007                  		andi.b	#7,d0
00010834 6600                       		bne.s	locret_101C6
00010836 5428 0025                  		addq.b	#2,$25(a0)
0001083A                            
0001083A                            locret_101C6:
0001083A 4E75                       		rts	
0001083C                            ; ===========================================================================
0001083C                            
0001083C                            Obj55_FlyUp:				; XREF: Obj55_Index2
0001083C 6100 D420                  		bsr.w	SpeedToPos
00010840 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010846 6100 0000                  		bsr.w	ObjHitCeiling
0001084A 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001084C 6A00                       		bpl.s	locret_101F4	; if not, branch
0001084E 9368 000C                  		sub.w	d1,$C(a0)
00010852 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010858 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
0001085C 4268 0012                  		clr.w	$12(a0)
00010860 4228 001C                  		clr.b	$1C(a0)
00010864 4228 0025                  		clr.b	$25(a0)
00010868                            
00010868                            locret_101F4:
00010868 4E75                       		rts	
0001086A                            ; ===========================================================================
0001086A                            
0001086A                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0001086A 323C 0100                  		move.w	#$100,d1
0001086E 08E8 0000 0022             		bset	#0,$22(a0)
00010874 3038 D008                  		move.w	($FFFFD008).w,d0
00010878 9068 0008                  		sub.w	8(a0),d0
0001087C 6400                       		bcc.s	loc_10214
0001087E 4440                       		neg.w	d0
00010880 4441                       		neg.w	d1
00010882 08A8 0000 0022             		bclr	#0,$22(a0)
00010888                            
00010888                            loc_10214:
00010888 B042                       		cmp.w	d2,d0
0001088A 4E75                       		rts	
0001088C                            ; ===========================================================================
0001088C 6100 D3D0                  		bsr.w	SpeedToPos
00010890 6100 D3F2                  		bsr.w	DisplaySprite
00010894 4A28 0001                  		tst.b	1(a0)
00010898 6A00 D426                  		bpl.w	DeleteObject
0001089C 4E75                       		rts	
0001089E                            ; ===========================================================================
0001089E                            Ani_obj55:
0001089E                            	include "_anim\obj55.asm"
0001089E                            ; ---------------------------------------------------------------------------
0001089E                            ; Animation script - Basaran enemy
0001089E                            ; ---------------------------------------------------------------------------
0001089E 0000                       		dc.w byte_10230-Ani_obj55
000108A0 0000                       		dc.w byte_10234-Ani_obj55
000108A2 0000                       		dc.w byte_10238-Ani_obj55
000108A4 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000108A8 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000108AC 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000108B2                            		even
000108B2                            		even
000108B2                            
000108B2                            ; ---------------------------------------------------------------------------
000108B2                            ; Sprite mappings - Basaran enemy (MZ)
000108B2                            ; ---------------------------------------------------------------------------
000108B2                            Map_obj55:
000108B2                            	include "_maps\obj55.asm"
000108B2                            ; ---------------------------------------------------------------------------
000108B2                            ; Sprite mappings - Basaran enemy (MZ)
000108B2                            ; ---------------------------------------------------------------------------
000108B2 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000108B6 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000108BA 01                         byte_10246:	dc.b 1
000108BB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000108C0 03                         byte_1024C:	dc.b 3
000108C1 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000108C6 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000108CB 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000108D0 04                         byte_1025C:	dc.b 4
000108D1 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000108D6 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000108DB 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000108E0 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000108E5 04                         byte_10271:	dc.b 4
000108E6 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000108EB 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000108F0 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000108F5 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000108FA                            		even
000108FA                            		even
000108FA                            
000108FA                            ; ===========================================================================
000108FA                            ; ---------------------------------------------------------------------------
000108FA                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000108FA                            ; ---------------------------------------------------------------------------
000108FA                            
000108FA                            Obj56:					; XREF: Obj_Index
000108FA 7000                       		moveq	#0,d0
000108FC 1028 0024                  		move.b	$24(a0),d0
00010900 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010904 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010908                            ; ===========================================================================
00010908 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
0001090A 0000                       		dc.w Obj56_Action-Obj56_Index
0001090C                            
0001090C 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
0001090E 2020                       		dc.b  $20, $20
00010910 1020                       		dc.b  $10, $20
00010912 201A                       		dc.b  $20, $1A
00010914 1027                       		dc.b  $10, $27
00010916 1010                       		dc.b  $10, $10
00010918 0820                       		dc.b	8, $20
0001091A 4010                       		dc.b  $40, $10
0001091C                            ; ===========================================================================
0001091C                            
0001091C                            Obj56_Main:				; XREF: Obj56_Index
0001091C 5428 0024                  		addq.b	#2,$24(a0)
00010920 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010928 317C 4000 0002             		move.w	#$4000,2(a0)
0001092E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010934 6600                       		bne.s	loc_102C8
00010936 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
0001093C                            
0001093C                            loc_102C8:
0001093C 117C 0004 0001             		move.b	#4,1(a0)
00010942 117C 0003 0018             		move.b	#3,$18(a0)
00010948 7000                       		moveq	#0,d0
0001094A 1028 0028                  		move.b	$28(a0),d0
0001094E E648                       		lsr.w	#3,d0
00010950 0240 000E                  		andi.w	#$E,d0
00010954 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010958 115A 0019                  		move.b	(a2)+,$19(a0)
0001095C 1152 0016                  		move.b	(a2),$16(a0)
00010960 E248                       		lsr.w	#1,d0
00010962 1140 001A                  		move.b	d0,$1A(a0)
00010966 3168 0008 0034             		move.w	8(a0),$34(a0)
0001096C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010972 7000                       		moveq	#0,d0
00010974 1012                       		move.b	(a2),d0
00010976 D040                       		add.w	d0,d0
00010978 3140 003A                  		move.w	d0,$3A(a0)
0001097C 7000                       		moveq	#0,d0
0001097E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010984 6700                       		beq.s	loc_10332
00010986 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
0001098A 0240 000F                  		andi.w	#$F,d0
0001098E 5140                       		subq.w	#8,d0
00010990 6500                       		bcs.s	loc_10332
00010992 E548                       		lsl.w	#2,d0
00010994 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010998 45F2 0000                  		lea	(a2,d0.w),a2
0001099C 4A52                       		tst.w	(a2)
0001099E 6A00                       		bpl.s	loc_10332
000109A0 0868 0000 0022             		bchg	#0,$22(a0)
000109A6                            
000109A6                            loc_10332:
000109A6 1028 0028                  		move.b	$28(a0),d0
000109AA 6A00                       		bpl.s	Obj56_Action
000109AC 0200 000F                  		andi.b	#$F,d0
000109B0 1140 003C                  		move.b	d0,$3C(a0)
000109B4 117C 0005 0028             		move.b	#5,$28(a0)
000109BA 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000109C0 6600                       		bne.s	Obj56_ChkGone
000109C2 117C 000C 0028             		move.b	#$C,$28(a0)
000109C8 317C 0080 003A             		move.w	#$80,$3A(a0)
000109CE                            
000109CE                            Obj56_ChkGone:
000109CE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000109D2 7000                       		moveq	#0,d0
000109D4 1028 0023                  		move.b	$23(a0),d0
000109D8 6700                       		beq.s	Obj56_Action
000109DA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000109E0 0832 0000 0002             		btst	#0,2(a2,d0.w)
000109E6 6700                       		beq.s	Obj56_Action
000109E8 5228 0028                  		addq.b	#1,$28(a0)
000109EC 4268 003A                  		clr.w	$3A(a0)
000109F0                            
000109F0                            Obj56_Action:				; XREF: Obj56_Index
000109F0 3F28 0008                  		move.w	8(a0),-(sp)
000109F4 7000                       		moveq	#0,d0
000109F6 1028 0028                  		move.b	$28(a0),d0	; get object type
000109FA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000109FE D040                       		add.w	d0,d0
00010A00 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010A04 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010A08 381F                       		move.w	(sp)+,d4
00010A0A 4A28 0001                  		tst.b	1(a0)
00010A0E 6A00                       		bpl.s	Obj56_ChkDel
00010A10 7200                       		moveq	#0,d1
00010A12 1228 0019                  		move.b	$19(a0),d1
00010A16 0641 000B                  		addi.w	#$B,d1
00010A1A 7400                       		moveq	#0,d2
00010A1C 1428 0016                  		move.b	$16(a0),d2
00010A20 3602                       		move.w	d2,d3
00010A22 5243                       		addq.w	#1,d3
00010A24 6100 F62E                  		bsr.w	SolidObject
00010A28                            
00010A28                            Obj56_ChkDel:
00010A28 3028 0034                  		move.w	$34(a0),d0
00010A2C 0240 FF80                  		andi.w	#$FF80,d0
00010A30 3238 F700                  		move.w	($FFFFF700).w,d1
00010A34 0441 0080                  		subi.w	#$80,d1
00010A38 0241 FF80                  		andi.w	#$FF80,d1
00010A3C 9041                       		sub.w	d1,d0
00010A3E 0C40 0280                  		cmpi.w	#$280,d0
00010A42 6200 D27C                  		bhi.w	DeleteObject
00010A46 6000 D23C                  		bra.w	DisplaySprite
00010A4A                            ; ===========================================================================
00010A4A 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010A4E 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010A52 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010A56 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010A5A 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010A5E 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010A62 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010A66                            ; ===========================================================================
00010A66                            
00010A66                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010A66 4E75                       		rts	
00010A68                            ; ===========================================================================
00010A68                            
00010A68                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010A68 323C 0040                  		move.w	#$40,d1
00010A6C 7000                       		moveq	#0,d0
00010A6E 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010A72 6000                       		bra.s	Obj56_Move_LR
00010A74                            ; ===========================================================================
00010A74                            
00010A74                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010A74 323C 0080                  		move.w	#$80,d1
00010A78 7000                       		moveq	#0,d0
00010A7A 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010A7E                            
00010A7E                            Obj56_Move_LR:
00010A7E 0828 0000 0022             		btst	#0,$22(a0)
00010A84 6700                       		beq.s	loc_10416
00010A86 4440                       		neg.w	d0
00010A88 D041                       		add.w	d1,d0
00010A8A                            
00010A8A                            loc_10416:
00010A8A 3228 0034                  		move.w	$34(a0),d1
00010A8E 9240                       		sub.w	d0,d1
00010A90 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010A94 4E75                       		rts	
00010A96                            ; ===========================================================================
00010A96                            
00010A96                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010A96 323C 0040                  		move.w	#$40,d1
00010A9A 7000                       		moveq	#0,d0
00010A9C 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010AA0 6000                       		bra.s	Obj56_Move_UD
00010AA2                            ; ===========================================================================
00010AA2                            
00010AA2                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010AA2 323C 0080                  		move.w	#$80,d1
00010AA6 7000                       		moveq	#0,d0
00010AA8 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010AAC                            
00010AAC                            Obj56_Move_UD:
00010AAC 0828 0000 0022             		btst	#0,$22(a0)
00010AB2 6700                       		beq.s	loc_10444
00010AB4 4440                       		neg.w	d0
00010AB6 D041                       		add.w	d1,d0
00010AB8                            
00010AB8                            loc_10444:
00010AB8 3228 0030                  		move.w	$30(a0),d1
00010ABC 9240                       		sub.w	d0,d1
00010ABE 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010AC2 4E75                       		rts	
00010AC4                            ; ===========================================================================
00010AC4                            
00010AC4                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010AC4 4A28 0038                  		tst.b	$38(a0)
00010AC8 6600                       		bne.s	loc_104A4
00010ACA 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010AD0 6600                       		bne.s	loc_1047A	; if not, branch
00010AD2 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010AD8 6600                       		bne.s	loc_1047A
00010ADA 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010ADE 3038 D008                  		move.w	($FFFFD008).w,d0
00010AE2 B068 0008                  		cmp.w	8(a0),d0
00010AE6 6400                       		bcc.s	loc_1047A
00010AE8 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010AEE                            
00010AEE                            loc_1047A:
00010AEE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010AF2 7000                       		moveq	#0,d0
00010AF4 1028 003C                  		move.b	$3C(a0),d0
00010AF8 0832 0000 0000             		btst	#0,(a2,d0.w)
00010AFE 6700                       		beq.s	loc_104AE
00010B00 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010B06 6600                       		bne.s	loc_1049E	; if not, branch
00010B08 0C00 0003                  		cmpi.b	#3,d0
00010B0C 6600                       		bne.s	loc_1049E
00010B0E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010B12                            
00010B12                            loc_1049E:
00010B12 117C 0001 0038             		move.b	#1,$38(a0)
00010B18                            
00010B18                            loc_104A4:
00010B18 4A68 003A                  		tst.w	$3A(a0)
00010B1C 6700                       		beq.s	loc_104C8
00010B1E 5568 003A                  		subq.w	#2,$3A(a0)
00010B22                            
00010B22                            loc_104AE:
00010B22 3028 003A                  		move.w	$3A(a0),d0
00010B26 0828 0000 0022             		btst	#0,$22(a0)
00010B2C 6700                       		beq.s	loc_104BC
00010B2E 4440                       		neg.w	d0
00010B30                            
00010B30                            loc_104BC:
00010B30 3228 0030                  		move.w	$30(a0),d1
00010B34 D240                       		add.w	d0,d1
00010B36 3141 000C                  		move.w	d1,$C(a0)
00010B3A 4E75                       		rts	
00010B3C                            ; ===========================================================================
00010B3C                            
00010B3C                            loc_104C8:
00010B3C 5228 0028                  		addq.b	#1,$28(a0)
00010B40 4228 0038                  		clr.b	$38(a0)
00010B44 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B48 7000                       		moveq	#0,d0
00010B4A 1028 0023                  		move.b	$23(a0),d0
00010B4E 67D2                       		beq.s	loc_104AE
00010B50 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010B56 60CA                       		bra.s	loc_104AE
00010B58                            ; ===========================================================================
00010B58                            
00010B58                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010B58 4A28 0038                  		tst.b	$38(a0)
00010B5C 6600                       		bne.s	loc_10500
00010B5E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B62 7000                       		moveq	#0,d0
00010B64 1028 003C                  		move.b	$3C(a0),d0
00010B68 4A32 0000                  		tst.b	(a2,d0.w)
00010B6C 6A00                       		bpl.s	loc_10512
00010B6E 117C 0001 0038             		move.b	#1,$38(a0)
00010B74                            
00010B74                            loc_10500:
00010B74 7000                       		moveq	#0,d0
00010B76 1028 0016                  		move.b	$16(a0),d0
00010B7A D040                       		add.w	d0,d0
00010B7C B068 003A                  		cmp.w	$3A(a0),d0
00010B80 6700                       		beq.s	loc_1052C
00010B82 5468 003A                  		addq.w	#2,$3A(a0)
00010B86                            
00010B86                            loc_10512:
00010B86 3028 003A                  		move.w	$3A(a0),d0
00010B8A 0828 0000 0022             		btst	#0,$22(a0)
00010B90 6700                       		beq.s	loc_10520
00010B92 4440                       		neg.w	d0
00010B94                            
00010B94                            loc_10520:
00010B94 3228 0030                  		move.w	$30(a0),d1
00010B98 D240                       		add.w	d0,d1
00010B9A 3141 000C                  		move.w	d1,$C(a0)
00010B9E 4E75                       		rts	
00010BA0                            ; ===========================================================================
00010BA0                            
00010BA0                            loc_1052C:
00010BA0 5328 0028                  		subq.b	#1,$28(a0)
00010BA4 4228 0038                  		clr.b	$38(a0)
00010BA8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BAC 7000                       		moveq	#0,d0
00010BAE 1028 0023                  		move.b	$23(a0),d0
00010BB2 67D2                       		beq.s	loc_10512
00010BB4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010BBA 60CA                       		bra.s	loc_10512
00010BBC                            ; ===========================================================================
00010BBC                            
00010BBC                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010BBC 4A28 0038                  		tst.b	$38(a0)
00010BC0 6600                       		bne.s	loc_1055E
00010BC2 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010BC6 6700                       		beq.s	locret_10578
00010BC8 117C 0001 0038             		move.b	#1,$38(a0)
00010BCE 4268 003A                  		clr.w	$3A(a0)
00010BD2                            
00010BD2                            loc_1055E:
00010BD2 5268 0008                  		addq.w	#1,8(a0)
00010BD6 3168 0008 0034             		move.w	8(a0),$34(a0)
00010BDC 5268 003A                  		addq.w	#1,$3A(a0)
00010BE0 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010BE6 6600                       		bne.s	locret_10578
00010BE8 4228 0028                  		clr.b	$28(a0)
00010BEC                            
00010BEC                            locret_10578:
00010BEC 4E75                       		rts	
00010BEE                            ; ===========================================================================
00010BEE                            
00010BEE                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010BEE 4A28 0038                  		tst.b	$38(a0)
00010BF2 6600                       		bne.s	loc_10598
00010BF4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010BF8 7000                       		moveq	#0,d0
00010BFA 1028 003C                  		move.b	$3C(a0),d0
00010BFE 0832 0000 0000             		btst	#0,(a2,d0.w)
00010C04 6700                       		beq.s	loc_105A2
00010C06 117C 0001 0038             		move.b	#1,$38(a0)
00010C0C                            
00010C0C                            loc_10598:
00010C0C 4A68 003A                  		tst.w	$3A(a0)
00010C10 6700                       		beq.s	loc_105C0
00010C12 5568 003A                  		subq.w	#2,$3A(a0)
00010C16                            
00010C16                            loc_105A2:
00010C16 3028 003A                  		move.w	$3A(a0),d0
00010C1A 0828 0000 0022             		btst	#0,$22(a0)
00010C20 6700                       		beq.s	loc_105B4
00010C22 4440                       		neg.w	d0
00010C24 0640 0080                  		addi.w	#$80,d0
00010C28                            
00010C28                            loc_105B4:
00010C28 3228 0034                  		move.w	$34(a0),d1
00010C2C D240                       		add.w	d0,d1
00010C2E 3141 0008                  		move.w	d1,8(a0)
00010C32 4E75                       		rts	
00010C34                            ; ===========================================================================
00010C34                            
00010C34                            loc_105C0:
00010C34 5228 0028                  		addq.b	#1,$28(a0)
00010C38 4228 0038                  		clr.b	$38(a0)
00010C3C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C40 7000                       		moveq	#0,d0
00010C42 1028 0023                  		move.b	$23(a0),d0
00010C46 67CE                       		beq.s	loc_105A2
00010C48 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010C4E 60C6                       		bra.s	loc_105A2
00010C50                            ; ===========================================================================
00010C50                            
00010C50                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010C50 4A28 0038                  		tst.b	$38(a0)
00010C54 6600                       		bne.s	loc_105F8
00010C56 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010C5A 7000                       		moveq	#0,d0
00010C5C 1028 003C                  		move.b	$3C(a0),d0
00010C60 4A32 0000                  		tst.b	(a2,d0.w)
00010C64 6A00                       		bpl.s	loc_10606
00010C66 117C 0001 0038             		move.b	#1,$38(a0)
00010C6C                            
00010C6C                            loc_105F8:
00010C6C 303C 0080                  		move.w	#$80,d0
00010C70 B068 003A                  		cmp.w	$3A(a0),d0
00010C74 6700                       		beq.s	loc_10624
00010C76 5468 003A                  		addq.w	#2,$3A(a0)
00010C7A                            
00010C7A                            loc_10606:
00010C7A 3028 003A                  		move.w	$3A(a0),d0
00010C7E 0828 0000 0022             		btst	#0,$22(a0)
00010C84 6700                       		beq.s	loc_10618
00010C86 4440                       		neg.w	d0
00010C88 0640 0080                  		addi.w	#$80,d0
00010C8C                            
00010C8C                            loc_10618:
00010C8C 3228 0034                  		move.w	$34(a0),d1
00010C90 D240                       		add.w	d0,d1
00010C92 3141 0008                  		move.w	d1,8(a0)
00010C96 4E75                       		rts	
00010C98                            ; ===========================================================================
00010C98                            
00010C98                            loc_10624:
00010C98 5328 0028                  		subq.b	#1,$28(a0)
00010C9C 4228 0038                  		clr.b	$38(a0)
00010CA0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010CA4 7000                       		moveq	#0,d0
00010CA6 1028 0023                  		move.b	$23(a0),d0
00010CAA 67CE                       		beq.s	loc_10606
00010CAC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010CB2 60C6                       		bra.s	loc_10606
00010CB4                            ; ===========================================================================
00010CB4                            
00010CB4                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010CB4 323C 0010                  		move.w	#$10,d1
00010CB8 7000                       		moveq	#0,d0
00010CBA 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010CBE E248                       		lsr.w	#1,d0
00010CC0 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010CC4 6000                       		bra.s	Obj56_Move_Sqr
00010CC6                            ; ===========================================================================
00010CC6                            
00010CC6                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010CC6 323C 0030                  		move.w	#$30,d1
00010CCA 7000                       		moveq	#0,d0
00010CCC 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010CD0 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010CD4 6000                       		bra.s	Obj56_Move_Sqr
00010CD6                            ; ===========================================================================
00010CD6                            
00010CD6                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010CD6 323C 0050                  		move.w	#$50,d1
00010CDA 7000                       		moveq	#0,d0
00010CDC 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010CE0 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010CE4 6000                       		bra.s	Obj56_Move_Sqr
00010CE6                            ; ===========================================================================
00010CE6                            
00010CE6                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010CE6 323C 0070                  		move.w	#$70,d1
00010CEA 7000                       		moveq	#0,d0
00010CEC 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010CF0 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010CF4                            
00010CF4                            Obj56_Move_Sqr:
00010CF4 4A43                       		tst.w	d3
00010CF6 6600                       		bne.s	loc_1068E
00010CF8 5228 0022                  		addq.b	#1,$22(a0)
00010CFC 0228 0003 0022             		andi.b	#3,$22(a0)
00010D02                            
00010D02                            loc_1068E:
00010D02 1428 0022                  		move.b	$22(a0),d2
00010D06 0202 0003                  		andi.b	#3,d2
00010D0A 6600                       		bne.s	loc_106AE
00010D0C 9041                       		sub.w	d1,d0
00010D0E D068 0034                  		add.w	$34(a0),d0
00010D12 3140 0008                  		move.w	d0,8(a0)
00010D16 4441                       		neg.w	d1
00010D18 D268 0030                  		add.w	$30(a0),d1
00010D1C 3141 000C                  		move.w	d1,$C(a0)
00010D20 4E75                       		rts	
00010D22                            ; ===========================================================================
00010D22                            
00010D22                            loc_106AE:
00010D22 5302                       		subq.b	#1,d2
00010D24 6600                       		bne.s	loc_106CC
00010D26 5341                       		subq.w	#1,d1
00010D28 9041                       		sub.w	d1,d0
00010D2A 4440                       		neg.w	d0
00010D2C D068 0030                  		add.w	$30(a0),d0
00010D30 3140 000C                  		move.w	d0,$C(a0)
00010D34 5241                       		addq.w	#1,d1
00010D36 D268 0034                  		add.w	$34(a0),d1
00010D3A 3141 0008                  		move.w	d1,8(a0)
00010D3E 4E75                       		rts	
00010D40                            ; ===========================================================================
00010D40                            
00010D40                            loc_106CC:
00010D40 5302                       		subq.b	#1,d2
00010D42 6600                       		bne.s	loc_106EA
00010D44 5341                       		subq.w	#1,d1
00010D46 9041                       		sub.w	d1,d0
00010D48 4440                       		neg.w	d0
00010D4A D068 0034                  		add.w	$34(a0),d0
00010D4E 3140 0008                  		move.w	d0,8(a0)
00010D52 5241                       		addq.w	#1,d1
00010D54 D268 0030                  		add.w	$30(a0),d1
00010D58 3141 000C                  		move.w	d1,$C(a0)
00010D5C 4E75                       		rts	
00010D5E                            ; ===========================================================================
00010D5E                            
00010D5E                            loc_106EA:
00010D5E 9041                       		sub.w	d1,d0
00010D60 D068 0030                  		add.w	$30(a0),d0
00010D64 3140 000C                  		move.w	d0,$C(a0)
00010D68 4441                       		neg.w	d1
00010D6A D268 0034                  		add.w	$34(a0),d1
00010D6E 3141 0008                  		move.w	d1,8(a0)
00010D72 4E75                       		rts	
00010D74                            ; ===========================================================================
00010D74                            ; ---------------------------------------------------------------------------
00010D74                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010D74                            ; ---------------------------------------------------------------------------
00010D74                            Map_obj56:
00010D74                            	include "_maps\obj56.asm"
00010D74                            ; ---------------------------------------------------------------------------
00010D74                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010D74                            ; ---------------------------------------------------------------------------
00010D74 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010D78 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010D7C 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010D80 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010D84 01                         byte_10710:	dc.b 1
00010D85 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010D8A 04                         byte_10716:	dc.b 4
00010D8B E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010D90 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010D95 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010D9A 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010D9F 02                         byte_1072B:	dc.b 2
00010DA0 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010DA5 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010DAA 04                         byte_10736:	dc.b 4
00010DAB E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010DB0 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010DB5 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010DBA 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010DBF 03                         byte_1074B:	dc.b 3
00010DC0 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010DC5 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010DCA 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010DCF 01                         byte_1075B:	dc.b 1
00010DD0 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010DD5 02                         byte_10761:	dc.b 2
00010DD6 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010DDB 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010DE0 04                         byte_1076C:	dc.b 4
00010DE1 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010DE6 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010DEB F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010DF0 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010DF6 00                         		even
00010DF6 00                         		even
00010DF6                            
00010DF6                            ; ===========================================================================
00010DF6                            ; ---------------------------------------------------------------------------
00010DF6                            ; Object 57 - spiked balls (SYZ, LZ)
00010DF6                            ; ---------------------------------------------------------------------------
00010DF6                            
00010DF6                            Obj57:					; XREF: Obj_Index
00010DF6 7000                       		moveq	#0,d0
00010DF8 1028 0024                  		move.b	$24(a0),d0
00010DFC 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010E00 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010E04                            ; ===========================================================================
00010E04 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010E06 0000                       		dc.w Obj57_Move-Obj57_Index
00010E08 0000                       		dc.w Obj57_Display-Obj57_Index
00010E0A                            ; ===========================================================================
00010E0A                            
00010E0A                            Obj57_Main:				; XREF: Obj57_Index
00010E0A 5428 0024                  		addq.b	#2,$24(a0)
00010E0E 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010E16 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010E1C 117C 0004 0001             		move.b	#4,1(a0)
00010E22 117C 0004 0018             		move.b	#4,$18(a0)
00010E28 117C 0008 0019             		move.b	#8,$19(a0)
00010E2E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010E34 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010E3A 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010E40 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E46 6600                       		bne.s	loc_107E8
00010E48 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010E4E 317C 0310 0002             		move.w	#$310,2(a0)
00010E54 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010E5C                            
00010E5C                            loc_107E8:
00010E5C 1228 0028                  		move.b	$28(a0),d1	; get object type
00010E60 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010E64 4881                       		ext.w	d1
00010E66 E741                       		asl.w	#3,d1		; multiply by 8
00010E68 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010E6C 1028 0022                  		move.b	$22(a0),d0
00010E70 E418                       		ror.b	#2,d0
00010E72 0200 00C0                  		andi.b	#-$40,d0
00010E76 1140 0026                  		move.b	d0,$26(a0)
00010E7A 45E8 0029                  		lea	$29(a0),a2
00010E7E 1228 0028                  		move.b	$28(a0),d1	; get object type
00010E82 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010E86 14FC 0000                  		move.b	#0,(a2)+
00010E8A 3601                       		move.w	d1,d3
00010E8C E94B                       		lsl.w	#4,d3
00010E8E 1143 003C                  		move.b	d3,$3C(a0)
00010E92 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010E94 6500                       		bcs.s	loc_10894
00010E96 0828 0003 0028             		btst	#3,$28(a0)
00010E9C 6700                       		beq.s	Obj57_MakeChain
00010E9E 5341                       		subq.w	#1,d1
00010EA0 6500                       		bcs.s	loc_10894
00010EA2                            
00010EA2                            Obj57_MakeChain:
00010EA2 6100 D266                  		bsr.w	SingleObjLoad
00010EA6 6600                       		bne.s	loc_10894
00010EA8 5228 0029                  		addq.b	#1,$29(a0)
00010EAC 3A09                       		move.w	a1,d5
00010EAE 0445 D000                  		subi.w	#-$3000,d5
00010EB2 EC4D                       		lsr.w	#6,d5
00010EB4 0245 007F                  		andi.w	#$7F,d5
00010EB8 14C5                       		move.b	d5,(a2)+
00010EBA 137C 0004 0024             		move.b	#4,$24(a1)
00010EC0 1290                       		move.b	0(a0),0(a1)
00010EC2 2368 0004 0004             		move.l	4(a0),4(a1)
00010EC8 3368 0002 0002             		move.w	2(a0),2(a1)
00010ECE 1368 0001 0001             		move.b	1(a0),1(a1)
00010ED4 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010EDA 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010EE0 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010EE6 0403 0010                  		subi.b	#$10,d3
00010EEA 1343 003C                  		move.b	d3,$3C(a1)
00010EEE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010EF4 6600                       		bne.s	loc_10890
00010EF6 4A03                       		tst.b	d3
00010EF8 6600                       		bne.s	loc_10890
00010EFA 137C 0002 001A             		move.b	#2,$1A(a1)
00010F00                            
00010F00                            loc_10890:
00010F00 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010F04                            
00010F04                            loc_10894:
00010F04 3A08                       		move.w	a0,d5
00010F06 0445 D000                  		subi.w	#-$3000,d5
00010F0A EC4D                       		lsr.w	#6,d5
00010F0C 0245 007F                  		andi.w	#$7F,d5
00010F10 14C5                       		move.b	d5,(a2)+
00010F12 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F18 6600                       		bne.s	Obj57_Move
00010F1A 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010F20 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010F26                            
00010F26                            Obj57_Move:				; XREF: Obj57_Index
00010F26 6100 0000                  		bsr.w	Obj57_MoveSub
00010F2A 6000 0000                  		bra.w	Obj57_ChkDel
00010F2E                            ; ===========================================================================
00010F2E                            
00010F2E                            Obj57_MoveSub:				; XREF: Obj57_Move
00010F2E 3028 003E                  		move.w	$3E(a0),d0
00010F32 D168 0026                  		add.w	d0,$26(a0)
00010F36 1028 0026                  		move.b	$26(a0),d0
00010F3A 4EB9 0000 2C64             		jsr	(CalcSine).l
00010F40 3428 0038                  		move.w	$38(a0),d2
00010F44 3628 003A                  		move.w	$3A(a0),d3
00010F48 45E8 0029                  		lea	$29(a0),a2
00010F4C 7C00                       		moveq	#0,d6
00010F4E 1C1A                       		move.b	(a2)+,d6
00010F50                            
00010F50                            Obj57_MoveLoop:
00010F50 7800                       		moveq	#0,d4
00010F52 181A                       		move.b	(a2)+,d4
00010F54 ED4C                       		lsl.w	#6,d4
00010F56 0684 00FF D000             		addi.l	#$FFD000,d4
00010F5C 2244                       		movea.l	d4,a1
00010F5E 7800                       		moveq	#0,d4
00010F60 1829 003C                  		move.b	$3C(a1),d4
00010F64 2A04                       		move.l	d4,d5
00010F66 C9C0                       		muls.w	d0,d4
00010F68 E084                       		asr.l	#8,d4
00010F6A CBC1                       		muls.w	d1,d5
00010F6C E085                       		asr.l	#8,d5
00010F6E D842                       		add.w	d2,d4
00010F70 DA43                       		add.w	d3,d5
00010F72 3344 000C                  		move.w	d4,$C(a1)
00010F76 3345 0008                  		move.w	d5,8(a1)
00010F7A 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010F7E 4E75                       		rts	
00010F80                            ; ===========================================================================
00010F80                            
00010F80                            Obj57_ChkDel:				; XREF: Obj57_Move
00010F80 3028 003A                  		move.w	$3A(a0),d0
00010F84 0240 FF80                  		andi.w	#$FF80,d0
00010F88 3238 F700                  		move.w	($FFFFF700).w,d1
00010F8C 0441 0080                  		subi.w	#$80,d1
00010F90 0241 FF80                  		andi.w	#$FF80,d1
00010F94 9041                       		sub.w	d1,d0
00010F96 0C40 0280                  		cmpi.w	#$280,d0
00010F9A 6200 0000                  		bhi.w	Obj57_Delete
00010F9E 6000 CCE4                  		bra.w	DisplaySprite
00010FA2                            ; ===========================================================================
00010FA2                            
00010FA2                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010FA2 7400                       		moveq	#0,d2
00010FA4 45E8 0029                  		lea	$29(a0),a2
00010FA8 141A                       		move.b	(a2)+,d2
00010FAA                            
00010FAA                            Obj57_DelLoop:
00010FAA 7000                       		moveq	#0,d0
00010FAC 101A                       		move.b	(a2)+,d0
00010FAE ED48                       		lsl.w	#6,d0
00010FB0 0680 00FF D000             		addi.l	#$FFD000,d0
00010FB6 2240                       		movea.l	d0,a1
00010FB8 6100 CD08                  		bsr.w	DeleteObject2
00010FBC 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010FC0                            
00010FC0 4E75                       		rts	
00010FC2                            ; ===========================================================================
00010FC2                            
00010FC2                            Obj57_Display:				; XREF: Obj57_Index
00010FC2 6000 CCC0                  		bra.w	DisplaySprite
00010FC6                            ; ===========================================================================
00010FC6                            ; ---------------------------------------------------------------------------
00010FC6                            ; Sprite mappings - chain of spiked balls (SYZ)
00010FC6                            ; ---------------------------------------------------------------------------
00010FC6                            Map_obj57:
00010FC6                            	include "_maps\obj57syz.asm"
00010FC6                            ; ---------------------------------------------------------------------------
00010FC6                            ; Sprite mappings - chain of spiked balls (SYZ)
00010FC6                            ; ---------------------------------------------------------------------------
00010FC6 0000                       		dc.w byte_10958-Map_obj57
00010FC8 01                         byte_10958:	dc.b 1
00010FC9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010FCE                            		even
00010FCE                            		even
00010FCE                            
00010FCE                            ; ---------------------------------------------------------------------------
00010FCE                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010FCE                            ; ---------------------------------------------------------------------------
00010FCE                            Map_obj57a:
00010FCE                            	include "_maps\obj57lz.asm"
00010FCE                            ; ---------------------------------------------------------------------------
00010FCE                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010FCE                            ; ---------------------------------------------------------------------------
00010FCE 0000                       		dc.w byte_10964-Map_obj57a
00010FD0 0000                       		dc.w byte_1096A-Map_obj57a
00010FD2 0000                       		dc.w byte_10970-Map_obj57a
00010FD4 01                         byte_10964:	dc.b 1
00010FD5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010FDA 01                         byte_1096A:	dc.b 1
00010FDB F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010FE0 01                         byte_10970:	dc.b 1
00010FE1 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010FE6                            		even
00010FE6                            		even
00010FE6                            
00010FE6                            ; ===========================================================================
00010FE6                            ; ---------------------------------------------------------------------------
00010FE6                            ; Object 58 - giant spiked balls (SYZ)
00010FE6                            ; ---------------------------------------------------------------------------
00010FE6                            
00010FE6                            Obj58:					; XREF: Obj_Index
00010FE6 7000                       		moveq	#0,d0
00010FE8 1028 0024                  		move.b	$24(a0),d0
00010FEC 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010FF0 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010FF4                            ; ===========================================================================
00010FF4 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010FF6 0000                       		dc.w Obj58_Move-Obj58_Index
00010FF8                            ; ===========================================================================
00010FF8                            
00010FF8                            Obj58_Main:				; XREF: Obj58_Index
00010FF8 5428 0024                  		addq.b	#2,$24(a0)
00010FFC 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011004 317C 0396 0002             		move.w	#$396,2(a0)
0001100A 117C 0004 0001             		move.b	#4,1(a0)
00011010 117C 0004 0018             		move.b	#4,$18(a0)
00011016 117C 0018 0019             		move.b	#$18,$19(a0)
0001101C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011022 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011028 117C 0086 0020             		move.b	#$86,$20(a0)
0001102E 1228 0028                  		move.b	$28(a0),d1	; get object type
00011032 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011036 4881                       		ext.w	d1
00011038 E741                       		asl.w	#3,d1		; multiply by 8
0001103A 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
0001103E 1028 0022                  		move.b	$22(a0),d0
00011042 E418                       		ror.b	#2,d0
00011044 0200 00C0                  		andi.b	#$C0,d0
00011048 1140 0026                  		move.b	d0,$26(a0)
0001104C 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011052                            
00011052                            Obj58_Move:				; XREF: Obj58_Index
00011052 7000                       		moveq	#0,d0
00011054 1028 0028                  		move.b	$28(a0),d0	; get object type
00011058 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0001105C D040                       		add.w	d0,d0
0001105E 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011062 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011066 3028 003A                  		move.w	$3A(a0),d0
0001106A 0240 FF80                  		andi.w	#$FF80,d0
0001106E 3238 F700                  		move.w	($FFFFF700).w,d1
00011072 0441 0080                  		subi.w	#$80,d1
00011076 0241 FF80                  		andi.w	#$FF80,d1
0001107A 9041                       		sub.w	d1,d0
0001107C 0C40 0280                  		cmpi.w	#$280,d0
00011080 6200 CC3E                  		bhi.w	DeleteObject
00011084 6000 CBFE                  		bra.w	DisplaySprite
00011088                            ; ===========================================================================
00011088 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001108A 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0001108C 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001108E 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011090                            ; ===========================================================================
00011090                            
00011090                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011090 4E75                       		rts	
00011092                            ; ===========================================================================
00011092                            
00011092                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011092 323C 0060                  		move.w	#$60,d1
00011096 7000                       		moveq	#0,d0
00011098 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001109C 0828 0000 0022             		btst	#0,$22(a0)
000110A2 6700                       		beq.s	loc_10A38
000110A4 4440                       		neg.w	d0
000110A6 D041                       		add.w	d1,d0
000110A8                            
000110A8                            loc_10A38:
000110A8 3228 003A                  		move.w	$3A(a0),d1
000110AC 9240                       		sub.w	d0,d1
000110AE 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000110B2 4E75                       		rts	
000110B4                            ; ===========================================================================
000110B4                            
000110B4                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000110B4 323C 0060                  		move.w	#$60,d1
000110B8 7000                       		moveq	#0,d0
000110BA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000110BE 0828 0000 0022             		btst	#0,$22(a0)
000110C4 6700                       		beq.s	loc_10A5C
000110C6 4440                       		neg.w	d0
000110C8 0640 0080                  		addi.w	#$80,d0
000110CC                            
000110CC                            loc_10A5C:
000110CC 3228 0038                  		move.w	$38(a0),d1
000110D0 9240                       		sub.w	d0,d1
000110D2 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000110D6 4E75                       		rts	
000110D8                            ; ===========================================================================
000110D8                            
000110D8                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000110D8 3028 003E                  		move.w	$3E(a0),d0
000110DC D168 0026                  		add.w	d0,$26(a0)
000110E0 1028 0026                  		move.b	$26(a0),d0
000110E4 4EB9 0000 2C64             		jsr	(CalcSine).l
000110EA 3428 0038                  		move.w	$38(a0),d2
000110EE 3628 003A                  		move.w	$3A(a0),d3
000110F2 7800                       		moveq	#0,d4
000110F4 1828 003C                  		move.b	$3C(a0),d4
000110F8 2A04                       		move.l	d4,d5
000110FA C9C0                       		muls.w	d0,d4
000110FC E084                       		asr.l	#8,d4
000110FE CBC1                       		muls.w	d1,d5
00011100 E085                       		asr.l	#8,d5
00011102 D842                       		add.w	d2,d4
00011104 DA43                       		add.w	d3,d5
00011106 3144 000C                  		move.w	d4,$C(a0)
0001110A 3145 0008                  		move.w	d5,8(a0)
0001110E 4E75                       		rts	
00011110                            ; ===========================================================================
00011110                            ; ---------------------------------------------------------------------------
00011110                            ; Sprite mappings - SBZ	spiked ball on a chain
00011110                            ; ---------------------------------------------------------------------------
00011110                            Map_obj15b:
00011110                            	include "_maps\obj15sbz.asm"
00011110                            ; ---------------------------------------------------------------------------
00011110                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011110                            ; ---------------------------------------------------------------------------
00011110 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011114 0000                       		dc.w byte_10AC6-Map_obj15b
00011116 05                         byte_10AA6:	dc.b 5
00011117 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
0001111C F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011121 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011126 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001112B 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011130 01                         byte_10AC0:	dc.b 1
00011131 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011136 02                         byte_10AC6:	dc.b 2
00011137 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
0001113C E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011142 00                         		even
00011142 00                         		even
00011142                            
00011142                            ; ===========================================================================
00011142                            ; ---------------------------------------------------------------------------
00011142                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011142                            ; ---------------------------------------------------------------------------
00011142                            
00011142                            Obj59:					; XREF: Obj_Index
00011142 7000                       		moveq	#0,d0
00011144 1028 0024                  		move.b	$24(a0),d0
00011148 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
0001114C 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011150 3028 0032                  		move.w	$32(a0),d0
00011154 0240 FF80                  		andi.w	#$FF80,d0
00011158 3238 F700                  		move.w	($FFFFF700).w,d1
0001115C 0441 0080                  		subi.w	#$80,d1
00011160 0241 FF80                  		andi.w	#$FF80,d1
00011164 9041                       		sub.w	d1,d0
00011166 0C40 0280                  		cmpi.w	#$280,d0
0001116A 6200 CB54                  		bhi.w	DeleteObject
0001116E 6000 CB14                  		bra.w	DisplaySprite
00011172                            ; ===========================================================================
00011172 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011174 0000                       		dc.w Obj59_Platform-Obj59_Index
00011176 0000                       		dc.w Obj59_Action-Obj59_Index
00011178 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001117A                            
0001117A 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
0001117C                            
0001117C 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001117E 2001                       		dc.b $20, 1
00011180 3401                       		dc.b $34, 1
00011182 1003                       		dc.b $10, 3
00011184 2003                       		dc.b $20, 3
00011186 3403                       		dc.b $34, 3
00011188 1401                       		dc.b $14, 1
0001118A 2401                       		dc.b $24, 1
0001118C 2C01                       		dc.b $2C, 1
0001118E 1403                       		dc.b $14, 3
00011190 2403                       		dc.b $24, 3
00011192 2C03                       		dc.b $2C, 3
00011194 2005                       		dc.b $20, 5
00011196 2007                       		dc.b $20, 7
00011198 3009                       		dc.b $30, 9
0001119A                            ; ===========================================================================
0001119A                            
0001119A                            Obj59_Main:				; XREF: Obj59_Index
0001119A 5428 0024                  		addq.b	#2,$24(a0)
0001119E 7000                       		moveq	#0,d0
000111A0 1028 0028                  		move.b	$28(a0),d0
000111A4 6A00                       		bpl.s	Obj59_Main2
000111A6 5828 0024                  		addq.b	#4,$24(a0)
000111AA 0240 007F                  		andi.w	#$7F,d0
000111AE C0FC 0006                  		mulu.w	#6,d0
000111B2 3140 003C                  		move.w	d0,$3C(a0)
000111B6 3140 003E                  		move.w	d0,$3E(a0)
000111BA 588F                       		addq.l	#4,sp
000111BC 4E75                       		rts	
000111BE                            ; ===========================================================================
000111BE                            
000111BE                            Obj59_Main2:
000111BE E648                       		lsr.w	#3,d0
000111C0 0240 001E                  		andi.w	#$1E,d0
000111C4 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000111C8 115A 0019                  		move.b	(a2)+,$19(a0)
000111CC 115A 001A                  		move.b	(a2)+,$1A(a0)
000111D0 7000                       		moveq	#0,d0
000111D2 1028 0028                  		move.b	$28(a0),d0
000111D6 D040                       		add.w	d0,d0
000111D8 0240 001E                  		andi.w	#$1E,d0
000111DC 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000111E0 101A                       		move.b	(a2)+,d0
000111E2 E548                       		lsl.w	#2,d0
000111E4 3140 003C                  		move.w	d0,$3C(a0)
000111E8 115A 0028                  		move.b	(a2)+,$28(a0)
000111EC 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000111F4 317C 4000 0002             		move.w	#$4000,2(a0)
000111FA 117C 0004 0001             		move.b	#4,1(a0)
00011200 117C 0004 0018             		move.b	#4,$18(a0)
00011206 3168 0008 0032             		move.w	8(a0),$32(a0)
0001120C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011212                            
00011212                            Obj59_Platform:				; XREF: Obj59_Index
00011212 7200                       		moveq	#0,d1
00011214 1228 0019                  		move.b	$19(a0),d1
00011218 4EB9 0000 79A0             		jsr	(PlatformObject).l
0001121E 6000 0000                  		bra.w	Obj59_Types
00011222                            ; ===========================================================================
00011222                            
00011222                            Obj59_Action:				; XREF: Obj59_Index
00011222 7200                       		moveq	#0,d1
00011224 1228 0019                  		move.b	$19(a0),d1
00011228 4EB9 0000 7B14             		jsr	(ExitPlatform).l
0001122E 3F28 0008                  		move.w	8(a0),-(sp)
00011232 6100 0000                  		bsr.w	Obj59_Types
00011236 341F                       		move.w	(sp)+,d2
00011238 4A10                       		tst.b	0(a0)
0001123A 6700                       		beq.s	locret_10BD4
0001123C 4EF9 0000 807E             		jmp	(MvSonicOnPtfm2).l
00011242                            ; ===========================================================================
00011242                            
00011242                            locret_10BD4:
00011242 4E75                       		rts	
00011244                            ; ===========================================================================
00011244                            
00011244                            Obj59_Types:
00011244 7000                       		moveq	#0,d0
00011246 1028 0028                  		move.b	$28(a0),d0
0001124A 0240 000F                  		andi.w	#$F,d0
0001124E D040                       		add.w	d0,d0
00011250 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011254 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011258                            ; ===========================================================================
00011258 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001125C 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011260 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011264 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011268 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
0001126C                            ; ===========================================================================
0001126C                            
0001126C                            Obj59_Type00:				; XREF: Obj59_TypeIndex
0001126C 4E75                       		rts	
0001126E                            ; ===========================================================================
0001126E                            
0001126E                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001126E 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011274 6600                       		bne.s	locret_10C0C
00011276 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001127A                            
0001127A                            locret_10C0C:
0001127A 4E75                       		rts	
0001127C                            ; ===========================================================================
0001127C                            
0001127C                            Obj59_Type02:				; XREF: Obj59_TypeIndex
0001127C 6100 0000                  		bsr.w	Obj59_Move
00011280 3028 0034                  		move.w	$34(a0),d0
00011284 4440                       		neg.w	d0
00011286 D068 0030                  		add.w	$30(a0),d0
0001128A 3140 000C                  		move.w	d0,$C(a0)
0001128E 4E75                       		rts	
00011290                            ; ===========================================================================
00011290                            
00011290                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011290 6100 0000                  		bsr.w	Obj59_Move
00011294 3028 0034                  		move.w	$34(a0),d0
00011298 D068 0030                  		add.w	$30(a0),d0
0001129C 3140 000C                  		move.w	d0,$C(a0)
000112A0 4E75                       		rts	
000112A2                            ; ===========================================================================
000112A2                            
000112A2                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000112A2 6100 0000                  		bsr.w	Obj59_Move
000112A6 3028 0034                  		move.w	$34(a0),d0
000112AA E240                       		asr.w	#1,d0
000112AC 4440                       		neg.w	d0
000112AE D068 0030                  		add.w	$30(a0),d0
000112B2 3140 000C                  		move.w	d0,$C(a0)
000112B6 3028 0034                  		move.w	$34(a0),d0
000112BA D068 0032                  		add.w	$32(a0),d0
000112BE 3140 0008                  		move.w	d0,8(a0)
000112C2 4E75                       		rts	
000112C4                            ; ===========================================================================
000112C4                            
000112C4                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000112C4 6100 0000                  		bsr.w	Obj59_Move
000112C8 3028 0034                  		move.w	$34(a0),d0
000112CC E240                       		asr.w	#1,d0
000112CE D068 0030                  		add.w	$30(a0),d0
000112D2 3140 000C                  		move.w	d0,$C(a0)
000112D6 3028 0034                  		move.w	$34(a0),d0
000112DA 4440                       		neg.w	d0
000112DC D068 0032                  		add.w	$32(a0),d0
000112E0 3140 0008                  		move.w	d0,8(a0)
000112E4 4E75                       		rts	
000112E6                            ; ===========================================================================
000112E6                            
000112E6                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000112E6 6100 0000                  		bsr.w	Obj59_Move
000112EA 3028 0034                  		move.w	$34(a0),d0
000112EE 4440                       		neg.w	d0
000112F0 D068 0030                  		add.w	$30(a0),d0
000112F4 3140 000C                  		move.w	d0,$C(a0)
000112F8 4A28 0028                  		tst.b	$28(a0)
000112FC 6700 0000                  		beq.w	loc_10C94
00011300 4E75                       		rts	
00011302                            ; ===========================================================================
00011302                            
00011302                            loc_10C94:
00011302 0828 0003 0022             		btst	#3,$22(a0)
00011308 6700                       		beq.s	Obj59_Delete
0001130A 08E9 0001 0022             		bset	#1,$22(a1)
00011310 08A9 0003 0022             		bclr	#3,$22(a1)
00011316 137C 0002 0024             		move.b	#2,$24(a1)
0001131C                            
0001131C                            Obj59_Delete:
0001131C 6000 C9A2                  		bra.w	DeleteObject
00011320                            
00011320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011320                            
00011320                            
00011320                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011320 3028 0038                  		move.w	$38(a0),d0
00011324 4A28 003A                  		tst.b	$3A(a0)
00011328 6600                       		bne.s	loc_10CC8
0001132A 0C40 0800                  		cmpi.w	#$800,d0
0001132E 6400                       		bcc.s	loc_10CD0
00011330 0640 0010                  		addi.w	#$10,d0
00011334 6000                       		bra.s	loc_10CD0
00011336                            ; ===========================================================================
00011336                            
00011336                            loc_10CC8:
00011336 4A40                       		tst.w	d0
00011338 6700                       		beq.s	loc_10CD0
0001133A 0440 0010                  		subi.w	#$10,d0
0001133E                            
0001133E                            loc_10CD0:
0001133E 3140 0038                  		move.w	d0,$38(a0)
00011342 48C0                       		ext.l	d0
00011344 E180                       		asl.l	#8,d0
00011346 D0A8 0034                  		add.l	$34(a0),d0
0001134A 2140 0034                  		move.l	d0,$34(a0)
0001134E 4840                       		swap	d0
00011350 3428 003C                  		move.w	$3C(a0),d2
00011354 B042                       		cmp.w	d2,d0
00011356 6300                       		bls.s	loc_10CF0
00011358 117C 0001 003A             		move.b	#1,$3A(a0)
0001135E                            
0001135E                            loc_10CF0:
0001135E D442                       		add.w	d2,d2
00011360 B042                       		cmp.w	d2,d0
00011362 6600                       		bne.s	locret_10CFA
00011364 4228 0028                  		clr.b	$28(a0)
00011368                            
00011368                            locret_10CFA:
00011368 4E75                       		rts	
0001136A                            ; End of function Obj59_Move
0001136A                            
0001136A                            ; ===========================================================================
0001136A                            
0001136A                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001136A 5368 003C                  		subq.w	#1,$3C(a0)
0001136E 6600                       		bne.s	Obj59_ChkDel
00011370 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011376 6100 CD92                  		bsr.w	SingleObjLoad
0001137A 6600                       		bne.s	Obj59_ChkDel
0001137C 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011380 3368 0008 0008             		move.w	8(a0),8(a1)
00011386 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001138C 137C 000E 0028             		move.b	#$E,$28(a1)
00011392                            
00011392                            Obj59_ChkDel:
00011392 588F                       		addq.l	#4,sp
00011394 3028 0008                  		move.w	8(a0),d0
00011398 0240 FF80                  		andi.w	#$FF80,d0
0001139C 3238 F700                  		move.w	($FFFFF700).w,d1
000113A0 0441 0080                  		subi.w	#$80,d1
000113A4 0241 FF80                  		andi.w	#$FF80,d1
000113A8 9041                       		sub.w	d1,d0
000113AA 0C40 0280                  		cmpi.w	#$280,d0
000113AE 6200 C910                  		bhi.w	DeleteObject
000113B2 4E75                       		rts	
000113B4                            ; ===========================================================================
000113B4                            ; ---------------------------------------------------------------------------
000113B4                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000113B4                            ; ---------------------------------------------------------------------------
000113B4                            Map_obj59:
000113B4                            	include "_maps\obj59.asm"
000113B4                            ; ---------------------------------------------------------------------------
000113B4                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000113B4                            ; ---------------------------------------------------------------------------
000113B4 0000                       		dc.w byte_10D4A-Map_obj59
000113B6 03                         byte_10D4A:	dc.b 3
000113B7 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000113BC F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000113C1 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000113C6                            		even
000113C6                            		even
000113C6                            
000113C6                            ; ===========================================================================
000113C6                            ; ---------------------------------------------------------------------------
000113C6                            ; Object 5A - platforms	moving in circles (SLZ)
000113C6                            ; ---------------------------------------------------------------------------
000113C6                            
000113C6                            Obj5A:					; XREF: Obj_Index
000113C6 7000                       		moveq	#0,d0
000113C8 1028 0024                  		move.b	$24(a0),d0
000113CC 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000113D0 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000113D4 3028 0032                  		move.w	$32(a0),d0
000113D8 0240 FF80                  		andi.w	#$FF80,d0
000113DC 3238 F700                  		move.w	($FFFFF700).w,d1
000113E0 0441 0080                  		subi.w	#$80,d1
000113E4 0241 FF80                  		andi.w	#$FF80,d1
000113E8 9041                       		sub.w	d1,d0
000113EA 0C40 0280                  		cmpi.w	#$280,d0
000113EE 6200 C8D0                  		bhi.w	DeleteObject
000113F2 6000 C890                  		bra.w	DisplaySprite
000113F6                            ; ===========================================================================
000113F6 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000113F8 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000113FA 0000                       		dc.w Obj5A_Action-Obj5A_Index
000113FC                            ; ===========================================================================
000113FC                            
000113FC                            Obj5A_Main:				; XREF: Obj5A_Index
000113FC 5428 0024                  		addq.b	#2,$24(a0)
00011400 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011408 317C 4000 0002             		move.w	#$4000,2(a0)
0001140E 117C 0004 0001             		move.b	#4,1(a0)
00011414 117C 0004 0018             		move.b	#4,$18(a0)
0001141A 117C 0018 0019             		move.b	#$18,$19(a0)
00011420 3168 0008 0032             		move.w	8(a0),$32(a0)
00011426 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001142C                            
0001142C                            Obj5A_Platform:				; XREF: Obj5A_Index
0001142C 7200                       		moveq	#0,d1
0001142E 1228 0019                  		move.b	$19(a0),d1
00011432 4EB9 0000 79A0             		jsr	(PlatformObject).l
00011438 6000 0000                  		bra.w	Obj5A_Types
0001143C                            ; ===========================================================================
0001143C                            
0001143C                            Obj5A_Action:				; XREF: Obj5A_Index
0001143C 7200                       		moveq	#0,d1
0001143E 1228 0019                  		move.b	$19(a0),d1
00011442 4EB9 0000 7B14             		jsr	(ExitPlatform).l
00011448 3F28 0008                  		move.w	8(a0),-(sp)
0001144C 6100 0000                  		bsr.w	Obj5A_Types
00011450 341F                       		move.w	(sp)+,d2
00011452 4EF9 0000 807E             		jmp	(MvSonicOnPtfm2).l
00011458                            ; ===========================================================================
00011458                            
00011458                            Obj5A_Types:
00011458 7000                       		moveq	#0,d0
0001145A 1028 0028                  		move.b	$28(a0),d0
0001145E 0240 000C                  		andi.w	#$C,d0
00011462 E248                       		lsr.w	#1,d0
00011464 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011468 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001146C                            ; ===========================================================================
0001146C 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001146E 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011470                            ; ===========================================================================
00011470                            
00011470                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011470 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011474 0401 0050                  		subi.b	#$50,d1
00011478 4881                       		ext.w	d1
0001147A 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001147E 0402 0050                  		subi.b	#$50,d2
00011482 4882                       		ext.w	d2
00011484 0828 0000 0028             		btst	#0,$28(a0)
0001148A 6700                       		beq.s	loc_10E24
0001148C 4441                       		neg.w	d1
0001148E 4442                       		neg.w	d2
00011490                            
00011490                            loc_10E24:
00011490 0828 0001 0028             		btst	#1,$28(a0)
00011496 6700                       		beq.s	loc_10E30
00011498 4441                       		neg.w	d1
0001149A C342                       		exg	d1,d2
0001149C                            
0001149C                            loc_10E30:
0001149C D268 0032                  		add.w	$32(a0),d1
000114A0 3141 0008                  		move.w	d1,8(a0)
000114A4 D468 0030                  		add.w	$30(a0),d2
000114A8 3142 000C                  		move.w	d2,$C(a0)
000114AC 4E75                       		rts	
000114AE                            ; ===========================================================================
000114AE                            
000114AE                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000114AE 1238 FE80                  		move.b	($FFFFFE80).w,d1
000114B2 0401 0050                  		subi.b	#$50,d1
000114B6 4881                       		ext.w	d1
000114B8 1438 FE84                  		move.b	($FFFFFE84).w,d2
000114BC 0402 0050                  		subi.b	#$50,d2
000114C0 4882                       		ext.w	d2
000114C2 0828 0000 0028             		btst	#0,$28(a0)
000114C8 6700                       		beq.s	loc_10E62
000114CA 4441                       		neg.w	d1
000114CC 4442                       		neg.w	d2
000114CE                            
000114CE                            loc_10E62:
000114CE 0828 0001 0028             		btst	#1,$28(a0)
000114D4 6700                       		beq.s	loc_10E6E
000114D6 4441                       		neg.w	d1
000114D8 C342                       		exg	d1,d2
000114DA                            
000114DA                            loc_10E6E:
000114DA 4441                       		neg.w	d1
000114DC D268 0032                  		add.w	$32(a0),d1
000114E0 3141 0008                  		move.w	d1,8(a0)
000114E4 D468 0030                  		add.w	$30(a0),d2
000114E8 3142 000C                  		move.w	d2,$C(a0)
000114EC 4E75                       		rts	
000114EE                            ; ===========================================================================
000114EE                            ; ---------------------------------------------------------------------------
000114EE                            ; Sprite mappings - platforms that move	in circles (SLZ)
000114EE                            ; ---------------------------------------------------------------------------
000114EE                            Map_obj5A:
000114EE                            	include "_maps\obj5A.asm"
000114EE                            ; ---------------------------------------------------------------------------
000114EE                            ; Sprite mappings - platforms that move	in circles (SLZ)
000114EE                            ; ---------------------------------------------------------------------------
000114EE 0000                       		dc.w byte_10E84-Map_obj5A
000114F0 02                         byte_10E84:	dc.b 2
000114F1 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000114F6 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000114FC 00                         		even
000114FC 00                         		even
000114FC                            
000114FC                            ; ===========================================================================
000114FC                            ; ---------------------------------------------------------------------------
000114FC                            ; Object 5B - blocks that form a staircase (SLZ)
000114FC                            ; ---------------------------------------------------------------------------
000114FC                            
000114FC                            Obj5B:					; XREF: Obj_Index
000114FC 7000                       		moveq	#0,d0
000114FE 1028 0024                  		move.b	$24(a0),d0
00011502 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011506 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001150A 3028 0030                  		move.w	$30(a0),d0
0001150E 0240 FF80                  		andi.w	#$FF80,d0
00011512 3238 F700                  		move.w	($FFFFF700).w,d1
00011516 0441 0080                  		subi.w	#$80,d1
0001151A 0241 FF80                  		andi.w	#$FF80,d1
0001151E 9041                       		sub.w	d1,d0
00011520 0C40 0280                  		cmpi.w	#$280,d0
00011524 6200 C79A                  		bhi.w	DeleteObject
00011528 6000 C75A                  		bra.w	DisplaySprite
0001152C                            ; ===========================================================================
0001152C 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001152E 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011530 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011532                            ; ===========================================================================
00011532                            
00011532                            Obj5B_Main:				; XREF: Obj5B_Index
00011532 5428 0024                  		addq.b	#2,$24(a0)
00011536 7638                       		moveq	#$38,d3
00011538 7801                       		moveq	#1,d4
0001153A 0828 0000 0022             		btst	#0,$22(a0)
00011540 6700                       		beq.s	loc_10EDA
00011542 763B                       		moveq	#$3B,d3
00011544 78FF                       		moveq	#-1,d4
00011546                            
00011546                            loc_10EDA:
00011546 3428 0008                  		move.w	8(a0),d2
0001154A 2248                       		movea.l	a0,a1
0001154C 7203                       		moveq	#3,d1
0001154E 6000                       		bra.s	Obj5B_MakeBlocks
00011550                            ; ===========================================================================
00011550                            
00011550                            Obj5B_Loop:
00011550 6100 CBCE                  		bsr.w	SingleObjLoad2
00011554 6600 0000                  		bne.w	Obj5B_Move
00011558 137C 0004 0024             		move.b	#4,$24(a1)
0001155E                            
0001155E                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001155E 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011562 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001156A 337C 4000 0002             		move.w	#$4000,2(a1)
00011570 137C 0004 0001             		move.b	#4,1(a1)
00011576 137C 0003 0018             		move.b	#3,$18(a1)
0001157C 137C 0010 0019             		move.b	#$10,$19(a1)
00011582 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011588 3342 0008                  		move.w	d2,8(a1)
0001158C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011592 3368 0008 0030             		move.w	8(a0),$30(a1)
00011598 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001159E 0642 0020                  		addi.w	#$20,d2
000115A2 1343 0037                  		move.b	d3,$37(a1)
000115A6 2348 003C                  		move.l	a0,$3C(a1)
000115AA D604                       		add.b	d4,d3
000115AC 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000115B0                            
000115B0                            Obj5B_Move:				; XREF: Obj5B_Index
000115B0 7000                       		moveq	#0,d0
000115B2 1028 0028                  		move.b	$28(a0),d0
000115B6 0240 0007                  		andi.w	#7,d0
000115BA D040                       		add.w	d0,d0
000115BC 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000115C0 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000115C4                            
000115C4                            Obj5B_Solid:				; XREF: Obj5B_Index
000115C4 2468 003C                  		movea.l	$3C(a0),a2
000115C8 7000                       		moveq	#0,d0
000115CA 1028 0037                  		move.b	$37(a0),d0
000115CE 1032 0000                  		move.b	(a2,d0.w),d0
000115D2 D068 0032                  		add.w	$32(a0),d0
000115D6 3140 000C                  		move.w	d0,$C(a0)
000115DA 7200                       		moveq	#0,d1
000115DC 1228 0019                  		move.b	$19(a0),d1
000115E0 0641 000B                  		addi.w	#$B,d1
000115E4 343C 0010                  		move.w	#$10,d2
000115E8 363C 0011                  		move.w	#$11,d3
000115EC 3828 0008                  		move.w	8(a0),d4
000115F0 6100 EA62                  		bsr.w	SolidObject
000115F4 4A04                       		tst.b	d4
000115F6 6A00                       		bpl.s	loc_10F92
000115F8 1544 0036                  		move.b	d4,$36(a2)
000115FC                            
000115FC                            loc_10F92:
000115FC 0828 0003 0022             		btst	#3,$22(a0)
00011602 6700                       		beq.s	locret_10FA0
00011604 157C 0001 0036             		move.b	#1,$36(a2)
0001160A                            
0001160A                            locret_10FA0:
0001160A 4E75                       		rts	
0001160C                            ; ===========================================================================
0001160C 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
0001160E 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011610 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011612 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011614                            ; ===========================================================================
00011614                            
00011614                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011614 4A68 0034                  		tst.w	$34(a0)
00011618 6600                       		bne.s	loc_10FC0
0001161A 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011620 6600                       		bne.s	locret_10FBE
00011622 317C 001E 0034             		move.w	#$1E,$34(a0)
00011628                            
00011628                            locret_10FBE:
00011628 4E75                       		rts	
0001162A                            ; ===========================================================================
0001162A                            
0001162A                            loc_10FC0:
0001162A 5368 0034                  		subq.w	#1,$34(a0)
0001162E 66F8                       		bne.s	locret_10FBE
00011630 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011634 4E75                       		rts	
00011636                            ; ===========================================================================
00011636                            
00011636                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011636 4A68 0034                  		tst.w	$34(a0)
0001163A 6600                       		bne.s	loc_10FE0
0001163C 4A28 0036                  		tst.b	$36(a0)
00011640 6A00                       		bpl.s	locret_10FDE
00011642 317C 003C 0034             		move.w	#$3C,$34(a0)
00011648                            
00011648                            locret_10FDE:
00011648 4E75                       		rts	
0001164A                            ; ===========================================================================
0001164A                            
0001164A                            loc_10FE0:
0001164A 5368 0034                  		subq.w	#1,$34(a0)
0001164E 6600                       		bne.s	loc_10FEC
00011650 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011654 4E75                       		rts	
00011656                            ; ===========================================================================
00011656                            
00011656                            loc_10FEC:
00011656 43E8 0038                  		lea	$38(a0),a1
0001165A 3028 0034                  		move.w	$34(a0),d0
0001165E E408                       		lsr.b	#2,d0
00011660 0200 0001                  		andi.b	#1,d0
00011664 12C0                       		move.b	d0,(a1)+
00011666 0A00 0001                  		eori.b	#1,d0
0001166A 12C0                       		move.b	d0,(a1)+
0001166C 0A00 0001                  		eori.b	#1,d0
00011670 12C0                       		move.b	d0,(a1)+
00011672 0A00 0001                  		eori.b	#1,d0
00011676 12C0                       		move.b	d0,(a1)+
00011678 4E75                       		rts	
0001167A                            ; ===========================================================================
0001167A                            
0001167A                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001167A 43E8 0038                  		lea	$38(a0),a1
0001167E 0C11 0080                  		cmpi.b	#$80,(a1)
00011682 6700                       		beq.s	locret_11038
00011684 5211                       		addq.b	#1,(a1)
00011686 7200                       		moveq	#0,d1
00011688 1219                       		move.b	(a1)+,d1
0001168A 4841                       		swap	d1
0001168C E289                       		lsr.l	#1,d1
0001168E 2401                       		move.l	d1,d2
00011690 E289                       		lsr.l	#1,d1
00011692 2601                       		move.l	d1,d3
00011694 D682                       		add.l	d2,d3
00011696 4841                       		swap	d1
00011698 4842                       		swap	d2
0001169A 4843                       		swap	d3
0001169C 12C3                       		move.b	d3,(a1)+
0001169E 12C2                       		move.b	d2,(a1)+
000116A0 12C1                       		move.b	d1,(a1)+
000116A2                            
000116A2                            locret_11038:
000116A2 4E75                       		rts	
000116A4 4E75                       		rts	
000116A6                            ; ===========================================================================
000116A6                            ; ---------------------------------------------------------------------------
000116A6                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000116A6                            ; ---------------------------------------------------------------------------
000116A6                            Map_obj5B:
000116A6                            	include "_maps\obj5B.asm"
000116A6                            ; ---------------------------------------------------------------------------
000116A6                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000116A6                            ; ---------------------------------------------------------------------------
000116A6 0000                       		dc.w byte_1103E-Map_obj5B
000116A8 01                         byte_1103E:	dc.b 1
000116A9 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000116AE                            		even
000116AE                            		even
000116AE                            
000116AE                            ; ===========================================================================
000116AE                            ; ---------------------------------------------------------------------------
000116AE                            ; Object 5C - metal girders in foreground (SLZ)
000116AE                            ; ---------------------------------------------------------------------------
000116AE                            
000116AE                            Obj5C:					; XREF: Obj_Index
000116AE 7000                       		moveq	#0,d0
000116B0 1028 0024                  		move.b	$24(a0),d0
000116B4 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000116B8 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000116BC                            ; ===========================================================================
000116BC 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000116BE 0000                       		dc.w Obj5C_Display-Obj5C_Index
000116C0                            ; ===========================================================================
000116C0                            
000116C0                            Obj5C_Main:				; XREF: Obj5C_Index
000116C0 5428 0024                  		addq.b	#2,$24(a0)
000116C4 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000116CC 317C 83CC 0002             		move.w	#$83CC,2(a0)
000116D2 117C 0010 0019             		move.b	#$10,$19(a0)
000116D8                            
000116D8                            Obj5C_Display:				; XREF: Obj5C_Index
000116D8 2238 F700                  		move.l	($FFFFF700).w,d1
000116DC D281                       		add.l	d1,d1
000116DE 4841                       		swap	d1
000116E0 4441                       		neg.w	d1
000116E2 3141 0008                  		move.w	d1,8(a0)
000116E6 2238 F704                  		move.l	($FFFFF704).w,d1
000116EA D281                       		add.l	d1,d1
000116EC 4841                       		swap	d1
000116EE 0241 003F                  		andi.w	#$3F,d1
000116F2 4441                       		neg.w	d1
000116F4 0641 0100                  		addi.w	#$100,d1
000116F8 3141 000A                  		move.w	d1,$A(a0)
000116FC 6000 C586                  		bra.w	DisplaySprite
00011700                            ; ===========================================================================
00011700                            ; ---------------------------------------------------------------------------
00011700                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011700                            ; ---------------------------------------------------------------------------
00011700                            Map_obj5C:
00011700                            	include "_maps\obj5C.asm"
00011700                            ; ---------------------------------------------------------------------------
00011700                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011700                            ; ---------------------------------------------------------------------------
00011700 0000                       		dc.w byte_11098-Map_obj5C
00011702 09                         byte_11098:	dc.b 9
00011703 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011708 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001170D C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011712 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011717 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001171C 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011721 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011726 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001172B 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011730                            		even
00011730                            		even
00011730                            
00011730                            ; ===========================================================================
00011730                            ; ---------------------------------------------------------------------------
00011730                            ; Object 1B - water surface (LZ)
00011730                            ; ---------------------------------------------------------------------------
00011730                            
00011730                            Obj1B:					; XREF: Obj_Index
00011730 7000                       		moveq	#0,d0
00011732 1028 0024                  		move.b	$24(a0),d0
00011736 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001173A 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001173E                            ; ===========================================================================
0001173E 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011740 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011742                            ; ===========================================================================
00011742                            
00011742                            Obj1B_Main:				; XREF: Obj1B_Index
00011742 5428 0024                  		addq.b	#2,$24(a0)
00011746 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001174E 317C C300 0002             		move.w	#$C300,2(a0)
00011754 117C 0004 0001             		move.b	#4,1(a0)
0001175A 117C 0080 0019             		move.b	#$80,$19(a0)
00011760 3168 0008 0030             		move.w	8(a0),$30(a0)
00011766                            
00011766                            Obj1B_Action:				; XREF: Obj1B_Index
00011766 3238 F700                  		move.w	($FFFFF700).w,d1
0001176A 0241 FFE0                  		andi.w	#$FFE0,d1
0001176E D268 0030                  		add.w	$30(a0),d1
00011772 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011778 6700                       		beq.s	loc_11114
0001177A 0641 0020                  		addi.w	#$20,d1
0001177E                            
0001177E                            loc_11114:
0001177E 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011782 3238 F646                  		move.w	($FFFFF646).w,d1
00011786 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0001178A 4A28 0032                  		tst.b	$32(a0)
0001178E 6600                       		bne.s	Obj1B_Animate
00011790 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011796 6700                       		beq.s	loc_1114A	; if not, branch
00011798 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
0001179C 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000117A2 6000                       		bra.s	Obj1B_Display
000117A4                            ; ===========================================================================
000117A4                            
000117A4                            Obj1B_Animate:				; XREF: loc_11114
000117A4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000117A8 6600                       		bne.s	Obj1B_Display	; if yes, branch
000117AA 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000117B0 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000117B4                            
000117B4                            loc_1114A:				; XREF: loc_11114
000117B4 5328 001E                  		subq.b	#1,$1E(a0)
000117B8 6A00                       		bpl.s	Obj1B_Display
000117BA 117C 0007 001E             		move.b	#7,$1E(a0)
000117C0 5228 001A                  		addq.b	#1,$1A(a0)
000117C4 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000117CA 6500                       		bcs.s	Obj1B_Display
000117CC 117C 0000 001A             		move.b	#0,$1A(a0)
000117D2                            
000117D2                            Obj1B_Display:
000117D2 6000 C4B0                  		bra.w	DisplaySprite
000117D6                            ; ===========================================================================
000117D6                            ; ---------------------------------------------------------------------------
000117D6                            ; Sprite mappings - water surface (LZ)
000117D6                            ; ---------------------------------------------------------------------------
000117D6                            Map_obj1B:
000117D6                            	include "_maps\obj1B.asm"
000117D6                            ; ---------------------------------------------------------------------------
000117D6                            ; Sprite mappings - water surface (LZ)
000117D6                            ; ---------------------------------------------------------------------------
000117D6 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000117DA 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000117DE 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000117E2 03                         byte_11178:	dc.b 3
000117E3 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000117E8 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000117ED FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000117F2 03                         byte_11188:	dc.b 3
000117F3 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000117F8 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000117FD FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011802 03                         byte_11198:	dc.b 3
00011803 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011808 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001180D FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011812 06                         byte_111A8:	dc.b 6
00011813 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011818 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0001181D FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011822 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011827 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001182C FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011831 06                         byte_111C7:	dc.b 6
00011832 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011837 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001183C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011841 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011846 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001184B FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011850 06                         byte_111E6:	dc.b 6
00011851 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011856 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001185B FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011860 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011865 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001186A FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011870 00                         		even
00011870 00                         		even
00011870                            
00011870                            ; ===========================================================================
00011870                            ; ---------------------------------------------------------------------------
00011870                            ; Object 0B - pole that	breaks (LZ)
00011870                            ; ---------------------------------------------------------------------------
00011870                            
00011870                            Obj0B:					; XREF: Obj_Index
00011870 7000                       		moveq	#0,d0
00011872 1028 0024                  		move.b	$24(a0),d0
00011876 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001187A 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0001187E                            ; ===========================================================================
0001187E 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011880 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011882 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011884                            ; ===========================================================================
00011884                            
00011884                            Obj0B_Main:				; XREF: Obj0B_Index
00011884 5428 0024                  		addq.b	#2,$24(a0)
00011888 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011890 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011896 117C 0004 0001             		move.b	#4,1(a0)
0001189C 117C 0008 0019             		move.b	#8,$19(a0)
000118A2 117C 0004 0018             		move.b	#4,$18(a0)
000118A8 117C 00E1 0020             		move.b	#$E1,$20(a0)
000118AE 7000                       		moveq	#0,d0
000118B0 1028 0028                  		move.b	$28(a0),d0	; get object type
000118B4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000118B8 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000118BC                            
000118BC                            Obj0B_Action:				; XREF: Obj0B_Index
000118BC 4A28 0032                  		tst.b	$32(a0)
000118C0 6700                       		beq.s	Obj0B_Grab
000118C2 4A68 0030                  		tst.w	$30(a0)
000118C6 6700                       		beq.s	Obj0B_MoveUp
000118C8 5368 0030                  		subq.w	#1,$30(a0)
000118CC 6600                       		bne.s	Obj0B_MoveUp
000118CE 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000118D4 6000                       		bra.s	Obj0B_Release
000118D6                            ; ===========================================================================
000118D6                            
000118D6                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000118D6 43F8 D000                  		lea	($FFFFD000).w,a1
000118DA 3028 000C                  		move.w	$C(a0),d0
000118DE 0440 0018                  		subi.w	#$18,d0
000118E2 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000118E8 6700                       		beq.s	Obj0B_MoveDown
000118EA 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000118EE B069 000C                  		cmp.w	$C(a1),d0
000118F2 6500                       		bcs.s	Obj0B_MoveDown
000118F4 3340 000C                  		move.w	d0,$C(a1)
000118F8                            
000118F8                            Obj0B_MoveDown:
000118F8 0640 0024                  		addi.w	#$24,d0
000118FC 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011902 6700                       		beq.s	Obj0B_LetGo
00011904 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011908 B069 000C                  		cmp.w	$C(a1),d0
0001190C 6400                       		bcc.s	Obj0B_LetGo
0001190E 3340 000C                  		move.w	d0,$C(a1)
00011912                            
00011912                            Obj0B_LetGo:
00011912 1038 F603                  		move.b	($FFFFF603).w,d0
00011916 0240 0070                  		andi.w	#$70,d0
0001191A 6700                       		beq.s	Obj0B_Display
0001191C                            
0001191C                            Obj0B_Release:				; XREF: Obj0B_Action
0001191C 4228 0020                  		clr.b	$20(a0)
00011920 5428 0024                  		addq.b	#2,$24(a0)
00011924 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011928 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001192C 4228 0032                  		clr.b	$32(a0)
00011930 6000                       		bra.s	Obj0B_Display
00011932                            ; ===========================================================================
00011932                            
00011932                            Obj0B_Grab:				; XREF: Obj0B_Action
00011932 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011936 6700                       		beq.s	Obj0B_Display	; if not, branch
00011938 43F8 D000                  		lea	($FFFFD000).w,a1
0001193C 3028 0008                  		move.w	8(a0),d0
00011940 0640 0014                  		addi.w	#$14,d0
00011944 B069 0008                  		cmp.w	8(a1),d0
00011948 6400                       		bcc.s	Obj0B_Display
0001194A 4228 0021                  		clr.b	$21(a0)
0001194E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011954 6400                       		bcc.s	Obj0B_Display
00011956 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
0001195A 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
0001195E 3028 0008                  		move.w	8(a0),d0
00011962 0640 0014                  		addi.w	#$14,d0
00011966 3340 0008                  		move.w	d0,8(a1)
0001196A 08A9 0000 0022             		bclr	#0,$22(a1)
00011970 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011976 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001197C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011982 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011988                            
00011988                            Obj0B_Display:				; XREF: Obj0B_Index
00011988 6000 E3A2                  		bra.w	MarkObjGone
0001198C                            ; ===========================================================================
0001198C                            ; ---------------------------------------------------------------------------
0001198C                            ; Sprite mappings - pole that breaks (LZ)
0001198C                            ; ---------------------------------------------------------------------------
0001198C                            Map_obj0B:
0001198C                            	include "_maps\obj0B.asm"
0001198C                            ; ---------------------------------------------------------------------------
0001198C                            ; Sprite mappings - pole that breaks (LZ)
0001198C                            ; ---------------------------------------------------------------------------
0001198C 0000                       		dc.w byte_11326-Map_obj0B
0001198E 0000                       		dc.w byte_11331-Map_obj0B
00011990 02                         byte_11326:	dc.b 2			; normal pole
00011991 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011996 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001199B 04                         byte_11331:	dc.b 4			; broken pole
0001199C E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000119A1 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000119A6 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000119AB 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000119B0                            		even
000119B0                            		even
000119B0                            
000119B0                            ; ===========================================================================
000119B0                            ; ---------------------------------------------------------------------------
000119B0                            ; Object 0C - flapping door (LZ)
000119B0                            ; ---------------------------------------------------------------------------
000119B0                            
000119B0                            Obj0C:					; XREF: Obj_Index
000119B0 7000                       		moveq	#0,d0
000119B2 1028 0024                  		move.b	$24(a0),d0
000119B6 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000119BA 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000119BE                            ; ===========================================================================
000119BE 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000119C0 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000119C2                            ; ===========================================================================
000119C2                            
000119C2                            Obj0C_Main:				; XREF: Obj0C_Index
000119C2 5428 0024                  		addq.b	#2,$24(a0)
000119C6 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000119CE 317C 4328 0002             		move.w	#$4328,2(a0)
000119D4 0028 0004 0001             		ori.b	#4,1(a0)
000119DA 117C 0028 0019             		move.b	#$28,$19(a0)
000119E0 7000                       		moveq	#0,d0
000119E2 1028 0028                  		move.b	$28(a0),d0	; get object type
000119E6 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000119EA 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000119EE                            
000119EE                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000119EE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000119F2 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000119F4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000119FA 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011A00 4A28 0001                  		tst.b	1(a0)
00011A04 6A00                       		bpl.s	Obj0C_Solid
00011A06 303C 00BB                  		move.w	#$BB,d0
00011A0A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00011A10                            
00011A10                            Obj0C_Solid:
00011A10 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011A16 6100 932C                  		bsr.w	AnimateSprite
00011A1A 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011A1E 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011A22 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011A24 3038 D008                  		move.w	($FFFFD008).w,d0
00011A28 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011A2C 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011A2E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011A34 323C 0013                  		move.w	#$13,d1
00011A38 343C 0020                  		move.w	#$20,d2
00011A3C 3602                       		move.w	d2,d3
00011A3E 5243                       		addq.w	#1,d3
00011A40 3828 0008                  		move.w	8(a0),d4
00011A44 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011A48                            
00011A48                            Obj0C_Display:
00011A48 6000 E2E2                  		bra.w	MarkObjGone
00011A4C                            ; ===========================================================================
00011A4C                            Ani_obj0C:
00011A4C                            	include "_anim\obj0C.asm"
00011A4C                            ; ---------------------------------------------------------------------------
00011A4C                            ; Animation script - flapping door (LZ)
00011A4C                            ; ---------------------------------------------------------------------------
00011A4C 0000                       		dc.w byte_113E6-Ani_obj0C
00011A4E 0000                       		dc.w byte_113EC-Ani_obj0C
00011A50 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011A56 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011A5C                            		even
00011A5C                            		even
00011A5C                            
00011A5C                            ; ---------------------------------------------------------------------------
00011A5C                            ; Sprite mappings - flapping door (LZ)
00011A5C                            ; ---------------------------------------------------------------------------
00011A5C                            Map_obj0C:
00011A5C                            	include "_maps\obj0C.asm"
00011A5C                            ; ---------------------------------------------------------------------------
00011A5C                            ; Sprite mappings - flapping door (LZ)
00011A5C                            ; ---------------------------------------------------------------------------
00011A5C 0000                       		dc.w byte_113F8-Map_obj0C
00011A5E 0000                       		dc.w byte_11403-Map_obj0C
00011A60 0000                       		dc.w byte_1140E-Map_obj0C
00011A62 02                         byte_113F8:	dc.b 2
00011A63 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011A68 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011A6D 02                         byte_11403:	dc.b 2
00011A6E DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011A73 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011A78 02                         byte_1140E:	dc.b 2
00011A79 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011A7E 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011A84 00                         		even
00011A84 00                         		even
00011A84                            
00011A84                            ; ===========================================================================
00011A84                            ; ---------------------------------------------------------------------------
00011A84                            ; Object 71 - invisible	solid blocks
00011A84                            ; ---------------------------------------------------------------------------
00011A84                            
00011A84                            Obj71:					; XREF: Obj_Index
00011A84 7000                       		moveq	#0,d0
00011A86 1028 0024                  		move.b	$24(a0),d0
00011A8A 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011A8E 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011A92                            ; ===========================================================================
00011A92 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011A94 0000                       		dc.w Obj71_Solid-Obj71_Index
00011A96                            ; ===========================================================================
00011A96                            
00011A96                            Obj71_Main:				; XREF: Obj71_Index
00011A96 5428 0024                  		addq.b	#2,$24(a0)
00011A9A 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011AA2 317C 8680 0002             		move.w	#$8680,2(a0)
00011AA8 0028 0004 0001             		ori.b	#4,1(a0)
00011AAE 1028 0028                  		move.b	$28(a0),d0	; get object type
00011AB2 1200                       		move.b	d0,d1
00011AB4 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011AB8 0640 0010                  		addi.w	#$10,d0
00011ABC E248                       		lsr.w	#1,d0
00011ABE 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011AC2 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011AC6 5241                       		addq.w	#1,d1
00011AC8 E749                       		lsl.w	#3,d1
00011ACA 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011ACE                            
00011ACE                            Obj71_Solid:				; XREF: Obj71_Index
00011ACE 6100 C42E                  		bsr.w	ChkObjOnScreen
00011AD2 6600                       		bne.s	Obj71_ChkDel
00011AD4 7200                       		moveq	#0,d1
00011AD6 1228 0019                  		move.b	$19(a0),d1
00011ADA 0641 000B                  		addi.w	#$B,d1
00011ADE 7400                       		moveq	#0,d2
00011AE0 1428 0016                  		move.b	$16(a0),d2
00011AE4 3602                       		move.w	d2,d3
00011AE6 5243                       		addq.w	#1,d3
00011AE8 3828 0008                  		move.w	8(a0),d4
00011AEC 6100 E5A8                  		bsr.w	SolidObject71
00011AF0                            
00011AF0                            Obj71_ChkDel:
00011AF0 3028 0008                  		move.w	8(a0),d0
00011AF4 0240 FF80                  		andi.w	#$FF80,d0
00011AF8 3238 F700                  		move.w	($FFFFF700).w,d1
00011AFC 0441 0080                  		subi.w	#$80,d1
00011B00 0241 FF80                  		andi.w	#$FF80,d1
00011B04 9041                       		sub.w	d1,d0
00011B06 0C40 0280                  		cmpi.w	#$280,d0
00011B0A 6200                       		bhi.s	Obj71_Delete
00011B0C 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011B10 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011B12 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011B16                            ; ===========================================================================
00011B16                            
00011B16                            Obj71_NoDisplay:
00011B16 4E75                       		rts	
00011B18                            ; ===========================================================================
00011B18                            
00011B18                            Obj71_Delete:
00011B18 4EFA C1A6                  		jmp	DeleteObject
00011B1C                            ; ===========================================================================
00011B1C                            ; ---------------------------------------------------------------------------
00011B1C                            ; Sprite mappings - invisible solid blocks
00011B1C                            ; ---------------------------------------------------------------------------
00011B1C                            Map_obj71:
00011B1C                            	include "_maps\obj71.asm"
00011B1C                            ; ---------------------------------------------------------------------------
00011B1C                            ; Sprite mappings - invisible solid blocks
00011B1C                            ; ---------------------------------------------------------------------------
00011B1C 0000                       		dc.w byte_114BC-Map_obj71
00011B1E 0000                       		dc.w byte_114D1-Map_obj71
00011B20 0000                       		dc.w byte_114E6-Map_obj71
00011B22 04                         byte_114BC:	dc.b 4
00011B23 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011B28 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011B2D 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011B32 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011B37 04                         byte_114D1:	dc.b 4
00011B38 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011B3D E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011B42 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011B47 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011B4C 04                         byte_114E6:	dc.b 4
00011B4D E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011B52 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011B57 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011B5C 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011B62 00                         		even
00011B62 00                         		even
00011B62                            
00011B62                            ; ===========================================================================
00011B62                            ; ---------------------------------------------------------------------------
00011B62                            ; Object 5D - fans (SLZ)
00011B62                            ; ---------------------------------------------------------------------------
00011B62                            
00011B62                            Obj5D:					; XREF: Obj_Index
00011B62 7000                       		moveq	#0,d0
00011B64 1028 0024                  		move.b	$24(a0),d0
00011B68 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011B6C 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011B70                            ; ===========================================================================
00011B70 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011B72 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011B74                            ; ===========================================================================
00011B74                            
00011B74                            Obj5D_Main:				; XREF: Obj5D_Index
00011B74 5428 0024                  		addq.b	#2,$24(a0)
00011B78 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011B80 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011B86 0028 0004 0001             		ori.b	#4,1(a0)
00011B8C 117C 0010 0019             		move.b	#$10,$19(a0)
00011B92 117C 0004 0018             		move.b	#4,$18(a0)
00011B98                            
00011B98                            Obj5D_Delay:				; XREF: Obj5D_Index
00011B98 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011B9E 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011BA0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011BA4 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011BA6 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011BAC 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011BB2 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011BB4 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011BBA                            
00011BBA                            Obj5D_Blow:
00011BBA 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011BBE 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011BC2 43F8 D000                  		lea	($FFFFD000).w,a1
00011BC6 3029 0008                  		move.w	8(a1),d0
00011BCA 9068 0008                  		sub.w	8(a0),d0
00011BCE 0828 0000 0022             		btst	#0,$22(a0)
00011BD4 6600                       		bne.s	Obj5D_ChkSonic
00011BD6 4440                       		neg.w	d0
00011BD8                            
00011BD8                            Obj5D_ChkSonic:
00011BD8 0640 0050                  		addi.w	#$50,d0
00011BDC 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011BE0 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011BE2 3229 000C                  		move.w	$C(a1),d1
00011BE6 0641 0060                  		addi.w	#$60,d1
00011BEA 9268 000C                  		sub.w	$C(a0),d1
00011BEE 6500                       		bcs.s	Obj5D_Animate
00011BF0 0C41 0070                  		cmpi.w	#$70,d1
00011BF4 6400                       		bcc.s	Obj5D_Animate
00011BF6 0440 0050                  		subi.w	#$50,d0
00011BFA 6400                       		bcc.s	loc_1159A
00011BFC 4640                       		not.w	d0
00011BFE D040                       		add.w	d0,d0
00011C00                            
00011C00                            loc_1159A:
00011C00 0640 0060                  		addi.w	#$60,d0
00011C04 0828 0000 0022             		btst	#0,$22(a0)
00011C0A 6600                       		bne.s	loc_115A8
00011C0C 4440                       		neg.w	d0
00011C0E                            
00011C0E                            loc_115A8:
00011C0E 4400                       		neg.b	d0
00011C10 E840                       		asr.w	#4,d0
00011C12 0828 0000 0028             		btst	#0,$28(a0)
00011C18 6700                       		beq.s	Obj5D_MoveSonic
00011C1A 4440                       		neg.w	d0
00011C1C                            
00011C1C                            Obj5D_MoveSonic:
00011C1C D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011C20                            
00011C20                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011C20 5328 001E                  		subq.b	#1,$1E(a0)
00011C24 6A00                       		bpl.s	Obj5D_ChkDel
00011C26 117C 0000 001E             		move.b	#0,$1E(a0)
00011C2C 5228 001B                  		addq.b	#1,$1B(a0)
00011C30 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011C36 6500                       		bcs.s	loc_115D8
00011C38 117C 0000 001B             		move.b	#0,$1B(a0)
00011C3E                            
00011C3E                            loc_115D8:
00011C3E 7000                       		moveq	#0,d0
00011C40 0828 0000 0028             		btst	#0,$28(a0)
00011C46 6700                       		beq.s	loc_115E4
00011C48 7002                       		moveq	#2,d0
00011C4A                            
00011C4A                            loc_115E4:
00011C4A D028 001B                  		add.b	$1B(a0),d0
00011C4E 1140 001A                  		move.b	d0,$1A(a0)
00011C52                            
00011C52                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011C52 6100 C030                  		bsr.w	DisplaySprite
00011C56 3028 0008                  		move.w	8(a0),d0
00011C5A 0240 FF80                  		andi.w	#$FF80,d0
00011C5E 3238 F700                  		move.w	($FFFFF700).w,d1
00011C62 0441 0080                  		subi.w	#$80,d1
00011C66 0241 FF80                  		andi.w	#$FF80,d1
00011C6A 9041                       		sub.w	d1,d0
00011C6C 0C40 0280                  		cmpi.w	#$280,d0
00011C70 6200 C04E                  		bhi.w	DeleteObject
00011C74 4E75                       		rts	
00011C76                            ; ===========================================================================
00011C76                            ; ---------------------------------------------------------------------------
00011C76                            ; Sprite mappings - fans (SLZ)
00011C76                            ; ---------------------------------------------------------------------------
00011C76                            Map_obj5D:
00011C76                            	include "_maps\obj5D.asm"
00011C76                            ; ---------------------------------------------------------------------------
00011C76                            ; Sprite mappings - fans (SLZ)
00011C76                            ; ---------------------------------------------------------------------------
00011C76 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011C7A 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011C7E 0000                       		dc.w byte_1161A-Map_obj5D
00011C80 02                         byte_1161A:	dc.b 2
00011C81 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011C86 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011C8B 02                         byte_11625:	dc.b 2
00011C8C F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011C91 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011C96 02                         byte_11630:	dc.b 2
00011C97 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011C9C 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011CA2 00                         		even
00011CA2 00                         		even
00011CA2                            
00011CA2                            ; ===========================================================================
00011CA2                            ; ---------------------------------------------------------------------------
00011CA2                            ; Object 5E - seesaws (SLZ)
00011CA2                            ; ---------------------------------------------------------------------------
00011CA2                            
00011CA2                            Obj5E:					; XREF: Obj_Index
00011CA2 7000                       		moveq	#0,d0
00011CA4 1028 0024                  		move.b	$24(a0),d0
00011CA8 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011CAC 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011CB0 3028 0030                  		move.w	$30(a0),d0
00011CB4 0240 FF80                  		andi.w	#$FF80,d0
00011CB8 3238 F700                  		move.w	($FFFFF700).w,d1
00011CBC 0441 0080                  		subi.w	#$80,d1
00011CC0 0241 FF80                  		andi.w	#$FF80,d1
00011CC4 9041                       		sub.w	d1,d0
00011CC6 6B00 BFF8                  		bmi.w	DeleteObject
00011CCA 0C40 0280                  		cmpi.w	#$280,d0
00011CCE 6200 BFF0                  		bhi.w	DeleteObject
00011CD2 6000 BFB0                  		bra.w	DisplaySprite
00011CD6                            ; ===========================================================================
00011CD6 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011CD8 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011CDA 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011CDC 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011CDE 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011CE0 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011CE2                            ; ===========================================================================
00011CE2                            
00011CE2                            Obj5E_Main:				; XREF: Obj5E_Index
00011CE2 5428 0024                  		addq.b	#2,$24(a0)
00011CE6 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011CEE 317C 0374 0002             		move.w	#$374,2(a0)
00011CF4 0028 0004 0001             		ori.b	#4,1(a0)
00011CFA 117C 0004 0018             		move.b	#4,$18(a0)
00011D00 117C 0030 0019             		move.b	#$30,$19(a0)
00011D06 3168 0008 0030             		move.w	8(a0),$30(a0)
00011D0C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011D10 6600                       		bne.s	loc_116D2	; if not, branch
00011D12 6100 C40C                  		bsr.w	SingleObjLoad2
00011D16 6600                       		bne.s	loc_116D2
00011D18 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011D1C 5C29 0024                  		addq.b	#6,$24(a1)
00011D20 3368 0008 0008             		move.w	8(a0),8(a1)
00011D26 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011D2C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011D32 2348 003C                  		move.l	a0,$3C(a1)
00011D36                            
00011D36                            loc_116D2:
00011D36 0828 0000 0022             		btst	#0,$22(a0)
00011D3C 6700                       		beq.s	loc_116E0
00011D3E 117C 0002 001A             		move.b	#2,$1A(a0)
00011D44                            
00011D44                            loc_116E0:
00011D44 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011D4A                            
00011D4A                            Obj5E_Slope:				; XREF: Obj5E_Index
00011D4A 1228 003A                  		move.b	$3A(a0),d1
00011D4E 6100 0000                  		bsr.w	loc_11766
00011D52 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011D58 0828 0000 001A             		btst	#0,$1A(a0)
00011D5E 6700                       		beq.s	loc_11702
00011D60 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011D66                            
00011D66                            loc_11702:
00011D66 43F8 D000                  		lea	($FFFFD000).w,a1
00011D6A 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011D70 323C 0030                  		move.w	#$30,d1
00011D74 4EB9 0000 7A74             		jsr	(SlopeObject).l
00011D7A 4E75                       		rts	
00011D7C                            ; ===========================================================================
00011D7C                            
00011D7C                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011D7C 6100 0000                  		bsr.w	loc_1174A
00011D80 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011D86 0828 0000 001A             		btst	#0,$1A(a0)
00011D8C 6700                       		beq.s	loc_11730
00011D8E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011D94                            
00011D94                            loc_11730:
00011D94 323C 0030                  		move.w	#$30,d1
00011D98 4EB9 0000 7B14             		jsr	(ExitPlatform).l
00011D9E 323C 0030                  		move.w	#$30,d1
00011DA2 3428 0008                  		move.w	8(a0),d2
00011DA6 4EB9 0000 8A72             		jsr	SlopeObject2
00011DAC 4E75                       		rts	
00011DAE                            ; ===========================================================================
00011DAE                            
00011DAE                            loc_1174A:				; XREF: Obj5E_Slope2
00011DAE 7202                       		moveq	#2,d1
00011DB0 43F8 D000                  		lea	($FFFFD000).w,a1
00011DB4 3028 0008                  		move.w	8(a0),d0
00011DB8 9069 0008                  		sub.w	8(a1),d0
00011DBC 6400                       		bcc.s	loc_1175E
00011DBE 4440                       		neg.w	d0
00011DC0 7200                       		moveq	#0,d1
00011DC2                            
00011DC2                            loc_1175E:
00011DC2 0C40 0008                  		cmpi.w	#8,d0
00011DC6 6400                       		bcc.s	loc_11766
00011DC8 7201                       		moveq	#1,d1
00011DCA                            
00011DCA                            loc_11766:
00011DCA 1028 001A                  		move.b	$1A(a0),d0
00011DCE B001                       		cmp.b	d1,d0
00011DD0 6700                       		beq.s	locret_11790
00011DD2 6400                       		bcc.s	loc_11772
00011DD4 5400                       		addq.b	#2,d0
00011DD6                            
00011DD6                            loc_11772:
00011DD6 5300                       		subq.b	#1,d0
00011DD8 1140 001A                  		move.b	d0,$1A(a0)
00011DDC 1141 003A                  		move.b	d1,$3A(a0)
00011DE0 08A8 0000 0001             		bclr	#0,1(a0)
00011DE6 0828 0001 001A             		btst	#1,$1A(a0)
00011DEC 6700                       		beq.s	locret_11790
00011DEE 08E8 0000 0001             		bset	#0,1(a0)
00011DF4                            
00011DF4                            locret_11790:
00011DF4 4E75                       		rts	
00011DF6                            ; ===========================================================================
00011DF6                            
00011DF6                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011DF6 5428 0024                  		addq.b	#2,$24(a0)
00011DFA 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011E02 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011E08 0028 0004 0001             		ori.b	#4,1(a0)
00011E0E 117C 0004 0018             		move.b	#4,$18(a0)
00011E14 117C 008B 0020             		move.b	#$8B,$20(a0)
00011E1A 117C 000C 0019             		move.b	#$C,$19(a0)
00011E20 3168 0008 0030             		move.w	8(a0),$30(a0)
00011E26 0668 0028 0008             		addi.w	#$28,8(a0)
00011E2C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011E32 117C 0001 001A             		move.b	#1,$1A(a0)
00011E38 0828 0000 0022             		btst	#0,$22(a0)
00011E3E 6700                       		beq.s	Obj5E_MoveSpike
00011E40 0468 0050 0008             		subi.w	#$50,8(a0)
00011E46 117C 0002 003A             		move.b	#2,$3A(a0)
00011E4C                            
00011E4C                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011E4C 2268 003C                  		movea.l	$3C(a0),a1
00011E50 7000                       		moveq	#0,d0
00011E52 1028 003A                  		move.b	$3A(a0),d0
00011E56 9029 003A                  		sub.b	$3A(a1),d0
00011E5A 6700                       		beq.s	loc_1183E
00011E5C 6400                       		bcc.s	loc_117FC
00011E5E 4400                       		neg.b	d0
00011E60                            
00011E60                            loc_117FC:
00011E60 323C F7E8                  		move.w	#-$818,d1
00011E64 343C FEEC                  		move.w	#-$114,d2
00011E68 0C00 0001                  		cmpi.b	#1,d0
00011E6C 6700                       		beq.s	loc_11822
00011E6E 323C F510                  		move.w	#-$AF0,d1
00011E72 343C FF34                  		move.w	#-$CC,d2
00011E76 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011E7C 6D00                       		blt.s	loc_11822
00011E7E 323C F200                  		move.w	#-$E00,d1
00011E82 343C FF60                  		move.w	#-$A0,d2
00011E86                            
00011E86                            loc_11822:
00011E86 3141 0012                  		move.w	d1,$12(a0)
00011E8A 3142 0010                  		move.w	d2,$10(a0)
00011E8E 3028 0008                  		move.w	8(a0),d0
00011E92 9068 0030                  		sub.w	$30(a0),d0
00011E96 6400                       		bcc.s	loc_11838
00011E98 4468 0010                  		neg.w	$10(a0)
00011E9C                            
00011E9C                            loc_11838:
00011E9C 5428 0024                  		addq.b	#2,$24(a0)
00011EA0 6000                       		bra.s	Obj5E_SpikeFall
00011EA2                            ; ===========================================================================
00011EA2                            
00011EA2                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011EA2 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011EA8 7000                       		moveq	#0,d0
00011EAA 1029 001A                  		move.b	$1A(a1),d0
00011EAE 343C 0028                  		move.w	#$28,d2
00011EB2 3228 0008                  		move.w	8(a0),d1
00011EB6 9268 0030                  		sub.w	$30(a0),d1
00011EBA 6400                       		bcc.s	loc_1185C
00011EBC 4442                       		neg.w	d2
00011EBE 5440                       		addq.w	#2,d0
00011EC0                            
00011EC0                            loc_1185C:
00011EC0 D040                       		add.w	d0,d0
00011EC2 3228 0034                  		move.w	$34(a0),d1
00011EC6 D272 0000                  		add.w	(a2,d0.w),d1
00011ECA 3141 000C                  		move.w	d1,$C(a0)
00011ECE D468 0030                  		add.w	$30(a0),d2
00011ED2 3142 0008                  		move.w	d2,8(a0)
00011ED6 4268 000E                  		clr.w	$E(a0)
00011EDA 4268 000A                  		clr.w	$A(a0)
00011EDE 4E75                       		rts	
00011EE0                            ; ===========================================================================
00011EE0                            
00011EE0                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011EE0 4A68 0012                  		tst.w	$12(a0)
00011EE4 6A00                       		bpl.s	loc_1189A
00011EE6 6100 BD4A                  		bsr.w	ObjectFall
00011EEA 3028 0034                  		move.w	$34(a0),d0
00011EEE 0440 002F                  		subi.w	#$2F,d0
00011EF2 B068 000C                  		cmp.w	$C(a0),d0
00011EF6 6E00                       		bgt.s	locret_11898
00011EF8 6100 BD38                  		bsr.w	ObjectFall
00011EFC                            
00011EFC                            locret_11898:
00011EFC 4E75                       		rts	
00011EFE                            ; ===========================================================================
00011EFE                            
00011EFE                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011EFE 6100 BD32                  		bsr.w	ObjectFall
00011F02 2268 003C                  		movea.l	$3C(a0),a1
00011F06 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011F0C 7000                       		moveq	#0,d0
00011F0E 1029 001A                  		move.b	$1A(a1),d0
00011F12 3228 0008                  		move.w	8(a0),d1
00011F16 9268 0030                  		sub.w	$30(a0),d1
00011F1A 6400                       		bcc.s	loc_118BA
00011F1C 5440                       		addq.w	#2,d0
00011F1E                            
00011F1E                            loc_118BA:
00011F1E D040                       		add.w	d0,d0
00011F20 3228 0034                  		move.w	$34(a0),d1
00011F24 D272 0000                  		add.w	(a2,d0.w),d1
00011F28 B268 000C                  		cmp.w	$C(a0),d1
00011F2C 6E00                       		bgt.s	locret_11938
00011F2E 2268 003C                  		movea.l	$3C(a0),a1
00011F32 7202                       		moveq	#2,d1
00011F34 4A68 0010                  		tst.w	$10(a0)
00011F38 6B00                       		bmi.s	Obj5E_Spring
00011F3A 7200                       		moveq	#0,d1
00011F3C                            
00011F3C                            Obj5E_Spring:
00011F3C 1341 003A                  		move.b	d1,$3A(a1)
00011F40 1141 003A                  		move.b	d1,$3A(a0)
00011F44 B229 001A                  		cmp.b	$1A(a1),d1
00011F48 6700                       		beq.s	loc_1192C
00011F4A 08A9 0003 0022             		bclr	#3,$22(a1)
00011F50 6700                       		beq.s	loc_1192C
00011F52 4229 0025                  		clr.b	$25(a1)
00011F56 137C 0002 0024             		move.b	#2,$24(a1)
00011F5C 45F8 D000                  		lea	($FFFFD000).w,a2
00011F60 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011F66 446A 0012                  		neg.w	$12(a2)
00011F6A 08EA 0001 0022             		bset	#1,$22(a2)
00011F70 08AA 0003 0022             		bclr	#3,$22(a2)
00011F76 422A 003C                  		clr.b	$3C(a2)
00011F7A 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011F80 157C 0002 0024             		move.b	#2,$24(a2)
00011F86 303C 00CC                  		move.w	#$CC,d0
00011F8A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
00011F90                            
00011F90                            loc_1192C:
00011F90 4268 0010                  		clr.w	$10(a0)
00011F94 4268 0012                  		clr.w	$12(a0)
00011F98 5528 0024                  		subq.b	#2,$24(a0)
00011F9C                            
00011F9C                            locret_11938:
00011F9C 4E75                       		rts	
00011F9E                            ; ===========================================================================
00011F9E FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011FA8                            
00011FA8                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011FD8                            		even
00011FD8                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012008                            		even
00012008                            ; ---------------------------------------------------------------------------
00012008                            ; Sprite mappings - seesaws (SLZ)
00012008                            ; ---------------------------------------------------------------------------
00012008                            Map_obj5E:
00012008                            	include "_maps\obj5E.asm"
00012008                            ; ---------------------------------------------------------------------------
00012008                            ; Sprite mappings - seesaws (SLZ)
00012008                            ; ---------------------------------------------------------------------------
00012008 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001200C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012010 07                         byte_119AC:	dc.b 7
00012011 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012016 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001201B E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012020 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012025 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001202A F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001202F FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012034 04                         byte_119D0:	dc.b 4
00012035 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001203A E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001203F E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012044 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001204A 00                         		even
0001204A 00                         		even
0001204A                            
0001204A                            ; ---------------------------------------------------------------------------
0001204A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001204A                            ; ---------------------------------------------------------------------------
0001204A                            Map_obj5Ea:
0001204A                            	include "_maps\obj5Eballs.asm"
0001204A                            ; ---------------------------------------------------------------------------
0001204A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001204A                            ; ---------------------------------------------------------------------------
0001204A 0000                       		dc.w byte_119EA-Map_obj5Ea
0001204C 0000                       		dc.w byte_119F0-Map_obj5Ea
0001204E 01                         byte_119EA:	dc.b 1
0001204F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012054 01                         byte_119F0:	dc.b 1
00012055 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001205A                            		even
0001205A                            		even
0001205A                            
0001205A                            ; ===========================================================================
0001205A                            ; ---------------------------------------------------------------------------
0001205A                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001205A                            ; ---------------------------------------------------------------------------
0001205A                            
0001205A                            Obj5F:					; XREF: Obj_Index
0001205A 7000                       		moveq	#0,d0
0001205C 1028 0024                  		move.b	$24(a0),d0
00012060 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012064 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012068                            ; ===========================================================================
00012068 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001206A 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001206C 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001206E 0000                       		dc.w Obj5F_End-Obj5F_Index
00012070                            ; ===========================================================================
00012070                            
00012070                            Obj5F_Main:				; XREF: Obj5F_Index
00012070 5428 0024                  		addq.b	#2,$24(a0)
00012074 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001207C 317C 0400 0002             		move.w	#$400,2(a0)
00012082 0028 0004 0001             		ori.b	#4,1(a0)
00012088 117C 0003 0018             		move.b	#3,$18(a0)
0001208E 117C 000C 0019             		move.b	#$C,$19(a0)
00012094 1028 0028                  		move.b	$28(a0),d0
00012098 6700                       		beq.s	loc_11A3C
0001209A 1140 0024                  		move.b	d0,$24(a0)
0001209E 4E75                       		rts	
000120A0                            ; ===========================================================================
000120A0                            
000120A0                            loc_11A3C:
000120A0 117C 009A 0020             		move.b	#$9A,$20(a0)
000120A6 0868 0000 0022             		bchg	#0,$22(a0)
000120AC                            
000120AC                            Obj5F_Action:				; XREF: Obj5F_Index
000120AC 7000                       		moveq	#0,d0
000120AE 1028 0025                  		move.b	$25(a0),d0
000120B2 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000120B6 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000120BA 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000120C0 6100 8C82                  		bsr.w	AnimateSprite
000120C4 6000 DC66                  		bra.w	MarkObjGone
000120C8                            ; ===========================================================================
000120C8 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000120CA 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000120CC 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000120CE                            ; ===========================================================================
000120CE                            
000120CE                            Obj5F_Walk:				; XREF: Obj5F_Index2
000120CE 6100 0000                  		bsr.w	Obj5F_ChkSonic
000120D2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000120D6 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000120D8 5428 0025                  		addq.b	#2,$25(a0)
000120DC 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000120E2 317C 0010 0010             		move.w	#$10,$10(a0)
000120E8 117C 0001 001C             		move.b	#1,$1C(a0)
000120EE 0868 0000 0022             		bchg	#0,$22(a0)
000120F4 6700                       		beq.s	locret_11A96
000120F6 4468 0010                  		neg.w	$10(a0)		; change direction
000120FA                            
000120FA                            locret_11A96:
000120FA 4E75                       		rts	
000120FC                            ; ===========================================================================
000120FC                            
000120FC                            Obj5F_Wait:				; XREF: Obj5F_Index2
000120FC 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012100 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012104 6B00                       		bmi.s	loc_11AA8
00012106 6100 BB56                  		bsr.w	SpeedToPos
0001210A 4E75                       		rts	
0001210C                            ; ===========================================================================
0001210C                            
0001210C                            loc_11AA8:
0001210C 5528 0025                  		subq.b	#2,$25(a0)
00012110 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012116 4268 0010                  		clr.w	$10(a0)		; stop walking
0001211A 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012120 4E75                       		rts	
00012122                            ; ===========================================================================
00012122                            
00012122                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012122 5368 0030                  		subq.w	#1,$30(a0)
00012126 6A00                       		bpl.s	locret_11AD0
00012128 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0001212C 117C 0000 0024             		move.b	#0,$24(a0)
00012132                            
00012132                            locret_11AD0:
00012132 4E75                       		rts	
00012134                            ; ===========================================================================
00012134                            
00012134                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012134 3038 D008                  		move.w	($FFFFD008).w,d0
00012138 9068 0008                  		sub.w	8(a0),d0
0001213C 6400                       		bcc.s	loc_11ADE
0001213E 4440                       		neg.w	d0
00012140                            
00012140                            loc_11ADE:
00012140 0C40 0060                  		cmpi.w	#$60,d0
00012144 6400                       		bcc.s	locret_11B5E
00012146 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001214A 9068 000C                  		sub.w	$C(a0),d0
0001214E 6400                       		bcc.s	Obj5F_MakeFuse
00012150 4440                       		neg.w	d0
00012152                            
00012152                            Obj5F_MakeFuse:
00012152 0C40 0060                  		cmpi.w	#$60,d0
00012156 6400                       		bcc.s	locret_11B5E
00012158 4A78 FE08                  		tst.w	($FFFFFE08).w
0001215C 6600                       		bne.s	locret_11B5E
0001215E 117C 0004 0025             		move.b	#4,$25(a0)
00012164 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001216A 4268 0010                  		clr.w	$10(a0)
0001216E 117C 0002 001C             		move.b	#2,$1C(a0)
00012174 6100 BFAA                  		bsr.w	SingleObjLoad2
00012178 6600                       		bne.s	locret_11B5E
0001217A 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001217E 3368 0008 0008             		move.w	8(a0),8(a1)
00012184 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001218A 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012190 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012196 137C 0004 0028             		move.b	#4,$28(a1)
0001219C 137C 0003 001C             		move.b	#3,$1C(a1)
000121A2 337C 0010 0012             		move.w	#$10,$12(a1)
000121A8 0828 0001 0022             		btst	#1,$22(a0)
000121AE 6700                       		beq.s	loc_11B54
000121B0 4469 0012                  		neg.w	$12(a1)
000121B4                            
000121B4                            loc_11B54:
000121B4 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000121BA 2348 003C                  		move.l	a0,$3C(a1)
000121BE                            
000121BE                            locret_11B5E:
000121BE 4E75                       		rts	
000121C0                            ; ===========================================================================
000121C0                            
000121C0                            Obj5F_Display:				; XREF: Obj5F_Index
000121C0 6100                       		bsr.s	loc_11B70
000121C2 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000121C8 6100 8B7A                  		bsr.w	AnimateSprite
000121CC 6000 DB5E                  		bra.w	MarkObjGone
000121D0                            ; ===========================================================================
000121D0                            
000121D0                            loc_11B70:
000121D0 5368 0030                  		subq.w	#1,$30(a0)
000121D4 6B00                       		bmi.s	loc_11B7C
000121D6 6100 BA86                  		bsr.w	SpeedToPos
000121DA 4E75                       		rts	
000121DC                            ; ===========================================================================
000121DC                            
000121DC                            loc_11B7C:
000121DC 4268 0030                  		clr.w	$30(a0)
000121E0 4228 0024                  		clr.b	$24(a0)
000121E4 3168 0034 000C             		move.w	$34(a0),$C(a0)
000121EA 7203                       		moveq	#3,d1
000121EC 2248                       		movea.l	a0,a1
000121EE 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000121F4 6000                       		bra.s	Obj5F_MakeShrap
000121F6                            ; ===========================================================================
000121F6                            
000121F6                            Obj5F_Loop:
000121F6 6100 BF28                  		bsr.w	SingleObjLoad2
000121FA 6600                       		bne.s	loc_11BCE
000121FC                            
000121FC                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000121FC 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012200 3368 0008 0008             		move.w	8(a0),8(a1)
00012206 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001220C 137C 0006 0028             		move.b	#6,$28(a1)
00012212 137C 0004 001C             		move.b	#4,$1C(a1)
00012218 335A 0010                  		move.w	(a2)+,$10(a1)
0001221C 335A 0012                  		move.w	(a2)+,$12(a1)
00012220 137C 0098 0020             		move.b	#$98,$20(a1)
00012226 08E9 0007 0001             		bset	#7,1(a1)
0001222C                            
0001222C                            loc_11BCE:
0001222C 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012230                            
00012230 117C 0006 0024             		move.b	#6,$24(a0)
00012236                            
00012236                            Obj5F_End:				; XREF: Obj5F_Index
00012236 6100 BA26                  		bsr.w	SpeedToPos
0001223A 0668 0018 0012             		addi.w	#$18,$12(a0)
00012240 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012246 6100 8AFC                  		bsr.w	AnimateSprite
0001224A 4A28 0001                  		tst.b	1(a0)
0001224E 6A00 BA70                  		bpl.w	DeleteObject
00012252 6000 BA30                  		bra.w	DisplaySprite
00012256                            ; ===========================================================================
00012256 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012266                            
00012266                            Ani_obj5F:
00012266                            	include "_anim\obj5F.asm"
00012266                            ; ---------------------------------------------------------------------------
00012266                            ; Animation script - Bomb enemy
00012266                            ; ---------------------------------------------------------------------------
00012266 0000                       		dc.w byte_11C12-Ani_obj5F
00012268 0000                       		dc.w byte_11C16-Ani_obj5F
0001226A 0000                       		dc.w byte_11C1C-Ani_obj5F
0001226C 0000                       		dc.w byte_11C20-Ani_obj5F
0001226E 0000                       		dc.w byte_11C24-Ani_obj5F
00012270 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012274 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001227A 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001227E 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012282 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012286                            		even
00012286                            		even
00012286                            
00012286                            ; ---------------------------------------------------------------------------
00012286                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012286                            ; ---------------------------------------------------------------------------
00012286                            Map_obj5F:
00012286                            	include "_maps\obj5F.asm"
00012286                            ; ---------------------------------------------------------------------------
00012286                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012286                            ; ---------------------------------------------------------------------------
00012286 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001228A 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001228E 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012292 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012296 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001229A 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001229E 03                         byte_11C40:	dc.b 3
0001229F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000122A4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000122A9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000122AE 03                         byte_11C50:	dc.b 3
000122AF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000122B4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000122B9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000122BE 03                         byte_11C60:	dc.b 3
000122BF F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000122C4 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000122C9 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000122CE 03                         byte_11C70:	dc.b 3
000122CF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000122D4 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000122D9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000122DE 03                         byte_11C80:	dc.b 3
000122DF F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000122E4 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000122E9 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000122EE 03                         byte_11C90:	dc.b 3
000122EF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000122F4 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000122F9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000122FE 02                         byte_11CA0:	dc.b 2
000122FF F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012304 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012309 02                         byte_11CAB:	dc.b 2
0001230A F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001230F 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012314 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012315 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001231A 01                         byte_11CBC:	dc.b 1			; fuse
0001231B E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012320 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012321 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012326 01                         byte_11CC8:	dc.b 1			; fireball
00012327 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001232C                            		even
0001232C                            		even
0001232C                            
0001232C                            ; ===========================================================================
0001232C                            ; ---------------------------------------------------------------------------
0001232C                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001232C                            ; ---------------------------------------------------------------------------
0001232C                            
0001232C                            Obj60:					; XREF: Obj_Index
0001232C 7000                       		moveq	#0,d0
0001232E 1028 0024                  		move.b	$24(a0),d0
00012332 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012336 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001233A                            ; ===========================================================================
0001233A 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001233C 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001233E 0000                       		dc.w Obj60_Display-Obj60_Index
00012340 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012342 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012344                            ; ===========================================================================
00012344                            
00012344                            Obj60_Main:				; XREF: Obj60_Index
00012344 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001234C 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012352 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012358 6700                       		beq.s	loc_11D02
0001235A 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012360                            
00012360                            loc_11D02:
00012360 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012366 6600                       		bne.s	loc_11D10
00012368 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001236E                            
0001236E                            loc_11D10:
0001236E 0028 0004 0001             		ori.b	#4,1(a0)
00012374 117C 0004 0018             		move.b	#4,$18(a0)
0001237A 117C 000B 0020             		move.b	#$B,$20(a0)
00012380 117C 000C 0019             		move.b	#$C,$19(a0)
00012386 7400                       		moveq	#0,d2
00012388 45E8 0037                  		lea	$37(a0),a2
0001238C 264A                       		movea.l	a2,a3
0001238E 524A                       		addq.w	#1,a2
00012390 7203                       		moveq	#3,d1
00012392                            
00012392                            Obj60_MakeOrbs:
00012392 6100 BD8C                  		bsr.w	SingleObjLoad2
00012396 6600                       		bne.s	loc_11D90
00012398 5213                       		addq.b	#1,(a3)
0001239A 3A09                       		move.w	a1,d5
0001239C 0445 D000                  		subi.w	#-$3000,d5
000123A0 EC4D                       		lsr.w	#6,d5
000123A2 0245 007F                  		andi.w	#$7F,d5
000123A6 14C5                       		move.b	d5,(a2)+
000123A8 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000123AA 137C 0006 0024             		move.b	#6,$24(a1)
000123B0 2368 0004 0004             		move.l	4(a0),4(a1)
000123B6 3368 0002 0002             		move.w	2(a0),2(a1)
000123BC 0029 0004 0001             		ori.b	#4,1(a1)
000123C2 137C 0004 0018             		move.b	#4,$18(a1)
000123C8 137C 0008 0019             		move.b	#8,$19(a1)
000123CE 137C 0003 001A             		move.b	#3,$1A(a1)
000123D4 137C 0098 0020             		move.b	#$98,$20(a1)
000123DA 1342 0026                  		move.b	d2,$26(a1)
000123DE 0602 0040                  		addi.b	#$40,d2
000123E2 2348 003C                  		move.l	a0,$3C(a1)
000123E6 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000123EA                            
000123EA                            loc_11D90:
000123EA 7001                       		moveq	#1,d0
000123EC 0828 0000 0022             		btst	#0,$22(a0)
000123F2 6700                       		beq.s	Obj60_Move
000123F4 4440                       		neg.w	d0
000123F6                            
000123F6                            Obj60_Move:
000123F6 1140 0036                  		move.b	d0,$36(a0)
000123FA 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012400 5428 0024                  		addq.b	#2,$24(a0)
00012404 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001240A 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012410 6700                       		beq.s	locret_11DBC	; if not, branch
00012412 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012416                            
00012416                            locret_11DBC:
00012416 4E75                       		rts	
00012418                            ; ===========================================================================
00012418                            
00012418                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012418 3038 D008                  		move.w	($FFFFD008).w,d0
0001241C 9068 0008                  		sub.w	8(a0),d0
00012420 6400                       		bcc.s	loc_11DCA
00012422 4440                       		neg.w	d0
00012424                            
00012424                            loc_11DCA:
00012424 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012428 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001242A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001242E 9068 000C                  		sub.w	$C(a0),d0
00012432 6400                       		bcc.s	loc_11DDC
00012434 4440                       		neg.w	d0
00012436                            
00012436                            loc_11DDC:
00012436 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001243A 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001243C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012440 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012442 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012448                            
00012448                            Obj60_Animate:
00012448 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001244E 6100 88F4                  		bsr.w	AnimateSprite
00012452 6000 0000                  		bra.w	Obj60_ChkDel
00012456                            ; ===========================================================================
00012456                            
00012456                            Obj60_Display:				; XREF: Obj60_Index
00012456 6100 B806                  		bsr.w	SpeedToPos
0001245A                            
0001245A                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001245A 3028 0008                  		move.w	8(a0),d0
0001245E 0240 FF80                  		andi.w	#$FF80,d0
00012462 3238 F700                  		move.w	($FFFFF700).w,d1
00012466 0441 0080                  		subi.w	#$80,d1
0001246A 0241 FF80                  		andi.w	#$FF80,d1
0001246E 9041                       		sub.w	d1,d0
00012470 0C40 0280                  		cmpi.w	#$280,d0
00012474 6200 0000                  		bhi.w	Obj60_ChkGone
00012478 6000 B80A                  		bra.w	DisplaySprite
0001247C                            ; ===========================================================================
0001247C                            
0001247C                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001247C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012480 7000                       		moveq	#0,d0
00012482 1028 0023                  		move.b	$23(a0),d0
00012486 6700                       		beq.s	loc_11E34
00012488 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001248E                            
0001248E                            loc_11E34:
0001248E 45E8 0037                  		lea	$37(a0),a2
00012492 7400                       		moveq	#0,d2
00012494 141A                       		move.b	(a2)+,d2
00012496 5342                       		subq.w	#1,d2
00012498 6500                       		bcs.s	Obj60_Delete
0001249A                            
0001249A                            loc_11E40:
0001249A 7000                       		moveq	#0,d0
0001249C 101A                       		move.b	(a2)+,d0
0001249E ED48                       		lsl.w	#6,d0
000124A0 0680 00FF D000             		addi.l	#$FFD000,d0
000124A6 2240                       		movea.l	d0,a1
000124A8 6100 B818                  		bsr.w	DeleteObject2
000124AC 51CA FFEC                  		dbf	d2,loc_11E40
000124B0                            
000124B0                            Obj60_Delete:
000124B0 6000 B80E                  		bra.w	DeleteObject
000124B4                            ; ===========================================================================
000124B4                            
000124B4                            Obj60_MoveOrb:				; XREF: Obj60_Index
000124B4 2268 003C                  		movea.l	$3C(a0),a1
000124B8 0C11 0060                  		cmpi.b	#$60,0(a1)
000124BC 6600 B802                  		bne.w	DeleteObject
000124C0 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000124C6 6600                       		bne.s	Obj60_Circle
000124C8 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000124CE 6600                       		bne.s	Obj60_Circle
000124D0 5428 0024                  		addq.b	#2,$24(a0)
000124D4 5329 0037                  		subq.b	#1,$37(a1)
000124D8 6600                       		bne.s	Obj60_FireOrb
000124DA 5429 0024                  		addq.b	#2,$24(a1)
000124DE                            
000124DE                            Obj60_FireOrb:
000124DE 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000124E4 0829 0000 0022             		btst	#0,$22(a1)
000124EA 6700                       		beq.s	Obj60_Display2
000124EC 4468 0010                  		neg.w	$10(a0)
000124F0                            
000124F0                            Obj60_Display2:
000124F0 6000 B792                  		bra.w	DisplaySprite
000124F4                            ; ===========================================================================
000124F4                            
000124F4                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000124F4 1028 0026                  		move.b	$26(a0),d0
000124F8 4EB9 0000 2C64             		jsr	(CalcSine).l
000124FE E841                       		asr.w	#4,d1
00012500 D269 0008                  		add.w	8(a1),d1
00012504 3141 0008                  		move.w	d1,8(a0)
00012508 E840                       		asr.w	#4,d0
0001250A D069 000C                  		add.w	$C(a1),d0
0001250E 3140 000C                  		move.w	d0,$C(a0)
00012512 1029 0036                  		move.b	$36(a1),d0
00012516 D128 0026                  		add.b	d0,$26(a0)
0001251A 6000 B768                  		bra.w	DisplaySprite
0001251E                            ; ===========================================================================
0001251E                            
0001251E                            Obj60_ChkDel2:				; XREF: Obj60_Index
0001251E 6100 B73E                  		bsr.w	SpeedToPos
00012522 4A28 0001                  		tst.b	1(a0)
00012526 6A00 B798                  		bpl.w	DeleteObject
0001252A 6000 B758                  		bra.w	DisplaySprite
0001252E                            ; ===========================================================================
0001252E                            Ani_obj60:
0001252E                            	include "_anim\obj60.asm"
0001252E                            ; ---------------------------------------------------------------------------
0001252E                            ; Animation script - Orbinaut enemy
0001252E                            ; ---------------------------------------------------------------------------
0001252E 0000                       		dc.w byte_11EDA-Ani_obj60
00012530 0000                       		dc.w byte_11EDE-Ani_obj60
00012532 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012536 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001253C                            		even
0001253C                            		even
0001253C                            
0001253C                            ; ---------------------------------------------------------------------------
0001253C                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001253C                            ; ---------------------------------------------------------------------------
0001253C                            Map_obj60:
0001253C                            	include "_maps\obj60.asm"
0001253C                            ; ---------------------------------------------------------------------------
0001253C                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001253C                            ; ---------------------------------------------------------------------------
0001253C 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012540 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012544 01                         byte_11EEC:	dc.b 1
00012545 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001254A 01                         byte_11EF2:	dc.b 1
0001254B F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012550 01                         byte_11EF8:	dc.b 1
00012551 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012556 01                         byte_11EFE:	dc.b 1
00012557 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001255C                            		even
0001255C                            		even
0001255C                            
0001255C                            ; ===========================================================================
0001255C                            ; ---------------------------------------------------------------------------
0001255C                            ; Object 16 - harpoon (LZ)
0001255C                            ; ---------------------------------------------------------------------------
0001255C                            
0001255C                            Obj16:					; XREF: Obj_Index
0001255C 7000                       		moveq	#0,d0
0001255E 1028 0024                  		move.b	$24(a0),d0
00012562 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012566 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001256A                            ; ===========================================================================
0001256A 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001256C 0000                       		dc.w Obj16_Move-Obj16_Index
0001256E 0000                       		dc.w Obj16_Wait-Obj16_Index
00012570                            ; ===========================================================================
00012570                            
00012570                            Obj16_Main:				; XREF: Obj16_Index
00012570 5428 0024                  		addq.b	#2,$24(a0)
00012574 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001257C 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012582 0028 0004 0001             		ori.b	#4,1(a0)
00012588 117C 0004 0018             		move.b	#4,$18(a0)
0001258E 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012594 117C 0014 0019             		move.b	#$14,$19(a0)
0001259A 317C 003C 0030             		move.w	#60,$30(a0)
000125A0                            
000125A0                            Obj16_Move:				; XREF: Obj16_Index
000125A0 43F9 0000 0000             		lea	(Ani_obj16).l,a1
000125A6 6100 879C                  		bsr.w	AnimateSprite
000125AA 7000                       		moveq	#0,d0
000125AC 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000125B0 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000125B6 6000 D774                  		bra.w	MarkObjGone
000125BA                            ; ===========================================================================
000125BA 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000125C0                            ; ===========================================================================
000125C0                            
000125C0                            Obj16_Wait:				; XREF: Obj16_Index
000125C0 5368 0030                  		subq.w	#1,$30(a0)
000125C4 6A00                       		bpl.s	Obj16_ChkDel
000125C6 317C 003C 0030             		move.w	#60,$30(a0)
000125CC 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000125D0 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000125D6                            
000125D6                            Obj16_ChkDel:
000125D6 6000 D754                  		bra.w	MarkObjGone
000125DA                            ; ===========================================================================
000125DA                            Ani_obj16:
000125DA                            	include "_anim\obj16.asm"
000125DA                            ; ---------------------------------------------------------------------------
000125DA                            ; Animation script - harpoon (LZ)
000125DA                            ; ---------------------------------------------------------------------------
000125DA 0000                       		dc.w byte_11F8A-Ani_obj16
000125DC 0000                       		dc.w byte_11F8E-Ani_obj16
000125DE 0000                       		dc.w byte_11F92-Ani_obj16
000125E0 0000                       		dc.w byte_11F96-Ani_obj16
000125E2 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000125E6 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000125EA 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000125EE 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000125F2                            		even
000125F2                            		even
000125F2                            
000125F2                            ; ---------------------------------------------------------------------------
000125F2                            ; Sprite mappings - harpoon (LZ)
000125F2                            ; ---------------------------------------------------------------------------
000125F2                            Map_obj16:
000125F2                            	include "_maps\obj16.asm"
000125F2                            ; ---------------------------------------------------------------------------
000125F2                            ; Sprite mappings - harpoon (LZ)
000125F2                            ; ---------------------------------------------------------------------------
000125F2 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000125F6 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000125FA 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000125FE 01                         byte_11FA6:	dc.b 1
000125FF FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012604 01                         byte_11FAC:	dc.b 1
00012605 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001260A 02                         byte_11FB2:	dc.b 2
0001260B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012610 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012615 01                         byte_11FBD:	dc.b 1
00012616 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001261B 01                         byte_11FC3:	dc.b 1
0001261C E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012621 02                         byte_11FC9:	dc.b 2
00012622 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012627 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001262C                            		even
0001262C                            		even
0001262C                            
0001262C                            ; ===========================================================================
0001262C                            ; ---------------------------------------------------------------------------
0001262C                            ; Object 61 - blocks (LZ)
0001262C                            ; ---------------------------------------------------------------------------
0001262C                            
0001262C                            Obj61:					; XREF: Obj_Index
0001262C 7000                       		moveq	#0,d0
0001262E 1028 0024                  		move.b	$24(a0),d0
00012632 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012636 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001263A                            ; ===========================================================================
0001263A 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001263C 0000                       		dc.w Obj61_Action-Obj61_Index
0001263E                            
0001263E 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012640 200C                       		dc.b $20, $C
00012642 1010                       		dc.b $10, $10
00012644 1010                       		dc.b $10, $10
00012646                            ; ===========================================================================
00012646                            
00012646                            Obj61_Main:				; XREF: Obj61_Index
00012646 5428 0024                  		addq.b	#2,$24(a0)
0001264A 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012652 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012658 117C 0004 0001             		move.b	#4,1(a0)
0001265E 117C 0003 0018             		move.b	#3,$18(a0)
00012664 7000                       		moveq	#0,d0
00012666 1028 0028                  		move.b	$28(a0),d0
0001266A E648                       		lsr.w	#3,d0
0001266C 0240 000E                  		andi.w	#$E,d0
00012670 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012674 115A 0019                  		move.b	(a2)+,$19(a0)
00012678 1152 0016                  		move.b	(a2),$16(a0)
0001267C E248                       		lsr.w	#1,d0
0001267E 1140 001A                  		move.b	d0,$1A(a0)
00012682 3168 0008 0034             		move.w	8(a0),$34(a0)
00012688 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001268E 1028 0028                  		move.b	$28(a0),d0
00012692 0200 000F                  		andi.b	#$F,d0
00012696 6700                       		beq.s	Obj61_Action
00012698 0C00 0007                  		cmpi.b	#7,d0
0001269C 6700                       		beq.s	Obj61_Action
0001269E 117C 0001 0038             		move.b	#1,$38(a0)
000126A4                            
000126A4                            Obj61_Action:				; XREF: Obj61_Index
000126A4 3F28 0008                  		move.w	8(a0),-(sp)
000126A8 7000                       		moveq	#0,d0
000126AA 1028 0028                  		move.b	$28(a0),d0
000126AE 0240 000F                  		andi.w	#$F,d0
000126B2 D040                       		add.w	d0,d0
000126B4 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000126B8 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000126BC 381F                       		move.w	(sp)+,d4
000126BE 4A28 0001                  		tst.b	1(a0)
000126C2 6A00                       		bpl.s	Obj61_ChkDel
000126C4 7200                       		moveq	#0,d1
000126C6 1228 0019                  		move.b	$19(a0),d1
000126CA 0641 000B                  		addi.w	#$B,d1
000126CE 7400                       		moveq	#0,d2
000126D0 1428 0016                  		move.b	$16(a0),d2
000126D4 3602                       		move.w	d2,d3
000126D6 5243                       		addq.w	#1,d3
000126D8 6100 D97A                  		bsr.w	SolidObject
000126DC 1144 003F                  		move.b	d4,$3F(a0)
000126E0 6100 0000                  		bsr.w	loc_12180
000126E4                            
000126E4                            Obj61_ChkDel:
000126E4 3028 0034                  		move.w	$34(a0),d0
000126E8 0240 FF80                  		andi.w	#$FF80,d0
000126EC 3238 F700                  		move.w	($FFFFF700).w,d1
000126F0 0441 0080                  		subi.w	#$80,d1
000126F4 0241 FF80                  		andi.w	#$FF80,d1
000126F8 9041                       		sub.w	d1,d0
000126FA 0C40 0280                  		cmpi.w	#$280,d0
000126FE 6200 B5C0                  		bhi.w	DeleteObject
00012702 6000 B580                  		bra.w	DisplaySprite
00012706                            ; ===========================================================================
00012706 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001270A 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001270E 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012712 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012716                            ; ===========================================================================
00012716                            
00012716                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012716 4E75                       		rts	
00012718                            ; ===========================================================================
00012718                            
00012718                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012718 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001271C 6600                       		bne.s	loc_120D6	; if yes, branch
0001271E 0828 0003 0022             		btst	#3,$22(a0)
00012724 6700                       		beq.s	locret_120D4
00012726 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
0001272C                            
0001272C                            locret_120D4:
0001272C 4E75                       		rts	
0001272E                            ; ===========================================================================
0001272E                            
0001272E                            loc_120D6:
0001272E 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012732 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012734 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012738 4228 0038                  		clr.b	$38(a0)
0001273C 4E75                       		rts	
0001273E                            ; ===========================================================================
0001273E                            
0001273E                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001273E 6100 B51E                  		bsr.w	SpeedToPos
00012742 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012746 6100 0000                  		bsr.w	ObjHitFloor
0001274A 4A41                       		tst.w	d1
0001274C 6A00 0000                  		bpl.w	locret_12106
00012750 5241                       		addq.w	#1,d1
00012752 D368 000C                  		add.w	d1,$C(a0)
00012756 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001275A 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001275E                            
0001275E                            locret_12106:
0001275E 4E75                       		rts	
00012760                            ; ===========================================================================
00012760                            
00012760                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012760 6100 B4FC                  		bsr.w	SpeedToPos
00012764 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012768 6100 0000                  		bsr.w	ObjHitCeiling
0001276C 4A41                       		tst.w	d1
0001276E 6A00 0000                  		bpl.w	locret_12126
00012772 9368 000C                  		sub.w	d1,$C(a0)
00012776 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001277A 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001277E                            
0001277E                            locret_12126:
0001277E 4E75                       		rts	
00012780                            ; ===========================================================================
00012780                            
00012780                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012780 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012786 6600                       		bne.s	locret_12138	; if not, branch
00012788 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001278C 4228 0038                  		clr.b	$38(a0)
00012790                            
00012790                            locret_12138:
00012790 4E75                       		rts	
00012792                            ; ===========================================================================
00012792                            
00012792                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012792 3038 F646                  		move.w	($FFFFF646).w,d0
00012796 9068 000C                  		sub.w	$C(a0),d0
0001279A 6700                       		beq.s	locret_1217E
0001279C 6400                       		bcc.s	loc_12162
0001279E 0C40 FFFE                  		cmpi.w	#-2,d0
000127A2 6C00                       		bge.s	loc_1214E
000127A4 70FE                       		moveq	#-2,d0
000127A6                            
000127A6                            loc_1214E:
000127A6 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000127AA 6100 0000                  		bsr.w	ObjHitCeiling
000127AE 4A41                       		tst.w	d1
000127B0 6A00 0000                  		bpl.w	locret_12160
000127B4 9368 000C                  		sub.w	d1,$C(a0)
000127B8                            
000127B8                            locret_12160:
000127B8 4E75                       		rts	
000127BA                            ; ===========================================================================
000127BA                            
000127BA                            loc_12162:				; XREF: Obj61_Type07
000127BA 0C40 0002                  		cmpi.w	#2,d0
000127BE 6F00                       		ble.s	loc_1216A
000127C0 7002                       		moveq	#2,d0
000127C2                            
000127C2                            loc_1216A:
000127C2 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000127C6 6100 0000                  		bsr.w	ObjHitFloor
000127CA 4A41                       		tst.w	d1
000127CC 6A00 0000                  		bpl.w	locret_1217E
000127D0 5241                       		addq.w	#1,d1
000127D2 D368 000C                  		add.w	d1,$C(a0)
000127D6                            
000127D6                            locret_1217E:
000127D6 4E75                       		rts	
000127D8                            ; ===========================================================================
000127D8                            
000127D8                            loc_12180:				; XREF: Obj61_Action
000127D8 4A28 0038                  		tst.b	$38(a0)
000127DC 6700                       		beq.s	locret_121C0
000127DE 0828 0003 0022             		btst	#3,$22(a0)
000127E4 6600                       		bne.s	loc_1219A
000127E6 4A28 003E                  		tst.b	$3E(a0)
000127EA 6700                       		beq.s	locret_121C0
000127EC 5928 003E                  		subq.b	#4,$3E(a0)
000127F0 6000                       		bra.s	loc_121A6
000127F2                            ; ===========================================================================
000127F2                            
000127F2                            loc_1219A:
000127F2 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000127F8 6700                       		beq.s	locret_121C0
000127FA 5828 003E                  		addq.b	#4,$3E(a0)
000127FE                            
000127FE                            loc_121A6:
000127FE 1028 003E                  		move.b	$3E(a0),d0
00012802 4EB9 0000 2C64             		jsr	(CalcSine).l
00012808 323C 0400                  		move.w	#$400,d1
0001280C C1C1                       		muls.w	d1,d0
0001280E 4840                       		swap	d0
00012810 D068 0030                  		add.w	$30(a0),d0
00012814 3140 000C                  		move.w	d0,$C(a0)
00012818                            
00012818                            locret_121C0:
00012818 4E75                       		rts	
0001281A                            ; ===========================================================================
0001281A                            ; ---------------------------------------------------------------------------
0001281A                            ; Sprite mappings - blocks (LZ)
0001281A                            ; ---------------------------------------------------------------------------
0001281A                            Map_obj61:
0001281A                            	include "_maps\obj61.asm"
0001281A                            ; ---------------------------------------------------------------------------
0001281A                            ; Sprite mappings - blocks (LZ)
0001281A                            ; ---------------------------------------------------------------------------
0001281A 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001281E 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012822 01                         byte_121CA:	dc.b 1
00012823 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012828 02                         byte_121D0:	dc.b 2
00012829 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001282E F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012833 01                         byte_121DB:	dc.b 1
00012834 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012839 01                         byte_121E1:	dc.b 1
0001283A F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012840 00                         		even
00012840 00                         		even
00012840                            
00012840                            ; ===========================================================================
00012840                            ; ---------------------------------------------------------------------------
00012840                            ; Object 62 - gargoyle head (LZ)
00012840                            ; ---------------------------------------------------------------------------
00012840                            
00012840                            Obj62:					; XREF: Obj_Index
00012840 7000                       		moveq	#0,d0
00012842 1028 0024                  		move.b	$24(a0),d0
00012846 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001284A 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001284E 6000 D4DC                  		bra.w	MarkObjGone
00012852                            ; ===========================================================================
00012852 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012854 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012856 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012858 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001285A                            
0001285A 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012862                            ; ===========================================================================
00012862                            
00012862                            Obj62_Main:				; XREF: Obj62_Index
00012862 5428 0024                  		addq.b	#2,$24(a0)
00012866 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001286E 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012874 0028 0004 0001             		ori.b	#4,1(a0)
0001287A 117C 0003 0018             		move.b	#3,$18(a0)
00012880 117C 0010 0019             		move.b	#$10,$19(a0)
00012886 1028 0028                  		move.b	$28(a0),d0	; get object type
0001288A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001288E 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012894 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001289A 0228 000F 0028             		andi.b	#$F,$28(a0)
000128A0                            
000128A0                            Obj62_MakeFire:				; XREF: Obj62_Index
000128A0 5328 001E                  		subq.b	#1,$1E(a0)
000128A4 6600                       		bne.s	Obj62_NoFire
000128A6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000128AC 6100 B650                  		bsr.w	ChkObjOnScreen
000128B0 6600                       		bne.s	Obj62_NoFire
000128B2 6100 B856                  		bsr.w	SingleObjLoad
000128B6 6600                       		bne.s	Obj62_NoFire
000128B8 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000128BC 5829 0024                  		addq.b	#4,$24(a1)
000128C0 3368 0008 0008             		move.w	8(a0),8(a1)
000128C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000128CC 1368 0001 0001             		move.b	1(a0),1(a1)
000128D2 1368 0022 0022             		move.b	$22(a0),$22(a1)
000128D8                            
000128D8                            Obj62_NoFire:
000128D8 4E75                       		rts	
000128DA                            ; ===========================================================================
000128DA                            
000128DA                            Obj62_FireBall:				; XREF: Obj62_Index
000128DA 5428 0024                  		addq.b	#2,$24(a0)
000128DE 117C 0008 0016             		move.b	#8,$16(a0)
000128E4 117C 0008 0017             		move.b	#8,$17(a0)
000128EA 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000128F2 317C 02E9 0002             		move.w	#$2E9,2(a0)
000128F8 0028 0004 0001             		ori.b	#4,1(a0)
000128FE 117C 0004 0018             		move.b	#4,$18(a0)
00012904 117C 0098 0020             		move.b	#$98,$20(a0)
0001290A 117C 0008 0019             		move.b	#8,$19(a0)
00012910 117C 0002 001A             		move.b	#2,$1A(a0)
00012916 5068 000C                  		addq.w	#8,$C(a0)
0001291A 317C 0200 0010             		move.w	#$200,$10(a0)
00012920 0828 0000 0022             		btst	#0,$22(a0)
00012926 6600                       		bne.s	Obj62_Sound
00012928 4468 0010                  		neg.w	$10(a0)
0001292C                            
0001292C                            Obj62_Sound:
0001292C 303C 00AE                  		move.w	#$AE,d0
00012930 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012936                            
00012936                            Obj62_AniFire:				; XREF: Obj62_Index
00012936 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001293A 0200 0007                  		andi.b	#7,d0
0001293E 6600                       		bne.s	Obj62_StopFire
00012940 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012946                            
00012946                            Obj62_StopFire:
00012946 6100 B316                  		bsr.w	SpeedToPos
0001294A 0828 0000 0022             		btst	#0,$22(a0)
00012950 6600                       		bne.s	Obj62_StopFire2
00012952 76F8                       		moveq	#-8,d3
00012954 6100 0000                  		bsr.w	ObjHitWallLeft
00012958 4A41                       		tst.w	d1
0001295A 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001295E 4E75                       		rts	
00012960                            ; ===========================================================================
00012960                            
00012960                            Obj62_StopFire2:
00012960 7608                       		moveq	#8,d3
00012962 6100 0000                  		bsr.w	ObjHitWallRight
00012966 4A41                       		tst.w	d1
00012968 6B00 B356                  		bmi.w	DeleteObject
0001296C 4E75                       		rts	
0001296E                            ; ===========================================================================
0001296E                            ; ---------------------------------------------------------------------------
0001296E                            ; Sprite mappings - gargoyle head (LZ)
0001296E                            ; ---------------------------------------------------------------------------
0001296E                            Map_obj62:
0001296E                            	include "_maps\obj62.asm"
0001296E                            ; ---------------------------------------------------------------------------
0001296E                            ; Sprite mappings - gargoyle head (LZ)
0001296E                            ; ---------------------------------------------------------------------------
0001296E 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012972 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012976 03                         byte_12320:	dc.b 3
00012977 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001297C F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012981 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012986 01                         byte_12330:	dc.b 1
00012987 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001298C 01                         byte_12336:	dc.b 1
0001298D FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012992                            		even
00012992                            		even
00012992                            
00012992                            ; ===========================================================================
00012992                            ; ---------------------------------------------------------------------------
00012992                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012992                            ; ---------------------------------------------------------------------------
00012992                            
00012992                            Obj63:					; XREF: Obj_Index
00012992 7000                       		moveq	#0,d0
00012994 1028 0024                  		move.b	$24(a0),d0
00012998 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
0001299C 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
000129A0 3028 0030                  		move.w	$30(a0),d0
000129A4 0240 FF80                  		andi.w	#$FF80,d0
000129A8 3238 F700                  		move.w	($FFFFF700).w,d1
000129AC 0441 0080                  		subi.w	#$80,d1
000129B0 0241 FF80                  		andi.w	#$FF80,d1
000129B4 9041                       		sub.w	d1,d0
000129B6 0C40 0280                  		cmpi.w	#$280,d0
000129BA 6200                       		bhi.s	loc_1236A
000129BC                            
000129BC                            Obj63_Display:				; XREF: loc_1236A
000129BC 6000 B2C6                  		bra.w	DisplaySprite
000129C0                            ; ===========================================================================
000129C0                            
000129C0                            loc_1236A:				; XREF: Obj63
000129C0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000129C6 6600                       		bne.s	loc_12378
000129C8 0C40 FF80                  		cmpi.w	#-$80,d0
000129CC 64EE                       		bcc.s	Obj63_Display
000129CE                            
000129CE                            loc_12378:
000129CE 1028 002F                  		move.b	$2F(a0),d0
000129D2 6A00 B2EC                  		bpl.w	DeleteObject
000129D6 0240 007F                  		andi.w	#$7F,d0
000129DA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000129DE 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000129E4 6000 B2DA                  		bra.w	DeleteObject
000129E8                            ; ===========================================================================
000129E8 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000129EA 0000                       		dc.w loc_124B2-Obj63_Index
000129EC 0000                       		dc.w loc_124C2-Obj63_Index
000129EE 0000                       		dc.w loc_124DE-Obj63_Index
000129F0                            ; ===========================================================================
000129F0                            
000129F0                            Obj63_Main:				; XREF: Obj63_Index
000129F0 1028 0028                  		move.b	$28(a0),d0
000129F4 6B00 0000                  		bmi.w	loc_12460
000129F8 5428 0024                  		addq.b	#2,$24(a0)
000129FC 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012A04 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012A0A 0028 0004 0001             		ori.b	#4,1(a0)
00012A10 117C 0010 0019             		move.b	#$10,$19(a0)
00012A16 117C 0004 0018             		move.b	#4,$18(a0)
00012A1C 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012A22 6600                       		bne.s	loc_123E2
00012A24 5828 0024                  		addq.b	#4,$24(a0)
00012A28 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012A2E 117C 0001 0018             		move.b	#1,$18(a0)
00012A34 6000 0000                  		bra.w	loc_124DE
00012A38                            ; ===========================================================================
00012A38                            
00012A38                            loc_123E2:
00012A38 117C 0004 001A             		move.b	#4,$1A(a0)
00012A3E 7000                       		moveq	#0,d0
00012A40 1028 0028                  		move.b	$28(a0),d0
00012A44 3200                       		move.w	d0,d1
00012A46 E648                       		lsr.w	#3,d0
00012A48 0240 001E                  		andi.w	#$1E,d0
00012A4C 45FA 0000                  		lea	Obj63_Data(pc),a2
00012A50 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012A54 315A 0038                  		move.w	(a2)+,$38(a0)
00012A58 315A 0030                  		move.w	(a2)+,$30(a0)
00012A5C 214A 003C                  		move.l	a2,$3C(a0)
00012A60 0241 000F                  		andi.w	#$F,d1
00012A64 E549                       		lsl.w	#2,d1
00012A66 1141 0038                  		move.b	d1,$38(a0)
00012A6A 117C 0004 003A             		move.b	#4,$3A(a0)
00012A70 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012A74 6700                       		beq.s	loc_1244C
00012A76 117C 0001 003B             		move.b	#1,$3B(a0)
00012A7C 4428 003A                  		neg.b	$3A(a0)
00012A80 7200                       		moveq	#0,d1
00012A82 1228 0038                  		move.b	$38(a0),d1
00012A86 D228 003A                  		add.b	$3A(a0),d1
00012A8A B228 0039                  		cmp.b	$39(a0),d1
00012A8E 6500                       		bcs.s	loc_12448
00012A90 1001                       		move.b	d1,d0
00012A92 7200                       		moveq	#0,d1
00012A94 4A00                       		tst.b	d0
00012A96 6A00                       		bpl.s	loc_12448
00012A98 1228 0039                  		move.b	$39(a0),d1
00012A9C 5901                       		subq.b	#4,d1
00012A9E                            
00012A9E                            loc_12448:
00012A9E 1141 0038                  		move.b	d1,$38(a0)
00012AA2                            
00012AA2                            loc_1244C:
00012AA2 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012AA8 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012AAE 6100 0000                  		bsr.w	Obj63_ChangeDir
00012AB2 6000 0000                  		bra.w	loc_124B2
00012AB6                            ; ===========================================================================
00012AB6                            
00012AB6                            loc_12460:				; XREF: Obj63_Main
00012AB6 1140 002F                  		move.b	d0,$2F(a0)
00012ABA 0240 007F                  		andi.w	#$7F,d0
00012ABE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012AC2 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012AC8 6600 B1F6                  		bne.w	DeleteObject
00012ACC D040                       		add.w	d0,d0
00012ACE 0240 001E                  		andi.w	#$1E,d0
00012AD2 0640 0070                  		addi.w	#$70,d0
00012AD6 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012ADC D4F2 0000                  		adda.w	(a2,d0.w),a2
00012AE0 321A                       		move.w	(a2)+,d1
00012AE2 2248                       		movea.l	a0,a1
00012AE4 6000                       		bra.s	Obj63_MakePtfms
00012AE6                            ; ===========================================================================
00012AE6                            
00012AE6                            Obj63_Loop:
00012AE6 6100 B622                  		bsr.w	SingleObjLoad
00012AEA 6600                       		bne.s	loc_124AA
00012AEC                            
00012AEC                            Obj63_MakePtfms:			; XREF: loc_12460
00012AEC 12BC 0063                  		move.b	#$63,0(a1)
00012AF0 335A 0008                  		move.w	(a2)+,8(a1)
00012AF4 335A 000C                  		move.w	(a2)+,$C(a1)
00012AF8 301A                       		move.w	(a2)+,d0
00012AFA 1340 0028                  		move.b	d0,$28(a1)
00012AFE                            
00012AFE                            loc_124AA:
00012AFE 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012B02                            
00012B02 588F                       		addq.l	#4,sp
00012B04 4E75                       		rts	
00012B06                            ; ===========================================================================
00012B06                            
00012B06                            loc_124B2:				; XREF: Obj63_Index
00012B06 7200                       		moveq	#0,d1
00012B08 1228 0019                  		move.b	$19(a0),d1
00012B0C 4EB9 0000 79A0             		jsr	(PlatformObject).l
00012B12 6000 0000                  		bra.w	sub_12502
00012B16                            ; ===========================================================================
00012B16                            
00012B16                            loc_124C2:				; XREF: Obj63_Index
00012B16 7200                       		moveq	#0,d1
00012B18 1228 0019                  		move.b	$19(a0),d1
00012B1C 4EB9 0000 7B14             		jsr	(ExitPlatform).l
00012B22 3F28 0008                  		move.w	8(a0),-(sp)
00012B26 6100 0000                  		bsr.w	sub_12502
00012B2A 341F                       		move.w	(sp)+,d2
00012B2C 4EF9 0000 807E             		jmp	(MvSonicOnPtfm2).l
00012B32                            ; ===========================================================================
00012B32                            
00012B32                            loc_124DE:				; XREF: Obj63_Index
00012B32 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012B36 0240 0003                  		andi.w	#3,d0
00012B3A 6600                       		bne.s	loc_124FC
00012B3C 7201                       		moveq	#1,d1
00012B3E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012B42 6700                       		beq.s	loc_124F2
00012B44 4401                       		neg.b	d1
00012B46                            
00012B46                            loc_124F2:
00012B46 D328 001A                  		add.b	d1,$1A(a0)
00012B4A 0228 0003 001A             		andi.b	#3,$1A(a0)
00012B50                            
00012B50                            loc_124FC:
00012B50 588F                       		addq.l	#4,sp
00012B52 6000 D1D8                  		bra.w	MarkObjGone
00012B56                            
00012B56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012B56                            
00012B56                            
00012B56                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012B56 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012B5A 6700                       		beq.s	loc_12520
00012B5C 4A28 003B                  		tst.b	$3B(a0)
00012B60 6600                       		bne.s	loc_12520
00012B62 117C 0001 003B             		move.b	#1,$3B(a0)
00012B68 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012B6E 4428 003A                  		neg.b	$3A(a0)
00012B72 6000                       		bra.s	loc_12534
00012B74                            ; ===========================================================================
00012B74                            
00012B74                            loc_12520:
00012B74 3028 0008                  		move.w	8(a0),d0
00012B78 B068 0034                  		cmp.w	$34(a0),d0
00012B7C 6600                       		bne.s	loc_1256A
00012B7E 3028 000C                  		move.w	$C(a0),d0
00012B82 B068 0036                  		cmp.w	$36(a0),d0
00012B86 6600                       		bne.s	loc_1256A
00012B88                            
00012B88                            loc_12534:
00012B88 7200                       		moveq	#0,d1
00012B8A 1228 0038                  		move.b	$38(a0),d1
00012B8E D228 003A                  		add.b	$3A(a0),d1
00012B92 B228 0039                  		cmp.b	$39(a0),d1
00012B96 6500                       		bcs.s	loc_12552
00012B98 1001                       		move.b	d1,d0
00012B9A 7200                       		moveq	#0,d1
00012B9C 4A00                       		tst.b	d0
00012B9E 6A00                       		bpl.s	loc_12552
00012BA0 1228 0039                  		move.b	$39(a0),d1
00012BA4 5901                       		subq.b	#4,d1
00012BA6                            
00012BA6                            loc_12552:
00012BA6 1141 0038                  		move.b	d1,$38(a0)
00012BAA 2268 003C                  		movea.l	$3C(a0),a1
00012BAE 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012BB4 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012BBA 6100 0000                  		bsr.w	Obj63_ChangeDir
00012BBE                            
00012BBE                            loc_1256A:
00012BBE 6100 B09E                  		bsr.w	SpeedToPos
00012BC2 4E75                       		rts	
00012BC4                            ; End of function sub_12502
00012BC4                            
00012BC4                            
00012BC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012BC4                            
00012BC4                            
00012BC4                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012BC4 7000                       		moveq	#0,d0
00012BC6 343C FF00                  		move.w	#-$100,d2
00012BCA 3028 0008                  		move.w	8(a0),d0
00012BCE 9068 0034                  		sub.w	$34(a0),d0
00012BD2 6400                       		bcc.s	loc_12584
00012BD4 4440                       		neg.w	d0
00012BD6 4442                       		neg.w	d2
00012BD8                            
00012BD8                            loc_12584:
00012BD8 7200                       		moveq	#0,d1
00012BDA 363C FF00                  		move.w	#-$100,d3
00012BDE 3228 000C                  		move.w	$C(a0),d1
00012BE2 9268 0036                  		sub.w	$36(a0),d1
00012BE6 6400                       		bcc.s	loc_12598
00012BE8 4441                       		neg.w	d1
00012BEA 4443                       		neg.w	d3
00012BEC                            
00012BEC                            loc_12598:
00012BEC B240                       		cmp.w	d0,d1
00012BEE 6500                       		bcs.s	loc_125C2
00012BF0 3028 0008                  		move.w	8(a0),d0
00012BF4 9068 0034                  		sub.w	$34(a0),d0
00012BF8 6700                       		beq.s	loc_125AE
00012BFA 48C0                       		ext.l	d0
00012BFC E180                       		asl.l	#8,d0
00012BFE 81C1                       		divs.w	d1,d0
00012C00 4440                       		neg.w	d0
00012C02                            
00012C02                            loc_125AE:
00012C02 3140 0010                  		move.w	d0,$10(a0)
00012C06 3143 0012                  		move.w	d3,$12(a0)
00012C0A 4840                       		swap	d0
00012C0C 3140 000A                  		move.w	d0,$A(a0)
00012C10 4268 000E                  		clr.w	$E(a0)
00012C14 4E75                       		rts	
00012C16                            ; ===========================================================================
00012C16                            
00012C16                            loc_125C2:				; XREF: Obj63_ChangeDir
00012C16 3228 000C                  		move.w	$C(a0),d1
00012C1A 9268 0036                  		sub.w	$36(a0),d1
00012C1E 6700                       		beq.s	loc_125D4
00012C20 48C1                       		ext.l	d1
00012C22 E181                       		asl.l	#8,d1
00012C24 83C0                       		divs.w	d0,d1
00012C26 4441                       		neg.w	d1
00012C28                            
00012C28                            loc_125D4:
00012C28 3141 0012                  		move.w	d1,$12(a0)
00012C2C 3142 0010                  		move.w	d2,$10(a0)
00012C30 4841                       		swap	d1
00012C32 3141 000E                  		move.w	d1,$E(a0)
00012C36 4268 000A                  		clr.w	$A(a0)
00012C3A 4E75                       		rts	
00012C3C                            ; End of function Obj63_ChangeDir
00012C3C                            
00012C3C                            ; ===========================================================================
00012C3C 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012C3E 0000                       		dc.w word_12610-Obj63_Data
00012C40 0000                       		dc.w word_12628-Obj63_Data
00012C42 0000                       		dc.w word_1263C-Obj63_Data
00012C44 0000                       		dc.w word_12650-Obj63_Data
00012C46 0000                       		dc.w word_12668-Obj63_Data
00012C48 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012C58 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012C64 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012C74 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012C7C 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012C90 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012CA4 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012CBC 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012CD0                            
00012CD0                            ; ---------------------------------------------------------------------------
00012CD0                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012CD0                            ; ---------------------------------------------------------------------------
00012CD0                            Map_obj63:
00012CD0                            	include "_maps\obj63.asm"
00012CD0                            ; ---------------------------------------------------------------------------
00012CD0                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012CD0                            ; ---------------------------------------------------------------------------
00012CD0 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012CD4 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012CD8 0000                       		dc.w byte_1269E-Map_obj63
00012CDA 01                         byte_12686:	dc.b 1
00012CDB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012CE0 01                         byte_1268C:	dc.b 1
00012CE1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012CE6 01                         byte_12692:	dc.b 1
00012CE7 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012CEC 01                         byte_12698:	dc.b 1
00012CED F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012CF2 01                         byte_1269E:	dc.b 1
00012CF3 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012CF8                            		even
00012CF8                            		even
00012CF8                            
00012CF8                            ; ===========================================================================
00012CF8                            ; ---------------------------------------------------------------------------
00012CF8                            ; Object 64 - bubbles (LZ)
00012CF8                            ; ---------------------------------------------------------------------------
00012CF8                            
00012CF8                            Obj64:					; XREF: Obj_Index
00012CF8 7000                       		moveq	#0,d0
00012CFA 1028 0024                  		move.b	$24(a0),d0
00012CFE 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012D02 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012D06                            ; ===========================================================================
00012D06 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012D08 0000                       		dc.w Obj64_Animate-Obj64_Index
00012D0A 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012D0C 0000                       		dc.w Obj64_Display2-Obj64_Index
00012D0E 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012D10 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012D12                            ; ===========================================================================
00012D12                            
00012D12                            Obj64_Main:				; XREF: Obj64_Index
00012D12 5428 0024                  		addq.b	#2,$24(a0)
00012D16 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012D1E 317C 8348 0002             		move.w	#$8348,2(a0)
00012D24 117C 0084 0001             		move.b	#$84,1(a0)
00012D2A 117C 0010 0019             		move.b	#$10,$19(a0)
00012D30 117C 0001 0018             		move.b	#1,$18(a0)
00012D36 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D3A 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012D3C 5028 0024                  		addq.b	#8,$24(a0)
00012D40 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012D44 1140 0032                  		move.b	d0,$32(a0)
00012D48 1140 0033                  		move.b	d0,$33(a0)
00012D4C 117C 0006 001C             		move.b	#6,$1C(a0)
00012D52 6000 0000                  		bra.w	Obj64_BblMaker
00012D56                            ; ===========================================================================
00012D56                            
00012D56                            Obj64_Bubble:				; XREF: Obj64_Main
00012D56 1140 001C                  		move.b	d0,$1C(a0)
00012D5A 3168 0008 0030             		move.w	8(a0),$30(a0)
00012D60 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012D66 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012D6C 1140 0026                  		move.b	d0,$26(a0)
00012D70                            
00012D70                            Obj64_Animate:				; XREF: Obj64_Index
00012D70 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012D76 4EB9 0000 AD44             		jsr	AnimateSprite
00012D7C 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012D82 6600                       		bne.s	Obj64_ChkWater
00012D84 117C 0001 002E             		move.b	#1,$2E(a0)
00012D8A                            
00012D8A                            Obj64_ChkWater:				; XREF: Obj64_Index
00012D8A 3038 F646                  		move.w	($FFFFF646).w,d0
00012D8E B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012D92 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012D94                            
00012D94                            Obj64_Burst:				; XREF: Obj64_Wobble
00012D94 117C 0006 0024             		move.b	#6,$24(a0)
00012D9A 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012D9E 6000 0000                  		bra.w	Obj64_Display2
00012DA2                            ; ===========================================================================
00012DA2                            
00012DA2                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012DA2 1028 0026                  		move.b	$26(a0),d0
00012DA6 5228 0026                  		addq.b	#1,$26(a0)
00012DAA 0240 007F                  		andi.w	#$7F,d0
00012DAE 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012DB4 1031 0000                  		move.b	(a1,d0.w),d0
00012DB8 4880                       		ext.w	d0
00012DBA D068 0030                  		add.w	$30(a0),d0
00012DBE 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012DC2 4A28 002E                  		tst.b	$2E(a0)
00012DC6 6700                       		beq.s	Obj64_Display
00012DC8 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012DCC 6700                       		beq.s	Obj64_Display	; if not, branch
00012DCE                            
00012DCE 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012DD2 303C 00AD                  		move.w	#$AD,d0
00012DD6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012DDC 43F8 D000                  		lea	($FFFFD000).w,a1
00012DE0 4269 0010                  		clr.w	$10(a1)
00012DE4 4269 0012                  		clr.w	$12(a1)
00012DE8 4269 0014                  		clr.w	$14(a1)
00012DEC 137C 0015 001C             		move.b	#$15,$1C(a1)
00012DF2 337C 0023 003E             		move.w	#$23,$3E(a1)
00012DF8 137C 0000 003C             		move.b	#0,$3C(a1)
00012DFE 08A9 0005 0022             		bclr	#5,$22(a1)
00012E04 08A9 0004 0022             		bclr	#4,$22(a1)
00012E0A 0829 0002 0022             		btst	#2,$22(a1)
00012E10 6700 FF82                  		beq.w	Obj64_Burst
00012E14 08A9 0002 0022             		bclr	#2,$22(a1)
00012E1A 137C 0013 0016             		move.b	#$13,$16(a1)
00012E20 137C 0009 0017             		move.b	#9,$17(a1)
00012E26 5B69 000C                  		subq.w	#5,$C(a1)
00012E2A 6000 FF68                  		bra.w	Obj64_Burst
00012E2E                            ; ===========================================================================
00012E2E                            
00012E2E                            Obj64_Display:				; XREF: Obj64_Wobble
00012E2E 6100 AE2E                  		bsr.w	SpeedToPos
00012E32 4A28 0001                  		tst.b	1(a0)
00012E36 6A00                       		bpl.s	Obj64_Delete
00012E38 4EFA AE4A                  		jmp	DisplaySprite
00012E3C                            ; ===========================================================================
00012E3C                            
00012E3C                            Obj64_Delete:
00012E3C 4EFA AE82                  		jmp	DeleteObject
00012E40                            ; ===========================================================================
00012E40                            
00012E40                            Obj64_Display2:				; XREF: Obj64_Index
00012E40 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012E46 4EB9 0000 AD44             		jsr	AnimateSprite
00012E4C 4A28 0001                  		tst.b	1(a0)
00012E50 6A00                       		bpl.s	Obj64_Delete2
00012E52 4EFA AE30                  		jmp	DisplaySprite
00012E56                            ; ===========================================================================
00012E56                            
00012E56                            Obj64_Delete2:
00012E56 4EFA AE68                  		jmp	DeleteObject
00012E5A                            ; ===========================================================================
00012E5A                            
00012E5A                            Obj64_Delete3:				; XREF: Obj64_Index
00012E5A 6000 AE64                  		bra.w	DeleteObject
00012E5E                            ; ===========================================================================
00012E5E                            
00012E5E                            Obj64_BblMaker:				; XREF: Obj64_Index
00012E5E 4A68 0036                  		tst.w	$36(a0)
00012E62 6600                       		bne.s	loc_12874
00012E64 3038 F646                  		move.w	($FFFFF646).w,d0
00012E68 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012E6C 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012E70 4A28 0001                  		tst.b	1(a0)
00012E74 6A00 0000                  		bpl.w	Obj64_ChkDel
00012E78 5368 0038                  		subq.w	#1,$38(a0)
00012E7C 6A00 0000                  		bpl.w	loc_12914
00012E80 317C 0001 0036             		move.w	#1,$36(a0)
00012E86                            
00012E86                            loc_1283A:
00012E86 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012E8C 3200                       		move.w	d0,d1
00012E8E 0240 0007                  		andi.w	#7,d0
00012E92 0C40 0006                  		cmpi.w	#6,d0
00012E96 64EE                       		bcc.s	loc_1283A
00012E98                            
00012E98 1140 0034                  		move.b	d0,$34(a0)
00012E9C 0241 000C                  		andi.w	#$C,d1
00012EA0 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012EA6 D2C1                       		adda.w	d1,a1
00012EA8 2149 003C                  		move.l	a1,$3C(a0)
00012EAC 5328 0032                  		subq.b	#1,$32(a0)
00012EB0 6A00                       		bpl.s	loc_12872
00012EB2 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012EB8 08E8 0007 0036             		bset	#7,$36(a0)
00012EBE                            
00012EBE                            loc_12872:
00012EBE 6000                       		bra.s	loc_1287C
00012EC0                            ; ===========================================================================
00012EC0                            
00012EC0                            loc_12874:				; XREF: Obj64_BblMaker
00012EC0 5368 0038                  		subq.w	#1,$38(a0)
00012EC4 6A00 0000                  		bpl.w	loc_12914
00012EC8                            
00012EC8                            loc_1287C:
00012EC8 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012ECE 0240 001F                  		andi.w	#$1F,d0
00012ED2 3140 0038                  		move.w	d0,$38(a0)
00012ED6 6100 B232                  		bsr.w	SingleObjLoad
00012EDA 6600                       		bne.s	loc_128F8
00012EDC 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012EE0 3368 0008 0008             		move.w	8(a0),8(a1)
00012EE6 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012EEC 0240 000F                  		andi.w	#$F,d0
00012EF0 5140                       		subq.w	#8,d0
00012EF2 D169 0008                  		add.w	d0,8(a1)
00012EF6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012EFC 7000                       		moveq	#0,d0
00012EFE 1028 0034                  		move.b	$34(a0),d0
00012F02 2468 003C                  		movea.l	$3C(a0),a2
00012F06 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012F0C 0828 0007 0036             		btst	#7,$36(a0)
00012F12 6700                       		beq.s	loc_128F8
00012F14 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012F1A 0240 0003                  		andi.w	#3,d0
00012F1E 6600                       		bne.s	loc_128E4
00012F20 08E8 0006 0036             		bset	#6,$36(a0)
00012F26 6600                       		bne.s	loc_128F8
00012F28 137C 0002 0028             		move.b	#2,$28(a1)
00012F2E                            
00012F2E                            loc_128E4:
00012F2E 4A28 0034                  		tst.b	$34(a0)
00012F32 6600                       		bne.s	loc_128F8
00012F34 08E8 0006 0036             		bset	#6,$36(a0)
00012F3A 6600                       		bne.s	loc_128F8
00012F3C 137C 0002 0028             		move.b	#2,$28(a1)
00012F42                            
00012F42                            loc_128F8:
00012F42 5328 0034                  		subq.b	#1,$34(a0)
00012F46 6A00                       		bpl.s	loc_12914
00012F48 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012F4E 0240 007F                  		andi.w	#$7F,d0
00012F52 0640 0080                  		addi.w	#$80,d0
00012F56 D168 0038                  		add.w	d0,$38(a0)
00012F5A 4268 0036                  		clr.w	$36(a0)
00012F5E                            
00012F5E                            loc_12914:
00012F5E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012F64 4EB9 0000 AD44             		jsr	AnimateSprite
00012F6A                            
00012F6A                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012F6A 3028 0008                  		move.w	8(a0),d0
00012F6E 0240 FF80                  		andi.w	#$FF80,d0
00012F72 3238 F700                  		move.w	($FFFFF700).w,d1
00012F76 0441 0080                  		subi.w	#$80,d1
00012F7A 0241 FF80                  		andi.w	#$FF80,d1
00012F7E 9041                       		sub.w	d1,d0
00012F80 0C40 0280                  		cmpi.w	#$280,d0
00012F84 6200 AD3A                  		bhi.w	DeleteObject
00012F88 3038 F646                  		move.w	($FFFFF646).w,d0
00012F8C B068 000C                  		cmp.w	$C(a0),d0
00012F90 6500 ACF2                  		bcs.w	DisplaySprite
00012F94 4E75                       		rts	
00012F96                            ; ===========================================================================
00012F96                            ; bubble production sequence
00012F96                            
00012F96                            ; 0 = small bubble, 1 =	large bubble
00012F96                            
00012F96 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012FA8                            
00012FA8                            ; ===========================================================================
00012FA8                            
00012FA8                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012FA8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012FAC 6B00                       		bmi.s	loc_12998
00012FAE 43F8 D000                  		lea	($FFFFD000).w,a1
00012FB2 3029 0008                  		move.w	8(a1),d0
00012FB6 3228 0008                  		move.w	8(a0),d1
00012FBA 0441 0010                  		subi.w	#$10,d1
00012FBE B240                       		cmp.w	d0,d1
00012FC0 6400                       		bcc.s	loc_12998
00012FC2 0641 0020                  		addi.w	#$20,d1
00012FC6 B240                       		cmp.w	d0,d1
00012FC8 6500                       		bcs.s	loc_12998
00012FCA 3029 000C                  		move.w	$C(a1),d0
00012FCE 3228 000C                  		move.w	$C(a0),d1
00012FD2 B240                       		cmp.w	d0,d1
00012FD4 6400                       		bcc.s	loc_12998
00012FD6 0641 0010                  		addi.w	#$10,d1
00012FDA B240                       		cmp.w	d0,d1
00012FDC 6500                       		bcs.s	loc_12998
00012FDE 7001                       		moveq	#1,d0
00012FE0 4E75                       		rts	
00012FE2                            ; ===========================================================================
00012FE2                            
00012FE2                            loc_12998:
00012FE2 7000                       		moveq	#0,d0
00012FE4 4E75                       		rts	
00012FE6                            ; ===========================================================================
00012FE6                            Ani_obj64:
00012FE6                            	include "_anim\obj64.asm"
00012FE6                            ; ---------------------------------------------------------------------------
00012FE6                            ; Animation script - bubbles (LZ)
00012FE6                            ; ---------------------------------------------------------------------------
00012FE6 0000                       		dc.w byte_129AA-Ani_obj64
00012FE8 0000                       		dc.w byte_129B0-Ani_obj64
00012FEA 0000                       		dc.w byte_129B6-Ani_obj64
00012FEC 0000                       		dc.w byte_129BE-Ani_obj64
00012FEE 0000                       		dc.w byte_129BE-Ani_obj64
00012FF0 0000                       		dc.w byte_129C0-Ani_obj64
00012FF2 0000                       		dc.w byte_129C6-Ani_obj64
00012FF4 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012FFA 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013000 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00013008 04FC                       byte_129BE:	dc.b 4,	$FC
0001300A 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013010 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013016 00                         		even
00013016 00                         		even
00013016                            
00013016                            ; ---------------------------------------------------------------------------
00013016                            ; Sprite mappings - bubbles (LZ)
00013016                            ; ---------------------------------------------------------------------------
00013016                            Map_obj64:
00013016                            	include "_maps\obj64.asm"
00013016                            ; ---------------------------------------------------------------------------
00013016                            ; Sprite mappings - bubbles (LZ)
00013016                            ; ---------------------------------------------------------------------------
00013016 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001301A 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
0001301E 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013022 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013026 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
0001302A 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
0001302E 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013032 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013036 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001303A 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
0001303E 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013042 0000                       		dc.w byte_12A9C-Map_obj64
00013044 01                         byte_129FA:	dc.b 1
00013045 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001304A 01                         byte_12A00:	dc.b 1
0001304B FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013050 01                         byte_12A06:	dc.b 1
00013051 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013056 01                         byte_12A0C:	dc.b 1
00013057 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001305C 01                         byte_12A12:	dc.b 1
0001305D F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013062 01                         byte_12A18:	dc.b 1
00013063 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013068 01                         byte_12A1E:	dc.b 1
00013069 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001306E 04                         byte_12A24:	dc.b 4
0001306F F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013074 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013079 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001307E 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013083 04                         byte_12A39:	dc.b 4
00013084 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013089 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001308E 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013093 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013098 01                         byte_12A4E:	dc.b 1
00013099 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001309E 01                         byte_12A54:	dc.b 1
0001309F F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
000130A4 01                         byte_12A5A:	dc.b 1
000130A5 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
000130AA 01                         byte_12A60:	dc.b 1
000130AB F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
000130B0 01                         byte_12A66:	dc.b 1
000130B1 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000130B6 01                         byte_12A6C:	dc.b 1
000130B7 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000130BC 01                         byte_12A72:	dc.b 1
000130BD F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000130C2 01                         byte_12A78:	dc.b 1
000130C3 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000130C8 01                         byte_12A7E:	dc.b 1
000130C9 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000130CE 01                         byte_12A84:	dc.b 1
000130CF F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000130D4 01                         byte_12A8A:	dc.b 1
000130D5 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000130DA 01                         byte_12A90:	dc.b 1
000130DB F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000130E0 01                         byte_12A96:	dc.b 1
000130E1 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000130E6 00                         byte_12A9C:	dc.b 0
000130E8 00                         		even
000130E8 00                         		even
000130E8                            
000130E8                            ; ===========================================================================
000130E8                            ; ---------------------------------------------------------------------------
000130E8                            ; Object 65 - waterfalls (LZ)
000130E8                            ; ---------------------------------------------------------------------------
000130E8                            
000130E8                            Obj65:					; XREF: Obj_Index
000130E8 7000                       		moveq	#0,d0
000130EA 1028 0024                  		move.b	$24(a0),d0
000130EE 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000130F2 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000130F6                            ; ===========================================================================
000130F6 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000130F8 0000                       		dc.w Obj65_Animate-Obj65_Index
000130FA 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000130FC 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000130FE 0000                       		dc.w loc_12B36-Obj65_Index
00013100                            ; ===========================================================================
00013100                            
00013100                            Obj65_Main:				; XREF: Obj65_Index
00013100 5828 0024                  		addq.b	#4,$24(a0)
00013104 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
0001310C 317C 4259 0002             		move.w	#$4259,2(a0)
00013112 0028 0004 0001             		ori.b	#4,1(a0)
00013118 117C 0018 0019             		move.b	#$18,$19(a0)
0001311E 117C 0001 0018             		move.b	#1,$18(a0)
00013124 1028 0028                  		move.b	$28(a0),d0	; get object type
00013128 6A00                       		bpl.s	loc_12AE6
0001312A 08E8 0007 0002             		bset	#7,2(a0)
00013130                            
00013130                            loc_12AE6:
00013130 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013134 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013138 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
0001313C 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001313E 4228 0018                  		clr.b	$18(a0)
00013142 5528 0024                  		subq.b	#2,$24(a0)
00013146 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
0001314C 6700                       		beq.s	loc_12B0A	; if not, branch
0001314E 117C 0006 0024             		move.b	#6,$24(a0)
00013154                            
00013154                            loc_12B0A:
00013154 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001315A 6700                       		beq.s	Obj65_Animate	; if not, branch
0001315C 117C 0008 0024             		move.b	#8,$24(a0)
00013162                            
00013162                            Obj65_Animate:				; XREF: Obj65_Index
00013162 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013168 4EB9 0000 AD44             		jsr	AnimateSprite
0001316E                            
0001316E                            Obj65_ChkDel:				; XREF: Obj65_Index
0001316E 6000 CBBC                  		bra.w	MarkObjGone
00013172                            ; ===========================================================================
00013172                            
00013172                            Obj65_FixHeight:			; XREF: Obj65_Index
00013172 3038 F646                  		move.w	($FFFFF646).w,d0
00013176 0440 0010                  		subi.w	#$10,d0
0001317A 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001317E 60E2                       		bra.s	Obj65_Animate
00013180                            ; ===========================================================================
00013180                            
00013180                            loc_12B36:				; XREF: Obj65_Index
00013180 08A8 0007 0002             		bclr	#7,2(a0)
00013186 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001318C 6600                       		bne.s	Obj65_Animate2
0001318E 08E8 0007 0002             		bset	#7,2(a0)
00013194                            
00013194                            Obj65_Animate2:
00013194 60CC                       		bra.s	Obj65_Animate
00013196                            ; ===========================================================================
00013196                            Ani_obj65:
00013196                            	include "_anim\obj65.asm"
00013196                            ; ---------------------------------------------------------------------------
00013196                            ; Animation script - waterfall (LZ)
00013196                            ; ---------------------------------------------------------------------------
00013196 0000                       		dc.w byte_12B4E-Ani_obj65
00013198 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001319E 00                         		even
0001319E 00                         		even
0001319E                            
0001319E                            ; ---------------------------------------------------------------------------
0001319E                            ; Sprite mappings - waterfalls (LZ)
0001319E                            ; ---------------------------------------------------------------------------
0001319E                            Map_obj65:
0001319E                            	include "_maps\obj65.asm"
0001319E                            ; ---------------------------------------------------------------------------
0001319E                            ; Sprite mappings - waterfalls (LZ)
0001319E                            ; ---------------------------------------------------------------------------
0001319E 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000131A2 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000131A6 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000131AA 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000131AE 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000131B2 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000131B6 01                         byte_12B6C:	dc.b 1
000131B7 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000131BC 02                         byte_12B72:	dc.b 2
000131BD F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000131C2 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000131C7 02                         byte_12B7D:	dc.b 2
000131C8 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000131CD 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000131D2 01                         byte_12B88:	dc.b 1
000131D3 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000131D8 02                         byte_12B8E:	dc.b 2
000131D9 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000131DE 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000131E3 01                         byte_12B99:	dc.b 1
000131E4 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000131E9 01                         byte_12B9F:	dc.b 1
000131EA F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000131EF 01                         byte_12BA5:	dc.b 1
000131F0 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000131F5 02                         byte_12BAB:	dc.b 2
000131F6 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000131FB 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013200 02                         byte_12BB6:	dc.b 2
00013201 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013206 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001320B 02                         byte_12BC1:	dc.b 2
0001320C F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013211 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013216 02                         byte_12BCC:	dc.b 2
00013217 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
0001321C F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013222 00                         		even
00013222 00                         		even
00013222                            
00013222                            ; ===========================================================================
00013222                            ; ---------------------------------------------------------------------------
00013222                            ; Object 01 - Sonic
00013222                            ; ---------------------------------------------------------------------------
00013222                            
00013222                            Obj01:					; XREF: Obj_Index
00013222 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013226 6700                       		beq.s	Obj01_Normal	; if not, branch
00013228 4EF9 0000 0000             		jmp	DebugMode
0001322E                            ; ===========================================================================
0001322E                            
0001322E                            Obj01_Normal:
0001322E 7000                       		moveq	#0,d0
00013230 1028 0024                  		move.b	$24(a0),d0
00013234 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013238 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
0001323C                            ; ===========================================================================
0001323C 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001323E 0000                       		dc.w Obj01_Control-Obj01_Index
00013240 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013242 0000                       		dc.w Obj01_Death-Obj01_Index
00013244 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013246                            ; ===========================================================================
00013246                            
00013246                            Player_Maps:
00013246 0000 0000                  	dc.l	Map_Sonic
0001324A 0000 0000                  	dc.l	Map_Sonic ; gronic
0001324E                            	; insert player mapping here
0001324E                            	
0001324E                            Obj01_Main:				; XREF: Obj01_Index
0001324E 5428 0024                  		addq.b	#2,$24(a0)
00013252 117C 0013 0016             		move.b	#$13,$16(a0)
00013258 117C 0009 0017             		move.b	#9,$17(a0)
0001325E                            		
0001325E 7000                       		moveq	#0,d0
00013260 1038 FFE8                  		move.b	(v_character),d0
00013264 E548                       		lsl.w	#2,d0
00013266 43FA FFDE                  		lea 	Player_Maps(pc),a1
0001326A 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
00013270                            		
00013270 317C 0780 0002             		move.w	#$780,2(a0)
00013276 117C 0002 0018             		move.b	#2,$18(a0)
0001327C 117C 0018 0019             		move.b	#$18,$19(a0)
00013282 117C 0004 0001             		move.b	#4,1(a0)
00013288 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
0001328E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013294 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
0001329A                            
0001329A                            Obj01_Control:				; XREF: Obj01_Index
0001329A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001329E 6700                       		beq.s	loc_12C58	; if not, branch
000132A0 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000132A6 6700                       		beq.s	loc_12C58	; if not, branch
000132A8 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000132AE 4238 F7CC                  		clr.b	($FFFFF7CC).w
000132B2 4E75                       		rts	
000132B4                            ; ===========================================================================
000132B4                            
000132B4                            loc_12C58:
000132B4 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000132B8 6600                       		bne.s	loc_12C64	; if yes, branch
000132BA 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000132C0                            
000132C0                            loc_12C64:
000132C0 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000132C6 6600                       		bne.s	loc_12C7E	; if yes, branch
000132C8 7000                       		moveq	#0,d0
000132CA 1028 0022                  		move.b	$22(a0),d0
000132CE 0240 0006                  		andi.w	#6,d0
000132D2 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000132D6 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000132DA                            
000132DA                            loc_12C7E:
000132DA 6100                       		bsr.s	Sonic_Display
000132DC 6100 0000                  		bsr.w	Sonic_RecordPos
000132E0 6100 0000                  		bsr.w	Sonic_Water
000132E4 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000132EA 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000132F0 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000132F4 6700                       		beq.s	loc_12CA6
000132F6 4A28 001C                  		tst.b	$1C(a0)
000132FA 6600                       		bne.s	loc_12CA6
000132FC 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013302                            
00013302                            loc_12CA6:
00013302 6100 0000                  		bsr.w	Sonic_Animate
00013306 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001330A 6B00                       		bmi.s	loc_12CB6
0001330C 4EB9 0000 0000             		jsr	TouchResponse
00013312                            
00013312                            loc_12CB6:
00013312 6100 0000                  		bsr.w	Sonic_Loops
00013316 6100 0000                  		bsr.w	LoadSonicDynPLC
0001331A 4E75                       		rts	
0001331C                            ; ===========================================================================
0001331C 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001331E 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013320 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013322 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013324                            ; ---------------------------------------------------------------------------
00013324                            ; Music	to play	after invincibility wears off
00013324                            ; ---------------------------------------------------------------------------
00013324                            ; ===========================================================================
00013324                            
00013324                            Sonic_Display:				; XREF: loc_12C7E
00013324 3028 0030                  		move.w	$30(a0),d0
00013328 6700                       		beq.s	Obj01_Display
0001332A 5368 0030                  		subq.w	#1,$30(a0)
0001332E E648                       		lsr.w	#3,d0
00013330 6400                       		bcc.s	Obj01_ChkInvin
00013332                            
00013332                            Obj01_Display:
00013332 4EBA A950                  		jsr	DisplaySprite
00013336                            
00013336                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013336                             
00013336                            Obj01_ChkInvin:
00013336 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001333A 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
0001333E 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013342 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013346 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
0001334A 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
0001334E 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013352 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013356 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001335C 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013360 7000                       		moveq	#0,d0
00013362 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013366                             
00013366 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001336C 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
0001336E 43F9 0000 3B80             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013374 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013376                             
00013376                            Obj01_GetBgm2:
00013376 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001337C 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
0001337E 43F9 0000 3B88             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013384 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013386                             
00013386                            Obj01_GetBgm3:
00013386 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001338C 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001338E 43F9 0000 3B8E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013394 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013396                             
00013396                            Obj01_GetBgm4:
00013396 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001339C 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001339E 43F9 0000 3B94             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000133A4                             
000133A4                            Obj01_PlayMusic:
000133A4 1031 0000                  		move.b	(a1,d0.w),d0
000133A8 4EB9 0000 15BA             		jsr	(PlaySound).l	; play normal music
000133AE                             
000133AE                            ; NineKode ends here.
000133AE                            
000133AE                            Obj01_RmvInvin:
000133AE 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000133B4                            
000133B4                            Obj01_ChkShoes:
000133B4 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000133B8 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000133BA 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000133BE 6700                       		beq.s	Obj01_ExitChk
000133C0 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000133C4 6600                       		bne.s	Obj01_ExitChk
000133C6 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000133CC 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000133D2 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000133D8 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000133DE 303C 00E3                  		move.w	#$E3,d0
000133E2 4EF9 0000 15BA             		jmp	(PlaySound).l	; run music at normal speed
000133E8                            ; ===========================================================================
000133E8                            
000133E8                            Obj01_ExitChk:
000133E8 4E75                       		rts	
000133EA                            
000133EA                            ; ---------------------------------------------------------------------------
000133EA                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000133EA                            ; ---------------------------------------------------------------------------
000133EA                            
000133EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000133EA                            
000133EA                            
000133EA                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000133EA 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000133EE 43F8 CB00                  		lea	($FFFFCB00).w,a1
000133F2 43F1 0000                  		lea	(a1,d0.w),a1
000133F6 32E8 0008                  		move.w	8(a0),(a1)+
000133FA 32E8 000C                  		move.w	$C(a0),(a1)+
000133FE 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013402 4E75                       		rts	
00013404                            ; End of function Sonic_RecordPos
00013404                            
00013404                            ; ---------------------------------------------------------------------------
00013404                            ; Subroutine for Sonic when he's underwater
00013404                            ; ---------------------------------------------------------------------------
00013404                            
00013404                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013404                            
00013404                            
00013404                            Sonic_Water:				; XREF: loc_12C7E
00013404 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001340A 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001340C                            
0001340C                            locret_12D80:
0001340C 4E75                       		rts	
0001340E                            ; ===========================================================================
0001340E                            
0001340E                            Obj01_InWater:
0001340E 3038 F646                  		move.w	($FFFFF646).w,d0
00013412 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013416 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013418 08E8 0006 0022             		bset	#6,$22(a0)
0001341E 66EC                       		bne.s	locret_12D80
00013420 6100 0000                  		bsr.w	ResumeMusic
00013424 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001342A 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013430 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013436 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001343C 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013442 E0E8 0010                  		asr	$10(a0)
00013446 E0E8 0012                  		asr	$12(a0)
0001344A E0E8 0012                  		asr	$12(a0)
0001344E 67BC                       		beq.s	locret_12D80
00013450 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013456 303C 00AA                  		move.w	#$AA,d0
0001345A 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
00013460                            ; ===========================================================================
00013460                            
00013460                            Obj01_OutWater:
00013460 08A8 0006 0022             		bclr	#6,$22(a0)
00013466 67A4                       		beq.s	locret_12D80
00013468 6100 0000                  		bsr.w	ResumeMusic
0001346C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013472 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013478 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001347E E1E8 0012                  		asl	$12(a0)
00013482 6700 FF88                  		beq.w	locret_12D80
00013486 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001348C 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013492 6E00                       		bgt.s	loc_12E0E
00013494 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001349A                            
0001349A                            loc_12E0E:
0001349A 303C 00AA                  		move.w	#$AA,d0
0001349E 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
000134A4                            ; End of function Sonic_Water
000134A4                            
000134A4                            ; ===========================================================================
000134A4                            ; ---------------------------------------------------------------------------
000134A4                            ; Modes	for controlling	Sonic
000134A4                            ; ---------------------------------------------------------------------------
000134A4                            
000134A4                            Obj01_MdNormal:				; XREF: Obj01_Modes
000134A4 6100 0000                  		bsr.w	Sonic_Jump
000134A8 6100 0000                  		bsr.w	Sonic_SlopeResist
000134AC 6100 0000                  		bsr.w	Sonic_Move
000134B0 6100 0000                  		bsr.w	Sonic_Roll
000134B4 6100 0000                  		bsr.w	Sonic_LevelBound
000134B8 4EBA A7A4                  		jsr	SpeedToPos
000134BC 6100 0000                  		bsr.w	Sonic_AnglePos
000134C0 6100 0000                  		bsr.w	Sonic_SlopeRepel
000134C4 4E75                       		rts	
000134C6                            ; ===========================================================================
000134C6                            
000134C6                            Obj01_MdJump:				; XREF: Obj01_Modes
000134C6 6100 0000                  		bsr.w	Sonic_JumpHeight
000134CA 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000134CE 6100 0000                  		bsr.w	Sonic_LevelBound
000134D2 4EBA A75E                  		jsr	ObjectFall
000134D6 0828 0006 0022             		btst	#6,$22(a0)
000134DC 6700                       		beq.s	loc_12E5C
000134DE 0468 0028 0012             		subi.w	#$28,$12(a0)
000134E4                            
000134E4                            loc_12E5C:
000134E4 6100 0000                  		bsr.w	Sonic_JumpAngle
000134E8 6100 0000                  		bsr.w	Sonic_Floor
000134EC 4E75                       		rts	
000134EE                            ; ===========================================================================
000134EE                            
000134EE                            Obj01_MdRoll:				; XREF: Obj01_Modes
000134EE 6100 0000                  		bsr.w	Sonic_Jump
000134F2 6100 0000                  		bsr.w	Sonic_RollRepel
000134F6 6100 0000                  		bsr.w	Sonic_RollSpeed
000134FA 6100 0000                  		bsr.w	Sonic_LevelBound
000134FE 4EBA A75E                  		jsr	SpeedToPos
00013502 6100 0000                  		bsr.w	Sonic_AnglePos
00013506 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001350A 4E75                       		rts	
0001350C                            ; ===========================================================================
0001350C                            
0001350C                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001350C 6100 0000                  		bsr.w	Sonic_JumpHeight
00013510 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013514 6100 0000                  		bsr.w	Sonic_LevelBound
00013518 6100 0000                  		bsr.w	Sonic_AirUnroll
0001351C 4EBA A714                  		jsr	ObjectFall
00013520 0828 0006 0022             		btst	#6,$22(a0)
00013526 6700                       		beq.s	loc_12EA6
00013528 0468 0028 0012             		subi.w	#$28,$12(a0)
0001352E                            
0001352E                            loc_12EA6:
0001352E 6100 0000                  		bsr.w	Sonic_JumpAngle
00013532 6100 0000                  		bsr.w	Sonic_Floor
00013536 4E75                       		rts	
00013538                            ; ---------------------------------------------------------------------------
00013538                            ; Subroutine to	make Sonic walk/run
00013538                            ; ---------------------------------------------------------------------------
00013538                            
00013538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013538                            
00013538                            
00013538                            Sonic_Move:				; XREF: Obj01_MdNormal
00013538 3C38 F760                  		move.w	($FFFFF760).w,d6
0001353C 3A38 F762                  		move.w	($FFFFF762).w,d5
00013540 3838 F764                  		move.w	($FFFFF764).w,d4
00013544 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013548 6600 0000                  		bne.w	loc_12FEE
0001354C 4A68 003E                  		tst.w	$3E(a0)
00013550 6600 0000                  		bne.w	Obj01_ResetScr
00013554 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001355A 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001355C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013562 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013564 6100 0000                  		bsr.w	Sonic_MoveLeft
00013568                            
00013568                            Obj01_NotLeft:
00013568 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001356E 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013570 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013576 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013578 6100 0000                  		bsr.w	Sonic_MoveLeft
0001357C 6000                       		bra.s	Obj01_NotRight
0001357E                            
0001357E                            Obj01_MoveRight:
0001357E 6100 0000                  		bsr.w	Sonic_MoveRight
00013582                            
00013582                            Obj01_NotRight:
00013582 1028 0026                  		move.b	$26(a0),d0
00013586 0600 0020                  		addi.b	#$20,d0
0001358A 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001358E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013592 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013596 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001359A 08A8 0005 0022             		bclr	#5,$22(a0)
000135A0 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000135A6 0828 0003 0022             		btst	#3,$22(a0)
000135AC 6700                       		beq.s	Sonic_Balance
000135AE 7000                       		moveq	#0,d0
000135B0 1028 003D                  		move.b	$3D(a0),d0
000135B4 ED48                       		lsl.w	#6,d0
000135B6 43F8 D000                  		lea	($FFFFD000).w,a1
000135BA 43F1 0000                  		lea	(a1,d0.w),a1
000135BE 4A29 0022                  		tst.b	$22(a1)
000135C2 6B00                       		bmi.s	Sonic_LookUp
000135C4 7200                       		moveq	#0,d1
000135C6 1229 0019                  		move.b	$19(a1),d1
000135CA 3401                       		move.w	d1,d2
000135CC D442                       		add.w	d2,d2
000135CE 5942                       		subq.w	#4,d2
000135D0 D268 0008                  		add.w	8(a0),d1
000135D4 9269 0008                  		sub.w	8(a1),d1
000135D8 0C41 0004                  		cmpi.w	#4,d1
000135DC 6D00                       		blt.s	loc_12F6A
000135DE B242                       		cmp.w	d2,d1
000135E0 6C00                       		bge.s	loc_12F5A
000135E2 6000                       		bra.s	Sonic_LookUp
000135E4                            ; ===========================================================================
000135E4                            
000135E4                            Sonic_Balance:
000135E4 4EB9 0000 0000             		jsr	ObjHitFloor
000135EA 0C41 000C                  		cmpi.w	#$C,d1
000135EE 6D00                       		blt.s	Sonic_LookUp
000135F0 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000135F6 6600                       		bne.s	loc_12F62
000135F8                            
000135F8                            loc_12F5A:
000135F8 08A8 0000 0022             		bclr	#0,$22(a0)
000135FE 6000                       		bra.s	loc_12F70
00013600                            ; ===========================================================================
00013600                            
00013600                            loc_12F62:
00013600 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013606 6600                       		bne.s	Sonic_LookUp
00013608                            
00013608                            loc_12F6A:
00013608 08E8 0000 0022             		bset	#0,$22(a0)
0001360E                            
0001360E                            loc_12F70:
0001360E 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013614 6000                       		bra.s	Obj01_ResetScr
00013616                            ; ===========================================================================
00013616                            
00013616                            Sonic_LookUp:
00013616 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001361C 6700                       		beq.s	Sonic_Duck	; if not, branch
0001361E 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013624 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001362A 6700                       		beq.s	loc_12FC2
0001362C 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013630 6000                       		bra.s	loc_12FC2
00013632                            ; ===========================================================================
00013632                            
00013632                            Sonic_Duck:
00013632 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013638 6700                       		beq.s	Obj01_ResetScr	; if not, branch
0001363A 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013640 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013646 6700                       		beq.s	loc_12FC2
00013648 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001364C 6000                       		bra.s	loc_12FC2
0001364E                            ; ===========================================================================
0001364E                            
0001364E                            Obj01_ResetScr:
0001364E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013654 6700                       		beq.s	loc_12FC2	; if yes, branch
00013656 6400                       		bcc.s	loc_12FBE
00013658 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001365C                            
0001365C                            loc_12FBE:
0001365C 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013660                            
00013660                            loc_12FC2:
00013660 1038 F602                  		move.b	($FFFFF602).w,d0
00013664 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013668 6600                       		bne.s	loc_12FEE	; if yes, branch
0001366A 3028 0014                  		move.w	$14(a0),d0
0001366E 6700                       		beq.s	loc_12FEE
00013670 6B00                       		bmi.s	loc_12FE2
00013672 9045                       		sub.w	d5,d0
00013674 6400                       		bcc.s	loc_12FDC
00013676 303C 0000                  		move.w	#0,d0
0001367A                            
0001367A                            loc_12FDC:
0001367A 3140 0014                  		move.w	d0,$14(a0)
0001367E 6000                       		bra.s	loc_12FEE
00013680                            ; ===========================================================================
00013680                            
00013680                            loc_12FE2:
00013680 D045                       		add.w	d5,d0
00013682 6400                       		bcc.s	loc_12FEA
00013684 303C 0000                  		move.w	#0,d0
00013688                            
00013688                            loc_12FEA:
00013688 3140 0014                  		move.w	d0,$14(a0)
0001368C                            
0001368C                            loc_12FEE:
0001368C 1028 0026                  		move.b	$26(a0),d0
00013690 4EB9 0000 2C64             		jsr	(CalcSine).l
00013696 C3E8 0014                  		muls.w	$14(a0),d1
0001369A E081                       		asr.l	#8,d1
0001369C 3141 0010                  		move.w	d1,$10(a0)
000136A0 C1E8 0014                  		muls.w	$14(a0),d0
000136A4 E080                       		asr.l	#8,d0
000136A6 3140 0012                  		move.w	d0,$12(a0)
000136AA                            
000136AA                            loc_1300C:
000136AA 1028 0026                  		move.b	$26(a0),d0
000136AE 0600 0040                  		addi.b	#$40,d0
000136B2 6B00                       		bmi.s	locret_1307C
000136B4 123C 0040                  		move.b	#$40,d1
000136B8 4A68 0014                  		tst.w	$14(a0)
000136BC 6700                       		beq.s	locret_1307C
000136BE 6B00                       		bmi.s	loc_13024
000136C0 4441                       		neg.w	d1
000136C2                            
000136C2                            loc_13024:
000136C2 1028 0026                  		move.b	$26(a0),d0
000136C6 D001                       		add.b	d1,d0
000136C8 3F00                       		move.w	d0,-(sp)
000136CA 6100 0000                  		bsr.w	Sonic_WalkSpeed
000136CE 301F                       		move.w	(sp)+,d0
000136D0 4A41                       		tst.w	d1
000136D2 6A00                       		bpl.s	locret_1307C
000136D4 E141                       		asl.w	#8,d1
000136D6 0600 0020                  		addi.b	#$20,d0
000136DA 0200 00C0                  		andi.b	#$C0,d0
000136DE 6700                       		beq.s	loc_13078
000136E0 0C00 0040                  		cmpi.b	#$40,d0
000136E4 6700                       		beq.s	loc_13066
000136E6 0C00 0080                  		cmpi.b	#$80,d0
000136EA 6700                       		beq.s	loc_13060
000136EC D368 0010                  		add.w	d1,$10(a0)
000136F0 08E8 0005 0022             		bset	#5,$22(a0)
000136F6 317C 0000 0014             		move.w	#0,$14(a0)
000136FC 4E75                       		rts	
000136FE                            ; ===========================================================================
000136FE                            
000136FE                            loc_13060:
000136FE 9368 0012                  		sub.w	d1,$12(a0)
00013702 4E75                       		rts	
00013704                            ; ===========================================================================
00013704                            
00013704                            loc_13066:
00013704 9368 0010                  		sub.w	d1,$10(a0)
00013708 08E8 0005 0022             		bset	#5,$22(a0)
0001370E 317C 0000 0014             		move.w	#0,$14(a0)
00013714 4E75                       		rts	
00013716                            ; ===========================================================================
00013716                            
00013716                            loc_13078:
00013716 D368 0012                  		add.w	d1,$12(a0)
0001371A                            
0001371A                            locret_1307C:
0001371A 4E75                       		rts	
0001371C                            ; End of function Sonic_Move
0001371C                            
0001371C                            
0001371C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001371C                            
0001371C                            
0001371C                            Sonic_MoveLeft:				; XREF: Sonic_Move
0001371C 3028 0014                  		move.w	$14(a0),d0
00013720 6700                       		beq.s	loc_13086
00013722 6A00                       		bpl.s	loc_130B2
00013724                            
00013724                            loc_13086:
00013724 08E8 0000 0022             		bset	#0,$22(a0)
0001372A 6600                       		bne.s	loc_1309A
0001372C 08A8 0005 0022             		bclr	#5,$22(a0)
00013732 117C 0001 001D             		move.b	#1,$1D(a0)
00013738                            
00013738                            loc_1309A:
00013738 9045                       		sub.w	d5,d0
0001373A 3206                       		move.w	d6,d1
0001373C 4441                       		neg.w	d1
0001373E B041                       		cmp.w	d1,d0
00013740 6E00                       		bgt.s	loc_130A6
00013742 3001                       		move.w	d1,d0
00013744                            
00013744                            loc_130A6:
00013744 3140 0014                  		move.w	d0,$14(a0)
00013748 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001374E 4E75                       		rts	
00013750                            ; ===========================================================================
00013750                            
00013750                            loc_130B2:				; XREF: Sonic_MoveLeft
00013750 9044                       		sub.w	d4,d0
00013752 6400                       		bcc.s	loc_130BA
00013754 303C FF80                  		move.w	#-$80,d0
00013758                            
00013758                            loc_130BA:
00013758 3140 0014                  		move.w	d0,$14(a0)
0001375C 1028 0026                  		move.b	$26(a0),d0
00013760 0600 0020                  		addi.b	#$20,d0
00013764 0200 00C0                  		andi.b	#$C0,d0
00013768 6600                       		bne.s	locret_130E8
0001376A 0C40 0400                  		cmpi.w	#$400,d0
0001376E 6D00                       		blt.s	locret_130E8
00013770 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013776 08A8 0000 0022             		bclr	#0,$22(a0)
0001377C 303C 00A4                  		move.w	#$A4,d0
00013780 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
00013786                            
00013786                            locret_130E8:
00013786 4E75                       		rts	
00013788                            ; End of function Sonic_MoveLeft
00013788                            
00013788                            
00013788                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013788                            
00013788                            
00013788                            Sonic_MoveRight:			; XREF: Sonic_Move
00013788 3028 0014                  		move.w	$14(a0),d0
0001378C 6B00                       		bmi.s	loc_13118
0001378E 08A8 0000 0022             		bclr	#0,$22(a0)
00013794 6700                       		beq.s	loc_13104
00013796 08A8 0005 0022             		bclr	#5,$22(a0)
0001379C 117C 0001 001D             		move.b	#1,$1D(a0)
000137A2                            
000137A2                            loc_13104:
000137A2 D045                       		add.w	d5,d0
000137A4 B046                       		cmp.w	d6,d0
000137A6 6D00                       		blt.s	loc_1310C
000137A8 3006                       		move.w	d6,d0
000137AA                            
000137AA                            loc_1310C:
000137AA 3140 0014                  		move.w	d0,$14(a0)
000137AE 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000137B4 4E75                       		rts	
000137B6                            ; ===========================================================================
000137B6                            
000137B6                            loc_13118:				; XREF: Sonic_MoveRight
000137B6 D044                       		add.w	d4,d0
000137B8 6400                       		bcc.s	loc_13120
000137BA 303C 0080                  		move.w	#$80,d0
000137BE                            
000137BE                            loc_13120:
000137BE 3140 0014                  		move.w	d0,$14(a0)
000137C2 1028 0026                  		move.b	$26(a0),d0
000137C6 0600 0020                  		addi.b	#$20,d0
000137CA 0200 00C0                  		andi.b	#$C0,d0
000137CE 6600                       		bne.s	locret_1314E
000137D0 0C40 FC00                  		cmpi.w	#-$400,d0
000137D4 6E00                       		bgt.s	locret_1314E
000137D6 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000137DC 08E8 0000 0022             		bset	#0,$22(a0)
000137E2 303C 00A4                  		move.w	#$A4,d0
000137E6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
000137EC                            
000137EC                            locret_1314E:
000137EC 4E75                       		rts	
000137EE                            ; End of function Sonic_MoveRight
000137EE                            
000137EE                            ; ---------------------------------------------------------------------------
000137EE                            ; Subroutine to	change Sonic's speed as he rolls
000137EE                            ; ---------------------------------------------------------------------------
000137EE                            
000137EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137EE                            
000137EE                            
000137EE                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000137EE 3C38 F760                  		move.w	($FFFFF760).w,d6
000137F2 E346                       		asl.w	#1,d6
000137F4 3A38 F762                  		move.w	($FFFFF762).w,d5
000137F8 E245                       		asr.w	#1,d5
000137FA 3838 F764                  		move.w	($FFFFF764).w,d4
000137FE E444                       		asr.w	#2,d4
00013800 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013804 6600 0000                  		bne.w	loc_131CC
00013808 4A68 003E                  		tst.w	$3E(a0)
0001380C 6600                       		bne.s	loc_13188
0001380E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013814 6700                       		beq.s	loc_1317C	; if not, branch
00013816 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001381C 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
0001381E 6100 0000                  		bsr.w	Sonic_RollLeft
00013822                            
00013822                            loc_1317C:
00013822 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013828 6700                       		beq.s	loc_13188	; if not, branch
0001382A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013830 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013832 6100 0000                  		bsr.w	Sonic_RollLeft
00013836 6000                       		bra.s	loc_13188
00013838                            
00013838                            SonicRS_RollRight:
00013838 6100 0000                  		bsr.w	Sonic_RollRight
0001383C                            
0001383C                            loc_13188:
0001383C 3028 0014                  		move.w	$14(a0),d0
00013840 6700                       		beq.s	loc_131AA
00013842 6B00                       		bmi.s	loc_1319E
00013844 9045                       		sub.w	d5,d0
00013846 6400                       		bcc.s	loc_13198
00013848 303C 0000                  		move.w	#0,d0
0001384C                            
0001384C                            loc_13198:
0001384C 3140 0014                  		move.w	d0,$14(a0)
00013850 6000                       		bra.s	loc_131AA
00013852                            ; ===========================================================================
00013852                            
00013852                            loc_1319E:				; XREF: Sonic_RollSpeed
00013852 D045                       		add.w	d5,d0
00013854 6400                       		bcc.s	loc_131A6
00013856 303C 0000                  		move.w	#0,d0
0001385A                            
0001385A                            loc_131A6:
0001385A 3140 0014                  		move.w	d0,$14(a0)
0001385E                            
0001385E                            loc_131AA:
0001385E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013862 6600                       		bne.s	loc_131CC	; if yes, branch
00013864 08A8 0002 0022             		bclr	#2,$22(a0)
0001386A 117C 0013 0016             		move.b	#$13,$16(a0)
00013870 117C 0009 0017             		move.b	#9,$17(a0)
00013876 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001387C 5B68 000C                  		subq.w	#5,$C(a0)
00013880                            
00013880                            loc_131CC:
00013880 1028 0026                  		move.b	$26(a0),d0
00013884 4EB9 0000 2C64             		jsr	(CalcSine).l
0001388A C1E8 0014                  		muls.w	$14(a0),d0
0001388E E080                       		asr.l	#8,d0
00013890 3140 0012                  		move.w	d0,$12(a0)
00013894 C3E8 0014                  		muls.w	$14(a0),d1
00013898 E081                       		asr.l	#8,d1
0001389A 0C41 1000                  		cmpi.w	#$1000,d1
0001389E 6F00                       		ble.s	loc_131F0
000138A0 323C 1000                  		move.w	#$1000,d1
000138A4                            
000138A4                            loc_131F0:
000138A4 0C41 F000                  		cmpi.w	#-$1000,d1
000138A8 6C00                       		bge.s	loc_131FA
000138AA 323C F000                  		move.w	#-$1000,d1
000138AE                            
000138AE                            loc_131FA:
000138AE 3141 0010                  		move.w	d1,$10(a0)
000138B2 6000 FDF6                  		bra.w	loc_1300C
000138B6                            ; End of function Sonic_RollSpeed
000138B6                            
000138B6                            
000138B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138B6                            
000138B6                            
000138B6                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000138B6 3028 0014                  		move.w	$14(a0),d0
000138BA 6700                       		beq.s	loc_1320A
000138BC 6A00                       		bpl.s	loc_13218
000138BE                            
000138BE                            loc_1320A:
000138BE 08E8 0000 0022             		bset	#0,$22(a0)
000138C4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000138CA 4E75                       		rts	
000138CC                            ; ===========================================================================
000138CC                            
000138CC                            loc_13218:
000138CC 9044                       		sub.w	d4,d0
000138CE 6400                       		bcc.s	loc_13220
000138D0 303C FF80                  		move.w	#-$80,d0
000138D4                            
000138D4                            loc_13220:
000138D4 3140 0014                  		move.w	d0,$14(a0)
000138D8 4E75                       		rts	
000138DA                            ; End of function Sonic_RollLeft
000138DA                            
000138DA                            
000138DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138DA                            
000138DA                            
000138DA                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000138DA 3028 0014                  		move.w	$14(a0),d0
000138DE 6B00                       		bmi.s	loc_1323A
000138E0 08A8 0000 0022             		bclr	#0,$22(a0)
000138E6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000138EC 4E75                       		rts	
000138EE                            ; ===========================================================================
000138EE                            
000138EE                            loc_1323A:
000138EE D044                       		add.w	d4,d0
000138F0 6400                       		bcc.s	loc_13242
000138F2 303C 0080                  		move.w	#$80,d0
000138F6                            
000138F6                            loc_13242:
000138F6 3140 0014                  		move.w	d0,$14(a0)
000138FA 4E75                       		rts	
000138FC                            ; End of function Sonic_RollRight
000138FC                            
000138FC                            Sonic_AirUnroll:
000138FC                            		
000138FC 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013900 6600                       		bne.s	@timer
00013902 1038 F605                  		move.b	($FFFFF605).w,d0
00013906 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
0001390A 6700                       		beq.s	@end	; if not, branch
0001390C 08A8 0002 0022             		bclr	#2,$22(a0)
00013912 117C 0013 0016             		move.b	#$13,$16(a0)
00013918 117C 0009 0017             		move.b	#9,$17(a0)
0001391E 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013924 303C 00A5                  		move.w	#$A5,d0
00013928 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play fart sound
0001392E 2028 0010                  		move.l	$10(a0),d0
00013932 D080                       		add.l	d0,d0
00013934 2140 0010                  		move.l	d0,$10(a0)
00013938 5B68 000C                  		subq.w	#5,$C(a0)
0001393C                            	@end:
0001393C 4E75                       		rts
0001393E                            	@timer:
0001393E 5328 003A                  		subq.b	#1,$3A(a0)
00013942 4E75                       		rts
00013944                            
00013944                            ; ---------------------------------------------------------------------------
00013944                            ; Subroutine to	change Sonic's direction while jumping
00013944                            ; ---------------------------------------------------------------------------
00013944                            
00013944                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013944                            
00013944                            
00013944                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013944 3C38 F760                  		move.w	($FFFFF760).w,d6
00013948 3A38 F762                  		move.w	($FFFFF762).w,d5
0001394C E345                       		asl.w	#1,d5
0001394E 0828 0004 0022             		btst	#4,$22(a0)
00013954 6600                       		bne.s	Obj01_ResetScr2
00013956 3028 0010                  		move.w	$10(a0),d0
0001395A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013960 6700                       		beq.s	loc_13278	; if not, branch
00013962 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013968 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
0001396A 6100 0000                  		bsr.w	SonicCJD_JumpLeft
0001396E 6E00                       		bgt.s	loc_13278
00013970 3001                       		move.w	d1,d0
00013972                            
00013972                            loc_13278:
00013972 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013978 6700                       		beq.s	Obj01_JumpMove	; if not, branch
0001397A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013980 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013982 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013986 6E00                       		bgt.s	Obj01_JumpMove
00013988 3001                       		move.w	d1,d0
0001398A 6000                       		bra.s	Obj01_JumpMove
0001398C                            
0001398C                            SonicCJD_JumpLeft:
0001398C 08E8 0000 0022             		bset	#0,$22(a0)
00013992 9045                       		sub.w	d5,d0
00013994 3206                       		move.w	d6,d1
00013996 4441                       		neg.w	d1
00013998 B041                       		cmp.w	d1,d0
0001399A                            		; bgt.s	loc_13278
0001399A                            		; move.w	d1,d0
0001399A 4E75                       		rts
0001399C                            
0001399C                            SonicCJD_JumpRight:
0001399C 08A8 0000 0022             		bclr	#0,$22(a0)
000139A2 D045                       		add.w	d5,d0
000139A4 B046                       		cmp.w	d6,d0
000139A6 6D00                       		blt.s	Obj01_JumpMove
000139A8 3006                       		move.w	d6,d0
000139AA                            
000139AA                            Obj01_JumpMove:
000139AA 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
000139AE                            
000139AE                            Obj01_ResetScr2:
000139AE 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
000139B4 6700                       		beq.s	loc_132A4	; if yes, branch
000139B6 6400                       		bcc.s	loc_132A0
000139B8 5878 F73E                  		addq.w	#4,($FFFFF73E).w
000139BC                            
000139BC                            loc_132A0:
000139BC 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000139C0                            
000139C0                            loc_132A4:
000139C0 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
000139C6 6500                       		bcs.s	locret_132D2	; if yes, branch
000139C8 3028 0010                  		move.w	$10(a0),d0
000139CC 3200                       		move.w	d0,d1
000139CE EA41                       		asr.w	#5,d1
000139D0 6700                       		beq.s	locret_132D2
000139D2 6B00                       		bmi.s	loc_132C6
000139D4 9041                       		sub.w	d1,d0
000139D6 6400                       		bcc.s	loc_132C0
000139D8 303C 0000                  		move.w	#0,d0
000139DC                            
000139DC                            loc_132C0:
000139DC 3140 0010                  		move.w	d0,$10(a0)
000139E0 4E75                       		rts	
000139E2                            ; ===========================================================================
000139E2                            
000139E2                            loc_132C6:
000139E2 9041                       		sub.w	d1,d0
000139E4 6500                       		bcs.s	loc_132CE
000139E6 303C 0000                  		move.w	#0,d0
000139EA                            
000139EA                            loc_132CE:
000139EA 3140 0010                  		move.w	d0,$10(a0)
000139EE                            
000139EE                            locret_132D2:
000139EE 4E75                       		rts	
000139F0                            ; End of function Sonic_ChgJumpDir
000139F0                            
000139F0                            ; ===========================================================================
000139F0                            ; ---------------------------------------------------------------------------
000139F0                            ; Unused subroutine to squash Sonic
000139F0                            ; ---------------------------------------------------------------------------
000139F0 1028 0026                  		move.b	$26(a0),d0
000139F4 0600 0020                  		addi.b	#$20,d0
000139F8 0200 00C0                  		andi.b	#$C0,d0
000139FC 6600                       		bne.s	locret_13302
000139FE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013A02 4A41                       		tst.w	d1
00013A04 6A00                       		bpl.s	locret_13302
00013A06 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013A0C 317C 0000 0010             		move.w	#0,$10(a0)
00013A12 317C 0000 0012             		move.w	#0,$12(a0)
00013A18 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013A1E                            
00013A1E                            locret_13302:
00013A1E 4E75                       		rts	
00013A20                            ; ---------------------------------------------------------------------------
00013A20                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013A20                            ; ---------------------------------------------------------------------------
00013A20                            
00013A20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A20                            
00013A20                            
00013A20                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013A20 2228 0008                  		move.l	8(a0),d1
00013A24 3028 0010                  		move.w	$10(a0),d0
00013A28 48C0                       		ext.l	d0
00013A2A E180                       		asl.l	#8,d0
00013A2C D280                       		add.l	d0,d1
00013A2E 4841                       		swap	d1
00013A30 3038 F728                  		move.w	($FFFFF728).w,d0
00013A34 0640 0010                  		addi.w	#$10,d0
00013A38 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013A3A 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013A3C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013A40 0640 0128                  		addi.w	#$128,d0
00013A44 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013A48 6600                       		bne.s	loc_13332
00013A4A 0640 0040                  		addi.w	#$40,d0
00013A4E                            
00013A4E                            loc_13332:
00013A4E B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013A50 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013A52                            
00013A52                            loc_13336:
00013A52 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013A56 0640 00E0                  		addi.w	#$E0,d0
00013A5A B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013A5E 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013A60 4E75                       		rts	
00013A62                            ; ===========================================================================
00013A62                            
00013A62                            Boundary_Bottom:
00013A62 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013A68 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013A6C 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013A72 6500 0000                  		bcs.w	KillSonic
00013A76 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013A7A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013A80 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013A86 4E75                       		rts	
00013A88                            ; ===========================================================================
00013A88                            
00013A88                            Boundary_Sides:
00013A88 3140 0008                  		move.w	d0,8(a0)
00013A8C 317C 0000 000A             		move.w	#0,$A(a0)
00013A92 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013A98 317C 0000 0014             		move.w	#0,$14(a0)
00013A9E 60B2                       		bra.s	loc_13336
00013AA0                            ; End of function Sonic_LevelBound
00013AA0                            
00013AA0                            ; ---------------------------------------------------------------------------
00013AA0                            ; Subroutine allowing Sonic to roll when he's moving
00013AA0                            ; ---------------------------------------------------------------------------
00013AA0                            
00013AA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AA0                            
00013AA0                            
00013AA0                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013AA0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013AA4 6600                       		bne.s	Obj01_NoRoll
00013AA6 3028 0014                  		move.w	$14(a0),d0
00013AAA 6A00                       		bpl.s	loc_13392
00013AAC 4440                       		neg.w	d0
00013AAE                            
00013AAE                            loc_13392:
00013AAE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013AB2 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013AB4 1038 F602                  		move.b	($FFFFF602).w,d0
00013AB8 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013ABC 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013ABE 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013AC4 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013AC6                            
00013AC6                            Obj01_NoRoll:
00013AC6 4E75                       		rts	
00013AC8                            ; ===========================================================================
00013AC8                            
00013AC8                            Obj01_ChkRoll:
00013AC8 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013ACE 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013AD0 4E75                       		rts	
00013AD2                            ; ===========================================================================
00013AD2                            
00013AD2                            Obj01_DoRoll:
00013AD2 08E8 0002 0022             		bset	#2,$22(a0)
00013AD8 117C 000E 0016             		move.b	#$E,$16(a0)
00013ADE 117C 0007 0017             		move.b	#7,$17(a0)
00013AE4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013AEA 5A68 000C                  		addq.w	#5,$C(a0)
00013AEE 303C 00BE                  		move.w	#$BE,d0
00013AF2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rolling sound
00013AF8 4A68 0014                  		tst.w	$14(a0)
00013AFC 6600                       		bne.s	locret_133E8
00013AFE 317C 0200 0014             		move.w	#$200,$14(a0)
00013B04                            
00013B04                            locret_133E8:
00013B04 4E75                       		rts	
00013B06                            ; End of function Sonic_Roll
00013B06                            
00013B06                            ; ---------------------------------------------------------------------------
00013B06                            ; Subroutine allowing Sonic to jump
00013B06                            ; ---------------------------------------------------------------------------
00013B06                            
00013B06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B06                            
00013B06                            
00013B06                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013B06 1038 F603                  		move.b	($FFFFF603).w,d0
00013B0A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013B0E 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013B12 7000                       		moveq	#0,d0
00013B14 1028 0026                  		move.b	$26(a0),d0
00013B18 0600 0080                  		addi.b	#$80,d0
00013B1C 6100 0000                  		bsr.w	sub_14D48
00013B20 0C41 0006                  		cmpi.w	#6,d1
00013B24 6D00 0000                  		blt.w	locret_1348E
00013B28 343C 0680                  		move.w	#$680,d2
00013B2C 0828 0006 0022             		btst	#6,$22(a0)
00013B32 6700                       		beq.s	loc_1341C
00013B34 343C 0380                  		move.w	#$380,d2
00013B38                            
00013B38                            loc_1341C:
00013B38 7000                       		moveq	#0,d0
00013B3A 1028 0026                  		move.b	$26(a0),d0
00013B3E 0400 0040                  		subi.b	#$40,d0
00013B42 4EB9 0000 2C64             		jsr	(CalcSine).l
00013B48 C3C2                       		muls.w	d2,d1
00013B4A E081                       		asr.l	#8,d1
00013B4C D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013B50 C1C2                       		muls.w	d2,d0
00013B52 E080                       		asr.l	#8,d0
00013B54 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013B58 08E8 0001 0022             		bset	#1,$22(a0)
00013B5E 08A8 0005 0022             		bclr	#5,$22(a0)
00013B64 588F                       		addq.l	#4,sp
00013B66 117C 0001 003C             		move.b	#1,$3C(a0)
00013B6C 4228 0038                  		clr.b	$38(a0)
00013B70 303C 00A0                  		move.w	#$A0,d0
00013B74 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
00013B7A 117C 0013 0016             		move.b	#$13,$16(a0)
00013B80 117C 0009 0017             		move.b	#9,$17(a0)
00013B86 0828 0002 0022             		btst	#2,$22(a0)
00013B8C 6600                       		bne.s	loc_13490
00013B8E 117C 000E 0016             		move.b	#$E,$16(a0)
00013B94 117C 0007 0017             		move.b	#7,$17(a0)
00013B9A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013BA0 08E8 0002 0022             		bset	#2,$22(a0)
00013BA6 5A68 000C                  		addq.w	#5,$C(a0)
00013BAA 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013BB0                            
00013BB0                            locret_1348E:
00013BB0 4E75                       		rts	
00013BB2                            ; ===========================================================================
00013BB2                            
00013BB2                            loc_13490:
00013BB2 08E8 0004 0022             		bset	#4,$22(a0)
00013BB8 4E75                       		rts	
00013BBA                            ; End of function Sonic_Jump
00013BBA                            
00013BBA                            
00013BBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BBA                            
00013BBA                            
00013BBA                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013BBA 4A28 003C                  		tst.b	$3C(a0)
00013BBE 6700                       		beq.s	loc_134C4
00013BC0 323C FC00                  		move.w	#-$400,d1
00013BC4 0828 0006 0022             		btst	#6,$22(a0)
00013BCA 6700                       		beq.s	loc_134AE
00013BCC 323C FE00                  		move.w	#-$200,d1
00013BD0                            
00013BD0                            loc_134AE:
00013BD0 B268 0012                  		cmp.w	$12(a0),d1
00013BD4 6F00                       		ble.s	locret_134C2
00013BD6 1038 F602                  		move.b	($FFFFF602).w,d0
00013BDA 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013BDE 6600                       		bne.s	locret_134C2	; if yes, branch
00013BE0 3141 0012                  		move.w	d1,$12(a0)
00013BE4                            
00013BE4                            locret_134C2:
00013BE4 4E75                       		rts	
00013BE6                            ; ===========================================================================
00013BE6                            
00013BE6                            loc_134C4:
00013BE6 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013BEC 6C00                       		bge.s	locret_134D2
00013BEE 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013BF4                            
00013BF4                            locret_134D2:
00013BF4 4E75                       		rts	
00013BF6                            ; End of function Sonic_JumpHeight
00013BF6                            
00013BF6                            ; ---------------------------------------------------------------------------
00013BF6                            ; Subroutine to	slow Sonic walking up a	slope
00013BF6                            ; ---------------------------------------------------------------------------
00013BF6                            
00013BF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BF6                            
00013BF6                            
00013BF6                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013BF6 1028 0026                  		move.b	$26(a0),d0
00013BFA 0600 0060                  		addi.b	#$60,d0
00013BFE 0C00 00C0                  		cmpi.b	#$C0,d0
00013C02 6400                       		bcc.s	locret_13508
00013C04 1028 0026                  		move.b	$26(a0),d0
00013C08 4EB9 0000 2C64             		jsr	(CalcSine).l
00013C0E C1FC 0020                  		muls.w	#$20,d0
00013C12 E080                       		asr.l	#8,d0
00013C14 4A68 0014                  		tst.w	$14(a0)
00013C18 6700                       		beq.s	locret_13508
00013C1A 6B00                       		bmi.s	loc_13504
00013C1C 4A40                       		tst.w	d0
00013C1E 6700                       		beq.s	locret_13502
00013C20 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013C24                            
00013C24                            locret_13502:
00013C24 4E75                       		rts	
00013C26                            ; ===========================================================================
00013C26                            
00013C26                            loc_13504:
00013C26 D168 0014                  		add.w	d0,$14(a0)
00013C2A                            
00013C2A                            locret_13508:
00013C2A 4E75                       		rts	
00013C2C                            ; End of function Sonic_SlopeResist
00013C2C                            
00013C2C                            ; ---------------------------------------------------------------------------
00013C2C                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013C2C                            ; ---------------------------------------------------------------------------
00013C2C                            
00013C2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C2C                            
00013C2C                            
00013C2C                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013C2C 1028 0026                  		move.b	$26(a0),d0
00013C30 0600 0060                  		addi.b	#$60,d0
00013C34 0C00 00C0                  		cmpi.b	#-$40,d0
00013C38 6400                       		bcc.s	locret_13544
00013C3A 1028 0026                  		move.b	$26(a0),d0
00013C3E 4EB9 0000 2C64             		jsr	(CalcSine).l
00013C44 C1FC 0050                  		muls.w	#$50,d0
00013C48 E080                       		asr.l	#8,d0
00013C4A 4A68 0014                  		tst.w	$14(a0)
00013C4E 6B00                       		bmi.s	loc_1353A
00013C50 4A40                       		tst.w	d0
00013C52 6A00                       		bpl.s	loc_13534
00013C54 E480                       		asr.l	#2,d0
00013C56                            
00013C56                            loc_13534:
00013C56 D168 0014                  		add.w	d0,$14(a0)
00013C5A 4E75                       		rts	
00013C5C                            ; ===========================================================================
00013C5C                            
00013C5C                            loc_1353A:
00013C5C 4A40                       		tst.w	d0
00013C5E 6B00                       		bmi.s	loc_13540
00013C60 E480                       		asr.l	#2,d0
00013C62                            
00013C62                            loc_13540:
00013C62 D168 0014                  		add.w	d0,$14(a0)
00013C66                            
00013C66                            locret_13544:
00013C66 4E75                       		rts	
00013C68                            ; End of function Sonic_RollRepel
00013C68                            
00013C68                            ; ---------------------------------------------------------------------------
00013C68                            ; Subroutine to	push Sonic down	a slope
00013C68                            ; ---------------------------------------------------------------------------
00013C68                            
00013C68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C68                            
00013C68                            
00013C68                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013C68 4E71                       		nop	
00013C6A 4A28 0038                  		tst.b	$38(a0)
00013C6E 6600                       		bne.s	locret_13580
00013C70 4A68 003E                  		tst.w	$3E(a0)
00013C74 6600                       		bne.s	loc_13582
00013C76 1028 0026                  		move.b	$26(a0),d0
00013C7A 0600 0020                  		addi.b	#$20,d0
00013C7E 0200 00C0                  		andi.b	#$C0,d0
00013C82 6700                       		beq.s	locret_13580
00013C84 3028 0014                  		move.w	$14(a0),d0
00013C88 6A00                       		bpl.s	loc_1356A
00013C8A 4440                       		neg.w	d0
00013C8C                            
00013C8C                            loc_1356A:
00013C8C 0C40 0280                  		cmpi.w	#$280,d0
00013C90 6400                       		bcc.s	locret_13580
00013C92 4268 0014                  		clr.w	$14(a0)
00013C96 08E8 0001 0022             		bset	#1,$22(a0)
00013C9C 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013CA2                            
00013CA2                            locret_13580:
00013CA2 4E75                       		rts	
00013CA4                            ; ===========================================================================
00013CA4                            
00013CA4                            loc_13582:
00013CA4 5368 003E                  		subq.w	#1,$3E(a0)
00013CA8 4E75                       		rts	
00013CAA                            ; End of function Sonic_SlopeRepel
00013CAA                            
00013CAA                            ; ---------------------------------------------------------------------------
00013CAA                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013CAA                            ; ---------------------------------------------------------------------------
00013CAA                            
00013CAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CAA                            
00013CAA                            
00013CAA                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013CAA 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013CAE 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013CB0 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013CB2                            
00013CB2 5400                       		addq.b	#2,d0		; increase angle
00013CB4 6400                       		bcc.s	loc_13596
00013CB6 7000                       		moveq	#0,d0
00013CB8                            
00013CB8                            loc_13596:
00013CB8 6000                       		bra.s	loc_1359E
00013CBA                            ; ===========================================================================
00013CBA                            
00013CBA                            loc_13598:
00013CBA 5500                       		subq.b	#2,d0		; decrease angle
00013CBC 6400                       		bcc.s	loc_1359E
00013CBE 7000                       		moveq	#0,d0
00013CC0                            
00013CC0                            loc_1359E:
00013CC0 1140 0026                  		move.b	d0,$26(a0)
00013CC4                            
00013CC4                            locret_135A2:
00013CC4 4E75                       		rts	
00013CC6                            ; End of function Sonic_JumpAngle
00013CC6                            
00013CC6                            ; ---------------------------------------------------------------------------
00013CC6                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013CC6                            ; ---------------------------------------------------------------------------
00013CC6                            
00013CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CC6                            
00013CC6                            
00013CC6                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013CC6 3228 0010                  		move.w	$10(a0),d1
00013CCA 3428 0012                  		move.w	$12(a0),d2
00013CCE 4EB9 0000 2F32             		jsr	(CalcAngle).l
00013CD4 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013CD8 0400 0020                  		subi.b	#$20,d0
00013CDC 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013CE0 0200 00C0                  		andi.b	#$C0,d0
00013CE4 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013CE8 0C00 0040                  		cmpi.b	#$40,d0
00013CEC 6700 0000                  		beq.w	loc_13680
00013CF0 0C00 0080                  		cmpi.b	#$80,d0
00013CF4 6700 0000                  		beq.w	loc_136E2
00013CF8 0C00 00C0                  		cmpi.b	#-$40,d0
00013CFC 6700 0000                  		beq.w	loc_1373E
00013D00 6100 0000                  		bsr.w	Sonic_HitWall
00013D04 4A41                       		tst.w	d1
00013D06 6A00                       		bpl.s	loc_135F0
00013D08 9368 0008                  		sub.w	d1,8(a0)
00013D0C 317C 0000 0010             		move.w	#0,$10(a0)
00013D12                            
00013D12                            loc_135F0:
00013D12 6100 0000                  		bsr.w	sub_14EB4
00013D16 4A41                       		tst.w	d1
00013D18 6A00                       		bpl.s	loc_13602
00013D1A D368 0008                  		add.w	d1,8(a0)
00013D1E 317C 0000 0010             		move.w	#0,$10(a0)
00013D24                            
00013D24                            loc_13602:
00013D24 6100 0000                  		bsr.w	Sonic_HitFloor
00013D28 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013D2C 4A41                       		tst.w	d1
00013D2E 6A00                       		bpl.s	locret_1367E
00013D30 1428 0012                  		move.b	$12(a0),d2
00013D34 5002                       		addq.b	#8,d2
00013D36 4402                       		neg.b	d2
00013D38 B202                       		cmp.b	d2,d1
00013D3A 6C00                       		bge.s	loc_1361E
00013D3C B002                       		cmp.b	d2,d0
00013D3E 6D00                       		blt.s	locret_1367E
00013D40                            
00013D40                            loc_1361E:
00013D40 D368 000C                  		add.w	d1,$C(a0)
00013D44 1143 0026                  		move.b	d3,$26(a0)
00013D48 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D4C 117C 0000 001C             		move.b	#0,$1C(a0)
00013D52 1003                       		move.b	d3,d0
00013D54 0600 0020                  		addi.b	#$20,d0
00013D58 0200 0040                  		andi.b	#$40,d0
00013D5C 6600                       		bne.s	loc_1365C
00013D5E 1003                       		move.b	d3,d0
00013D60 0600 0010                  		addi.b	#$10,d0
00013D64 0200 0020                  		andi.b	#$20,d0
00013D68 6700                       		beq.s	loc_1364E
00013D6A E0E8 0012                  		asr	$12(a0)
00013D6E 6000                       		bra.s	loc_13670
00013D70                            ; ===========================================================================
00013D70                            
00013D70                            loc_1364E:
00013D70 317C 0000 0012             		move.w	#0,$12(a0)
00013D76 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013D7C 4E75                       		rts	
00013D7E                            ; ===========================================================================
00013D7E                            
00013D7E                            loc_1365C:
00013D7E 317C 0000 0010             		move.w	#0,$10(a0)
00013D84 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013D8A 6F00                       		ble.s	loc_13670
00013D8C 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013D92                            
00013D92                            loc_13670:
00013D92 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D98 4A03                       		tst.b	d3
00013D9A 6A00                       		bpl.s	locret_1367E
00013D9C 4468 0014                  		neg.w	$14(a0)
00013DA0                            
00013DA0                            locret_1367E:
00013DA0 4E75                       		rts	
00013DA2                            ; ===========================================================================
00013DA2                            
00013DA2                            loc_13680:
00013DA2 6100 0000                  		bsr.w	Sonic_HitWall
00013DA6 4A41                       		tst.w	d1
00013DA8 6A00                       		bpl.s	loc_1369A
00013DAA 9368 0008                  		sub.w	d1,8(a0)
00013DAE 317C 0000 0010             		move.w	#0,$10(a0)
00013DB4 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013DBA 4E75                       		rts	
00013DBC                            ; ===========================================================================
00013DBC                            
00013DBC                            loc_1369A:
00013DBC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013DC0 4A41                       		tst.w	d1
00013DC2 6A00                       		bpl.s	loc_136B4
00013DC4 9368 000C                  		sub.w	d1,$C(a0)
00013DC8 4A68 0012                  		tst.w	$12(a0)
00013DCC 6A00                       		bpl.s	locret_136B2
00013DCE 317C 0000 0012             		move.w	#0,$12(a0)
00013DD4                            
00013DD4                            locret_136B2:
00013DD4 4E75                       		rts	
00013DD6                            ; ===========================================================================
00013DD6                            
00013DD6                            loc_136B4:
00013DD6 4A68 0012                  		tst.w	$12(a0)
00013DDA 6B00                       		bmi.s	locret_136E0
00013DDC 6100 0000                  		bsr.w	Sonic_HitFloor
00013DE0 4A41                       		tst.w	d1
00013DE2 6A00                       		bpl.s	locret_136E0
00013DE4 D368 000C                  		add.w	d1,$C(a0)
00013DE8 1143 0026                  		move.b	d3,$26(a0)
00013DEC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013DF0 117C 0000 001C             		move.b	#0,$1C(a0)
00013DF6 317C 0000 0012             		move.w	#0,$12(a0)
00013DFC 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013E02                            
00013E02                            locret_136E0:
00013E02 4E75                       		rts	
00013E04                            ; ===========================================================================
00013E04                            
00013E04                            loc_136E2:
00013E04 6100 0000                  		bsr.w	Sonic_HitWall
00013E08 4A41                       		tst.w	d1
00013E0A 6A00                       		bpl.s	loc_136F4
00013E0C 9368 0008                  		sub.w	d1,8(a0)
00013E10 317C 0000 0010             		move.w	#0,$10(a0)
00013E16                            
00013E16                            loc_136F4:
00013E16 6100 0000                  		bsr.w	sub_14EB4
00013E1A 4A41                       		tst.w	d1
00013E1C 6A00                       		bpl.s	loc_13706
00013E1E D368 0008                  		add.w	d1,8(a0)
00013E22 317C 0000 0010             		move.w	#0,$10(a0)
00013E28                            
00013E28                            loc_13706:
00013E28 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013E2C 4A41                       		tst.w	d1
00013E2E 6A00                       		bpl.s	locret_1373C
00013E30 9368 000C                  		sub.w	d1,$C(a0)
00013E34 1003                       		move.b	d3,d0
00013E36 0600 0020                  		addi.b	#$20,d0
00013E3A 0200 0040                  		andi.b	#$40,d0
00013E3E 6600                       		bne.s	loc_13726
00013E40 317C 0000 0012             		move.w	#0,$12(a0)
00013E46 4E75                       		rts	
00013E48                            ; ===========================================================================
00013E48                            
00013E48                            loc_13726:
00013E48 1143 0026                  		move.b	d3,$26(a0)
00013E4C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013E50 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013E56 4A03                       		tst.b	d3
00013E58 6A00                       		bpl.s	locret_1373C
00013E5A 4468 0014                  		neg.w	$14(a0)
00013E5E                            
00013E5E                            locret_1373C:
00013E5E 4E75                       		rts	
00013E60                            ; ===========================================================================
00013E60                            
00013E60                            loc_1373E:
00013E60 6100 0000                  		bsr.w	sub_14EB4
00013E64 4A41                       		tst.w	d1
00013E66 6A00                       		bpl.s	loc_13758
00013E68 D368 0008                  		add.w	d1,8(a0)
00013E6C 317C 0000 0010             		move.w	#0,$10(a0)
00013E72 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013E78 4E75                       		rts	
00013E7A                            ; ===========================================================================
00013E7A                            
00013E7A                            loc_13758:
00013E7A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013E7E 4A41                       		tst.w	d1
00013E80 6A00                       		bpl.s	loc_13772
00013E82 9368 000C                  		sub.w	d1,$C(a0)
00013E86 4A68 0012                  		tst.w	$12(a0)
00013E8A 6A00                       		bpl.s	locret_13770
00013E8C 317C 0000 0012             		move.w	#0,$12(a0)
00013E92                            
00013E92                            locret_13770:
00013E92 4E75                       		rts	
00013E94                            ; ===========================================================================
00013E94                            
00013E94                            loc_13772:
00013E94 4A68 0012                  		tst.w	$12(a0)
00013E98 6B00                       		bmi.s	locret_1379E
00013E9A 6100 0000                  		bsr.w	Sonic_HitFloor
00013E9E 4A41                       		tst.w	d1
00013EA0 6A00                       		bpl.s	locret_1379E
00013EA2 D368 000C                  		add.w	d1,$C(a0)
00013EA6 1143 0026                  		move.b	d3,$26(a0)
00013EAA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013EAE 117C 0000 001C             		move.b	#0,$1C(a0)
00013EB4 317C 0000 0012             		move.w	#0,$12(a0)
00013EBA 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013EC0                            
00013EC0                            locret_1379E:
00013EC0 4E75                       		rts	
00013EC2                            ; End of function Sonic_Floor
00013EC2                            
00013EC2                            ; ---------------------------------------------------------------------------
00013EC2                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013EC2                            ; ---------------------------------------------------------------------------
00013EC2                            
00013EC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EC2                            
00013EC2                            
00013EC2                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013EC2 0828 0004 0022             		btst	#4,$22(a0)
00013EC8 6700                       		beq.s	loc_137AE
00013ECA 4E71                       		nop	
00013ECC 4E71                       		nop	
00013ECE 4E71                       		nop	
00013ED0                            
00013ED0                            loc_137AE:
00013ED0 08A8 0005 0022             		bclr	#5,$22(a0)
00013ED6 08A8 0001 0022             		bclr	#1,$22(a0)
00013EDC 08A8 0004 0022             		bclr	#4,$22(a0)
00013EE2 0828 0002 0022             		btst	#2,$22(a0)
00013EE8 6700                       		beq.s	loc_137E4
00013EEA 08A8 0002 0022             		bclr	#2,$22(a0)
00013EF0 117C 0013 0016             		move.b	#$13,$16(a0)
00013EF6 117C 0009 0017             		move.b	#9,$17(a0)
00013EFC 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013F02 5B68 000C                  		subq.w	#5,$C(a0)
00013F06                            
00013F06                            loc_137E4:
00013F06 117C 0000 003C             		move.b	#0,$3C(a0)
00013F0C 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013F12 4E75                       		rts	
00013F14                            ; End of function Sonic_ResetOnFloor
00013F14                            
00013F14                            ; ===========================================================================
00013F14                            ; ---------------------------------------------------------------------------
00013F14                            ; Sonic	when he	gets hurt
00013F14                            ; ---------------------------------------------------------------------------
00013F14                            
00013F14                            Obj01_Hurt:				; XREF: Obj01_Index
00013F14 4EBA 9D48                  		jsr	SpeedToPos
00013F18 0668 0030 0012             		addi.w	#$30,$12(a0)
00013F1E 0828 0006 0022             		btst	#6,$22(a0)
00013F24 6700                       		beq.s	loc_1380C
00013F26 0468 0020 0012             		subi.w	#$20,$12(a0)
00013F2C                            
00013F2C                            loc_1380C:
00013F2C 6100 0000                  		bsr.w	Sonic_HurtStop
00013F30 6100 FAEE                  		bsr.w	Sonic_LevelBound
00013F34 6100 F4B4                  		bsr.w	Sonic_RecordPos
00013F38 6100 0000                  		bsr.w	Sonic_Animate
00013F3C 6100 0000                  		bsr.w	LoadSonicDynPLC
00013F40 4EFA 9D42                  		jmp	DisplaySprite
00013F44                            
00013F44                            ; ---------------------------------------------------------------------------
00013F44                            ; Subroutine to	stop Sonic falling after he's been hurt
00013F44                            ; ---------------------------------------------------------------------------
00013F44                            
00013F44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F44                            
00013F44                            
00013F44                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013F44 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013F48 0640 00E0                  		addi.w	#$E0,d0
00013F4C B068 000C                  		cmp.w	$C(a0),d0
00013F50 6500 0000                  		bcs.w	KillSonic
00013F54 6100 FD70                  		bsr.w	Sonic_Floor
00013F58 0828 0001 0022             		btst	#1,$22(a0)
00013F5E 6600                       		bne.s	locret_13860
00013F60 7000                       		moveq	#0,d0
00013F62 3140 0012                  		move.w	d0,$12(a0)
00013F66 3140 0010                  		move.w	d0,$10(a0)
00013F6A 3140 0014                  		move.w	d0,$14(a0)
00013F6E 117C 0000 001C             		move.b	#0,$1C(a0)
00013F74 5528 0024                  		subq.b	#2,$24(a0)
00013F78 317C 0078 0030             		move.w	#$78,$30(a0)
00013F7E                            
00013F7E                            locret_13860:
00013F7E 4E75                       		rts	
00013F80                            ; End of function Sonic_HurtStop
00013F80                            
00013F80                            ; ===========================================================================
00013F80                            ; ---------------------------------------------------------------------------
00013F80                            ; Sonic	when he	dies
00013F80                            ; ---------------------------------------------------------------------------
00013F80                            
00013F80                            Obj01_Death:				; XREF: Obj01_Index
00013F80 6100 0000                  		bsr.w	GameOver
00013F84 4EBA 9CAC                  		jsr	ObjectFall
00013F88 6100 F460                  		bsr.w	Sonic_RecordPos
00013F8C 6100 0000                  		bsr.w	Sonic_Animate
00013F90 6100 0000                  		bsr.w	LoadSonicDynPLC
00013F94 4EFA 9CEE                  		jmp	DisplaySprite
00013F98                            
00013F98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F98                            
00013F98                            
00013F98                            GameOver:				; XREF: Obj01_Death
00013F98 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013F9C 0640 0100                  		addi.w	#$100,d0
00013FA0 B068 000C                  		cmp.w	$C(a0),d0
00013FA4 6400 0000                  		bcc.w	locret_13900
00013FA8 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013FAE 5428 0024                  		addq.b	#2,$24(a0)
00013FB2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013FB6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013FBA 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013FBE 6600                       		bne.s	loc_138D4
00013FC0 317C 0000 003A             		move.w	#0,$3A(a0)
00013FC6 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013FCC 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013FD2 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013FD8 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013FDC                            
00013FDC                            loc_138C2:
00013FDC 303C 008F                  		move.w	#$8F,d0
00013FE0 4EB9 0000 15BA             		jsr	(PlaySound).l	; play game over music
00013FE6 7003                       		moveq	#3,d0
00013FE8 4EF9 0000 17A4             		jmp	(LoadPLC).l	; load game over patterns
00013FEE                            ; ===========================================================================
00013FEE                            
00013FEE                            loc_138D4:
00013FEE 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013FF4 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013FF8 6700                       		beq.s	locret_13900	; if not, branch
00013FFA 317C 0000 003A             		move.w	#0,$3A(a0)
00014000 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014006 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001400C 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014012 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014018 60C2                       		bra.s	loc_138C2
0001401A                            ; ===========================================================================
0001401A                            
0001401A                            locret_13900:
0001401A 4E75                       		rts	
0001401C                            ; End of function GameOver
0001401C                            
0001401C                            ; ===========================================================================
0001401C                            ; ---------------------------------------------------------------------------
0001401C                            ; Sonic	when the level is restarted
0001401C                            ; ---------------------------------------------------------------------------
0001401C                            
0001401C                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001401C 4A68 003A                  		tst.w	$3A(a0)
00014020 6700                       		beq.s	locret_13914
00014022 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014026 6600                       		bne.s	locret_13914
00014028 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001402E                            
0001402E                            locret_13914:
0001402E 4E75                       		rts	
00014030                            
00014030                            ; ---------------------------------------------------------------------------
00014030                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014030                            ; ---------------------------------------------------------------------------
00014030                            
00014030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014030                            
00014030                            
00014030                            Sonic_Loops:				; XREF: Obj01_Control
00014030 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014036 6700                       		beq.s	loc_13926	; if yes, branch
00014038 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
0001403C 6600 0000                  		bne.w	locret_139C2	; if not, branch
00014040                            
00014040                            loc_13926:
00014040 3028 000C                  		move.w	$C(a0),d0
00014044 E248                       		lsr.w	#1,d0
00014046 0240 0380                  		andi.w	#$380,d0
0001404A 1228 0008                  		move.b	8(a0),d1
0001404E 0241 007F                  		andi.w	#$7F,d1
00014052 D041                       		add.w	d1,d0
00014054 43F8 A400                  		lea	($FFFFA400).w,a1
00014058 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001405C B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014060 6700 FA66                  		beq.w	Obj01_ChkRoll
00014064 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014068 6700 FA5E                  		beq.w	Obj01_ChkRoll
0001406C B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014070 6700                       		beq.s	loc_13976
00014072 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014076 6700                       		beq.s	loc_13966
00014078 08A8 0006 0001             		bclr	#6,1(a0)
0001407E 4E75                       		rts	
00014080                            ; ===========================================================================
00014080                            
00014080                            loc_13966:
00014080 0828 0001 0022             		btst	#1,$22(a0)
00014086 6700                       		beq.s	loc_13976
00014088 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001408E 4E75                       		rts	
00014090                            ; ===========================================================================
00014090                            
00014090                            loc_13976:
00014090 3428 0008                  		move.w	8(a0),d2
00014094 0C02 002C                  		cmpi.b	#$2C,d2
00014098 6400                       		bcc.s	loc_13988
0001409A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000140A0 4E75                       		rts	
000140A2                            ; ===========================================================================
000140A2                            
000140A2                            loc_13988:
000140A2 0C02 00E0                  		cmpi.b	#-$20,d2
000140A6 6500                       		bcs.s	loc_13996
000140A8 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000140AE 4E75                       		rts	
000140B0                            ; ===========================================================================
000140B0                            
000140B0                            loc_13996:
000140B0 0828 0006 0001             		btst	#6,1(a0)
000140B6 6600                       		bne.s	loc_139B2
000140B8 1228 0026                  		move.b	$26(a0),d1
000140BC 6700                       		beq.s	locret_139C2
000140BE 0C01 0080                  		cmpi.b	#-$80,d1
000140C2 6200                       		bhi.s	locret_139C2
000140C4 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000140CA 4E75                       		rts	
000140CC                            ; ===========================================================================
000140CC                            
000140CC                            loc_139B2:
000140CC 1228 0026                  		move.b	$26(a0),d1
000140D0 0C01 0080                  		cmpi.b	#-$80,d1
000140D4 6300                       		bls.s	locret_139C2
000140D6 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000140DC                            
000140DC                            locret_139C2:
000140DC 4E75                       		rts	
000140DE                            ; End of function Sonic_Loops
000140DE                            
000140DE                            ; ---------------------------------------------------------------------------
000140DE                            ; Subroutine to	animate	Sonic's sprites
000140DE                            ; ---------------------------------------------------------------------------
000140DE                            
000140DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140DE                            
000140DE                            Player_Anim:
000140DE 0000 0000                  	dc.l	SonicAniData
000140E2 0000 0000                  	dc.l	SonicAniData ; gronic
000140E6                            	; Insert more animation data for other characters here
000140E6                            	
000140E6                            Sonic_Animate:				; XREF: Obj01_Control; et al
000140E6 7000                       			moveq	#0,d0
000140E8 1038 FFE8                  		move.b	(v_character),d0
000140EC E548                       		lsl.w	#2,d0
000140EE 43FA FFEE                  		lea 	Player_Anim(pc),a1
000140F2                            		
000140F2 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000140F6                            	
000140F6 7000                       		moveq	#0,d0
000140F8 1028 001C                  		move.b	$1C(a0),d0
000140FC B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00014100 6700                       		beq.s	SAnim_Do	; if not, branch
00014102 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014106 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0001410C 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014112                            
00014112                            SAnim_Do:
00014112 D040                       		add.w	d0,d0
00014114 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014118 1011                       		move.b	(a1),d0
0001411A 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
0001411C 1228 0022                  		move.b	$22(a0),d1
00014120 0201 0001                  		andi.b	#1,d1
00014124 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001412A 8328 0001                  		or.b	d1,1(a0)
0001412E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014132 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014134 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014138                            
00014138                            SAnim_Do2:
00014138 7200                       		moveq	#0,d1
0001413A 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0001413E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014142 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014144                            
00014144                            SAnim_Next:
00014144 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014148 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001414C                            
0001414C                            SAnim_Delay:
0001414C 4E75                       		rts	
0001414E                            ; ===========================================================================
0001414E                            
0001414E                            SAnim_End_FF:
0001414E 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014150 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014152 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014158 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001415C 60E6                       		bra.s	SAnim_Next
0001415E                            ; ===========================================================================
0001415E                            
0001415E                            SAnim_End_FE:
0001415E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014160 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014162 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014166 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001416A 9200                       		sub.b	d0,d1
0001416C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014170 60D2                       		bra.s	SAnim_Next
00014172                            ; ===========================================================================
00014172                            
00014172                            SAnim_End_FD:
00014172 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014174 6600                       		bne.s	SAnim_End	; if not, branch
00014176 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001417C                            
0001417C                            SAnim_End:
0001417C 4E75                       		rts	
0001417E                            ; ===========================================================================
0001417E                            
0001417E                            SAnim_WalkRun:				; XREF: SAnim_Do
0001417E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014182 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014184 5200                       		addq.b	#1,d0		; is animation walking/running?
00014186 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001418A 7200                       		moveq	#0,d1
0001418C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014190 1428 0022                  		move.b	$22(a0),d2
00014194 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014198 6600                       		bne.s	loc_13A70	; if yes, branch
0001419A 4600                       		not.b	d0		; reverse angle
0001419C                            
0001419C                            loc_13A70:
0001419C 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000141A0 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
000141A2 7203                       		moveq	#3,d1
000141A4                            
000141A4                            loc_13A78:
000141A4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000141AA B302                       		eor.b	d1,d2
000141AC 8528 0001                  		or.b	d2,1(a0)
000141B0 0828 0005 0022             		btst	#5,$22(a0)
000141B6 6600 0000                  		bne.w	SAnim_Push
000141BA E808                       		lsr.b	#4,d0		; divide angle by $10
000141BC 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000141C0 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000141C4 6A00                       		bpl.s	loc_13A9C
000141C6 4442                       		neg.w	d2
000141C8                            
000141C8                            loc_13A9C:
000141C8 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000141CE 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000141D2 6400                       		bcc.s	loc_13AB4	; if yes, branch
000141D4 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000141DA 1200                       		move.b	d0,d1
000141DC E209                       		lsr.b	#1,d1
000141DE D001                       		add.b	d1,d0
000141E0                            
000141E0                            loc_13AB4:
000141E0 D000                       		add.b	d0,d0
000141E2 1600                       		move.b	d0,d3
000141E4 4442                       		neg.w	d2
000141E6 0642 0800                  		addi.w	#$800,d2
000141EA 6A00                       		bpl.s	loc_13AC2
000141EC 7400                       		moveq	#0,d2
000141EE                            
000141EE                            loc_13AC2:
000141EE E04A                       		lsr.w	#8,d2
000141F0 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000141F4 6100 FF42                  		bsr.w	SAnim_Do2
000141F8 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000141FC 4E75                       		rts	
000141FE                            ; ===========================================================================
000141FE                            
000141FE                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000141FE 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014200 6600                       		bne.s	SAnim_Push	; if not, branch
00014202 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014206 6A00                       		bpl.s	loc_13ADE
00014208 4442                       		neg.w	d2
0001420A                            
0001420A                            loc_13ADE:
0001420A 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014210 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014214 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014216 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001421C                            
0001421C                            loc_13AF0:
0001421C 4442                       		neg.w	d2
0001421E 0642 0400                  		addi.w	#$400,d2
00014222 6A00                       		bpl.s	loc_13AFA
00014224 7400                       		moveq	#0,d2
00014226                            
00014226                            loc_13AFA:
00014226 E04A                       		lsr.w	#8,d2
00014228 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001422C 1228 0022                  		move.b	$22(a0),d1
00014230 0201 0001                  		andi.b	#1,d1
00014234 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001423A 8328 0001                  		or.b	d1,1(a0)
0001423E 6000 FEF8                  		bra.w	SAnim_Do2
00014242                            ; ===========================================================================
00014242                            
00014242                            SAnim_Push:				; XREF: SAnim_RollJump
00014242 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014246 6B00                       		bmi.s	loc_13B1E
00014248 4442                       		neg.w	d2
0001424A                            
0001424A                            loc_13B1E:
0001424A 0642 0800                  		addi.w	#$800,d2
0001424E 6A00                       		bpl.s	loc_13B26
00014250 7400                       		moveq	#0,d2
00014252                            
00014252                            loc_13B26:
00014252 EC4A                       		lsr.w	#6,d2
00014254 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014258 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001425E 1228 0022                  		move.b	$22(a0),d1
00014262 0201 0001                  		andi.b	#1,d1
00014266 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001426C 8328 0001                  		or.b	d1,1(a0)
00014270 6000 FEC6                  		bra.w	SAnim_Do2
00014274                            ; End of function Sonic_Animate
00014274                            
00014274                            ; ===========================================================================
00014274                            SonicAniData:
00014274                            	include "_anim\Sonic.asm"
00014274                            ; ---------------------------------------------------------------------------
00014274                            ; Animation script - Sonic
00014274                            ; ---------------------------------------------------------------------------
00014274 0000                       		dc.w SonAni_Walk-SonicAniData
00014276 0000                       		dc.w SonAni_Run-SonicAniData
00014278 0000                       		dc.w SonAni_Roll-SonicAniData
0001427A 0000                       		dc.w SonAni_Roll2-SonicAniData
0001427C 0000                       		dc.w SonAni_Push-SonicAniData
0001427E 0000                       		dc.w SonAni_Wait-SonicAniData
00014280 0000                       		dc.w SonAni_Balance-SonicAniData
00014282 0000                       		dc.w SonAni_LookUp-SonicAniData
00014284 0000                       		dc.w SonAni_Duck-SonicAniData
00014286 0000                       		dc.w SonAni_Warp1-SonicAniData
00014288 0000                       		dc.w SonAni_Warp2-SonicAniData
0001428A 0000                       		dc.w SonAni_Warp3-SonicAniData
0001428C 0000                       		dc.w SonAni_Warp4-SonicAniData
0001428E 0000                       		dc.w SonAni_Stop-SonicAniData
00014290 0000                       		dc.w SonAni_Float1-SonicAniData
00014292 0000                       		dc.w SonAni_Float2-SonicAniData
00014294 0000                       		dc.w SonAni_Spring-SonicAniData
00014296 0000                       		dc.w SonAni_LZHang-SonicAniData
00014298 0000                       		dc.w SonAni_Leap1-SonicAniData
0001429A 0000                       		dc.w SonAni_Leap2-SonicAniData
0001429C 0000                       		dc.w SonAni_Surf-SonicAniData
0001429E 0000                       		dc.w SonAni_Bubble-SonicAniData
000142A0 0000                       		dc.w SonAni_Death1-SonicAniData
000142A2 0000                       		dc.w SonAni_Drown-SonicAniData
000142A4 0000                       		dc.w SonAni_Death2-SonicAniData
000142A6 0000                       		dc.w SonAni_Shrink-SonicAniData
000142A8 0000                       		dc.w SonAni_Hurt-SonicAniData
000142AA 0000                       		dc.w SonAni_LZSlide-SonicAniData
000142AC 0000                       		dc.w SonAni_Blank-SonicAniData
000142AE 0000                       		dc.w SonAni_Float3-SonicAniData
000142B0 0000                       		dc.w SonAni_Float4-SonicAniData
000142B2 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
000142BC FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000142C4 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000142CC FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000142D4 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000142DC 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000142F2 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000142F6 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000142FA 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000142FE 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014302 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014306 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
0001430A 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
0001430E 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014312 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014316 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
0001431E 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014322 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014326 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
0001432C 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014332 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014336 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001433E 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014342 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014346 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
0001434A 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014354 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014358 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
0001435C 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014360 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014368 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001436C                            		even
0001436C                            		even
0001436C                            
0001436C                            ; ---------------------------------------------------------------------------
0001436C                            ; Sonic	pattern	loading	subroutine
0001436C                            ; ---------------------------------------------------------------------------
0001436C                            
0001436C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001436C                            Player_DPLC:
0001436C 0000 0000                  	dc.l	SonicDynPLC
00014370 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014374                            	; add pointers for player dplc here
00014374                            Player_Art:
00014374 0000 0000                  	dc.l	Art_Sonic
00014378 0000 0000                  	dc.l	Art_Sonic ; gronic
0001437C                            	; add pointers for player art here
0001437C                            
0001437C                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001437C 7000                       		moveq	#0,d0
0001437E 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014382 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014386 6700                       		beq.s	locret_13C96
00014388 11C0 F766                  		move.b	d0,($FFFFF766).w
0001438C                            		
0001438C 323C 0000                  		move.w	#0,d1
00014390 1238 FFE8                  		move.b	(v_character),d1
00014394 E549                       		lsl.w	#2,d1
00014396 45FA FFD4                  		lea 	Player_DPLC(pc),a2
0001439A                            
0001439A 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
0001439E                            		
0001439E D040                       		add.w	d0,d0
000143A0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000143A4 7200                       		moveq	#0,d1
000143A6 121A                       		move.b	(a2)+,d1	; read "number of entries" value
000143A8 5301                       		subq.b	#1,d1
000143AA 6B00                       		bmi.s	locret_13C96
000143AC 47F8 C800                  		lea	($FFFFC800).w,a3
000143B0 11FC 0001 F767             		move.b	#1,($FFFFF767).w
000143B6                            
000143B6                            SPLC_ReadEntry:
000143B6 303C 0000                  		move.w	#0,d0
000143BA 1038 FFE8                  		move.b	(v_character),d0
000143BE E548                       		lsl.w	#2,d0
000143C0 43FA FFB2                  		lea 	Player_Art(pc),a1
000143C4                            
000143C4 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
000143C8                            
000143C8 7400                       		moveq	#0,d2
000143CA 141A                       		move.b	(a2)+,d2
000143CC 3002                       		move.w	d2,d0
000143CE E808                       		lsr.b	#4,d0
000143D0 E14A                       		lsl.w	#8,d2
000143D2 141A                       		move.b	(a2)+,d2
000143D4 EB4A                       		lsl.w	#5,d2
000143D6 D3C2                       		adda.l	d2,a1
000143D8                            
000143D8                            SPLC_LoadTile:
000143D8 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000143DC 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000143E0 47EB 0020                  		lea	$20(a3),a3	; next tile
000143E4 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000143E8                            
000143E8 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000143EC                            
000143EC                            locret_13C96:
000143EC 4E75                       		rts	
000143EE                            ; End of function LoadSonicDynPLC
000143EE                            
000143EE                            ; ===========================================================================
000143EE                            ; ---------------------------------------------------------------------------
000143EE                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000143EE                            ; ---------------------------------------------------------------------------
000143EE                            
000143EE                            Obj0A:					; XREF: Obj_Index
000143EE 7000                       		moveq	#0,d0
000143F0 1028 0024                  		move.b	$24(a0),d0
000143F4 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000143F8 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000143FC                            ; ===========================================================================
000143FC 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014400 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014404 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014408 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
0001440C 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001440E                            ; ===========================================================================
0001440E                            
0001440E                            Obj0A_Main:				; XREF: Obj0A_Index
0001440E 5428 0024                  		addq.b	#2,$24(a0)
00014412 217C 0001 3016 0004        		move.l	#Map_obj64,4(a0)
0001441A 317C 8348 0002             		move.w	#$8348,2(a0)
00014420 117C 0084 0001             		move.b	#$84,1(a0)
00014426 117C 0010 0019             		move.b	#$10,$19(a0)
0001442C 117C 0001 0018             		move.b	#1,$18(a0)
00014432 1028 0028                  		move.b	$28(a0),d0
00014436 6A00                       		bpl.s	loc_13D00
00014438 5028 0024                  		addq.b	#8,$24(a0)
0001443C 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014444 317C 0440 0002             		move.w	#$440,2(a0)
0001444A 0240 007F                  		andi.w	#$7F,d0
0001444E 1140 0033                  		move.b	d0,$33(a0)
00014452 6000 0000                  		bra.w	Obj0A_Countdown
00014456                            ; ===========================================================================
00014456                            
00014456                            loc_13D00:
00014456 1140 001C                  		move.b	d0,$1C(a0)
0001445A 3168 0008 0030             		move.w	8(a0),$30(a0)
00014460 317C FF78 0012             		move.w	#-$88,$12(a0)
00014466                            
00014466                            Obj0A_Animate:				; XREF: Obj0A_Index
00014466 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001446C 4EB9 0000 AD44             		jsr	AnimateSprite
00014472                            
00014472                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014472 3038 F646                  		move.w	($FFFFF646).w,d0
00014476 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
0001447A 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001447C 117C 0006 0024             		move.b	#6,$24(a0)
00014482 5E28 001C                  		addq.b	#7,$1C(a0)
00014486 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
0001448C 6700                       		beq.s	Obj0A_Display
0001448E 6000                       		bra.s	Obj0A_Display
00014490                            ; ===========================================================================
00014490                            
00014490                            Obj0A_Wobble:
00014490 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014494 6700                       		beq.s	loc_13D44
00014496 5868 0030                  		addq.w	#4,$30(a0)
0001449A                            
0001449A                            loc_13D44:
0001449A 1028 0026                  		move.b	$26(a0),d0
0001449E 5228 0026                  		addq.b	#1,$26(a0)
000144A2 0240 007F                  		andi.w	#$7F,d0
000144A6 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000144AC 1031 0000                  		move.b	(a1,d0.w),d0
000144B0 4880                       		ext.w	d0
000144B2 D068 0030                  		add.w	$30(a0),d0
000144B6 3140 0008                  		move.w	d0,8(a0)
000144BA 6100                       		bsr.s	Obj0A_ShowNumber
000144BC 4EBA 97A0                  		jsr	SpeedToPos
000144C0 4A28 0001                  		tst.b	1(a0)
000144C4 6A00                       		bpl.s	Obj0A_Delete
000144C6 4EFA 97BC                  		jmp	DisplaySprite
000144CA                            ; ===========================================================================
000144CA                            
000144CA                            Obj0A_Delete:
000144CA 4EFA 97F4                  		jmp	DeleteObject
000144CE                            ; ===========================================================================
000144CE                            
000144CE                            Obj0A_Display:				; XREF: Obj0A_Index
000144CE 6100                       		bsr.s	Obj0A_ShowNumber
000144D0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000144D6 4EB9 0000 AD44             		jsr	AnimateSprite
000144DC 4EFA 97A6                  		jmp	DisplaySprite
000144E0                            ; ===========================================================================
000144E0                            
000144E0                            Obj0A_Delete2:				; XREF: Obj0A_Index
000144E0 4EFA 97DE                  		jmp	DeleteObject
000144E4                            ; ===========================================================================
000144E4                            
000144E4                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000144E4 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000144EA 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000144EC 5368 0038                  		subq.w	#1,$38(a0)
000144F0 6600                       		bne.s	Obj0A_Display2
000144F2 117C 000E 0024             		move.b	#$E,$24(a0)
000144F8 5E28 001C                  		addq.b	#7,$1C(a0)
000144FC 60D0                       		bra.s	Obj0A_Display
000144FE                            ; ===========================================================================
000144FE                            
000144FE                            Obj0A_Display2:
000144FE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014504 4EB9 0000 AD44             		jsr	AnimateSprite
0001450A 4A28 0001                  		tst.b	1(a0)
0001450E 6A00                       		bpl.s	Obj0A_Delete3
00014510 4EFA 9772                  		jmp	DisplaySprite
00014514                            ; ===========================================================================
00014514                            
00014514                            Obj0A_Delete3:
00014514 4EFA 97AA                  		jmp	DeleteObject
00014518                            ; ===========================================================================
00014518                            
00014518                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014518 4A68 0038                  		tst.w	$38(a0)
0001451C 6700                       		beq.s	locret_13E1A
0001451E 5368 0038                  		subq.w	#1,$38(a0)
00014522 6600                       		bne.s	locret_13E1A
00014524 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
0001452A 6400                       		bcc.s	locret_13E1A
0001452C 317C 000F 0038             		move.w	#$F,$38(a0)
00014532 4268 0012                  		clr.w	$12(a0)
00014536 117C 0080 0001             		move.b	#$80,1(a0)
0001453C 3028 0008                  		move.w	8(a0),d0
00014540 9078 F700                  		sub.w	($FFFFF700).w,d0
00014544 0640 0080                  		addi.w	#$80,d0
00014548 3140 0008                  		move.w	d0,8(a0)
0001454C 3028 000C                  		move.w	$C(a0),d0
00014550 9078 F704                  		sub.w	($FFFFF704).w,d0
00014554 0640 0080                  		addi.w	#$80,d0
00014558 3140 000A                  		move.w	d0,$A(a0)
0001455C 117C 000C 0024             		move.b	#$C,$24(a0)
00014562                            
00014562                            locret_13E1A:
00014562 4E75                       		rts	
00014564                            ; ===========================================================================
00014564                            Obj0A_WobbleData:
00014564 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014575 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014586 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014597 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000145A7 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000145B4 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000145C1 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000145CE FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000145DB FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000145E4                            ; ===========================================================================
000145E4                            
000145E4                            Obj0A_Countdown:			; XREF: Obj0A_Index
000145E4 4A68 002C                  		tst.w	$2C(a0)
000145E8 6600 0000                  		bne.w	loc_13F86
000145EC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000145F2 6400 0000                  		bcc.w	locret_1408C
000145F6 0838 0006 D022             		btst	#6,($FFFFD022).w
000145FC 6700 0000                  		beq.w	locret_1408C
00014600 5368 0038                  		subq.w	#1,$38(a0)
00014604 6A00 0000                  		bpl.w	loc_13FAC
00014608 317C 003B 0038             		move.w	#59,$38(a0)
0001460E 317C 0001 0036             		move.w	#1,$36(a0)
00014614 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001461A 0240 0001                  		andi.w	#1,d0
0001461E 1140 0034                  		move.b	d0,$34(a0)
00014622 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014626 0C40 0019                  		cmpi.w	#$19,d0
0001462A 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
0001462C 0C40 0014                  		cmpi.w	#$14,d0
00014630 6700                       		beq.s	Obj0A_WarnSound
00014632 0C40 000F                  		cmpi.w	#$F,d0
00014636 6700                       		beq.s	Obj0A_WarnSound
00014638 0C40 000C                  		cmpi.w	#$C,d0
0001463C 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001463E 6600                       		bne.s	loc_13F02
00014640 303C 0092                  		move.w	#$92,d0
00014644 4EB9 0000 15BA             		jsr	(PlaySound).l	; play countdown music
0001464A                            
0001464A                            loc_13F02:
0001464A 5328 0032                  		subq.b	#1,$32(a0)
0001464E 6A00                       		bpl.s	Obj0A_ReduceAir
00014650 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014656 08E8 0007 0036             		bset	#7,$36(a0)
0001465C 6000                       		bra.s	Obj0A_ReduceAir
0001465E                            ; ===========================================================================
0001465E                            
0001465E                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001465E 303C 00C2                  		move.w	#$C2,d0
00014662 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014668                            
00014668                            Obj0A_ReduceAir:
00014668 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
0001466C 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014670 6100 0000                  		bsr.w	ResumeMusic
00014674 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001467A 303C 00B2                  		move.w	#$B2,d0
0001467E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play drowning sound
00014684 117C 000A 0034             		move.b	#$A,$34(a0)
0001468A 317C 0001 0036             		move.w	#1,$36(a0)
00014690 317C 0078 002C             		move.w	#$78,$2C(a0)
00014696 2F08                       		move.l	a0,-(sp)
00014698 41F8 D000                  		lea	($FFFFD000).w,a0
0001469C 6100 F824                  		bsr.w	Sonic_ResetOnFloor
000146A0 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000146A6 08E8 0001 0022             		bset	#1,$22(a0)
000146AC 08E8 0007 0002             		bset	#7,2(a0)
000146B2 317C 0000 0012             		move.w	#0,$12(a0)
000146B8 317C 0000 0010             		move.w	#0,$10(a0)
000146BE 317C 0000 0014             		move.w	#0,$14(a0)
000146C4 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000146CA 205F                       		movea.l	(sp)+,a0
000146CC 4E75                       		rts	
000146CE                            ; ===========================================================================
000146CE                            
000146CE                            loc_13F86:
000146CE 5368 002C                  		subq.w	#1,$2C(a0)
000146D2 6600                       		bne.s	loc_13F94
000146D4 11FC 0006 D024             		move.b	#6,($FFFFD024).w
000146DA 4E75                       		rts	
000146DC                            ; ===========================================================================
000146DC                            
000146DC                            loc_13F94:
000146DC 2F08                       		move.l	a0,-(sp)
000146DE 41F8 D000                  		lea	($FFFFD000).w,a0
000146E2 4EBA 957A                  		jsr	SpeedToPos
000146E6 0668 0010 0012             		addi.w	#$10,$12(a0)
000146EC 205F                       		movea.l	(sp)+,a0
000146EE 6000                       		bra.s	loc_13FAC
000146F0                            ; ===========================================================================
000146F0                            
000146F0                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
000146F0 6000                       		bra.s	Obj0A_MakeItem
000146F2                            ; ===========================================================================
000146F2                            
000146F2                            loc_13FAC:
000146F2 4A68 0036                  		tst.w	$36(a0)
000146F6 6700 0000                  		beq.w	locret_1408C
000146FA 5368 003A                  		subq.w	#1,$3A(a0)
000146FE 6A00 0000                  		bpl.w	locret_1408C
00014702                            
00014702                            Obj0A_MakeItem:
00014702 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00014708 0240 000F                  		andi.w	#$F,d0
0001470C 3140 003A                  		move.w	d0,$3A(a0)
00014710 4EBA 99F8                  		jsr	SingleObjLoad
00014714 6600 0000                  		bne.w	locret_1408C
00014718 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001471C 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014722 7006                       		moveq	#6,d0
00014724 0838 0000 D022             		btst	#0,($FFFFD022).w
0001472A 6700                       		beq.s	loc_13FF2
0001472C 4440                       		neg.w	d0
0001472E 137C 0040 0026             		move.b	#$40,$26(a1)
00014734                            
00014734                            loc_13FF2:
00014734 D169 0008                  		add.w	d0,8(a1)
00014738 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001473E 137C 0006 0028             		move.b	#6,$28(a1)
00014744 4A68 002C                  		tst.w	$2C(a0)
00014748 6700 0000                  		beq.w	loc_1403E
0001474C 0268 0007 003A             		andi.w	#7,$3A(a0)
00014752 0668 0000 003A             		addi.w	#0,$3A(a0)
00014758 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001475C 0440 000C                  		subi.w	#$C,d0
00014760 3340 000C                  		move.w	d0,$C(a1)
00014764 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001476A 1340 0026                  		move.b	d0,$26(a1)
0001476E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014772 0200 0003                  		andi.b	#3,d0
00014776 6600                       		bne.s	loc_14082
00014778 137C 000E 0028             		move.b	#$E,$28(a1)
0001477E 6000                       		bra.s	loc_14082
00014780                            ; ===========================================================================
00014780                            
00014780                            loc_1403E:
00014780 0828 0007 0036             		btst	#7,$36(a0)
00014786 6700                       		beq.s	loc_14082
00014788 3438 FE14                  		move.w	($FFFFFE14).w,d2
0001478C E24A                       		lsr.w	#1,d2
0001478E 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00014794 0240 0003                  		andi.w	#3,d0
00014798 6600                       		bne.s	loc_1406A
0001479A 08E8 0006 0036             		bset	#6,$36(a0)
000147A0 6600                       		bne.s	loc_14082
000147A2 1342 0028                  		move.b	d2,$28(a1)
000147A6 337C 001C 0038             		move.w	#$1C,$38(a1)
000147AC                            
000147AC                            loc_1406A:
000147AC 4A28 0034                  		tst.b	$34(a0)
000147B0 6600                       		bne.s	loc_14082
000147B2 08E8 0006 0036             		bset	#6,$36(a0)
000147B8 6600                       		bne.s	loc_14082
000147BA 1342 0028                  		move.b	d2,$28(a1)
000147BE 337C 001C 0038             		move.w	#$1C,$38(a1)
000147C4                            
000147C4                            loc_14082:
000147C4 5328 0034                  		subq.b	#1,$34(a0)
000147C8 6A00                       		bpl.s	locret_1408C
000147CA 4268 0036                  		clr.w	$36(a0)
000147CE                            
000147CE                            locret_1408C:
000147CE 4E75                       		rts	
000147D0                            
000147D0                            ; ---------------------------------------------------------------------------
000147D0                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000147D0                            ; ---------------------------------------------------------------------------
000147D0                            
000147D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000147D0                            
000147D0                            
000147D0                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000147D0 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000147D6                             
000147D6                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
000147D6                             
000147D6 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
000147DA                             
000147DA 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000147E0 6600                       		bne.s	Air_GetBgm2	; if not, branch
000147E2 43F9 0000 3B80             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000147E8 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000147EA                             
000147EA                            Air_GetBgm2:
000147EA 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000147F0 6600                       		bne.s	Air_GetBgm3	; if not, branch
000147F2 43F9 0000 3B88             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000147F8 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000147FA                             
000147FA                            Air_GetBgm3:
000147FA 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014800 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014802 43F9 0000 3B8E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014808 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001480A                             
0001480A                            Air_GetBgm4:
0001480A 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014810 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014812 43F9 0000 3B94             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014818                             
00014818                            Air_PlayMusic:
00014818 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
0001481C                             
0001481C                            loc_140A6:
0001481C 4EB9 0000 15BA             		jsr	(PlaySound).l
00014822                             
00014822                            ; NineKode ends here
00014822                            
00014822                            loc_140AC:
00014822 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014828 4238 D372                  		clr.b	($FFFFD372).w
0001482C 4E75                       		rts	
0001482E                            ; End of function ResumeMusic
0001482E                            
0001482E                            ; ===========================================================================
0001482E                            Ani_obj0A:
0001482E                            	include "_anim\obj0A.asm"
0001482E                            ; ---------------------------------------------------------------------------
0001482E                            ; Animation script - countdown numbers and bubbles (LZ)
0001482E                            ; ---------------------------------------------------------------------------
0001482E 0000                       		dc.w byte_140D6-Ani_obj0A
00014830 0000                       		dc.w byte_140E0-Ani_obj0A
00014832 0000                       		dc.w byte_140EA-Ani_obj0A
00014834 0000                       		dc.w byte_140F4-Ani_obj0A
00014836 0000                       		dc.w byte_140FE-Ani_obj0A
00014838 0000                       		dc.w byte_14108-Ani_obj0A
0001483A 0000                       		dc.w byte_14112-Ani_obj0A
0001483C 0000                       		dc.w byte_14118-Ani_obj0A
0001483E 0000                       		dc.w byte_14120-Ani_obj0A
00014840 0000                       		dc.w byte_14128-Ani_obj0A
00014842 0000                       		dc.w byte_14130-Ani_obj0A
00014844 0000                       		dc.w byte_14138-Ani_obj0A
00014846 0000                       		dc.w byte_14140-Ani_obj0A
00014848 0000                       		dc.w byte_14148-Ani_obj0A
0001484A 0000                       		dc.w byte_1414A-Ani_obj0A
0001484C 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014856 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014860 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
0001486A 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014874 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
0001487E 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014888 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
0001488E 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014896 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
0001489E 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000148A6 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000148AE 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000148B6 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
000148BE 0EFC                       byte_14148:	dc.b $E, $FC
000148C0 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000148C6                            		even
000148C6                            		even
000148C6                            
000148C6                            ; ---------------------------------------------------------------------------
000148C6                            ; Sprite mappings - drowning countdown numbers (LZ)
000148C6                            ; ---------------------------------------------------------------------------
000148C6                            Map_obj0A:
000148C6                            	include "_maps\obj0A.asm"
000148C6                            ; ---------------------------------------------------------------------------
000148C6                            ; Sprite mappings - drowning countdown numbers (LZ)
000148C6                            ; ---------------------------------------------------------------------------
000148C6 0000                       		dc.w byte_14152-Map_obj0A
000148C8 01                         byte_14152:	dc.b 1
000148C9 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000148CE                            		even
000148CE                            		even
000148CE                            
000148CE                            ; ===========================================================================
000148CE                            ; ---------------------------------------------------------------------------
000148CE                            ; Object 38 - shield and invincibility stars
000148CE                            ; ---------------------------------------------------------------------------
000148CE                            
000148CE                            Obj38:					; XREF: Obj_Index
000148CE 7000                       		moveq	#0,d0
000148D0 1028 0024                  		move.b	$24(a0),d0
000148D4 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
000148D8 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
000148DC                            ; ===========================================================================
000148DC 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
000148DE 0000                       		dc.w Obj38_Shield-Obj38_Index
000148E0 0000                       		dc.w Obj38_Stars-Obj38_Index
000148E2                            ; ===========================================================================
000148E2                            
000148E2                            Obj38_Main:				; XREF: Obj38_Index
000148E2 5428 0024                  		addq.b	#2,$24(a0)
000148E6 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
000148EE 117C 0004 0001             		move.b	#4,1(a0)
000148F4 117C 0001 0018             		move.b	#1,$18(a0)
000148FA 117C 0010 0019             		move.b	#$10,$19(a0)
00014900 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014904 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014906 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
0001490C 4E75                       		rts	
0001490E                            ; ===========================================================================
0001490E                            
0001490E                            Obj38_DoStars:
0001490E 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014912 317C 055C 0002             		move.w	#$55C,2(a0)
00014918 4E75                       		rts	
0001491A                            ; ===========================================================================
0001491A                            
0001491A                            Obj38_Shield:				; XREF: Obj38_Index
0001491A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001491E 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014920 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014924 6700                       		beq.s	Obj38_Delete	; if not, branch
00014926 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
0001492C 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014932 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014938 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001493E 4EB9 0000 AD44             		jsr	AnimateSprite
00014944 4EFA 933E                  		jmp	DisplaySprite
00014948                            ; ===========================================================================
00014948                            
00014948                            Obj38_RmvShield:
00014948 4E75                       		rts	
0001494A                            ; ===========================================================================
0001494A                            
0001494A                            Obj38_Delete:
0001494A 4EFA 9374                  		jmp	DeleteObject
0001494E                            ; ===========================================================================
0001494E                            
0001494E                            Obj38_Stars:				; XREF: Obj38_Index
0001494E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014952 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014954 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014958 1228 001C                  		move.b	$1C(a0),d1
0001495C 5301                       		subq.b	#1,d1
0001495E 6000                       		bra.s	Obj38_StarTrail
00014960                            ; ===========================================================================
00014960 E909                       		lsl.b	#4,d1
00014962 5801                       		addq.b	#4,d1
00014964 9001                       		sub.b	d1,d0
00014966 1228 0030                  		move.b	$30(a0),d1
0001496A 9001                       		sub.b	d1,d0
0001496C 5801                       		addq.b	#4,d1
0001496E 0201 000F                  		andi.b	#$F,d1
00014972 1141 0030                  		move.b	d1,$30(a0)
00014976 6000                       		bra.s	Obj38_StarTrail2a
00014978                            ; ===========================================================================
00014978                            
00014978                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014978 E709                       		lsl.b	#3,d1
0001497A 1401                       		move.b	d1,d2
0001497C D201                       		add.b	d1,d1
0001497E D202                       		add.b	d2,d1
00014980 5801                       		addq.b	#4,d1
00014982 9001                       		sub.b	d1,d0
00014984 1228 0030                  		move.b	$30(a0),d1
00014988 9001                       		sub.b	d1,d0
0001498A 5801                       		addq.b	#4,d1
0001498C 0C01 0018                  		cmpi.b	#$18,d1
00014990 6500                       		bcs.s	Obj38_StarTrail2
00014992 7200                       		moveq	#0,d1
00014994                            
00014994                            Obj38_StarTrail2:
00014994 1141 0030                  		move.b	d1,$30(a0)
00014998                            
00014998                            Obj38_StarTrail2a:
00014998 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001499C 43F1 0000                  		lea	(a1,d0.w),a1
000149A0 3159 0008                  		move.w	(a1)+,8(a0)
000149A4 3159 000C                  		move.w	(a1)+,$C(a0)
000149A8 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000149AE 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000149B4 4EB9 0000 AD44             		jsr	AnimateSprite
000149BA 4EFA 92C8                  		jmp	DisplaySprite
000149BE                            ; ===========================================================================
000149BE                            
000149BE                            Obj38_Delete2:				; XREF: Obj38_Stars
000149BE 4EFA 9300                  		jmp	DeleteObject
000149C2                            ; ===========================================================================
000149C2                            ; ---------------------------------------------------------------------------
000149C2                            ; Object 4A - special stage entry from beta
000149C2                            ; ---------------------------------------------------------------------------
000149C2                            
000149C2                            Obj4A:					; XREF: Obj_Index
000149C2 7000                       		moveq	#0,d0
000149C4 1028 0024                  		move.b	$24(a0),d0
000149C8 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
000149CC 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
000149D0                            ; ===========================================================================
000149D0 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
000149D2 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
000149D4 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
000149D6                            ; ===========================================================================
000149D6                            
000149D6                            Obj4A_Main:				; XREF: Obj4A_Index
000149D6 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
000149DA 6700                       		beq.s	Obj4A_Main2	; if yes, branch
000149DC 4E75                       		rts	
000149DE                            ; ===========================================================================
000149DE                            
000149DE                            Obj4A_Main2:
000149DE 5428 0024                  		addq.b	#2,$24(a0)
000149E2 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
000149EA 117C 0004 0001             		move.b	#4,1(a0)
000149F0 117C 0001 0018             		move.b	#1,$18(a0)
000149F6 117C 0038 0019             		move.b	#$38,$19(a0)
000149FC 317C 0541 0002             		move.w	#$541,2(a0)
00014A02 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014A08                            
00014A08                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014A08 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014A0E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014A14 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014A1A 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014A20 4EB9 0000 AD44             		jsr	AnimateSprite
00014A26 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014A2C 6600                       		bne.s	Obj4A_Display
00014A2E 4A38 D000                  		tst.b	($FFFFD000).w
00014A32 6700                       		beq.s	Obj4A_Display
00014A34 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014A3A 303C 00A8                  		move.w	#$A8,d0
00014A3E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014A44                            
00014A44                            Obj4A_Display:
00014A44 4EFA 923E                  		jmp	DisplaySprite
00014A48                            ; ===========================================================================
00014A48                            
00014A48                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014A48 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014A4C 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014A4E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014A54 4EFA 926A                  		jmp	DeleteObject
00014A58                            ; ===========================================================================
00014A58                            
00014A58                            Obj4A_Wait:
00014A58 4E75                       		rts	
00014A5A                            ; ===========================================================================
00014A5A                            ; ---------------------------------------------------------------------------
00014A5A                            ; Object 08 - water splash (LZ)
00014A5A                            ; ---------------------------------------------------------------------------
00014A5A                            
00014A5A                            Obj08:					; XREF: Obj_Index
00014A5A 7000                       		moveq	#0,d0
00014A5C 1028 0024                  		move.b	$24(a0),d0
00014A60 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014A64 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014A68                            ; ===========================================================================
00014A68 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014A6A 0000                       		dc.w Obj08_Display-Obj08_Index
00014A6C 0000                       		dc.w Obj08_Delete-Obj08_Index
00014A6E                            ; ===========================================================================
00014A6E                            
00014A6E                            Obj08_Main:				; XREF: Obj08_Index
00014A6E 5428 0024                  		addq.b	#2,$24(a0)
00014A72 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014A7A 0028 0004 0001             		ori.b	#4,1(a0)
00014A80 117C 0001 0018             		move.b	#1,$18(a0)
00014A86 117C 0010 0019             		move.b	#$10,$19(a0)
00014A8C 317C 4259 0002             		move.w	#$4259,2(a0)
00014A92 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014A98                            
00014A98                            Obj08_Display:				; XREF: Obj08_Index
00014A98 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014A9E 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014AA4 4EB9 0000 AD44             		jsr	AnimateSprite
00014AAA 4EFA 91D8                  		jmp	DisplaySprite
00014AAE                            ; ===========================================================================
00014AAE                            
00014AAE                            Obj08_Delete:				; XREF: Obj08_Index
00014AAE 4EFA 9210                  		jmp	DeleteObject	; delete when animation	is complete
00014AB2                            ; ===========================================================================
00014AB2                            Ani_obj38:
00014AB2                            	include "_anim\obj38.asm"
00014AB2                            ; ---------------------------------------------------------------------------
00014AB2                            ; Animation script - shield and invincibility stars
00014AB2                            ; ---------------------------------------------------------------------------
00014AB2 0000                       		dc.w byte_14356-Ani_obj38
00014AB4 0000                       		dc.w byte_1435E-Ani_obj38
00014AB6 0000                       		dc.w byte_14364-Ani_obj38
00014AB8 0000                       		dc.w byte_1437E-Ani_obj38
00014ABA 0000                       		dc.w byte_14398-Ani_obj38
00014ABC 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014AC4 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014ACA 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014ADB 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014AE4 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014AF5 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014AFE 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014B0F 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014B18                            		even
00014B18                            		even
00014B18                            
00014B18                            ; ---------------------------------------------------------------------------
00014B18                            ; Sprite mappings - shield and invincibility stars
00014B18                            ; ---------------------------------------------------------------------------
00014B18                            Map_obj38:
00014B18                            	include "_maps\obj38.asm"
00014B18                            ; ---------------------------------------------------------------------------
00014B18                            ; Sprite mappings - shield and invincibility stars
00014B18                            ; ---------------------------------------------------------------------------
00014B18 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014B1C 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014B20 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014B24 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014B28 04                         byte_143C2:	dc.b 4
00014B29 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014B2E E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014B33 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014B38 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014B3D 04                         byte_143D7:	dc.b 4
00014B3E E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014B43 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014B48 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014B4D 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014B52 04                         byte_143EC:	dc.b 4
00014B53 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014B58 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014B5D 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014B62 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014B67 04                         byte_14401:	dc.b 4
00014B68 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014B6D E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014B72 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014B77 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014B7C 04                         byte_14416:	dc.b 4
00014B7D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014B82 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014B87 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014B8C 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014B91 04                         byte_1442B:	dc.b 4
00014B92 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014B97 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014B9C 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014BA1 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014BA6 04                         byte_14440:	dc.b 4
00014BA7 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014BAC E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014BB1 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014BB6 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014BBC 00                         		even
00014BBC 00                         		even
00014BBC                            
00014BBC                            Ani_obj4A:
00014BBC                            	include "_anim\obj4A.asm"
00014BBC                            ; ---------------------------------------------------------------------------
00014BBC                            ; Animation script - special stage entry effect from beta
00014BBC                            ; ---------------------------------------------------------------------------
00014BBC 0000                       		dc.w byte_14458-Ani_obj4A
00014BBE 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014BD2                            		even
00014BD2                            		even
00014BD2                            
00014BD2                            ; ---------------------------------------------------------------------------
00014BD2                            ; Sprite mappings - special stage entry	from beta
00014BD2                            ; ---------------------------------------------------------------------------
00014BD2                            Map_obj4A:
00014BD2                            	include "_maps\obj4A.asm"
00014BD2                            ; ---------------------------------------------------------------------------
00014BD2                            ; Sprite mappings - special stage entry	from beta
00014BD2                            ; ---------------------------------------------------------------------------
00014BD2 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014BD6 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014BDA 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014BDE 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014BE2 03                         byte_1447C:	dc.b 3
00014BE3 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014BE8 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014BED 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014BF2 03                         byte_1448C:	dc.b 3
00014BF3 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014BF8 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014BFD 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014C02 05                         byte_1449C:	dc.b 5
00014C03 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014C08 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014C0D FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014C12 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014C17 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014C1C 09                         byte_144B6:	dc.b 9
00014C1D F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014C22 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014C27 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014C2C 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014C31 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014C36 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014C3B F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014C40 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014C45 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014C4A 12                         byte_144E4:	dc.b $12
00014C4B 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014C50 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014C55 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014C5A 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014C5F 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014C64 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014C69 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014C6E F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014C73 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014C78 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014C7D 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014C82 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014C87 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014C8C F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014C91 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014C96 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014C9B 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014CA0 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014CA5 11                         byte_1453F:	dc.b $11
00014CA6 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014CAB F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014CB0 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014CB5 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014CBA 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014CBF F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014CC4 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014CC9 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014CCE 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014CD3 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014CD8 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014CDD 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014CE2 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014CE7 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014CEC F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014CF1 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014CF6 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014CFB 09                         byte_14595:	dc.b 9
00014CFC FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014D01 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014D06 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014D0B 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014D10 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014D15 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014D1A 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014D1F 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014D24 04                         		dc.b 4
00014D25 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014D2A                            		even
00014D2A                            		even
00014D2A                            
00014D2A                            Ani_obj08:
00014D2A                            	include "_anim\obj08.asm"
00014D2A                            ; ---------------------------------------------------------------------------
00014D2A                            ; Animation script - water splash (LZ)
00014D2A                            ; ---------------------------------------------------------------------------
00014D2A 0000                       		dc.w byte_145C6-Ani_obj08
00014D2C 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014D32                            		even
00014D32                            		even
00014D32                            
00014D32                            ; ---------------------------------------------------------------------------
00014D32                            ; Sprite mappings - water splash (LZ)
00014D32                            ; ---------------------------------------------------------------------------
00014D32                            Map_obj08:
00014D32                            	include "_maps\obj08.asm"
00014D32                            ; ---------------------------------------------------------------------------
00014D32                            ; Sprite mappings - water splash (LZ)
00014D32                            ; ---------------------------------------------------------------------------
00014D32 0000                       		dc.w byte_145D2-Map_obj08
00014D34 0000                       		dc.w byte_145DD-Map_obj08
00014D36 0000                       		dc.w byte_145E8-Map_obj08
00014D38 02                         byte_145D2:	dc.b 2
00014D39 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014D3E FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014D43 02                         byte_145DD:	dc.b 2
00014D44 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014D49 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014D4E 01                         byte_145E8:	dc.b 1
00014D4F E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014D54                            		even
00014D54                            		even
00014D54                            
00014D54                            ; ---------------------------------------------------------------------------
00014D54                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014D54                            ; ---------------------------------------------------------------------------
00014D54                            
00014D54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D54                            
00014D54                            
00014D54                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014D54 0828 0003 0022             		btst	#3,$22(a0)
00014D5A 6700                       		beq.s	loc_14602
00014D5C 7000                       		moveq	#0,d0
00014D5E 11C0 F768                  		move.b	d0,($FFFFF768).w
00014D62 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014D66 4E75                       		rts	
00014D68                            ; ===========================================================================
00014D68                            
00014D68                            loc_14602:
00014D68 7003                       		moveq	#3,d0
00014D6A 11C0 F768                  		move.b	d0,($FFFFF768).w
00014D6E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014D72 1028 0026                  		move.b	$26(a0),d0
00014D76 0600 0020                  		addi.b	#$20,d0
00014D7A 6A00                       		bpl.s	loc_14624
00014D7C 1028 0026                  		move.b	$26(a0),d0
00014D80 6A00                       		bpl.s	loc_1461E
00014D82 5300                       		subq.b	#1,d0
00014D84                            
00014D84                            loc_1461E:
00014D84 0600 0020                  		addi.b	#$20,d0
00014D88 6000                       		bra.s	loc_14630
00014D8A                            ; ===========================================================================
00014D8A                            
00014D8A                            loc_14624:
00014D8A 1028 0026                  		move.b	$26(a0),d0
00014D8E 6A00                       		bpl.s	loc_1462C
00014D90 5200                       		addq.b	#1,d0
00014D92                            
00014D92                            loc_1462C:
00014D92 0600 001F                  		addi.b	#$1F,d0
00014D96                            
00014D96                            loc_14630:
00014D96 0200 00C0                  		andi.b	#$C0,d0
00014D9A 0C00 0040                  		cmpi.b	#$40,d0
00014D9E 6700 0000                  		beq.w	Sonic_WalkVertL
00014DA2 0C00 0080                  		cmpi.b	#$80,d0
00014DA6 6700 0000                  		beq.w	Sonic_WalkCeiling
00014DAA 0C00 00C0                  		cmpi.b	#$C0,d0
00014DAE 6700 0000                  		beq.w	Sonic_WalkVertR
00014DB2 3428 000C                  		move.w	$C(a0),d2
00014DB6 3628 0008                  		move.w	8(a0),d3
00014DBA 7000                       		moveq	#0,d0
00014DBC 1028 0016                  		move.b	$16(a0),d0
00014DC0 4880                       		ext.w	d0
00014DC2 D440                       		add.w	d0,d2
00014DC4 1028 0017                  		move.b	$17(a0),d0
00014DC8 4880                       		ext.w	d0
00014DCA D640                       		add.w	d0,d3
00014DCC 49F8 F768                  		lea	($FFFFF768).w,a4
00014DD0 367C 0010                  		movea.w	#$10,a3
00014DD4 3C3C 0000                  		move.w	#0,d6
00014DD8 7A0D                       		moveq	#$D,d5
00014DDA 6100 0000                  		bsr.w	FindFloor
00014DDE 3F01                       		move.w	d1,-(sp)
00014DE0 3428 000C                  		move.w	$C(a0),d2
00014DE4 3628 0008                  		move.w	8(a0),d3
00014DE8 7000                       		moveq	#0,d0
00014DEA 1028 0016                  		move.b	$16(a0),d0
00014DEE 4880                       		ext.w	d0
00014DF0 D440                       		add.w	d0,d2
00014DF2 1028 0017                  		move.b	$17(a0),d0
00014DF6 4880                       		ext.w	d0
00014DF8 4440                       		neg.w	d0
00014DFA D640                       		add.w	d0,d3
00014DFC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E00 367C 0010                  		movea.w	#$10,a3
00014E04 3C3C 0000                  		move.w	#0,d6
00014E08 7A0D                       		moveq	#$D,d5
00014E0A 6100 0000                  		bsr.w	FindFloor
00014E0E 301F                       		move.w	(sp)+,d0
00014E10 6100 0000                  		bsr.w	Sonic_Angle
00014E14 4A41                       		tst.w	d1
00014E16 6700                       		beq.s	locret_146BE
00014E18 6A00                       		bpl.s	loc_146C0
00014E1A 0C41 FFF2                  		cmpi.w	#-$E,d1
00014E1E 6D00                       		blt.s	locret_146E6
00014E20 D368 000C                  		add.w	d1,$C(a0)
00014E24                            
00014E24                            locret_146BE:
00014E24 4E75                       		rts	
00014E26                            ; ===========================================================================
00014E26                            
00014E26                            loc_146C0:
00014E26 0C41 000E                  		cmpi.w	#$E,d1
00014E2A 6E00                       		bgt.s	loc_146CC
00014E2C                            
00014E2C                            loc_146C6:
00014E2C D368 000C                  		add.w	d1,$C(a0)
00014E30 4E75                       		rts	
00014E32                            ; ===========================================================================
00014E32                            
00014E32                            loc_146CC:
00014E32 4A28 0038                  		tst.b	$38(a0)
00014E36 66F4                       		bne.s	loc_146C6
00014E38 08E8 0001 0022             		bset	#1,$22(a0)
00014E3E 08A8 0005 0022             		bclr	#5,$22(a0)
00014E44 117C 0001 001D             		move.b	#1,$1D(a0)
00014E4A 4E75                       		rts	
00014E4C                            ; ===========================================================================
00014E4C                            
00014E4C                            locret_146E6:
00014E4C 4E75                       		rts	
00014E4E                            ; End of function Sonic_AnglePos
00014E4E                            
00014E4E                            ; ===========================================================================
00014E4E 2428 0008                  		move.l	8(a0),d2
00014E52 3028 0010                  		move.w	$10(a0),d0
00014E56 48C0                       		ext.l	d0
00014E58 E180                       		asl.l	#8,d0
00014E5A 9480                       		sub.l	d0,d2
00014E5C 2142 0008                  		move.l	d2,8(a0)
00014E60 303C 0038                  		move.w	#$38,d0
00014E64 48C0                       		ext.l	d0
00014E66 E180                       		asl.l	#8,d0
00014E68 9680                       		sub.l	d0,d3
00014E6A 2143 000C                  		move.l	d3,$C(a0)
00014E6E 4E75                       		rts	
00014E70                            ; ===========================================================================
00014E70                            
00014E70                            locret_1470A:
00014E70 4E75                       		rts	
00014E72                            ; ===========================================================================
00014E72 2628 000C                  		move.l	$C(a0),d3
00014E76 3028 0012                  		move.w	$12(a0),d0
00014E7A 0440 0038                  		subi.w	#$38,d0
00014E7E 3140 0012                  		move.w	d0,$12(a0)
00014E82 48C0                       		ext.l	d0
00014E84 E180                       		asl.l	#8,d0
00014E86 9680                       		sub.l	d0,d3
00014E88 2143 000C                  		move.l	d3,$C(a0)
00014E8C 4E75                       		rts	
00014E8E 4E75                       		rts	
00014E90                            ; ===========================================================================
00014E90 2428 0008                  		move.l	8(a0),d2
00014E94 2628 000C                  		move.l	$C(a0),d3
00014E98 3028 0010                  		move.w	$10(a0),d0
00014E9C 48C0                       		ext.l	d0
00014E9E E180                       		asl.l	#8,d0
00014EA0 9480                       		sub.l	d0,d2
00014EA2 3028 0012                  		move.w	$12(a0),d0
00014EA6 48C0                       		ext.l	d0
00014EA8 E180                       		asl.l	#8,d0
00014EAA 9680                       		sub.l	d0,d3
00014EAC 2142 0008                  		move.l	d2,8(a0)
00014EB0 2143 000C                  		move.l	d3,$C(a0)
00014EB4 4E75                       		rts	
00014EB6                            
00014EB6                            ; ---------------------------------------------------------------------------
00014EB6                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014EB6                            ; ---------------------------------------------------------------------------
00014EB6                            
00014EB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EB6                            
00014EB6                            
00014EB6                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014EB6 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014EBA B240                       		cmp.w	d0,d1
00014EBC 6F00                       		ble.s	loc_1475E
00014EBE 1438 F768                  		move.b	($FFFFF768).w,d2
00014EC2 3200                       		move.w	d0,d1
00014EC4                            
00014EC4                            loc_1475E:
00014EC4 0802 0000                  		btst	#0,d2
00014EC8 6600                       		bne.s	loc_1476A
00014ECA 1142 0026                  		move.b	d2,$26(a0)
00014ECE 4E75                       		rts	
00014ED0                            ; ===========================================================================
00014ED0                            
00014ED0                            loc_1476A:
00014ED0 1428 0026                  		move.b	$26(a0),d2
00014ED4 0602 0020                  		addi.b	#$20,d2
00014ED8 0202 00C0                  		andi.b	#$C0,d2
00014EDC 1142 0026                  		move.b	d2,$26(a0)
00014EE0 4E75                       		rts	
00014EE2                            ; End of function Sonic_Angle
00014EE2                            
00014EE2                            ; ---------------------------------------------------------------------------
00014EE2                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014EE2                            ; ---------------------------------------------------------------------------
00014EE2                            
00014EE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EE2                            
00014EE2                            
00014EE2                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014EE2 3428 000C                  		move.w	$C(a0),d2
00014EE6 3628 0008                  		move.w	8(a0),d3
00014EEA 7000                       		moveq	#0,d0
00014EEC 1028 0017                  		move.b	$17(a0),d0
00014EF0 4880                       		ext.w	d0
00014EF2 4440                       		neg.w	d0
00014EF4 D440                       		add.w	d0,d2
00014EF6 1028 0016                  		move.b	$16(a0),d0
00014EFA 4880                       		ext.w	d0
00014EFC D640                       		add.w	d0,d3
00014EFE 49F8 F768                  		lea	($FFFFF768).w,a4
00014F02 367C 0010                  		movea.w	#$10,a3
00014F06 3C3C 0000                  		move.w	#0,d6
00014F0A 7A0D                       		moveq	#$D,d5
00014F0C 6100 0000                  		bsr.w	FindWall
00014F10 3F01                       		move.w	d1,-(sp)
00014F12 3428 000C                  		move.w	$C(a0),d2
00014F16 3628 0008                  		move.w	8(a0),d3
00014F1A 7000                       		moveq	#0,d0
00014F1C 1028 0017                  		move.b	$17(a0),d0
00014F20 4880                       		ext.w	d0
00014F22 D440                       		add.w	d0,d2
00014F24 1028 0016                  		move.b	$16(a0),d0
00014F28 4880                       		ext.w	d0
00014F2A D640                       		add.w	d0,d3
00014F2C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F30 367C 0010                  		movea.w	#$10,a3
00014F34 3C3C 0000                  		move.w	#0,d6
00014F38 7A0D                       		moveq	#$D,d5
00014F3A 6100 0000                  		bsr.w	FindWall
00014F3E 301F                       		move.w	(sp)+,d0
00014F40 6100 FF74                  		bsr.w	Sonic_Angle
00014F44 4A41                       		tst.w	d1
00014F46 6700                       		beq.s	locret_147F0
00014F48 6A00                       		bpl.s	loc_147F2
00014F4A 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F4E 6D00 FF20                  		blt.w	locret_1470A
00014F52 D368 0008                  		add.w	d1,8(a0)
00014F56                            
00014F56                            locret_147F0:
00014F56 4E75                       		rts	
00014F58                            ; ===========================================================================
00014F58                            
00014F58                            loc_147F2:
00014F58 0C41 000E                  		cmpi.w	#$E,d1
00014F5C 6E00                       		bgt.s	loc_147FE
00014F5E                            
00014F5E                            loc_147F8:
00014F5E D368 0008                  		add.w	d1,8(a0)
00014F62 4E75                       		rts	
00014F64                            ; ===========================================================================
00014F64                            
00014F64                            loc_147FE:
00014F64 4A28 0038                  		tst.b	$38(a0)
00014F68 66F4                       		bne.s	loc_147F8
00014F6A 08E8 0001 0022             		bset	#1,$22(a0)
00014F70 08A8 0005 0022             		bclr	#5,$22(a0)
00014F76 117C 0001 001D             		move.b	#1,$1D(a0)
00014F7C 4E75                       		rts	
00014F7E                            ; End of function Sonic_WalkVertR
00014F7E                            
00014F7E                            ; ---------------------------------------------------------------------------
00014F7E                            ; Subroutine allowing Sonic to walk upside-down
00014F7E                            ; ---------------------------------------------------------------------------
00014F7E                            
00014F7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F7E                            
00014F7E                            
00014F7E                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014F7E 3428 000C                  		move.w	$C(a0),d2
00014F82 3628 0008                  		move.w	8(a0),d3
00014F86 7000                       		moveq	#0,d0
00014F88 1028 0016                  		move.b	$16(a0),d0
00014F8C 4880                       		ext.w	d0
00014F8E 9440                       		sub.w	d0,d2
00014F90 0A42 000F                  		eori.w	#$F,d2
00014F94 1028 0017                  		move.b	$17(a0),d0
00014F98 4880                       		ext.w	d0
00014F9A D640                       		add.w	d0,d3
00014F9C 49F8 F768                  		lea	($FFFFF768).w,a4
00014FA0 367C FFF0                  		movea.w	#-$10,a3
00014FA4 3C3C 1000                  		move.w	#$1000,d6
00014FA8 7A0D                       		moveq	#$D,d5
00014FAA 6100 0000                  		bsr.w	FindFloor
00014FAE 3F01                       		move.w	d1,-(sp)
00014FB0 3428 000C                  		move.w	$C(a0),d2
00014FB4 3628 0008                  		move.w	8(a0),d3
00014FB8 7000                       		moveq	#0,d0
00014FBA 1028 0016                  		move.b	$16(a0),d0
00014FBE 4880                       		ext.w	d0
00014FC0 9440                       		sub.w	d0,d2
00014FC2 0A42 000F                  		eori.w	#$F,d2
00014FC6 1028 0017                  		move.b	$17(a0),d0
00014FCA 4880                       		ext.w	d0
00014FCC 9640                       		sub.w	d0,d3
00014FCE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014FD2 367C FFF0                  		movea.w	#-$10,a3
00014FD6 3C3C 1000                  		move.w	#$1000,d6
00014FDA 7A0D                       		moveq	#$D,d5
00014FDC 6100 0000                  		bsr.w	FindFloor
00014FE0 301F                       		move.w	(sp)+,d0
00014FE2 6100 FED2                  		bsr.w	Sonic_Angle
00014FE6 4A41                       		tst.w	d1
00014FE8 6700                       		beq.s	locret_14892
00014FEA 6A00                       		bpl.s	loc_14894
00014FEC 0C41 FFF2                  		cmpi.w	#-$E,d1
00014FF0 6D00 FE5A                  		blt.w	locret_146E6
00014FF4 9368 000C                  		sub.w	d1,$C(a0)
00014FF8                            
00014FF8                            locret_14892:
00014FF8 4E75                       		rts	
00014FFA                            ; ===========================================================================
00014FFA                            
00014FFA                            loc_14894:
00014FFA 0C41 000E                  		cmpi.w	#$E,d1
00014FFE 6E00                       		bgt.s	loc_148A0
00015000                            
00015000                            loc_1489A:
00015000 9368 000C                  		sub.w	d1,$C(a0)
00015004 4E75                       		rts	
00015006                            ; ===========================================================================
00015006                            
00015006                            loc_148A0:
00015006 4A28 0038                  		tst.b	$38(a0)
0001500A 66F4                       		bne.s	loc_1489A
0001500C 08E8 0001 0022             		bset	#1,$22(a0)
00015012 08A8 0005 0022             		bclr	#5,$22(a0)
00015018 117C 0001 001D             		move.b	#1,$1D(a0)
0001501E 4E75                       		rts	
00015020                            ; End of function Sonic_WalkCeiling
00015020                            
00015020                            ; ---------------------------------------------------------------------------
00015020                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00015020                            ; ---------------------------------------------------------------------------
00015020                            
00015020                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015020                            
00015020                            
00015020                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00015020 3428 000C                  		move.w	$C(a0),d2
00015024 3628 0008                  		move.w	8(a0),d3
00015028 7000                       		moveq	#0,d0
0001502A 1028 0017                  		move.b	$17(a0),d0
0001502E 4880                       		ext.w	d0
00015030 9440                       		sub.w	d0,d2
00015032 1028 0016                  		move.b	$16(a0),d0
00015036 4880                       		ext.w	d0
00015038 9640                       		sub.w	d0,d3
0001503A 0A43 000F                  		eori.w	#$F,d3
0001503E 49F8 F768                  		lea	($FFFFF768).w,a4
00015042 367C FFF0                  		movea.w	#-$10,a3
00015046 3C3C 0800                  		move.w	#$800,d6
0001504A 7A0D                       		moveq	#$D,d5
0001504C 6100 0000                  		bsr.w	FindWall
00015050 3F01                       		move.w	d1,-(sp)
00015052 3428 000C                  		move.w	$C(a0),d2
00015056 3628 0008                  		move.w	8(a0),d3
0001505A 7000                       		moveq	#0,d0
0001505C 1028 0017                  		move.b	$17(a0),d0
00015060 4880                       		ext.w	d0
00015062 D440                       		add.w	d0,d2
00015064 1028 0016                  		move.b	$16(a0),d0
00015068 4880                       		ext.w	d0
0001506A 9640                       		sub.w	d0,d3
0001506C 0A43 000F                  		eori.w	#$F,d3
00015070 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015074 367C FFF0                  		movea.w	#-$10,a3
00015078 3C3C 0800                  		move.w	#$800,d6
0001507C 7A0D                       		moveq	#$D,d5
0001507E 6100 0000                  		bsr.w	FindWall
00015082 301F                       		move.w	(sp)+,d0
00015084 6100 FE30                  		bsr.w	Sonic_Angle
00015088 4A41                       		tst.w	d1
0001508A 6700                       		beq.s	locret_14934
0001508C 6A00                       		bpl.s	loc_14936
0001508E 0C41 FFF2                  		cmpi.w	#-$E,d1
00015092 6D00 FDDC                  		blt.w	locret_1470A
00015096 9368 0008                  		sub.w	d1,8(a0)
0001509A                            
0001509A                            locret_14934:
0001509A 4E75                       		rts	
0001509C                            ; ===========================================================================
0001509C                            
0001509C                            loc_14936:
0001509C 0C41 000E                  		cmpi.w	#$E,d1
000150A0 6E00                       		bgt.s	loc_14942
000150A2                            
000150A2                            loc_1493C:
000150A2 9368 0008                  		sub.w	d1,8(a0)
000150A6 4E75                       		rts	
000150A8                            ; ===========================================================================
000150A8                            
000150A8                            loc_14942:
000150A8 4A28 0038                  		tst.b	$38(a0)
000150AC 66F4                       		bne.s	loc_1493C
000150AE 08E8 0001 0022             		bset	#1,$22(a0)
000150B4 08A8 0005 0022             		bclr	#5,$22(a0)
000150BA 117C 0001 001D             		move.b	#1,$1D(a0)
000150C0 4E75                       		rts	
000150C2                            ; End of function Sonic_WalkVertL
000150C2                            
000150C2                            ; ---------------------------------------------------------------------------
000150C2                            ; Subroutine to	find which tile	the object is standing on
000150C2                            ; ---------------------------------------------------------------------------
000150C2                            
000150C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150C2                            
000150C2                            
000150C2                            Floor_ChkTile:				; XREF: FindFloor; et al
000150C2 3002                       		move.w	d2,d0
000150C4 E248                       		lsr.w	#1,d0
000150C6 0240 0380                  		andi.w	#$380,d0
000150CA 3203                       		move.w	d3,d1
000150CC E049                       		lsr.w	#8,d1
000150CE 0241 007F                  		andi.w	#$7F,d1
000150D2 D041                       		add.w	d1,d0
000150D4 72FF                       		moveq	#-1,d1
000150D6 43F8 A400                  		lea	($FFFFA400).w,a1
000150DA 1231 0000                  		move.b	(a1,d0.w),d1
000150DE 6700                       		beq.s	loc_14996
000150E0 6B00                       		bmi.s	loc_1499A
000150E2 5301                       		subq.b	#1,d1
000150E4 4881                       		ext.w	d1
000150E6 EE59                       		ror.w	#7,d1
000150E8 3002                       		move.w	d2,d0
000150EA D040                       		add.w	d0,d0
000150EC 0240 01E0                  		andi.w	#$1E0,d0
000150F0 D240                       		add.w	d0,d1
000150F2 3003                       		move.w	d3,d0
000150F4 E648                       		lsr.w	#3,d0
000150F6 0240 001E                  		andi.w	#$1E,d0
000150FA D240                       		add.w	d0,d1
000150FC                            
000150FC                            loc_14996:
000150FC 2241                       		movea.l	d1,a1
000150FE 4E75                       		rts	
00015100                            ; ===========================================================================
00015100                            
00015100                            loc_1499A:
00015100 0241 007F                  		andi.w	#$7F,d1
00015104 0828 0006 0001             		btst	#6,1(a0)
0001510A 6700                       		beq.s	loc_149B2
0001510C 5241                       		addq.w	#1,d1
0001510E 0C41 0029                  		cmpi.w	#$29,d1
00015112 6600                       		bne.s	loc_149B2
00015114 323C 0051                  		move.w	#$51,d1
00015118                            
00015118                            loc_149B2:
00015118 5301                       		subq.b	#1,d1
0001511A EE59                       		ror.w	#7,d1
0001511C 3002                       		move.w	d2,d0
0001511E D040                       		add.w	d0,d0
00015120 0240 01E0                  		andi.w	#$1E0,d0
00015124 D240                       		add.w	d0,d1
00015126 3003                       		move.w	d3,d0
00015128 E648                       		lsr.w	#3,d0
0001512A 0240 001E                  		andi.w	#$1E,d0
0001512E D240                       		add.w	d0,d1
00015130 2241                       		movea.l	d1,a1
00015132 4E75                       		rts	
00015134                            ; End of function Floor_ChkTile
00015134                            
00015134                            
00015134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015134                            
00015134                            
00015134                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015134 618C                       		bsr.s	Floor_ChkTile
00015136 3011                       		move.w	(a1),d0
00015138 3800                       		move.w	d0,d4
0001513A 0240 07FF                  		andi.w	#$7FF,d0
0001513E 6700                       		beq.s	loc_149DE
00015140 0B04                       		btst	d5,d4
00015142 6600                       		bne.s	loc_149EC
00015144                            
00015144                            loc_149DE:
00015144 D44B                       		add.w	a3,d2
00015146 6100 0000                  		bsr.w	FindFloor2
0001514A 944B                       		sub.w	a3,d2
0001514C 0641 0010                  		addi.w	#$10,d1
00015150 4E75                       		rts	
00015152                            ; ===========================================================================
00015152                            
00015152                            loc_149EC:
00015152 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015156 1032 0000                  		move.b	(a2,d0.w),d0
0001515A 0240 00FF                  		andi.w	#$FF,d0
0001515E 67E4                       		beq.s	loc_149DE
00015160 45F9 0000 0000             		lea	(AngleMap).l,a2
00015166 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001516A E948                       		lsl.w	#4,d0
0001516C 3203                       		move.w	d3,d1
0001516E 0804 000B                  		btst	#$B,d4
00015172 6700                       		beq.s	loc_14A12
00015174 4641                       		not.w	d1
00015176 4414                       		neg.b	(a4)
00015178                            
00015178                            loc_14A12:
00015178 0804 000C                  		btst	#$C,d4
0001517C 6700                       		beq.s	loc_14A22
0001517E 0614 0040                  		addi.b	#$40,(a4)
00015182 4414                       		neg.b	(a4)
00015184 0414 0040                  		subi.b	#$40,(a4)
00015188                            
00015188                            loc_14A22:
00015188 0241 000F                  		andi.w	#$F,d1
0001518C D240                       		add.w	d0,d1
0001518E 45F9 0000 0000             		lea	(CollArray1).l,a2
00015194 1032 1000                  		move.b	(a2,d1.w),d0
00015198 4880                       		ext.w	d0
0001519A BD44                       		eor.w	d6,d4
0001519C 0804 000C                  		btst	#$C,d4
000151A0 6700                       		beq.s	loc_14A3E
000151A2 4440                       		neg.w	d0
000151A4                            
000151A4                            loc_14A3E:
000151A4 4A40                       		tst.w	d0
000151A6 679C                       		beq.s	loc_149DE
000151A8 6B00                       		bmi.s	loc_14A5A
000151AA 0C00 0010                  		cmpi.b	#$10,d0
000151AE 6700                       		beq.s	loc_14A66
000151B0 3202                       		move.w	d2,d1
000151B2 0241 000F                  		andi.w	#$F,d1
000151B6 D041                       		add.w	d1,d0
000151B8 323C 000F                  		move.w	#$F,d1
000151BC 9240                       		sub.w	d0,d1
000151BE 4E75                       		rts	
000151C0                            ; ===========================================================================
000151C0                            
000151C0                            loc_14A5A:
000151C0 3202                       		move.w	d2,d1
000151C2 0241 000F                  		andi.w	#$F,d1
000151C6 D041                       		add.w	d1,d0
000151C8 6A00 FF7A                  		bpl.w	loc_149DE
000151CC                            
000151CC                            loc_14A66:
000151CC 944B                       		sub.w	a3,d2
000151CE 6100 0000                  		bsr.w	FindFloor2
000151D2 D44B                       		add.w	a3,d2
000151D4 0441 0010                  		subi.w	#$10,d1
000151D8 4E75                       		rts	
000151DA                            ; End of function FindFloor
000151DA                            
000151DA                            
000151DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151DA                            
000151DA                            
000151DA                            FindFloor2:				; XREF: FindFloor
000151DA 6100 FEE6                  		bsr.w	Floor_ChkTile
000151DE 3011                       		move.w	(a1),d0
000151E0 3800                       		move.w	d0,d4
000151E2 0240 07FF                  		andi.w	#$7FF,d0
000151E6 6700                       		beq.s	loc_14A86
000151E8 0B04                       		btst	d5,d4
000151EA 6600                       		bne.s	loc_14A94
000151EC                            
000151EC                            loc_14A86:
000151EC 323C 000F                  		move.w	#$F,d1
000151F0 3002                       		move.w	d2,d0
000151F2 0240 000F                  		andi.w	#$F,d0
000151F6 9240                       		sub.w	d0,d1
000151F8 4E75                       		rts	
000151FA                            ; ===========================================================================
000151FA                            
000151FA                            loc_14A94:
000151FA 2478 F796                  		movea.l	($FFFFF796).w,a2
000151FE 1032 0000                  		move.b	(a2,d0.w),d0
00015202 0240 00FF                  		andi.w	#$FF,d0
00015206 67E4                       		beq.s	loc_14A86
00015208 45F9 0000 0000             		lea	(AngleMap).l,a2
0001520E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015212 E948                       		lsl.w	#4,d0
00015214 3203                       		move.w	d3,d1
00015216 0804 000B                  		btst	#$B,d4
0001521A 6700                       		beq.s	loc_14ABA
0001521C 4641                       		not.w	d1
0001521E 4414                       		neg.b	(a4)
00015220                            
00015220                            loc_14ABA:
00015220 0804 000C                  		btst	#$C,d4
00015224 6700                       		beq.s	loc_14ACA
00015226 0614 0040                  		addi.b	#$40,(a4)
0001522A 4414                       		neg.b	(a4)
0001522C 0414 0040                  		subi.b	#$40,(a4)
00015230                            
00015230                            loc_14ACA:
00015230 0241 000F                  		andi.w	#$F,d1
00015234 D240                       		add.w	d0,d1
00015236 45F9 0000 0000             		lea	(CollArray1).l,a2
0001523C 1032 1000                  		move.b	(a2,d1.w),d0
00015240 4880                       		ext.w	d0
00015242 BD44                       		eor.w	d6,d4
00015244 0804 000C                  		btst	#$C,d4
00015248 6700                       		beq.s	loc_14AE6
0001524A 4440                       		neg.w	d0
0001524C                            
0001524C                            loc_14AE6:
0001524C 4A40                       		tst.w	d0
0001524E 679C                       		beq.s	loc_14A86
00015250 6B00                       		bmi.s	loc_14AFC
00015252 3202                       		move.w	d2,d1
00015254 0241 000F                  		andi.w	#$F,d1
00015258 D041                       		add.w	d1,d0
0001525A 323C 000F                  		move.w	#$F,d1
0001525E 9240                       		sub.w	d0,d1
00015260 4E75                       		rts	
00015262                            ; ===========================================================================
00015262                            
00015262                            loc_14AFC:
00015262 3202                       		move.w	d2,d1
00015264 0241 000F                  		andi.w	#$F,d1
00015268 D041                       		add.w	d1,d0
0001526A 6A00 FF80                  		bpl.w	loc_14A86
0001526E 4641                       		not.w	d1
00015270 4E75                       		rts	
00015272                            ; End of function FindFloor2
00015272                            
00015272                            
00015272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015272                            
00015272                            
00015272                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015272 6100 FE4E                  		bsr.w	Floor_ChkTile
00015276 3011                       		move.w	(a1),d0
00015278 3800                       		move.w	d0,d4
0001527A 0240 07FF                  		andi.w	#$7FF,d0
0001527E 6700                       		beq.s	loc_14B1E
00015280 0B04                       		btst	d5,d4
00015282 6600                       		bne.s	loc_14B2C
00015284                            
00015284                            loc_14B1E:
00015284 D64B                       		add.w	a3,d3
00015286 6100 0000                  		bsr.w	FindWall2
0001528A 964B                       		sub.w	a3,d3
0001528C 0641 0010                  		addi.w	#$10,d1
00015290 4E75                       		rts	
00015292                            ; ===========================================================================
00015292                            
00015292                            loc_14B2C:
00015292 2478 F796                  		movea.l	($FFFFF796).w,a2
00015296 1032 0000                  		move.b	(a2,d0.w),d0
0001529A 0240 00FF                  		andi.w	#$FF,d0
0001529E 67E4                       		beq.s	loc_14B1E
000152A0 45F9 0000 0000             		lea	(AngleMap).l,a2
000152A6 18B2 0000                  		move.b	(a2,d0.w),(a4)
000152AA E948                       		lsl.w	#4,d0
000152AC 3202                       		move.w	d2,d1
000152AE 0804 000C                  		btst	#$C,d4
000152B2 6700                       		beq.s	loc_14B5A
000152B4 4641                       		not.w	d1
000152B6 0614 0040                  		addi.b	#$40,(a4)
000152BA 4414                       		neg.b	(a4)
000152BC 0414 0040                  		subi.b	#$40,(a4)
000152C0                            
000152C0                            loc_14B5A:
000152C0 0804 000B                  		btst	#$B,d4
000152C4 6700                       		beq.s	loc_14B62
000152C6 4414                       		neg.b	(a4)
000152C8                            
000152C8                            loc_14B62:
000152C8 0241 000F                  		andi.w	#$F,d1
000152CC D240                       		add.w	d0,d1
000152CE 45F9 0000 0000             		lea	(CollArray2).l,a2
000152D4 1032 1000                  		move.b	(a2,d1.w),d0
000152D8 4880                       		ext.w	d0
000152DA BD44                       		eor.w	d6,d4
000152DC 0804 000B                  		btst	#$B,d4
000152E0 6700                       		beq.s	loc_14B7E
000152E2 4440                       		neg.w	d0
000152E4                            
000152E4                            loc_14B7E:
000152E4 4A40                       		tst.w	d0
000152E6 679C                       		beq.s	loc_14B1E
000152E8 6B00                       		bmi.s	loc_14B9A
000152EA 0C00 0010                  		cmpi.b	#$10,d0
000152EE 6700                       		beq.s	loc_14BA6
000152F0 3203                       		move.w	d3,d1
000152F2 0241 000F                  		andi.w	#$F,d1
000152F6 D041                       		add.w	d1,d0
000152F8 323C 000F                  		move.w	#$F,d1
000152FC 9240                       		sub.w	d0,d1
000152FE 4E75                       		rts	
00015300                            ; ===========================================================================
00015300                            
00015300                            loc_14B9A:
00015300 3203                       		move.w	d3,d1
00015302 0241 000F                  		andi.w	#$F,d1
00015306 D041                       		add.w	d1,d0
00015308 6A00 FF7A                  		bpl.w	loc_14B1E
0001530C                            
0001530C                            loc_14BA6:
0001530C 964B                       		sub.w	a3,d3
0001530E 6100 0000                  		bsr.w	FindWall2
00015312 D64B                       		add.w	a3,d3
00015314 0441 0010                  		subi.w	#$10,d1
00015318 4E75                       		rts	
0001531A                            ; End of function FindWall
0001531A                            
0001531A                            
0001531A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001531A                            
0001531A                            
0001531A                            FindWall2:				; XREF: FindWall
0001531A 6100 FDA6                  		bsr.w	Floor_ChkTile
0001531E 3011                       		move.w	(a1),d0
00015320 3800                       		move.w	d0,d4
00015322 0240 07FF                  		andi.w	#$7FF,d0
00015326 6700                       		beq.s	loc_14BC6
00015328 0B04                       		btst	d5,d4
0001532A 6600                       		bne.s	loc_14BD4
0001532C                            
0001532C                            loc_14BC6:
0001532C 323C 000F                  		move.w	#$F,d1
00015330 3003                       		move.w	d3,d0
00015332 0240 000F                  		andi.w	#$F,d0
00015336 9240                       		sub.w	d0,d1
00015338 4E75                       		rts	
0001533A                            ; ===========================================================================
0001533A                            
0001533A                            loc_14BD4:
0001533A 2478 F796                  		movea.l	($FFFFF796).w,a2
0001533E 1032 0000                  		move.b	(a2,d0.w),d0
00015342 0240 00FF                  		andi.w	#$FF,d0
00015346 67E4                       		beq.s	loc_14BC6
00015348 45F9 0000 0000             		lea	(AngleMap).l,a2
0001534E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015352 E948                       		lsl.w	#4,d0
00015354 3202                       		move.w	d2,d1
00015356 0804 000C                  		btst	#$C,d4
0001535A 6700                       		beq.s	loc_14C02
0001535C 4641                       		not.w	d1
0001535E 0614 0040                  		addi.b	#$40,(a4)
00015362 4414                       		neg.b	(a4)
00015364 0414 0040                  		subi.b	#$40,(a4)
00015368                            
00015368                            loc_14C02:
00015368 0804 000B                  		btst	#$B,d4
0001536C 6700                       		beq.s	loc_14C0A
0001536E 4414                       		neg.b	(a4)
00015370                            
00015370                            loc_14C0A:
00015370 0241 000F                  		andi.w	#$F,d1
00015374 D240                       		add.w	d0,d1
00015376 45F9 0000 0000             		lea	(CollArray2).l,a2
0001537C 1032 1000                  		move.b	(a2,d1.w),d0
00015380 4880                       		ext.w	d0
00015382 BD44                       		eor.w	d6,d4
00015384 0804 000B                  		btst	#$B,d4
00015388 6700                       		beq.s	loc_14C26
0001538A 4440                       		neg.w	d0
0001538C                            
0001538C                            loc_14C26:
0001538C 4A40                       		tst.w	d0
0001538E 679C                       		beq.s	loc_14BC6
00015390 6B00                       		bmi.s	loc_14C3C
00015392 3203                       		move.w	d3,d1
00015394 0241 000F                  		andi.w	#$F,d1
00015398 D041                       		add.w	d1,d0
0001539A 323C 000F                  		move.w	#$F,d1
0001539E 9240                       		sub.w	d0,d1
000153A0 4E75                       		rts	
000153A2                            ; ===========================================================================
000153A2                            
000153A2                            loc_14C3C:
000153A2 3203                       		move.w	d3,d1
000153A4 0241 000F                  		andi.w	#$F,d1
000153A8 D041                       		add.w	d1,d0
000153AA 6A00 FF80                  		bpl.w	loc_14BC6
000153AE 4641                       		not.w	d1
000153B0 4E75                       		rts	
000153B2                            ; End of function FindWall2
000153B2                            
000153B2                            ; ---------------------------------------------------------------------------
000153B2                            ; Unused floor/wall subroutine - logs something	to do with collision
000153B2                            ; ---------------------------------------------------------------------------
000153B2                            
000153B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153B2                            
000153B2                            
000153B2                            FloorLog_Unk:				; XREF: Level
000153B2 4E75                       		rts	
000153B4                            
000153B4 43F9 0000 0000             		lea	(CollArray1).l,a1
000153BA 45F9 0000 0000             		lea	(CollArray1).l,a2
000153C0 363C 00FF                  		move.w	#$FF,d3
000153C4                            
000153C4                            loc_14C5E:
000153C4 7A10                       		moveq	#$10,d5
000153C6 343C 000F                  		move.w	#$F,d2
000153CA                            
000153CA                            loc_14C64:
000153CA 7800                       		moveq	#0,d4
000153CC 323C 000F                  		move.w	#$F,d1
000153D0                            
000153D0                            loc_14C6A:
000153D0 3019                       		move.w	(a1)+,d0
000153D2 EAA8                       		lsr.l	d5,d0
000153D4 D944                       		addx.w	d4,d4
000153D6 51C9 FFF8                  		dbf	d1,loc_14C6A
000153DA                            
000153DA 34C4                       		move.w	d4,(a2)+
000153DC 92FC 0020                  		suba.w	#$20,a1
000153E0 5345                       		subq.w	#1,d5
000153E2 51CA FFE6                  		dbf	d2,loc_14C64
000153E6                            
000153E6 D2FC 0020                  		adda.w	#$20,a1
000153EA 51CB FFD8                  		dbf	d3,loc_14C5E
000153EE                            
000153EE 43F9 0000 0000             		lea	(CollArray1).l,a1
000153F4 45F9 0000 0000             		lea	(CollArray2).l,a2
000153FA 6100                       		bsr.s	FloorLog_Unk2
000153FC 43F9 0000 0000             		lea	(CollArray1).l,a1
00015402 45F9 0000 0000             		lea	(CollArray1).l,a2
00015408                            
00015408                            ; End of function FloorLog_Unk
00015408                            
00015408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015408                            
00015408                            
00015408                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015408 363C 0FFF                  		move.w	#$FFF,d3
0001540C                            
0001540C                            loc_14CA6:
0001540C 7400                       		moveq	#0,d2
0001540E 323C 000F                  		move.w	#$F,d1
00015412 3019                       		move.w	(a1)+,d0
00015414 6700                       		beq.s	loc_14CD4
00015416 6B00                       		bmi.s	loc_14CBE
00015418                            
00015418                            loc_14CB2:
00015418 E248                       		lsr.w	#1,d0
0001541A 6400                       		bcc.s	loc_14CB8
0001541C 5202                       		addq.b	#1,d2
0001541E                            
0001541E                            loc_14CB8:
0001541E 51C9 FFF8                  		dbf	d1,loc_14CB2
00015422                            
00015422 6000                       		bra.s	loc_14CD6
00015424                            ; ===========================================================================
00015424                            
00015424                            loc_14CBE:
00015424 0C40 FFFF                  		cmpi.w	#-1,d0
00015428 6700                       		beq.s	loc_14CD0
0001542A                            
0001542A                            loc_14CC4:
0001542A E348                       		lsl.w	#1,d0
0001542C 6400                       		bcc.s	loc_14CCA
0001542E 5302                       		subq.b	#1,d2
00015430                            
00015430                            loc_14CCA:
00015430 51C9 FFF8                  		dbf	d1,loc_14CC4
00015434                            
00015434 6000                       		bra.s	loc_14CD6
00015436                            ; ===========================================================================
00015436                            
00015436                            loc_14CD0:
00015436 303C 0010                  		move.w	#$10,d0
0001543A                            
0001543A                            loc_14CD4:
0001543A 3400                       		move.w	d0,d2
0001543C                            
0001543C                            loc_14CD6:
0001543C 14C2                       		move.b	d2,(a2)+
0001543E 51CB FFCC                  		dbf	d3,loc_14CA6
00015442                            
00015442 4E75                       		rts	
00015444                            
00015444                            ; End of function FloorLog_Unk2
00015444                            
00015444                            
00015444                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015444                            
00015444                            
00015444                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015444 2628 0008                  		move.l	8(a0),d3
00015448 2428 000C                  		move.l	$C(a0),d2
0001544C 3228 0010                  		move.w	$10(a0),d1
00015450 48C1                       		ext.l	d1
00015452 E181                       		asl.l	#8,d1
00015454 D681                       		add.l	d1,d3
00015456 3228 0012                  		move.w	$12(a0),d1
0001545A 48C1                       		ext.l	d1
0001545C E181                       		asl.l	#8,d1
0001545E D481                       		add.l	d1,d2
00015460 4842                       		swap	d2
00015462 4843                       		swap	d3
00015464 11C0 F768                  		move.b	d0,($FFFFF768).w
00015468 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001546C 1200                       		move.b	d0,d1
0001546E 0600 0020                  		addi.b	#$20,d0
00015472 6A00                       		bpl.s	loc_14D1A
00015474 1001                       		move.b	d1,d0
00015476 6A00                       		bpl.s	loc_14D14
00015478 5300                       		subq.b	#1,d0
0001547A                            
0001547A                            loc_14D14:
0001547A 0600 0020                  		addi.b	#$20,d0
0001547E 6000                       		bra.s	loc_14D24
00015480                            ; ===========================================================================
00015480                            
00015480                            loc_14D1A:
00015480 1001                       		move.b	d1,d0
00015482 6A00                       		bpl.s	loc_14D20
00015484 5200                       		addq.b	#1,d0
00015486                            
00015486                            loc_14D20:
00015486 0600 001F                  		addi.b	#$1F,d0
0001548A                            
0001548A                            loc_14D24:
0001548A 0200 00C0                  		andi.b	#$C0,d0
0001548E 6700 0000                  		beq.w	loc_14DF0
00015492 0C00 0080                  		cmpi.b	#$80,d0
00015496 6700 0000                  		beq.w	loc_14F7C
0001549A 0201 0038                  		andi.b	#$38,d1
0001549E 6600                       		bne.s	loc_14D3C
000154A0 5042                       		addq.w	#8,d2
000154A2                            
000154A2                            loc_14D3C:
000154A2 0C00 0040                  		cmpi.b	#$40,d0
000154A6 6700 0000                  		beq.w	loc_1504A
000154AA 6000 0000                  		bra.w	loc_14EBC
000154AE                            
000154AE                            ; End of function Sonic_WalkSpeed
000154AE                            
000154AE                            
000154AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154AE                            
000154AE                            
000154AE                            sub_14D48:				; XREF: Sonic_Jump
000154AE 11C0 F768                  		move.b	d0,($FFFFF768).w
000154B2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000154B6 0600 0020                  		addi.b	#$20,d0
000154BA 0200 00C0                  		andi.b	#$C0,d0
000154BE 0C00 0040                  		cmpi.b	#$40,d0
000154C2 6700 0000                  		beq.w	loc_14FD6
000154C6 0C00 0080                  		cmpi.b	#$80,d0
000154CA 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000154CE 0C00 00C0                  		cmpi.b	#$C0,d0
000154D2 6700 0000                  		beq.w	sub_14E50
000154D6                            
000154D6                            ; End of function sub_14D48
000154D6                            
000154D6                            ; ---------------------------------------------------------------------------
000154D6                            ; Subroutine to	make Sonic land	on the floor after jumping
000154D6                            ; ---------------------------------------------------------------------------
000154D6                            
000154D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154D6                            
000154D6                            
000154D6                            Sonic_HitFloor:				; XREF: Sonic_Floor
000154D6 3428 000C                  		move.w	$C(a0),d2
000154DA 3628 0008                  		move.w	8(a0),d3
000154DE 7000                       		moveq	#0,d0
000154E0 1028 0016                  		move.b	$16(a0),d0
000154E4 4880                       		ext.w	d0
000154E6 D440                       		add.w	d0,d2
000154E8 1028 0017                  		move.b	$17(a0),d0
000154EC 4880                       		ext.w	d0
000154EE D640                       		add.w	d0,d3
000154F0 49F8 F768                  		lea	($FFFFF768).w,a4
000154F4 367C 0010                  		movea.w	#$10,a3
000154F8 3C3C 0000                  		move.w	#0,d6
000154FC 7A0D                       		moveq	#$D,d5
000154FE 6100 FC34                  		bsr.w	FindFloor
00015502 3F01                       		move.w	d1,-(sp)
00015504 3428 000C                  		move.w	$C(a0),d2
00015508 3628 0008                  		move.w	8(a0),d3
0001550C 7000                       		moveq	#0,d0
0001550E 1028 0016                  		move.b	$16(a0),d0
00015512 4880                       		ext.w	d0
00015514 D440                       		add.w	d0,d2
00015516 1028 0017                  		move.b	$17(a0),d0
0001551A 4880                       		ext.w	d0
0001551C 9640                       		sub.w	d0,d3
0001551E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015522 367C 0010                  		movea.w	#$10,a3
00015526 3C3C 0000                  		move.w	#0,d6
0001552A 7A0D                       		moveq	#$D,d5
0001552C 6100 FC06                  		bsr.w	FindFloor
00015530 301F                       		move.w	(sp)+,d0
00015532 143C 0000                  		move.b	#0,d2
00015536                            
00015536                            loc_14DD0:
00015536 1638 F76A                  		move.b	($FFFFF76A).w,d3
0001553A B240                       		cmp.w	d0,d1
0001553C 6F00                       		ble.s	loc_14DDE
0001553E 1638 F768                  		move.b	($FFFFF768).w,d3
00015542 C141                       		exg	d0,d1
00015544                            
00015544                            loc_14DDE:
00015544 0803 0000                  		btst	#0,d3
00015548 6700                       		beq.s	locret_14DE6
0001554A 1602                       		move.b	d2,d3
0001554C                            
0001554C                            locret_14DE6:
0001554C 4E75                       		rts	
0001554E                            
0001554E                            ; End of function Sonic_HitFloor
0001554E                            
0001554E                            ; ===========================================================================
0001554E 3428 000C                  		move.w	$C(a0),d2
00015552 3628 0008                  		move.w	8(a0),d3
00015556                            
00015556                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015556 0642 000A                  		addi.w	#$A,d2
0001555A 49F8 F768                  		lea	($FFFFF768).w,a4
0001555E 367C 0010                  		movea.w	#$10,a3
00015562 3C3C 0000                  		move.w	#0,d6
00015566 7A0E                       		moveq	#$E,d5
00015568 6100 FBCA                  		bsr.w	FindFloor
0001556C 143C 0000                  		move.b	#0,d2
00015570                            
00015570                            loc_14E0A:				; XREF: sub_14EB4
00015570 1638 F768                  		move.b	($FFFFF768).w,d3
00015574 0803 0000                  		btst	#0,d3
00015578 6700                       		beq.s	locret_14E16
0001557A 1602                       		move.b	d2,d3
0001557C                            
0001557C                            locret_14E16:
0001557C 4E75                       		rts	
0001557E                            
0001557E                            ; ---------------------------------------------------------------------------
0001557E                            ; Subroutine allowing objects to interact with the floor
0001557E                            ; ---------------------------------------------------------------------------
0001557E                            
0001557E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001557E                            
0001557E                            
0001557E                            ObjHitFloor:
0001557E 3628 0008                  		move.w	8(a0),d3
00015582                            
00015582                            ; End of function ObjHitFloor
00015582                            
00015582                            
00015582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015582                            
00015582                            
00015582                            ObjHitFloor2:
00015582 3428 000C                  		move.w	$C(a0),d2
00015586 7000                       		moveq	#0,d0
00015588 1028 0016                  		move.b	$16(a0),d0
0001558C 4880                       		ext.w	d0
0001558E D440                       		add.w	d0,d2
00015590 49F8 F768                  		lea	($FFFFF768).w,a4
00015594 18BC 0000                  		move.b	#0,(a4)
00015598 367C 0010                  		movea.w	#$10,a3
0001559C 3C3C 0000                  		move.w	#0,d6
000155A0 7A0D                       		moveq	#$D,d5
000155A2 6100 FB90                  		bsr.w	FindFloor
000155A6 1638 F768                  		move.b	($FFFFF768).w,d3
000155AA 0803 0000                  		btst	#0,d3
000155AE 6700                       		beq.s	locret_14E4E
000155B0 163C 0000                  		move.b	#0,d3
000155B4                            
000155B4                            locret_14E4E:
000155B4 4E75                       		rts	
000155B6                            ; End of function ObjHitFloor2
000155B6                            
000155B6                            
000155B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155B6                            
000155B6                            
000155B6                            sub_14E50:				; XREF: sub_14D48
000155B6 3428 000C                  		move.w	$C(a0),d2
000155BA 3628 0008                  		move.w	8(a0),d3
000155BE 7000                       		moveq	#0,d0
000155C0 1028 0017                  		move.b	$17(a0),d0
000155C4 4880                       		ext.w	d0
000155C6 9440                       		sub.w	d0,d2
000155C8 1028 0016                  		move.b	$16(a0),d0
000155CC 4880                       		ext.w	d0
000155CE D640                       		add.w	d0,d3
000155D0 49F8 F768                  		lea	($FFFFF768).w,a4
000155D4 367C 0010                  		movea.w	#$10,a3
000155D8 3C3C 0000                  		move.w	#0,d6
000155DC 7A0E                       		moveq	#$E,d5
000155DE 6100 FC92                  		bsr.w	FindWall
000155E2 3F01                       		move.w	d1,-(sp)
000155E4 3428 000C                  		move.w	$C(a0),d2
000155E8 3628 0008                  		move.w	8(a0),d3
000155EC 7000                       		moveq	#0,d0
000155EE 1028 0017                  		move.b	$17(a0),d0
000155F2 4880                       		ext.w	d0
000155F4 D440                       		add.w	d0,d2
000155F6 1028 0016                  		move.b	$16(a0),d0
000155FA 4880                       		ext.w	d0
000155FC D640                       		add.w	d0,d3
000155FE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015602 367C 0010                  		movea.w	#$10,a3
00015606 3C3C 0000                  		move.w	#0,d6
0001560A 7A0E                       		moveq	#$E,d5
0001560C 6100 FC64                  		bsr.w	FindWall
00015610 301F                       		move.w	(sp)+,d0
00015612 143C 00C0                  		move.b	#-$40,d2
00015616 6000 FF1E                  		bra.w	loc_14DD0
0001561A                            
0001561A                            ; End of function sub_14E50
0001561A                            
0001561A                            
0001561A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001561A                            
0001561A                            
0001561A                            sub_14EB4:				; XREF: Sonic_Floor
0001561A 3428 000C                  		move.w	$C(a0),d2
0001561E 3628 0008                  		move.w	8(a0),d3
00015622                            
00015622                            loc_14EBC:
00015622 0643 000A                  		addi.w	#$A,d3
00015626 49F8 F768                  		lea	($FFFFF768).w,a4
0001562A 367C 0010                  		movea.w	#$10,a3
0001562E 3C3C 0000                  		move.w	#0,d6
00015632 7A0E                       		moveq	#$E,d5
00015634 6100 FC3C                  		bsr.w	FindWall
00015638 143C 00C0                  		move.b	#-$40,d2
0001563C 6000 FF32                  		bra.w	loc_14E0A
00015640                            
00015640                            ; End of function sub_14EB4
00015640                            
00015640                            ; ---------------------------------------------------------------------------
00015640                            ; Subroutine to	detect when an object hits a wall to its right
00015640                            ; ---------------------------------------------------------------------------
00015640                            
00015640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015640                            
00015640                            
00015640                            ObjHitWallRight:
00015640 D668 0008                  		add.w	8(a0),d3
00015644 3428 000C                  		move.w	$C(a0),d2
00015648 49F8 F768                  		lea	($FFFFF768).w,a4
0001564C 18BC 0000                  		move.b	#0,(a4)
00015650 367C 0010                  		movea.w	#$10,a3
00015654 3C3C 0000                  		move.w	#0,d6
00015658 7A0E                       		moveq	#$E,d5
0001565A 6100 FC16                  		bsr.w	FindWall
0001565E 1638 F768                  		move.b	($FFFFF768).w,d3
00015662 0803 0000                  		btst	#0,d3
00015666 6700                       		beq.s	locret_14F06
00015668 163C 00C0                  		move.b	#-$40,d3
0001566C                            
0001566C                            locret_14F06:
0001566C 4E75                       		rts	
0001566E                            
0001566E                            ; End of function ObjHitWallRight
0001566E                            
0001566E                            ; ---------------------------------------------------------------------------
0001566E                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
0001566E                            ; touches them
0001566E                            ; ---------------------------------------------------------------------------
0001566E                            
0001566E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001566E                            
0001566E                            
0001566E                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
0001566E 3428 000C                  		move.w	$C(a0),d2
00015672 3628 0008                  		move.w	8(a0),d3
00015676 7000                       		moveq	#0,d0
00015678 1028 0016                  		move.b	$16(a0),d0
0001567C 4880                       		ext.w	d0
0001567E 9440                       		sub.w	d0,d2
00015680 0A42 000F                  		eori.w	#$F,d2
00015684 1028 0017                  		move.b	$17(a0),d0
00015688 4880                       		ext.w	d0
0001568A D640                       		add.w	d0,d3
0001568C 49F8 F768                  		lea	($FFFFF768).w,a4
00015690 367C FFF0                  		movea.w	#-$10,a3
00015694 3C3C 1000                  		move.w	#$1000,d6
00015698 7A0E                       		moveq	#$E,d5
0001569A 6100 FA98                  		bsr.w	FindFloor
0001569E 3F01                       		move.w	d1,-(sp)
000156A0 3428 000C                  		move.w	$C(a0),d2
000156A4 3628 0008                  		move.w	8(a0),d3
000156A8 7000                       		moveq	#0,d0
000156AA 1028 0016                  		move.b	$16(a0),d0
000156AE 4880                       		ext.w	d0
000156B0 9440                       		sub.w	d0,d2
000156B2 0A42 000F                  		eori.w	#$F,d2
000156B6 1028 0017                  		move.b	$17(a0),d0
000156BA 4880                       		ext.w	d0
000156BC 9640                       		sub.w	d0,d3
000156BE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000156C2 367C FFF0                  		movea.w	#-$10,a3
000156C6 3C3C 1000                  		move.w	#$1000,d6
000156CA 7A0E                       		moveq	#$E,d5
000156CC 6100 FA66                  		bsr.w	FindFloor
000156D0 301F                       		move.w	(sp)+,d0
000156D2 143C 0080                  		move.b	#-$80,d2
000156D6 6000 FE5E                  		bra.w	loc_14DD0
000156DA                            ; End of function Sonic_DontRunOnWalls
000156DA                            
000156DA                            ; ===========================================================================
000156DA 3428 000C                  		move.w	$C(a0),d2
000156DE 3628 0008                  		move.w	8(a0),d3
000156E2                            
000156E2                            loc_14F7C:
000156E2 0442 000A                  		subi.w	#$A,d2
000156E6 0A42 000F                  		eori.w	#$F,d2
000156EA 49F8 F768                  		lea	($FFFFF768).w,a4
000156EE 367C FFF0                  		movea.w	#-$10,a3
000156F2 3C3C 1000                  		move.w	#$1000,d6
000156F6 7A0E                       		moveq	#$E,d5
000156F8 6100 FA3A                  		bsr.w	FindFloor
000156FC 143C 0080                  		move.b	#-$80,d2
00015700 6000 FE6E                  		bra.w	loc_14E0A
00015704                            
00015704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015704                            
00015704                            
00015704                            ObjHitCeiling:
00015704 3428 000C                  		move.w	$C(a0),d2
00015708 3628 0008                  		move.w	8(a0),d3
0001570C 7000                       		moveq	#0,d0
0001570E 1028 0016                  		move.b	$16(a0),d0
00015712 4880                       		ext.w	d0
00015714 9440                       		sub.w	d0,d2
00015716 0A42 000F                  		eori.w	#$F,d2
0001571A 49F8 F768                  		lea	($FFFFF768).w,a4
0001571E 367C FFF0                  		movea.w	#-$10,a3
00015722 3C3C 1000                  		move.w	#$1000,d6
00015726 7A0E                       		moveq	#$E,d5
00015728 6100 FA0A                  		bsr.w	FindFloor
0001572C 1638 F768                  		move.b	($FFFFF768).w,d3
00015730 0803 0000                  		btst	#0,d3
00015734 6700                       		beq.s	locret_14FD4
00015736 163C 0080                  		move.b	#-$80,d3
0001573A                            
0001573A                            locret_14FD4:
0001573A 4E75                       		rts	
0001573C                            ; End of function ObjHitCeiling
0001573C                            
0001573C                            ; ===========================================================================
0001573C                            
0001573C                            loc_14FD6:				; XREF: sub_14D48
0001573C 3428 000C                  		move.w	$C(a0),d2
00015740 3628 0008                  		move.w	8(a0),d3
00015744 7000                       		moveq	#0,d0
00015746 1028 0017                  		move.b	$17(a0),d0
0001574A 4880                       		ext.w	d0
0001574C 9440                       		sub.w	d0,d2
0001574E 1028 0016                  		move.b	$16(a0),d0
00015752 4880                       		ext.w	d0
00015754 9640                       		sub.w	d0,d3
00015756 0A43 000F                  		eori.w	#$F,d3
0001575A 49F8 F768                  		lea	($FFFFF768).w,a4
0001575E 367C FFF0                  		movea.w	#-$10,a3
00015762 3C3C 0800                  		move.w	#$800,d6
00015766 7A0E                       		moveq	#$E,d5
00015768 6100 FB08                  		bsr.w	FindWall
0001576C 3F01                       		move.w	d1,-(sp)
0001576E 3428 000C                  		move.w	$C(a0),d2
00015772 3628 0008                  		move.w	8(a0),d3
00015776 7000                       		moveq	#0,d0
00015778 1028 0017                  		move.b	$17(a0),d0
0001577C 4880                       		ext.w	d0
0001577E D440                       		add.w	d0,d2
00015780 1028 0016                  		move.b	$16(a0),d0
00015784 4880                       		ext.w	d0
00015786 9640                       		sub.w	d0,d3
00015788 0A43 000F                  		eori.w	#$F,d3
0001578C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015790 367C FFF0                  		movea.w	#-$10,a3
00015794 3C3C 0800                  		move.w	#$800,d6
00015798 7A0E                       		moveq	#$E,d5
0001579A 6100 FAD6                  		bsr.w	FindWall
0001579E 301F                       		move.w	(sp)+,d0
000157A0 143C 0040                  		move.b	#$40,d2
000157A4 6000 FD90                  		bra.w	loc_14DD0
000157A8                            
000157A8                            ; ---------------------------------------------------------------------------
000157A8                            ; Subroutine to	stop Sonic when	he jumps at a wall
000157A8                            ; ---------------------------------------------------------------------------
000157A8                            
000157A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157A8                            
000157A8                            
000157A8                            Sonic_HitWall:				; XREF: Sonic_Floor
000157A8 3428 000C                  		move.w	$C(a0),d2
000157AC 3628 0008                  		move.w	8(a0),d3
000157B0                            
000157B0                            loc_1504A:
000157B0 0443 000A                  		subi.w	#$A,d3
000157B4 0A43 000F                  		eori.w	#$F,d3
000157B8 49F8 F768                  		lea	($FFFFF768).w,a4
000157BC 367C FFF0                  		movea.w	#-$10,a3
000157C0 3C3C 0800                  		move.w	#$800,d6
000157C4 7A0E                       		moveq	#$E,d5
000157C6 6100 FAAA                  		bsr.w	FindWall
000157CA 143C 0040                  		move.b	#$40,d2
000157CE 6000 FDA0                  		bra.w	loc_14E0A
000157D2                            ; End of function Sonic_HitWall
000157D2                            
000157D2                            ; ---------------------------------------------------------------------------
000157D2                            ; Subroutine to	detect when an object hits a wall to its left
000157D2                            ; ---------------------------------------------------------------------------
000157D2                            
000157D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157D2                            
000157D2                            
000157D2                            ObjHitWallLeft:
000157D2 D668 0008                  		add.w	8(a0),d3
000157D6 3428 000C                  		move.w	$C(a0),d2
000157DA 49F8 F768                  		lea	($FFFFF768).w,a4
000157DE 18BC 0000                  		move.b	#0,(a4)
000157E2 367C FFF0                  		movea.w	#-$10,a3
000157E6 3C3C 0800                  		move.w	#$800,d6
000157EA 7A0E                       		moveq	#$E,d5
000157EC 6100 FA84                  		bsr.w	FindWall
000157F0 1638 F768                  		move.b	($FFFFF768).w,d3
000157F4 0803 0000                  		btst	#0,d3
000157F8 6700                       		beq.s	locret_15098
000157FA 163C 0040                  		move.b	#$40,d3
000157FE                            
000157FE                            locret_15098:
000157FE 4E75                       		rts	
00015800                            ; End of function ObjHitWallLeft
00015800                            
00015800                            ; ===========================================================================
00015800                            ; ---------------------------------------------------------------------------
00015800                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015800                            ; ---------------------------------------------------------------------------
00015800                            
00015800                            Obj66:					; XREF: Obj_Index
00015800 7000                       		moveq	#0,d0
00015802 1028 0024                  		move.b	$24(a0),d0
00015806 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
0001580A 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
0001580E                            ; ===========================================================================
0001580E 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015810 0000                       		dc.w Obj66_Action-Obj66_Index
00015812 0000                       		dc.w Obj66_Display-Obj66_Index
00015814 0000                       		dc.w Obj66_Release-Obj66_Index
00015816                            ; ===========================================================================
00015816                            
00015816                            Obj66_Main:				; XREF: Obj66_Index
00015816 5428 0024                  		addq.b	#2,$24(a0)
0001581A 323C 0001                  		move.w	#1,d1
0001581E 2248                       		movea.l	a0,a1
00015820 6000                       		bra.s	Obj66_MakeItem
00015822                            ; ===========================================================================
00015822                            
00015822                            Obj66_Loop:
00015822 6100 88E6                  		bsr.w	SingleObjLoad
00015826 6600                       		bne.s	loc_150FE
00015828 12BC 0066                  		move.b	#$66,0(a1)
0001582C 5829 0024                  		addq.b	#4,$24(a1)
00015830 3368 0008 0008             		move.w	8(a0),8(a1)
00015836 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001583C 137C 0003 0018             		move.b	#3,$18(a1)
00015842 137C 0010 001A             		move.b	#$10,$1A(a1)
00015848                            
00015848                            Obj66_MakeItem:				; XREF: Obj66_Main
00015848 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015850 337C 4348 0002             		move.w	#$4348,2(a1)
00015856 0029 0004 0001             		ori.b	#4,1(a1)
0001585C 137C 0038 0019             		move.b	#$38,$19(a1)
00015862                            
00015862                            loc_150FE:
00015862 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015866                            
00015866 117C 0030 0019             		move.b	#$30,$19(a0)
0001586C 117C 0004 0018             		move.b	#4,$18(a0)
00015872 317C 003C 0030             		move.w	#$3C,$30(a0)
00015878 117C 0001 0034             		move.b	#1,$34(a0)
0001587E 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015884                            
00015884                            Obj66_Action:				; XREF: Obj66_Index
00015884 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015888 4A28 0001                  		tst.b	1(a0)
0001588C 6A00 0000                  		bpl.w	Obj66_Display
00015890 323C 0030                  		move.w	#$30,d1
00015894 3401                       		move.w	d1,d2
00015896 3602                       		move.w	d2,d3
00015898 5243                       		addq.w	#1,d3
0001589A 3828 0008                  		move.w	8(a0),d4
0001589E 6100 A7B4                  		bsr.w	SolidObject
000158A2 0828 0005 0022             		btst	#5,$22(a0)
000158A8 6700 0000                  		beq.w	Obj66_Display
000158AC 43F8 D000                  		lea	($FFFFD000).w,a1
000158B0 720E                       		moveq	#$E,d1
000158B2 3029 0008                  		move.w	8(a1),d0
000158B6 B068 0008                  		cmp.w	8(a0),d0
000158BA 6500                       		bcs.s	Obj66_GrabSonic
000158BC 7207                       		moveq	#7,d1
000158BE                            
000158BE                            Obj66_GrabSonic:
000158BE B228 001A                  		cmp.b	$1A(a0),d1
000158C2 6600                       		bne.s	Obj66_Display
000158C4 1141 0032                  		move.b	d1,$32(a0)
000158C8 5828 0024                  		addq.b	#4,$24(a0)
000158CC 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000158D2 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000158D8 337C 0800 0014             		move.w	#$800,$14(a1)
000158DE 337C 0000 0010             		move.w	#0,$10(a1)
000158E4 337C 0000 0012             		move.w	#0,$12(a1)
000158EA 08A8 0005 0022             		bclr	#5,$22(a0)
000158F0 08A9 0005 0022             		bclr	#5,$22(a1)
000158F6 08E9 0001 0022             		bset	#1,$22(a1)
000158FC 3429 0008                  		move.w	8(a1),d2
00015900 3629 000C                  		move.w	$C(a1),d3
00015904 6100 0000                  		bsr.w	Obj66_ChgPos
00015908 D569 0008                  		add.w	d2,8(a1)
0001590C D769 000C                  		add.w	d3,$C(a1)
00015910 E0E9 0008                  		asr	8(a1)
00015914 E0E9 000C                  		asr	$C(a1)
00015918                            
00015918                            Obj66_Display:				; XREF: Obj66_Index
00015918 6000 A412                  		bra.w	MarkObjGone
0001591C                            ; ===========================================================================
0001591C                            
0001591C                            Obj66_Release:				; XREF: Obj66_Index
0001591C 1028 001A                  		move.b	$1A(a0),d0
00015920 0C00 0004                  		cmpi.b	#4,d0
00015924 6700                       		beq.s	loc_151C8
00015926 0C00 0007                  		cmpi.b	#7,d0
0001592A 6600                       		bne.s	loc_151F8
0001592C                            
0001592C                            loc_151C8:
0001592C B028 0032                  		cmp.b	$32(a0),d0
00015930 6700                       		beq.s	loc_151F8
00015932 43F8 D000                  		lea	($FFFFD000).w,a1
00015936 337C 0000 0010             		move.w	#0,$10(a1)
0001593C 337C 0800 0012             		move.w	#$800,$12(a1)
00015942 0C00 0004                  		cmpi.b	#4,d0
00015946 6700                       		beq.s	loc_151F0
00015948 337C 0800 0010             		move.w	#$800,$10(a1)
0001594E 337C 0800 0012             		move.w	#$800,$12(a1)
00015954                            
00015954                            loc_151F0:
00015954 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015958 5928 0024                  		subq.b	#4,$24(a0)
0001595C                            
0001595C                            loc_151F8:
0001595C 6100                       		bsr.s	Obj66_ChkSwitch
0001595E 6100                       		bsr.s	Obj66_ChgPos
00015960 6000 A3CA                  		bra.w	MarkObjGone
00015964                            
00015964                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015964                            
00015964                            
00015964                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015964 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015968 7000                       		moveq	#0,d0
0001596A 1028 0038                  		move.b	$38(a0),d0
0001596E 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015974 6700                       		beq.s	loc_15224	; if not, branch
00015976 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0001597A 6600                       		bne.s	Obj66_Animate	; if yes, branch
0001597C 4428 0034                  		neg.b	$34(a0)
00015980 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015986 6000                       		bra.s	Obj66_Animate
00015988                            ; ===========================================================================
00015988                            
00015988                            loc_15224:
00015988 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
0001598C                            
0001598C                            Obj66_Animate:
0001598C 5328 001E                  		subq.b	#1,$1E(a0)
00015990 6A00                       		bpl.s	locret_15246
00015992 117C 0007 001E             		move.b	#7,$1E(a0)
00015998 1228 0034                  		move.b	$34(a0),d1
0001599C 1028 001A                  		move.b	$1A(a0),d0
000159A0 D001                       		add.b	d1,d0
000159A2 0200 000F                  		andi.b	#$F,d0
000159A6 1140 001A                  		move.b	d0,$1A(a0)
000159AA                            
000159AA                            locret_15246:
000159AA 4E75                       		rts	
000159AC                            ; End of function Obj66_ChkSwitch
000159AC                            
000159AC                            
000159AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159AC                            
000159AC                            
000159AC                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
000159AC 43F8 D000                  		lea	($FFFFD000).w,a1
000159B0 7000                       		moveq	#0,d0
000159B2 1028 001A                  		move.b	$1A(a0),d0
000159B6 D040                       		add.w	d0,d0
000159B8 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
000159BC 101A                       		move.b	(a2)+,d0
000159BE 4880                       		ext.w	d0
000159C0 D068 0008                  		add.w	8(a0),d0
000159C4 3340 0008                  		move.w	d0,8(a1)
000159C8 101A                       		move.b	(a2)+,d0
000159CA 4880                       		ext.w	d0
000159CC D068 000C                  		add.w	$C(a0),d0
000159D0 3340 000C                  		move.w	d0,$C(a1)
000159D4 4E75                       		rts	
000159D6                            ; End of function Obj66_ChgPos
000159D6                            
000159D6                            ; ===========================================================================
000159D6 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
000159DA E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
000159DE 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
000159E2 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
000159E6 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
000159EA 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
000159EE 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
000159F2 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000159F6                            ; ---------------------------------------------------------------------------
000159F6                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000159F6                            ; ---------------------------------------------------------------------------
000159F6                            Map_obj66:
000159F6                            	include "_maps\obj66.asm"
000159F6                            ; ---------------------------------------------------------------------------
000159F6                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000159F6                            ; ---------------------------------------------------------------------------
000159F6 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000159FA 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000159FE 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015A02 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015A06 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015A0A 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015A0E 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015A12 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015A16 0000                       		dc.w byte_154A4-Map_obj66
00015A18 06                         byte_152B4:	dc.b 6
00015A19 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015A1E 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015A23 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015A28 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015A2D 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015A32 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015A37 06                         byte_152D3:	dc.b 6
00015A38 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015A3D 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015A42 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015A47 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015A4C 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015A51 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015A56 06                         byte_152F2:	dc.b 6
00015A57 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015A5C 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015A61 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015A66 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015A6B 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015A70 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015A75 06                         byte_15311:	dc.b 6
00015A76 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015A7B 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015A80 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015A85 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015A8A 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015A8F 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015A94 06                         byte_15330:	dc.b 6
00015A95 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015A9A 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015A9F 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015AA4 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015AA9 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015AAE 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015AB3 06                         byte_1534F:	dc.b 6
00015AB4 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015AB9 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015ABE 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015AC3 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015AC8 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015ACD 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015AD2 06                         byte_1536E:	dc.b 6
00015AD3 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015AD8 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015ADD 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015AE2 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015AE7 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015AEC 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015AF1 06                         byte_1538D:	dc.b 6
00015AF2 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015AF7 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015AFC F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015B01 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015B06 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015B0B 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015B10 06                         byte_153AC:	dc.b 6
00015B11 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015B16 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015B1B E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015B20 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015B25 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015B2A 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015B2F 06                         byte_153CB:	dc.b 6
00015B30 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015B35 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015B3A DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015B3F DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015B44 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015B49 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015B4E 06                         byte_153EA:	dc.b 6
00015B4F D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015B54 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015B59 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015B5E D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015B63 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015B68 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015B6D 06                         byte_15409:	dc.b 6
00015B6E D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015B73 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015B78 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015B7D CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015B82 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015B87 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015B8C 06                         byte_15428:	dc.b 6
00015B8D D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015B92 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015B97 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015B9C C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015BA1 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015BA6 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015BAB 06                         byte_15447:	dc.b 6
00015BAC D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015BB1 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015BB6 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015BBB CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015BC0 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015BC5 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015BCA 06                         byte_15466:	dc.b 6
00015BCB E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015BD0 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015BD5 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015BDA D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015BDF E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015BE4 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015BE9 06                         byte_15485:	dc.b 6
00015BEA E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015BEF D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015BF4 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015BF9 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015BFE F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015C03 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015C08 0C                         byte_154A4:	dc.b $C
00015C09 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015C0E D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015C13 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015C18 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015C1D D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015C22 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015C27 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015C2C 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015C31 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015C36 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015C3B 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015C40 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015C46 00                         		even
00015C46 00                         		even
00015C46                            
00015C46                            ; ===========================================================================
00015C46                            ; ---------------------------------------------------------------------------
00015C46                            ; Object 67 - disc that	you run	around (SBZ)
00015C46                            ; ---------------------------------------------------------------------------
00015C46                            
00015C46                            Obj67:					; XREF: Obj_Index
00015C46 7000                       		moveq	#0,d0
00015C48 1028 0024                  		move.b	$24(a0),d0
00015C4C 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015C50 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015C54                            ; ===========================================================================
00015C54 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015C56 0000                       		dc.w Obj67_Action-Obj67_Index
00015C58                            ; ===========================================================================
00015C58                            
00015C58                            Obj67_Main:				; XREF: Obj67_Index
00015C58 5428 0024                  		addq.b	#2,$24(a0)
00015C5C 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015C64 317C C344 0002             		move.w	#$C344,2(a0)
00015C6A 117C 0004 0001             		move.b	#4,1(a0)
00015C70 117C 0004 0018             		move.b	#4,$18(a0)
00015C76 117C 0008 0019             		move.b	#8,$19(a0)
00015C7C 3168 0008 0032             		move.w	8(a0),$32(a0)
00015C82 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015C88 117C 0018 0034             		move.b	#$18,$34(a0)
00015C8E 117C 0048 0038             		move.b	#$48,$38(a0)
00015C94 1228 0028                  		move.b	$28(a0),d1	; get object type
00015C98 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015C9C 6700                       		beq.s	loc_15546
00015C9E 117C 0010 0034             		move.b	#$10,$34(a0)
00015CA4 117C 0038 0038             		move.b	#$38,$38(a0)
00015CAA                            
00015CAA                            loc_15546:
00015CAA 1228 0028                  		move.b	$28(a0),d1	; get object type
00015CAE 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015CB2 4881                       		ext.w	d1
00015CB4 E741                       		asl.w	#3,d1
00015CB6 3141 0036                  		move.w	d1,$36(a0)
00015CBA 1028 0022                  		move.b	$22(a0),d0
00015CBE E418                       		ror.b	#2,d0
00015CC0 0200 00C0                  		andi.b	#-$40,d0
00015CC4 1140 0026                  		move.b	d0,$26(a0)
00015CC8                            
00015CC8                            Obj67_Action:				; XREF: Obj67_Index
00015CC8 6100 0000                  		bsr.w	Obj67_MoveSonic
00015CCC 6100 0000                  		bsr.w	Obj67_MoveSpot
00015CD0 6000 0000                  		bra.w	Obj67_ChkDel
00015CD4                            ; ===========================================================================
00015CD4                            
00015CD4                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015CD4 7400                       		moveq	#0,d2
00015CD6 1428 0038                  		move.b	$38(a0),d2
00015CDA 3602                       		move.w	d2,d3
00015CDC D643                       		add.w	d3,d3
00015CDE 43F8 D000                  		lea	($FFFFD000).w,a1
00015CE2 3029 0008                  		move.w	8(a1),d0
00015CE6 9068 0032                  		sub.w	$32(a0),d0
00015CEA D042                       		add.w	d2,d0
00015CEC B043                       		cmp.w	d3,d0
00015CEE 6400                       		bcc.s	loc_155A8
00015CF0 3229 000C                  		move.w	$C(a1),d1
00015CF4 9268 0030                  		sub.w	$30(a0),d1
00015CF8 D242                       		add.w	d2,d1
00015CFA B243                       		cmp.w	d3,d1
00015CFC 6400                       		bcc.s	loc_155A8
00015CFE 0829 0001 0022             		btst	#1,$22(a1)
00015D04 6700                       		beq.s	loc_155B8
00015D06 4228 003A                  		clr.b	$3A(a0)
00015D0A 4E75                       		rts	
00015D0C                            ; ===========================================================================
00015D0C                            
00015D0C                            loc_155A8:
00015D0C 4A28 003A                  		tst.b	$3A(a0)
00015D10 6700                       		beq.s	locret_155B6
00015D12 4229 0038                  		clr.b	$38(a1)
00015D16 4228 003A                  		clr.b	$3A(a0)
00015D1A                            
00015D1A                            locret_155B6:
00015D1A 4E75                       		rts	
00015D1C                            ; ===========================================================================
00015D1C                            
00015D1C                            loc_155B8:
00015D1C 4A28 003A                  		tst.b	$3A(a0)
00015D20 6600                       		bne.s	loc_155E2
00015D22 117C 0001 003A             		move.b	#1,$3A(a0)
00015D28 0829 0002 0022             		btst	#2,$22(a1)
00015D2E 6600                       		bne.s	loc_155D0
00015D30 4229 001C                  		clr.b	$1C(a1)
00015D34                            
00015D34                            loc_155D0:
00015D34 08A9 0005 0022             		bclr	#5,$22(a1)
00015D3A 137C 0001 001D             		move.b	#1,$1D(a1)
00015D40 137C 0001 0038             		move.b	#1,$38(a1)
00015D46                            
00015D46                            loc_155E2:
00015D46 3029 0014                  		move.w	$14(a1),d0
00015D4A 4A68 0036                  		tst.w	$36(a0)
00015D4E 6A00                       		bpl.s	loc_15608
00015D50 0C40 FC00                  		cmpi.w	#-$400,d0
00015D54 6F00                       		ble.s	loc_155FA
00015D56 337C FC00 0014             		move.w	#-$400,$14(a1)
00015D5C 4E75                       		rts	
00015D5E                            ; ===========================================================================
00015D5E                            
00015D5E                            loc_155FA:
00015D5E 0C40 F100                  		cmpi.w	#-$F00,d0
00015D62 6C00                       		bge.s	locret_15606
00015D64 337C F100 0014             		move.w	#-$F00,$14(a1)
00015D6A                            
00015D6A                            locret_15606:
00015D6A 4E75                       		rts	
00015D6C                            ; ===========================================================================
00015D6C                            
00015D6C                            loc_15608:
00015D6C 0C40 0400                  		cmpi.w	#$400,d0
00015D70 6C00                       		bge.s	loc_15616
00015D72 337C 0400 0014             		move.w	#$400,$14(a1)
00015D78 4E75                       		rts	
00015D7A                            ; ===========================================================================
00015D7A                            
00015D7A                            loc_15616:
00015D7A 0C40 0F00                  		cmpi.w	#$F00,d0
00015D7E 6F00                       		ble.s	locret_15622
00015D80 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015D86                            
00015D86                            locret_15622:
00015D86 4E75                       		rts	
00015D88                            ; ===========================================================================
00015D88                            
00015D88                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015D88 3028 0036                  		move.w	$36(a0),d0
00015D8C D168 0026                  		add.w	d0,$26(a0)
00015D90 1028 0026                  		move.b	$26(a0),d0
00015D94 4EB9 0000 2C64             		jsr	(CalcSine).l
00015D9A 3428 0030                  		move.w	$30(a0),d2
00015D9E 3628 0032                  		move.w	$32(a0),d3
00015DA2 7800                       		moveq	#0,d4
00015DA4 1828 0034                  		move.b	$34(a0),d4
00015DA8 E14C                       		lsl.w	#8,d4
00015DAA 2A04                       		move.l	d4,d5
00015DAC C9C0                       		muls.w	d0,d4
00015DAE 4844                       		swap	d4
00015DB0 CBC1                       		muls.w	d1,d5
00015DB2 4845                       		swap	d5
00015DB4 D842                       		add.w	d2,d4
00015DB6 DA43                       		add.w	d3,d5
00015DB8 3144 000C                  		move.w	d4,$C(a0)
00015DBC 3145 0008                  		move.w	d5,8(a0)
00015DC0 4E75                       		rts	
00015DC2                            ; ===========================================================================
00015DC2                            
00015DC2                            Obj67_ChkDel:				; XREF: Obj67_Action
00015DC2 3028 0032                  		move.w	$32(a0),d0
00015DC6 0240 FF80                  		andi.w	#-$80,d0
00015DCA 3238 F700                  		move.w	($FFFFF700).w,d1
00015DCE 0441 0080                  		subi.w	#$80,d1
00015DD2 0241 FF80                  		andi.w	#-$80,d1
00015DD6 9041                       		sub.w	d1,d0
00015DD8 0C40 0280                  		cmpi.w	#$280,d0
00015DDC 6200                       		bhi.s	Obj67_Delete
00015DDE 4EF9 0000 DC84             		jmp	DisplaySprite
00015DE4                            ; ===========================================================================
00015DE4                            
00015DE4                            Obj67_Delete:
00015DE4 4EF9 0000 DCC0             		jmp	DeleteObject
00015DEA                            ; ===========================================================================
00015DEA                            ; ---------------------------------------------------------------------------
00015DEA                            ; Sprite mappings - disc that you run around (SBZ)
00015DEA                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015DEA                            ; part of the level tiles.)
00015DEA                            ; ---------------------------------------------------------------------------
00015DEA                            Map_obj67:
00015DEA                            	include "_maps\obj67.asm"
00015DEA                            ; ---------------------------------------------------------------------------
00015DEA                            ; Sprite mappings - disc that you run around (SBZ)
00015DEA                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015DEA                            ; part of the level tiles.)
00015DEA                            ; ---------------------------------------------------------------------------
00015DEA 0000                       		dc.w byte_15688-Map_obj67
00015DEC 01                         byte_15688:	dc.b 1
00015DED F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015DF2                            		even
00015DF2                            		even
00015DF2                            
00015DF2                            ; ===========================================================================
00015DF2                            ; ---------------------------------------------------------------------------
00015DF2                            ; Object 68 - conveyor belts (SBZ)
00015DF2                            ; ---------------------------------------------------------------------------
00015DF2                            
00015DF2                            Obj68:					; XREF: Obj_Index
00015DF2 7000                       		moveq	#0,d0
00015DF4 1028 0024                  		move.b	$24(a0),d0
00015DF8 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015DFC 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015E00                            ; ===========================================================================
00015E00 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015E02 0000                       		dc.w Obj68_Action-Obj68_Index
00015E04                            ; ===========================================================================
00015E04                            
00015E04                            Obj68_Main:				; XREF: Obj68_Index
00015E04 5428 0024                  		addq.b	#2,$24(a0)
00015E08 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015E0E 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E12 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015E16 6700                       		beq.s	loc_156BA	; if zero, branch
00015E18 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015E1E                            
00015E1E                            loc_156BA:
00015E1E 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E22 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015E26 4881                       		ext.w	d1
00015E28 E841                       		asr.w	#4,d1
00015E2A 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015E2E                            
00015E2E                            Obj68_Action:				; XREF: Obj68_Index
00015E2E 6100                       		bsr.s	Obj68_MoveSonic
00015E30 3028 0008                  		move.w	8(a0),d0
00015E34 0240 FF80                  		andi.w	#$FF80,d0
00015E38 3238 F700                  		move.w	($FFFFF700).w,d1
00015E3C 0441 0080                  		subi.w	#$80,d1
00015E40 0241 FF80                  		andi.w	#$FF80,d1
00015E44 9041                       		sub.w	d1,d0
00015E46 0C40 0280                  		cmpi.w	#$280,d0
00015E4A 6200                       		bhi.s	Obj68_Delete
00015E4C 4E75                       		rts	
00015E4E                            ; ===========================================================================
00015E4E                            
00015E4E                            Obj68_Delete:
00015E4E 4EF9 0000 DCC0             		jmp	DeleteObject
00015E54                            ; ===========================================================================
00015E54                            
00015E54                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015E54 7400                       		moveq	#0,d2
00015E56 1428 0038                  		move.b	$38(a0),d2
00015E5A 3602                       		move.w	d2,d3
00015E5C D643                       		add.w	d3,d3
00015E5E 43F8 D000                  		lea	($FFFFD000).w,a1
00015E62 3029 0008                  		move.w	8(a1),d0
00015E66 9068 0008                  		sub.w	8(a0),d0
00015E6A D042                       		add.w	d2,d0
00015E6C B043                       		cmp.w	d3,d0
00015E6E 6400                       		bcc.s	locret_1572E
00015E70 3229 000C                  		move.w	$C(a1),d1
00015E74 9268 000C                  		sub.w	$C(a0),d1
00015E78 0641 0030                  		addi.w	#$30,d1
00015E7C 0C41 0030                  		cmpi.w	#$30,d1
00015E80 6400                       		bcc.s	locret_1572E
00015E82 0829 0001 0022             		btst	#1,$22(a1)
00015E88 6600                       		bne.s	locret_1572E
00015E8A 3028 0036                  		move.w	$36(a0),d0
00015E8E D169 0008                  		add.w	d0,8(a1)
00015E92                            
00015E92                            locret_1572E:
00015E92 4E75                       		rts	
00015E94                            
00015E94                            ; ===========================================================================
00015E94                            ; ---------------------------------------------------------------------------
00015E94                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015E94                            ; ---------------------------------------------------------------------------
00015E94                            
00015E94                            Obj69:					; XREF: Obj_Index
00015E94 7000                       		moveq	#0,d0
00015E96 1028 0024                  		move.b	$24(a0),d0
00015E9A 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015E9E 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015EA2                            ; ===========================================================================
00015EA2 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015EA4 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015EA6 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015EA8                            ; ===========================================================================
00015EA8                            
00015EA8                            Obj69_Main:				; XREF: Obj69_Index
00015EA8 5428 0024                  		addq.b	#2,$24(a0)
00015EAC 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015EB4 317C 4492 0002             		move.w	#$4492,2(a0)
00015EBA 0028 0004 0001             		ori.b	#4,1(a0)
00015EC0 117C 0080 0019             		move.b	#$80,$19(a0)
00015EC6 7000                       		moveq	#0,d0
00015EC8 1028 0028                  		move.b	$28(a0),d0
00015ECC 0240 000F                  		andi.w	#$F,d0
00015ED0 C0FC 003C                  		mulu.w	#$3C,d0
00015ED4 3140 0032                  		move.w	d0,$32(a0)
00015ED8 4A28 0028                  		tst.b	$28(a0)
00015EDC 6A00                       		bpl.s	Obj69_Trapdoor
00015EDE 5428 0024                  		addq.b	#2,$24(a0)
00015EE2 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015EEA 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015EF0 117C 0010 0019             		move.b	#$10,$19(a0)
00015EF6 117C 0002 001C             		move.b	#2,$1C(a0)
00015EFC 7000                       		moveq	#0,d0
00015EFE 1028 0028                  		move.b	$28(a0),d0	; get object type
00015F02 3200                       		move.w	d0,d1
00015F04 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015F08 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015F0C 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015F10 3140 0032                  		move.w	d0,$32(a0)
00015F14 0241 0070                  		andi.w	#$70,d1
00015F18 0641 0010                  		addi.w	#$10,d1
00015F1C E549                       		lsl.w	#2,d1
00015F1E 5341                       		subq.w	#1,d1
00015F20 3141 0036                  		move.w	d1,$36(a0)
00015F24 6000                       		bra.s	Obj69_Spinner
00015F26                            ; ===========================================================================
00015F26                            
00015F26                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015F26 5368 0030                  		subq.w	#1,$30(a0)
00015F2A 6A00                       		bpl.s	Obj69_Animate
00015F2C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015F32 0868 0000 001C             		bchg	#0,$1C(a0)
00015F38 4A28 0001                  		tst.b	1(a0)
00015F3C 6A00                       		bpl.s	Obj69_Animate
00015F3E 303C 00BB                  		move.w	#$BB,d0
00015F42 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00015F48                            
00015F48                            Obj69_Animate:
00015F48 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015F4E 4EB9 0000 AD44             		jsr	AnimateSprite
00015F54 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015F58 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015F5A 323C 004B                  		move.w	#$4B,d1
00015F5E 343C 000C                  		move.w	#$C,d2
00015F62 3602                       		move.w	d2,d3
00015F64 5243                       		addq.w	#1,d3
00015F66 3828 0008                  		move.w	8(a0),d4
00015F6A 6100 A0E8                  		bsr.w	SolidObject
00015F6E 6000 9DBC                  		bra.w	MarkObjGone
00015F72                            ; ===========================================================================
00015F72                            
00015F72                            Obj69_NotSolid:
00015F72 0828 0003 0022             		btst	#3,$22(a0)
00015F78 6700                       		beq.s	Obj69_Display
00015F7A 43F8 D000                  		lea	($FFFFD000).w,a1
00015F7E 08A9 0003 0022             		bclr	#3,$22(a1)
00015F84 08A8 0003 0022             		bclr	#3,$22(a0)
00015F8A 4228 0025                  		clr.b	$25(a0)
00015F8E                            
00015F8E                            Obj69_Display:
00015F8E 6000 9D9C                  		bra.w	MarkObjGone
00015F92                            ; ===========================================================================
00015F92                            
00015F92                            Obj69_Spinner:				; XREF: Obj69_Index
00015F92 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015F96 C068 0036                  		and.w	$36(a0),d0
00015F9A 6600                       		bne.s	Obj69_Delay
00015F9C 117C 0001 0034             		move.b	#1,$34(a0)
00015FA2                            
00015FA2                            Obj69_Delay:
00015FA2 4A28 0034                  		tst.b	$34(a0)
00015FA6 6700                       		beq.s	Obj69_Animate2
00015FA8 5368 0030                  		subq.w	#1,$30(a0)
00015FAC 6A00                       		bpl.s	Obj69_Animate2
00015FAE 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015FB4 4228 0034                  		clr.b	$34(a0)
00015FB8 0868 0000 001C             		bchg	#0,$1C(a0)
00015FBE                            
00015FBE                            Obj69_Animate2:
00015FBE 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015FC4 4EB9 0000 AD44             		jsr	AnimateSprite
00015FCA 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015FCE 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015FD0 323C 001B                  		move.w	#$1B,d1
00015FD4 343C 0007                  		move.w	#7,d2
00015FD8 3602                       		move.w	d2,d3
00015FDA 5243                       		addq.w	#1,d3
00015FDC 3828 0008                  		move.w	8(a0),d4
00015FE0 6100 A072                  		bsr.w	SolidObject
00015FE4 6000 9D46                  		bra.w	MarkObjGone
00015FE8                            ; ===========================================================================
00015FE8                            
00015FE8                            Obj69_NotSolid2:
00015FE8 0828 0003 0022             		btst	#3,$22(a0)
00015FEE 6700                       		beq.s	Obj69_Display2
00015FF0 43F8 D000                  		lea	($FFFFD000).w,a1
00015FF4 08A9 0003 0022             		bclr	#3,$22(a1)
00015FFA 08A8 0003 0022             		bclr	#3,$22(a0)
00016000 4228 0025                  		clr.b	$25(a0)
00016004                            
00016004                            Obj69_Display2:
00016004 6000 9D26                  		bra.w	MarkObjGone
00016008                            ; ===========================================================================
00016008                            Ani_obj69:
00016008                            	include "_anim\obj69.asm"
00016008                            ; ---------------------------------------------------------------------------
00016008                            ; Animation script - trapdoor (SBZ)
00016008                            ; ---------------------------------------------------------------------------
00016008 0000                       		dc.w byte_158AC-Ani_obj69
0001600A 0000                       		dc.w byte_158B2-Ani_obj69
0001600C 0000                       		dc.w byte_158B8-Ani_obj69
0001600E 0000                       		dc.w byte_158CC-Ani_obj69
00016010 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00016016 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
0001601C 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016029 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016030 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001603D 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016044                            		even
00016044                            		even
00016044                            
00016044                            ; ---------------------------------------------------------------------------
00016044                            ; Sprite mappings - trapdoor (SBZ)
00016044                            ; ---------------------------------------------------------------------------
00016044                            Map_obj69:
00016044                            	include "_maps\obj69.asm"
00016044                            ; ---------------------------------------------------------------------------
00016044                            ; Sprite mappings - trapdoor (SBZ)
00016044                            ; ---------------------------------------------------------------------------
00016044 0000                       		dc.w byte_158E6-Map_obj69
00016046 0000                       		dc.w byte_158FB-Map_obj69
00016048 0000                       		dc.w byte_15924-Map_obj69
0001604A 04                         byte_158E6:	dc.b 4
0001604B F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00016050 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016055 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001605A F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001605F 08                         byte_158FB:	dc.b 8
00016060 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016065 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001606A 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001606F 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016074 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016079 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001607E 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016083 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016088 04                         byte_15924:	dc.b 4
00016089 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001608E 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016093 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016098 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001609E 00                         		even
0001609E 00                         		even
0001609E                            
0001609E                            ; ---------------------------------------------------------------------------
0001609E                            ; Sprite mappings - spinning platforms (SBZ)
0001609E                            ; ---------------------------------------------------------------------------
0001609E                            Map_obj69a:
0001609E                            	include "_maps\obj69a.asm"
0001609E                            ; ---------------------------------------------------------------------------
0001609E                            ; Sprite mappings - spinning platforms (SBZ)
0001609E                            ; ---------------------------------------------------------------------------
0001609E 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000160A2 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000160A6 0000                       		dc.w byte_15970-Map_obj69a
000160A8 02                         byte_15944:	dc.b 2
000160A9 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000160AE F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000160B3 02                         byte_1594F:	dc.b 2
000160B4 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000160B9 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000160BE 02                         byte_1595A:	dc.b 2
000160BF F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000160C4 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000160C9 02                         byte_15965:	dc.b 2
000160CA F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000160CF 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000160D4 02                         byte_15970:	dc.b 2
000160D5 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000160DA 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000160E0 00                         		even
000160E0 00                         		even
000160E0                            
000160E0                            ; ===========================================================================
000160E0                            ; ---------------------------------------------------------------------------
000160E0                            ; Object 6A - ground saws and pizza cutters (SBZ)
000160E0                            ; ---------------------------------------------------------------------------
000160E0                            
000160E0                            Obj6A:					; XREF: Obj_Index
000160E0 7000                       		moveq	#0,d0
000160E2 1028 0024                  		move.b	$24(a0),d0
000160E6 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000160EA 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000160EE                            ; ===========================================================================
000160EE 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000160F0 0000                       		dc.w Obj6A_Action-Obj6A_Index
000160F2                            ; ===========================================================================
000160F2                            
000160F2                            Obj6A_Main:				; XREF: Obj6A_Index
000160F2 5428 0024                  		addq.b	#2,$24(a0)
000160F6 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000160FE 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016104 117C 0004 0001             		move.b	#4,1(a0)
0001610A 117C 0004 0018             		move.b	#4,$18(a0)
00016110 117C 0020 0019             		move.b	#$20,$19(a0)
00016116 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001611C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016122 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016128 6400                       		bcc.s	Obj6A_Action
0001612A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016130                            
00016130                            Obj6A_Action:				; XREF: Obj6A_Index
00016130 7000                       		moveq	#0,d0
00016132 1028 0028                  		move.b	$28(a0),d0
00016136 0240 0007                  		andi.w	#7,d0
0001613A D040                       		add.w	d0,d0
0001613C 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00016140 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016144 3028 003A                  		move.w	$3A(a0),d0
00016148 0240 FF80                  		andi.w	#$FF80,d0
0001614C 3238 F700                  		move.w	($FFFFF700).w,d1
00016150 0441 0080                  		subi.w	#$80,d1
00016154 0241 FF80                  		andi.w	#$FF80,d1
00016158 9041                       		sub.w	d1,d0
0001615A 0C40 0280                  		cmpi.w	#$280,d0
0001615E 6200                       		bhi.s	Obj6A_Delete
00016160 4EF9 0000 DC84             		jmp	DisplaySprite
00016166                            ; ===========================================================================
00016166                            
00016166                            Obj6A_Delete:
00016166 4EF9 0000 DCC0             		jmp	DeleteObject
0001616C                            ; ===========================================================================
0001616C 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016170 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016174 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016176                            ; ===========================================================================
00016176                            
00016176                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016176 4E75                       		rts	
00016178                            ; ===========================================================================
00016178                            
00016178                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016178 323C 0060                  		move.w	#$60,d1
0001617C 7000                       		moveq	#0,d0
0001617E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016182 0828 0000 0022             		btst	#0,$22(a0)
00016188 6700                       		beq.s	Obj6A_Animate01
0001618A 4440                       		neg.w	d0
0001618C D041                       		add.w	d1,d0
0001618E                            
0001618E                            Obj6A_Animate01:
0001618E 3228 003A                  		move.w	$3A(a0),d1
00016192 9240                       		sub.w	d0,d1
00016194 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016198 5328 001E                  		subq.b	#1,$1E(a0)
0001619C 6A00                       		bpl.s	loc_15A46
0001619E 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000161A4 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000161AA                            
000161AA                            loc_15A46:
000161AA 4A28 0001                  		tst.b	1(a0)
000161AE 6A00                       		bpl.s	locret_15A60
000161B0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000161B4 0240 000F                  		andi.w	#$F,d0
000161B8 6600                       		bne.s	locret_15A60
000161BA 303C 00B0                  		move.w	#$B0,d0
000161BE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000161C4                            
000161C4                            locret_15A60:
000161C4 4E75                       		rts	
000161C6                            ; ===========================================================================
000161C6                            
000161C6                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000161C6 323C 0030                  		move.w	#$30,d1
000161CA 7000                       		moveq	#0,d0
000161CC 1038 FE64                  		move.b	($FFFFFE64).w,d0
000161D0 0828 0000 0022             		btst	#0,$22(a0)
000161D6 6700                       		beq.s	Obj6A_Animate02
000161D8 4440                       		neg.w	d0
000161DA 0640 0080                  		addi.w	#$80,d0
000161DE                            
000161DE                            Obj6A_Animate02:
000161DE 3228 0038                  		move.w	$38(a0),d1
000161E2 9240                       		sub.w	d0,d1
000161E4 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000161E8 5328 001E                  		subq.b	#1,$1E(a0)
000161EC 6A00                       		bpl.s	loc_15A96
000161EE 117C 0002 001E             		move.b	#2,$1E(a0)
000161F4 0868 0000 001A             		bchg	#0,$1A(a0)
000161FA                            
000161FA                            loc_15A96:
000161FA 4A28 0001                  		tst.b	1(a0)
000161FE 6A00                       		bpl.s	locret_15AB0
00016200 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016204 0C00 0018                  		cmpi.b	#$18,d0
00016208 6600                       		bne.s	locret_15AB0
0001620A 303C 00B0                  		move.w	#$B0,d0
0001620E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016214                            
00016214                            locret_15AB0:
00016214 4E75                       		rts	
00016216                            ; ===========================================================================
00016216                            
00016216                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016216 4A28 003D                  		tst.b	$3D(a0)
0001621A 6600                       		bne.s	Obj6A_Animate03
0001621C 3038 D008                  		move.w	($FFFFD008).w,d0
00016220 0440 00C0                  		subi.w	#$C0,d0
00016224 6500                       		bcs.s	loc_15B02
00016226 9068 0008                  		sub.w	8(a0),d0
0001622A 6500                       		bcs.s	loc_15B02
0001622C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016230 0440 0080                  		subi.w	#$80,d0
00016234 B068 000C                  		cmp.w	$C(a0),d0
00016238 6400                       		bcc.s	locret_15B04
0001623A 0640 0100                  		addi.w	#$100,d0
0001623E B068 000C                  		cmp.w	$C(a0),d0
00016242 6500                       		bcs.s	locret_15B04
00016244 117C 0001 003D             		move.b	#1,$3D(a0)
0001624A 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00016250 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016256 117C 0002 001A             		move.b	#2,$1A(a0)
0001625C 303C 00B0                  		move.w	#$B0,d0
00016260 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016266                            
00016266                            loc_15B02:
00016266 588F                       		addq.l	#4,sp
00016268                            
00016268                            locret_15B04:
00016268 4E75                       		rts	
0001626A                            ; ===========================================================================
0001626A                            
0001626A                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
0001626A 4EB9 0000 DC5E             		jsr	SpeedToPos
00016270 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016276 5328 001E                  		subq.b	#1,$1E(a0)
0001627A 6A00                       		bpl.s	locret_15B24
0001627C 117C 0002 001E             		move.b	#2,$1E(a0)
00016282 0868 0000 001A             		bchg	#0,$1A(a0)
00016288                            
00016288                            locret_15B24:
00016288 4E75                       		rts	
0001628A                            ; ===========================================================================
0001628A                            
0001628A                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
0001628A 4A28 003D                  		tst.b	$3D(a0)
0001628E 6600                       		bne.s	Obj6A_Animate04
00016290 3038 D008                  		move.w	($FFFFD008).w,d0
00016294 0640 00E0                  		addi.w	#$E0,d0
00016298 9068 0008                  		sub.w	8(a0),d0
0001629C 6400                       		bcc.s	loc_15B74
0001629E 3038 D00C                  		move.w	($FFFFD00C).w,d0
000162A2 0440 0080                  		subi.w	#$80,d0
000162A6 B068 000C                  		cmp.w	$C(a0),d0
000162AA 6400                       		bcc.s	locret_15B76
000162AC 0640 0100                  		addi.w	#$100,d0
000162B0 B068 000C                  		cmp.w	$C(a0),d0
000162B4 6500                       		bcs.s	locret_15B76
000162B6 117C 0001 003D             		move.b	#1,$3D(a0)
000162BC 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
000162C2 117C 00A2 0020             		move.b	#$A2,$20(a0)
000162C8 117C 0002 001A             		move.b	#2,$1A(a0)
000162CE 303C 00B0                  		move.w	#$B0,d0
000162D2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000162D8                            
000162D8                            loc_15B74:
000162D8 588F                       		addq.l	#4,sp
000162DA                            
000162DA                            locret_15B76:
000162DA 4E75                       		rts	
000162DC                            ; ===========================================================================
000162DC                            
000162DC                            Obj6A_Animate04:
000162DC 4EB9 0000 DC5E             		jsr	SpeedToPos
000162E2 3168 0008 003A             		move.w	8(a0),$3A(a0)
000162E8 5328 001E                  		subq.b	#1,$1E(a0)
000162EC 6A00                       		bpl.s	locret_15B96
000162EE 117C 0002 001E             		move.b	#2,$1E(a0)
000162F4 0868 0000 001A             		bchg	#0,$1A(a0)
000162FA                            
000162FA                            locret_15B96:
000162FA 4E75                       		rts	
000162FC                            ; ===========================================================================
000162FC                            ; ---------------------------------------------------------------------------
000162FC                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000162FC                            ; ---------------------------------------------------------------------------
000162FC                            Map_obj6A:
000162FC                            	include "_maps\obj6A.asm"
000162FC                            ; ---------------------------------------------------------------------------
000162FC                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000162FC                            ; ---------------------------------------------------------------------------
000162FC 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016300 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016304 07                         byte_15BA0:	dc.b 7
00016305 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001630A D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001630F E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016314 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016319 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001631E 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016323 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016328 07                         byte_15BC4:	dc.b 7
00016329 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001632E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016333 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016338 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001633D E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016342 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016347 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001634C 04                         byte_15BE8:	dc.b 4
0001634D E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016352 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016357 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001635C 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016361 04                         byte_15BFD:	dc.b 4
00016362 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016367 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001636C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016371 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016376                            		even
00016376                            		even
00016376                            
00016376                            ; ===========================================================================
00016376                            ; ---------------------------------------------------------------------------
00016376                            ; Object 6B - stomper (SBZ)
00016376                            ; ---------------------------------------------------------------------------
00016376                            
00016376                            Obj6B:					; XREF: Obj_Index
00016376 7000                       		moveq	#0,d0
00016378 1028 0024                  		move.b	$24(a0),d0
0001637C 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016380 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016384                            ; ===========================================================================
00016384 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016386 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016388                            
00016388 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001638C 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016390 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016394 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016398 8040 0005                  		dc.b  $80, $40,	  0,   5
0001639C                            ; ===========================================================================
0001639C                            
0001639C                            Obj6B_Main:				; XREF: Obj6B_Index
0001639C 5428 0024                  		addq.b	#2,$24(a0)
000163A0 7000                       		moveq	#0,d0
000163A2 1028 0028                  		move.b	$28(a0),d0
000163A6 E448                       		lsr.w	#2,d0
000163A8 0240 001C                  		andi.w	#$1C,d0
000163AC 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000163B0 115B 0019                  		move.b	(a3)+,$19(a0)
000163B4 115B 0016                  		move.b	(a3)+,$16(a0)
000163B8 E448                       		lsr.w	#2,d0
000163BA 1140 001A                  		move.b	d0,$1A(a0)
000163BE 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000163C6 317C 22C0 0002             		move.w	#$22C0,2(a0)
000163CC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000163D2 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000163D4 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000163DA 6700                       		beq.s	Obj6B_SBZ3
000163DC                            
000163DC                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000163DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000163E0 7000                       		moveq	#0,d0
000163E2 1028 0023                  		move.b	$23(a0),d0
000163E6 6700                       		beq.s	Obj6B_Delete
000163E8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000163EE                            
000163EE                            Obj6B_Delete:
000163EE 4EF9 0000 DCC0             		jmp	DeleteObject
000163F4                            ; ===========================================================================
000163F4                            
000163F4                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000163F4 317C 41F0 0002             		move.w	#$41F0,2(a0)
000163FA 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016400 6600                       		bne.s	Obj6B_SBZ12
00016402 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016406 7000                       		moveq	#0,d0
00016408 1028 0023                  		move.b	$23(a0),d0
0001640C 6700                       		beq.s	Obj6B_SBZ12
0001640E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016414 6700                       		beq.s	Obj6B_SBZ12
00016416 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001641A 60C0                       		bra.s	Obj6B_ChkGone
0001641C                            ; ===========================================================================
0001641C                            
0001641C                            Obj6B_SBZ12:				; XREF: Obj6B_Main
0001641C 0028 0004 0001             		ori.b	#4,1(a0)
00016422 117C 0004 0018             		move.b	#4,$18(a0)
00016428 3168 0008 0034             		move.w	8(a0),$34(a0)
0001642E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016434 7000                       		moveq	#0,d0
00016436 101B                       		move.b	(a3)+,d0
00016438 3140 003C                  		move.w	d0,$3C(a0)
0001643C 7000                       		moveq	#0,d0
0001643E 1028 0028                  		move.b	$28(a0),d0
00016442 6A00                       		bpl.s	Obj6B_Action
00016444 0200 000F                  		andi.b	#$F,d0
00016448 1140 003E                  		move.b	d0,$3E(a0)
0001644C 1153 0028                  		move.b	(a3),$28(a0)
00016450 0C13 0005                  		cmpi.b	#5,(a3)
00016454 6600                       		bne.s	Obj6B_ChkGone2
00016456 08E8 0004 0001             		bset	#4,1(a0)
0001645C                            
0001645C                            Obj6B_ChkGone2:
0001645C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016460 7000                       		moveq	#0,d0
00016462 1028 0023                  		move.b	$23(a0),d0
00016466 6700                       		beq.s	Obj6B_Action
00016468 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001646E                            
0001646E                            Obj6B_Action:				; XREF: Obj6B_Index
0001646E 3F28 0008                  		move.w	8(a0),-(sp)
00016472 7000                       		moveq	#0,d0
00016474 1028 0028                  		move.b	$28(a0),d0
00016478 0240 000F                  		andi.w	#$F,d0
0001647C D040                       		add.w	d0,d0
0001647E 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016482 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016486 381F                       		move.w	(sp)+,d4
00016488 4A28 0001                  		tst.b	1(a0)
0001648C 6A00                       		bpl.s	Obj6B_ChkDel
0001648E 7200                       		moveq	#0,d1
00016490 1228 0019                  		move.b	$19(a0),d1
00016494 0641 000B                  		addi.w	#$B,d1
00016498 7400                       		moveq	#0,d2
0001649A 1428 0016                  		move.b	$16(a0),d2
0001649E 3602                       		move.w	d2,d3
000164A0 5243                       		addq.w	#1,d3
000164A2 6100 9BB0                  		bsr.w	SolidObject
000164A6                            
000164A6                            Obj6B_ChkDel:
000164A6 3028 0034                  		move.w	$34(a0),d0
000164AA 0240 FF80                  		andi.w	#$FF80,d0
000164AE 3238 F700                  		move.w	($FFFFF700).w,d1
000164B2 0441 0080                  		subi.w	#$80,d1
000164B6 0241 FF80                  		andi.w	#$FF80,d1
000164BA 9041                       		sub.w	d1,d0
000164BC 0C40 0280                  		cmpi.w	#$280,d0
000164C0 6200                       		bhi.s	loc_15D64
000164C2 4EF9 0000 DC84             		jmp	DisplaySprite
000164C8                            ; ===========================================================================
000164C8                            
000164C8                            loc_15D64:
000164C8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000164CE 6600                       		bne.s	Obj6B_Delete2
000164D0 4238 F7CB                  		clr.b	($FFFFF7CB).w
000164D4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000164D8 7000                       		moveq	#0,d0
000164DA 1028 0023                  		move.b	$23(a0),d0
000164DE 6700                       		beq.s	Obj6B_Delete2
000164E0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000164E6                            
000164E6                            Obj6B_Delete2:
000164E6 4EF9 0000 DCC0             		jmp	DeleteObject
000164EC                            ; ===========================================================================
000164EC 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000164F0 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000164F4 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000164F8                            ; ===========================================================================
000164F8                            
000164F8                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000164F8 4E75                       		rts	
000164FA                            ; ===========================================================================
000164FA                            
000164FA                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000164FA 4A28 0038                  		tst.b	$38(a0)
000164FE 6600                       		bne.s	loc_15DB4
00016500 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016504 7000                       		moveq	#0,d0
00016506 1028 003E                  		move.b	$3E(a0),d0
0001650A 0832 0000 0000             		btst	#0,(a2,d0.w)
00016510 6700                       		beq.s	loc_15DC2
00016512 117C 0001 0038             		move.b	#1,$38(a0)
00016518                            
00016518                            loc_15DB4:
00016518 3028 003C                  		move.w	$3C(a0),d0
0001651C B068 003A                  		cmp.w	$3A(a0),d0
00016520 6700                       		beq.s	loc_15DE0
00016522 5468 003A                  		addq.w	#2,$3A(a0)
00016526                            
00016526                            loc_15DC2:
00016526 3028 003A                  		move.w	$3A(a0),d0
0001652A 0828 0000 0022             		btst	#0,$22(a0)
00016530 6700                       		beq.s	loc_15DD4
00016532 4440                       		neg.w	d0
00016534 0640 0080                  		addi.w	#$80,d0
00016538                            
00016538                            loc_15DD4:
00016538 3228 0034                  		move.w	$34(a0),d1
0001653C 9240                       		sub.w	d0,d1
0001653E 3141 0008                  		move.w	d1,8(a0)
00016542 4E75                       		rts	
00016544                            ; ===========================================================================
00016544                            
00016544                            loc_15DE0:
00016544 5228 0028                  		addq.b	#1,$28(a0)
00016548 317C 00B4 0036             		move.w	#$B4,$36(a0)
0001654E 4228 0038                  		clr.b	$38(a0)
00016552 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016556 7000                       		moveq	#0,d0
00016558 1028 0023                  		move.b	$23(a0),d0
0001655C 67C8                       		beq.s	loc_15DC2
0001655E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016564 60C0                       		bra.s	loc_15DC2
00016566                            ; ===========================================================================
00016566                            
00016566                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016566 4A28 0038                  		tst.b	$38(a0)
0001656A 6600                       		bne.s	loc_15E14
0001656C 5368 0036                  		subq.w	#1,$36(a0)
00016570 6600                       		bne.s	loc_15E1E
00016572 117C 0001 0038             		move.b	#1,$38(a0)
00016578                            
00016578                            loc_15E14:
00016578 4A68 003A                  		tst.w	$3A(a0)
0001657C 6700                       		beq.s	loc_15E3C
0001657E 5568 003A                  		subq.w	#2,$3A(a0)
00016582                            
00016582                            loc_15E1E:
00016582 3028 003A                  		move.w	$3A(a0),d0
00016586 0828 0000 0022             		btst	#0,$22(a0)
0001658C 6700                       		beq.s	loc_15E30
0001658E 4440                       		neg.w	d0
00016590 0640 0080                  		addi.w	#$80,d0
00016594                            
00016594                            loc_15E30:
00016594 3228 0034                  		move.w	$34(a0),d1
00016598 9240                       		sub.w	d0,d1
0001659A 3141 0008                  		move.w	d1,8(a0)
0001659E 4E75                       		rts	
000165A0                            ; ===========================================================================
000165A0                            
000165A0                            loc_15E3C:
000165A0 5328 0028                  		subq.b	#1,$28(a0)
000165A4 4228 0038                  		clr.b	$38(a0)
000165A8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000165AC 7000                       		moveq	#0,d0
000165AE 1028 0023                  		move.b	$23(a0),d0
000165B2 67CE                       		beq.s	loc_15E1E
000165B4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000165BA 60C6                       		bra.s	loc_15E1E
000165BC                            ; ===========================================================================
000165BC                            
000165BC                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000165BC 4A28 0038                  		tst.b	$38(a0)
000165C0 6600                       		bne.s	loc_15E7C
000165C2 4A68 003A                  		tst.w	$3A(a0)
000165C6 6700                       		beq.s	loc_15E6A
000165C8 5368 003A                  		subq.w	#1,$3A(a0)
000165CC 6000                       		bra.s	loc_15E8E
000165CE                            ; ===========================================================================
000165CE                            
000165CE                            loc_15E6A:
000165CE 5368 0036                  		subq.w	#1,$36(a0)
000165D2 6A00                       		bpl.s	loc_15E8E
000165D4 317C 003C 0036             		move.w	#$3C,$36(a0)
000165DA 117C 0001 0038             		move.b	#1,$38(a0)
000165E0                            
000165E0                            loc_15E7C:
000165E0 5068 003A                  		addq.w	#8,$3A(a0)
000165E4 3028 003A                  		move.w	$3A(a0),d0
000165E8 B068 003C                  		cmp.w	$3C(a0),d0
000165EC 6600                       		bne.s	loc_15E8E
000165EE 4228 0038                  		clr.b	$38(a0)
000165F2                            
000165F2                            loc_15E8E:
000165F2 3028 003A                  		move.w	$3A(a0),d0
000165F6 0828 0000 0022             		btst	#0,$22(a0)
000165FC 6700                       		beq.s	loc_15EA0
000165FE 4440                       		neg.w	d0
00016600 0640 0038                  		addi.w	#$38,d0
00016604                            
00016604                            loc_15EA0:
00016604 3228 0030                  		move.w	$30(a0),d1
00016608 D240                       		add.w	d0,d1
0001660A 3141 000C                  		move.w	d1,$C(a0)
0001660E 4E75                       		rts	
00016610                            ; ===========================================================================
00016610                            
00016610                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016610 4A28 0038                  		tst.b	$38(a0)
00016614 6600                       		bne.s	loc_15ED0
00016616 4A68 003A                  		tst.w	$3A(a0)
0001661A 6700                       		beq.s	loc_15EBE
0001661C 5168 003A                  		subq.w	#8,$3A(a0)
00016620 6000                       		bra.s	loc_15EF0
00016622                            ; ===========================================================================
00016622                            
00016622                            loc_15EBE:
00016622 5368 0036                  		subq.w	#1,$36(a0)
00016626 6A00                       		bpl.s	loc_15EF0
00016628 317C 003C 0036             		move.w	#$3C,$36(a0)
0001662E 117C 0001 0038             		move.b	#1,$38(a0)
00016634                            
00016634                            loc_15ED0:
00016634 3028 003A                  		move.w	$3A(a0),d0
00016638 B068 003C                  		cmp.w	$3C(a0),d0
0001663C 6700                       		beq.s	loc_15EE0
0001663E 5068 003A                  		addq.w	#8,$3A(a0)
00016642 6000                       		bra.s	loc_15EF0
00016644                            ; ===========================================================================
00016644                            
00016644                            loc_15EE0:
00016644 5368 0036                  		subq.w	#1,$36(a0)
00016648 6A00                       		bpl.s	loc_15EF0
0001664A 317C 003C 0036             		move.w	#$3C,$36(a0)
00016650 4228 0038                  		clr.b	$38(a0)
00016654                            
00016654                            loc_15EF0:
00016654 3028 003A                  		move.w	$3A(a0),d0
00016658 0828 0000 0022             		btst	#0,$22(a0)
0001665E 6700                       		beq.s	loc_15F02
00016660 4440                       		neg.w	d0
00016662 0640 0038                  		addi.w	#$38,d0
00016666                            
00016666                            loc_15F02:
00016666 3228 0030                  		move.w	$30(a0),d1
0001666A D240                       		add.w	d0,d1
0001666C 3141 000C                  		move.w	d1,$C(a0)
00016670 4E75                       		rts	
00016672                            ; ===========================================================================
00016672                            
00016672                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016672 4A28 0038                  		tst.b	$38(a0)
00016676 6600                       		bne.s	loc_15F3E
00016678 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001667C 7000                       		moveq	#0,d0
0001667E 1028 003E                  		move.b	$3E(a0),d0
00016682 0832 0000 0000             		btst	#0,(a2,d0.w)
00016688 6700                       		beq.s	locret_15F5C
0001668A 117C 0001 0038             		move.b	#1,$38(a0)
00016690 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016694 7000                       		moveq	#0,d0
00016696 1028 0023                  		move.b	$23(a0),d0
0001669A 6700                       		beq.s	loc_15F3E
0001669C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000166A2                            
000166A2                            loc_15F3E:
000166A2 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000166AA 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000166B2 3168 0008 0034             		move.w	8(a0),$34(a0)
000166B8 0C68 0980 0008             		cmpi.w	#$980,8(a0)
000166BE 6700                       		beq.s	loc_15F5E
000166C0                            
000166C0                            locret_15F5C:
000166C0 4E75                       		rts	
000166C2                            ; ===========================================================================
000166C2                            
000166C2                            loc_15F5E:
000166C2 4228 0028                  		clr.b	$28(a0)
000166C6 4228 0038                  		clr.b	$38(a0)
000166CA 4E75                       		rts	
000166CC                            ; ===========================================================================
000166CC                            ; ---------------------------------------------------------------------------
000166CC                            ; Sprite mappings - stomper and	platforms (SBZ)
000166CC                            ; ---------------------------------------------------------------------------
000166CC                            Map_obj6B:
000166CC                            	include "_maps\obj6B.asm"
000166CC                            ; ---------------------------------------------------------------------------
000166CC                            ; Sprite mappings - stomper and	platforms (SBZ)
000166CC                            ; ---------------------------------------------------------------------------
000166CC 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000166D0 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000166D4 0000                       		dc.w byte_15FB0-Map_obj6B
000166D6 04                         byte_15F72:	dc.b 4
000166D7 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000166DC F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000166E1 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000166E6 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000166EB 08                         byte_15F87:	dc.b 8
000166EC E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000166F1 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000166F6 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000166FB E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016700 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016705 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001670A 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
0001670F 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016714 0E                         byte_15FB0:	dc.b $E
00016715 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
0001671A C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
0001671F C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016724 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016729 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
0001672E C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016733 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016738 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001673D E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016742 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016747 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001674C 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016751 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016756 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001675C 00                         		even
0001675C 00                         		even
0001675C                            
0001675C                            ; ===========================================================================
0001675C                            ; ---------------------------------------------------------------------------
0001675C                            ; Object 6C - vanishing	platforms (SBZ)
0001675C                            ; ---------------------------------------------------------------------------
0001675C                            
0001675C                            Obj6C:					; XREF: Obj_Index
0001675C 7000                       		moveq	#0,d0
0001675E 1028 0024                  		move.b	$24(a0),d0
00016762 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016766 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001676A                            ; ===========================================================================
0001676A 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
0001676C 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001676E 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016770 0000                       		dc.w loc_16068-Obj6C_Index
00016772                            ; ===========================================================================
00016772                            
00016772                            Obj6C_Main:				; XREF: Obj6C_Index
00016772 5C28 0024                  		addq.b	#6,$24(a0)
00016776 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
0001677E 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016784 0028 0004 0001             		ori.b	#4,1(a0)
0001678A 117C 0010 0019             		move.b	#$10,$19(a0)
00016790 117C 0004 0018             		move.b	#4,$18(a0)
00016796 7000                       		moveq	#0,d0
00016798 1028 0028                  		move.b	$28(a0),d0	; get object type
0001679C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000167A0 5240                       		addq.w	#1,d0		; add 1
000167A2 EF48                       		lsl.w	#7,d0		; multiply by $80
000167A4 3200                       		move.w	d0,d1
000167A6 5340                       		subq.w	#1,d0
000167A8 3140 0030                  		move.w	d0,$30(a0)
000167AC 3140 0032                  		move.w	d0,$32(a0)
000167B0 7000                       		moveq	#0,d0
000167B2 1028 0028                  		move.b	$28(a0),d0	; get object type
000167B6 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000167BA 0641 0080                  		addi.w	#$80,d1
000167BE C0C1                       		mulu.w	d1,d0
000167C0 E088                       		lsr.l	#8,d0
000167C2 3140 0036                  		move.w	d0,$36(a0)
000167C6 5341                       		subq.w	#1,d1
000167C8 3141 0038                  		move.w	d1,$38(a0)
000167CC                            
000167CC                            loc_16068:				; XREF: Obj6C_Index
000167CC 3038 FE04                  		move.w	($FFFFFE04).w,d0
000167D0 9068 0036                  		sub.w	$36(a0),d0
000167D4 C068 0038                  		and.w	$38(a0),d0
000167D8 6600                       		bne.s	Obj6C_Animate
000167DA 5928 0024                  		subq.b	#4,$24(a0)
000167DE 6000                       		bra.s	Obj6C_Vanish
000167E0                            ; ===========================================================================
000167E0                            
000167E0                            Obj6C_Animate:
000167E0 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000167E6 4EB9 0000 AD44             		jsr	AnimateSprite
000167EC 6000 953E                  		bra.w	MarkObjGone
000167F0                            ; ===========================================================================
000167F0                            
000167F0                            Obj6C_Vanish:				; XREF: Obj6C_Index
000167F0 5368 0030                  		subq.w	#1,$30(a0)
000167F4 6A00                       		bpl.s	loc_160AA
000167F6 317C 007F 0030             		move.w	#127,$30(a0)
000167FC 4A28 001C                  		tst.b	$1C(a0)
00016800 6700                       		beq.s	loc_160A4
00016802 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016808                            
00016808                            loc_160A4:
00016808 0868 0000 001C             		bchg	#0,$1C(a0)
0001680E                            
0001680E                            loc_160AA:
0001680E 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016814 4EB9 0000 AD44             		jsr	AnimateSprite
0001681A 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016820 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016822 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016828 6600                       		bne.s	loc_160D6
0001682A 7200                       		moveq	#0,d1
0001682C 1228 0019                  		move.b	$19(a0),d1
00016830 4EB9 0000 79A0             		jsr	(PlatformObject).l
00016836 6000 94F4                  		bra.w	MarkObjGone
0001683A                            ; ===========================================================================
0001683A                            
0001683A                            loc_160D6:
0001683A 7200                       		moveq	#0,d1
0001683C 1228 0019                  		move.b	$19(a0),d1
00016840 4EB9 0000 7B14             		jsr	(ExitPlatform).l
00016846 3428 0008                  		move.w	8(a0),d2
0001684A 4EB9 0000 807E             		jsr	(MvSonicOnPtfm2).l
00016850 6000 94DA                  		bra.w	MarkObjGone
00016854                            ; ===========================================================================
00016854                            
00016854                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016854 0828 0003 0022             		btst	#3,$22(a0)
0001685A 6700                       		beq.s	Obj6C_Display
0001685C 43F8 D000                  		lea	($FFFFD000).w,a1
00016860 08A9 0003 0022             		bclr	#3,$22(a1)
00016866 08A8 0003 0022             		bclr	#3,$22(a0)
0001686C 117C 0002 0024             		move.b	#2,$24(a0)
00016872 4228 0025                  		clr.b	$25(a0)
00016876                            
00016876                            Obj6C_Display:
00016876 6000 94B4                  		bra.w	MarkObjGone
0001687A                            ; ===========================================================================
0001687A                            Ani_obj6C:
0001687A                            	include "_anim\obj6C.asm"
0001687A                            ; ---------------------------------------------------------------------------
0001687A                            ; Animation script - vanishing platforms (SBZ)
0001687A                            ; ---------------------------------------------------------------------------
0001687A 0000                       		dc.w byte_1611A-Ani_obj6C
0001687C 0000                       		dc.w byte_16122-Ani_obj6C
0001687E 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016886 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
0001688E                            		even
0001688E                            		even
0001688E                            
0001688E                            ; ---------------------------------------------------------------------------
0001688E                            ; Sprite mappings - vanishing platforms	(SBZ)
0001688E                            ; ---------------------------------------------------------------------------
0001688E                            Map_obj6C:
0001688E                            	include "_maps\obj6C.asm"
0001688E                            ; ---------------------------------------------------------------------------
0001688E                            ; Sprite mappings - vanishing platforms	(SBZ)
0001688E                            ; ---------------------------------------------------------------------------
0001688E 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016892 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016896 01                         byte_16132:	dc.b 1
00016897 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0001689C 01                         byte_16138:	dc.b 1
0001689D F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000168A2 01                         byte_1613E:	dc.b 1
000168A3 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000168A8 00                         byte_16144:	dc.b 0
000168AA 00                         		even
000168AA 00                         		even
000168AA                            
000168AA                            ; ===========================================================================
000168AA                            ; ---------------------------------------------------------------------------
000168AA                            ; Object 6E - electrocution orbs (SBZ)
000168AA                            ; ---------------------------------------------------------------------------
000168AA                            
000168AA                            Obj6E:					; XREF: Obj_Index
000168AA 7000                       		moveq	#0,d0
000168AC 1028 0024                  		move.b	$24(a0),d0
000168B0 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000168B4 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
000168B8                            ; ===========================================================================
000168B8 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
000168BA 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000168BC                            ; ===========================================================================
000168BC                            
000168BC                            Obj6E_Main:				; XREF: Obj6E_Index
000168BC 5428 0024                  		addq.b	#2,$24(a0)
000168C0 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000168C8 317C 047E 0002             		move.w	#$47E,2(a0)
000168CE 0028 0004 0001             		ori.b	#4,1(a0)
000168D4 117C 0028 0019             		move.b	#$28,$19(a0)
000168DA 7000                       		moveq	#0,d0
000168DC 1028 0028                  		move.b	$28(a0),d0	; read object type
000168E0 E948                       		lsl.w	#4,d0		; multiply by $10
000168E2 5340                       		subq.w	#1,d0
000168E4 3140 0034                  		move.w	d0,$34(a0)
000168E8                            
000168E8                            Obj6E_Shock:				; XREF: Obj6E_Index
000168E8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000168EC C068 0034                  		and.w	$34(a0),d0
000168F0 6600                       		bne.s	Obj6E_Animate
000168F2 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000168F8 4A28 0001                  		tst.b	1(a0)
000168FC 6A00                       		bpl.s	Obj6E_Animate
000168FE 303C 00B1                  		move.w	#$B1,d0
00016902 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play electricity sound
00016908                            
00016908                            Obj6E_Animate:
00016908 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
0001690E 4EB9 0000 AD44             		jsr	AnimateSprite
00016914 117C 0000 0020             		move.b	#0,$20(a0)
0001691A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016920 6600                       		bne.s	Obj6E_Display	; if not, branch
00016922 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016928                            
00016928                            Obj6E_Display:
00016928 6000 9402                  		bra.w	MarkObjGone
0001692C                            ; ===========================================================================
0001692C                            Ani_obj6E:
0001692C                            	include "_anim\obj6E.asm"
0001692C                            ; ---------------------------------------------------------------------------
0001692C                            ; Animation script - electrocution orbs (SBZ)
0001692C                            ; ---------------------------------------------------------------------------
0001692C 0000                       		dc.w byte_161CC-Ani_obj6E
0001692E 0000                       		dc.w byte_161D0-Ani_obj6E
00016930 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016934 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016944                            		even
00016944                            		even
00016944                            
00016944                            ; ---------------------------------------------------------------------------
00016944                            ; Sprite mappings - electrocution orbs (SBZ)
00016944                            ; ---------------------------------------------------------------------------
00016944                            Map_obj6E:
00016944                            	include "_maps\obj6E.asm"
00016944                            Map_26ed:
00016944 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016946 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016948 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
0001694A 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
0001694C 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
0001694E 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016950 01                         Map_26ed_C: 	dc.b $1
00016951 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016956 02                         Map_26ed_12: 	dc.b $2
00016957 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001695C 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016961 06                         Map_26ed_1D: 	dc.b $6
00016962 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016967 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001696C F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016971 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016976 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
0001697B F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016980 08                         Map_26ed_3C: 	dc.b $8
00016981 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016986 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001698B F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016990 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016995 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
0001699A F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
0001699F F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
000169A4 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
000169A9 06                         Map_26ed_65: 	dc.b $6
000169AA F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000169AF 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000169B4 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
000169B9 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
000169BE F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
000169C3 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
000169C8 04                         Map_26ed_84: 	dc.b $4
000169C9 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000169CE 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000169D3 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
000169D8 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
000169DE 00                         	even
000169DE 00                         	even
000169DE                            
000169DE                            ; ===========================================================================
000169DE                            ; ---------------------------------------------------------------------------
000169DE                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000169DE                            ; ---------------------------------------------------------------------------
000169DE                            
000169DE                            Obj6F:					; XREF: Obj_Index
000169DE 7000                       		moveq	#0,d0
000169E0 1028 0024                  		move.b	$24(a0),d0
000169E4 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000169E8 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
000169EC 3028 0030                  		move.w	$30(a0),d0
000169F0 0240 FF80                  		andi.w	#$FF80,d0
000169F4 3238 F700                  		move.w	($FFFFF700).w,d1
000169F8 0441 0080                  		subi.w	#$80,d1
000169FC 0241 FF80                  		andi.w	#$FF80,d1
00016A00 9041                       		sub.w	d1,d0
00016A02 0C40 0280                  		cmpi.w	#$280,d0
00016A06 6200                       		bhi.s	loc_1629A
00016A08                            
00016A08                            Obj6F_Display:
00016A08 4EF9 0000 DC84             		jmp	DisplaySprite
00016A0E                            ; ===========================================================================
00016A0E                            
00016A0E                            loc_1629A:
00016A0E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016A14 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016A16 0C40 FF80                  		cmpi.w	#-$80,d0
00016A1A 64EC                       		bcc.s	Obj6F_Display
00016A1C                            
00016A1C                            Obj6F_Act1or2:
00016A1C 1028 002F                  		move.b	$2F(a0),d0
00016A20 6A00                       		bpl.s	Obj6F_Delete
00016A22 0240 007F                  		andi.w	#$7F,d0
00016A26 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016A2A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016A30                            
00016A30                            Obj6F_Delete:
00016A30 4EF9 0000 DCC0             		jmp	DeleteObject
00016A36                            ; ===========================================================================
00016A36 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016A38 0000                       		dc.w loc_163D8-Obj6F_Index
00016A3A                            ; ===========================================================================
00016A3A                            
00016A3A                            Obj6F_Main:				; XREF: Obj6F_Index
00016A3A 1028 0028                  		move.b	$28(a0),d0
00016A3E 6B00 0000                  		bmi.w	loc_16380
00016A42 5428 0024                  		addq.b	#2,$24(a0)
00016A46 217C 0001 609E 0004        		move.l	#Map_obj69a,4(a0)
00016A4E 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016A54 117C 0010 0019             		move.b	#$10,$19(a0)
00016A5A 0028 0004 0001             		ori.b	#4,1(a0)
00016A60 117C 0004 0018             		move.b	#4,$18(a0)
00016A66 7000                       		moveq	#0,d0
00016A68 1028 0028                  		move.b	$28(a0),d0
00016A6C 3200                       		move.w	d0,d1
00016A6E E648                       		lsr.w	#3,d0
00016A70 0240 001E                  		andi.w	#$1E,d0
00016A74 45FA 0000                  		lea	off_164A6(pc),a2
00016A78 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016A7C 315A 0038                  		move.w	(a2)+,$38(a0)
00016A80 315A 0030                  		move.w	(a2)+,$30(a0)
00016A84 214A 003C                  		move.l	a2,$3C(a0)
00016A88 0241 000F                  		andi.w	#$F,d1
00016A8C E549                       		lsl.w	#2,d1
00016A8E 1141 0038                  		move.b	d1,$38(a0)
00016A92 117C 0004 003A             		move.b	#4,$3A(a0)
00016A98 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016A9C 6700                       		beq.s	loc_16356
00016A9E 117C 0001 003B             		move.b	#1,$3B(a0)
00016AA4 4428 003A                  		neg.b	$3A(a0)
00016AA8 7200                       		moveq	#0,d1
00016AAA 1228 0038                  		move.b	$38(a0),d1
00016AAE D228 003A                  		add.b	$3A(a0),d1
00016AB2 B228 0039                  		cmp.b	$39(a0),d1
00016AB6 6500                       		bcs.s	loc_16352
00016AB8 1001                       		move.b	d1,d0
00016ABA 7200                       		moveq	#0,d1
00016ABC 4A00                       		tst.b	d0
00016ABE 6A00                       		bpl.s	loc_16352
00016AC0 1228 0039                  		move.b	$39(a0),d1
00016AC4 5901                       		subq.b	#4,d1
00016AC6                            
00016AC6                            loc_16352:
00016AC6 1141 0038                  		move.b	d1,$38(a0)
00016ACA                            
00016ACA                            loc_16356:
00016ACA 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016AD0 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016AD6 4A41                       		tst.w	d1
00016AD8 6600                       		bne.s	loc_1636C
00016ADA 117C 0001 001C             		move.b	#1,$1C(a0)
00016AE0                            
00016AE0                            loc_1636C:
00016AE0 0C41 0008                  		cmpi.w	#8,d1
00016AE4 6600                       		bne.s	loc_16378
00016AE6 117C 0000 001C             		move.b	#0,$1C(a0)
00016AEC                            
00016AEC                            loc_16378:
00016AEC 6100 C0D6                  		bsr.w	Obj63_ChangeDir
00016AF0 6000 0000                  		bra.w	loc_163D8
00016AF4                            ; ===========================================================================
00016AF4                            
00016AF4                            loc_16380:				; XREF: Obj6F_Main
00016AF4 1140 002F                  		move.b	d0,$2F(a0)
00016AF8 0240 007F                  		andi.w	#$7F,d0
00016AFC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016B00 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016B06 6700                       		beq.s	loc_1639A
00016B08 4EF9 0000 DCC0             		jmp	DeleteObject
00016B0E                            ; ===========================================================================
00016B0E                            
00016B0E                            loc_1639A:
00016B0E D040                       		add.w	d0,d0
00016B10 0240 001E                  		andi.w	#$1E,d0
00016B14 0640 0080                  		addi.w	#$80,d0
00016B18 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016B1E D4F2 0000                  		adda.w	(a2,d0.w),a2
00016B22 321A                       		move.w	(a2)+,d1
00016B24 2248                       		movea.l	a0,a1
00016B26 6000                       		bra.s	Obj6F_LoadPform
00016B28                            ; ===========================================================================
00016B28                            
00016B28                            Obj6F_Loop:
00016B28 4EB9 0000 E10A             		jsr	SingleObjLoad
00016B2E 6600                       		bne.s	loc_163D0
00016B30                            
00016B30                            Obj6F_LoadPform:			; XREF: loc_1639A
00016B30 12BC 006F                  		move.b	#$6F,0(a1)
00016B34 335A 0008                  		move.w	(a2)+,8(a1)
00016B38 335A 000C                  		move.w	(a2)+,$C(a1)
00016B3C 301A                       		move.w	(a2)+,d0
00016B3E 1340 0028                  		move.b	d0,$28(a1)
00016B42                            
00016B42                            loc_163D0:
00016B42 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016B46                            
00016B46 588F                       		addq.l	#4,sp
00016B48 4E75                       		rts	
00016B4A                            ; ===========================================================================
00016B4A                            
00016B4A                            loc_163D8:				; XREF: Obj6F_Index
00016B4A 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016B50 4EB9 0000 AD44             		jsr	AnimateSprite
00016B56 4A28 001A                  		tst.b	$1A(a0)
00016B5A 6600                       		bne.s	loc_16404
00016B5C 3F28 0008                  		move.w	8(a0),-(sp)
00016B60 6100 0000                  		bsr.w	loc_16424
00016B64 323C 001B                  		move.w	#$1B,d1
00016B68 343C 0007                  		move.w	#7,d2
00016B6C 3602                       		move.w	d2,d3
00016B6E 5243                       		addq.w	#1,d3
00016B70 381F                       		move.w	(sp)+,d4
00016B72 6000 94E0                  		bra.w	SolidObject
00016B76                            ; ===========================================================================
00016B76                            
00016B76                            loc_16404:
00016B76 0828 0003 0022             		btst	#3,$22(a0)
00016B7C 6700                       		beq.s	loc_16420
00016B7E 43F8 D000                  		lea	($FFFFD000).w,a1
00016B82 08A9 0003 0022             		bclr	#3,$22(a1)
00016B88 08A8 0003 0022             		bclr	#3,$22(a0)
00016B8E 4228 0025                  		clr.b	$25(a0)
00016B92                            
00016B92                            loc_16420:
00016B92 6000 0002                  		bra.w	*+4
00016B96                            
00016B96                            loc_16424:
00016B96 3028 0008                  		move.w	8(a0),d0
00016B9A B068 0034                  		cmp.w	$34(a0),d0
00016B9E 6600                       		bne.s	loc_16484
00016BA0 3028 000C                  		move.w	$C(a0),d0
00016BA4 B068 0036                  		cmp.w	$36(a0),d0
00016BA8 6600                       		bne.s	loc_16484
00016BAA 7200                       		moveq	#0,d1
00016BAC 1228 0038                  		move.b	$38(a0),d1
00016BB0 D228 003A                  		add.b	$3A(a0),d1
00016BB4 B228 0039                  		cmp.b	$39(a0),d1
00016BB8 6500                       		bcs.s	loc_16456
00016BBA 1001                       		move.b	d1,d0
00016BBC 7200                       		moveq	#0,d1
00016BBE 4A00                       		tst.b	d0
00016BC0 6A00                       		bpl.s	loc_16456
00016BC2 1228 0039                  		move.b	$39(a0),d1
00016BC6 5901                       		subq.b	#4,d1
00016BC8                            
00016BC8                            loc_16456:
00016BC8 1141 0038                  		move.b	d1,$38(a0)
00016BCC 2268 003C                  		movea.l	$3C(a0),a1
00016BD0 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016BD6 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016BDC 4A41                       		tst.w	d1
00016BDE 6600                       		bne.s	loc_16474
00016BE0 117C 0001 001C             		move.b	#1,$1C(a0)
00016BE6                            
00016BE6                            loc_16474:
00016BE6 0C41 0008                  		cmpi.w	#8,d1
00016BEA 6600                       		bne.s	loc_16480
00016BEC 117C 0000 001C             		move.b	#0,$1C(a0)
00016BF2                            
00016BF2                            loc_16480:
00016BF2 6100 BFD0                  		bsr.w	Obj63_ChangeDir
00016BF6                            
00016BF6                            loc_16484:
00016BF6 4EF9 0000 DC5E             		jmp	SpeedToPos
00016BFC                            ; ===========================================================================
00016BFC                            Ani_obj6F:
00016BFC                            	include "_anim\obj6F.asm"
00016BFC                            ; ---------------------------------------------------------------------------
00016BFC                            ; Animation script - platform on conveyor belt (SBZ)
00016BFC                            ; ---------------------------------------------------------------------------
00016BFC 0000                       		dc.w byte_1648E-Ani_obj6F
00016BFE 0000                       		dc.w byte_164A2-Ani_obj6F
00016C00 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016C0D 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016C14 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016C18 00                         		even
00016C18 00                         		even
00016C18                            
00016C18 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016C1E 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016C24 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016C38 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016C4C 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016C60 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016C74 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016C88 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016C9C                            ; ===========================================================================
00016C9C                            ; ---------------------------------------------------------------------------
00016C9C                            ; Object 70 - large girder block (SBZ)
00016C9C                            ; ---------------------------------------------------------------------------
00016C9C                            
00016C9C                            Obj70:					; XREF: Obj_Index
00016C9C 7000                       		moveq	#0,d0
00016C9E 1028 0024                  		move.b	$24(a0),d0
00016CA2 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016CA6 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016CAA                            ; ===========================================================================
00016CAA 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016CAC 0000                       		dc.w Obj70_Action-Obj70_Index
00016CAE                            ; ===========================================================================
00016CAE                            
00016CAE                            Obj70_Main:				; XREF: Obj70_Index
00016CAE 5428 0024                  		addq.b	#2,$24(a0)
00016CB2 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016CBA 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016CC0 0028 0004 0001             		ori.b	#4,1(a0)
00016CC6 117C 0004 0018             		move.b	#4,$18(a0)
00016CCC 117C 0060 0019             		move.b	#$60,$19(a0)
00016CD2 117C 0018 0016             		move.b	#$18,$16(a0)
00016CD8 3168 0008 0032             		move.w	8(a0),$32(a0)
00016CDE 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016CE4 6100 0000                  		bsr.w	Obj70_Move2
00016CE8                            
00016CE8                            Obj70_Action:				; XREF: Obj70_Index
00016CE8 3F28 0008                  		move.w	8(a0),-(sp)
00016CEC 4A68 003A                  		tst.w	$3A(a0)
00016CF0 6700                       		beq.s	Obj70_Move
00016CF2 5368 003A                  		subq.w	#1,$3A(a0)
00016CF6 6600                       		bne.s	Obj70_Solid
00016CF8                            
00016CF8                            Obj70_Move:
00016CF8 4EB9 0000 DC5E             		jsr	SpeedToPos
00016CFE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016D02 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016D04 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016D08                            
00016D08                            Obj70_Solid:
00016D08 381F                       		move.w	(sp)+,d4
00016D0A 4A28 0001                  		tst.b	1(a0)
00016D0E 6A00                       		bpl.s	Obj70_ChkDel
00016D10 7200                       		moveq	#0,d1
00016D12 1228 0019                  		move.b	$19(a0),d1
00016D16 0641 000B                  		addi.w	#$B,d1
00016D1A 7400                       		moveq	#0,d2
00016D1C 1428 0016                  		move.b	$16(a0),d2
00016D20 3602                       		move.w	d2,d3
00016D22 5243                       		addq.w	#1,d3
00016D24 6100 932E                  		bsr.w	SolidObject
00016D28                            
00016D28                            Obj70_ChkDel:
00016D28 3028 0032                  		move.w	$32(a0),d0
00016D2C 0240 FF80                  		andi.w	#$FF80,d0
00016D30 3238 F700                  		move.w	($FFFFF700).w,d1
00016D34 0441 0080                  		subi.w	#$80,d1
00016D38 0241 FF80                  		andi.w	#$FF80,d1
00016D3C 9041                       		sub.w	d1,d0
00016D3E 0C40 0280                  		cmpi.w	#$280,d0
00016D42 6200                       		bhi.s	Obj70_Delete
00016D44 4EF9 0000 DC84             		jmp	DisplaySprite
00016D4A                            ; ===========================================================================
00016D4A                            
00016D4A                            Obj70_Delete:
00016D4A 4EF9 0000 DCC0             		jmp	DeleteObject
00016D50                            ; ===========================================================================
00016D50                            
00016D50                            Obj70_Move2:				; XREF: Obj70_Main
00016D50 1028 0038                  		move.b	$38(a0),d0
00016D54 0240 0018                  		andi.w	#$18,d0
00016D58 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016D5E 43F1 0000                  		lea	(a1,d0.w),a1
00016D62 3159 0010                  		move.w	(a1)+,$10(a0)
00016D66 3159 0012                  		move.w	(a1)+,$12(a0)
00016D6A 3159 0034                  		move.w	(a1)+,$34(a0)
00016D6E 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016D72 317C 0007 003A             		move.w	#7,$3A(a0)
00016D78 4E75                       		rts	
00016D7A                            ; ===========================================================================
00016D7A 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016D82 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016D8A FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016D92 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016D9A                            ; ---------------------------------------------------------------------------
00016D9A                            ; Sprite mappings - large girder block (SBZ)
00016D9A                            ; ---------------------------------------------------------------------------
00016D9A                            Map_obj70:
00016D9A                            	include "_maps\obj70.asm"
00016D9A                            ; ---------------------------------------------------------------------------
00016D9A                            ; Sprite mappings - large girder block (SBZ)
00016D9A                            ; ---------------------------------------------------------------------------
00016D9A 0000                       		dc.w byte_1662A-Map_obj70
00016D9C 0C                         byte_1662A:	dc.b $C
00016D9D E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016DA2 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016DA7 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016DAC 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016DB1 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016DB6 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016DBB E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016DC0 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016DC5 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016DCA 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016DCF E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016DD4 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016DDA 00                         		even
00016DDA 00                         		even
00016DDA                            
00016DDA                            ; ===========================================================================
00016DDA                            ; ---------------------------------------------------------------------------
00016DDA                            ; Object 72 - teleporter (SBZ)
00016DDA                            ; ---------------------------------------------------------------------------
00016DDA                            
00016DDA                            Obj72:					; XREF: Obj_Index
00016DDA 7000                       		moveq	#0,d0
00016DDC 1028 0024                  		move.b	$24(a0),d0
00016DE0 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016DE4 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016DE8 3028 0008                  		move.w	8(a0),d0
00016DEC 0240 FF80                  		andi.w	#$FF80,d0
00016DF0 3238 F700                  		move.w	($FFFFF700).w,d1
00016DF4 0441 0080                  		subi.w	#$80,d1
00016DF8 0241 FF80                  		andi.w	#$FF80,d1
00016DFC 9041                       		sub.w	d1,d0
00016DFE 0C40 0280                  		cmpi.w	#$280,d0
00016E02 6200                       		bhi.s	Obj72_Delete
00016E04 4E75                       		rts	
00016E06                            ; ===========================================================================
00016E06                            
00016E06                            Obj72_Delete:
00016E06 4EF9 0000 DCC0             		jmp	DeleteObject
00016E0C                            ; ===========================================================================
00016E0C 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016E0E 0000                       		dc.w loc_166C8-Obj72_Index
00016E10 0000                       		dc.w loc_1675E-Obj72_Index
00016E12 0000                       		dc.w loc_16798-Obj72_Index
00016E14                            ; ===========================================================================
00016E14                            
00016E14                            Obj72_Main:				; XREF: Obj72_Index
00016E14 5428 0024                  		addq.b	#2,$24(a0)
00016E18 1028 0028                  		move.b	$28(a0),d0
00016E1C D040                       		add.w	d0,d0
00016E1E 0240 001E                  		andi.w	#$1E,d0
00016E22 45FA 0000                  		lea	Obj72_Data(pc),a2
00016E26 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016E2A 315A 003A                  		move.w	(a2)+,$3A(a0)
00016E2E 214A 003C                  		move.l	a2,$3C(a0)
00016E32 315A 0036                  		move.w	(a2)+,$36(a0)
00016E36 315A 0038                  		move.w	(a2)+,$38(a0)
00016E3A                            
00016E3A                            loc_166C8:				; XREF: Obj72_Index
00016E3A 43F8 D000                  		lea	($FFFFD000).w,a1
00016E3E 3029 0008                  		move.w	8(a1),d0
00016E42 9068 0008                  		sub.w	8(a0),d0
00016E46 0828 0000 0022             		btst	#0,$22(a0)
00016E4C 6700                       		beq.s	loc_166E0
00016E4E 0640 000F                  		addi.w	#$F,d0
00016E52                            
00016E52                            loc_166E0:
00016E52 0C40 0010                  		cmpi.w	#$10,d0
00016E56 6400                       		bcc.s	locret_1675C
00016E58 3229 000C                  		move.w	$C(a1),d1
00016E5C 9268 000C                  		sub.w	$C(a0),d1
00016E60 0641 0020                  		addi.w	#$20,d1
00016E64 0C41 0040                  		cmpi.w	#$40,d1
00016E68 6400                       		bcc.s	locret_1675C
00016E6A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016E6E 6600                       		bne.s	locret_1675C
00016E70 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016E76 6600                       		bne.s	loc_1670E
00016E78 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016E7E 6500                       		bcs.s	locret_1675C
00016E80                            
00016E80                            loc_1670E:
00016E80 5428 0024                  		addq.b	#2,$24(a0)
00016E84 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016E8A 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016E90 337C 0800 0014             		move.w	#$800,$14(a1)
00016E96 337C 0000 0010             		move.w	#0,$10(a1)
00016E9C 337C 0000 0012             		move.w	#0,$12(a1)
00016EA2 08A8 0005 0022             		bclr	#5,$22(a0)
00016EA8 08A9 0005 0022             		bclr	#5,$22(a1)
00016EAE 08E9 0001 0022             		bset	#1,$22(a1)
00016EB4 3368 0008 0008             		move.w	8(a0),8(a1)
00016EBA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016EC0 4228 0032                  		clr.b	$32(a0)
00016EC4 303C 00BE                  		move.w	#$BE,d0
00016EC8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016ECE                            
00016ECE                            locret_1675C:
00016ECE 4E75                       		rts	
00016ED0                            ; ===========================================================================
00016ED0                            
00016ED0                            loc_1675E:				; XREF: Obj72_Index
00016ED0 43F8 D000                  		lea	($FFFFD000).w,a1
00016ED4 1028 0032                  		move.b	$32(a0),d0
00016ED8 5428 0032                  		addq.b	#2,$32(a0)
00016EDC 4EB9 0000 2C64             		jsr	(CalcSine).l
00016EE2 EA40                       		asr.w	#5,d0
00016EE4 3428 000C                  		move.w	$C(a0),d2
00016EE8 9440                       		sub.w	d0,d2
00016EEA 3342 000C                  		move.w	d2,$C(a1)
00016EEE 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016EF4 6600                       		bne.s	locret_16796
00016EF6 6100 0000                  		bsr.w	sub_1681C
00016EFA 5428 0024                  		addq.b	#2,$24(a0)
00016EFE 303C 00BC                  		move.w	#$BC,d0
00016F02 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play teleport sound
00016F08                            
00016F08                            locret_16796:
00016F08 4E75                       		rts	
00016F0A                            ; ===========================================================================
00016F0A                            
00016F0A                            loc_16798:				; XREF: Obj72_Index
00016F0A 588F                       		addq.l	#4,sp
00016F0C 43F8 D000                  		lea	($FFFFD000).w,a1
00016F10 5328 002E                  		subq.b	#1,$2E(a0)
00016F14 6A00                       		bpl.s	loc_167DA
00016F16 3368 0036 0008             		move.w	$36(a0),8(a1)
00016F1C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016F22 7200                       		moveq	#0,d1
00016F24 1228 003A                  		move.b	$3A(a0),d1
00016F28 5801                       		addq.b	#4,d1
00016F2A B228 003B                  		cmp.b	$3B(a0),d1
00016F2E 6500                       		bcs.s	loc_167C2
00016F30 7200                       		moveq	#0,d1
00016F32 6000                       		bra.s	loc_16800
00016F34                            ; ===========================================================================
00016F34                            
00016F34                            loc_167C2:
00016F34 1141 003A                  		move.b	d1,$3A(a0)
00016F38 2468 003C                  		movea.l	$3C(a0),a2
00016F3C 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016F42 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016F48 6000 0000                  		bra.w	sub_1681C
00016F4C                            ; ===========================================================================
00016F4C                            
00016F4C                            loc_167DA:
00016F4C 2429 0008                  		move.l	8(a1),d2
00016F50 2629 000C                  		move.l	$C(a1),d3
00016F54 3029 0010                  		move.w	$10(a1),d0
00016F58 48C0                       		ext.l	d0
00016F5A E180                       		asl.l	#8,d0
00016F5C D480                       		add.l	d0,d2
00016F5E 3029 0012                  		move.w	$12(a1),d0
00016F62 48C0                       		ext.l	d0
00016F64 E180                       		asl.l	#8,d0
00016F66 D680                       		add.l	d0,d3
00016F68 2342 0008                  		move.l	d2,8(a1)
00016F6C 2343 000C                  		move.l	d3,$C(a1)
00016F70 4E75                       		rts	
00016F72                            ; ===========================================================================
00016F72                            
00016F72                            loc_16800:
00016F72 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016F78 4228 0024                  		clr.b	$24(a0)
00016F7C 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016F80 337C 0000 0010             		move.w	#0,$10(a1)
00016F86 337C 0200 0012             		move.w	#$200,$12(a1)
00016F8C 4E75                       		rts	
00016F8E                            
00016F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F8E                            
00016F8E                            
00016F8E                            sub_1681C:
00016F8E 7000                       		moveq	#0,d0
00016F90 343C 1000                  		move.w	#$1000,d2
00016F94 3028 0036                  		move.w	$36(a0),d0
00016F98 9069 0008                  		sub.w	8(a1),d0
00016F9C 6C00                       		bge.s	loc_16830
00016F9E 4440                       		neg.w	d0
00016FA0 4442                       		neg.w	d2
00016FA2                            
00016FA2                            loc_16830:
00016FA2 7200                       		moveq	#0,d1
00016FA4 363C 1000                  		move.w	#$1000,d3
00016FA8 3228 0038                  		move.w	$38(a0),d1
00016FAC 9269 000C                  		sub.w	$C(a1),d1
00016FB0 6C00                       		bge.s	loc_16844
00016FB2 4441                       		neg.w	d1
00016FB4 4443                       		neg.w	d3
00016FB6                            
00016FB6                            loc_16844:
00016FB6 B240                       		cmp.w	d0,d1
00016FB8 6500                       		bcs.s	loc_1687A
00016FBA 7200                       		moveq	#0,d1
00016FBC 3228 0038                  		move.w	$38(a0),d1
00016FC0 9269 000C                  		sub.w	$C(a1),d1
00016FC4 4841                       		swap	d1
00016FC6 83C3                       		divs.w	d3,d1
00016FC8 7000                       		moveq	#0,d0
00016FCA 3028 0036                  		move.w	$36(a0),d0
00016FCE 9069 0008                  		sub.w	8(a1),d0
00016FD2 6700                       		beq.s	loc_16866
00016FD4 4840                       		swap	d0
00016FD6 81C1                       		divs.w	d1,d0
00016FD8                            
00016FD8                            loc_16866:
00016FD8 3340 0010                  		move.w	d0,$10(a1)
00016FDC 3343 0012                  		move.w	d3,$12(a1)
00016FE0 4A41                       		tst.w	d1
00016FE2 6A00                       		bpl.s	loc_16874
00016FE4 4441                       		neg.w	d1
00016FE6                            
00016FE6                            loc_16874:
00016FE6 3141 002E                  		move.w	d1,$2E(a0)
00016FEA 4E75                       		rts	
00016FEC                            ; ===========================================================================
00016FEC                            
00016FEC                            loc_1687A:
00016FEC 7000                       		moveq	#0,d0
00016FEE 3028 0036                  		move.w	$36(a0),d0
00016FF2 9069 0008                  		sub.w	8(a1),d0
00016FF6 4840                       		swap	d0
00016FF8 81C2                       		divs.w	d2,d0
00016FFA 7200                       		moveq	#0,d1
00016FFC 3228 0038                  		move.w	$38(a0),d1
00017000 9269 000C                  		sub.w	$C(a1),d1
00017004 6700                       		beq.s	loc_16898
00017006 4841                       		swap	d1
00017008 83C0                       		divs.w	d0,d1
0001700A                            
0001700A                            loc_16898:
0001700A 3341 0012                  		move.w	d1,$12(a1)
0001700E 3342 0010                  		move.w	d2,$10(a1)
00017012 4A40                       		tst.w	d0
00017014 6A00                       		bpl.s	loc_168A6
00017016 4440                       		neg.w	d0
00017018                            
00017018                            loc_168A6:
00017018 3140 002E                  		move.w	d0,$2E(a0)
0001701C 4E75                       		rts	
0001701E                            ; End of function sub_1681C
0001701E                            
0001701E                            ; ===========================================================================
0001701E 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017024 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
0001702A 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
0001702E 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017034 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001703A 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00017040 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017046 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001704C 0884 0298 0894             		dc.w $884, $298, $894
00017052 0270 0894 0190             		dc.w $270, $894, $190
00017058 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0001705E 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017064 1184 0498 1158             		dc.w $1184, $498, $1158
0001706A 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00017070 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017076 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001707C 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017082 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017088 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001708E FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017094 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001709A FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000170A0 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000170A6                            ; ===========================================================================
000170A6                            ; ---------------------------------------------------------------------------
000170A6                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000170A6                            ; ---------------------------------------------------------------------------
000170A6                            
000170A6                            Obj78:					; XREF: Obj_Index
000170A6 7000                       		moveq	#0,d0
000170A8 1028 0024                  		move.b	$24(a0),d0
000170AC 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000170B0 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000170B4                            ; ===========================================================================
000170B4 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000170B6 0000                       		dc.w Obj78_Action-Obj78_Index
000170B8 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000170BA 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000170BC 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000170BE 0000                       		dc.w Obj78_Delete-Obj78_Index
000170C0 0000                       		dc.w loc_16CC0-Obj78_Index
000170C2                            ; ===========================================================================
000170C2                            
000170C2                            locret_16950:
000170C2 4E75                       		rts	
000170C4                            ; ===========================================================================
000170C4                            
000170C4                            Obj78_Main:				; XREF: Obj78_Index
000170C4 117C 0007 0016             		move.b	#7,$16(a0)
000170CA 117C 0008 0017             		move.b	#8,$17(a0)
000170D0 4EB9 0000 DC32             		jsr	ObjectFall
000170D6 4EBA E4A6                  		jsr	ObjHitFloor
000170DA 4A41                       		tst.w	d1
000170DC 6AE4                       		bpl.s	locret_16950
000170DE D368 000C                  		add.w	d1,$C(a0)
000170E2 4268 0012                  		clr.w	$12(a0)
000170E6 5428 0024                  		addq.b	#2,$24(a0)
000170EA 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000170F2 317C 22B0 0002             		move.w	#$22B0,2(a0)
000170F8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000170FE 6700                       		beq.s	loc_16996
00017100 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00017106                            
00017106                            loc_16996:
00017106 0228 0003 0001             		andi.b	#3,1(a0)
0001710C 0028 0004 0001             		ori.b	#4,1(a0)
00017112 1168 0001 0022             		move.b	1(a0),$22(a0)
00017118 117C 0004 0018             		move.b	#4,$18(a0)
0001711E 117C 0008 0019             		move.b	#8,$19(a0)
00017124 117C 000B 0020             		move.b	#$B,$20(a0)
0001712A 3428 0008                  		move.w	8(a0),d2
0001712E 7A0C                       		moveq	#$C,d5
00017130 0828 0000 0022             		btst	#0,$22(a0)
00017136 6700                       		beq.s	loc_169CA
00017138 4445                       		neg.w	d5
0001713A                            
0001713A                            loc_169CA:
0001713A 1C3C 0004                  		move.b	#4,d6
0001713E 7600                       		moveq	#0,d3
00017140 7804                       		moveq	#4,d4
00017142 2448                       		movea.l	a0,a2
00017144 7202                       		moveq	#2,d1
00017146                            
00017146                            Obj78_LoadBody:
00017146 4EB9 0000 E120             		jsr	SingleObjLoad2
0001714C 6600                       		bne.s	Obj78_QuitLoad
0001714E 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017152 1346 0024                  		move.b	d6,$24(a1)
00017156 5406                       		addq.b	#2,d6
00017158 2368 0004 0004             		move.l	4(a0),4(a1)
0001715E 3368 0002 0002             		move.w	2(a0),2(a1)
00017164 137C 0005 0018             		move.b	#5,$18(a1)
0001716A 137C 0008 0019             		move.b	#8,$19(a1)
00017170 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017176 D445                       		add.w	d5,d2
00017178 3342 0008                  		move.w	d2,8(a1)
0001717C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017182 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017188 1368 0022 0001             		move.b	$22(a0),1(a1)
0001718E 137C 0008 001A             		move.b	#8,$1A(a1)
00017194 234A 003C                  		move.l	a2,$3C(a1)
00017198 1344 003C                  		move.b	d4,$3C(a1)
0001719C 5804                       		addq.b	#4,d4
0001719E 2449                       		movea.l	a1,a2
000171A0                            
000171A0                            Obj78_QuitLoad:
000171A0 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
000171A4                            
000171A4 117C 0007 002A             		move.b	#7,$2A(a0)
000171AA 4228 003C                  		clr.b	$3C(a0)
000171AE                            
000171AE                            Obj78_Action:				; XREF: Obj78_Index
000171AE 4A28 0022                  		tst.b	$22(a0)
000171B2 6B00 0000                  		bmi.w	loc_16C96
000171B6 7000                       		moveq	#0,d0
000171B8 1028 0025                  		move.b	$25(a0),d0
000171BC 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000171C0 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000171C4 1228 002B                  		move.b	$2B(a0),d1
000171C8 6A00                       		bpl.s	Obj78_Display
000171CA 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000171D0 1028 0026                  		move.b	$26(a0),d0
000171D4 0240 007F                  		andi.w	#$7F,d0
000171D8 5828 0026                  		addq.b	#4,$26(a0)
000171DC 1031 0000                  		move.b	(a1,d0.w),d0
000171E0 6A00                       		bpl.s	Obj78_AniHead
000171E2 08A8 0007 002B             		bclr	#7,$2B(a0)
000171E8 6000                       		bra.s	Obj78_Display
000171EA                            ; ===========================================================================
000171EA                            
000171EA                            Obj78_AniHead:
000171EA 0201 0010                  		andi.b	#$10,d1
000171EE D001                       		add.b	d1,d0
000171F0 1140 001A                  		move.b	d0,$1A(a0)
000171F4                            
000171F4                            Obj78_Display:
000171F4 3028 0008                  		move.w	8(a0),d0
000171F8 0240 FF80                  		andi.w	#$FF80,d0
000171FC 3238 F700                  		move.w	($FFFFF700).w,d1
00017200 0441 0080                  		subi.w	#$80,d1
00017204 0241 FF80                  		andi.w	#$FF80,d1
00017208 9041                       		sub.w	d1,d0
0001720A 0C40 0280                  		cmpi.w	#$280,d0
0001720E 6200 0000                  		bhi.w	Obj78_ChkGone
00017212 4EF9 0000 DC84             		jmp	DisplaySprite
00017218                            ; ===========================================================================
00017218                            
00017218                            Obj78_ChkGone:
00017218 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001721C 7000                       		moveq	#0,d0
0001721E 1028 0023                  		move.b	$23(a0),d0
00017222 6700                       		beq.s	loc_16ABC
00017224 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001722A                            
0001722A                            loc_16ABC:
0001722A 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017230 4E75                       		rts	
00017232                            ; ===========================================================================
00017232                            
00017232                            Obj78_Delete:				; XREF: Obj78_Index
00017232 4EF9 0000 DCC0             		jmp	DeleteObject
00017238                            ; ===========================================================================
00017238 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0001723A 0000                       		dc.w loc_16B02-Obj78_Index2
0001723C                            ; ===========================================================================
0001723C                            
0001723C                            Obj78_Move:				; XREF: Obj78_Index2
0001723C 5328 002A                  		subq.b	#1,$2A(a0)
00017240 6B00                       		bmi.s	Obj78_Move2
00017242 4E75                       		rts	
00017244                            ; ===========================================================================
00017244                            
00017244                            Obj78_Move2:
00017244 5428 0025                  		addq.b	#2,$25(a0)
00017248 117C 0010 002A             		move.b	#$10,$2A(a0)
0001724E 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017254 317C 0040 0014             		move.w	#$40,$14(a0)
0001725A 0868 0004 002B             		bchg	#4,$2B(a0)
00017260 6600                       		bne.s	loc_16AFC
00017262 4268 0010                  		clr.w	$10(a0)
00017266 4468 0014                  		neg.w	$14(a0)
0001726A                            
0001726A                            loc_16AFC:
0001726A 08E8 0007 002B             		bset	#7,$2B(a0)
00017270                            
00017270                            loc_16B02:				; XREF: Obj78_Index2
00017270 5328 002A                  		subq.b	#1,$2A(a0)
00017274 6B00                       		bmi.s	loc_16B5E
00017276 2F28 0008                  		move.l	8(a0),-(sp)
0001727A 2428 0008                  		move.l	8(a0),d2
0001727E 3028 0010                  		move.w	$10(a0),d0
00017282 0828 0000 0022             		btst	#0,$22(a0)
00017288 6700                       		beq.s	loc_16B1E
0001728A 4440                       		neg.w	d0
0001728C                            
0001728C                            loc_16B1E:
0001728C 48C0                       		ext.l	d0
0001728E E180                       		asl.l	#8,d0
00017290 D480                       		add.l	d0,d2
00017292 2142 0008                  		move.l	d2,8(a0)
00017296 4EBA E2E6                  		jsr	ObjHitFloor
0001729A 241F                       		move.l	(sp)+,d2
0001729C 0C41 FFF8                  		cmpi.w	#-8,d1
000172A0 6D00                       		blt.s	loc_16B70
000172A2 0C41 000C                  		cmpi.w	#$C,d1
000172A6 6C00                       		bge.s	loc_16B70
000172A8 D368 000C                  		add.w	d1,$C(a0)
000172AC 4842                       		swap	d2
000172AE B468 0008                  		cmp.w	8(a0),d2
000172B2 6700                       		beq.s	locret_16B5C
000172B4 7000                       		moveq	#0,d0
000172B6 1028 003C                  		move.b	$3C(a0),d0
000172BA 5228 003C                  		addq.b	#1,$3C(a0)
000172BE 0228 000F 003C             		andi.b	#$F,$3C(a0)
000172C4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000172C8                            
000172C8                            locret_16B5C:
000172C8 4E75                       		rts	
000172CA                            ; ===========================================================================
000172CA                            
000172CA                            loc_16B5E:
000172CA 5528 0025                  		subq.b	#2,$25(a0)
000172CE 117C 0007 002A             		move.b	#7,$2A(a0)
000172D4 317C 0000 0010             		move.w	#0,$10(a0)
000172DA 4E75                       		rts	
000172DC                            ; ===========================================================================
000172DC                            
000172DC                            loc_16B70:
000172DC 2142 0008                  		move.l	d2,8(a0)
000172E0 0868 0000 0022             		bchg	#0,$22(a0)
000172E6 1168 0022 0001             		move.b	$22(a0),1(a0)
000172EC 7000                       		moveq	#0,d0
000172EE 1028 003C                  		move.b	$3C(a0),d0
000172F2 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000172F8 5228 003C                  		addq.b	#1,$3C(a0)
000172FC 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017302 4E75                       		rts	
00017304                            ; ===========================================================================
00017304                            
00017304                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017304 2268 003C                  		movea.l	$3C(a0),a1
00017308 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001730E 6A00                       		bpl.s	Obj78_BodySeg1
00017310 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017316 1028 0026                  		move.b	$26(a0),d0
0001731A 0240 007F                  		andi.w	#$7F,d0
0001731E 5828 0026                  		addq.b	#4,$26(a0)
00017322 4A31 0004                  		tst.b	4(a1,d0.w)
00017326 6A00                       		bpl.s	Obj78_AniBody
00017328 5828 0026                  		addq.b	#4,$26(a0)
0001732C                            
0001732C                            Obj78_AniBody:
0001732C 1031 0000                  		move.b	(a1,d0.w),d0
00017330 5000                       		addq.b	#8,d0
00017332 1140 001A                  		move.b	d0,$1A(a0)
00017336                            
00017336                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017336 2268 003C                  		movea.l	$3C(a0),a1
0001733A 4A28 0022                  		tst.b	$22(a0)
0001733E 6B00 0000                  		bmi.w	loc_16C90
00017342 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017348 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001734E 6700 0000                  		beq.w	loc_16C64
00017352 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017358 3029 0010                  		move.w	$10(a1),d0
0001735C D069 0014                  		add.w	$14(a1),d0
00017360 3140 0010                  		move.w	d0,$10(a0)
00017364 2428 0008                  		move.l	8(a0),d2
00017368 2602                       		move.l	d2,d3
0001736A 3028 0010                  		move.w	$10(a0),d0
0001736E 0828 0000 0022             		btst	#0,$22(a0)
00017374 6700                       		beq.s	loc_16C0C
00017376 4440                       		neg.w	d0
00017378                            
00017378                            loc_16C0C:
00017378 48C0                       		ext.l	d0
0001737A E180                       		asl.l	#8,d0
0001737C D480                       		add.l	d0,d2
0001737E 2142 0008                  		move.l	d2,8(a0)
00017382 4843                       		swap	d3
00017384 B668 0008                  		cmp.w	8(a0),d3
00017388 6700                       		beq.s	loc_16C64
0001738A 7000                       		moveq	#0,d0
0001738C 1028 003C                  		move.b	$3C(a0),d0
00017390 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017394 0C01 0080                  		cmpi.b	#-$80,d1
00017398 6600                       		bne.s	loc_16C50
0001739A 4843                       		swap	d3
0001739C 2143 0008                  		move.l	d3,8(a0)
000173A0 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000173A4 0868 0000 0022             		bchg	#0,$22(a0)
000173AA 1168 0022 0001             		move.b	$22(a0),1(a0)
000173B0 5228 003C                  		addq.b	#1,$3C(a0)
000173B4 0228 000F 003C             		andi.b	#$F,$3C(a0)
000173BA 6000                       		bra.s	loc_16C64
000173BC                            ; ===========================================================================
000173BC                            
000173BC                            loc_16C50:
000173BC 4881                       		ext.w	d1
000173BE D368 000C                  		add.w	d1,$C(a0)
000173C2 5228 003C                  		addq.b	#1,$3C(a0)
000173C6 0228 000F 003C             		andi.b	#$F,$3C(a0)
000173CC 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000173D0                            
000173D0                            loc_16C64:
000173D0 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000173D6 6700                       		beq.s	loc_16C90
000173D8 0C11 0027                  		cmpi.b	#$27,0(a1)
000173DC 6700                       		beq.s	loc_16C7C
000173DE 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000173E4 6600                       		bne.s	loc_16C82
000173E6                            
000173E6                            loc_16C7C:
000173E6 117C 000A 0024             		move.b	#$A,$24(a0)
000173EC                            
000173EC                            loc_16C82:
000173EC 4EF9 0000 DC84             		jmp	DisplaySprite
000173F2                            
000173F2                            ; ===========================================================================
000173F2 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000173FA                            ; ===========================================================================
000173FA                            
000173FA                            loc_16C90:
000173FA 08E9 0007 0022             		bset	#7,$22(a1)
00017400                            
00017400                            loc_16C96:
00017400 7000                       		moveq	#0,d0
00017402 1028 0024                  		move.b	$24(a0),d0
00017406 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001740A 0828 0000 0022             		btst	#0,$22(a0)
00017410 6700                       		beq.s	loc_16CAA
00017412 4440                       		neg.w	d0
00017414                            
00017414                            loc_16CAA:
00017414 3140 0010                  		move.w	d0,$10(a0)
00017418 317C FC00 0012             		move.w	#-$400,$12(a0)
0001741E 117C 000C 0024             		move.b	#$C,$24(a0)
00017424 0228 00F8 001A             		andi.b	#-8,$1A(a0)
0001742A                            
0001742A                            loc_16CC0:				; XREF: Obj78_Index
0001742A 4EB9 0000 DC32             		jsr	ObjectFall
00017430 4A68 0012                  		tst.w	$12(a0)
00017434 6B00                       		bmi.s	loc_16CE0
00017436 4EBA E146                  		jsr	ObjHitFloor
0001743A 4A41                       		tst.w	d1
0001743C 6A00                       		bpl.s	loc_16CE0
0001743E D368 000C                  		add.w	d1,$C(a0)
00017442 317C FC00 0012             		move.w	#-$400,$12(a0)
00017448                            
00017448                            loc_16CE0:
00017448 4A28 0001                  		tst.b	1(a0)
0001744C 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017450 4EF9 0000 DC84             		jmp	DisplaySprite
00017456                            ; ===========================================================================
00017456                            Ani_obj78:
00017456                            	include "_anim\obj78.asm"
00017456                            ; ---------------------------------------------------------------------------
00017456                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017456                            ; ---------------------------------------------------------------------------
00017456 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017466 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017476 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017486 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017496 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
000174A6 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000174B6 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000174C6 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000174D6                            	even
000174D6                            	even
000174D6                            
000174D6                            ; ---------------------------------------------------------------------------
000174D6                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000174D6                            ; ---------------------------------------------------------------------------
000174D6                            Map_obj78:
000174D6                            	include "_maps\obj78.asm"
000174D6                            ; ---------------------------------------------------------------------------
000174D6                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000174D6                            ; ---------------------------------------------------------------------------
000174D6 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000174DA 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000174DE 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000174E2 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000174E6 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000174EA 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000174EE 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000174F2 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000174F6 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000174FA 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000174FE 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017502 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017506 01                         byte_16D9E:	dc.b 1
00017507 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001750C 01                         byte_16DA4:	dc.b 1
0001750D F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017512 01                         byte_16DAA:	dc.b 1
00017513 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017518 01                         byte_16DB0:	dc.b 1
00017519 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001751E 01                         byte_16DB6:	dc.b 1
0001751F EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017524 01                         byte_16DBC:	dc.b 1
00017525 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001752A 01                         byte_16DC2:	dc.b 1
0001752B EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017530 01                         byte_16DC8:	dc.b 1
00017531 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017536 01                         byte_16DCE:	dc.b 1
00017537 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001753C 01                         byte_16DD4:	dc.b 1
0001753D F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017542 01                         byte_16DDA:	dc.b 1
00017543 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017548 01                         byte_16DE0:	dc.b 1
00017549 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001754E 01                         byte_16DE6:	dc.b 1
0001754F F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017554 01                         byte_16DEC:	dc.b 1
00017555 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001755A 01                         byte_16DF2:	dc.b 1
0001755B F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00017560 01                         byte_16DF8:	dc.b 1
00017561 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017566 01                         byte_16DFE:	dc.b 1
00017567 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001756C 01                         byte_16E04:	dc.b 1
0001756D F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017572 01                         byte_16E0A:	dc.b 1
00017573 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017578 01                         byte_16E10:	dc.b 1
00017579 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001757E 01                         byte_16E16:	dc.b 1
0001757F EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017584 01                         byte_16E1C:	dc.b 1
00017585 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001758A 01                         byte_16E22:	dc.b 1
0001758B EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017590 01                         byte_16E28:	dc.b 1
00017591 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017596                            		even
00017596                            		even
00017596                            
00017596                            ; ===========================================================================
00017596                            ; ---------------------------------------------------------------------------
00017596                            ; Object 79 - lamppost
00017596                            ; ---------------------------------------------------------------------------
00017596                            
00017596                            Obj79:					; XREF: Obj_Index
00017596 7000                       		moveq	#0,d0
00017598 1028 0024                  		move.b	$24(a0),d0
0001759C 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000175A0 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
000175A4 4EFA 8786                  		jmp	MarkObjGone
000175A8                            ; ===========================================================================
000175A8 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
000175AA 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
000175AC 0000                       		dc.w Obj79_AfterHit-Obj79_Index
000175AE 0000                       		dc.w Obj79_Twirl-Obj79_Index
000175B0                            ; ===========================================================================
000175B0                            
000175B0                            Obj79_Main:				; XREF: Obj79_Index
000175B0 5428 0024                  		addq.b	#2,$24(a0)
000175B4 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
000175BC 317C 07A0 0002             		move.w	#$7A0,2(a0)
000175C2 117C 0004 0001             		move.b	#4,1(a0)
000175C8 117C 0008 0019             		move.b	#8,$19(a0)
000175CE 117C 0005 0018             		move.b	#5,$18(a0)
000175D4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000175D8 7000                       		moveq	#0,d0
000175DA 1028 0023                  		move.b	$23(a0),d0
000175DE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000175E4 0832 0000 0002             		btst	#0,2(a2,d0.w)
000175EA 6600                       		bne.s	Obj79_RedLamp
000175EC 1238 FE30                  		move.b	($FFFFFE30).w,d1
000175F0 0201 007F                  		andi.b	#$7F,d1
000175F4 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000175F8 0202 007F                  		andi.b	#$7F,d2
000175FC B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000175FE 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017600                            
00017600                            Obj79_RedLamp:
00017600 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017606 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
0001760C 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017612 4E75                       		rts	
00017614                            ; ===========================================================================
00017614                            
00017614                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017614 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017618 6600 0000                  		bne.w	locret_16F90	; if yes, branch
0001761C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017620 6B00 0000                  		bmi.w	locret_16F90
00017624 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017628 0201 007F                  		andi.b	#$7F,d1
0001762C 1428 0028                  		move.b	$28(a0),d2
00017630 0202 007F                  		andi.b	#$7F,d2
00017634 B202                       		cmp.b	d2,d1
00017636 6500                       		bcs.s	Obj79_HitLamp
00017638 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001763C 7000                       		moveq	#0,d0
0001763E 1028 0023                  		move.b	$23(a0),d0
00017642 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017648 117C 0004 0024             		move.b	#4,$24(a0)
0001764E 117C 0003 001A             		move.b	#3,$1A(a0)
00017654 6000 0000                  		bra.w	locret_16F90
00017658                            ; ===========================================================================
00017658                            
00017658                            Obj79_HitLamp:
00017658 3038 D008                  		move.w	($FFFFD008).w,d0
0001765C 9068 0008                  		sub.w	8(a0),d0
00017660 5040                       		addq.w	#8,d0
00017662 0C40 0010                  		cmpi.w	#$10,d0
00017666 6400 0000                  		bcc.w	locret_16F90
0001766A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001766E 9068 000C                  		sub.w	$C(a0),d0
00017672 0640 0040                  		addi.w	#$40,d0
00017676 0C40 0068                  		cmpi.w	#$68,d0
0001767A 6400                       		bcc.s	locret_16F90
0001767C 303C 00A1                  		move.w	#$A1,d0
00017680 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017686 5428 0024                  		addq.b	#2,$24(a0)
0001768A 4EB9 0000 E10A             		jsr	SingleObjLoad
00017690 6600                       		bne.s	loc_16F76
00017692 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017696 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001769C 3368 0008 0030             		move.w	8(a0),$30(a1)
000176A2 3368 000C 0032             		move.w	$C(a0),$32(a1)
000176A8 0469 0018 0032             		subi.w	#$18,$32(a1)
000176AE 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000176B6 337C 07A0 0002             		move.w	#$7A0,2(a1)
000176BC 137C 0004 0001             		move.b	#4,1(a1)
000176C2 137C 0008 0019             		move.b	#8,$19(a1)
000176C8 137C 0004 0018             		move.b	#4,$18(a1)
000176CE 137C 0002 001A             		move.b	#2,$1A(a1)
000176D4 337C 0020 0036             		move.w	#$20,$36(a1)
000176DA                            
000176DA                            loc_16F76:
000176DA 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
000176E0 6100 0000                  		bsr.w	Obj79_StoreInfo
000176E4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000176E8 7000                       		moveq	#0,d0
000176EA 1028 0023                  		move.b	$23(a0),d0
000176EE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000176F4                            
000176F4                            locret_16F90:
000176F4 4E75                       		rts	
000176F6                            ; ===========================================================================
000176F6                            
000176F6                            Obj79_AfterHit:				; XREF: Obj79_Index
000176F6 4E75                       		rts	
000176F8                            ; ===========================================================================
000176F8                            
000176F8                            Obj79_Twirl:				; XREF: Obj79_Index
000176F8 5368 0036                  		subq.w	#1,$36(a0)
000176FC 6A00                       		bpl.s	loc_16FA0
000176FE 117C 0004 0024             		move.b	#4,$24(a0)
00017704                            
00017704                            loc_16FA0:
00017704 1028 0026                  		move.b	$26(a0),d0
00017708 0428 0010 0026             		subi.b	#$10,$26(a0)
0001770E 0400 0040                  		subi.b	#$40,d0
00017712 4EB9 0000 2C64             		jsr	(CalcSine).l
00017718 C3FC 0C00                  		muls.w	#$C00,d1
0001771C 4841                       		swap	d1
0001771E D268 0030                  		add.w	$30(a0),d1
00017722 3141 0008                  		move.w	d1,8(a0)
00017726 C1FC 0C00                  		muls.w	#$C00,d0
0001772A 4840                       		swap	d0
0001772C D068 0032                  		add.w	$32(a0),d0
00017730 3140 000C                  		move.w	d0,$C(a0)
00017734 4E75                       		rts	
00017736                            ; ===========================================================================
00017736                            ; ---------------------------------------------------------------------------
00017736                            ; Subroutine to	store information when you hit a lamppost
00017736                            ; ---------------------------------------------------------------------------
00017736                            
00017736                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017736 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001773C 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017742 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017748 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
0001774E 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017754 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0001775A 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017760 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017766 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
0001776C 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017772 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017778 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
0001777E 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017784 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001778A 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017790 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017796 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
0001779C 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000177A2 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000177A8 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000177AE 4E75                       		rts	
000177B0                            
000177B0                            ; ---------------------------------------------------------------------------
000177B0                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000177B0                            ; ---------------------------------------------------------------------------
000177B0                            
000177B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000177B0                            
000177B0                            
000177B0                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000177B0 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000177B6 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000177BC 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000177C2 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000177C8 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000177CE 4278 FE20                  		clr.w	($FFFFFE20).w
000177D2 4238 FE1B                  		clr.b	($FFFFFE1B).w
000177D6 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000177DC 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000177E2 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000177E6 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000177EC 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000177F2 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000177F8 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000177FE 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017804 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
0001780A 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017810 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017816 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
0001781C 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017822 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017828 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
0001782E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017834 6600                       		bne.s	loc_170E4
00017836 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001783C 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017842 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017848                            
00017848                            loc_170E4:
00017848 4A38 FE30                  		tst.b	($FFFFFE30).w
0001784C 6A00                       		bpl.s	locret_170F6
0001784E 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017852 0440 00A0                  		subi.w	#$A0,d0
00017856 31C0 F728                  		move.w	d0,($FFFFF728).w
0001785A                            
0001785A                            locret_170F6:
0001785A 4E75                       		rts	
0001785C                            ; End of function Obj79_LoadInfo
0001785C                            
0001785C                            ; ===========================================================================
0001785C                            ; ---------------------------------------------------------------------------
0001785C                            ; Sprite mappings - lamppost
0001785C                            ; ---------------------------------------------------------------------------
0001785C                            Map_obj79:
0001785C                            	include "_maps\obj79.asm"
0001785C                            ; ---------------------------------------------------------------------------
0001785C                            ; Sprite mappings - lamppost
0001785C                            ; ---------------------------------------------------------------------------
0001785C 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017860 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017864 06                         byte_17100:	dc.b 6
00017865 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001786A E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001786F F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017874 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017879 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
0001787E D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017883 04                         byte_1711F:	dc.b 4
00017884 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017889 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001788E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017893 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017898 02                         byte_17134:	dc.b 2
00017899 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001789E F801 0808 00               		dc.b $F8, 1, 8,	8, 0
000178A3 06                         byte_1713F:	dc.b 6
000178A4 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000178A9 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000178AE F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000178B3 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000178B8 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
000178BD D401 0808 00               		dc.b $D4, 1, 8,	8, 0
000178C2                            		even
000178C2                            		even
000178C2                            
000178C2                            ; ===========================================================================
000178C2                            ; ---------------------------------------------------------------------------
000178C2                            ; Object 7D - hidden points at the end of a level
000178C2                            ; ---------------------------------------------------------------------------
000178C2                            
000178C2                            Obj7D:					; XREF: Obj_Index
000178C2 7000                       		moveq	#0,d0
000178C4 1028 0024                  		move.b	$24(a0),d0
000178C8 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000178CC 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000178D0                            ; ===========================================================================
000178D0 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000178D2 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000178D4                            ; ===========================================================================
000178D4                            
000178D4                            Obj7D_Main:				; XREF: Obj7D_Index
000178D4 7410                       		moveq	#$10,d2
000178D6 3602                       		move.w	d2,d3
000178D8 D643                       		add.w	d3,d3
000178DA 43F8 D000                  		lea	($FFFFD000).w,a1
000178DE 3029 0008                  		move.w	8(a1),d0
000178E2 9068 0008                  		sub.w	8(a0),d0
000178E6 D042                       		add.w	d2,d0
000178E8 B043                       		cmp.w	d3,d0
000178EA 6400                       		bcc.s	Obj7D_ChkDel
000178EC 3229 000C                  		move.w	$C(a1),d1
000178F0 9268 000C                  		sub.w	$C(a0),d1
000178F4 D242                       		add.w	d2,d1
000178F6 B243                       		cmp.w	d3,d1
000178F8 6400                       		bcc.s	Obj7D_ChkDel
000178FA 4A78 FE08                  		tst.w	($FFFFFE08).w
000178FE 6600                       		bne.s	Obj7D_ChkDel
00017900 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017904 6600                       		bne.s	Obj7D_ChkDel
00017906 5428 0024                  		addq.b	#2,$24(a0)
0001790A 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017912 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017918 0028 0004 0001             		ori.b	#4,1(a0)
0001791E 117C 0000 0018             		move.b	#0,$18(a0)
00017924 117C 0010 0019             		move.b	#$10,$19(a0)
0001792A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017930 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017936 303C 00C9                  		move.w	#$C9,d0
0001793A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bonus sound
00017940 7000                       		moveq	#0,d0
00017942 1028 0028                  		move.b	$28(a0),d0
00017946 D040                       		add.w	d0,d0
00017948 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
0001794C 4EB9 0000 0000             		jsr	AddPoints
00017952                            
00017952                            Obj7D_ChkDel:
00017952 3028 0008                  		move.w	8(a0),d0
00017956 0240 FF80                  		andi.w	#$FF80,d0
0001795A 3238 F700                  		move.w	($FFFFF700).w,d1
0001795E 0441 0080                  		subi.w	#$80,d1
00017962 0241 FF80                  		andi.w	#$FF80,d1
00017966 9041                       		sub.w	d1,d0
00017968 0C40 0280                  		cmpi.w	#$280,d0
0001796C 6200                       		bhi.s	Obj7D_Delete
0001796E 4E75                       		rts	
00017970                            ; ===========================================================================
00017970                            
00017970                            Obj7D_Delete:
00017970 4EF9 0000 DCC0             		jmp	DeleteObject
00017976                            ; ===========================================================================
00017976 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017978 03E8                       		dc.w 1000
0001797A 0064                       		dc.w 100
0001797C 0001                       		dc.w 1
0001797E                            ; ===========================================================================
0001797E                            
0001797E                            Obj7D_DelayDel:				; XREF: Obj7D_Index
0001797E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017982 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017984 3028 0008                  		move.w	8(a0),d0
00017988 0240 FF80                  		andi.w	#-$80,d0
0001798C 3238 F700                  		move.w	($FFFFF700).w,d1
00017990 0441 0080                  		subi.w	#$80,d1
00017994 0241 FF80                  		andi.w	#-$80,d1
00017998 9041                       		sub.w	d1,d0
0001799A 0C40 0280                  		cmpi.w	#$280,d0
0001799E 6200                       		bhi.s	Obj7D_Delete2
000179A0 4EF9 0000 DC84             		jmp	DisplaySprite
000179A6                            ; ===========================================================================
000179A6                            
000179A6                            Obj7D_Delete2:
000179A6 4EF9 0000 DCC0             		jmp	DeleteObject
000179AC                            ; ===========================================================================
000179AC                            ; ---------------------------------------------------------------------------
000179AC                            ; Sprite mappings - hidden points at the end of	a level
000179AC                            ; ---------------------------------------------------------------------------
000179AC                            Map_obj7D:
000179AC                            	include "_maps\obj7D.asm"
000179AC                            ; ---------------------------------------------------------------------------
000179AC                            ; Sprite mappings - hidden points at the end of	a level
000179AC                            ; ---------------------------------------------------------------------------
000179AC 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
000179B0 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
000179B4 00                         byte_17250:	dc.b 0
000179B5 01                         byte_17251:	dc.b 1
000179B6 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
000179BB 01                         byte_17257:	dc.b 1
000179BC F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
000179C1 01                         byte_1725D:	dc.b 1
000179C2 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
000179C8 00                         		even
000179C8 00                         		even
000179C8                            
000179C8                            ; ===========================================================================
000179C8                            ; ---------------------------------------------------------------------------
000179C8                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
000179C8                            ; ---------------------------------------------------------------------------
000179C8                            
000179C8                            Obj8A:					; XREF: Obj_Index
000179C8 7000                       		moveq	#0,d0
000179CA 1028 0024                  		move.b	$24(a0),d0
000179CE 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000179D2 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000179D6                            ; ===========================================================================
000179D6 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000179D8 0000                       		dc.w Obj8A_Display-Obj8A_Index
000179DA                            ; ===========================================================================
000179DA                            
000179DA                            Obj8A_Main:				; XREF: Obj8A_Index
000179DA 5428 0024                  		addq.b	#2,$24(a0)
000179DE 317C 0120 0008             		move.w	#$120,8(a0)
000179E4 317C 00F0 000A             		move.w	#$F0,$A(a0)
000179EA 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000179F2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000179F8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000179FC 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017A00 117C 0000 0001             		move.b	#0,1(a0)
00017A06 117C 0000 0018             		move.b	#0,$18(a0)
00017A0C 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017A12 6600                       		bne.s	Obj8A_Display	; if not, branch
00017A14 317C 00A6 0002             		move.w	#$A6,2(a0)
00017A1A 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017A20 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017A24 6700                       		beq.s	Obj8A_Display	; if not, branch
00017A26 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017A2C 6600                       		bne.s	Obj8A_Display	; if not, branch
00017A2E 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017A34 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017A3A 4EF9 0000 DCC0             		jmp	DeleteObject
00017A40                            ; ===========================================================================
00017A40                            
00017A40                            Obj8A_Display:				; XREF: Obj8A_Index
00017A40 4EF9 0000 DC84             		jmp	DisplaySprite
00017A46                            ; ===========================================================================
00017A46                            ; ---------------------------------------------------------------------------
00017A46                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017A46                            ; ---------------------------------------------------------------------------
00017A46                            Map_obj8A:
00017A46                            	include "_maps\obj8A.asm"
00017A46                            ; ================================================================================
00017A46                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 20:55:17 GMT-0500 (Central Daylight Time)
00017A46                            ; ================================================================================
00017A46                            
00017A46                            DATAV02AM357W0A:
00017A46 0000 0000                  	dc.w DATAV02AM357W0A_0-DATAV02AM357W0A, DATAV02AM357W0A_1-DATAV02AM357W0A
00017A4A 0000 0000                  	dc.w DATAV02AM357W0A_2-DATAV02AM357W0A, DATAV02AM357W0A_3-DATAV02AM357W0A
00017A4E 0000 0000                  	dc.w DATAV02AM357W0A_4-DATAV02AM357W0A, DATAV02AM357W0A_5-DATAV02AM357W0A
00017A52 0000 0000                  	dc.w DATAV02AM357W0A_6-DATAV02AM357W0A, DATAV02AM357W0A_7-DATAV02AM357W0A
00017A56 0000 0000                  	dc.w DATAV02AM357W0A_8-DATAV02AM357W0A, DATAV02AM357W0A_9-DATAV02AM357W0A
00017A5A 0000                       	dc.w DATAV02AM357W0A_A-DATAV02AM357W0A
00017A5C 0E                         DATAV02AM357W0A_0: dc.b $E
00017A5D F805 802E 88               	dc.b $F8, $5, $80, $2E, $88
00017A62 F805 8026 98               	dc.b $F8, $5, $80, $26, $98
00017A67 F805 801A A8               	dc.b $F8, $5, $80, $1A, $A8
00017A6C F801 8046 B8               	dc.b $F8, $1, $80, $46, $B8
00017A71 F805 801E C0               	dc.b $F8, $5, $80, $1E, $C0
00017A76 F805 803E D8               	dc.b $F8, $5, $80, $3E, $D8
00017A7B F805 800E E8               	dc.b $F8, $5, $80, $E, $E8
00017A80 F805 8004 F8               	dc.b $F8, $5, $80, $4, $F8
00017A85 F809 8008 08               	dc.b $F8, $9, $80, $8, $8
00017A8A F805 802E 28               	dc.b $F8, $5, $80, $2E, $28
00017A8F F805 803E 38               	dc.b $F8, $5, $80, $3E, $38
00017A94 F805 8004 48               	dc.b $F8, $5, $80, $4, $48
00017A99 F805 805C 58               	dc.b $F8, $5, $80, $5C, $58
00017A9E F805 805C 68               	dc.b $F8, $5, $80, $5C, $68
00017AA3 10                         DATAV02AM357W0A_1: dc.b $10
00017AA4 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017AA9 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017AAE D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017AB3 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017AB8 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017ABD D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017AC2 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017AC7 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017ACC 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017AD1 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017AD6 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017ADB 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017AE0 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017AE5 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017AEA 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017AEF 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017AF4 0A                         DATAV02AM357W0A_2: dc.b $A
00017AF5 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017AFA D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017AFF D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017B04 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017B09 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017B0E D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017B13 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017B18 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017B1D 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017B22 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017B27 18                         DATAV02AM357W0A_3: dc.b $18
00017B28 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017B2D D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017B32 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017B37 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017B3C D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017B41 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017B46 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017B4B D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017B50 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017B55 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017B5A D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017B5F D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017B64 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017B69 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017B6E D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017B73 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017B78 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017B7D 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017B82 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017B87 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017B8C 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017B91 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017B96 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017B9B 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017BA0 14                         DATAV02AM357W0A_4: dc.b $14
00017BA1 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017BA6 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017BAB D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017BB0 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017BB5 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017BBA D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017BBF 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017BC4 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017BC9 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017BCE 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017BD3 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017BD8 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017BDD 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017BE2 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017BE7 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017BEC 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017BF1 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017BF6 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017BFB 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017C00 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017C05 1A                         DATAV02AM357W0A_5: dc.b $1A
00017C06 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017C0B D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017C10 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017C15 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017C1A D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017C1F D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017C24 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017C29 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017C2E D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017C33 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017C38 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017C3D D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017C42 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017C47 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017C4C 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017C51 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017C56 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017C5B 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017C60 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017C65 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017C6A 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017C6F 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017C74 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017C79 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017C7E 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017C83 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017C88 17                         DATAV02AM357W0A_6: dc.b $17
00017C89 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017C8E D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017C93 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017C98 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017C9D D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017CA2 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017CA7 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017CAC D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017CB1 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017CB6 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017CBB D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017CC0 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017CC5 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017CCA 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017CCF 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017CD4 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017CD9 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017CDE 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017CE3 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017CE8 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017CED 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017CF2 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017CF7 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017CFC 1F                         DATAV02AM357W0A_7: dc.b $1F
00017CFD D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017D02 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017D07 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017D0C D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017D11 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017D16 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017D1B D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017D20 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017D25 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017D2A D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017D2F D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017D34 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017D39 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017D3E 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017D43 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017D48 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017D4D 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017D52 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017D57 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017D5C 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017D61 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017D66 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017D6B 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017D70 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017D75 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017D7A 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017D7F 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017D84 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017D89 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017D8E 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017D93 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017D98 0F                         DATAV02AM357W0A_8: dc.b $F
00017D99 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017D9E F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017DA3 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017DA8 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017DAD F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017DB2 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017DB7 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017DBC F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017DC1 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017DC6 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017DCB F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017DD0 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017DD5 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017DDA F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017DDF F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017DE4 08                         DATAV02AM357W0A_9: dc.b $8
00017DE5 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017DEA 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017DEF 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017DF4 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017DF9 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017DFE 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017E03 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00017E08 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00017E0D 20                         DATAV02AM357W0A_A: dc.b $20
00017E0E ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00017E13 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00017E18 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00017E1D ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00017E22 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00017E27 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00017E2C ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00017E31 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00017E36 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00017E3B FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00017E40 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00017E45 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00017E4A FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00017E4F 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00017E54 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00017E59 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00017E5E 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00017E63 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00017E68 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00017E6D 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00017E72 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00017E77 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00017E7C 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00017E81 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00017E86 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00017E8B 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00017E90 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00017E95 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00017E9A 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00017E9F 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00017EA4 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00017EA9 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00017EAE                            	even
00017EAE                            	even
00017EAE                            
00017EAE                            ; ===========================================================================
00017EAE                            ; ---------------------------------------------------------------------------
00017EAE                            ; Object 3D - matthew boss - modified by GK89
00017EAE                            ; ---------------------------------------------------------------------------
00017EAE                            
00017EAE                            Obj3D:					; XREF: Obj_Index
00017EAE 7000                       		moveq	#0,d0
00017EB0 1028 0024                  		move.b	$24(a0),d0
00017EB4 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017EB8 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017EBC                            ; ===========================================================================
00017EBC 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017EBE 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017EC0 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017EC2 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017EC4                            
00017EC4 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017EC6 0401                       		dc.b 4,	1
00017EC8 0607                       		dc.b 6,	7
00017ECA                            ; ===========================================================================
00017ECA                            
00017ECA                            Obj3D_Main:				; XREF: Obj3D_Index
00017ECA 45F9 0001 7EC4             		lea	(Obj3D_ObjData).l,a2
00017ED0 2248                       		movea.l	a0,a1
00017ED2 7202                       		moveq	#2,d1
00017ED4 6000                       		bra.s	Obj3D_LoadBoss
00017ED6                            ; ===========================================================================
00017ED6                            
00017ED6                            Obj3D_Loop:
00017ED6 4EB9 0000 E120             		jsr	SingleObjLoad2
00017EDC 6600                       		bne.s	loc_17772
00017EDE                            
00017EDE                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017EDE 135A 0024                  		move.b	(a2)+,$24(a1)
00017EE2 12BC 003D                  		move.b	#$3D,0(a1)
00017EE6 3368 0008 0008             		move.w	8(a0),8(a1)
00017EEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017EF2 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017EFA 337C 0400 0002             		move.w	#$400,2(a1)
00017F00 137C 0004 0001             		move.b	#4,1(a1)
00017F06 137C 0020 0019             		move.b	#$20,$19(a1)
00017F0C 137C 0003 0018             		move.b	#3,$18(a1)
00017F12 135A 001C                  		move.b	(a2)+,$1C(a1)
00017F16 2348 0034                  		move.l	a0,$34(a1)
00017F1A 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017F1E                            
00017F1E                            loc_17772:
00017F1E 3168 0008 0030             		move.w	8(a0),$30(a0)
00017F24 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017F2A 117C 000F 0020             		move.b	#$F,$20(a0)
00017F30 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00017F36                            
00017F36                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017F36 7000                       		moveq	#0,d0
00017F38 1028 0025                  		move.b	$25(a0),d0
00017F3C 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017F40 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017F44 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017F4A 4EB9 0000 AD44             		jsr	AnimateSprite
00017F50 1028 0022                  		move.b	$22(a0),d0
00017F54 0200 0003                  		andi.b	#3,d0
00017F58 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017F5E 8128 0001                  		or.b	d0,1(a0)
00017F62 4EF9 0000 DC84             		jmp	DisplaySprite
00017F68                            ; ===========================================================================
00017F68 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017F6A 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017F6C 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017F6E 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017F70 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017F72 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017F74 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017F76                            ; ===========================================================================
00017F76                            
00017F76                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017F76 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00017F7C 6100 0000                  		bsr.w	BossMove
00017F80 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017F86 6600                       		bne.s	loc_177E6
00017F88 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017F8E 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017F92                            
00017F92                            loc_177E6:
00017F92 1028 003F                  		move.b	$3F(a0),d0
00017F96 4EB9 0000 2C64             		jsr	(CalcSine).l
00017F9C EC40                       		asr.w	#6,d0
00017F9E D068 0038                  		add.w	$38(a0),d0
00017FA2 3140 000C                  		move.w	d0,$C(a0)
00017FA6 3168 0030 0008             		move.w	$30(a0),8(a0)
00017FAC 5428 003F                  		addq.b	#2,$3F(a0)
00017FB0 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017FB6 6400                       		bcc.s	locret_1784A
00017FB8 4A28 0022                  		tst.b	$22(a0)
00017FBC 6B00                       		bmi.s	loc_1784C
00017FBE 4A28 0020                  		tst.b	$20(a0)
00017FC2 6600                       		bne.s	locret_1784A
00017FC4 4A28 003E                  		tst.b	$3E(a0)
00017FC8 6600                       		bne.s	Obj3D_ShipFlash
00017FCA 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017FD0 303C 00AC                  		move.w	#$AC,d0
00017FD4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017FDA                            
00017FDA                            Obj3D_ShipFlash:
00017FDA 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017FDE 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017FE0 4A51                       		tst.w	(a1)
00017FE2 6600                       		bne.s	loc_1783C
00017FE4 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017FE8                            
00017FE8                            loc_1783C:
00017FE8 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017FEA 5328 003E                  		subq.b	#1,$3E(a0)
00017FEE 6600                       		bne.s	locret_1784A
00017FF0 117C 000F 0020             		move.b	#$F,$20(a0)
00017FF6                            
00017FF6                            locret_1784A:
00017FF6 4E75                       		rts	
00017FF8                            ; ===========================================================================
00017FF8                            
00017FF8                            loc_1784C:				; XREF: loc_177E6
00017FF8 7064                       		moveq	#100,d0
00017FFA 6100 0000                  		bsr.w	AddPoints
00017FFE 117C 0008 0025             		move.b	#8,$25(a0)
00018004 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001800A 4E75                       		rts	
0001800C                            
0001800C                            ; ---------------------------------------------------------------------------
0001800C                            ; Defeated boss	subroutine
0001800C                            ; ---------------------------------------------------------------------------
0001800C                            
0001800C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001800C                            
0001800C                            
0001800C                            BossDefeated:
0001800C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00018010 0200 0007                  		andi.b	#7,d0
00018014 6600                       		bne.s	locret_178A2
00018016 4EB9 0000 E10A             		jsr	SingleObjLoad
0001801C 6600                       		bne.s	locret_178A2
0001801E 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018022 3368 0008 0008             		move.w	8(a0),8(a1)
00018028 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001802E 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018034 3200                       		move.w	d0,d1
00018036 7200                       		moveq	#0,d1
00018038 1200                       		move.b	d0,d1
0001803A E409                       		lsr.b	#2,d1
0001803C 0441 0020                  		subi.w	#$20,d1
00018040 D369 0008                  		add.w	d1,8(a1)
00018044 E048                       		lsr.w	#8,d0
00018046 E608                       		lsr.b	#3,d0
00018048 D169 000C                  		add.w	d0,$C(a1)
0001804C                            
0001804C                            locret_178A2:
0001804C 4E75                       		rts	
0001804E                            ; End of function BossDefeated
0001804E                            
0001804E                            ; ---------------------------------------------------------------------------
0001804E                            ; Subroutine to	move a boss
0001804E                            ; ---------------------------------------------------------------------------
0001804E                            
0001804E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001804E                            
0001804E                            
0001804E                            BossMove:
0001804E 2428 0030                  		move.l	$30(a0),d2
00018052 2628 0038                  		move.l	$38(a0),d3
00018056 3028 0010                  		move.w	$10(a0),d0
0001805A 48C0                       		ext.l	d0
0001805C E180                       		asl.l	#8,d0
0001805E D480                       		add.l	d0,d2
00018060 3028 0012                  		move.w	$12(a0),d0
00018064 48C0                       		ext.l	d0
00018066 E180                       		asl.l	#8,d0
00018068 D680                       		add.l	d0,d3
0001806A 2142 0030                  		move.l	d2,$30(a0)
0001806E 2143 0038                  		move.l	d3,$38(a0)
00018072 4E75                       		rts	
00018074                            ; End of function BossMove
00018074                            
00018074                            ; ===========================================================================
00018074                            
00018074                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
00018074 6100 FFD8                  		bsr.w	BossMove
00018078 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001807E 6600                       		bne.s	loc_17916
00018080 317C 0000 0010             		move.w	#0,$10(a0)
00018086 317C 0000 0012             		move.w	#0,$12(a0)
0001808C 5428 0025                  		addq.b	#2,$25(a0)
00018090 4EB9 0000 E120             		jsr	SingleObjLoad2
00018096 6600                       		bne.s	loc_17910
00018098 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0001809C 3368 0030 0008             		move.w	$30(a0),8(a1)
000180A2 3368 0038 000C             		move.w	$38(a0),$C(a1)
000180A8 2348 0034                  		move.l	a0,$34(a1)
000180AC                            
000180AC                            loc_17910:
000180AC 317C 0077 003C             		move.w	#$77,$3C(a0)
000180B2                            
000180B2                            loc_17916:
000180B2 6000 FEDE                  		bra.w	loc_177E6
000180B6                            ; ===========================================================================
000180B6                            
000180B6                            Obj3D_ShipMove:				; XREF:  sonic follow move
000180B6 5368 003C                  		subq.w	#1,$3C(a0)
000180BA 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
000180C0 5428 0025                  		addq.b	#2,$25(a0)
000180C4 317C 003F 003C             		move.w	#$3F,$3C(a0)
000180CA 3038 D008                  		move.w	($FFFFD008).w,d0	 
000180CE 9068 0008                  		sub.w	8(a0),d0		 
000180D2 6A00                       		bpl.s	Obj3D_left			 
000180D4 08A8 0000 0022             		bclr	#0,$22(a0)		 
000180DA 6000                       		bra.s	Obj3D_right		 
000180DC 08A8 0005 0022             		bclr	#5,$22(a0)
000180E2 4EB9 0000 0000              		jsr     loc_17950
000180E8 4E75                       		rts
000180EA                            ; ===========================================================================
000180EA                            
000180EA                            Obj3D_right:
000180EA 317C FF00 0010             		move.w	#-$100,$10(a0)	
000180F0 4E75                       		Rts
000180F2                            
000180F2                            Obj3D_left:
000180F2 317C 0100 0010             		move.w	#$100,$10(a0)	 
000180F8 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
000180FE 6600                       		bne.s	RTSboss  	; if not, branch
00018100 0868 0000 0022              		bchg	#0,$22(a0)
00018106                            
00018106                            RTSboss:	    
00018106 4E75                       		rts
00018108                             ; ===========================================================================
00018108                            
00018108                            Obj3D_UpStuff:
00018108 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
0001810C 9068 000C                  		sub.w	$C(a0),d0		 
00018110 6A00                       		bpl.s	Obj3D_down			 
00018112 6000                        		bra.s	Obj3D_up		 
00018114 08A8 0005 0022             		bclr	#5,$22(a0)
0001811A                             
0001811A                            Obj3D_up:		
0001811A 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00018120 4E75                        	    rts
00018122                            
00018122                            Obj3D_down:
00018122 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018128                            
00018128                            loc_17950:
00018128 6000 FE68                  		bra.w	loc_177E6
0001812C                            ; ===========================================================================
0001812C                            
0001812C                            loc_17954:				; XREF: Obj3D_ShipIndex
0001812C 5368 003C                  		subq.w	#1,$3C(a0)
00018130 6B00                       		bmi.s	loc_17960
00018132 6100 FF1A                  		bsr.w	BossMove
00018136 6000                       		bra.s	loc_17976
00018138                            ; ===========================================================================
00018138                            
00018138                            loc_17960:
00018138 0868 0000 0022             		bchg	#0,$22(a0)
0001813E 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018144 5528 0025                  		subq.b	#2,$25(a0)
00018148 317C 0000 0010             		move.w	#0,$10(a0)
0001814E                            
0001814E                            loc_17976:
0001814E 6000 FE42                  		bra.w	loc_177E6
00018152                            ; ===========================================================================
00018152                            
00018152                            loc_1797A:				; XREF: Obj3D_ShipIndex
00018152 5368 003C                  		subq.w	#1,$3C(a0)
00018156 6B00                       		bmi.s	loc_17984
00018158 6000 FEB2                  		bra.w	BossDefeated
0001815C                            ; ===========================================================================
0001815C                            
0001815C                            loc_17984:
0001815C 08E8 0000 0022             		bset	#0,$22(a0)
00018162 08A8 0007 0022             		bclr	#7,$22(a0)
00018168 4268 0010                  		clr.w	$10(a0)
0001816C 5428 0025                  		addq.b	#2,$25(a0)
00018170 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018176 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001817A 6600                       		bne.s	locret_179AA
0001817C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018182 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00018188 6000 FE82                  		bra.w	BossDefeated
0001818C                            
0001818C                            locret_179AA:
0001818C 4E75                       		rts	
0001818E                            ; ===========================================================================
0001818E                            
0001818E                            loc_179AC:				; XREF: Obj3D_ShipIndex
0001818E 4EB9 0000 DC32             		jsr ObjectFall		
00018194 5268 003C                  		addq.w	#1,$3C(a0)
00018198 6700                       		beq.s	loc_179BC
0001819A 6A00                       		bpl.s	loc_179C2
0001819C 6000                       		bra.s	loc_179EE
0001819E                            ; ===========================================================================
0001819E                            
0001819E                            loc_179BC:
0001819E 4268 0012                  		clr.w	$12(a0)
000181A2 6000                       		bra.s	loc_179EE
000181A4                            ; ===========================================================================
000181A4                            
000181A4                            loc_179C2:
000181A4 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000181AA 6500                       		bcs.s	loc_179DA
000181AC 6700                       		beq.s	loc_179E0
000181AE 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000181B4 6500                       		bcs.s	loc_179EE
000181B6 5428 0025                  		addq.b	#2,$25(a0)
000181BA 6000                       		bra.s	loc_179EE
000181BC                            ; ===========================================================================
000181BC                            
000181BC                            loc_179DA:
000181BC 5168 0012                  		subq.w	#8,$12(a0)
000181C0 6000                       		bra.s	loc_179EE
000181C2 6000 FE48                  		bra.w	BossDefeated
000181C6                            ; ===========================================================================
000181C6                            
000181C6                            loc_179E0:
000181C6 4268 0012                  		clr.w	$12(a0)
000181CA 303C 0081                  		move.w	#$81,d0
000181CE 4EB9 0000 15BA             		jsr	(PlaySound).l	; play GHZ music
000181D4                            
000181D4                            loc_179EE:
000181D4 6100 FE78                  		bsr.w	BossMove
000181D8 6000 FDB8                  		bra.w	loc_177E6
000181DC                            ; ===========================================================================
000181DC                            
000181DC                            loc_179F6:				; XREF: Obj3D_ShipIndex
000181DC 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000181E2 6700                       		beq.s	loc_17A10
000181E4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000181E8 6000                       		bra.s	loc_17A16
000181EA                            ; ===========================================================================
000181EA                            
000181EA                            loc_17A10:
000181EA 4A28 0001                  		tst.b	1(a0)
000181EE 6A00                       		bpl.s	Obj3D_ShipDel
000181F0                            
000181F0                            loc_17A16:
000181F0 6100 FE5C                  		bsr.w	BossMove
000181F4 6000 FD9C                  		bra.w	loc_177E6
000181F8                            ; ===========================================================================
000181F8                            
000181F8                            Obj3D_ShipDel:
000181F8 4EF9 0000 DCC0             		jmp	DeleteObject
000181FE                            ; ===========================================================================
000181FE                            
000181FE                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000181FE 7000                       		moveq	#0,d0
00018200 7201                       		moveq	#1,d1
00018202 2268 0034                  		movea.l	$34(a0),a1
00018206 1029 0025                  		move.b	$25(a1),d0
0001820A 5900                       		subq.b	#4,d0
0001820C 6600                       		bne.s	loc_17A3E
0001820E 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018214 6600                       		bne.s	loc_17A46
00018216 7204                       		moveq	#4,d1
00018218                            
00018218                            loc_17A3E:
00018218 5D00                       		subq.b	#6,d0
0001821A 6B00                       		bmi.s	loc_17A46
0001821C 720A                       		moveq	#$A,d1
0001821E 6000                       		bra.s	loc_17A5A
00018220                            ; ===========================================================================
00018220                            
00018220                            loc_17A46:
00018220 4A29 0020                  		tst.b	$20(a1)
00018224 6600                       		bne.s	loc_17A50
00018226 7205                       		moveq	#5,d1
00018228 6000                       		bra.s	loc_17A5A
0001822A                            ; ===========================================================================
0001822A                            
0001822A                            loc_17A50:
0001822A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018230 6500                       		bcs.s	loc_17A5A
00018232 7204                       		moveq	#4,d1
00018234                            
00018234                            loc_17A5A:
00018234 1141 001C                  		move.b	d1,$1C(a0)
00018238 5500                       		subq.b	#2,d0
0001823A 6600                       		bne.s	Obj3D_FaceDisp
0001823C 117C 0006 001C             		move.b	#6,$1C(a0)
00018242 4A28 0001                  		tst.b	1(a0)
00018246 6A00                       		bpl.s	Obj3D_FaceDel
00018248                            
00018248                            Obj3D_FaceDisp:
00018248 6000                       		bra.s	Obj3D_Display
0001824A                            ; ===========================================================================
0001824A                            
0001824A                            Obj3D_FaceDel:
0001824A 4EF9 0000 DCC0             		jmp	DeleteObject
00018250                            ; ===========================================================================
00018250                            
00018250                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018250 117C 0007 001C             		move.b	#7,$1C(a0)
00018256 2268 0034                  		movea.l	$34(a0),a1
0001825A 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00018260 6600                       		bne.s	loc_17A96
00018262 117C 000B 001C             		move.b	#$B,$1C(a0)
00018268 4A28 0001                  		tst.b	1(a0)
0001826C 6A00                       		bpl.s	Obj3D_FlameDel
0001826E 6000                       		bra.s	Obj3D_FlameDisp
00018270                            ; ===========================================================================
00018270                            
00018270                            loc_17A96:
00018270 3029 0010                  		move.w	$10(a1),d0
00018274 6700                       		beq.s	Obj3D_FlameDisp
00018276 117C 0008 001C             		move.b	#8,$1C(a0)
0001827C                            
0001827C                            Obj3D_FlameDisp:
0001827C 6000                       		bra.s	Obj3D_Display
0001827E                            ; ===========================================================================
0001827E                            
0001827E                            Obj3D_FlameDel:
0001827E 4EF9 0000 DCC0             		jmp	DeleteObject
00018284                            ; ===========================================================================
00018284                            
00018284                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00018284 2268 0034                  		movea.l	$34(a0),a1
00018288 3169 0008 0008             		move.w	8(a1),8(a0)
0001828E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018294 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001829A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000182A0 4EB9 0000 AD44             		jsr	AnimateSprite
000182A6 1028 0022                  		move.b	$22(a0),d0
000182AA 0200 0003                  		andi.b	#3,d0
000182AE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000182B4 8128 0001                  		or.b	d0,1(a0)
000182B8 4EF9 0000 DC84             		jmp	DisplaySprite
000182BE                            ; ===========================================================================
000182BE                            ; ---------------------------------------------------------------------------
000182BE                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000182BE                            ; ---------------------------------------------------------------------------
000182BE                            
000182BE                            Obj48:					; XREF: Obj_Index
000182BE 7000                       		moveq	#0,d0
000182C0 1028 0024                  		move.b	$24(a0),d0
000182C4 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000182C8 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000182CC                            ; ===========================================================================
000182CC 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000182CE 0000                       		dc.w Obj48_Base-Obj48_Index
000182D0 0000                       		dc.w Obj48_Display2-Obj48_Index
000182D2 0000                       		dc.w loc_17C68-Obj48_Index
000182D4 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000182D6                            ; ===========================================================================
000182D6                            
000182D6                            Obj48_Main:				; XREF: Obj48_Index
000182D6 5428 0024                  		addq.b	#2,$24(a0)
000182DA 317C 4080 0026             		move.w	#$4080,$26(a0)
000182E0 317C FE00 003E             		move.w	#-$200,$3E(a0)
000182E6 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000182EE 317C 046C 0002             		move.w	#$46C,2(a0)
000182F4 45E8 0028                  		lea	$28(a0),a2
000182F8 14FC 0000                  		move.b	#0,(a2)+
000182FC 7205                       		moveq	#5,d1
000182FE 2248                       		movea.l	a0,a1
00018300 6000                       		bra.s	loc_17B60
00018302                            ; ===========================================================================
00018302                            
00018302                            Obj48_MakeLinks:
00018302 4EB9 0000 E120             		jsr	SingleObjLoad2
00018308 6600                       		bne.s	Obj48_MakeBall
0001830A 3368 0008 0008             		move.w	8(a0),8(a1)
00018310 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018316 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
0001831A 137C 0006 0024             		move.b	#6,$24(a1)
00018320 237C 0000 8198 0004        		move.l	#Map_obj15,4(a1)
00018328 337C 0380 0002             		move.w	#$380,2(a1)
0001832E 137C 0001 001A             		move.b	#1,$1A(a1)
00018334 5228 0028                  		addq.b	#1,$28(a0)
00018338                            
00018338                            loc_17B60:				; XREF: Obj48_Main
00018338 3A09                       		move.w	a1,d5
0001833A 0445 D000                  		subi.w	#$D000,d5
0001833E EC4D                       		lsr.w	#6,d5
00018340 0245 007F                  		andi.w	#$7F,d5
00018344 14C5                       		move.b	d5,(a2)+
00018346 137C 0004 0001             		move.b	#4,1(a1)
0001834C 137C 0008 0019             		move.b	#8,$19(a1)
00018352 137C 0006 0018             		move.b	#6,$18(a1)
00018358 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001835E 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018362                            
00018362                            Obj48_MakeBall:
00018362 137C 0008 0024             		move.b	#8,$24(a1)
00018368 237C 0000 86F6 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00018370 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018376 137C 0001 001A             		move.b	#1,$1A(a1)
0001837C 137C 0005 0018             		move.b	#5,$18(a1)
00018382 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018388 4E75                       		rts	
0001838A                            ; ===========================================================================
0001838A                            
0001838A 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018390                            
00018390                            ; ===========================================================================
00018390                            
00018390                            Obj48_Base:				; XREF: Obj48_Index
00018390 47F9 0001 838A             		lea	(Obj48_PosData).l,a3
00018396 45E8 0028                  		lea	$28(a0),a2
0001839A 7C00                       		moveq	#0,d6
0001839C 1C1A                       		move.b	(a2)+,d6
0001839E                            
0001839E                            loc_17BC6:
0001839E 7800                       		moveq	#0,d4
000183A0 181A                       		move.b	(a2)+,d4
000183A2 ED4C                       		lsl.w	#6,d4
000183A4 0684 00FF D000             		addi.l	#$FFD000,d4
000183AA 2244                       		movea.l	d4,a1
000183AC 101B                       		move.b	(a3)+,d0
000183AE B029 003C                  		cmp.b	$3C(a1),d0
000183B2 6700                       		beq.s	loc_17BE0
000183B4 5229 003C                  		addq.b	#1,$3C(a1)
000183B8                            
000183B8                            loc_17BE0:
000183B8 51CE FFE4                  		dbf	d6,loc_17BC6
000183BC                            
000183BC B029 003C                  		cmp.b	$3C(a1),d0
000183C0 6600                       		bne.s	loc_17BFA
000183C2 2268 0034                  		movea.l	$34(a0),a1
000183C6 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000183CC 6600                       		bne.s	loc_17BFA
000183CE 5428 0024                  		addq.b	#2,$24(a0)
000183D2                            
000183D2                            loc_17BFA:
000183D2 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000183D8 6700                       		beq.s	Obj48_Display
000183DA 5268 0032                  		addq.w	#1,$32(a0)
000183DE                            
000183DE                            Obj48_Display:
000183DE 6100 0000                  		bsr.w	sub_17C2A
000183E2 1028 0026                  		move.b	$26(a0),d0
000183E6 4EB9 0000 810A             		jsr	(Obj15_Move2).l
000183EC 4EF9 0000 DC84             		jmp	DisplaySprite
000183F2                            ; ===========================================================================
000183F2                            
000183F2                            Obj48_Display2:				; XREF: Obj48_Index
000183F2 6100 0000                  		bsr.w	sub_17C2A
000183F6 4EB9 0000 80CA             		jsr	(Obj48_Move).l
000183FC 4EF9 0000 DC84             		jmp	DisplaySprite
00018402                            
00018402                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018402                            
00018402                            
00018402                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018402 2268 0034                  		movea.l	$34(a0),a1
00018406 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001840C 6400                       		bcc.s	loc_17C3C
0001840E 0868 0000 001A             		bchg	#0,$1A(a0)
00018414                            
00018414                            loc_17C3C:
00018414 3169 0008 003A             		move.w	8(a1),$3A(a0)
0001841A 3029 000C                  		move.w	$C(a1),d0
0001841E D068 0032                  		add.w	$32(a0),d0
00018422 3140 0038                  		move.w	d0,$38(a0)
00018426 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001842C 4A29 0022                  		tst.b	$22(a1)
00018430 6A00                       		bpl.s	locret_17C66
00018432 10BC 003F                  		move.b	#$3F,0(a0)
00018436 117C 0000 0024             		move.b	#0,$24(a0)
0001843C                            
0001843C                            locret_17C66:
0001843C 4E75                       		rts	
0001843E                            ; End of function sub_17C2A
0001843E                            
0001843E                            ; ===========================================================================
0001843E                            
0001843E                            loc_17C68:				; XREF: Obj48_Index
0001843E 2268 0034                  		movea.l	$34(a0),a1
00018442 4A29 0022                  		tst.b	$22(a1)
00018446 6A00                       		bpl.s	Obj48_Display3
00018448 10BC 003F                  		move.b	#$3F,0(a0)
0001844C 117C 0000 0024             		move.b	#0,$24(a0)
00018452                            
00018452                            Obj48_Display3:
00018452 4EF9 0000 DC84             		jmp	DisplaySprite
00018458                            ; ===========================================================================
00018458                            
00018458                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018458 7000                       		moveq	#0,d0
0001845A 4A28 001A                  		tst.b	$1A(a0)
0001845E 6600                       		bne.s	Obj48_Vanish
00018460 5200                       		addq.b	#1,d0
00018462                            
00018462                            Obj48_Vanish:
00018462 1140 001A                  		move.b	d0,$1A(a0)
00018466 2268 0034                  		movea.l	$34(a0),a1
0001846A 4A29 0022                  		tst.b	$22(a1)
0001846E 6A00                       		bpl.s	Obj48_Display4
00018470 117C 0000 0020             		move.b	#0,$20(a0)
00018476 6100 FB94                  		bsr.w	BossDefeated
0001847A 5328 003C                  		subq.b	#1,$3C(a0)
0001847E 6A00                       		bpl.s	Obj48_Display4
00018480 10BC 003F                  		move.b	#$3F,(a0)
00018484 117C 0000 0024             		move.b	#0,$24(a0)
0001848A                            
0001848A                            Obj48_Display4:
0001848A 4EF9 0000 DC84             		jmp	DisplaySprite
00018490                            ; ===========================================================================
00018490                            Ani_Eggman:
00018490                            	include "_anim\Eggman.asm"
00018490                            ; ---------------------------------------------------------------------------
00018490                            ; Animation script - Eggman (bosses)
00018490                            ; ---------------------------------------------------------------------------
00018490 0000                       		dc.w byte_17CD4-Ani_Eggman
00018492 0000                       		dc.w byte_17CD8-Ani_Eggman
00018494 0000                       		dc.w byte_17CDC-Ani_Eggman
00018496 0000                       		dc.w byte_17CE0-Ani_Eggman
00018498 0000                       		dc.w byte_17CE4-Ani_Eggman
0001849A 0000                       		dc.w byte_17CE8-Ani_Eggman
0001849C 0000                       		dc.w byte_17CEC-Ani_Eggman
0001849E 0000                       		dc.w byte_17CF0-Ani_Eggman
000184A0 0000                       		dc.w byte_17CF4-Ani_Eggman
000184A2 0000                       		dc.w byte_17CF8-Ani_Eggman
000184A4 0000                       		dc.w byte_17CFC-Ani_Eggman
000184A6 0000                       		dc.w byte_17D00-Ani_Eggman
000184A8 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000184AC 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000184B0 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000184B4 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000184B8 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000184BC 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000184C0 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000184C4 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000184C8 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000184CC 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000184D0 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000184D4 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000184E0                            		even
000184E0                            		even
000184E0                            
000184E0                            ; ---------------------------------------------------------------------------
000184E0                            ; Sprite mappings - Eggman (boss levels)
000184E0                            ; ---------------------------------------------------------------------------
000184E0                            Map_Eggman:
000184E0                            	include "_maps\Eggman.asm"
000184E0                            Map_dc7e:
000184E0 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
000184E2 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
000184E4 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
000184E6 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
000184E8 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
000184EA 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
000184EC 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
000184EE 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
000184F0 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
000184F2 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
000184F4 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
000184F6 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
000184F8 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
000184FA 06                         Map_dc7e_1A: 	dc.b $6
000184FB EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018500 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018505 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
0001850A FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
0001850F 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018514 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018519 02                         Map_dc7e_39: 	dc.b $2
0001851A E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001851F EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018524 02                         Map_dc7e_44: 	dc.b $2
00018525 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001852A EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
0001852F 03                         Map_dc7e_4F: 	dc.b $3
00018530 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018535 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
0001853A EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
0001853F 03                         Map_dc7e_5F: 	dc.b $3
00018540 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018545 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
0001854A EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
0001854F 03                         Map_dc7e_6F: 	dc.b $3
00018550 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018555 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001855A EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
0001855F 03                         Map_dc7e_7F: 	dc.b $3
00018560 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018565 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001856A EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
0001856F 04                         Map_dc7e_8F: 	dc.b $4
00018570 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018575 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001857A EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001857F EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018584 01                         Map_dc7e_A4: 	dc.b $1
00018585 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
0001858A 01                         Map_dc7e_AA: 	dc.b $1
0001858B 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018590 00                         Map_dc7e_B0: 	dc.b $0
00018591 02                         Map_dc7e_B1: 	dc.b $2
00018592 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018597 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
0001859C 02                         Map_dc7e_BC: 	dc.b $2
0001859D F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000185A2 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000185A8 00                         	even
000185A8 00                         	even
000185A8                            
000185A8                            ; ---------------------------------------------------------------------------
000185A8                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000185A8                            ; ---------------------------------------------------------------------------
000185A8                            Map_BossItems:
000185A8                            	include "_maps\Boss items.asm"
000185A8                            ; ---------------------------------------------------------------------------
000185A8                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000185A8                            ; ---------------------------------------------------------------------------
000185A8 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000185AC 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000185B0 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000185B4 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000185B8 01                         byte_17DE4:	dc.b 1
000185B9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000185BE 02                         byte_17DEA:	dc.b 2
000185BF FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000185C4 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000185C9 00                         		dc.b 0
000185CA 01                         byte_17DF6:	dc.b 1
000185CB FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000185D0 01                         byte_17DFC:	dc.b 1
000185D1 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000185D6 01                         byte_17E02:	dc.b 1
000185D7 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000185DC 04                         byte_17E08:	dc.b 4
000185DD F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000185E2 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000185E7 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000185EC 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000185F1 00                         		dc.b 0
000185F2 02                         byte_17E1E:	dc.b 2
000185F3 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000185F8 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000185FD 00                         		dc.b 0
000185FE 02                         byte_17E2A:	dc.b 2
000185FF 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018604 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001860A 00                         		even
0001860A 00                         		even
0001860A                            
0001860A                            ; ===========================================================================
0001860A                            ; ---------------------------------------------------------------------------
0001860A                            ; Object 77 - Eggman (LZ)
0001860A                            ; ---------------------------------------------------------------------------
0001860A                            
0001860A                            Obj77:					; XREF: Obj_Index
0001860A 7000                       		moveq	#0,d0
0001860C 1028 0024                  		move.b	$24(a0),d0
00018610 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00018614 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018618                            ; ===========================================================================
00018618 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001861A 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001861C 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001861E 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00018620                            
00018620 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00018622 0401                       		dc.b 4,	1
00018624 0607                       		dc.b 6,	7
00018626                            ; ===========================================================================
00018626                            
00018626                            Obj77_Main:				; XREF: Obj77_Index
00018626 317C 1E10 0008             		move.w	#$1E10,8(a0)
0001862C 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00018632 3168 0008 0030             		move.w	8(a0),$30(a0)
00018638 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001863E 117C 000F 0020             		move.b	#$F,$20(a0)
00018644 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001864A 117C 0004 0018             		move.b	#4,$18(a0)
00018650 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00018654 2248                       		movea.l	a0,a1
00018656 7202                       		moveq	#2,d1
00018658 6000                       		bra.s	Obj77_LoadBoss
0001865A                            ; ===========================================================================
0001865A                            
0001865A                            Obj77_Loop:
0001865A 4EB9 0000 E120             		jsr	SingleObjLoad2
00018660 6600                       		bne.s	Obj77_ShipMain
00018662 12BC 0077                  		move.b	#$77,0(a1)
00018666 3368 0008 0008             		move.w	8(a0),8(a1)
0001866C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018672                            
00018672                            Obj77_LoadBoss:				; XREF: Obj77_Main
00018672 08A8 0000 0022             		bclr	#0,$22(a0)
00018678 4229 0025                  		clr.b	$25(a1)
0001867C 135A 0024                  		move.b	(a2)+,$24(a1)
00018680 135A 001C                  		move.b	(a2)+,$1C(a1)
00018684 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001868A 237C 0001 84E0 0004        		move.l	#Map_Eggman,4(a1)
00018692 337C 0400 0002             		move.w	#$400,2(a1)
00018698 137C 0004 0001             		move.b	#4,1(a1)
0001869E 137C 0020 0019             		move.b	#$20,$19(a1)
000186A4 2348 0034                  		move.l	a0,$34(a1)
000186A8 51C9 FFB0                  		dbf	d1,Obj77_Loop
000186AC                            
000186AC                            Obj77_ShipMain:
000186AC 43F8 D000                  		lea	($FFFFD000).w,a1
000186B0 7000                       		moveq	#0,d0
000186B2 1028 0025                  		move.b	$25(a0),d0
000186B6 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000186BA 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000186BE 43F9 0001 8490             		lea	(Ani_Eggman).l,a1
000186C4 4EB9 0000 AD44             		jsr	AnimateSprite
000186CA 7003                       		moveq	#3,d0
000186CC C028 0022                  		and.b	$22(a0),d0
000186D0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000186D6 8128 0001                  		or.b	d0,1(a0)
000186DA 4EF9 0000 DC84             		jmp	DisplaySprite
000186E0                            ; ===========================================================================
000186E0 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
000186E4 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000186E8 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000186EC 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000186F0                            ; ===========================================================================
000186F0                            
000186F0                            loc_17F1E:				; XREF: Obj77_ShipIndex
000186F0 3029 0008                  		move.w	8(a1),d0
000186F4 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000186F8 6500                       		bcs.s	loc_17F38
000186FA 317C FE80 0012             		move.w	#-$180,$12(a0)
00018700 317C 0060 0010             		move.w	#$60,$10(a0)
00018706 5428 0025                  		addq.b	#2,$25(a0)
0001870A                            
0001870A                            loc_17F38:
0001870A 6100 F942                  		bsr.w	BossMove
0001870E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018714 3168 0030 0008             		move.w	$30(a0),8(a0)
0001871A                            
0001871A                            loc_17F48:
0001871A 4A28 003D                  		tst.b	$3D(a0)
0001871E 6600                       		bne.s	loc_17F8E
00018720 4A28 0022                  		tst.b	$22(a0)
00018724 6B00                       		bmi.s	loc_17F92
00018726 4A28 0020                  		tst.b	$20(a0)
0001872A 6600                       		bne.s	locret_17F8C
0001872C 4A28 003E                  		tst.b	$3E(a0)
00018730 6600                       		bne.s	loc_17F70
00018732 117C 0020 003E             		move.b	#$20,$3E(a0)
00018738 303C 00AC                  		move.w	#$AC,d0
0001873C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
00018742                            
00018742                            loc_17F70:
00018742 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018746 7000                       		moveq	#0,d0
00018748 4A51                       		tst.w	(a1)
0001874A 6600                       		bne.s	loc_17F7E
0001874C 303C 0EEE                  		move.w	#$EEE,d0
00018750                            
00018750                            loc_17F7E:
00018750 3280                       		move.w	d0,(a1)
00018752 5328 003E                  		subq.b	#1,$3E(a0)
00018756 6600                       		bne.s	locret_17F8C
00018758 117C 000F 0020             		move.b	#$F,$20(a0)
0001875E                            
0001875E                            locret_17F8C:
0001875E 4E75                       		rts	
00018760                            ; ===========================================================================
00018760                            
00018760                            loc_17F8E:				; XREF: loc_17F48
00018760 6000 F8AA                  		bra.w	BossDefeated
00018764                            ; ===========================================================================
00018764                            
00018764                            loc_17F92:				; XREF: loc_17F48
00018764 7064                       		moveq	#100,d0
00018766 6100 0000                  		bsr.w	AddPoints
0001876A 117C 00FF 003D             		move.b	#-1,$3D(a0)
00018770 4E75                       		rts	
00018772                            ; ===========================================================================
00018772                            
00018772                            loc_17FA0:				; XREF: Obj77_ShipIndex
00018772 70FE                       		moveq	#-2,d0
00018774 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001877A 6500                       		bcs.s	loc_17FB6
0001877C 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00018782 4268 0010                  		clr.w	$10(a0)
00018786 5240                       		addq.w	#1,d0
00018788                            
00018788                            loc_17FB6:
00018788 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001878E 6E00                       		bgt.s	loc_17FCA
00018790 317C 0500 0038             		move.w	#$500,$38(a0)
00018796 4268 0012                  		clr.w	$12(a0)
0001879A 5240                       		addq.w	#1,d0
0001879C                            
0001879C                            loc_17FCA:
0001879C 6600                       		bne.s	loc_17FDC
0001879E 317C 0140 0010             		move.w	#$140,$10(a0)
000187A4 317C FE00 0012             		move.w	#-$200,$12(a0)
000187AA 5428 0025                  		addq.b	#2,$25(a0)
000187AE                            
000187AE                            loc_17FDC:
000187AE 6000 FF5A                  		bra.w	loc_17F38
000187B2                            ; ===========================================================================
000187B2                            
000187B2                            loc_17FE0:				; XREF: Obj77_ShipIndex
000187B2 70FE                       		moveq	#-2,d0
000187B4 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000187BA 6500                       		bcs.s	loc_17FF6
000187BC 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000187C2 4268 0010                  		clr.w	$10(a0)
000187C6 5240                       		addq.w	#1,d0
000187C8                            
000187C8                            loc_17FF6:
000187C8 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
000187CE 6E00                       		bgt.s	loc_1800A
000187D0 317C 04C0 0038             		move.w	#$4C0,$38(a0)
000187D6 4268 0012                  		clr.w	$12(a0)
000187DA 5240                       		addq.w	#1,d0
000187DC                            
000187DC                            loc_1800A:
000187DC 6600                       		bne.s	loc_1801A
000187DE 317C FE80 0012             		move.w	#-$180,$12(a0)
000187E4 5428 0025                  		addq.b	#2,$25(a0)
000187E8 4228 003F                  		clr.b	$3F(a0)
000187EC                            
000187EC                            loc_1801A:
000187EC 6000 FF1C                  		bra.w	loc_17F38
000187F0                            ; ===========================================================================
000187F0                            
000187F0                            loc_1801E:				; XREF: Obj77_ShipIndex
000187F0 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000187F6 6E00                       		bgt.s	loc_1804E
000187F8 317C 0100 0038             		move.w	#$100,$38(a0)
000187FE 317C 0140 0010             		move.w	#$140,$10(a0)
00018804 317C FF80 0012             		move.w	#-$80,$12(a0)
0001880A 4A28 003D                  		tst.b	$3D(a0)
0001880E 6700                       		beq.s	loc_18046
00018810 E1E8 0010                  		asl	$10(a0)
00018814 E1E8 0012                  		asl	$12(a0)
00018818                            
00018818                            loc_18046:
00018818 5428 0025                  		addq.b	#2,$25(a0)
0001881C 6000 FEEC                  		bra.w	loc_17F38
00018820                            ; ===========================================================================
00018820                            
00018820                            loc_1804E:
00018820 08E8 0000 0022             		bset	#0,$22(a0)
00018826 5428 003F                  		addq.b	#2,$3F(a0)
0001882A 1028 003F                  		move.b	$3F(a0),d0
0001882E 4EB9 0000 2C64             		jsr	(CalcSine).l
00018834 4A41                       		tst.w	d1
00018836 6A00                       		bpl.s	loc_1806C
00018838 08A8 0000 0022             		bclr	#0,$22(a0)
0001883E                            
0001883E                            loc_1806C:
0001883E E840                       		asr.w	#4,d0
00018840 4840                       		swap	d0
00018842 4240                       		clr.w	d0
00018844 D0A8 0030                  		add.l	$30(a0),d0
00018848 4840                       		swap	d0
0001884A 3140 0008                  		move.w	d0,8(a0)
0001884E 3028 0012                  		move.w	$12(a0),d0
00018852 3238 D00C                  		move.w	($FFFFD00C).w,d1
00018856 9268 000C                  		sub.w	$C(a0),d1
0001885A 6500                       		bcs.s	loc_180A2
0001885C 0441 0048                  		subi.w	#$48,d1
00018860 6500                       		bcs.s	loc_180A2
00018862 E240                       		asr.w	#1,d0
00018864 0441 0028                  		subi.w	#$28,d1
00018868 6500                       		bcs.s	loc_180A2
0001886A E240                       		asr.w	#1,d0
0001886C 0441 0028                  		subi.w	#$28,d1
00018870 6500                       		bcs.s	loc_180A2
00018872 7000                       		moveq	#0,d0
00018874                            
00018874                            loc_180A2:
00018874 48C0                       		ext.l	d0
00018876 E180                       		asl.l	#8,d0
00018878 4A28 003D                  		tst.b	$3D(a0)
0001887C 6700                       		beq.s	loc_180AE
0001887E D080                       		add.l	d0,d0
00018880                            
00018880                            loc_180AE:
00018880 D1A8 0038                  		add.l	d0,$38(a0)
00018884 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001888A 6000 FE8E                  		bra.w	loc_17F48
0001888E                            ; ===========================================================================
0001888E                            
0001888E                            loc_180BC:				; XREF: Obj77_ShipIndex
0001888E 70FE                       		moveq	#-2,d0
00018890 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00018896 6500                       		bcs.s	loc_180D2
00018898 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001889E 4268 0010                  		clr.w	$10(a0)
000188A2 5240                       		addq.w	#1,d0
000188A4                            
000188A4                            loc_180D2:
000188A4 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
000188AA 6E00                       		bgt.s	loc_180E6
000188AC 317C 00C0 0038             		move.w	#$C0,$38(a0)
000188B2 4268 0012                  		clr.w	$12(a0)
000188B6 5240                       		addq.w	#1,d0
000188B8                            
000188B8                            loc_180E6:
000188B8 6600                       		bne.s	loc_180F2
000188BA 5428 0025                  		addq.b	#2,$25(a0)
000188BE 08A8 0000 0022             		bclr	#0,$22(a0)
000188C4                            
000188C4                            loc_180F2:
000188C4 6000 FE44                  		bra.w	loc_17F38
000188C8                            ; ===========================================================================
000188C8                            
000188C8                            loc_180F6:				; XREF: Obj77_ShipIndex
000188C8 4A28 003D                  		tst.b	$3D(a0)
000188CC 6600                       		bne.s	loc_18112
000188CE 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
000188D4 6D00                       		blt.s	loc_18126
000188D6 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
000188DC 6E00                       		bgt.s	loc_18126
000188DE 117C 0032 003C             		move.b	#$32,$3C(a0)
000188E4                            
000188E4                            loc_18112:
000188E4 303C 0082                  		move.w	#$82,d0
000188E8 4EB9 0000 15BA             		jsr	(PlaySound).l	; play LZ music
000188EE 08E8 0000 0022             		bset	#0,$22(a0)
000188F4 5428 0025                  		addq.b	#2,$25(a0)
000188F8                            
000188F8                            loc_18126:
000188F8 6000 FE10                  		bra.w	loc_17F38
000188FC                            ; ===========================================================================
000188FC                            
000188FC                            loc_1812A:				; XREF: Obj77_ShipIndex
000188FC 4A28 003D                  		tst.b	$3D(a0)
00018900 6600                       		bne.s	loc_18136
00018902 5328 003C                  		subq.b	#1,$3C(a0)
00018906 6600                       		bne.s	loc_1814E
00018908                            
00018908                            loc_18136:
00018908 4228 003C                  		clr.b	$3C(a0)
0001890C 317C 0400 0010             		move.w	#$400,$10(a0)
00018912 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018918 4228 003D                  		clr.b	$3D(a0)
0001891C 5428 0025                  		addq.b	#2,$25(a0)
00018920                            
00018920                            loc_1814E:
00018920 6000 FDE8                  		bra.w	loc_17F38
00018924                            ; ===========================================================================
00018924                            
00018924                            loc_18152:				; XREF: Obj77_ShipIndex
00018924 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001892A 6400                       		bcc.s	loc_18160
0001892C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018930 6000                       		bra.s	loc_18166
00018932                            ; ===========================================================================
00018932                            
00018932                            loc_18160:
00018932 4A28 0001                  		tst.b	1(a0)
00018936 6A00                       		bpl.s	Obj77_ShipDel
00018938                            
00018938                            loc_18166:
00018938 6000 FDD0                  		bra.w	loc_17F38
0001893C                            ; ===========================================================================
0001893C                            
0001893C                            Obj77_ShipDel:
0001893C 4EF9 0000 DCC0             		jmp	DeleteObject
00018942                            ; ===========================================================================
00018942                            
00018942                            Obj77_FaceMain:				; XREF: Obj77_Index
00018942 2268 0034                  		movea.l	$34(a0),a1
00018946 1011                       		move.b	(a1),d0
00018948 B010                       		cmp.b	(a0),d0
0001894A 6600                       		bne.s	Obj77_FaceDel
0001894C 7000                       		moveq	#0,d0
0001894E 1029 0025                  		move.b	$25(a1),d0
00018952 7201                       		moveq	#1,d1
00018954 4A28 003D                  		tst.b	$3D(a0)
00018958 6700                       		beq.s	loc_1818C
0001895A 720A                       		moveq	#$A,d1
0001895C 6000                       		bra.s	loc_181A0
0001895E                            ; ===========================================================================
0001895E                            
0001895E                            loc_1818C:
0001895E 4A29 0020                  		tst.b	$20(a1)
00018962 6600                       		bne.s	loc_18196
00018964 7205                       		moveq	#5,d1
00018966 6000                       		bra.s	loc_181A0
00018968                            ; ===========================================================================
00018968                            
00018968                            loc_18196:
00018968 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001896E 6500                       		bcs.s	loc_181A0
00018970 7204                       		moveq	#4,d1
00018972                            
00018972                            loc_181A0:
00018972 1141 001C                  		move.b	d1,$1C(a0)
00018976 0C00 000E                  		cmpi.b	#$E,d0
0001897A 6600                       		bne.s	loc_181B6
0001897C 117C 0006 001C             		move.b	#6,$1C(a0)
00018982 4A28 0001                  		tst.b	1(a0)
00018986 6A00                       		bpl.s	Obj77_FaceDel
00018988                            
00018988                            loc_181B6:
00018988 6000                       		bra.s	Obj77_Display
0001898A                            ; ===========================================================================
0001898A                            
0001898A                            Obj77_FaceDel:
0001898A 4EF9 0000 DCC0             		jmp	DeleteObject
00018990                            ; ===========================================================================
00018990                            
00018990                            Obj77_FlameMain:			; XREF: Obj77_Index
00018990 117C 0007 001C             		move.b	#7,$1C(a0)
00018996 2268 0034                  		movea.l	$34(a0),a1
0001899A 1011                       		move.b	(a1),d0
0001899C B010                       		cmp.b	(a0),d0
0001899E 6600                       		bne.s	Obj77_FlameDel
000189A0 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000189A6 6600                       		bne.s	loc_181F0
000189A8 117C 000B 001C             		move.b	#$B,$1C(a0)
000189AE 4A28 0001                  		tst.b	1(a0)
000189B2 6A00                       		bpl.s	Obj77_FlameDel
000189B4 6000                       		bra.s	loc_181F0
000189B6                            ; ===========================================================================
000189B6 4A69 0010                  		tst.w	$10(a1)
000189BA 6700                       		beq.s	loc_181F0
000189BC 117C 0008 001C             		move.b	#8,$1C(a0)
000189C2                            
000189C2                            loc_181F0:
000189C2 6000                       		bra.s	Obj77_Display
000189C4                            ; ===========================================================================
000189C4                            
000189C4                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
000189C4 4EF9 0000 DCC0             		jmp	DeleteObject
000189CA                            ; ===========================================================================
000189CA                            
000189CA                            Obj77_Display:
000189CA 43F9 0001 8490             		lea	(Ani_Eggman).l,a1
000189D0 4EB9 0000 AD44             		jsr	AnimateSprite
000189D6 2268 0034                  		movea.l	$34(a0),a1
000189DA 3169 0008 0008             		move.w	8(a1),8(a0)
000189E0 3169 000C 000C             		move.w	$C(a1),$C(a0)
000189E6 1169 0022 0022             		move.b	$22(a1),$22(a0)
000189EC 7003                       		moveq	#3,d0
000189EE C028 0022                  		and.b	$22(a0),d0
000189F2 0228 00FC 0001             		andi.b	#-4,1(a0)
000189F8 8128 0001                  		or.b	d0,1(a0)
000189FC 4EF9 0000 DC84             		jmp	DisplaySprite
00018A02                            ; ===========================================================================
00018A02                            ; ---------------------------------------------------------------------------
00018A02                            ; Object 73 - Eggman (MZ)
00018A02                            ; ---------------------------------------------------------------------------
00018A02                            
00018A02                            Obj73:					; XREF: Obj_Index
00018A02 7000                       		moveq	#0,d0
00018A04 1028 0024                  		move.b	$24(a0),d0
00018A08 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018A0C 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018A10                            ; ===========================================================================
00018A10 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018A12 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018A14 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018A16 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018A18 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018A1A                            
00018A1A 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018A1D 0401 04                    		dc.b 4,	1, 4
00018A20 0607 04                    		dc.b 6,	7, 4
00018A23 0800 03                    		dc.b 8,	0, 3
00018A26                            ; ===========================================================================
00018A26                            
00018A26                            Obj73_Main:				; XREF: Obj73_Index
00018A26 3168 0008 0030             		move.w	8(a0),$30(a0)
00018A2C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018A32 117C 000F 0020             		move.b	#$F,$20(a0)
00018A38 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018A3E 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018A42 2248                       		movea.l	a0,a1
00018A44 7203                       		moveq	#3,d1
00018A46 6000                       		bra.s	Obj73_LoadBoss
00018A48                            ; ===========================================================================
00018A48                            
00018A48                            Obj73_Loop:
00018A48 4EB9 0000 E120             		jsr	SingleObjLoad2
00018A4E 6600                       		bne.s	Obj73_ShipMain
00018A50 12BC 0073                  		move.b	#$73,0(a1)
00018A54 3368 0008 0008             		move.w	8(a0),8(a1)
00018A5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018A60                            
00018A60                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018A60 08A8 0000 0022             		bclr	#0,$22(a0)
00018A66 4229 0025                  		clr.b	$25(a1)
00018A6A 135A 0024                  		move.b	(a2)+,$24(a1)
00018A6E 135A 001C                  		move.b	(a2)+,$1C(a1)
00018A72 135A 0018                  		move.b	(a2)+,$18(a1)
00018A76 237C 0001 84E0 0004        		move.l	#Map_Eggman,4(a1)
00018A7E 337C 0400 0002             		move.w	#$400,2(a1)
00018A84 137C 0004 0001             		move.b	#4,1(a1)
00018A8A 137C 0020 0019             		move.b	#$20,$19(a1)
00018A90 2348 0034                  		move.l	a0,$34(a1)
00018A94 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018A98                            
00018A98                            Obj73_ShipMain:
00018A98 7000                       		moveq	#0,d0
00018A9A 1028 0025                  		move.b	$25(a0),d0
00018A9E 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018AA2 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018AA6 43F9 0001 8490             		lea	(Ani_Eggman).l,a1
00018AAC 4EB9 0000 AD44             		jsr	AnimateSprite
00018AB2 7003                       		moveq	#3,d0
00018AB4 C028 0022                  		and.b	$22(a0),d0
00018AB8 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018ABE 8128 0001                  		or.b	d0,1(a0)
00018AC2 4EF9 0000 DC84             		jmp	DisplaySprite
00018AC8                            ; ===========================================================================
00018AC8 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018ACA 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018ACC 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018ACE 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018AD0 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018AD2                            ; ===========================================================================
00018AD2                            
00018AD2                            loc_18302:				; XREF: Obj73_ShipIndex
00018AD2 1028 003F                  		move.b	$3F(a0),d0
00018AD6 5428 003F                  		addq.b	#2,$3F(a0)
00018ADA 4EB9 0000 2C64             		jsr	(CalcSine).l
00018AE0 E440                       		asr.w	#2,d0
00018AE2 3140 0012                  		move.w	d0,$12(a0)
00018AE6 317C FF00 0010             		move.w	#-$100,$10(a0)
00018AEC 6100 F560                  		bsr.w	BossMove
00018AF0 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018AF6 6600                       		bne.s	loc_18334
00018AF8 5428 0025                  		addq.b	#2,$25(a0)
00018AFC 4228 0028                  		clr.b	$28(a0)
00018B00 42A8 0010                  		clr.l	$10(a0)
00018B04                            
00018B04                            loc_18334:
00018B04 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018B0A 1140 0034                  		move.b	d0,$34(a0)
00018B0E                            
00018B0E                            loc_1833E:
00018B0E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018B14 3168 0030 0008             		move.w	$30(a0),8(a0)
00018B1A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018B20 6400                       		bcc.s	locret_18390
00018B22 4A28 0022                  		tst.b	$22(a0)
00018B26 6B00                       		bmi.s	loc_18392
00018B28 4A28 0020                  		tst.b	$20(a0)
00018B2C 6600                       		bne.s	locret_18390
00018B2E 4A28 003E                  		tst.b	$3E(a0)
00018B32 6600                       		bne.s	loc_18374
00018B34 117C 0028 003E             		move.b	#$28,$3E(a0)
00018B3A 303C 00AC                  		move.w	#$AC,d0
00018B3E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018B44                            
00018B44                            loc_18374:
00018B44 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018B48 7000                       		moveq	#0,d0
00018B4A 4A51                       		tst.w	(a1)
00018B4C 6600                       		bne.s	loc_18382
00018B4E 303C 0EEE                  		move.w	#$EEE,d0
00018B52                            
00018B52                            loc_18382:
00018B52 3280                       		move.w	d0,(a1)
00018B54 5328 003E                  		subq.b	#1,$3E(a0)
00018B58 6600                       		bne.s	locret_18390
00018B5A 117C 000F 0020             		move.b	#$F,$20(a0)
00018B60                            
00018B60                            locret_18390:
00018B60 4E75                       		rts	
00018B62                            ; ===========================================================================
00018B62                            
00018B62                            loc_18392:				; XREF: loc_1833E
00018B62 7064                       		moveq	#100,d0
00018B64 6100 0000                  		bsr.w	AddPoints
00018B68 117C 0004 0025             		move.b	#4,$25(a0)
00018B6E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018B74 4268 0010                  		clr.w	$10(a0)
00018B78 4E75                       		rts	
00018B7A                            ; ===========================================================================
00018B7A                            
00018B7A                            loc_183AA:				; XREF: Obj73_ShipIndex
00018B7A 7000                       		moveq	#0,d0
00018B7C 1028 0028                  		move.b	$28(a0),d0
00018B80 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018B84 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018B88 0228 0006 0028             		andi.b	#6,$28(a0)
00018B8E 6000 FF7E                  		bra.w	loc_1833E
00018B92                            ; ===========================================================================
00018B92 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018B94 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018B96 0000                       		dc.w loc_183CA-off_183C2
00018B98 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018B9A                            ; ===========================================================================
00018B9A                            
00018B9A                            loc_183CA:				; XREF: off_183C2
00018B9A 4A68 0010                  		tst.w	$10(a0)
00018B9E 6600                       		bne.s	loc_183FE
00018BA0 7040                       		moveq	#$40,d0
00018BA2 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018BA8 6700                       		beq.s	loc_183E6
00018BAA 6500                       		bcs.s	loc_183DE
00018BAC 4440                       		neg.w	d0
00018BAE                            
00018BAE                            loc_183DE:
00018BAE 3140 0012                  		move.w	d0,$12(a0)
00018BB2 6000 F49A                  		bra.w	BossMove
00018BB6                            ; ===========================================================================
00018BB6                            
00018BB6                            loc_183E6:
00018BB6 317C 0200 0010             		move.w	#$200,$10(a0)
00018BBC 317C 0100 0012             		move.w	#$100,$12(a0)
00018BC2 0828 0000 0022             		btst	#0,$22(a0)
00018BC8 6600                       		bne.s	loc_183FE
00018BCA 4468 0010                  		neg.w	$10(a0)
00018BCE                            
00018BCE                            loc_183FE:
00018BCE 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018BD4 6400                       		bcc.s	Obj73_MakeLava
00018BD6 6100 F476                  		bsr.w	BossMove
00018BDA 5968 0012                  		subq.w	#4,$12(a0)
00018BDE                            
00018BDE                            Obj73_MakeLava:
00018BDE 5328 0034                  		subq.b	#1,$34(a0)
00018BE2 6400                       		bcc.s	loc_1845C
00018BE4 4EB9 0000 E10A             		jsr	SingleObjLoad
00018BEA 6600                       		bne.s	loc_1844A
00018BEC 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018BF0 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018BF6 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018BFC 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018C02 80FC 0050                  		divu.w	#$50,d0
00018C06 4840                       		swap	d0
00018C08 0640 1878                  		addi.w	#$1878,d0
00018C0C 3340 0008                  		move.w	d0,8(a1)
00018C10 EE09                       		lsr.b	#7,d1
00018C12 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018C18                            
00018C18                            loc_1844A:
00018C18 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018C1E 0200 001F                  		andi.b	#$1F,d0
00018C22 0600 0040                  		addi.b	#$40,d0
00018C26 1140 0034                  		move.b	d0,$34(a0)
00018C2A                            
00018C2A                            loc_1845C:
00018C2A 0828 0000 0022             		btst	#0,$22(a0)
00018C30 6700                       		beq.s	loc_18474
00018C32 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018C38 6D00                       		blt.s	locret_1849C
00018C3A 317C 1910 0030             		move.w	#$1910,$30(a0)
00018C40 6000                       		bra.s	loc_18482
00018C42                            ; ===========================================================================
00018C42                            
00018C42                            loc_18474:
00018C42 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018C48 6E00                       		bgt.s	locret_1849C
00018C4A 317C 1830 0030             		move.w	#$1830,$30(a0)
00018C50                            
00018C50                            loc_18482:
00018C50 4268 0010                  		clr.w	$10(a0)
00018C54 317C FE80 0012             		move.w	#-$180,$12(a0)
00018C5A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018C60 6400                       		bcc.s	loc_18498
00018C62 4468 0012                  		neg.w	$12(a0)
00018C66                            
00018C66                            loc_18498:
00018C66 5428 0028                  		addq.b	#2,$28(a0)
00018C6A                            
00018C6A                            locret_1849C:
00018C6A 4E75                       		rts	
00018C6C                            ; ===========================================================================
00018C6C                            
00018C6C                            Obj73_MakeLava2:			; XREF: off_183C2
00018C6C 6100 F3E0                  		bsr.w	BossMove
00018C70 3028 0038                  		move.w	$38(a0),d0
00018C74 0440 022C                  		subi.w	#$22C,d0
00018C78 6E00                       		bgt.s	locret_184F4
00018C7A 303C 022C                  		move.w	#$22C,d0
00018C7E 4A68 0012                  		tst.w	$12(a0)
00018C82 6700                       		beq.s	loc_184EA
00018C84 4268 0012                  		clr.w	$12(a0)
00018C88 317C 0050 003C             		move.w	#$50,$3C(a0)
00018C8E 0868 0000 0022             		bchg	#0,$22(a0)
00018C94 4EB9 0000 E10A             		jsr	SingleObjLoad
00018C9A 6600                       		bne.s	loc_184EA
00018C9C 3368 0030 0008             		move.w	$30(a0),8(a1)
00018CA2 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018CA8 0669 0018 000C             		addi.w	#$18,$C(a1)
00018CAE 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018CB2 137C 0001 0028             		move.b	#1,$28(a1)
00018CB8                            
00018CB8                            loc_184EA:
00018CB8 5368 003C                  		subq.w	#1,$3C(a0)
00018CBC 6600                       		bne.s	locret_184F4
00018CBE 5428 0028                  		addq.b	#2,$28(a0)
00018CC2                            
00018CC2                            locret_184F4:
00018CC2 4E75                       		rts	
00018CC4                            ; ===========================================================================
00018CC4                            
00018CC4                            loc_184F6:				; XREF: Obj73_ShipIndex
00018CC4 5368 003C                  		subq.w	#1,$3C(a0)
00018CC8 6B00                       		bmi.s	loc_18500
00018CCA 6000 F340                  		bra.w	BossDefeated
00018CCE                            ; ===========================================================================
00018CCE                            
00018CCE                            loc_18500:
00018CCE 08E8 0000 0022             		bset	#0,$22(a0)
00018CD4 08A8 0007 0022             		bclr	#7,$22(a0)
00018CDA 4268 0010                  		clr.w	$10(a0)
00018CDE 5428 0025                  		addq.b	#2,$25(a0)
00018CE2 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018CE8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018CEC 6600                       		bne.s	locret_1852A
00018CEE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018CF4 4268 0012                  		clr.w	$12(a0)
00018CF8                            
00018CF8                            locret_1852A:
00018CF8 4E75                       		rts	
00018CFA                            ; ===========================================================================
00018CFA                            
00018CFA                            loc_1852C:				; XREF: Obj73_ShipIndex
00018CFA 5268 003C                  		addq.w	#1,$3C(a0)
00018CFE 6700                       		beq.s	loc_18544
00018D00 6A00                       		bpl.s	loc_1854E
00018D02 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018D08 6400                       		bcc.s	loc_18544
00018D0A 0668 0018 0012             		addi.w	#$18,$12(a0)
00018D10 6000                       		bra.s	loc_1857A
00018D12                            ; ===========================================================================
00018D12                            
00018D12                            loc_18544:
00018D12 4268 0012                  		clr.w	$12(a0)
00018D16 4268 003C                  		clr.w	$3C(a0)
00018D1A 6000                       		bra.s	loc_1857A
00018D1C                            ; ===========================================================================
00018D1C                            
00018D1C                            loc_1854E:
00018D1C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018D22 6500                       		bcs.s	loc_18566
00018D24 6700                       		beq.s	loc_1856C
00018D26 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018D2C 6500                       		bcs.s	loc_1857A
00018D2E 5428 0025                  		addq.b	#2,$25(a0)
00018D32 6000                       		bra.s	loc_1857A
00018D34                            ; ===========================================================================
00018D34                            
00018D34                            loc_18566:
00018D34 5168 0012                  		subq.w	#8,$12(a0)
00018D38 6000                       		bra.s	loc_1857A
00018D3A                            ; ===========================================================================
00018D3A                            
00018D3A                            loc_1856C:
00018D3A 4268 0012                  		clr.w	$12(a0)
00018D3E 303C 0083                  		move.w	#$83,d0
00018D42 4EB9 0000 15BA             		jsr	(PlaySound).l	; play MZ music
00018D48                            
00018D48                            loc_1857A:
00018D48 6100 F304                  		bsr.w	BossMove
00018D4C 6000 FDC0                  		bra.w	loc_1833E
00018D50                            ; ===========================================================================
00018D50                            
00018D50                            loc_18582:				; XREF: Obj73_ShipIndex
00018D50 317C 0500 0010             		move.w	#$500,$10(a0)
00018D56 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018D5C 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018D62 6400                       		bcc.s	loc_1859C
00018D64 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018D68 6000                       		bra.s	loc_185A2
00018D6A                            ; ===========================================================================
00018D6A                            
00018D6A                            loc_1859C:
00018D6A 4A28 0001                  		tst.b	1(a0)
00018D6E 6A00                       		bpl.s	Obj73_ShipDel
00018D70                            
00018D70                            loc_185A2:
00018D70 6100 F2DC                  		bsr.w	BossMove
00018D74 6000 FD98                  		bra.w	loc_1833E
00018D78                            ; ===========================================================================
00018D78                            
00018D78                            Obj73_ShipDel:
00018D78 4EF9 0000 DCC0             		jmp	DeleteObject
00018D7E                            ; ===========================================================================
00018D7E                            
00018D7E                            Obj73_FaceMain:				; XREF: Obj73_Index
00018D7E 7000                       		moveq	#0,d0
00018D80 7201                       		moveq	#1,d1
00018D82 2268 0034                  		movea.l	$34(a0),a1
00018D86 1029 0025                  		move.b	$25(a1),d0
00018D8A 5540                       		subq.w	#2,d0
00018D8C 6600                       		bne.s	loc_185D2
00018D8E 0829 0001 0028             		btst	#1,$28(a1)
00018D94 6700                       		beq.s	loc_185DA
00018D96 4A69 0012                  		tst.w	$12(a1)
00018D9A 6600                       		bne.s	loc_185DA
00018D9C 7204                       		moveq	#4,d1
00018D9E 6000                       		bra.s	loc_185EE
00018DA0                            ; ===========================================================================
00018DA0                            
00018DA0                            loc_185D2:
00018DA0 5500                       		subq.b	#2,d0
00018DA2 6B00                       		bmi.s	loc_185DA
00018DA4 720A                       		moveq	#$A,d1
00018DA6 6000                       		bra.s	loc_185EE
00018DA8                            ; ===========================================================================
00018DA8                            
00018DA8                            loc_185DA:
00018DA8 4A29 0020                  		tst.b	$20(a1)
00018DAC 6600                       		bne.s	loc_185E4
00018DAE 7205                       		moveq	#5,d1
00018DB0 6000                       		bra.s	loc_185EE
00018DB2                            ; ===========================================================================
00018DB2                            
00018DB2                            loc_185E4:
00018DB2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018DB8 6500                       		bcs.s	loc_185EE
00018DBA 7204                       		moveq	#4,d1
00018DBC                            
00018DBC                            loc_185EE:
00018DBC 1141 001C                  		move.b	d1,$1C(a0)
00018DC0 5900                       		subq.b	#4,d0
00018DC2 6600                       		bne.s	loc_18602
00018DC4 117C 0006 001C             		move.b	#6,$1C(a0)
00018DCA 4A28 0001                  		tst.b	1(a0)
00018DCE 6A00                       		bpl.s	Obj73_FaceDel
00018DD0                            
00018DD0                            loc_18602:
00018DD0 6000                       		bra.s	Obj73_Display
00018DD2                            ; ===========================================================================
00018DD2                            
00018DD2                            Obj73_FaceDel:
00018DD2 4EF9 0000 DCC0             		jmp	DeleteObject
00018DD8                            ; ===========================================================================
00018DD8                            
00018DD8                            Obj73_FlameMain:			; XREF: Obj73_Index
00018DD8 117C 0007 001C             		move.b	#7,$1C(a0)
00018DDE 2268 0034                  		movea.l	$34(a0),a1
00018DE2 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018DE8 6D00                       		blt.s	loc_1862A
00018DEA 117C 000B 001C             		move.b	#$B,$1C(a0)
00018DF0 4A28 0001                  		tst.b	1(a0)
00018DF4 6A00                       		bpl.s	Obj73_FlameDel
00018DF6 6000                       		bra.s	loc_18636
00018DF8                            ; ===========================================================================
00018DF8                            
00018DF8                            loc_1862A:
00018DF8 4A69 0010                  		tst.w	$10(a1)
00018DFC 6700                       		beq.s	loc_18636
00018DFE 117C 0008 001C             		move.b	#8,$1C(a0)
00018E04                            
00018E04                            loc_18636:
00018E04 6000                       		bra.s	Obj73_Display
00018E06                            ; ===========================================================================
00018E06                            
00018E06                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018E06 4EF9 0000 DCC0             		jmp	DeleteObject
00018E0C                            ; ===========================================================================
00018E0C                            
00018E0C                            Obj73_Display:
00018E0C 43F9 0001 8490             		lea	(Ani_Eggman).l,a1
00018E12 4EB9 0000 AD44             		jsr	AnimateSprite
00018E18                            
00018E18                            loc_1864A:
00018E18 2268 0034                  		movea.l	$34(a0),a1
00018E1C 3169 0008 0008             		move.w	8(a1),8(a0)
00018E22 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018E28 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018E2E 7003                       		moveq	#3,d0
00018E30 C028 0022                  		and.b	$22(a0),d0
00018E34 0228 00FC 0001             		andi.b	#-4,1(a0)
00018E3A 8128 0001                  		or.b	d0,1(a0)
00018E3E 4EF9 0000 DC84             		jmp	DisplaySprite
00018E44                            ; ===========================================================================
00018E44                            
00018E44                            Obj73_TubeMain:				; XREF: Obj73_Index
00018E44 2268 0034                  		movea.l	$34(a0),a1
00018E48 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018E4E 6600                       		bne.s	loc_18688
00018E50 4A28 0001                  		tst.b	1(a0)
00018E54 6A00                       		bpl.s	Obj73_TubeDel
00018E56                            
00018E56                            loc_18688:
00018E56 217C 0001 85A8 0004        		move.l	#Map_BossItems,4(a0)
00018E5E 317C 246C 0002             		move.w	#$246C,2(a0)
00018E64 117C 0004 001A             		move.b	#4,$1A(a0)
00018E6A 60AC                       		bra.s	loc_1864A
00018E6C                            ; ===========================================================================
00018E6C                            
00018E6C                            Obj73_TubeDel:
00018E6C 4EF9 0000 DCC0             		jmp	DeleteObject
00018E72                            ; ===========================================================================
00018E72                            ; ---------------------------------------------------------------------------
00018E72                            ; Object 74 - lava that	Eggman drops (MZ)
00018E72                            ; ---------------------------------------------------------------------------
00018E72                            
00018E72                            Obj74:					; XREF: Obj_Index
00018E72 7000                       		moveq	#0,d0
00018E74 1028 0024                  		move.b	$24(a0),d0
00018E78 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018E7C 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018E80 4EF9 0000 DC84             		jmp	DisplaySprite
00018E86                            ; ===========================================================================
00018E86 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018E88 0000                       		dc.w Obj74_Action-Obj74_Index
00018E8A 0000                       		dc.w loc_18886-Obj74_Index
00018E8C 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018E8E                            ; ===========================================================================
00018E8E                            
00018E8E                            Obj74_Main:				; XREF: Obj74_Index
00018E8E 117C 0008 0016             		move.b	#8,$16(a0)
00018E94 117C 0008 0017             		move.b	#8,$17(a0)
00018E9A 217C 0000 B942 0004        		move.l	#Map_obj14,4(a0)
00018EA2 317C 0345 0002             		move.w	#$345,2(a0)
00018EA8 117C 0004 0001             		move.b	#4,1(a0)
00018EAE 117C 0005 0018             		move.b	#5,$18(a0)
00018EB4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018EBA 117C 0008 0019             		move.b	#8,$19(a0)
00018EC0 5428 0024                  		addq.b	#2,$24(a0)
00018EC4 4A28 0028                  		tst.b	$28(a0)
00018EC8 6600                       		bne.s	loc_1870A
00018ECA 117C 008B 0020             		move.b	#$8B,$20(a0)
00018ED0 5428 0024                  		addq.b	#2,$24(a0)
00018ED4 6000 0000                  		bra.w	loc_18886
00018ED8                            ; ===========================================================================
00018ED8                            
00018ED8                            loc_1870A:
00018ED8 117C 001E 0029             		move.b	#$1E,$29(a0)
00018EDE 303C 00AE                  		move.w	#$AE,d0
00018EE2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava sound
00018EE8                            
00018EE8                            Obj74_Action:				; XREF: Obj74_Index
00018EE8 7000                       		moveq	#0,d0
00018EEA 1028 0025                  		move.b	$25(a0),d0
00018EEE 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018EF2 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018EF6 4EB9 0000 DC5E             		jsr	SpeedToPos
00018EFC 43F9 0000 EB3E             		lea	(Ani_obj14).l,a1
00018F02 4EB9 0000 AD44             		jsr	AnimateSprite
00018F08 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018F0E 6200                       		bhi.s	Obj74_Delete
00018F10 4E75                       		rts	
00018F12                            ; ===========================================================================
00018F12                            
00018F12                            Obj74_Delete:
00018F12 4EF9 0000 DCC0             		jmp	DeleteObject
00018F18                            ; ===========================================================================
00018F18 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018F1A 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018F1C 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018F1E 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018F20                            ; ===========================================================================
00018F20                            
00018F20                            Obj74_Drop:				; XREF: Obj74_Index2
00018F20 08E8 0001 0022             		bset	#1,$22(a0)
00018F26 5328 0029                  		subq.b	#1,$29(a0)
00018F2A 6A00                       		bpl.s	locret_18780
00018F2C 117C 008B 0020             		move.b	#$8B,$20(a0)
00018F32 4228 0028                  		clr.b	$28(a0)
00018F36 0668 0018 0012             		addi.w	#$18,$12(a0)
00018F3C 08A8 0001 0022             		bclr	#1,$22(a0)
00018F42 6100 C63A                  		bsr.w	ObjHitFloor
00018F46 4A41                       		tst.w	d1
00018F48 6A00                       		bpl.s	locret_18780
00018F4A 5428 0025                  		addq.b	#2,$25(a0)
00018F4E                            
00018F4E                            locret_18780:
00018F4E 4E75                       		rts	
00018F50                            ; ===========================================================================
00018F50                            
00018F50                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018F50 5568 000C                  		subq.w	#2,$C(a0)
00018F54 08E8 0007 0002             		bset	#7,2(a0)
00018F5A 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018F60 4268 0012                  		clr.w	$12(a0)
00018F64 3168 0008 0030             		move.w	8(a0),$30(a0)
00018F6A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018F70 117C 0003 0029             		move.b	#3,$29(a0)
00018F76 4EB9 0000 E120             		jsr	SingleObjLoad2
00018F7C 6600                       		bne.s	loc_187CA
00018F7E 47D1                       		lea	(a1),a3
00018F80 45D0                       		lea	(a0),a2
00018F82 7003                       		moveq	#3,d0
00018F84                            
00018F84                            Obj74_Loop:
00018F84 26DA                       		move.l	(a2)+,(a3)+
00018F86 26DA                       		move.l	(a2)+,(a3)+
00018F88 26DA                       		move.l	(a2)+,(a3)+
00018F8A 26DA                       		move.l	(a2)+,(a3)+
00018F8C 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018F90                            
00018F90 4469 0010                  		neg.w	$10(a1)
00018F94 5429 0025                  		addq.b	#2,$25(a1)
00018F98                            
00018F98                            loc_187CA:
00018F98 5428 0025                  		addq.b	#2,$25(a0)
00018F9C 4E75                       		rts	
00018F9E                            
00018F9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018F9E                            
00018F9E                            
00018F9E                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018F9E 4EB9 0000 E120             		jsr	SingleObjLoad2
00018FA4 6600                       		bne.s	locret_187EE
00018FA6 3368 0008 0008             		move.w	8(a0),8(a1)
00018FAC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018FB2 12BC 0074                  		move.b	#$74,(a1)
00018FB6 337C 0067 0028             		move.w	#$67,$28(a1)
00018FBC                            
00018FBC                            locret_187EE:
00018FBC 4E75                       		rts	
00018FBE                            ; End of function Obj74_Duplicate2
00018FBE                            
00018FBE                            ; ===========================================================================
00018FBE                            
00018FBE                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018FBE 6100 C5BE                  		bsr.w	ObjHitFloor
00018FC2 4A41                       		tst.w	d1
00018FC4 6A00                       		bpl.s	loc_18826
00018FC6 3028 0008                  		move.w	8(a0),d0
00018FCA 0C40 1940                  		cmpi.w	#$1940,d0
00018FCE 6E00                       		bgt.s	loc_1882C
00018FD0 3228 0030                  		move.w	$30(a0),d1
00018FD4 B240                       		cmp.w	d0,d1
00018FD6 6700                       		beq.s	loc_1881E
00018FD8 0240 0010                  		andi.w	#$10,d0
00018FDC 0241 0010                  		andi.w	#$10,d1
00018FE0 B240                       		cmp.w	d0,d1
00018FE2 6700                       		beq.s	loc_1881E
00018FE4 61B8                       		bsr.s	Obj74_Duplicate2
00018FE6 3168 0008 0032             		move.w	8(a0),$32(a0)
00018FEC                            
00018FEC                            loc_1881E:
00018FEC 3168 0008 0030             		move.w	8(a0),$30(a0)
00018FF2 4E75                       		rts	
00018FF4                            ; ===========================================================================
00018FF4                            
00018FF4                            loc_18826:
00018FF4 5428 0025                  		addq.b	#2,$25(a0)
00018FF8 4E75                       		rts	
00018FFA                            ; ===========================================================================
00018FFA                            
00018FFA                            loc_1882C:
00018FFA 5428 0024                  		addq.b	#2,$24(a0)
00018FFE 4E75                       		rts	
00019000                            ; ===========================================================================
00019000                            
00019000                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019000 08A8 0001 0022             		bclr	#1,$22(a0)
00019006 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001900C 3028 0008                  		move.w	8(a0),d0
00019010 9068 0032                  		sub.w	$32(a0),d0
00019014 6A00                       		bpl.s	loc_1884A
00019016 4440                       		neg.w	d0
00019018                            
00019018                            loc_1884A:
00019018 0C40 0012                  		cmpi.w	#$12,d0
0001901C 6600                       		bne.s	loc_18856
0001901E 08A8 0007 0002             		bclr	#7,2(a0)
00019024                            
00019024                            loc_18856:
00019024 6100 C558                  		bsr.w	ObjHitFloor
00019028 4A41                       		tst.w	d1
0001902A 6A00                       		bpl.s	locret_1887E
0001902C 5328 0029                  		subq.b	#1,$29(a0)
00019030 6700                       		beq.s	Obj74_Delete2
00019032 4268 0012                  		clr.w	$12(a0)
00019036 3168 0032 0008             		move.w	$32(a0),8(a0)
0001903C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019042 08E8 0007 0002             		bset	#7,2(a0)
00019048 5528 0025                  		subq.b	#2,$25(a0)
0001904C                            
0001904C                            locret_1887E:
0001904C 4E75                       		rts	
0001904E                            ; ===========================================================================
0001904E                            
0001904E                            Obj74_Delete2:
0001904E 4EF9 0000 DCC0             		jmp	DeleteObject
00019054                            ; ===========================================================================
00019054                            
00019054                            loc_18886:				; XREF: Obj74_Index
00019054 08E8 0007 0002             		bset	#7,2(a0)
0001905A 5328 0029                  		subq.b	#1,$29(a0)
0001905E 6600                       		bne.s	Obj74_Animate
00019060 117C 0001 001C             		move.b	#1,$1C(a0)
00019066 5968 000C                  		subq.w	#4,$C(a0)
0001906A 4228 0020                  		clr.b	$20(a0)
0001906E                            
0001906E                            Obj74_Animate:
0001906E 43F9 0000 EB3E             		lea	(Ani_obj14).l,a1
00019074 4EF9 0000 AD44             		jmp	AnimateSprite
0001907A                            ; ===========================================================================
0001907A                            
0001907A                            Obj74_Delete3:				; XREF: Obj74_Index
0001907A 4EF9 0000 DCC0             		jmp	DeleteObject
00019080                            ; ===========================================================================
00019080                            
00019080                            Obj7A_Delete:
00019080 4EF9 0000 DCC0             		jmp	DeleteObject
00019086                            ; ===========================================================================
00019086                            ; ---------------------------------------------------------------------------
00019086                            ; Object 7A - Eggman (SLZ)
00019086                            ; ---------------------------------------------------------------------------
00019086                            
00019086                            Obj7A:					; XREF: Obj_Index
00019086 7000                       		moveq	#0,d0
00019088 1028 0024                  		move.b	$24(a0),d0
0001908C 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00019090 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00019094                            ; ===========================================================================
00019094 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019096 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00019098 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001909A 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001909C 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001909E                            
0001909E 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000190A1 0401 04                    		dc.b 4,	1, 4
000190A4 0607 04                    		dc.b 6,	7, 4
000190A7 0800 03                    		dc.b 8,	0, 3
000190AA                            ; ===========================================================================
000190AA                            
000190AA                            Obj7A_Main:				; XREF: Obj7A_Index
000190AA 317C 2188 0008             		move.w	#$2188,8(a0)
000190B0 317C 0228 000C             		move.w	#$228,$C(a0)
000190B6 3168 0008 0030             		move.w	8(a0),$30(a0)
000190BC 3168 000C 0038             		move.w	$C(a0),$38(a0)
000190C2 117C 000F 0020             		move.b	#$F,$20(a0)
000190C8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000190CE 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000190D2 2248                       		movea.l	a0,a1
000190D4 7203                       		moveq	#3,d1
000190D6 6000                       		bra.s	Obj7A_LoadBoss
000190D8                            ; ===========================================================================
000190D8                            
000190D8                            Obj7A_Loop:
000190D8 4EB9 0000 E120             		jsr	SingleObjLoad2
000190DE 6600                       		bne.s	loc_1895C
000190E0 12BC 007A                  		move.b	#$7A,0(a1)
000190E4 3368 0008 0008             		move.w	8(a0),8(a1)
000190EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000190F0                            
000190F0                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
000190F0 08A8 0000 0022             		bclr	#0,$22(a0)
000190F6 4229 0025                  		clr.b	$25(a1)
000190FA 135A 0024                  		move.b	(a2)+,$24(a1)
000190FE 135A 001C                  		move.b	(a2)+,$1C(a1)
00019102 135A 0018                  		move.b	(a2)+,$18(a1)
00019106 237C 0001 84E0 0004        		move.l	#Map_Eggman,4(a1)
0001910E 337C 0400 0002             		move.w	#$400,2(a1)
00019114 137C 0004 0001             		move.b	#4,1(a1)
0001911A 137C 0020 0019             		move.b	#$20,$19(a1)
00019120 2348 0034                  		move.l	a0,$34(a1)
00019124 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019128                            
00019128                            loc_1895C:
00019128 43F8 D040                  		lea	($FFFFD040).w,a1
0001912C 45E8 002A                  		lea	$2A(a0),a2
00019130 705E                       		moveq	#$5E,d0
00019132 723E                       		moveq	#$3E,d1
00019134                            
00019134                            loc_18968:
00019134 B011                       		cmp.b	(a1),d0
00019136 6600                       		bne.s	loc_18974
00019138 4A29 0028                  		tst.b	$28(a1)
0001913C 6700                       		beq.s	loc_18974
0001913E 34C9                       		move.w	a1,(a2)+
00019140                            
00019140                            loc_18974:
00019140 D2FC 0040                  		adda.w	#$40,a1
00019144 51C9 FFEE                  		dbf	d1,loc_18968
00019148                            
00019148                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019148 7000                       		moveq	#0,d0
0001914A 1028 0025                  		move.b	$25(a0),d0
0001914E 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019152 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019156 43F9 0001 8490             		lea	(Ani_Eggman).l,a1
0001915C 4EB9 0000 AD44             		jsr	AnimateSprite
00019162 7003                       		moveq	#3,d0
00019164 C028 0022                  		and.b	$22(a0),d0
00019168 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001916E 8128 0001                  		or.b	d0,1(a0)
00019172 4EF9 0000 DC84             		jmp	DisplaySprite
00019178                            ; ===========================================================================
00019178 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001917A 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001917C 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001917E 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019180 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019182 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019184                            ; ===========================================================================
00019184                            
00019184                            loc_189B8:				; XREF: Obj7A_ShipIndex
00019184 317C FF00 0010             		move.w	#-$100,$10(a0)
0001918A 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019190 6400                       		bcc.s	loc_189CA
00019192 5428 0025                  		addq.b	#2,$25(a0)
00019196                            
00019196                            loc_189CA:
00019196 6100 EEB6                  		bsr.w	BossMove
0001919A 1028 003F                  		move.b	$3F(a0),d0
0001919E 5428 003F                  		addq.b	#2,$3F(a0)
000191A2 4EB9 0000 2C64             		jsr	(CalcSine).l
000191A8 EC40                       		asr.w	#6,d0
000191AA D068 0038                  		add.w	$38(a0),d0
000191AE 3140 000C                  		move.w	d0,$C(a0)
000191B2 3168 0030 0008             		move.w	$30(a0),8(a0)
000191B8 6000                       		bra.s	loc_189FE
000191BA                            ; ===========================================================================
000191BA                            
000191BA                            loc_189EE:
000191BA 6100 EE92                  		bsr.w	BossMove
000191BE 3168 0038 000C             		move.w	$38(a0),$C(a0)
000191C4 3168 0030 0008             		move.w	$30(a0),8(a0)
000191CA                            
000191CA                            loc_189FE:
000191CA 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000191D0 6400                       		bcc.s	locret_18A44
000191D2 4A28 0022                  		tst.b	$22(a0)
000191D6 6B00                       		bmi.s	loc_18A46
000191D8 4A28 0020                  		tst.b	$20(a0)
000191DC 6600                       		bne.s	locret_18A44
000191DE 4A28 003E                  		tst.b	$3E(a0)
000191E2 6600                       		bne.s	loc_18A28
000191E4 117C 0020 003E             		move.b	#$20,$3E(a0)
000191EA 303C 00AC                  		move.w	#$AC,d0
000191EE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
000191F4                            
000191F4                            loc_18A28:
000191F4 43F8 FB22                  		lea	($FFFFFB22).w,a1
000191F8 7000                       		moveq	#0,d0
000191FA 4A51                       		tst.w	(a1)
000191FC 6600                       		bne.s	loc_18A36
000191FE 303C 0EEE                  		move.w	#$EEE,d0
00019202                            
00019202                            loc_18A36:
00019202 3280                       		move.w	d0,(a1)
00019204 5328 003E                  		subq.b	#1,$3E(a0)
00019208 6600                       		bne.s	locret_18A44
0001920A 117C 000F 0020             		move.b	#$F,$20(a0)
00019210                            
00019210                            locret_18A44:
00019210 4E75                       		rts	
00019212                            ; ===========================================================================
00019212                            
00019212                            loc_18A46:
00019212 7064                       		moveq	#100,d0
00019214 6100 0000                  		bsr.w	AddPoints
00019218 117C 0006 0025             		move.b	#6,$25(a0)
0001921E 117C 0078 003C             		move.b	#$78,$3C(a0)
00019224 4268 0010                  		clr.w	$10(a0)
00019228 4E75                       		rts	
0001922A                            ; ===========================================================================
0001922A                            
0001922A                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001922A 3028 0030                  		move.w	$30(a0),d0
0001922E 317C 0200 0010             		move.w	#$200,$10(a0)
00019234 0828 0000 0022             		btst	#0,$22(a0)
0001923A 6600                       		bne.s	loc_18A7C
0001923C 4468 0010                  		neg.w	$10(a0)
00019240 0C40 2008                  		cmpi.w	#$2008,d0
00019244 6E00                       		bgt.s	loc_18A88
00019246 6000                       		bra.s	loc_18A82
00019248                            ; ===========================================================================
00019248                            
00019248                            loc_18A7C:
00019248 0C40 2138                  		cmpi.w	#$2138,d0
0001924C 6D00                       		blt.s	loc_18A88
0001924E                            
0001924E                            loc_18A82:
0001924E 0868 0000 0022             		bchg	#0,$22(a0)
00019254                            
00019254                            loc_18A88:
00019254 3028 0008                  		move.w	8(a0),d0
00019258 72FF                       		moveq	#-1,d1
0001925A 7402                       		moveq	#2,d2
0001925C 45E8 002A                  		lea	$2A(a0),a2
00019260 7828                       		moveq	#$28,d4
00019262 4A68 0010                  		tst.w	$10(a0)
00019266 6A00                       		bpl.s	loc_18A9E
00019268 4444                       		neg.w	d4
0001926A                            
0001926A                            loc_18A9E:
0001926A 321A                       		move.w	(a2)+,d1
0001926C 2641                       		movea.l	d1,a3
0001926E 082B 0003 0022             		btst	#3,$22(a3)
00019274 6600                       		bne.s	loc_18AB4
00019276 362B 0008                  		move.w	8(a3),d3
0001927A D644                       		add.w	d4,d3
0001927C 9640                       		sub.w	d0,d3
0001927E 6700                       		beq.s	loc_18AC0
00019280                            
00019280                            loc_18AB4:
00019280 51CA FFE8                  		dbf	d2,loc_18A9E
00019284                            
00019284 1142 0028                  		move.b	d2,$28(a0)
00019288 6000 FF0C                  		bra.w	loc_189CA
0001928C                            ; ===========================================================================
0001928C                            
0001928C                            loc_18AC0:
0001928C 1142 0028                  		move.b	d2,$28(a0)
00019290 5428 0025                  		addq.b	#2,$25(a0)
00019294 117C 0028 003C             		move.b	#$28,$3C(a0)
0001929A 6000 FEFA                  		bra.w	loc_189CA
0001929E                            ; ===========================================================================
0001929E                            
0001929E                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001929E 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000192A4 6600                       		bne.s	loc_18B36
000192A6 70FF                       		moveq	#-1,d0
000192A8 1028 0028                  		move.b	$28(a0),d0
000192AC 4880                       		ext.w	d0
000192AE 6B00                       		bmi.s	loc_18B40
000192B0 5540                       		subq.w	#2,d0
000192B2 4440                       		neg.w	d0
000192B4 D040                       		add.w	d0,d0
000192B6 43E8 002A                  		lea	$2A(a0),a1
000192BA 3031 0000                  		move.w	(a1,d0.w),d0
000192BE 2440                       		movea.l	d0,a2
000192C0 43F8 D040                  		lea	($FFFFD040).w,a1
000192C4 723E                       		moveq	#$3E,d1
000192C6                            
000192C6                            loc_18AFA:
000192C6 B0A9 003C                  		cmp.l	$3C(a1),d0
000192CA 6700                       		beq.s	loc_18B40
000192CC D2FC 0040                  		adda.w	#$40,a1
000192D0 51C9 FFF4                  		dbf	d1,loc_18AFA
000192D4                            
000192D4 2F08                       		move.l	a0,-(sp)
000192D6 41D2                       		lea	(a2),a0
000192D8 4EB9 0000 E120             		jsr	SingleObjLoad2
000192DE 205F                       		movea.l	(sp)+,a0
000192E0 6600                       		bne.s	loc_18B40
000192E2 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
000192E6 3368 0008 0008             		move.w	8(a0),8(a1)
000192EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000192F2 0669 0020 000C             		addi.w	#$20,$C(a1)
000192F8 136A 0022 0022             		move.b	$22(a2),$22(a1)
000192FE 234A 003C                  		move.l	a2,$3C(a1)
00019302                            
00019302                            loc_18B36:
00019302 5328 003C                  		subq.b	#1,$3C(a0)
00019306 6700                       		beq.s	loc_18B40
00019308 6000 FEC0                  		bra.w	loc_189FE
0001930C                            ; ===========================================================================
0001930C                            
0001930C                            loc_18B40:
0001930C 5528 0025                  		subq.b	#2,$25(a0)
00019310 6000 FE84                  		bra.w	loc_189CA
00019314                            ; ===========================================================================
00019314                            
00019314                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019314 5328 003C                  		subq.b	#1,$3C(a0)
00019318 6B00                       		bmi.s	loc_18B52
0001931A 6000 ECF0                  		bra.w	BossDefeated
0001931E                            ; ===========================================================================
0001931E                            
0001931E                            loc_18B52:
0001931E 5428 0025                  		addq.b	#2,$25(a0)
00019322 4268 0012                  		clr.w	$12(a0)
00019326 08E8 0000 0022             		bset	#0,$22(a0)
0001932C 08A8 0007 0022             		bclr	#7,$22(a0)
00019332 4268 0010                  		clr.w	$10(a0)
00019336 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001933C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019340 6600                       		bne.s	loc_18B7C
00019342 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019348                            
00019348                            loc_18B7C:
00019348 6000 FE80                  		bra.w	loc_189FE
0001934C                            ; ===========================================================================
0001934C                            
0001934C                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001934C 5228 003C                  		addq.b	#1,$3C(a0)
00019350 6700                       		beq.s	loc_18B90
00019352 6A00                       		bpl.s	loc_18B96
00019354 0668 0018 0012             		addi.w	#$18,$12(a0)
0001935A 6000                       		bra.s	loc_18BC2
0001935C                            ; ===========================================================================
0001935C                            
0001935C                            loc_18B90:
0001935C 4268 0012                  		clr.w	$12(a0)
00019360 6000                       		bra.s	loc_18BC2
00019362                            ; ===========================================================================
00019362                            
00019362                            loc_18B96:
00019362 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019368 6500                       		bcs.s	loc_18BAE
0001936A 6700                       		beq.s	loc_18BB4
0001936C 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019372 6500                       		bcs.s	loc_18BC2
00019374 5428 0025                  		addq.b	#2,$25(a0)
00019378 6000                       		bra.s	loc_18BC2
0001937A                            ; ===========================================================================
0001937A                            
0001937A                            loc_18BAE:
0001937A 5168 0012                  		subq.w	#8,$12(a0)
0001937E 6000                       		bra.s	loc_18BC2
00019380                            ; ===========================================================================
00019380                            
00019380                            loc_18BB4:
00019380 4268 0012                  		clr.w	$12(a0)
00019384 303C 0084                  		move.w	#$84,d0
00019388 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SLZ music
0001938E                            
0001938E                            loc_18BC2:
0001938E 6000 FE2A                  		bra.w	loc_189EE
00019392                            ; ===========================================================================
00019392                            
00019392                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019392 317C 0400 0010             		move.w	#$400,$10(a0)
00019398 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001939E 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000193A4 6400                       		bcc.s	loc_18BE0
000193A6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000193AA 6000                       		bra.s	loc_18BE8
000193AC                            ; ===========================================================================
000193AC                            
000193AC                            loc_18BE0:
000193AC 4A28 0001                  		tst.b	1(a0)
000193B0 6A00 FCCE                  		bpl.w	Obj7A_Delete
000193B4                            
000193B4                            loc_18BE8:
000193B4 6100 EC98                  		bsr.w	BossMove
000193B8 6000 FDDC                  		bra.w	loc_189CA
000193BC                            ; ===========================================================================
000193BC                            
000193BC                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000193BC 7000                       		moveq	#0,d0
000193BE 7201                       		moveq	#1,d1
000193C0 2268 0034                  		movea.l	$34(a0),a1
000193C4 1029 0025                  		move.b	$25(a1),d0
000193C8 0C00 0006                  		cmpi.b	#6,d0
000193CC 6B00                       		bmi.s	loc_18C06
000193CE 720A                       		moveq	#$A,d1
000193D0 6000                       		bra.s	loc_18C1A
000193D2                            ; ===========================================================================
000193D2                            
000193D2                            loc_18C06:
000193D2 4A29 0020                  		tst.b	$20(a1)
000193D6 6600                       		bne.s	loc_18C10
000193D8 7205                       		moveq	#5,d1
000193DA 6000                       		bra.s	loc_18C1A
000193DC                            ; ===========================================================================
000193DC                            
000193DC                            loc_18C10:
000193DC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000193E2 6500                       		bcs.s	loc_18C1A
000193E4 7204                       		moveq	#4,d1
000193E6                            
000193E6                            loc_18C1A:
000193E6 1141 001C                  		move.b	d1,$1C(a0)
000193EA 0C00 000A                  		cmpi.b	#$A,d0
000193EE 6600                       		bne.s	loc_18C32
000193F0 117C 0006 001C             		move.b	#6,$1C(a0)
000193F6 4A28 0001                  		tst.b	1(a0)
000193FA 6A00 FC84                  		bpl.w	Obj7A_Delete
000193FE                            
000193FE                            loc_18C32:
000193FE 6000                       		bra.s	loc_18C6C
00019400                            ; ===========================================================================
00019400                            
00019400                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019400 117C 0008 001C             		move.b	#8,$1C(a0)
00019406 2268 0034                  		movea.l	$34(a0),a1
0001940A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019410 6600                       		bne.s	loc_18C56
00019412 4A28 0001                  		tst.b	1(a0)
00019416 6A00 FC68                  		bpl.w	Obj7A_Delete
0001941A 117C 000B 001C             		move.b	#$B,$1C(a0)
00019420 6000                       		bra.s	loc_18C6C
00019422                            ; ===========================================================================
00019422                            
00019422                            loc_18C56:
00019422 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019428 6E00                       		bgt.s	loc_18C6C
0001942A 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019430 6D00                       		blt.s	loc_18C6C
00019432 117C 0007 001C             		move.b	#7,$1C(a0)
00019438                            
00019438                            loc_18C6C:
00019438 43F9 0001 8490             		lea	(Ani_Eggman).l,a1
0001943E 4EB9 0000 AD44             		jsr	AnimateSprite
00019444                            
00019444                            loc_18C78:
00019444 2268 0034                  		movea.l	$34(a0),a1
00019448 3169 0008 0008             		move.w	8(a1),8(a0)
0001944E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019454 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001945A 7003                       		moveq	#3,d0
0001945C C028 0022                  		and.b	$22(a0),d0
00019460 0228 00FC 0001             		andi.b	#-4,1(a0)
00019466 8128 0001                  		or.b	d0,1(a0)
0001946A 4EF9 0000 DC84             		jmp	DisplaySprite
00019470                            ; ===========================================================================
00019470                            
00019470                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019470 2268 0034                  		movea.l	$34(a0),a1
00019474 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001947A 6600                       		bne.s	loc_18CB8
0001947C 4A28 0001                  		tst.b	1(a0)
00019480 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019484                            
00019484                            loc_18CB8:
00019484 217C 0001 85A8 0004        		move.l	#Map_BossItems,4(a0)
0001948C 317C 246C 0002             		move.w	#$246C,2(a0)
00019492 117C 0003 001A             		move.b	#3,$1A(a0)
00019498 60AA                       		bra.s	loc_18C78
0001949A                            ; ===========================================================================
0001949A                            ; ---------------------------------------------------------------------------
0001949A                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001949A                            ; ---------------------------------------------------------------------------
0001949A                            
0001949A                            Obj7B:					; XREF: Obj_Index
0001949A 7000                       		moveq	#0,d0
0001949C 1028 0024                  		move.b	$24(a0),d0
000194A0 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000194A4 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000194A8 3028 0030                  		move.w	$30(a0),d0
000194AC 0240 FF80                  		andi.w	#$FF80,d0
000194B0 3238 F700                  		move.w	($FFFFF700).w,d1
000194B4 0441 0080                  		subi.w	#$80,d1
000194B8 0241 FF80                  		andi.w	#$FF80,d1
000194BC 9041                       		sub.w	d1,d0
000194BE 6B00 FBC0                  		bmi.w	Obj7A_Delete
000194C2 0C40 0280                  		cmpi.w	#$280,d0
000194C6 6200 FBB8                  		bhi.w	Obj7A_Delete
000194CA 4EF9 0000 DC84             		jmp	DisplaySprite
000194D0                            ; ===========================================================================
000194D0 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000194D2 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000194D4 0000                       		dc.w loc_18DC6-Obj7B_Index
000194D6 0000                       		dc.w loc_18EAA-Obj7B_Index
000194D8 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000194DA 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000194DC                            ; ===========================================================================
000194DC                            
000194DC                            Obj7B_Main:				; XREF: Obj7B_Index
000194DC 217C 0001 204A 0004        		move.l	#Map_obj5Ea,4(a0)
000194E4 317C 0518 0002             		move.w	#$518,2(a0)
000194EA 117C 0001 001A             		move.b	#1,$1A(a0)
000194F0 0028 0004 0001             		ori.b	#4,1(a0)
000194F6 117C 0004 0018             		move.b	#4,$18(a0)
000194FC 117C 008B 0020             		move.b	#$8B,$20(a0)
00019502 117C 000C 0019             		move.b	#$C,$19(a0)
00019508 2268 003C                  		movea.l	$3C(a0),a1
0001950C 3169 0008 0030             		move.w	8(a1),$30(a0)
00019512 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019518 08E8 0000 0022             		bset	#0,$22(a0)
0001951E 3028 0008                  		move.w	8(a0),d0
00019522 B069 0008                  		cmp.w	8(a1),d0
00019526 6E00                       		bgt.s	loc_18D68
00019528 08A8 0000 0022             		bclr	#0,$22(a0)
0001952E 117C 0002 003A             		move.b	#2,$3A(a0)
00019534                            
00019534                            loc_18D68:
00019534 5428 0024                  		addq.b	#2,$24(a0)
00019538                            
00019538                            Obj7B_Fall:				; XREF: Obj7B_Index
00019538 4EB9 0000 DC32             		jsr	ObjectFall
0001953E 2268 003C                  		movea.l	$3C(a0),a1
00019542 45F9 0000 0000             		lea	(word_19018).l,a2
00019548 7000                       		moveq	#0,d0
0001954A 1029 001A                  		move.b	$1A(a1),d0
0001954E 3228 0008                  		move.w	8(a0),d1
00019552 9268 0030                  		sub.w	$30(a0),d1
00019556 6400                       		bcc.s	loc_18D8E
00019558 5440                       		addq.w	#2,d0
0001955A                            
0001955A                            loc_18D8E:
0001955A D040                       		add.w	d0,d0
0001955C 3228 0034                  		move.w	$34(a0),d1
00019560 D272 0000                  		add.w	(a2,d0.w),d1
00019564 B268 000C                  		cmp.w	$C(a0),d1
00019568 6E00                       		bgt.s	locret_18DC4
0001956A 2268 003C                  		movea.l	$3C(a0),a1
0001956E 7202                       		moveq	#2,d1
00019570 0828 0000 0022             		btst	#0,$22(a0)
00019576 6700                       		beq.s	loc_18DAE
00019578 7200                       		moveq	#0,d1
0001957A                            
0001957A                            loc_18DAE:
0001957A 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019580 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019586 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001958C 6000 0000                  		bra.w	loc_18FA2
00019590                            ; ===========================================================================
00019590                            
00019590                            locret_18DC4:
00019590 4E75                       		rts	
00019592                            ; ===========================================================================
00019592                            
00019592                            loc_18DC6:				; XREF: Obj7B_Index
00019592 2268 003C                  		movea.l	$3C(a0),a1
00019596 7000                       		moveq	#0,d0
00019598 1028 003A                  		move.b	$3A(a0),d0
0001959C 9029 003A                  		sub.b	$3A(a1),d0
000195A0 6700                       		beq.s	loc_18E2A
000195A2 6400                       		bcc.s	loc_18DDA
000195A4 4400                       		neg.b	d0
000195A6                            
000195A6                            loc_18DDA:
000195A6 323C F7E8                  		move.w	#-$818,d1
000195AA 343C FEEC                  		move.w	#-$114,d2
000195AE 0C00 0001                  		cmpi.b	#1,d0
000195B2 6700                       		beq.s	loc_18E00
000195B4 323C F6A0                  		move.w	#-$960,d1
000195B8 343C FF0C                  		move.w	#-$F4,d2
000195BC 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000195C2 6D00                       		blt.s	loc_18E00
000195C4 323C F5E0                  		move.w	#-$A20,d1
000195C8 343C FF80                  		move.w	#-$80,d2
000195CC                            
000195CC                            loc_18E00:
000195CC 3141 0012                  		move.w	d1,$12(a0)
000195D0 3142 0010                  		move.w	d2,$10(a0)
000195D4 3028 0008                  		move.w	8(a0),d0
000195D8 9068 0030                  		sub.w	$30(a0),d0
000195DC 6400                       		bcc.s	loc_18E16
000195DE 4468 0010                  		neg.w	$10(a0)
000195E2                            
000195E2                            loc_18E16:
000195E2 117C 0001 001A             		move.b	#1,$1A(a0)
000195E8 317C 0020 0028             		move.w	#$20,$28(a0)
000195EE 5428 0024                  		addq.b	#2,$24(a0)
000195F2 6000 0000                  		bra.w	loc_18EAA
000195F6                            ; ===========================================================================
000195F6                            
000195F6                            loc_18E2A:				; XREF: loc_18DC6
000195F6 45F9 0000 0000             		lea	(word_19018).l,a2
000195FC 7000                       		moveq	#0,d0
000195FE 1029 001A                  		move.b	$1A(a1),d0
00019602 343C 0028                  		move.w	#$28,d2
00019606 3228 0008                  		move.w	8(a0),d1
0001960A 9268 0030                  		sub.w	$30(a0),d1
0001960E 6400                       		bcc.s	loc_18E48
00019610 4442                       		neg.w	d2
00019612 5440                       		addq.w	#2,d0
00019614                            
00019614                            loc_18E48:
00019614 D040                       		add.w	d0,d0
00019616 3228 0034                  		move.w	$34(a0),d1
0001961A D272 0000                  		add.w	(a2,d0.w),d1
0001961E 3141 000C                  		move.w	d1,$C(a0)
00019622 D468 0030                  		add.w	$30(a0),d2
00019626 3142 0008                  		move.w	d2,8(a0)
0001962A 4268 000E                  		clr.w	$E(a0)
0001962E 4268 000A                  		clr.w	$A(a0)
00019632 5368 0028                  		subq.w	#1,$28(a0)
00019636 6600                       		bne.s	loc_18E7A
00019638 317C 0020 0028             		move.w	#$20,$28(a0)
0001963E 117C 0008 0024             		move.b	#8,$24(a0)
00019644 4E75                       		rts	
00019646                            ; ===========================================================================
00019646                            
00019646                            loc_18E7A:
00019646 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001964C 6600                       		bne.s	loc_18E88
0001964E 117C 0005 001F             		move.b	#5,$1F(a0)
00019654                            
00019654                            loc_18E88:
00019654 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001965A 6600                       		bne.s	loc_18E96
0001965C 117C 0002 001F             		move.b	#2,$1F(a0)
00019662                            
00019662                            loc_18E96:
00019662 5328 001E                  		subq.b	#1,$1E(a0)
00019666 6E00                       		bgt.s	locret_18EA8
00019668 0868 0000 001A             		bchg	#0,$1A(a0)
0001966E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019674                            
00019674                            locret_18EA8:
00019674 4E75                       		rts	
00019676                            ; ===========================================================================
00019676                            
00019676                            loc_18EAA:				; XREF: Obj7B_Index
00019676 43F8 D040                  		lea	($FFFFD040).w,a1
0001967A 707A                       		moveq	#$7A,d0
0001967C 7240                       		moveq	#$40,d1
0001967E 743E                       		moveq	#$3E,d2
00019680                            
00019680                            loc_18EB4:
00019680 B011                       		cmp.b	(a1),d0
00019682 6700                       		beq.s	loc_18EC0
00019684 D2C1                       		adda.w	d1,a1
00019686 51CA FFF8                  		dbf	d2,loc_18EB4
0001968A                            
0001968A 6000                       		bra.s	loc_18F38
0001968C                            ; ===========================================================================
0001968C                            
0001968C                            loc_18EC0:
0001968C 3029 0008                  		move.w	8(a1),d0
00019690 3229 000C                  		move.w	$C(a1),d1
00019694 3428 0008                  		move.w	8(a0),d2
00019698 3628 000C                  		move.w	$C(a0),d3
0001969C 45FA 0000                  		lea	byte_19022(pc),a2
000196A0 47FA 0000                  		lea	byte_19026(pc),a3
000196A4 181A                       		move.b	(a2)+,d4
000196A6 4884                       		ext.w	d4
000196A8 D044                       		add.w	d4,d0
000196AA 181B                       		move.b	(a3)+,d4
000196AC 4884                       		ext.w	d4
000196AE D444                       		add.w	d4,d2
000196B0 B440                       		cmp.w	d0,d2
000196B2 6500                       		bcs.s	loc_18F38
000196B4 181A                       		move.b	(a2)+,d4
000196B6 4884                       		ext.w	d4
000196B8 D044                       		add.w	d4,d0
000196BA 181B                       		move.b	(a3)+,d4
000196BC 4884                       		ext.w	d4
000196BE D444                       		add.w	d4,d2
000196C0 B042                       		cmp.w	d2,d0
000196C2 6500                       		bcs.s	loc_18F38
000196C4 181A                       		move.b	(a2)+,d4
000196C6 4884                       		ext.w	d4
000196C8 D244                       		add.w	d4,d1
000196CA 181B                       		move.b	(a3)+,d4
000196CC 4884                       		ext.w	d4
000196CE D644                       		add.w	d4,d3
000196D0 B641                       		cmp.w	d1,d3
000196D2 6500                       		bcs.s	loc_18F38
000196D4 181A                       		move.b	(a2)+,d4
000196D6 4884                       		ext.w	d4
000196D8 D244                       		add.w	d4,d1
000196DA 181B                       		move.b	(a3)+,d4
000196DC 4884                       		ext.w	d4
000196DE D644                       		add.w	d4,d3
000196E0 B243                       		cmp.w	d3,d1
000196E2 6500                       		bcs.s	loc_18F38
000196E4 5428 0024                  		addq.b	#2,$24(a0)
000196E8 4268 0028                  		clr.w	$28(a0)
000196EC 4229 0020                  		clr.b	$20(a1)
000196F0 5329 0021                  		subq.b	#1,$21(a1)
000196F4 6600                       		bne.s	loc_18F38
000196F6 08E9 0007 0022             		bset	#7,$22(a1)
000196FC 4268 0010                  		clr.w	$10(a0)
00019700 4268 0012                  		clr.w	$12(a0)
00019704                            
00019704                            loc_18F38:
00019704 4A68 0012                  		tst.w	$12(a0)
00019708 6A00                       		bpl.s	loc_18F5C
0001970A 4EB9 0000 DC32             		jsr	ObjectFall
00019710 3028 0034                  		move.w	$34(a0),d0
00019714 0440 002F                  		subi.w	#$2F,d0
00019718 B068 000C                  		cmp.w	$C(a0),d0
0001971C 6E00                       		bgt.s	loc_18F58
0001971E 4EB9 0000 DC32             		jsr	ObjectFall
00019724                            
00019724                            loc_18F58:
00019724 6000 FF20                  		bra.w	loc_18E7A
00019728                            ; ===========================================================================
00019728                            
00019728                            loc_18F5C:
00019728 4EB9 0000 DC32             		jsr	ObjectFall
0001972E 2268 003C                  		movea.l	$3C(a0),a1
00019732 45F9 0000 0000             		lea	(word_19018).l,a2
00019738 7000                       		moveq	#0,d0
0001973A 1029 001A                  		move.b	$1A(a1),d0
0001973E 3228 0008                  		move.w	8(a0),d1
00019742 9268 0030                  		sub.w	$30(a0),d1
00019746 6400                       		bcc.s	loc_18F7E
00019748 5440                       		addq.w	#2,d0
0001974A                            
0001974A                            loc_18F7E:
0001974A D040                       		add.w	d0,d0
0001974C 3228 0034                  		move.w	$34(a0),d1
00019750 D272 0000                  		add.w	(a2,d0.w),d1
00019754 B268 000C                  		cmp.w	$C(a0),d1
00019758 6ECA                       		bgt.s	loc_18F58
0001975A 2268 003C                  		movea.l	$3C(a0),a1
0001975E 7202                       		moveq	#2,d1
00019760 4A68 0010                  		tst.w	$10(a0)
00019764 6B00                       		bmi.s	loc_18F9C
00019766 7200                       		moveq	#0,d1
00019768                            
00019768                            loc_18F9C:
00019768 317C 0000 0028             		move.w	#0,$28(a0)
0001976E                            
0001976E                            loc_18FA2:
0001976E 1341 003A                  		move.b	d1,$3A(a1)
00019772 1141 003A                  		move.b	d1,$3A(a0)
00019776 B229 001A                  		cmp.b	$1A(a1),d1
0001977A 6700                       		beq.s	loc_19008
0001977C 08A9 0003 0022             		bclr	#3,$22(a1)
00019782 6700                       		beq.s	loc_19008
00019784 4229 0025                  		clr.b	$25(a1)
00019788 137C 0002 0024             		move.b	#2,$24(a1)
0001978E 45F8 D000                  		lea	($FFFFD000).w,a2
00019792 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019798 446A 0012                  		neg.w	$12(a2)
0001979C 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000197A2 6600                       		bne.s	loc_18FDC
000197A4 E0EA 0012                  		asr	$12(a2)
000197A8                            
000197A8                            loc_18FDC:
000197A8 08EA 0001 0022             		bset	#1,$22(a2)
000197AE 08AA 0003 0022             		bclr	#3,$22(a2)
000197B4 422A 003C                  		clr.b	$3C(a2)
000197B8 2F08                       		move.l	a0,-(sp)
000197BA 41D2                       		lea	(a2),a0
000197BC 4EBA A30A                  		jsr	Obj01_ChkRoll
000197C0 205F                       		movea.l	(sp)+,a0
000197C2 157C 0002 0024             		move.b	#2,$24(a2)
000197C8 303C 00CC                  		move.w	#$CC,d0
000197CC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spring" sound
000197D2                            
000197D2                            loc_19008:
000197D2 4268 0010                  		clr.w	$10(a0)
000197D6 4268 0012                  		clr.w	$12(a0)
000197DA 5428 0024                  		addq.b	#2,$24(a0)
000197DE 6000 FE66                  		bra.w	loc_18E7A
000197E2                            ; ===========================================================================
000197E2 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000197EC                            		even
000197EC E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
000197F0                            		even
000197F0 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
000197F4                            		even
000197F4                            ; ===========================================================================
000197F4                            
000197F4                            Obj7B_Explode:				; XREF: Obj7B_Index
000197F4 10BC 003F                  		move.b	#$3F,(a0)
000197F8 4228 0024                  		clr.b	$24(a0)
000197FC 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019802 6700                       		beq.s	Obj7B_MakeFrag
00019804 4E75                       		rts	
00019806                            ; ===========================================================================
00019806                            
00019806                            Obj7B_MakeFrag:
00019806 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001980C 7203                       		moveq	#3,d1
0001980E 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019812                            
00019812                            Obj7B_Loop:
00019812 4EB9 0000 E10A             		jsr	SingleObjLoad
00019818 6600                       		bne.s	loc_1909A
0001981A 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001981E 137C 000A 0024             		move.b	#$A,$24(a1)
00019824 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001982C 137C 0003 0018             		move.b	#3,$18(a1)
00019832 337C 0518 0002             		move.w	#$518,2(a1)
00019838 3368 0008 0008             		move.w	8(a0),8(a1)
0001983E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019844 335A 0010                  		move.w	(a2)+,$10(a1)
00019848 335A 0012                  		move.w	(a2)+,$12(a1)
0001984C 137C 0098 0020             		move.b	#$98,$20(a1)
00019852 0029 0004 0001             		ori.b	#4,1(a1)
00019858 08E9 0007 0001             		bset	#7,1(a1)
0001985E 137C 000C 0019             		move.b	#$C,$19(a1)
00019864                            
00019864                            loc_1909A:
00019864 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019868                            
00019868 4E75                       		rts	
0001986A                            ; ===========================================================================
0001986A FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001986E FF60 FDC0                  		dc.w $FF60, $FDC0
00019872 0100 FCC0                  		dc.w $100, $FCC0
00019876 00A0 FDC0                  		dc.w $A0, $FDC0
0001987A                            ; ===========================================================================
0001987A                            
0001987A                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001987A 4EB9 0000 DC5E             		jsr	SpeedToPos
00019880 3168 0008 0030             		move.w	8(a0),$30(a0)
00019886 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001988C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019892 7004                       		moveq	#4,d0
00019894 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019898 E448                       		lsr.w	#2,d0
0001989A 1140 001A                  		move.b	d0,$1A(a0)
0001989E 4A28 0001                  		tst.b	1(a0)
000198A2 6A00 F7DC                  		bpl.w	Obj7A_Delete
000198A6 4E75                       		rts	
000198A8                            ; ===========================================================================
000198A8                            ; ---------------------------------------------------------------------------
000198A8                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000198A8                            ; ---------------------------------------------------------------------------
000198A8                            Map_obj7B:
000198A8                            	include "_maps\obj7B.asm"
000198A8                            ; ---------------------------------------------------------------------------
000198A8                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000198A8                            ; ---------------------------------------------------------------------------
000198A8 0000                       		dc.w byte_190E2-Map_obj7B
000198AA 0000                       		dc.w byte_190E8-Map_obj7B
000198AC 01                         byte_190E2:	dc.b 1
000198AD FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000198B2 01                         byte_190E8:	dc.b 1
000198B3 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000198B8                            		even
000198B8                            		even
000198B8                            
000198B8                            ; ===========================================================================
000198B8                            ; ---------------------------------------------------------------------------
000198B8                            ; Object 75 - Eggman (SYZ)
000198B8                            ; ---------------------------------------------------------------------------
000198B8                            
000198B8                            Obj75:					; XREF: Obj_Index
000198B8 7000                       		moveq	#0,d0
000198BA 1028 0024                  		move.b	$24(a0),d0
000198BE 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000198C2 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
000198C6                            ; ===========================================================================
000198C6 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
000198C8 0000                       		dc.w Obj75_ShipMain-Obj75_Index
000198CA 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000198CC 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000198CE 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000198D0                            
000198D0 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000198D3 0401 05                    		dc.b 4,	1, 5
000198D6 0607 05                    		dc.b 6,	7, 5
000198D9 0800 05                    		dc.b 8,	0, 5
000198DC                            ; ===========================================================================
000198DC                            
000198DC                            Obj75_Main:				; XREF: Obj75_Index
000198DC 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
000198E2 317C 04DA 000C             		move.w	#$4DA,$C(a0)
000198E8 3168 0008 0030             		move.w	8(a0),$30(a0)
000198EE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000198F4 117C 000F 0020             		move.b	#$F,$20(a0)
000198FA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019900 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019904 2248                       		movea.l	a0,a1
00019906 7203                       		moveq	#3,d1
00019908 6000                       		bra.s	Obj75_LoadBoss
0001990A                            ; ===========================================================================
0001990A                            
0001990A                            Obj75_Loop:
0001990A 4EB9 0000 E120             		jsr	SingleObjLoad2
00019910 6600                       		bne.s	Obj75_ShipMain
00019912 12BC 0075                  		move.b	#$75,(a1)
00019916 3368 0008 0008             		move.w	8(a0),8(a1)
0001991C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019922                            
00019922                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019922 08A8 0000 0022             		bclr	#0,$22(a0)
00019928 4229 0025                  		clr.b	$25(a1)
0001992C 135A 0024                  		move.b	(a2)+,$24(a1)
00019930 135A 001C                  		move.b	(a2)+,$1C(a1)
00019934 135A 0018                  		move.b	(a2)+,$18(a1)
00019938 237C 0001 84E0 0004        		move.l	#Map_Eggman,4(a1)
00019940 337C 0400 0002             		move.w	#$400,2(a1)
00019946 137C 0004 0001             		move.b	#4,1(a1)
0001994C 137C 0020 0019             		move.b	#$20,$19(a1)
00019952 2348 0034                  		move.l	a0,$34(a1)
00019956 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001995A                            
0001995A                            Obj75_ShipMain:				; XREF: Obj75_Index
0001995A 7000                       		moveq	#0,d0
0001995C 1028 0025                  		move.b	$25(a0),d0
00019960 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019964 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019968 43F9 0001 8490             		lea	(Ani_Eggman).l,a1
0001996E 4EB9 0000 AD44             		jsr	AnimateSprite
00019974 7003                       		moveq	#3,d0
00019976 C028 0022                  		and.b	$22(a0),d0
0001997A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019980 8128 0001                  		or.b	d0,1(a0)
00019984 4EF9 0000 DC84             		jmp	DisplaySprite
0001998A                            ; ===========================================================================
0001998A 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001998E 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019992 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019996                            ; ===========================================================================
00019996                            
00019996                            loc_191CC:				; XREF: Obj75_ShipIndex
00019996 317C FF00 0010             		move.w	#-$100,$10(a0)
0001999C 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000199A2 6400                       		bcc.s	loc_191DE
000199A4 5428 0025                  		addq.b	#2,$25(a0)
000199A8                            
000199A8                            loc_191DE:
000199A8 1028 003F                  		move.b	$3F(a0),d0
000199AC 5428 003F                  		addq.b	#2,$3F(a0)
000199B0 4EB9 0000 2C64             		jsr	(CalcSine).l
000199B6 E440                       		asr.w	#2,d0
000199B8 3140 0012                  		move.w	d0,$12(a0)
000199BC                            
000199BC                            loc_191F2:
000199BC 6100 E690                  		bsr.w	BossMove
000199C0 3168 0038 000C             		move.w	$38(a0),$C(a0)
000199C6 3168 0030 0008             		move.w	$30(a0),8(a0)
000199CC                            
000199CC                            loc_19202:
000199CC 3028 0008                  		move.w	8(a0),d0
000199D0 0440 2C00                  		subi.w	#$2C00,d0
000199D4 EA48                       		lsr.w	#5,d0
000199D6 1140 0034                  		move.b	d0,$34(a0)
000199DA 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000199E0 6400                       		bcc.s	locret_19256
000199E2 4A28 0022                  		tst.b	$22(a0)
000199E6 6B00                       		bmi.s	loc_19258
000199E8 4A28 0020                  		tst.b	$20(a0)
000199EC 6600                       		bne.s	locret_19256
000199EE 4A28 003E                  		tst.b	$3E(a0)
000199F2 6600                       		bne.s	loc_1923A
000199F4 117C 0020 003E             		move.b	#$20,$3E(a0)
000199FA 303C 00AC                  		move.w	#$AC,d0
000199FE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019A04                            
00019A04                            loc_1923A:
00019A04 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019A08 7000                       		moveq	#0,d0
00019A0A 4A51                       		tst.w	(a1)
00019A0C 6600                       		bne.s	loc_19248
00019A0E 303C 0EEE                  		move.w	#$EEE,d0
00019A12                            
00019A12                            loc_19248:
00019A12 3280                       		move.w	d0,(a1)
00019A14 5328 003E                  		subq.b	#1,$3E(a0)
00019A18 6600                       		bne.s	locret_19256
00019A1A 117C 000F 0020             		move.b	#$F,$20(a0)
00019A20                            
00019A20                            locret_19256:
00019A20 4E75                       		rts	
00019A22                            ; ===========================================================================
00019A22                            
00019A22                            loc_19258:				; XREF: loc_19202
00019A22 7064                       		moveq	#100,d0
00019A24 6100 0000                  		bsr.w	AddPoints
00019A28 117C 0006 0025             		move.b	#6,$25(a0)
00019A2E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019A34 4268 0010                  		clr.w	$10(a0)
00019A38 4E75                       		rts	
00019A3A                            ; ===========================================================================
00019A3A                            
00019A3A                            loc_19270:				; XREF: Obj75_ShipIndex
00019A3A 3028 0030                  		move.w	$30(a0),d0
00019A3E 317C 0140 0010             		move.w	#$140,$10(a0)
00019A44 0828 0000 0022             		btst	#0,$22(a0)
00019A4A 6600                       		bne.s	loc_1928E
00019A4C 4468 0010                  		neg.w	$10(a0)
00019A50 0C40 2C08                  		cmpi.w	#$2C08,d0
00019A54 6E00                       		bgt.s	loc_1929E
00019A56 6000                       		bra.s	loc_19294
00019A58                            ; ===========================================================================
00019A58                            
00019A58                            loc_1928E:
00019A58 0C40 2D38                  		cmpi.w	#$2D38,d0
00019A5C 6D00                       		blt.s	loc_1929E
00019A5E                            
00019A5E                            loc_19294:
00019A5E 0868 0000 0022             		bchg	#0,$22(a0)
00019A64 4228 003D                  		clr.b	$3D(a0)
00019A68                            
00019A68                            loc_1929E:
00019A68 0440 2C10                  		subi.w	#$2C10,d0
00019A6C 0240 001F                  		andi.w	#$1F,d0
00019A70 0440 001F                  		subi.w	#$1F,d0
00019A74 6A00                       		bpl.s	loc_192AE
00019A76 4440                       		neg.w	d0
00019A78                            
00019A78                            loc_192AE:
00019A78 5340                       		subq.w	#1,d0
00019A7A 6E00                       		bgt.s	loc_192E8
00019A7C 4A28 003D                  		tst.b	$3D(a0)
00019A80 6600                       		bne.s	loc_192E8
00019A82 3238 D008                  		move.w	($FFFFD008).w,d1
00019A86 0441 2C00                  		subi.w	#$2C00,d1
00019A8A EA41                       		asr.w	#5,d1
00019A8C B228 0034                  		cmp.b	$34(a0),d1
00019A90 6600                       		bne.s	loc_192E8
00019A92 7000                       		moveq	#0,d0
00019A94 1028 0034                  		move.b	$34(a0),d0
00019A98 EB40                       		asl.w	#5,d0
00019A9A 0640 2C10                  		addi.w	#$2C10,d0
00019A9E 3140 0030                  		move.w	d0,$30(a0)
00019AA2 6100 0000                  		bsr.w	Obj75_FindBlocks
00019AA6 5428 0025                  		addq.b	#2,$25(a0)
00019AAA 4268 0028                  		clr.w	$28(a0)
00019AAE 4268 0010                  		clr.w	$10(a0)
00019AB2                            
00019AB2                            loc_192E8:
00019AB2 6000 FEF4                  		bra.w	loc_191DE
00019AB6                            ; ===========================================================================
00019AB6                            
00019AB6                            loc_192EC:				; XREF: Obj75_ShipIndex
00019AB6 7000                       		moveq	#0,d0
00019AB8 1028 0028                  		move.b	$28(a0),d0
00019ABC 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019AC0 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019AC4                            ; ===========================================================================
00019AC4 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019AC6 0000                       		dc.w loc_19348-off_192FA
00019AC8 0000                       		dc.w loc_1938E-off_192FA
00019ACA 0000                       		dc.w loc_193D0-off_192FA
00019ACC                            ; ===========================================================================
00019ACC                            
00019ACC                            loc_19302:				; XREF: off_192FA
00019ACC 317C 0180 0012             		move.w	#$180,$12(a0)
00019AD2 3028 0038                  		move.w	$38(a0),d0
00019AD6 0C40 0556                  		cmpi.w	#$556,d0
00019ADA 6500                       		bcs.s	loc_19344
00019ADC 317C 0556 0038             		move.w	#$556,$38(a0)
00019AE2 4268 003C                  		clr.w	$3C(a0)
00019AE6 70FF                       		moveq	#-1,d0
00019AE8 3028 0036                  		move.w	$36(a0),d0
00019AEC 6700                       		beq.s	loc_1933C
00019AEE 2240                       		movea.l	d0,a1
00019AF0 137C 00FF 0029             		move.b	#-1,$29(a1)
00019AF6 117C 00FF 0029             		move.b	#-1,$29(a0)
00019AFC 2348 0034                  		move.l	a0,$34(a1)
00019B00 317C 0032 003C             		move.w	#$32,$3C(a0)
00019B06                            
00019B06                            loc_1933C:
00019B06 4268 0012                  		clr.w	$12(a0)
00019B0A 5428 0028                  		addq.b	#2,$28(a0)
00019B0E                            
00019B0E                            loc_19344:
00019B0E 6000 FEAC                  		bra.w	loc_191F2
00019B12                            ; ===========================================================================
00019B12                            
00019B12                            loc_19348:				; XREF: off_192FA
00019B12 5368 003C                  		subq.w	#1,$3C(a0)
00019B16 6A00                       		bpl.s	loc_19366
00019B18 5428 0028                  		addq.b	#2,$28(a0)
00019B1C 317C F800 0012             		move.w	#-$800,$12(a0)
00019B22 4A68 0036                  		tst.w	$36(a0)
00019B26 6600                       		bne.s	loc_19362
00019B28 E0E8 0012                  		asr	$12(a0)
00019B2C                            
00019B2C                            loc_19362:
00019B2C 7000                       		moveq	#0,d0
00019B2E 6000                       		bra.s	loc_1937C
00019B30                            ; ===========================================================================
00019B30                            
00019B30                            loc_19366:
00019B30 7000                       		moveq	#0,d0
00019B32 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019B38 6E00                       		bgt.s	loc_1937C
00019B3A 7002                       		moveq	#2,d0
00019B3C 0828 0001 003D             		btst	#1,$3D(a0)
00019B42 6700                       		beq.s	loc_1937C
00019B44 4440                       		neg.w	d0
00019B46                            
00019B46                            loc_1937C:
00019B46 D068 0038                  		add.w	$38(a0),d0
00019B4A 3140 000C                  		move.w	d0,$C(a0)
00019B4E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019B54 6000 FE76                  		bra.w	loc_19202
00019B58                            ; ===========================================================================
00019B58                            
00019B58                            loc_1938E:				; XREF: off_192FA
00019B58 303C 04DA                  		move.w	#$4DA,d0
00019B5C 4A68 0036                  		tst.w	$36(a0)
00019B60 6700                       		beq.s	loc_1939C
00019B62 0440 0018                  		subi.w	#$18,d0
00019B66                            
00019B66                            loc_1939C:
00019B66 B068 0038                  		cmp.w	$38(a0),d0
00019B6A 6D00                       		blt.s	loc_193BE
00019B6C 317C 0008 003C             		move.w	#8,$3C(a0)
00019B72 4A68 0036                  		tst.w	$36(a0)
00019B76 6700                       		beq.s	loc_193B4
00019B78 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019B7E                            
00019B7E                            loc_193B4:
00019B7E 5428 0028                  		addq.b	#2,$28(a0)
00019B82 4268 0012                  		clr.w	$12(a0)
00019B86 6000                       		bra.s	loc_193CC
00019B88                            ; ===========================================================================
00019B88                            
00019B88                            loc_193BE:
00019B88 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019B8E 6C00                       		bge.s	loc_193CC
00019B90 0668 000C 0012             		addi.w	#$C,$12(a0)
00019B96                            
00019B96                            loc_193CC:
00019B96 6000 FE24                  		bra.w	loc_191F2
00019B9A                            ; ===========================================================================
00019B9A                            
00019B9A                            loc_193D0:				; XREF: off_192FA
00019B9A 5368 003C                  		subq.w	#1,$3C(a0)
00019B9E 6E00                       		bgt.s	loc_19406
00019BA0 6B00                       		bmi.s	loc_193EE
00019BA2 70FF                       		moveq	#-1,d0
00019BA4 3028 0036                  		move.w	$36(a0),d0
00019BA8 6700                       		beq.s	loc_193E8
00019BAA 2240                       		movea.l	d0,a1
00019BAC 137C 000A 0029             		move.b	#$A,$29(a1)
00019BB2                            
00019BB2                            loc_193E8:
00019BB2 4268 0036                  		clr.w	$36(a0)
00019BB6 6000                       		bra.s	loc_19406
00019BB8                            ; ===========================================================================
00019BB8                            
00019BB8                            loc_193EE:
00019BB8 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019BBE 6600                       		bne.s	loc_19406
00019BC0 4228 0029                  		clr.b	$29(a0)
00019BC4 5528 0025                  		subq.b	#2,$25(a0)
00019BC8 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019BCE 6000                       		bra.s	loc_19446
00019BD0                            ; ===========================================================================
00019BD0                            
00019BD0                            loc_19406:
00019BD0 7001                       		moveq	#1,d0
00019BD2 4A68 0036                  		tst.w	$36(a0)
00019BD6 6700                       		beq.s	loc_19410
00019BD8 7002                       		moveq	#2,d0
00019BDA                            
00019BDA                            loc_19410:
00019BDA 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019BE0 6700                       		beq.s	loc_19424
00019BE2 6D00                       		blt.s	loc_1941C
00019BE4 4440                       		neg.w	d0
00019BE6                            
00019BE6                            loc_1941C:
00019BE6 4A68 0036                  		tst.w	$36(a0)
00019BEA D168 0038                  		add.w	d0,$38(a0)
00019BEE                            
00019BEE                            loc_19424:
00019BEE 7000                       		moveq	#0,d0
00019BF0 4A68 0036                  		tst.w	$36(a0)
00019BF4 6700                       		beq.s	loc_19438
00019BF6 7002                       		moveq	#2,d0
00019BF8 0828 0000 003D             		btst	#0,$3D(a0)
00019BFE 6700                       		beq.s	loc_19438
00019C00 4440                       		neg.w	d0
00019C02                            
00019C02                            loc_19438:
00019C02 D068 0038                  		add.w	$38(a0),d0
00019C06 3140 000C                  		move.w	d0,$C(a0)
00019C0A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019C10                            
00019C10                            loc_19446:
00019C10 6000 FDBA                  		bra.w	loc_19202
00019C14                            
00019C14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019C14                            
00019C14                            
00019C14                            Obj75_FindBlocks:			; XREF: loc_192AE
00019C14 4268 0036                  		clr.w	$36(a0)
00019C18 43F8 D040                  		lea	($FFFFD040).w,a1
00019C1C 703E                       		moveq	#$3E,d0
00019C1E 7276                       		moveq	#$76,d1
00019C20 1428 0034                  		move.b	$34(a0),d2
00019C24                            
00019C24                            Obj75_FindLoop:
00019C24 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019C26 6600                       		bne.s	loc_1946A	; if not, branch
00019C28 B429 0028                  		cmp.b	$28(a1),d2
00019C2C 6600                       		bne.s	loc_1946A
00019C2E 3149 0036                  		move.w	a1,$36(a0)
00019C32 6000                       		bra.s	locret_19472
00019C34                            ; ===========================================================================
00019C34                            
00019C34                            loc_1946A:
00019C34 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019C38 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019C3C                            
00019C3C                            locret_19472:
00019C3C 4E75                       		rts	
00019C3E                            ; End of function Obj75_FindBlocks
00019C3E                            
00019C3E                            ; ===========================================================================
00019C3E                            
00019C3E                            loc_19474:				; XREF: Obj75_ShipIndex
00019C3E 5368 003C                  		subq.w	#1,$3C(a0)
00019C42 6B00                       		bmi.s	loc_1947E
00019C44 6000 E3C6                  		bra.w	BossDefeated
00019C48                            ; ===========================================================================
00019C48                            
00019C48                            loc_1947E:
00019C48 5428 0025                  		addq.b	#2,$25(a0)
00019C4C 4268 0012                  		clr.w	$12(a0)
00019C50 08E8 0000 0022             		bset	#0,$22(a0)
00019C56 08A8 0007 0022             		bclr	#7,$22(a0)
00019C5C 4268 0010                  		clr.w	$10(a0)
00019C60 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019C66 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019C6A 6600                       		bne.s	loc_194A8
00019C6C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019C72                            
00019C72                            loc_194A8:
00019C72 6000 FD58                  		bra.w	loc_19202
00019C76                            ; ===========================================================================
00019C76                            
00019C76                            loc_194AC:				; XREF: Obj75_ShipIndex
00019C76 5268 003C                  		addq.w	#1,$3C(a0)
00019C7A 6700                       		beq.s	loc_194BC
00019C7C 6A00                       		bpl.s	loc_194C2
00019C7E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019C84 6000                       		bra.s	loc_194EE
00019C86                            ; ===========================================================================
00019C86                            
00019C86                            loc_194BC:
00019C86 4268 0012                  		clr.w	$12(a0)
00019C8A 6000                       		bra.s	loc_194EE
00019C8C                            ; ===========================================================================
00019C8C                            
00019C8C                            loc_194C2:
00019C8C 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019C92 6500                       		bcs.s	loc_194DA
00019C94 6700                       		beq.s	loc_194E0
00019C96 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019C9C 6500                       		bcs.s	loc_194EE
00019C9E 5428 0025                  		addq.b	#2,$25(a0)
00019CA2 6000                       		bra.s	loc_194EE
00019CA4                            ; ===========================================================================
00019CA4                            
00019CA4                            loc_194DA:
00019CA4 5168 0012                  		subq.w	#8,$12(a0)
00019CA8 6000                       		bra.s	loc_194EE
00019CAA                            ; ===========================================================================
00019CAA                            
00019CAA                            loc_194E0:
00019CAA 4268 0012                  		clr.w	$12(a0)
00019CAE 303C 0085                  		move.w	#$85,d0
00019CB2 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SYZ music
00019CB8                            
00019CB8                            loc_194EE:
00019CB8 6000 FD02                  		bra.w	loc_191F2
00019CBC                            ; ===========================================================================
00019CBC                            
00019CBC                            loc_194F2:				; XREF: Obj75_ShipIndex
00019CBC 317C 0400 0010             		move.w	#$400,$10(a0)
00019CC2 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019CC8 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019CCE 6400                       		bcc.s	loc_1950C
00019CD0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019CD4 6000                       		bra.s	loc_19512
00019CD6                            ; ===========================================================================
00019CD6                            
00019CD6                            loc_1950C:
00019CD6 4A28 0001                  		tst.b	1(a0)
00019CDA 6A00                       		bpl.s	Obj75_ShipDelete
00019CDC                            
00019CDC                            loc_19512:
00019CDC 6100 E370                  		bsr.w	BossMove
00019CE0 6000 FCC6                  		bra.w	loc_191DE
00019CE4                            ; ===========================================================================
00019CE4                            
00019CE4                            Obj75_ShipDelete:
00019CE4 4EF9 0000 DCC0             		jmp	DeleteObject
00019CEA                            ; ===========================================================================
00019CEA                            
00019CEA                            Obj75_FaceMain:				; XREF: Obj75_Index
00019CEA 7201                       		moveq	#1,d1
00019CEC 2268 0034                  		movea.l	$34(a0),a1
00019CF0 7000                       		moveq	#0,d0
00019CF2 1029 0025                  		move.b	$25(a1),d0
00019CF6 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019CFA 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019CFE 1141 001C                  		move.b	d1,$1C(a0)
00019D02 1010                       		move.b	(a0),d0
00019D04 B011                       		cmp.b	(a1),d0
00019D06 6600                       		bne.s	Obj75_FaceDelete
00019D08 6000                       		bra.s	loc_195BE
00019D0A                            ; ===========================================================================
00019D0A                            
00019D0A                            Obj75_FaceDelete:
00019D0A 4EF9 0000 DCC0             		jmp	DeleteObject
00019D10                            ; ===========================================================================
00019D10 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019D14 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019D18 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019D1C                            ; ===========================================================================
00019D1C                            
00019D1C                            loc_19552:				; XREF: off_19546
00019D1C 720A                       		moveq	#$A,d1
00019D1E 4E75                       		rts	
00019D20                            ; ===========================================================================
00019D20                            
00019D20                            loc_19556:				; XREF: off_19546
00019D20 7206                       		moveq	#6,d1
00019D22 4E75                       		rts	
00019D24                            ; ===========================================================================
00019D24                            
00019D24                            loc_1955A:				; XREF: off_19546
00019D24 7000                       		moveq	#0,d0
00019D26 1029 0028                  		move.b	$28(a1),d0
00019D2A 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019D2E 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019D32                            ; ===========================================================================
00019D32 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019D36 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019D3A                            ; ===========================================================================
00019D3A                            
00019D3A                            loc_19570:				; XREF: off_19568
00019D3A 6000                       		bra.s	loc_19574
00019D3C                            ; ===========================================================================
00019D3C                            
00019D3C                            loc_19572:				; XREF: off_19568
00019D3C 7206                       		moveq	#6,d1
00019D3E                            
00019D3E                            loc_19574:				; XREF: off_19546
00019D3E 4A29 0020                  		tst.b	$20(a1)
00019D42 6600                       		bne.s	loc_1957E
00019D44 7205                       		moveq	#5,d1
00019D46 4E75                       		rts	
00019D48                            ; ===========================================================================
00019D48                            
00019D48                            loc_1957E:
00019D48 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019D4E 6500                       		bcs.s	locret_19588
00019D50 7204                       		moveq	#4,d1
00019D52                            
00019D52                            locret_19588:
00019D52 4E75                       		rts	
00019D54                            ; ===========================================================================
00019D54                            
00019D54                            Obj75_FlameMain:			; XREF: Obj75_Index
00019D54 117C 0007 001C             		move.b	#7,$1C(a0)
00019D5A 2268 0034                  		movea.l	$34(a0),a1
00019D5E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019D64 6600                       		bne.s	loc_195AA
00019D66 117C 000B 001C             		move.b	#$B,$1C(a0)
00019D6C 4A28 0001                  		tst.b	1(a0)
00019D70 6A00                       		bpl.s	Obj75_FlameDelete
00019D72 6000                       		bra.s	loc_195B6
00019D74                            ; ===========================================================================
00019D74                            
00019D74                            loc_195AA:
00019D74 4A69 0010                  		tst.w	$10(a1)
00019D78 6700                       		beq.s	loc_195B6
00019D7A 117C 0008 001C             		move.b	#8,$1C(a0)
00019D80                            
00019D80                            loc_195B6:
00019D80 6000                       		bra.s	loc_195BE
00019D82                            ; ===========================================================================
00019D82                            
00019D82                            Obj75_FlameDelete:
00019D82 4EF9 0000 DCC0             		jmp	DeleteObject
00019D88                            ; ===========================================================================
00019D88                            
00019D88                            loc_195BE:
00019D88 43F9 0001 8490             		lea	(Ani_Eggman).l,a1
00019D8E 4EB9 0000 AD44             		jsr	AnimateSprite
00019D94 2268 0034                  		movea.l	$34(a0),a1
00019D98 3169 0008 0008             		move.w	8(a1),8(a0)
00019D9E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019DA4                            
00019DA4                            loc_195DA:
00019DA4 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019DAA 7003                       		moveq	#3,d0
00019DAC C028 0022                  		and.b	$22(a0),d0
00019DB0 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019DB6 8128 0001                  		or.b	d0,1(a0)
00019DBA 4EF9 0000 DC84             		jmp	DisplaySprite
00019DC0                            ; ===========================================================================
00019DC0                            
00019DC0                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019DC0 217C 0001 85A8 0004        		move.l	#Map_BossItems,4(a0)
00019DC8 317C 246C 0002             		move.w	#$246C,2(a0)
00019DCE 117C 0005 001A             		move.b	#5,$1A(a0)
00019DD4 2268 0034                  		movea.l	$34(a0),a1
00019DD8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019DDE 6600                       		bne.s	loc_1961C
00019DE0 4A28 0001                  		tst.b	1(a0)
00019DE4 6A00                       		bpl.s	Obj75_SpikeDelete
00019DE6                            
00019DE6                            loc_1961C:
00019DE6 3169 0008 0008             		move.w	8(a1),8(a0)
00019DEC 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019DF2 3028 003C                  		move.w	$3C(a0),d0
00019DF6 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019DFC 6600                       		bne.s	loc_19652
00019DFE 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019E04 6700                       		beq.s	loc_1964C
00019E06 4A29 0028                  		tst.b	$28(a1)
00019E0A 6600                       		bne.s	loc_19658
00019E0C 0C40 0094                  		cmpi.w	#$94,d0
00019E10 6C00                       		bge.s	loc_19658
00019E12 5E40                       		addq.w	#7,d0
00019E14 6000                       		bra.s	loc_19658
00019E16                            ; ===========================================================================
00019E16                            
00019E16                            loc_1964C:
00019E16 4A69 003C                  		tst.w	$3C(a1)
00019E1A 6A00                       		bpl.s	loc_19658
00019E1C                            
00019E1C                            loc_19652:
00019E1C 4A40                       		tst.w	d0
00019E1E 6F00                       		ble.s	loc_19658
00019E20 5B40                       		subq.w	#5,d0
00019E22                            
00019E22                            loc_19658:
00019E22 3140 003C                  		move.w	d0,$3C(a0)
00019E26 E440                       		asr.w	#2,d0
00019E28 D168 000C                  		add.w	d0,$C(a0)
00019E2C 117C 0008 0019             		move.b	#8,$19(a0)
00019E32 117C 000C 0016             		move.b	#$C,$16(a0)
00019E38 4228 0020                  		clr.b	$20(a0)
00019E3C 2268 0034                  		movea.l	$34(a0),a1
00019E40 4A29 0020                  		tst.b	$20(a1)
00019E44 6700                       		beq.s	loc_19688
00019E46 4A29 0029                  		tst.b	$29(a1)
00019E4A 6600                       		bne.s	loc_19688
00019E4C 117C 0084 0020             		move.b	#$84,$20(a0)
00019E52                            
00019E52                            loc_19688:
00019E52 6000 FF50                  		bra.w	loc_195DA
00019E56                            ; ===========================================================================
00019E56                            
00019E56                            Obj75_SpikeDelete:
00019E56 4EF9 0000 DCC0             		jmp	DeleteObject
00019E5C                            ; ===========================================================================
00019E5C                            ; ---------------------------------------------------------------------------
00019E5C                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019E5C                            ; ---------------------------------------------------------------------------
00019E5C                            
00019E5C                            Obj76:					; XREF: Obj_Index
00019E5C 7000                       		moveq	#0,d0
00019E5E 1028 0024                  		move.b	$24(a0),d0
00019E62 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019E66 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019E6A                            ; ===========================================================================
00019E6A 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019E6C 0000                       		dc.w Obj76_Action-Obj76_Index
00019E6E 0000                       		dc.w loc_19762-Obj76_Index
00019E70                            ; ===========================================================================
00019E70                            
00019E70                            Obj76_Main:				; XREF: Obj76_Index
00019E70 7800                       		moveq	#0,d4
00019E72 3A3C 2C10                  		move.w	#$2C10,d5
00019E76 7C09                       		moveq	#9,d6
00019E78 43D0                       		lea	(a0),a1
00019E7A 6000                       		bra.s	Obj76_MakeBlock
00019E7C                            ; ===========================================================================
00019E7C                            
00019E7C                            Obj76_Loop:
00019E7C 4EB9 0000 E10A             		jsr	SingleObjLoad
00019E82 6600                       		bne.s	Obj76_ExitLoop
00019E84                            
00019E84                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019E84 12BC 0076                  		move.b	#$76,(a1)
00019E88 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019E90 337C 4000 0002             		move.w	#$4000,2(a1)
00019E96 137C 0004 0001             		move.b	#4,1(a1)
00019E9C 137C 0010 0019             		move.b	#$10,$19(a1)
00019EA2 137C 0010 0016             		move.b	#$10,$16(a1)
00019EA8 137C 0003 0018             		move.b	#3,$18(a1)
00019EAE 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019EB2 337C 0582 000C             		move.w	#$582,$C(a1)
00019EB8 3344 0028                  		move.w	d4,$28(a1)
00019EBC 0644 0101                  		addi.w	#$101,d4
00019EC0 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019EC4 5429 0024                  		addq.b	#2,$24(a1)
00019EC8 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019ECC                            
00019ECC                            Obj76_ExitLoop:
00019ECC 4E75                       		rts	
00019ECE                            ; ===========================================================================
00019ECE                            
00019ECE                            Obj76_Action:				; XREF: Obj76_Index
00019ECE 1028 0029                  		move.b	$29(a0),d0
00019ED2 B028 0028                  		cmp.b	$28(a0),d0
00019ED6 6700                       		beq.s	Obj76_Solid
00019ED8 4A00                       		tst.b	d0
00019EDA 6B00                       		bmi.s	loc_19718
00019EDC                            
00019EDC                            loc_19712:
00019EDC 6100 0000                  		bsr.w	Obj76_Break
00019EE0 6000                       		bra.s	Obj76_Display
00019EE2                            ; ===========================================================================
00019EE2                            
00019EE2                            loc_19718:
00019EE2 2268 0034                  		movea.l	$34(a0),a1
00019EE6 4A29 0021                  		tst.b	$21(a1)
00019EEA 67F0                       		beq.s	loc_19712
00019EEC 3169 0008 0008             		move.w	8(a1),8(a0)
00019EF2 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019EF8 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019EFE B2C8                       		cmpa.w	a0,a1
00019F00 6500                       		bcs.s	Obj76_Display
00019F02 3029 0012                  		move.w	$12(a1),d0
00019F06 48C0                       		ext.l	d0
00019F08 E080                       		asr.l	#8,d0
00019F0A D168 000C                  		add.w	d0,$C(a0)
00019F0E 6000                       		bra.s	Obj76_Display
00019F10                            ; ===========================================================================
00019F10                            
00019F10                            Obj76_Solid:				; XREF: Obj76_Action
00019F10 323C 001B                  		move.w	#$1B,d1
00019F14 343C 0010                  		move.w	#$10,d2
00019F18 363C 0011                  		move.w	#$11,d3
00019F1C 3828 0008                  		move.w	8(a0),d4
00019F20 4EB9 0001 0054             		jsr	SolidObject
00019F26                            
00019F26                            Obj76_Display:				; XREF: Obj76_Action
00019F26 4EF9 0000 DC84             		jmp	DisplaySprite
00019F2C                            ; ===========================================================================
00019F2C                            
00019F2C                            loc_19762:				; XREF: Obj76_Index
00019F2C 4A28 0001                  		tst.b	1(a0)
00019F30 6A00                       		bpl.s	Obj76_Delete
00019F32 4EB9 0000 DC32             		jsr	ObjectFall
00019F38 4EF9 0000 DC84             		jmp	DisplaySprite
00019F3E                            ; ===========================================================================
00019F3E                            
00019F3E                            Obj76_Delete:
00019F3E 4EF9 0000 DCC0             		jmp	DeleteObject
00019F44                            
00019F44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019F44                            
00019F44                            
00019F44                            Obj76_Break:				; XREF: Obj76_Action
00019F44 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019F48 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019F4C 7801                       		moveq	#1,d4
00019F4E 7203                       		moveq	#3,d1
00019F50 7438                       		moveq	#$38,d2
00019F52 5428 0024                  		addq.b	#2,$24(a0)
00019F56 117C 0008 0019             		move.b	#8,$19(a0)
00019F5C 117C 0008 0016             		move.b	#8,$16(a0)
00019F62 43D0                       		lea	(a0),a1
00019F64 6000                       		bra.s	Obj76_MakeFrag
00019F66                            ; ===========================================================================
00019F66                            
00019F66                            Obj76_LoopFrag:
00019F66 4EB9 0000 E120             		jsr	SingleObjLoad2
00019F6C 6600                       		bne.s	loc_197D4
00019F6E                            
00019F6E                            Obj76_MakeFrag:
00019F6E 45D0                       		lea	(a0),a2
00019F70 47D1                       		lea	(a1),a3
00019F72 7603                       		moveq	#3,d3
00019F74                            
00019F74                            loc_197AA:
00019F74 26DA                       		move.l	(a2)+,(a3)+
00019F76 26DA                       		move.l	(a2)+,(a3)+
00019F78 26DA                       		move.l	(a2)+,(a3)+
00019F7A 26DA                       		move.l	(a2)+,(a3)+
00019F7C 51CB FFF6                  		dbf	d3,loc_197AA
00019F80                            
00019F80 335C 0010                  		move.w	(a4)+,$10(a1)
00019F84 335C 0012                  		move.w	(a4)+,$12(a1)
00019F88 361D                       		move.w	(a5)+,d3
00019F8A D769 0008                  		add.w	d3,8(a1)
00019F8E 361D                       		move.w	(a5)+,d3
00019F90 D769 000C                  		add.w	d3,$C(a1)
00019F94 1344 001A                  		move.b	d4,$1A(a1)
00019F98 5244                       		addq.w	#1,d4
00019F9A 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019F9E                            
00019F9E                            loc_197D4:
00019F9E 303C 00CB                  		move.w	#$CB,d0
00019FA2 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
00019FA8                            ; End of function Obj76_Break
00019FA8                            
00019FA8                            ; ===========================================================================
00019FA8 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019FAC 0180 FE00                  		dc.w $180, $FE00
00019FB0 FF00 FF00                  		dc.w $FF00, $FF00
00019FB4 0100 FF00                  		dc.w $100, $FF00
00019FB8 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019FBC 0010 0000                  		dc.w $10, 0
00019FC0 0000 0010                  		dc.w 0,	$10
00019FC4 0010 0010                  		dc.w $10, $10
00019FC8                            ; ---------------------------------------------------------------------------
00019FC8                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019FC8                            ; ---------------------------------------------------------------------------
00019FC8                            Map_obj76:
00019FC8                            	include "_maps\obj76.asm"
00019FC8                            ; ---------------------------------------------------------------------------
00019FC8                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019FC8                            ; ---------------------------------------------------------------------------
00019FC8 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019FCC 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019FD0 0000                       		dc.w byte_19826-Map_obj76
00019FD2 02                         byte_19808:	dc.b 2
00019FD3 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019FD8 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019FDD 00                         		dc.b 0
00019FDE 01                         byte_19814:	dc.b 1
00019FDF F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019FE4 01                         byte_1981A:	dc.b 1
00019FE5 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019FEA 01                         byte_19820:	dc.b 1
00019FEB F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019FF0 01                         byte_19826:	dc.b 1
00019FF1 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019FF6                            		even
00019FF6                            		even
00019FF6                            
00019FF6                            ; ===========================================================================
00019FF6                            
00019FF6                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019FF6 4EF9 0000 DCC0             		jmp	DeleteObject
00019FFC                            ; ===========================================================================
00019FFC                            ; ---------------------------------------------------------------------------
00019FFC                            ; Object 82 - Eggman (SBZ2)
00019FFC                            ; ---------------------------------------------------------------------------
00019FFC                            
00019FFC                            Obj82:					; XREF: Obj_Index
00019FFC 7000                       		moveq	#0,d0
00019FFE 1028 0024                  		move.b	$24(a0),d0
0001A002 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A006 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A00A                            ; ===========================================================================
0001A00A 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A00C 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A00E 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A010                            
0001A010 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A013 0400 03                    		dc.b 4,	0, 3
0001A016                            ; ===========================================================================
0001A016                            
0001A016                            Obj82_Main:				; XREF: Obj82_Index
0001A016 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A01A 317C 2160 0008             		move.w	#$2160,8(a0)
0001A020 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A026 117C 000F 0020             		move.b	#$F,$20(a0)
0001A02C 117C 0010 0021             		move.b	#$10,$21(a0)
0001A032 08A8 0000 0022             		bclr	#0,$22(a0)
0001A038 4228 0025                  		clr.b	$25(a0)
0001A03C 115A 0024                  		move.b	(a2)+,$24(a0)
0001A040 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A044 115A 0018                  		move.b	(a2)+,$18(a0)
0001A048 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A050 317C 0400 0002             		move.w	#$400,2(a0)
0001A056 117C 0004 0001             		move.b	#4,1(a0)
0001A05C 08E8 0007 0001             		bset	#7,1(a0)
0001A062 117C 0020 0019             		move.b	#$20,$19(a0)
0001A068 4EB9 0000 E120             		jsr	SingleObjLoad2
0001A06E 6600                       		bne.s	Obj82_Eggman
0001A070 2348 0034                  		move.l	a0,$34(a1)
0001A074 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A078 337C 2130 0008             		move.w	#$2130,8(a1)
0001A07E 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A084 4228 0025                  		clr.b	$25(a0)
0001A088 135A 0024                  		move.b	(a2)+,$24(a1)
0001A08C 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A090 135A 0018                  		move.b	(a2)+,$18(a1)
0001A094 237C 0000 C478 0004        		move.l	#Map_obj32,4(a1)
0001A09C 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A0A2 137C 0004 0001             		move.b	#4,1(a1)
0001A0A8 08E9 0007 0001             		bset	#7,1(a1)
0001A0AE 137C 0010 0019             		move.b	#$10,$19(a1)
0001A0B4 137C 0000 001A             		move.b	#0,$1A(a1)
0001A0BA                            
0001A0BA                            Obj82_Eggman:				; XREF: Obj82_Index
0001A0BA 7000                       		moveq	#0,d0
0001A0BC 1028 0025                  		move.b	$25(a0),d0
0001A0C0 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A0C4 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A0C8 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A0CC 4EB9 0000 AD44             		jsr	AnimateSprite
0001A0D2 4EF9 0000 DC84             		jmp	DisplaySprite
0001A0D8                            ; ===========================================================================
0001A0D8 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A0DA 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A0DC 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A0DE 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A0E0                            ; ===========================================================================
0001A0E0                            
0001A0E0                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A0E0 3028 0008                  		move.w	8(a0),d0
0001A0E4 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A0E8 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A0EC 6400                       		bcc.s	loc_19934	; if not, branch
0001A0EE 5428 0025                  		addq.b	#2,$25(a0)
0001A0F2 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A0F8 117C 0001 001C             		move.b	#1,$1C(a0)
0001A0FE                            
0001A0FE                            loc_19934:				; XREF: Obj82_EggIndex
0001A0FE 4EF9 0000 DC5E             		jmp	SpeedToPos
0001A104                            ; ===========================================================================
0001A104                            
0001A104                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A104 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A108 6600                       		bne.s	loc_19954	; if time remains, branch
0001A10A 5428 0025                  		addq.b	#2,$25(a0)
0001A10E 117C 0002 001C             		move.b	#2,$1C(a0)
0001A114 5868 000C                  		addq.w	#4,$C(a0)
0001A118 317C 000F 003C             		move.w	#15,$3C(a0)
0001A11E                            
0001A11E                            loc_19954:
0001A11E 60DE                       		bra.s	loc_19934
0001A120                            ; ===========================================================================
0001A120                            
0001A120                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A120 5368 003C                  		subq.w	#1,$3C(a0)
0001A124 6E00                       		bgt.s	loc_199D0
0001A126 6600                       		bne.s	loc_1996A
0001A128 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A12E 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A134                            
0001A134                            loc_1996A:
0001A134 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A13A 6E00                       		bgt.s	loc_19976
0001A13C 4268 0010                  		clr.w	$10(a0)
0001A140                            
0001A140                            loc_19976:
0001A140 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A146 4A68 0012                  		tst.w	$12(a0)
0001A14A 6B00                       		bmi.s	Obj82_FindBlocks
0001A14C 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A152 6500                       		bcs.s	Obj82_FindBlocks
0001A154 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A15A 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A160 6500                       		bcs.s	Obj82_FindBlocks
0001A162 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A168 4268 0012                  		clr.w	$12(a0)
0001A16C                            
0001A16C                            Obj82_FindBlocks:
0001A16C 3028 0010                  		move.w	$10(a0),d0
0001A170 8068 0012                  		or.w	$12(a0),d0
0001A174 6600                       		bne.s	loc_199D0
0001A176 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A17A 703E                       		moveq	#$3E,d0
0001A17C 7240                       		moveq	#$40,d1
0001A17E                            
0001A17E                            Obj82_FindLoop:	
0001A17E D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A180 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A184 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A188                            
0001A188 6600                       		bne.s	loc_199D0
0001A18A 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A190 5428 0025                  		addq.b	#2,$25(a0)
0001A194 117C 0001 001C             		move.b	#1,$1C(a0)
0001A19A                            
0001A19A                            loc_199D0:
0001A19A 6000 FF62                  		bra.w	loc_19934
0001A19E                            ; ===========================================================================
0001A19E                            
0001A19E                            Obj82_Switch:				; XREF: Obj82_Index
0001A19E 7000                       		moveq	#0,d0
0001A1A0 1028 0025                  		move.b	$25(a0),d0
0001A1A4 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A1A8 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A1AC                            ; ===========================================================================
0001A1AC 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A1AE 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A1B0                            ; ===========================================================================
0001A1B0                            
0001A1B0                            loc_199E6:				; XREF: Obj82_SwIndex
0001A1B0 2268 0034                  		movea.l	$34(a0),a1
0001A1B4 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A1BA 6600                       		bne.s	Obj82_SwDisplay
0001A1BC 117C 0001 001A             		move.b	#1,$1A(a0)
0001A1C2 5428 0025                  		addq.b	#2,$25(a0)
0001A1C6                            
0001A1C6                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A1C6 4EF9 0000 DC84             		jmp	DisplaySprite
0001A1CC                            ; ===========================================================================
0001A1CC                            Ani_obj82:
0001A1CC                            	include "_anim\obj82.asm"
0001A1CC                            ; ---------------------------------------------------------------------------
0001A1CC                            ; Animation script - Eggman (SBZ2)
0001A1CC                            ; ---------------------------------------------------------------------------
0001A1CC 0000                       		dc.w byte_19A10-Ani_obj82
0001A1CE 0000                       		dc.w byte_19A14-Ani_obj82
0001A1D0 0000                       		dc.w byte_19A18-Ani_obj82
0001A1D2 0000                       		dc.w byte_19A20-Ani_obj82
0001A1D4 0000                       		dc.w byte_19A24-Ani_obj82
0001A1D6 0000                       		dc.w byte_19A2A-Ani_obj82
0001A1D8 0000                       		dc.w byte_19A30-Ani_obj82
0001A1DA 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A1DE 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A1E2 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A1EA 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A1EE 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A1F4 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A1FA 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A1FE                            		even
0001A1FE                            		even
0001A1FE                            
0001A1FE                            ; ---------------------------------------------------------------------------
0001A1FE                            ; Sprite mappings - Eggman (SBZ2)
0001A1FE                            ; ---------------------------------------------------------------------------
0001A1FE                            Map_obj82:
0001A1FE                            	include "_maps\obj82.asm"
0001A1FE                            ; ================================================================================
0001A1FE                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A1FE                            ; ================================================================================
0001A1FE                            
0001A1FE                            DATAA16Z12RYSAF:
0001A1FE 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A202 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A206 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A20A 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A20E 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A212 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A214 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A215 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A21A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A21F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A224 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A225 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A22A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A22F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A234 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A239 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A23A E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A23F E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A244 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A249 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A24E 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A24F E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A254 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A259 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A25E 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A25F E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A264 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A269 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A26E E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A273 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A274 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A279 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A27E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A283 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A288 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A289 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A28E E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A293 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A298 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A29D F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A2A2 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A2A7 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A2AC 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A2AD 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A2B2 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A2B7 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A2BC F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A2C1 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A2C2 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A2C7 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A2CC 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A2D1 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A2D6 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A2DB 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A2DC E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A2E1 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A2E6 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A2EB 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A2F0 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A2F5 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A2FA 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A2FF 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A304 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A305 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A30A F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A30F EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A314                            	even
0001A314                            	even
0001A314                            
0001A314                            ; ===========================================================================
0001A314                            ; ---------------------------------------------------------------------------
0001A314                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A314                            ; ---------------------------------------------------------------------------
0001A314                            
0001A314                            Obj83:					; XREF: Obj_Index
0001A314 7000                       		moveq	#0,d0
0001A316 1028 0024                  		move.b	$24(a0),d0
0001A31A 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A31E 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A322                            ; ===========================================================================
0001A322 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A324 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A326 0000                       		dc.w loc_19C36-Obj83_Index
0001A328 0000                       		dc.w loc_19C62-Obj83_Index
0001A32A 0000                       		dc.w loc_19C72-Obj83_Index
0001A32C 0000                       		dc.w loc_19C80-Obj83_Index
0001A32E                            ; ===========================================================================
0001A32E                            
0001A32E                            Obj83_Main:				; XREF: Obj83_Index
0001A32E 317C 2080 0008             		move.w	#$2080,8(a0)
0001A334 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A33A 117C 0080 0019             		move.b	#$80,$19(a0)
0001A340 117C 0010 0016             		move.b	#$10,$16(a0)
0001A346 117C 0004 0001             		move.b	#4,1(a0)
0001A34C 08E8 0007 0001             		bset	#7,1(a0)
0001A352 7800                       		moveq	#0,d4
0001A354 3A3C 2010                  		move.w	#$2010,d5
0001A358 7C07                       		moveq	#7,d6
0001A35A 45E8 0030                  		lea	$30(a0),a2
0001A35E                            
0001A35E                            Obj83_MakeBlock:
0001A35E 4EB9 0000 E10A             		jsr	SingleObjLoad
0001A364 6600                       		bne.s	Obj83_ExitMake
0001A366 34C9                       		move.w	a1,(a2)+
0001A368 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A36C 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A374 337C 4518 0002             		move.w	#$4518,2(a1)
0001A37A 137C 0004 0001             		move.b	#4,1(a1)
0001A380 137C 0010 0019             		move.b	#$10,$19(a1)
0001A386 137C 0010 0016             		move.b	#$10,$16(a1)
0001A38C 137C 0003 0018             		move.b	#3,$18(a1)
0001A392 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A396 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A39C 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A3A0 137C 0008 0024             		move.b	#8,$24(a1)
0001A3A6 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A3AA                            
0001A3AA                            Obj83_ExitMake:
0001A3AA 5428 0024                  		addq.b	#2,$24(a0)
0001A3AE 4E75                       		rts	
0001A3B0                            ; ===========================================================================
0001A3B0                            
0001A3B0                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A3B0 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A3B6 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A3B8 4228 001A                  		clr.b	$1A(a0)
0001A3BC 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A3C0                            
0001A3C0                            Obj83_Solid:
0001A3C0 7000                       		moveq	#0,d0
0001A3C2 1028 001A                  		move.b	$1A(a0),d0
0001A3C6 4400                       		neg.b	d0
0001A3C8 4880                       		ext.w	d0
0001A3CA 5040                       		addq.w	#8,d0
0001A3CC E940                       		asl.w	#4,d0
0001A3CE 383C 2100                  		move.w	#$2100,d4
0001A3D2 9840                       		sub.w	d0,d4
0001A3D4 1140 0019                  		move.b	d0,$19(a0)
0001A3D8 3144 0008                  		move.w	d4,8(a0)
0001A3DC 720B                       		moveq	#$B,d1
0001A3DE D240                       		add.w	d0,d1
0001A3E0 7410                       		moveq	#$10,d2
0001A3E2 7611                       		moveq	#$11,d3
0001A3E4 4EF9 0001 0054             		jmp	SolidObject
0001A3EA                            ; ===========================================================================
0001A3EA                            
0001A3EA                            loc_19C36:				; XREF: Obj83_Index
0001A3EA 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A3F0 6400                       		bcc.s	Obj83_Solid2
0001A3F2 70FF                       		moveq	#-1,d0
0001A3F4 1028 001A                  		move.b	$1A(a0),d0
0001A3F8 4880                       		ext.w	d0
0001A3FA D040                       		add.w	d0,d0
0001A3FC 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A400 2240                       		movea.l	d0,a1
0001A402 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A408 5228 001A                  		addq.b	#1,$1A(a0)
0001A40C 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A412 6700                       		beq.s	loc_19C62
0001A414                            
0001A414                            Obj83_Solid2:
0001A414 60AA                       		bra.s	Obj83_Solid
0001A416                            ; ===========================================================================
0001A416                            
0001A416                            loc_19C62:				; XREF: Obj83_Index
0001A416 08A8 0003 0022             		bclr	#3,$22(a0)
0001A41C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A422 6000 FBD2                  		bra.w	loc_1982C
0001A426                            ; ===========================================================================
0001A426                            
0001A426                            loc_19C72:				; XREF: Obj83_Index
0001A426 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A42C 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A42E 4EF9 0000 DC84             		jmp	DisplaySprite
0001A434                            ; ===========================================================================
0001A434                            
0001A434                            loc_19C80:				; XREF: Obj83_Index
0001A434 4A28 0001                  		tst.b	1(a0)
0001A438 6A00 FBBC                  		bpl.w	loc_1982C
0001A43C 4EB9 0000 DC32             		jsr	ObjectFall
0001A442 4EF9 0000 DC84             		jmp	DisplaySprite
0001A448                            ; ===========================================================================
0001A448                            
0001A448                            Obj83_Break:				; XREF: loc_19C72
0001A448 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A44C 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A450 7801                       		moveq	#1,d4
0001A452 7203                       		moveq	#3,d1
0001A454 7438                       		moveq	#$38,d2
0001A456 5428 0024                  		addq.b	#2,$24(a0)
0001A45A 117C 0008 0019             		move.b	#8,$19(a0)
0001A460 117C 0008 0016             		move.b	#8,$16(a0)
0001A466 43D0                       		lea	(a0),a1
0001A468 6000                       		bra.s	Obj83_MakeFrag
0001A46A                            ; ===========================================================================
0001A46A                            
0001A46A                            Obj83_LoopFrag:
0001A46A 4EB9 0000 E120             		jsr	SingleObjLoad2
0001A470 6600                       		bne.s	Obj83_BreakSnd
0001A472                            
0001A472                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A472 45D0                       		lea	(a0),a2
0001A474 47D1                       		lea	(a1),a3
0001A476 7603                       		moveq	#3,d3
0001A478                            
0001A478                            loc_19CC4:
0001A478 26DA                       		move.l	(a2)+,(a3)+
0001A47A 26DA                       		move.l	(a2)+,(a3)+
0001A47C 26DA                       		move.l	(a2)+,(a3)+
0001A47E 26DA                       		move.l	(a2)+,(a3)+
0001A480 51CB FFF6                  		dbf	d3,loc_19CC4
0001A484                            
0001A484 335C 0012                  		move.w	(a4)+,$12(a1)
0001A488 361D                       		move.w	(a5)+,d3
0001A48A D769 0008                  		add.w	d3,8(a1)
0001A48E 361D                       		move.w	(a5)+,d3
0001A490 D769 000C                  		add.w	d3,$C(a1)
0001A494 1344 001A                  		move.b	d4,$1A(a1)
0001A498 5244                       		addq.w	#1,d4
0001A49A 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A49E                            
0001A49E                            Obj83_BreakSnd:
0001A49E 303C 00CB                  		move.w	#$CB,d0
0001A4A2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A4A8 4EF9 0000 DC84             		jmp	DisplaySprite
0001A4AE                            ; ===========================================================================
0001A4AE 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A4B2 0120 00C0                  		dc.w $120, $C0
0001A4B6 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A4BA 0010 0000                  		dc.w $10, 0
0001A4BE 0000 0010                  		dc.w 0,	$10
0001A4C2 0010 0010                  		dc.w $10, $10
0001A4C6                            ; ---------------------------------------------------------------------------
0001A4C6                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A4C6                            ; ---------------------------------------------------------------------------
0001A4C6                            Map_obj83:
0001A4C6                            	include "_maps\obj83.asm"
0001A4C6                            ; ---------------------------------------------------------------------------
0001A4C6                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A4C6                            ; ---------------------------------------------------------------------------
0001A4C6 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A4CA 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A4CE 0000                       		dc.w byte_19D46-Map_obj83
0001A4D0 01                         byte_19D1C:	dc.b 1
0001A4D1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A4D6 02                         byte_19D22:	dc.b 2
0001A4D7 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A4DC F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A4E1 00                         		dc.b 0
0001A4E2 02                         byte_19D2E:	dc.b 2
0001A4E3 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A4E8 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A4ED 00                         		dc.b 0
0001A4EE 02                         byte_19D3A:	dc.b 2
0001A4EF F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A4F4 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A4F9 00                         		dc.b 0
0001A4FA 02                         byte_19D46:	dc.b 2
0001A4FB F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A500 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A506 00                         		even
0001A506 00                         		even
0001A506                            
0001A506                            ; ===========================================================================
0001A506                            ; ---------------------------------------------------------------------------
0001A506                            ; Object 85 - Eggman (FZ)
0001A506                            ; ---------------------------------------------------------------------------
0001A506                            
0001A506                            Obj85_Delete:
0001A506 4EF9 0000 DCC0             		jmp	DeleteObject
0001A50C                            ; ===========================================================================
0001A50C                            
0001A50C                            Obj85:					; XREF: Obj_Index
0001A50C 7000                       		moveq	#0,d0
0001A50E 1028 0024                  		move.b	$24(a0),d0
0001A512 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A516 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A51A                            ; ===========================================================================
0001A51A 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A51C 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A51E 0000                       		dc.w loc_1A38E-Obj85_Index
0001A520 0000                       		dc.w loc_1A346-Obj85_Index
0001A522 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A524 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A526 0000                       		dc.w loc_1A264-Obj85_Index
0001A528                            
0001A528 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A52E 0001 A1FE                  		dc.l Map_obj82		; mappings pointer
0001A532 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A538 0000 0000                  		dc.l Map_obj84
0001A53C 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A542 0000 0000                  		dc.l Map_FZBoss
0001A546 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A54C 0001 A1FE                  		dc.l Map_obj82
0001A550 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A556 0001 84E0                  		dc.l Map_Eggman
0001A55A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A560 0001 84E0                  		dc.l Map_Eggman
0001A564                            
0001A564 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A569 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A56E 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A573 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A578 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A57D 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A582                            ; ===========================================================================
0001A582                            
0001A582                            Obj85_Main:				; XREF: Obj85_Index
0001A582 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A586 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A58A 2248                       		movea.l	a0,a1
0001A58C 7205                       		moveq	#5,d1
0001A58E 6000                       		bra.s	Obj85_LoadBoss
0001A590                            ; ===========================================================================
0001A590                            
0001A590                            Obj85_Loop:
0001A590 4EB9 0000 E120             		jsr	SingleObjLoad2
0001A596 6600                       		bne.s	loc_19E20
0001A598                            
0001A598                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A598 12BC 0085                  		move.b	#$85,(a1)
0001A59C 335A 0008                  		move.w	(a2)+,8(a1)
0001A5A0 335A 000C                  		move.w	(a2)+,$C(a1)
0001A5A4 335A 0002                  		move.w	(a2)+,2(a1)
0001A5A8 235A 0004                  		move.l	(a2)+,4(a1)
0001A5AC 135B 0024                  		move.b	(a3)+,$24(a1)
0001A5B0 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A5B4 135B 0018                  		move.b	(a3)+,$18(a1)
0001A5B8 135B 0017                  		move.b	(a3)+,$17(a1)
0001A5BC 135B 0016                  		move.b	(a3)+,$16(a1)
0001A5C0 137C 0004 0001             		move.b	#4,1(a1)
0001A5C6 08E8 0007 0001             		bset	#7,1(a0)
0001A5CC 2348 0034                  		move.l	a0,$34(a1)
0001A5D0 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A5D4                            
0001A5D4                            loc_19E20:
0001A5D4 45E8 0036                  		lea	$36(a0),a2
0001A5D8 4EB9 0000 E10A             		jsr	SingleObjLoad
0001A5DE 6600                       		bne.s	loc_19E5A
0001A5E0 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A5E4 3489                       		move.w	a1,(a2)
0001A5E6 2348 0034                  		move.l	a0,$34(a1)
0001A5EA 45E8 0038                  		lea	$38(a0),a2
0001A5EE 7400                       		moveq	#0,d2
0001A5F0 7203                       		moveq	#3,d1
0001A5F2                            
0001A5F2                            loc_19E3E:
0001A5F2 4EB9 0000 E120             		jsr	SingleObjLoad2
0001A5F8 6600                       		bne.s	loc_19E5A
0001A5FA 34C9                       		move.w	a1,(a2)+
0001A5FC 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A600 2348 0034                  		move.l	a0,$34(a1)
0001A604 1342 0028                  		move.b	d2,$28(a1)
0001A608 5442                       		addq.w	#2,d2
0001A60A 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A60E                            
0001A60E                            loc_19E5A:
0001A60E 317C 0000 0034             		move.w	#0,$34(a0)
0001A614 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A61A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A620                            
0001A620                            Obj85_Eggman:				; XREF: Obj85_Index
0001A620 7000                       		moveq	#0,d0
0001A622 1028 0034                  		move.b	$34(a0),d0
0001A626 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A62A 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A62E 4EF9 0000 DC84             		jmp	DisplaySprite
0001A634                            ; ===========================================================================
0001A634 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A638 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A63C 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A640 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A644                            ; ===========================================================================
0001A644                            
0001A644                            loc_19E90:				; XREF: off_19E80
0001A644 4AB8 F680                  		tst.l	($FFFFF680).w
0001A648 6600                       		bne.s	loc_19EA2
0001A64A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A650 6500                       		bcs.s	loc_19EA2
0001A652 5428 0034                  		addq.b	#2,$34(a0)
0001A656                            
0001A656                            loc_19EA2:
0001A656 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A65A 4E75                       		rts	
0001A65C                            ; ===========================================================================
0001A65C                            
0001A65C                            loc_19EA8:				; XREF: off_19E80
0001A65C 4A68 0030                  		tst.w	$30(a0)
0001A660 6A00                       		bpl.s	loc_19F10
0001A662 4268 0030                  		clr.w	$30(a0)
0001A666 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001A66C 0240 000C                  		andi.w	#$C,d0
0001A670 3200                       		move.w	d0,d1
0001A672 5441                       		addq.w	#2,d1
0001A674 4A80                       		tst.l	d0
0001A676 6A00                       		bpl.s	loc_19EC6
0001A678 C141                       		exg	d1,d0
0001A67A                            
0001A67A                            loc_19EC6:
0001A67A 43FA 0000                  		lea	word_19FD6(pc),a1
0001A67E 3031 0000                  		move.w	(a1,d0.w),d0
0001A682 3231 1000                  		move.w	(a1,d1.w),d1
0001A686 3140 0030                  		move.w	d0,$30(a0)
0001A68A 74FF                       		moveq	#-1,d2
0001A68C 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A690 2242                       		movea.l	d2,a1
0001A692 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A698 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A69E 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A6A2 2242                       		movea.l	d2,a1
0001A6A4 137C 0001 0029             		move.b	#1,$29(a1)
0001A6AA 337C 0000 0030             		move.w	#0,$30(a1)
0001A6B0 317C 0001 0032             		move.w	#1,$32(a0)
0001A6B6 4228 0035                  		clr.b	$35(a0)
0001A6BA 303C 00B7                  		move.w	#$B7,d0
0001A6BE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A6C4                            
0001A6C4                            loc_19F10:
0001A6C4 4A68 0032                  		tst.w	$32(a0)
0001A6C8 6B00 0000                  		bmi.w	loc_19FA6
0001A6CC 08A8 0000 0022             		bclr	#0,$22(a0)
0001A6D2 3038 D008                  		move.w	($FFFFD008).w,d0
0001A6D6 9068 0008                  		sub.w	8(a0),d0
0001A6DA 6500                       		bcs.s	loc_19F2E
0001A6DC 08E8 0000 0022             		bset	#0,$22(a0)
0001A6E2                            
0001A6E2                            loc_19F2E:
0001A6E2 323C 002B                  		move.w	#$2B,d1
0001A6E6 343C 0014                  		move.w	#$14,d2
0001A6EA 363C 0014                  		move.w	#$14,d3
0001A6EE 3828 0008                  		move.w	8(a0),d4
0001A6F2 4EB9 0001 0054             		jsr	SolidObject
0001A6F8 4A44                       		tst.w	d4
0001A6FA 6E00                       		bgt.s	loc_19F50
0001A6FC                            
0001A6FC                            loc_19F48:
0001A6FC 4A28 0035                  		tst.b	$35(a0)
0001A700 6600                       		bne.s	loc_19F88
0001A702 6000                       		bra.s	loc_19F96
0001A704                            ; ===========================================================================
0001A704                            
0001A704                            loc_19F50:
0001A704 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A708 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A70E 66EC                       		bne.s	loc_19F48
0001A710 303C 0300                  		move.w	#$300,d0
0001A714 0828 0000 0022             		btst	#0,$22(a0)
0001A71A 6600                       		bne.s	loc_19F6A
0001A71C 4440                       		neg.w	d0
0001A71E                            
0001A71E                            loc_19F6A:
0001A71E 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A722 4A28 0035                  		tst.b	$35(a0)
0001A726 6600                       		bne.s	loc_19F88
0001A728 5328 0021                  		subq.b	#1,$21(a0)
0001A72C 117C 0064 0035             		move.b	#$64,$35(a0)
0001A732 303C 00AC                  		move.w	#$AC,d0
0001A736 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A73C                            
0001A73C                            loc_19F88:
0001A73C 5328 0035                  		subq.b	#1,$35(a0)
0001A740 6700                       		beq.s	loc_19F96
0001A742 117C 0003 001C             		move.b	#3,$1C(a0)
0001A748 6000                       		bra.s	loc_19F9C
0001A74A                            ; ===========================================================================
0001A74A                            
0001A74A                            loc_19F96:
0001A74A 117C 0001 001C             		move.b	#1,$1C(a0)
0001A750                            
0001A750                            loc_19F9C:
0001A750 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A754 4EF9 0000 AD44             		jmp	AnimateSprite
0001A75A                            ; ===========================================================================
0001A75A                            
0001A75A                            loc_19FA6:
0001A75A 4A28 0021                  		tst.b	$21(a0)
0001A75E 6700                       		beq.s	loc_19FBC
0001A760 5428 0034                  		addq.b	#2,$34(a0)
0001A764 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A76A 4268 0032                  		clr.w	$32(a0)
0001A76E 4E75                       		rts	
0001A770                            ; ===========================================================================
0001A770                            
0001A770                            loc_19FBC:
0001A770 117C 0006 0034             		move.b	#6,$34(a0)
0001A776 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A77C 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A782 117C 0014 0016             		move.b	#$14,$16(a0)
0001A788 4E75                       		rts	
0001A78A                            ; ===========================================================================
0001A78A 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A79A                            ; ===========================================================================
0001A79A                            
0001A79A                            loc_19FE6:				; XREF: off_19E80
0001A79A 70FF                       		moveq	#-1,d0
0001A79C 3028 0036                  		move.w	$36(a0),d0
0001A7A0 2240                       		movea.l	d0,a1
0001A7A2 4A68 0030                  		tst.w	$30(a0)
0001A7A6 6A00                       		bpl.s	loc_1A000
0001A7A8 4268 0030                  		clr.w	$30(a0)
0001A7AC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A7B2 6100                       		bsr.s	loc_1A020
0001A7B4                            
0001A7B4                            loc_1A000:
0001A7B4 700F                       		moveq	#$F,d0
0001A7B6 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A7BA 6600                       		bne.s	loc_1A00A
0001A7BC 6100                       		bsr.s	loc_1A020
0001A7BE                            
0001A7BE                            loc_1A00A:
0001A7BE 4A68 0032                  		tst.w	$32(a0)
0001A7C2 6700                       		beq.s	locret_1A01E
0001A7C4 5528 0034                  		subq.b	#2,$34(a0)
0001A7C8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A7CE 4268 0032                  		clr.w	$32(a0)
0001A7D2                            
0001A7D2                            locret_1A01E:
0001A7D2 4E75                       		rts	
0001A7D4                            ; ===========================================================================
0001A7D4                            
0001A7D4                            loc_1A020:
0001A7D4 303C 00B1                  		move.w	#$B1,d0
0001A7D8 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A7DE                            ; ===========================================================================
0001A7DE                            
0001A7DE                            loc_1A02A:				; XREF: off_19E80
0001A7DE 117C 0030 0017             		move.b	#$30,$17(a0)
0001A7E4 08E8 0000 0022             		bset	#0,$22(a0)
0001A7EA 4EB9 0000 DC5E             		jsr	SpeedToPos
0001A7F0 117C 0006 001A             		move.b	#6,$1A(a0)
0001A7F6 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A7FC 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A802 6500                       		bcs.s	loc_1A070
0001A804 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A80A 5428 0034                  		addq.b	#2,$34(a0)
0001A80E 117C 0020 0017             		move.b	#$20,$17(a0)
0001A814 317C 0100 0010             		move.w	#$100,$10(a0)
0001A81A 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A820 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A824                            
0001A824                            loc_1A070:
0001A824 6000 0000                  		bra.w	loc_1A166
0001A828                            ; ===========================================================================
0001A828                            
0001A828                            loc_1A074:				; XREF: off_19E80
0001A828 08E8 0000 0022             		bset	#0,$22(a0)
0001A82E 117C 0004 001C             		move.b	#4,$1C(a0)
0001A834 4EB9 0000 DC5E             		jsr	SpeedToPos
0001A83A 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A840 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A846 6500                       		bcs.s	loc_1A09A
0001A848 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A84E                            
0001A84E                            loc_1A09A:
0001A84E 317C 0400 0010             		move.w	#$400,$10(a0)
0001A854 3028 0008                  		move.w	8(a0),d0
0001A858 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A85C 6A00                       		bpl.s	loc_1A0B4
0001A85E 317C 0500 0010             		move.w	#$500,$10(a0)
0001A864 6000 0000                  		bra.w	loc_1A0F2
0001A868                            ; ===========================================================================
0001A868                            
0001A868                            loc_1A0B4:
0001A868 0440 0070                  		subi.w	#$70,d0
0001A86C 6500                       		bcs.s	loc_1A0F2
0001A86E 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A874 5140                       		subq.w	#8,d0
0001A876 6500                       		bcs.s	loc_1A0F2
0001A878 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A87E 5140                       		subq.w	#8,d0
0001A880 6500                       		bcs.s	loc_1A0F2
0001A882 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A888 5140                       		subq.w	#8,d0
0001A88A 6500                       		bcs.s	loc_1A0F2
0001A88C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A892 5140                       		subq.w	#8,d0
0001A894 6500                       		bcs.s	loc_1A0F2
0001A896 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A89C 0440 0038                  		subi.w	#$38,d0
0001A8A0 6500                       		bcs.s	loc_1A0F2
0001A8A2 4268 0010                  		clr.w	$10(a0)
0001A8A6                            
0001A8A6                            loc_1A0F2:
0001A8A6 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A8AC 6500                       		bcs.s	loc_1A110
0001A8AE 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A8B4 317C 0240 0010             		move.w	#$240,$10(a0)
0001A8BA 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A8C0 5428 0034                  		addq.b	#2,$34(a0)
0001A8C4                            
0001A8C4                            loc_1A110:
0001A8C4 6000                       		bra.s	loc_1A15C
0001A8C6                            ; ===========================================================================
0001A8C6                            
0001A8C6                            loc_1A112:				; XREF: off_19E80
0001A8C6 4EB9 0000 DC5E             		jsr	SpeedToPos
0001A8CC 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A8D2 6500                       		bcs.s	loc_1A124
0001A8D4 4268 0010                  		clr.w	$10(a0)
0001A8D8                            
0001A8D8                            loc_1A124:
0001A8D8 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A8DE 4A68 0012                  		tst.w	$12(a0)
0001A8E2 6B00                       		bmi.s	loc_1A142
0001A8E4 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A8EA 6500                       		bcs.s	loc_1A142
0001A8EC 317C 0592 000C             		move.w	#$592,$C(a0)
0001A8F2 4268 0012                  		clr.w	$12(a0)
0001A8F6                            
0001A8F6                            loc_1A142:
0001A8F6 3028 0010                  		move.w	$10(a0),d0
0001A8FA 8068 0012                  		or.w	$12(a0),d0
0001A8FE 6600                       		bne.s	loc_1A15C
0001A900 5428 0034                  		addq.b	#2,$34(a0)
0001A904 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A90A 117C 0001 0021             		move.b	#1,$21(a0)
0001A910                            
0001A910                            loc_1A15C:
0001A910 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A914 4EB9 0000 AD44             		jsr	AnimateSprite
0001A91A                            
0001A91A                            loc_1A166:
0001A91A 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A920 6C00                       		bge.s	loc_1A172
0001A922 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A926                            
0001A926                            loc_1A172:
0001A926 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A92C 6C00                       		bge.s	locret_1A190
0001A92E 323C 001B                  		move.w	#$1B,d1
0001A932 343C 0070                  		move.w	#$70,d2
0001A936 363C 0071                  		move.w	#$71,d3
0001A93A 3828 0008                  		move.w	8(a0),d4
0001A93E 4EF9 0001 0054             		jmp	SolidObject
0001A944                            ; ===========================================================================
0001A944                            
0001A944                            locret_1A190:
0001A944 4E75                       		rts	
0001A946                            ; ===========================================================================
0001A946                            
0001A946                            loc_1A192:				; XREF: off_19E80
0001A946 217C 0001 84E0 0004        		move.l	#Map_Eggman,4(a0)
0001A94E 317C 0400 0002             		move.w	#$400,2(a0)
0001A954 117C 0000 001C             		move.b	#0,$1C(a0)
0001A95A 08E8 0000 0022             		bset	#0,$22(a0)
0001A960 4EB9 0000 DC5E             		jsr	SpeedToPos
0001A966 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A96C 6400                       		bcc.s	loc_1A1D0
0001A96E 317C 0180 0010             		move.w	#$180,$10(a0)
0001A974 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A97A 117C 000F 0020             		move.b	#$F,$20(a0)
0001A980 5428 0034                  		addq.b	#2,$34(a0)
0001A984                            
0001A984                            loc_1A1D0:
0001A984 6000 FF8A                  		bra.w	loc_1A15C
0001A988                            ; ===========================================================================
0001A988                            
0001A988                            loc_1A1D4:				; XREF: off_19E80
0001A988 08E8 0000 0022             		bset	#0,$22(a0)
0001A98E 4EB9 0000 DC5E             		jsr	SpeedToPos
0001A994 4A68 0030                  		tst.w	$30(a0)
0001A998 6600                       		bne.s	loc_1A1FC
0001A99A 4A28 0020                  		tst.b	$20(a0)
0001A99E 6600                       		bne.s	loc_1A216
0001A9A0 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A9A6 303C 00AC                  		move.w	#$AC,d0
0001A9AA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A9B0                            
0001A9B0                            loc_1A1FC:
0001A9B0 5368 0030                  		subq.w	#1,$30(a0)
0001A9B4 6600                       		bne.s	loc_1A216
0001A9B6 4A28 0022                  		tst.b	$22(a0)
0001A9BA 6A00                       		bpl.s	loc_1A210
0001A9BC 317C 0060 0012             		move.w	#$60,$12(a0)
0001A9C2 6000                       		bra.s	loc_1A216
0001A9C4                            ; ===========================================================================
0001A9C4                            
0001A9C4                            loc_1A210:
0001A9C4 117C 000F 0020             		move.b	#$F,$20(a0)
0001A9CA                            
0001A9CA                            loc_1A216:
0001A9CA 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A9D0 6D00                       		blt.s	loc_1A23A
0001A9D2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A9D8 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A9DE 4278 D014                  		clr.w	($FFFFD014).w
0001A9E2 4A68 0012                  		tst.w	$12(a0)
0001A9E6 6A00                       		bpl.s	loc_1A248
0001A9E8 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A9EE                            
0001A9EE                            loc_1A23A:
0001A9EE 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A9F4 6D00                       		blt.s	loc_1A248
0001A9F6 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A9FC                            
0001A9FC                            loc_1A248:
0001A9FC 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AA02 6500                       		bcs.s	loc_1A260
0001AA04 4A28 0001                  		tst.b	1(a0)
0001AA08 6B00                       		bmi.s	loc_1A260
0001AA0A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AA10 6000 FAF4                  		bra.w	Obj85_Delete
0001AA14                            ; ===========================================================================
0001AA14                            
0001AA14                            loc_1A260:
0001AA14 6000 FEFA                  		bra.w	loc_1A15C
0001AA18                            ; ===========================================================================
0001AA18                            
0001AA18                            loc_1A264:				; XREF: Obj85_Index
0001AA18 2268 0034                  		movea.l	$34(a0),a1
0001AA1C 1011                       		move.b	(a1),d0
0001AA1E B010                       		cmp.b	(a0),d0
0001AA20 6600 FAE4                  		bne.w	Obj85_Delete
0001AA24 117C 0007 001C             		move.b	#7,$1C(a0)
0001AA2A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AA30 6C00                       		bge.s	loc_1A280
0001AA32 6000                       		bra.s	loc_1A2A6
0001AA34                            ; ===========================================================================
0001AA34                            
0001AA34                            loc_1A280:
0001AA34 4A69 0010                  		tst.w	$10(a1)
0001AA38 6700                       		beq.s	loc_1A28C
0001AA3A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AA40                            
0001AA40                            loc_1A28C:
0001AA40 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001AA44 4EB9 0000 AD44             		jsr	AnimateSprite
0001AA4A                            
0001AA4A                            loc_1A296:
0001AA4A 2268 0034                  		movea.l	$34(a0),a1
0001AA4E 3169 0008 0008             		move.w	8(a1),8(a0)
0001AA54 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AA5A                            
0001AA5A                            loc_1A2A6:
0001AA5A 2268 0034                  		movea.l	$34(a0),a1
0001AA5E 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AA64 7003                       		moveq	#3,d0
0001AA66 C028 0022                  		and.b	$22(a0),d0
0001AA6A 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AA70 8128 0001                  		or.b	d0,1(a0)
0001AA74 4EF9 0000 DC84             		jmp	DisplaySprite
0001AA7A                            ; ===========================================================================
0001AA7A                            
0001AA7A                            loc_1A2C6:				; XREF: Obj85_Index
0001AA7A 2268 0034                  		movea.l	$34(a0),a1
0001AA7E 1011                       		move.b	(a1),d0
0001AA80 B010                       		cmp.b	(a0),d0
0001AA82 6600 FA82                  		bne.w	Obj85_Delete
0001AA86 0CA9 0001 84E0 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AA8E 6700                       		beq.s	loc_1A2E4
0001AA90 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AA96 60C2                       		bra.s	loc_1A2A6
0001AA98                            ; ===========================================================================
0001AA98                            
0001AA98                            loc_1A2E4:
0001AA98 117C 0001 001C             		move.b	#1,$1C(a0)
0001AA9E 4A29 0021                  		tst.b	$21(a1)
0001AAA2 6F00                       		ble.s	loc_1A312
0001AAA4 117C 0006 001C             		move.b	#6,$1C(a0)
0001AAAA 217C 0001 84E0 0004        		move.l	#Map_Eggman,4(a0)
0001AAB2 317C 0400 0002             		move.w	#$400,2(a0)
0001AAB8 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001AABC 4EB9 0000 AD44             		jsr	AnimateSprite
0001AAC2 6000 FF86                  		bra.w	loc_1A296
0001AAC6                            ; ===========================================================================
0001AAC6                            
0001AAC6                            loc_1A312:
0001AAC6 4A28 0001                  		tst.b	1(a0)
0001AACA 6A00 FA3A                  		bpl.w	Obj85_Delete
0001AACE 6100 D53C                  		bsr.w	BossDefeated
0001AAD2 117C 0002 0018             		move.b	#2,$18(a0)
0001AAD8 117C 0000 001C             		move.b	#0,$1C(a0)
0001AADE 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AAE6 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AAEC 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AAF0 4EB9 0000 AD44             		jsr	AnimateSprite
0001AAF6 6000 FF52                  		bra.w	loc_1A296
0001AAFA                            ; ===========================================================================
0001AAFA                            
0001AAFA                            loc_1A346:				; XREF: Obj85_Index
0001AAFA 08E8 0000 0022             		bset	#0,$22(a0)
0001AB00 2268 0034                  		movea.l	$34(a0),a1
0001AB04 0CA9 0001 84E0 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AB0C 6700                       		beq.s	loc_1A35E
0001AB0E 6000 FF4A                  		bra.w	loc_1A2A6
0001AB12                            ; ===========================================================================
0001AB12                            
0001AB12                            loc_1A35E:
0001AB12 3169 0008 0008             		move.w	8(a1),8(a0)
0001AB18 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AB1E 4A28 001E                  		tst.b	$1E(a0)
0001AB22 6600                       		bne.s	loc_1A376
0001AB24 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AB2A                            
0001AB2A                            loc_1A376:
0001AB2A 5328 001E                  		subq.b	#1,$1E(a0)
0001AB2E 6E00                       		bgt.s	loc_1A38A
0001AB30 5228 001A                  		addq.b	#1,$1A(a0)
0001AB34 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AB3A 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AB3E                            
0001AB3E                            loc_1A38A:
0001AB3E 6000 FF0A                  		bra.w	loc_1A296
0001AB42                            ; ===========================================================================
0001AB42                            
0001AB42                            loc_1A38E:				; XREF: Obj85_Index
0001AB42 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AB48 3038 D008                  		move.w	($FFFFD008).w,d0
0001AB4C 9068 0008                  		sub.w	8(a0),d0
0001AB50 6500                       		bcs.s	loc_1A3A6
0001AB52 4A28 0001                  		tst.b	1(a0)
0001AB56 6A00 F9AE                  		bpl.w	Obj85_Delete
0001AB5A                            
0001AB5A                            loc_1A3A6:
0001AB5A 4EF9 0000 DC84             		jmp	DisplaySprite
0001AB60                            ; ===========================================================================
0001AB60                            
0001AB60                            loc_1A3AC:				; XREF: Obj85_Index
0001AB60 117C 0000 001A             		move.b	#0,$1A(a0)
0001AB66 08E8 0000 0022             		bset	#0,$22(a0)
0001AB6C 2268 0034                  		movea.l	$34(a0),a1
0001AB70 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AB76 6600                       		bne.s	loc_1A3D0
0001AB78 0CA9 0001 84E0 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AB80 6700 F984                  		beq.w	Obj85_Delete
0001AB84                            
0001AB84                            loc_1A3D0:
0001AB84 6000 FED4                  		bra.w	loc_1A2A6
0001AB88                            ; ===========================================================================
0001AB88                            Ani_obj85:
0001AB88                            	include "_anim\obj85.asm"
0001AB88                            ; ---------------------------------------------------------------------------
0001AB88                            ; Animation script - Eggman (FZ)
0001AB88                            ; ---------------------------------------------------------------------------
0001AB88 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AB8A 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AB8E                            		even
0001AB8E                            		even
0001AB8E                            
0001AB8E                            Map_Eggman2:
0001AB8E                            	include "_maps\Eggman2.asm"
0001AB8E                            ; ---------------------------------------------------------------------------
0001AB8E                            ; Sprite mappings - Eggman (FZ)
0001AB8E                            ; ---------------------------------------------------------------------------
0001AB8E 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AB90 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AB92 06                         byte_1A3DE:	dc.b 6
0001AB93 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AB98 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AB9D EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ABA2 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ABA7 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ABAC 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ABB1 06                         byte_1A3FD:	dc.b 6
0001ABB2 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001ABB7 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001ABBC EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ABC1 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ABC6 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ABCB 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ABD0                            		even
0001ABD0                            		even
0001ABD0                            
0001ABD0                            Map_FZBoss:
0001ABD0                            	include "_maps\FZ boss.asm"
0001ABD0                            ; ---------------------------------------------------------------------------
0001ABD0                            ; Sprite mappings - boss (FZ)
0001ABD0                            ; ---------------------------------------------------------------------------
0001ABD0 0000                       		dc.w byte_1A422-Map_FZBoss
0001ABD2 0000                       		dc.w byte_1A42D-Map_FZBoss
0001ABD4 0000                       		dc.w byte_1A43D-Map_FZBoss
0001ABD6 02                         byte_1A422:	dc.b 2
0001ABD7 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001ABDC 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001ABE1 03                         byte_1A42D:	dc.b 3
0001ABE2 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001ABE7 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001ABEC 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001ABF1 02                         byte_1A43D:	dc.b 2
0001ABF2 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001ABF7 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001ABFC                            		even
0001ABFC                            		even
0001ABFC                            
0001ABFC                            ; ===========================================================================
0001ABFC                            
0001ABFC                            Obj84_Delete:
0001ABFC 4EF9 0000 DCC0             		jmp	DeleteObject
0001AC02                            ; ===========================================================================
0001AC02                            ; ---------------------------------------------------------------------------
0001AC02                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AC02                            ; ---------------------------------------------------------------------------
0001AC02                            
0001AC02                            Obj84:					; XREF: Obj_Index
0001AC02 7000                       		moveq	#0,d0
0001AC04 1028 0024                  		move.b	$24(a0),d0
0001AC08 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AC0C 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AC10                            ; ===========================================================================
0001AC10 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AC12 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AC14 0000                       		dc.w loc_1A57E-Obj84_Index
0001AC16                            
0001AC16 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AC1A 2550 0620                  		dc.w $2550, $620
0001AC1E 2490 04C0                  		dc.w $2490, $4C0
0001AC22 2510 04C0                  		dc.w $2510, $4C0
0001AC26                            ; ===========================================================================
0001AC26                            
0001AC26                            Obj84_Main:				; XREF: Obj84_Index
0001AC26 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AC2A 7000                       		moveq	#0,d0
0001AC2C 1028 0028                  		move.b	$28(a0),d0
0001AC30 D040                       		add.w	d0,d0
0001AC32 D2C0                       		adda.w	d0,a1
0001AC34 117C 0004 0001             		move.b	#4,1(a0)
0001AC3A 08E8 0007 0001             		bset	#7,1(a0)
0001AC40 08E8 0004 0001             		bset	#4,1(a0)
0001AC46 317C 0300 0002             		move.w	#$300,2(a0)
0001AC4C 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AC54 3159 0008                  		move.w	(a1)+,8(a0)
0001AC58 3151 000C                  		move.w	(a1),$C(a0)
0001AC5C 3159 0038                  		move.w	(a1)+,$38(a0)
0001AC60 117C 0020 0016             		move.b	#$20,$16(a0)
0001AC66 117C 0060 0017             		move.b	#$60,$17(a0)
0001AC6C 117C 0020 0019             		move.b	#$20,$19(a0)
0001AC72 117C 0060 0016             		move.b	#$60,$16(a0)
0001AC78 117C 0003 0018             		move.b	#3,$18(a0)
0001AC7E 5428 0024                  		addq.b	#2,$24(a0)
0001AC82                            
0001AC82                            loc_1A4CE:				; XREF: Obj84_Index
0001AC82 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AC88 6F00                       		ble.s	loc_1A4DC
0001AC8A 08E8 0001 0001             		bset	#1,1(a0)
0001AC90                            
0001AC90                            loc_1A4DC:
0001AC90 42A8 003C                  		clr.l	$3C(a0)
0001AC94 4A28 0029                  		tst.b	$29(a0)
0001AC98 6700                       		beq.s	loc_1A4EA
0001AC9A 5428 0024                  		addq.b	#2,$24(a0)
0001AC9E                            
0001AC9E                            loc_1A4EA:
0001AC9E 2028 003C                  		move.l	$3C(a0),d0
0001ACA2 2228 0038                  		move.l	$38(a0),d1
0001ACA6 D280                       		add.l	d0,d1
0001ACA8 4841                       		swap	d1
0001ACAA 3141 000C                  		move.w	d1,$C(a0)
0001ACAE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001ACB4 6600                       		bne.s	loc_1A524
0001ACB6 4A68 0030                  		tst.w	$30(a0)
0001ACBA 6A00                       		bpl.s	loc_1A524
0001ACBC 70F6                       		moveq	#-$A,d0
0001ACBE 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001ACC4 6F00                       		ble.s	loc_1A514
0001ACC6 700E                       		moveq	#$E,d0
0001ACC8                            
0001ACC8                            loc_1A514:
0001ACC8 D240                       		add.w	d0,d1
0001ACCA 2268 0034                  		movea.l	$34(a0),a1
0001ACCE 3341 000C                  		move.w	d1,$C(a1)
0001ACD2 3368 0008 0008             		move.w	8(a0),8(a1)
0001ACD8                            
0001ACD8                            loc_1A524:
0001ACD8 323C 002B                  		move.w	#$2B,d1
0001ACDC 343C 0060                  		move.w	#$60,d2
0001ACE0 363C 0061                  		move.w	#$61,d3
0001ACE4 3828 0008                  		move.w	8(a0),d4
0001ACE8 4EB9 0001 0054             		jsr	SolidObject
0001ACEE 7000                       		moveq	#0,d0
0001ACF0 3228 003C                  		move.w	$3C(a0),d1
0001ACF4 6A00                       		bpl.s	loc_1A550
0001ACF6 4441                       		neg.w	d1
0001ACF8 5141                       		subq.w	#8,d1
0001ACFA 6500                       		bcs.s	loc_1A55C
0001ACFC 5200                       		addq.b	#1,d0
0001ACFE E841                       		asr.w	#4,d1
0001AD00 D041                       		add.w	d1,d0
0001AD02 6000                       		bra.s	loc_1A55C
0001AD04                            ; ===========================================================================
0001AD04                            
0001AD04                            loc_1A550:
0001AD04 0441 0027                  		subi.w	#$27,d1
0001AD08 6500                       		bcs.s	loc_1A55C
0001AD0A 5200                       		addq.b	#1,d0
0001AD0C E841                       		asr.w	#4,d1
0001AD0E D041                       		add.w	d1,d0
0001AD10                            
0001AD10                            loc_1A55C:
0001AD10 1140 001A                  		move.b	d0,$1A(a0)
0001AD14 3038 D008                  		move.w	($FFFFD008).w,d0
0001AD18 9068 0008                  		sub.w	8(a0),d0
0001AD1C 6B00                       		bmi.s	loc_1A578
0001AD1E 0440 0140                  		subi.w	#$140,d0
0001AD22 6B00                       		bmi.s	loc_1A578
0001AD24 4A28 0001                  		tst.b	1(a0)
0001AD28 6A00 FED2                  		bpl.w	Obj84_Delete
0001AD2C                            
0001AD2C                            loc_1A578:
0001AD2C 4EF9 0000 DC84             		jmp	DisplaySprite
0001AD32                            ; ===========================================================================
0001AD32                            
0001AD32                            loc_1A57E:				; XREF: Obj84_Index
0001AD32 7000                       		moveq	#0,d0
0001AD34 1028 0028                  		move.b	$28(a0),d0
0001AD38 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AD3C 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AD40 6000 FF5C                  		bra.w	loc_1A4EA
0001AD44                            ; ===========================================================================
0001AD44 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AD46 0000                       		dc.w loc_1A598-off_1A590
0001AD48 0000                       		dc.w loc_1A604-off_1A590
0001AD4A 0000                       		dc.w loc_1A604-off_1A590
0001AD4C                            ; ===========================================================================
0001AD4C                            
0001AD4C                            loc_1A598:				; XREF: off_1A590
0001AD4C 4A28 0029                  		tst.b	$29(a0)
0001AD50 6600                       		bne.s	loc_1A5D4
0001AD52 2268 0034                  		movea.l	$34(a0),a1
0001AD56 4A29 0021                  		tst.b	$21(a1)
0001AD5A 6600                       		bne.s	loc_1A5B4
0001AD5C 6100 D2AE                  		bsr.w	BossDefeated
0001AD60 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AD68                            
0001AD68                            loc_1A5B4:
0001AD68 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AD70 6400                       		bcc.s	locret_1A602
0001AD72 42A8 003C                  		clr.l	$3C(a0)
0001AD76 2268 0034                  		movea.l	$34(a0),a1
0001AD7A 5369 0032                  		subq.w	#1,$32(a1)
0001AD7E 4269 0030                  		clr.w	$30(a1)
0001AD82 5528 0024                  		subq.b	#2,$24(a0)
0001AD86 4E75                       		rts	
0001AD88                            ; ===========================================================================
0001AD88                            
0001AD88                            loc_1A5D4:
0001AD88 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AD8E 6C00                       		bge.s	loc_1A5E4
0001AD90 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AD98                            
0001AD98                            loc_1A5E4:
0001AD98 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001ADA0 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001ADA6 6E00                       		bgt.s	locret_1A602
0001ADA8 4268 003E                  		clr.w	$3E(a0)
0001ADAC 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001ADB2 4228 0029                  		clr.b	$29(a0)
0001ADB6                            
0001ADB6                            locret_1A602:
0001ADB6 4E75                       		rts	
0001ADB8                            ; ===========================================================================
0001ADB8                            
0001ADB8                            loc_1A604:				; XREF: off_1A590
0001ADB8 08E8 0001 0001             		bset	#1,1(a0)
0001ADBE 4A28 0029                  		tst.b	$29(a0)
0001ADC2 6600                       		bne.s	loc_1A646
0001ADC4 2268 0034                  		movea.l	$34(a0),a1
0001ADC8 4A29 0021                  		tst.b	$21(a1)
0001ADCC 6600                       		bne.s	loc_1A626
0001ADCE 6100 D23C                  		bsr.w	BossDefeated
0001ADD2 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001ADDA                            
0001ADDA                            loc_1A626:
0001ADDA 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001ADE2 6400                       		bcc.s	locret_1A674
0001ADE4 42A8 003C                  		clr.l	$3C(a0)
0001ADE8 2268 0034                  		movea.l	$34(a0),a1
0001ADEC 5369 0032                  		subq.w	#1,$32(a1)
0001ADF0 4269 0030                  		clr.w	$30(a1)
0001ADF4 5528 0024                  		subq.b	#2,$24(a0)
0001ADF8 4E75                       		rts	
0001ADFA                            ; ===========================================================================
0001ADFA                            
0001ADFA                            loc_1A646:
0001ADFA 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AE00 6D00                       		blt.s	loc_1A656
0001AE02 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AE0A                            
0001AE0A                            loc_1A656:
0001AE0A 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AE12 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AE18 6D00                       		blt.s	locret_1A674
0001AE1A 4268 003E                  		clr.w	$3E(a0)
0001AE1E 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AE24 4228 0029                  		clr.b	$29(a0)
0001AE28                            
0001AE28                            locret_1A674:
0001AE28 4E75                       		rts	
0001AE2A                            ; ===========================================================================
0001AE2A                            ; ---------------------------------------------------------------------------
0001AE2A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AE2A                            ; ---------------------------------------------------------------------------
0001AE2A                            Map_obj84:
0001AE2A                            	include "_maps\obj84.asm"
0001AE2A                            ; ---------------------------------------------------------------------------
0001AE2A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AE2A                            ; ---------------------------------------------------------------------------
0001AE2A 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AE2E 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AE32 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AE36 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AE3A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AE3E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AE42 06                         byte_1A68E:	dc.b 6
0001AE43 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AE48 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AE4D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AE52 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AE57 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AE5C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AE61 08                         byte_1A6AD:	dc.b 8
0001AE62 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AE67 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AE6C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AE71 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AE76 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AE7B B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AE80 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AE85 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AE8A 0A                         byte_1A6D6:	dc.b $A
0001AE8B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AE90 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AE95 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AE9A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AE9F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AEA4 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AEA9 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AEAE D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AEB3 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AEB8 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AEBD 0C                         byte_1A709:	dc.b $C
0001AEBE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AEC3 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AEC8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AECD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AED2 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AED7 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AEDC D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AEE1 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AEE6 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AEEB F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AEF0 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AEF5 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AEFA 0D                         byte_1A746:	dc.b $D
0001AEFB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF00 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF05 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF0A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF0F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF14 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF19 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF1E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF23 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AF28 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AF2D 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AF32 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AF37 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AF3C 0E                         byte_1A788:	dc.b $E
0001AF3D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF42 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF47 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF4C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF51 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF56 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF5B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF60 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF65 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AF6A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AF6F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AF74 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AF79 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AF7E 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001AF83 02                         byte_1A7CF:	dc.b 2
0001AF84 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001AF89 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001AF8E                            		even
0001AF8E                            		even
0001AF8E                            
0001AF8E                            ; ===========================================================================
0001AF8E                            ; ---------------------------------------------------------------------------
0001AF8E                            ; Object 86 - energy balls (FZ)
0001AF8E                            ; ---------------------------------------------------------------------------
0001AF8E                            
0001AF8E                            Obj86:					; XREF: Obj_Index
0001AF8E 7000                       		moveq	#0,d0
0001AF90 1028 0024                  		move.b	$24(a0),d0
0001AF94 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001AF98 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001AF9C                            ; ===========================================================================
0001AF9C 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001AF9E 0000                       		dc.w Obj86_Generator-Obj86_Index
0001AFA0 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001AFA2 0000                       		dc.w loc_1A962-Obj86_Index
0001AFA4 0000                       		dc.w loc_1A982-Obj86_Index
0001AFA6                            ; ===========================================================================
0001AFA6                            
0001AFA6                            Obj86_Main:				; XREF: Obj86_Index
0001AFA6 317C 2588 0008             		move.w	#$2588,8(a0)
0001AFAC 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AFB2 317C 0300 0002             		move.w	#$300,2(a0)
0001AFB8 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001AFC0 117C 0000 001C             		move.b	#0,$1C(a0)
0001AFC6 117C 0003 0018             		move.b	#3,$18(a0)
0001AFCC 117C 0008 0017             		move.b	#8,$17(a0)
0001AFD2 117C 0008 0016             		move.b	#8,$16(a0)
0001AFD8 117C 0004 0001             		move.b	#4,1(a0)
0001AFDE 08E8 0007 0001             		bset	#7,1(a0)
0001AFE4 5428 0024                  		addq.b	#2,$24(a0)
0001AFE8                            
0001AFE8                            Obj86_Generator:			; XREF: Obj86_Index
0001AFE8 2268 0034                  		movea.l	$34(a0),a1
0001AFEC 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001AFF2 6600                       		bne.s	loc_1A850
0001AFF4 10BC 003F                  		move.b	#$3F,(a0)
0001AFF8 117C 0000 0024             		move.b	#0,$24(a0)
0001AFFE 4EF9 0000 DC84             		jmp	DisplaySprite
0001B004                            ; ===========================================================================
0001B004                            
0001B004                            loc_1A850:
0001B004 117C 0000 001C             		move.b	#0,$1C(a0)
0001B00A 4A28 0029                  		tst.b	$29(a0)
0001B00E 6700                       		beq.s	loc_1A86C
0001B010 5428 0024                  		addq.b	#2,$24(a0)
0001B014 117C 0001 001C             		move.b	#1,$1C(a0)
0001B01A 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B020                            
0001B020                            loc_1A86C:
0001B020 323C 0013                  		move.w	#$13,d1
0001B024 343C 0008                  		move.w	#8,d2
0001B028 363C 0011                  		move.w	#$11,d3
0001B02C 3828 0008                  		move.w	8(a0),d4
0001B030 4EB9 0001 0054             		jsr	SolidObject
0001B036 3038 D008                  		move.w	($FFFFD008).w,d0
0001B03A 9068 0008                  		sub.w	8(a0),d0
0001B03E 6B00                       		bmi.s	loc_1A89A
0001B040 0440 0140                  		subi.w	#$140,d0
0001B044 6B00                       		bmi.s	loc_1A89A
0001B046 4A28 0001                  		tst.b	1(a0)
0001B04A 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B04E                            
0001B04E                            loc_1A89A:
0001B04E 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B052 4EB9 0000 AD44             		jsr	AnimateSprite
0001B058 4EF9 0000 DC84             		jmp	DisplaySprite
0001B05E                            ; ===========================================================================
0001B05E                            
0001B05E                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B05E 4A28 0029                  		tst.b	$29(a0)
0001B062 6700 0000                  		beq.w	loc_1A954
0001B066 4228 0029                  		clr.b	$29(a0)
0001B06A D068 0030                  		add.w	$30(a0),d0
0001B06E 0240 001E                  		andi.w	#$1E,d0
0001B072 D4C0                       		adda.w	d0,a2
0001B074 5868 0030                  		addq.w	#4,$30(a0)
0001B078 4268 0032                  		clr.w	$32(a0)
0001B07C 7403                       		moveq	#3,d2
0001B07E                            
0001B07E                            Obj86_Loop:
0001B07E 4EB9 0000 E120             		jsr	SingleObjLoad2
0001B084 6600 0000                  		bne.w	loc_1A954
0001B088 12BC 0086                  		move.b	#$86,(a1)
0001B08C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B092 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B098 137C 0008 0024             		move.b	#8,$24(a1)
0001B09E 337C 2300 0002             		move.w	#$2300,2(a1)
0001B0A4 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B0AC 137C 000C 0016             		move.b	#$C,$16(a1)
0001B0B2 137C 000C 0017             		move.b	#$C,$17(a1)
0001B0B8 137C 0000 0020             		move.b	#0,$20(a1)
0001B0BE 137C 0003 0018             		move.b	#3,$18(a1)
0001B0C4 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B0CA 137C 0004 0001             		move.b	#4,1(a1)
0001B0D0 08E9 0007 0001             		bset	#7,1(a1)
0001B0D6 2348 0034                  		move.l	a0,$34(a1)
0001B0DA 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B0E0 3228 0032                  		move.w	$32(a0),d1
0001B0E4 C3FC FFB1                  		muls.w	#-$4F,d1
0001B0E8 0641 2578                  		addi.w	#$2578,d1
0001B0EC 0240 001F                  		andi.w	#$1F,d0
0001B0F0 0440 0010                  		subi.w	#$10,d0
0001B0F4 D041                       		add.w	d1,d0
0001B0F6 3340 0030                  		move.w	d0,$30(a1)
0001B0FA 5268 0032                  		addq.w	#1,$32(a0)
0001B0FE 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B104 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B108                            
0001B108                            loc_1A954:
0001B108 4A68 0032                  		tst.w	$32(a0)
0001B10C 6600                       		bne.s	loc_1A95E
0001B10E 5428 0024                  		addq.b	#2,$24(a0)
0001B112                            
0001B112                            loc_1A95E:
0001B112 6000 FF0C                  		bra.w	loc_1A86C
0001B116                            ; ===========================================================================
0001B116                            
0001B116                            loc_1A962:				; XREF: Obj86_Index
0001B116 117C 0002 001C             		move.b	#2,$1C(a0)
0001B11C 4A68 0038                  		tst.w	$38(a0)
0001B120 6600                       		bne.s	loc_1A97E
0001B122 117C 0002 0024             		move.b	#2,$24(a0)
0001B128 2268 0034                  		movea.l	$34(a0),a1
0001B12C 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B132                            
0001B132                            loc_1A97E:
0001B132 6000 FEEC                  		bra.w	loc_1A86C
0001B136                            ; ===========================================================================
0001B136                            
0001B136                            loc_1A982:				; XREF: Obj86_Index
0001B136 7000                       		moveq	#0,d0
0001B138 1028 0025                  		move.b	$25(a0),d0
0001B13C 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B140 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B144 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B148 4EB9 0000 AD44             		jsr	AnimateSprite
0001B14E 4EF9 0000 DC84             		jmp	DisplaySprite
0001B154                            ; ===========================================================================
0001B154 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B156 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B158 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B15A                            ; ===========================================================================
0001B15A                            
0001B15A                            loc_1A9A6:				; XREF: Obj86_Index2
0001B15A 3028 0030                  		move.w	$30(a0),d0
0001B15E 9068 0008                  		sub.w	8(a0),d0
0001B162 E940                       		asl.w	#4,d0
0001B164 3140 0010                  		move.w	d0,$10(a0)
0001B168 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B16E 5428 0025                  		addq.b	#2,$25(a0)
0001B172 4E75                       		rts	
0001B174                            ; ===========================================================================
0001B174                            
0001B174                            loc_1A9C0:				; XREF: Obj86_Index2
0001B174 4A68 0010                  		tst.w	$10(a0)
0001B178 6700                       		beq.s	loc_1A9E6
0001B17A 4EB9 0000 DC5E             		jsr	SpeedToPos
0001B180 3028 0008                  		move.w	8(a0),d0
0001B184 9068 0030                  		sub.w	$30(a0),d0
0001B188 6400                       		bcc.s	loc_1A9E6
0001B18A 4268 0010                  		clr.w	$10(a0)
0001B18E D168 0008                  		add.w	d0,8(a0)
0001B192 2268 0034                  		movea.l	$34(a0),a1
0001B196 5369 0032                  		subq.w	#1,$32(a1)
0001B19A                            
0001B19A                            loc_1A9E6:
0001B19A 117C 0000 001C             		move.b	#0,$1C(a0)
0001B1A0 5368 0028                  		subq.w	#1,$28(a0)
0001B1A4 6600                       		bne.s	locret_1AA1C
0001B1A6 5428 0025                  		addq.b	#2,$25(a0)
0001B1AA 117C 0001 001C             		move.b	#1,$1C(a0)
0001B1B0 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B1B6 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B1BC 7000                       		moveq	#0,d0
0001B1BE 3038 D008                  		move.w	($FFFFD008).w,d0
0001B1C2 9068 0008                  		sub.w	8(a0),d0
0001B1C6 3140 0010                  		move.w	d0,$10(a0)
0001B1CA 317C 0140 0012             		move.w	#$140,$12(a0)
0001B1D0                            
0001B1D0                            locret_1AA1C:
0001B1D0 4E75                       		rts	
0001B1D2                            ; ===========================================================================
0001B1D2                            
0001B1D2                            loc_1AA1E:				; XREF: Obj86_Index2
0001B1D2 4EB9 0000 DC5E             		jsr	SpeedToPos
0001B1D8 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B1DE 6400                       		bcc.s	loc_1AA34
0001B1E0 5368 0028                  		subq.w	#1,$28(a0)
0001B1E4 6700                       		beq.s	loc_1AA34
0001B1E6 4E75                       		rts	
0001B1E8                            ; ===========================================================================
0001B1E8                            
0001B1E8                            loc_1AA34:
0001B1E8 2268 0034                  		movea.l	$34(a0),a1
0001B1EC 5369 0038                  		subq.w	#1,$38(a1)
0001B1F0 6000 FA0A                  		bra.w	Obj84_Delete
0001B1F4                            ; ===========================================================================
0001B1F4                            Ani_obj86:
0001B1F4                            	include "_anim\obj86.asm"
0001B1F4                            ; ---------------------------------------------------------------------------
0001B1F4                            ; Animation script - energy ball launcher (FZ)
0001B1F4                            ; ---------------------------------------------------------------------------
0001B1F4 0000                       		dc.w byte_1AA46-Ani_obj86
0001B1F6 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B1F8 0000                       		dc.w byte_1AA50-Ani_obj86
0001B1FA 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B1FE 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B204 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B20A                            		even
0001B20A                            		even
0001B20A                            
0001B20A                            ; ---------------------------------------------------------------------------
0001B20A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B20A                            ; ---------------------------------------------------------------------------
0001B20A                            Map_obj86:
0001B20A                            	include "_maps\obj86.asm"
0001B20A                            ; ---------------------------------------------------------------------------
0001B20A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B20A                            ; ---------------------------------------------------------------------------
0001B20A 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B20E 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B212 01                         byte_1AA5E:	dc.b 1
0001B213 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B218 01                         byte_1AA64:	dc.b 1
0001B219 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B21E 01                         byte_1AA6A:	dc.b 1
0001B21F F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B224 01                         byte_1AA70:	dc.b 1
0001B225 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B22A                            		even
0001B22A                            		even
0001B22A                            
0001B22A                            Ani_obj86a:
0001B22A                            	include "_anim\obj86a.asm"
0001B22A                            ; ---------------------------------------------------------------------------
0001B22A                            ; Animation script - energy balls (FZ)
0001B22A                            ; ---------------------------------------------------------------------------
0001B22A 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B22C 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B22E 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B23D 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B24C 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B250 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B25A                            		even
0001B25A                            		even
0001B25A                            
0001B25A                            ; ---------------------------------------------------------------------------
0001B25A                            ; Sprite mappings - energy balls (FZ)
0001B25A                            ; ---------------------------------------------------------------------------
0001B25A                            Map_obj86a:
0001B25A                            	include "_maps\obj86a.asm"
0001B25A                            ; ---------------------------------------------------------------------------
0001B25A                            ; Sprite mappings - energy balls (FZ)
0001B25A                            ; ---------------------------------------------------------------------------
0001B25A 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B25E 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B262 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B266 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B26A 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B26E 0000                       		dc.w byte_1AB20-Map_obj86a
0001B270 02                         byte_1AABC:	dc.b 2
0001B271 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B276 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B27B 02                         byte_1AAC7:	dc.b 2
0001B27C F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B281 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B286 02                         byte_1AAD2:	dc.b 2
0001B287 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B28C 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B291 02                         byte_1AADD:	dc.b 2
0001B292 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B297 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B29C 02                         byte_1AAE8:	dc.b 2
0001B29D F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B2A2 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B2A7 02                         byte_1AAF3:	dc.b 2
0001B2A8 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B2AD F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B2B2 01                         byte_1AAFE:	dc.b 1
0001B2B3 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B2B8 01                         byte_1AB04:	dc.b 1
0001B2B9 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B2BE 02                         byte_1AB0A:	dc.b 2
0001B2BF F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B2C4 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B2C9 02                         byte_1AB15:	dc.b 2
0001B2CA F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B2CF F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B2D4 00                         byte_1AB20:	dc.b 0
0001B2D6 00                         		even
0001B2D6 00                         		even
0001B2D6                            
0001B2D6                            ; ===========================================================================
0001B2D6                            ; ---------------------------------------------------------------------------
0001B2D6                            ; Object 3E - prison capsule
0001B2D6                            ; ---------------------------------------------------------------------------
0001B2D6                            
0001B2D6                            Obj3E:					; XREF: Obj_Index
0001B2D6 7000                       		moveq	#0,d0
0001B2D8 1028 0024                  		move.b	$24(a0),d0
0001B2DC 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B2E0 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B2E4 3028 0008                  		move.w	8(a0),d0
0001B2E8 0240 FF80                  		andi.w	#$FF80,d0
0001B2EC 3238 F700                  		move.w	($FFFFF700).w,d1
0001B2F0 0441 0080                  		subi.w	#$80,d1
0001B2F4 0241 FF80                  		andi.w	#$FF80,d1
0001B2F8 9041                       		sub.w	d1,d0
0001B2FA 0C40 0280                  		cmpi.w	#$280,d0
0001B2FE 6200                       		bhi.s	Obj3E_Delete
0001B300 4EF9 0000 DC84             		jmp	DisplaySprite
0001B306                            ; ===========================================================================
0001B306                            
0001B306                            Obj3E_Delete:
0001B306 4EF9 0000 DCC0             		jmp	DeleteObject
0001B30C                            ; ===========================================================================
0001B30C 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B30E 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B310 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B312 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B314 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B316 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B318 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B31A 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B31C                            
0001B31C 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B320 040C 0501                  		dc.b 4,	$C, 5, 1
0001B324 0610 0403                  		dc.b 6,	$10, 4,	3
0001B328 0810 0305                  		dc.b 8,	$10, 3,	5
0001B32C                            ; ===========================================================================
0001B32C                            
0001B32C                            Obj3E_Main:				; XREF: Obj3E_Index
0001B32C 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B334 317C 049D 0002             		move.w	#$49D,2(a0)
0001B33A 117C 0004 0001             		move.b	#4,1(a0)
0001B340 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B346 7000                       		moveq	#0,d0
0001B348 1028 0028                  		move.b	$28(a0),d0
0001B34C E548                       		lsl.w	#2,d0
0001B34E 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B352 1159 0024                  		move.b	(a1)+,$24(a0)
0001B356 1159 0019                  		move.b	(a1)+,$19(a0)
0001B35A 1159 0018                  		move.b	(a1)+,$18(a0)
0001B35E 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B362 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B366 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B368 117C 0006 0020             		move.b	#6,$20(a0)
0001B36E 117C 0008 0021             		move.b	#8,$21(a0)
0001B374                            
0001B374                            Obj3E_Not02:
0001B374 4E75                       		rts	
0001B376                            ; ===========================================================================
0001B376                            
0001B376                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B376 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B37C 6700                       		beq.s	Obj3E_ChkOpened
0001B37E 323C 002B                  		move.w	#$2B,d1
0001B382 343C 0018                  		move.w	#$18,d2
0001B386 363C 0018                  		move.w	#$18,d3
0001B38A 3828 0008                  		move.w	8(a0),d4
0001B38E 4EF9 0001 0054             		jmp	SolidObject
0001B394                            ; ===========================================================================
0001B394                            
0001B394                            Obj3E_ChkOpened:
0001B394 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B398 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B39A 4228 0025                  		clr.b	$25(a0)
0001B39E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B3A4 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B3AA                            
0001B3AA                            Obj3E_DoOpen:
0001B3AA 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B3B0 4E75                       		rts	
0001B3B2                            ; ===========================================================================
0001B3B2                            
0001B3B2                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B3B2 323C 0017                  		move.w	#$17,d1
0001B3B6 343C 0008                  		move.w	#8,d2
0001B3BA 363C 0008                  		move.w	#8,d3
0001B3BE 3828 0008                  		move.w	8(a0),d4
0001B3C2 4EB9 0001 0054             		jsr	SolidObject
0001B3C8 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B3CE 4EB9 0000 AD44             		jsr	AnimateSprite
0001B3D4 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B3DA 4A28 0025                  		tst.b	$25(a0)
0001B3DE 6700                       		beq.s	locret_1AC60
0001B3E0 5068 000C                  		addq.w	#8,$C(a0)
0001B3E4 117C 000A 0024             		move.b	#$A,$24(a0)
0001B3EA 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B3F0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B3F4 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B3F8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B3FE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B404 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B406 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B40C 6000                       		bra.s	Obj3E_ContinueCode
0001B40E                            
0001B40E                            Obj3E_MoveLeft:
0001B40E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B414                            
0001B414                            Obj3E_ContinueCode:
0001B414 4228 0025                  		clr.b	$25(a0)
0001B418 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B41E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B424                            
0001B424                            locret_1AC60:
0001B424 4E75                       		rts	
0001B426                            ; ===========================================================================
0001B426                            
0001B426                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B426 7007                       		moveq	#7,d0
0001B428 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B42C 6600                       		bne.s	loc_1ACA0
0001B42E 4EB9 0000 E10A             		jsr	SingleObjLoad
0001B434 6600                       		bne.s	loc_1ACA0
0001B436 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B43A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B440 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B446 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B44C 7200                       		moveq	#0,d1
0001B44E 1200                       		move.b	d0,d1
0001B450 E409                       		lsr.b	#2,d1
0001B452 0441 0020                  		subi.w	#$20,d1
0001B456 D369 0008                  		add.w	d1,8(a1)
0001B45A E048                       		lsr.w	#8,d0
0001B45C E608                       		lsr.b	#3,d0
0001B45E D169 000C                  		add.w	d0,$C(a1)
0001B462                            
0001B462                            loc_1ACA0:
0001B462 5368 001E                  		subq.w	#1,$1E(a0)
0001B466 6700                       		beq.s	Obj3E_MakeAnimal
0001B468 4E75                       		rts	
0001B46A                            ; ===========================================================================
0001B46A                            
0001B46A                            Obj3E_MakeAnimal:
0001B46A 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B470 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B476 117C 0006 001A             		move.b	#6,$1A(a0)
0001B47C 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B482 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B488 7C07                       		moveq	#7,d6
0001B48A 3A3C 009A                  		move.w	#$9A,d5
0001B48E 78E4                       		moveq	#-$1C,d4
0001B490                            
0001B490                            Obj3E_Loop:
0001B490 4EB9 0000 E10A             		jsr	SingleObjLoad
0001B496 6600                       		bne.s	locret_1ACF8
0001B498 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B49C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B4A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B4A8 D969 0008                  		add.w	d4,8(a1)
0001B4AC 5E44                       		addq.w	#7,d4
0001B4AE 3345 0036                  		move.w	d5,$36(a1)
0001B4B2 5145                       		subq.w	#8,d5
0001B4B4 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B4B8                            
0001B4B8                            locret_1ACF8:
0001B4B8 4E75                       		rts	
0001B4BA                            ; ===========================================================================
0001B4BA                            
0001B4BA                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B4BA 7007                       		moveq	#7,d0
0001B4BC C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B4C0 6600                       		bne.s	loc_1AD38
0001B4C2 4EB9 0000 E10A             		jsr	SingleObjLoad
0001B4C8 6600                       		bne.s	loc_1AD38
0001B4CA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B4CE 3368 0008 0008             		move.w	8(a0),8(a1)
0001B4D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B4DA 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B4E0 0240 001F                  		andi.w	#$1F,d0
0001B4E4 5D40                       		subq.w	#6,d0
0001B4E6 4A41                       		tst.w	d1
0001B4E8 6A00                       		bpl.s	loc_1AD2E
0001B4EA 4440                       		neg.w	d0
0001B4EC                            
0001B4EC                            loc_1AD2E:
0001B4EC D169 0008                  		add.w	d0,8(a1)
0001B4F0 337C 000C 0036             		move.w	#$C,$36(a1)
0001B4F6                            
0001B4F6                            loc_1AD38:
0001B4F6 5368 001E                  		subq.w	#1,$1E(a0)
0001B4FA 6600                       		bne.s	locret_1AD48
0001B4FC 5428 0024                  		addq.b	#2,$24(a0)
0001B500 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B506                            
0001B506                            locret_1AD48:
0001B506 4E75                       		rts	
0001B508                            ; ===========================================================================
0001B508                            
0001B508                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B508 703E                       		moveq	#$3E,d0
0001B50A 7228                       		moveq	#$28,d1
0001B50C 7440                       		moveq	#$40,d2
0001B50E 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B512                            
0001B512                            Obj3E_FindObj28:
0001B512 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B514 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B516 D2C2                       		adda.w	d2,a1		; next object RAM
0001B518 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B51C                            
0001B51C 4EB9 0000 F310             		jsr	GotThroughAct
0001B522 4EF9 0000 DCC0             		jmp	DeleteObject
0001B528                            ; ===========================================================================
0001B528                            
0001B528                            Obj3E_Obj28Found:
0001B528 4E75                       		rts	
0001B52A                            ; ===========================================================================
0001B52A                            Ani_obj3E:
0001B52A                            	include "_anim\obj3E.asm"
0001B52A                            ; ---------------------------------------------------------------------------
0001B52A                            ; Animation script - prison capsule
0001B52A                            ; ---------------------------------------------------------------------------
0001B52A 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B52C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B52E 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B532                            		even
0001B532                            		even
0001B532                            
0001B532                            ; ---------------------------------------------------------------------------
0001B532                            ; Sprite mappings - prison capsule
0001B532                            ; ---------------------------------------------------------------------------
0001B532                            Map_obj3E:
0001B532                            	include "_maps\obj3E.asm"
0001B532                            ; ---------------------------------------------------------------------------
0001B532                            ; Sprite mappings - prison capsule
0001B532                            ; ---------------------------------------------------------------------------
0001B532 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B536 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B53A 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B53E 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B540 07                         byte_1AD82:	dc.b 7
0001B541 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B546 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B54B E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B550 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B555 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B55A 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B55F 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B564 01                         byte_1ADA6:	dc.b 1
0001B565 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B56A 06                         byte_1ADAC:	dc.b 6
0001B56B 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B570 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B575 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B57A 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B57F 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B584 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B589 01                         byte_1ADCB:	dc.b 1
0001B58A F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B58F 02                         byte_1ADD1:	dc.b 2
0001B590 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B595 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B59A 01                         byte_1ADDC:	dc.b 1
0001B59B F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B5A0 00                         byte_1ADE2:	dc.b 0
0001B5A2 00                         		even
0001B5A2 00                         		even
0001B5A2                            
0001B5A2                            ; ---------------------------------------------------------------------------
0001B5A2                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B5A2                            ; ---------------------------------------------------------------------------
0001B5A2                            
0001B5A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B5A2                            
0001B5A2                            
0001B5A2                            TouchResponse:				; XREF: Obj01
0001B5A2 4E71                       		nop	
0001B5A4 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B5A8 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B5AC 5142                       		subq.w	#8,d2
0001B5AE 7A00                       		moveq	#0,d5
0001B5B0 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B5B4 5705                       		subq.b	#3,d5
0001B5B6 9645                       		sub.w	d5,d3
0001B5B8 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B5BE 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B5C0 0643 000C                  		addi.w	#$C,d3
0001B5C4 7A0A                       		moveq	#$A,d5
0001B5C6                            
0001B5C6                            Touch_NoDuck:
0001B5C6 383C 0010                  		move.w	#$10,d4
0001B5CA DA45                       		add.w	d5,d5
0001B5CC 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B5D0 3C3C 005F                  		move.w	#$5F,d6
0001B5D4                            
0001B5D4                            Touch_Loop:
0001B5D4 4A29 0001                  		tst.b	1(a1)
0001B5D8 6A00                       		bpl.s	Touch_NextObj
0001B5DA 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B5DE 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B5E0                            
0001B5E0                            Touch_NextObj:
0001B5E0 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B5E4 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B5E8                            
0001B5E8 7000                       		moveq	#0,d0
0001B5EA 4E75                       		rts	
0001B5EC                            ; ===========================================================================
0001B5EC 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B5EE 0C14                       		dc.b   $C, $14
0001B5F0 140C                       		dc.b  $14,  $C
0001B5F2 0410                       		dc.b	4, $10
0001B5F4 0C12                       		dc.b   $C, $12
0001B5F6 1010                       		dc.b  $10, $10
0001B5F8 0606                       		dc.b	6,   6
0001B5FA 180C                       		dc.b  $18,  $C
0001B5FC 0C10                       		dc.b   $C, $10
0001B5FE 100C                       		dc.b  $10,  $C
0001B600 0808                       		dc.b	8,   8
0001B602 1410                       		dc.b  $14, $10
0001B604 1408                       		dc.b  $14,   8
0001B606 0E0E                       		dc.b   $E,  $E
0001B608 1818                       		dc.b  $18, $18
0001B60A 2810                       		dc.b  $28, $10
0001B60C 1018                       		dc.b  $10, $18
0001B60E 0810                       		dc.b	8, $10
0001B610 2070                       		dc.b  $20, $70
0001B612 4020                       		dc.b  $40, $20
0001B614 8020                       		dc.b  $80, $20
0001B616 2020                       		dc.b  $20, $20
0001B618 0808                       		dc.b	8,   8
0001B61A 0404                       		dc.b	4,   4
0001B61C 2008                       		dc.b  $20,   8
0001B61E 0C0C                       		dc.b   $C,  $C
0001B620 0804                       		dc.b	8,   4
0001B622 1804                       		dc.b  $18,   4
0001B624 2804                       		dc.b  $28,   4
0001B626 0408                       		dc.b	4,   8
0001B628 0418                       		dc.b	4, $18
0001B62A 0428                       		dc.b	4, $28
0001B62C 0420                       		dc.b	4, $20
0001B62E 1818                       		dc.b  $18, $18
0001B630 0C18                       		dc.b   $C, $18
0001B632 4808                       		dc.b  $48,   8
0001B634                            ; ===========================================================================
0001B634                            
0001B634                            Touch_Height:				; XREF: TouchResponse
0001B634 0240 003F                  		andi.w	#$3F,d0
0001B638 D040                       		add.w	d0,d0
0001B63A 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B63E 7200                       		moveq	#0,d1
0001B640 121A                       		move.b	(a2)+,d1
0001B642 3029 0008                  		move.w	8(a1),d0
0001B646 9041                       		sub.w	d1,d0
0001B648 9042                       		sub.w	d2,d0
0001B64A 6400                       		bcc.s	loc_1AE98
0001B64C D241                       		add.w	d1,d1
0001B64E D041                       		add.w	d1,d0
0001B650 6500                       		bcs.s	Touch_Width
0001B652 6000 FF8C                  		bra.w	Touch_NextObj
0001B656                            ; ===========================================================================
0001B656                            
0001B656                            loc_1AE98:
0001B656 B044                       		cmp.w	d4,d0
0001B658 6200 FF86                  		bhi.w	Touch_NextObj
0001B65C                            
0001B65C                            Touch_Width:
0001B65C 7200                       		moveq	#0,d1
0001B65E 121A                       		move.b	(a2)+,d1
0001B660 3029 000C                  		move.w	$C(a1),d0
0001B664 9041                       		sub.w	d1,d0
0001B666 9043                       		sub.w	d3,d0
0001B668 6400                       		bcc.s	loc_1AEB6
0001B66A D241                       		add.w	d1,d1
0001B66C D240                       		add.w	d0,d1
0001B66E 6500                       		bcs.s	Touch_ChkValue
0001B670 6000 FF6E                  		bra.w	Touch_NextObj
0001B674                            ; ===========================================================================
0001B674                            
0001B674                            loc_1AEB6:
0001B674 B045                       		cmp.w	d5,d0
0001B676 6200 FF68                  		bhi.w	Touch_NextObj
0001B67A                            
0001B67A                            Touch_ChkValue:
0001B67A 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B67E 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B682 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B686 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B68A 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B68E 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B690 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B694                            
0001B694                            ; touch	response is $40-$7F
0001B694                            
0001B694 1029 0020                  		move.b	$20(a1),d0
0001B698 0200 003F                  		andi.b	#$3F,d0
0001B69C 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B6A0 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B6A2 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B6A8 6400 0000                  		bcc.w	locret_1AEF2
0001B6AC 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B6B0                            
0001B6B0                            locret_1AEF2:
0001B6B0 4E75                       		rts	
0001B6B2                            ; ===========================================================================
0001B6B2                            
0001B6B2                            Touch_Monitor:
0001B6B2 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B6B6 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B6B8 3028 000C                  		move.w	$C(a0),d0
0001B6BC 0440 0010                  		subi.w	#$10,d0
0001B6C0 B069 000C                  		cmp.w	$C(a1),d0
0001B6C4 6500                       		bcs.s	locret_1AF2E
0001B6C6 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B6CA 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B6D0 4A29 0025                  		tst.b	$25(a1)
0001B6D4 6600                       		bne.s	locret_1AF2E
0001B6D6 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B6DA 4E75                       		rts	
0001B6DC                            ; ===========================================================================
0001B6DC                            
0001B6DC                            loc_1AF1E:
0001B6DC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B6E2 6600                       		bne.s	locret_1AF2E
0001B6E4 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B6E8 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B6EC                            
0001B6EC                            locret_1AF2E:
0001B6EC 4E75                       		rts	
0001B6EE                            ; ===========================================================================
0001B6EE                            
0001B6EE                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B6EE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B6F2 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B6F4 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B6FA 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B6FE                            
0001B6FE                            loc_1AF40:
0001B6FE 4A29 0021                  		tst.b	$21(a1)
0001B702 6700                       		beq.s	Touch_KillEnemy
0001B704 4468 0010                  		neg.w	$10(a0)
0001B708 4468 0012                  		neg.w	$12(a0)
0001B70C E0E8 0010                  		asr	$10(a0)
0001B710 E0E8 0012                  		asr	$12(a0)
0001B714 137C 0000 0020             		move.b	#0,$20(a1)
0001B71A 5329 0021                  		subq.b	#1,$21(a1)
0001B71E 6600                       		bne.s	locret_1AF68
0001B720 08E9 0007 0022             		bset	#7,$22(a1)
0001B726                            
0001B726                            locret_1AF68:
0001B726 4E75                       		rts	
0001B728                            ; ===========================================================================
0001B728                            
0001B728                            Touch_KillEnemy:
0001B728 08E9 0007 0022             		bset	#7,$22(a1)
0001B72E 7000                       		moveq	#0,d0
0001B730 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B734 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B738 0C40 0006                  		cmpi.w	#6,d0
0001B73C 6500                       		bcs.s	loc_1AF82
0001B73E 7006                       		moveq	#6,d0
0001B740                            
0001B740                            loc_1AF82:
0001B740 3340 003E                  		move.w	d0,$3E(a1)
0001B744 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B748 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B74E 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B750 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B754 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B75A                            
0001B75A                            loc_1AF9C:
0001B75A 6100 0000                  		bsr.w	AddPoints
0001B75E 7400                       		moveq	#0,d2	; GMZ
0001B760 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B762 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B764                            
0001B764                            TouchKE_Explode:
0001B764 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B768 137C 0000 0024             		move.b	#0,$24(a1)
0001B76E 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B772                            
0001B772                            TouchKE_NextExplosion:
0001B772 5802                       		addq.b	#4,d2
0001B774 4EB9 0000 E10A             		jsr	SingleObjLoad
0001B77A 6600                       		bne.s	TouchKE_NoExplosion
0001B77C 336A 0008 0008             		move.w	8(a2),8(a1)
0001B782 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B788 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B78C                            
0001B78C                            TouchKE_NoExplosion:
0001B78C 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B78E 4A68 0012                  		tst.w	$12(a0)
0001B792 6B00                       		bmi.s	loc_1AFC2
0001B794 3028 000C                  		move.w	$C(a0),d0
0001B798 B069 000C                  		cmp.w	$C(a1),d0
0001B79C 6400                       		bcc.s	loc_1AFCA
0001B79E 4468 0012                  		neg.w	$12(a0)
0001B7A2 4E75                       		rts	
0001B7A4                            ; ===========================================================================
0001B7A4                            
0001B7A4                            loc_1AFC2:
0001B7A4 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B7AA 4E75                       		rts	
0001B7AC                            ; ===========================================================================
0001B7AC                            
0001B7AC                            loc_1AFCA:
0001B7AC 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B7B2 4E75                       		rts	
0001B7B4                            ; ===========================================================================
0001B7B4 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B7BC                            ; ===========================================================================
0001B7BC                            
0001B7BC                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B7BC 08E9 0007 0022             		bset	#7,$22(a1)
0001B7C2                            
0001B7C2                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B7C2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B7C6 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B7C8                            
0001B7C8                            loc_1AFE6:				; XREF: Touch_Hurt
0001B7C8 70FF                       		moveq	#-1,d0
0001B7CA 4E75                       		rts	
0001B7CC                            ; ===========================================================================
0001B7CC                            
0001B7CC                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B7CC 4E71                       		nop	
0001B7CE 4A68 0030                  		tst.w	$30(a0)
0001B7D2 66F4                       		bne.s	loc_1AFE6
0001B7D4 2449                       		movea.l	a1,a2
0001B7D6                            
0001B7D6                            ; End of function TouchResponse
0001B7D6                            ; continue straight to HurtSonic
0001B7D6                            
0001B7D6                            ; ---------------------------------------------------------------------------
0001B7D6                            ; Hurting Sonic	subroutine
0001B7D6                            ; ---------------------------------------------------------------------------
0001B7D6                            
0001B7D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B7D6                            
0001B7D6                            
0001B7D6                            HurtSonic:
0001B7D6 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B7DA 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B7DC 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B7E0 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B7E4 4EB9 0000 E10A             		jsr	SingleObjLoad
0001B7EA 6600                       		bne.s	Hurt_Shield
0001B7EC 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B7F0 3368 0008 0008             		move.w	8(a0),8(a1)
0001B7F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B7FC                            
0001B7FC                            Hurt_Shield:
0001B7FC 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B802 117C 0004 0024             		move.b	#4,$24(a0)
0001B808 6100 86B8                  		bsr.w	Sonic_ResetOnFloor
0001B80C 08E8 0001 0022             		bset	#1,$22(a0)
0001B812 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B818 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B81E 0828 0006 0022             		btst	#6,$22(a0)
0001B824 6700                       		beq.s	Hurt_Reverse
0001B826 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B82C 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B832                            
0001B832                            Hurt_Reverse:
0001B832 3028 0008                  		move.w	8(a0),d0
0001B836 B06A 0008                  		cmp.w	8(a2),d0
0001B83A 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B83C 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B840                            
0001B840                            Hurt_ChkSpikes:
0001B840 317C 0000 0014             		move.w	#0,$14(a0)
0001B846 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B84C 317C 0078 0030             		move.w	#$78,$30(a0)
0001B852 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B856 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B85A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B85C 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B860 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B862 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B866                            
0001B866                            Hurt_Sound:
0001B866 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B86C 70FF                       		moveq	#-1,d0
0001B86E 4E75                       		rts	
0001B870                            ; ===========================================================================
0001B870                            
0001B870                            Hurt_NoRings:
0001B870 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B874 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B878                            ; End of function HurtSonic
0001B878                            
0001B878                            ; ---------------------------------------------------------------------------
0001B878                            ; Subroutine to	kill Sonic
0001B878                            ; ---------------------------------------------------------------------------
0001B878                            
0001B878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B878                            
0001B878                            
0001B878                            KillSonic:
0001B878 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B87C 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B87E 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B884 117C 0006 0024             		move.b	#6,$24(a0)
0001B88A 6100 8636                  		bsr.w	Sonic_ResetOnFloor
0001B88E 08E8 0001 0022             		bset	#1,$22(a0)
0001B894 317C F900 0012             		move.w	#-$700,$12(a0)
0001B89A 317C 0000 0010             		move.w	#0,$10(a0)
0001B8A0 317C 0000 0014             		move.w	#0,$14(a0)
0001B8A6 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B8AC 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B8B2 08E8 0007 0002             		bset	#7,2(a0)
0001B8B8 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B8BC 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B8C0 6600                       		bne.s	Kill_Sound
0001B8C2 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B8C6                            
0001B8C6                            Kill_Sound:
0001B8C6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B8CC                            
0001B8CC                            Kill_NoDeath:
0001B8CC 70FF                       		moveq	#-1,d0
0001B8CE 4E75                       		rts	
0001B8D0                            ; End of function KillSonic
0001B8D0                            
0001B8D0                            
0001B8D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8D0                            
0001B8D0                            
0001B8D0                            Touch_Special:				; XREF: Touch_ChkValue
0001B8D0 1229 0020                  		move.b	$20(a1),d1
0001B8D4 0201 003F                  		andi.b	#$3F,d1
0001B8D8 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B8DC 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B8DE 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B8E2 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B8E4 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B8E8 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B8EA 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B8EE 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B8F0 4E75                       		rts	
0001B8F2                            ; ===========================================================================
0001B8F2                            
0001B8F2                            Touch_CatKiller:			; XREF: Touch_Special
0001B8F2 6000 FEC8                  		bra.w	loc_1AFDA
0001B8F6                            ; ===========================================================================
0001B8F6                            
0001B8F6                            Touch_Yadrin:				; XREF: Touch_Special
0001B8F6 9A40                       		sub.w	d0,d5
0001B8F8 0C45 0008                  		cmpi.w	#8,d5
0001B8FC 6400                       		bcc.s	loc_1B144
0001B8FE 3029 0008                  		move.w	8(a1),d0
0001B902 5940                       		subq.w	#4,d0
0001B904 0829 0000 0022             		btst	#0,$22(a1)
0001B90A 6700                       		beq.s	loc_1B130
0001B90C 0440 0010                  		subi.w	#$10,d0
0001B910                            
0001B910                            loc_1B130:
0001B910 9042                       		sub.w	d2,d0
0001B912 6400                       		bcc.s	loc_1B13C
0001B914 0640 0018                  		addi.w	#$18,d0
0001B918 6500                       		bcs.s	loc_1B140
0001B91A 6000                       		bra.s	loc_1B144
0001B91C                            ; ===========================================================================
0001B91C                            
0001B91C                            loc_1B13C:
0001B91C B044                       		cmp.w	d4,d0
0001B91E 6200                       		bhi.s	loc_1B144
0001B920                            
0001B920                            loc_1B140:
0001B920 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B924                            ; ===========================================================================
0001B924                            
0001B924                            loc_1B144:
0001B924 6000 FDC8                  		bra.w	Touch_Enemy
0001B928                            ; ===========================================================================
0001B928                            
0001B928                            Touch_D7orE1:				; XREF: Touch_Special
0001B928 5229 0021                  		addq.b	#1,$21(a1)
0001B92C 4E75                       		rts	
0001B92E                            ; End of function Touch_Special
0001B92E                            
0001B92E                            ; ---------------------------------------------------------------------------
0001B92E                            ; Subroutine to	show the special stage layout
0001B92E                            ; ---------------------------------------------------------------------------
0001B92E                            
0001B92E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B92E                            
0001B92E                            
0001B92E                            SS_ShowLayout:				; XREF: SpecialStage
0001B92E 6100 0000                  		bsr.w	SS_AniWallsRings
0001B932 6100 0000                  		bsr.w	SS_AniItems
0001B936 3F05                       		move.w	d5,-(sp)
0001B938 43F8 8000                  		lea	($FFFF8000).w,a1
0001B93C 1038 F780                  		move.b	($FFFFF780).w,d0
0001B940 0200 00FC                  		andi.b	#$FC,d0
0001B944 4EB9 0000 2C64             		jsr	(CalcSine).l
0001B94A 3800                       		move.w	d0,d4
0001B94C 3A01                       		move.w	d1,d5
0001B94E C9FC 0018                  		muls.w	#$18,d4
0001B952 CBFC 0018                  		muls.w	#$18,d5
0001B956 7400                       		moveq	#0,d2
0001B958 3438 F700                  		move.w	($FFFFF700).w,d2
0001B95C 84FC 0018                  		divu.w	#$18,d2
0001B960 4842                       		swap	d2
0001B962 4442                       		neg.w	d2
0001B964 0642 FF4C                  		addi.w	#-$B4,d2
0001B968 7600                       		moveq	#0,d3
0001B96A 3638 F704                  		move.w	($FFFFF704).w,d3
0001B96E 86FC 0018                  		divu.w	#$18,d3
0001B972 4843                       		swap	d3
0001B974 4443                       		neg.w	d3
0001B976 0643 FF4C                  		addi.w	#-$B4,d3
0001B97A 3E3C 000F                  		move.w	#$F,d7
0001B97E                            
0001B97E                            loc_1B19E:
0001B97E 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B982 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B986 4440                       		neg.w	d0
0001B988 C3C2                       		muls.w	d2,d1
0001B98A C1C3                       		muls.w	d3,d0
0001B98C 2C00                       		move.l	d0,d6
0001B98E DC81                       		add.l	d1,d6
0001B990 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B994 C1C2                       		muls.w	d2,d0
0001B996 C3C3                       		muls.w	d3,d1
0001B998 D280                       		add.l	d0,d1
0001B99A 2406                       		move.l	d6,d2
0001B99C 3C3C 000F                  		move.w	#$F,d6
0001B9A0                            
0001B9A0                            loc_1B1C0:
0001B9A0 2002                       		move.l	d2,d0
0001B9A2 E080                       		asr.l	#8,d0
0001B9A4 32C0                       		move.w	d0,(a1)+
0001B9A6 2001                       		move.l	d1,d0
0001B9A8 E080                       		asr.l	#8,d0
0001B9AA 32C0                       		move.w	d0,(a1)+
0001B9AC D485                       		add.l	d5,d2
0001B9AE D284                       		add.l	d4,d1
0001B9B0 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B9B4                            
0001B9B4 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B9B8 0643 0018                  		addi.w	#$18,d3
0001B9BC 51CF FFC0                  		dbf	d7,loc_1B19E
0001B9C0                            
0001B9C0 3A1F                       		move.w	(sp)+,d5
0001B9C2 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B9C8 7000                       		moveq	#0,d0
0001B9CA 3038 F704                  		move.w	($FFFFF704).w,d0
0001B9CE 80FC 0018                  		divu.w	#$18,d0
0001B9D2 C0FC 0080                  		mulu.w	#$80,d0
0001B9D6 D1C0                       		adda.l	d0,a0
0001B9D8 7000                       		moveq	#0,d0
0001B9DA 3038 F700                  		move.w	($FFFFF700).w,d0
0001B9DE 80FC 0018                  		divu.w	#$18,d0
0001B9E2 D0C0                       		adda.w	d0,a0
0001B9E4 49F8 8000                  		lea	($FFFF8000).w,a4
0001B9E8 3E3C 000F                  		move.w	#$F,d7
0001B9EC                            
0001B9EC                            loc_1B20C:
0001B9EC 3C3C 000F                  		move.w	#$F,d6
0001B9F0                            
0001B9F0                            loc_1B210:
0001B9F0 7000                       		moveq	#0,d0
0001B9F2 1018                       		move.b	(a0)+,d0
0001B9F4 6700                       		beq.s	loc_1B268
0001B9F6 0C00 004E                  		cmpi.b	#$4E,d0
0001B9FA 6200                       		bhi.s	loc_1B268
0001B9FC 3614                       		move.w	(a4),d3
0001B9FE 0643 0120                  		addi.w	#$120,d3
0001BA02 0C43 0070                  		cmpi.w	#$70,d3
0001BA06 6500                       		bcs.s	loc_1B268
0001BA08 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BA0C 6400                       		bcc.s	loc_1B268
0001BA0E 342C 0002                  		move.w	2(a4),d2
0001BA12 0642 00F0                  		addi.w	#$F0,d2
0001BA16 0C42 0070                  		cmpi.w	#$70,d2
0001BA1A 6500                       		bcs.s	loc_1B268
0001BA1C 0C42 0170                  		cmpi.w	#$170,d2
0001BA20 6400                       		bcc.s	loc_1B268
0001BA22 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BA28 E748                       		lsl.w	#3,d0
0001BA2A 4BF5 0000                  		lea	(a5,d0.w),a5
0001BA2E 225D                       		movea.l	(a5)+,a1
0001BA30 321D                       		move.w	(a5)+,d1
0001BA32 D241                       		add.w	d1,d1
0001BA34 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BA38 365D                       		movea.w	(a5)+,a3
0001BA3A 7200                       		moveq	#0,d1
0001BA3C 1219                       		move.b	(a1)+,d1
0001BA3E 5301                       		subq.b	#1,d1
0001BA40 6B00                       		bmi.s	loc_1B268
0001BA42 4EB9 0000 DDE2             		jsr	sub_D762
0001BA48                            
0001BA48                            loc_1B268:
0001BA48 584C                       		addq.w	#4,a4
0001BA4A 51CE FFA4                  		dbf	d6,loc_1B210
0001BA4E                            
0001BA4E 41E8 0070                  		lea	$70(a0),a0
0001BA52 51CF FF98                  		dbf	d7,loc_1B20C
0001BA56                            
0001BA56 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BA5A 0C05 0050                  		cmpi.b	#$50,d5
0001BA5E 6700                       		beq.s	loc_1B288
0001BA60 24BC 0000 0000             		move.l	#0,(a2)
0001BA66 4E75                       		rts	
0001BA68                            ; ===========================================================================
0001BA68                            
0001BA68                            loc_1B288:
0001BA68 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BA6E 4E75                       		rts	
0001BA70                            ; End of function SS_ShowLayout
0001BA70                            
0001BA70                            ; ---------------------------------------------------------------------------
0001BA70                            ; Subroutine to	animate	walls and rings	in the special stage
0001BA70                            ; ---------------------------------------------------------------------------
0001BA70                            
0001BA70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA70                            
0001BA70                            
0001BA70                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BA70 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BA76 7000                       		moveq	#0,d0
0001BA78 1038 F780                  		move.b	($FFFFF780).w,d0
0001BA7C E408                       		lsr.b	#2,d0
0001BA7E 0240 000F                  		andi.w	#$F,d0
0001BA82 7223                       		moveq	#$23,d1
0001BA84                            
0001BA84                            loc_1B2A4:
0001BA84 3280                       		move.w	d0,(a1)
0001BA86 5049                       		addq.w	#8,a1
0001BA88 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BA8C                            
0001BA8C 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BA92 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BA96 6A00                       		bpl.s	loc_1B2C8
0001BA98 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BA9E 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BAA2 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BAA8                            
0001BAA8                            loc_1B2C8:
0001BAA8 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BAAE 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BAB2 6A00                       		bpl.s	loc_1B2E4
0001BAB4 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BABA 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BABE 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BAC4                            
0001BAC4                            loc_1B2E4:
0001BAC4 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BAC8 1340 0138                  		move.b	d0,$138(a1)
0001BACC 1340 0160                  		move.b	d0,$160(a1)
0001BAD0 1340 0148                  		move.b	d0,$148(a1)
0001BAD4 1340 0150                  		move.b	d0,$150(a1)
0001BAD8 1340 01D8                  		move.b	d0,$1D8(a1)
0001BADC 1340 01E0                  		move.b	d0,$1E0(a1)
0001BAE0 1340 01E8                  		move.b	d0,$1E8(a1)
0001BAE4 1340 01F0                  		move.b	d0,$1F0(a1)
0001BAE8 1340 01F8                  		move.b	d0,$1F8(a1)
0001BAEC 1340 0200                  		move.b	d0,$200(a1)
0001BAF0 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BAF4 6A00                       		bpl.s	loc_1B326
0001BAF6 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BAFC 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BB00 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BB06                            
0001BB06                            loc_1B326:
0001BB06 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BB0A 1340 0168                  		move.b	d0,$168(a1)
0001BB0E 1340 0170                  		move.b	d0,$170(a1)
0001BB12 1340 0178                  		move.b	d0,$178(a1)
0001BB16 1340 0180                  		move.b	d0,$180(a1)
0001BB1A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BB1E 6A00                       		bpl.s	loc_1B350
0001BB20 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BB26 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BB2A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BB30                            
0001BB30                            loc_1B350:
0001BB30 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BB36 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BB3C 7000                       		moveq	#0,d0
0001BB3E 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BB42 D040                       		add.w	d0,d0
0001BB44 41F0 0000                  		lea	(a0,d0.w),a0
0001BB48 3290                       		move.w	(a0),(a1)
0001BB4A 3368 0002 0008             		move.w	2(a0),8(a1)
0001BB50 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BB56 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BB5C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BB62 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BB68 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BB6E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BB74 D0FC 0020                  		adda.w	#$20,a0
0001BB78 D2FC 0048                  		adda.w	#$48,a1
0001BB7C 3290                       		move.w	(a0),(a1)
0001BB7E 3368 0002 0008             		move.w	2(a0),8(a1)
0001BB84 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BB8A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BB90 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BB96 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BB9C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BBA2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BBA8 D0FC 0020                  		adda.w	#$20,a0
0001BBAC D2FC 0048                  		adda.w	#$48,a1
0001BBB0 3290                       		move.w	(a0),(a1)
0001BBB2 3368 0002 0008             		move.w	2(a0),8(a1)
0001BBB8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BBBE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BBC4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BBCA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BBD0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BBD6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BBDC D0FC 0020                  		adda.w	#$20,a0
0001BBE0 D2FC 0048                  		adda.w	#$48,a1
0001BBE4 3290                       		move.w	(a0),(a1)
0001BBE6 3368 0002 0008             		move.w	2(a0),8(a1)
0001BBEC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BBF2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BBF8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BBFE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC04 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC0A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC10 D0FC 0020                  		adda.w	#$20,a0
0001BC14 D2FC 0048                  		adda.w	#$48,a1
0001BC18 4E75                       		rts	
0001BC1A                            ; End of function SS_AniWallsRings
0001BC1A                            
0001BC1A                            ; ===========================================================================
0001BC1A 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BC2A 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BC3A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BC4A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BC5A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BC6A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BC7A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BC8A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BC9A                            ; ---------------------------------------------------------------------------
0001BC9A                            ; Subroutine to	remove items when you collect them in the special stage
0001BC9A                            ; ---------------------------------------------------------------------------
0001BC9A                            
0001BC9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC9A                            
0001BC9A                            
0001BC9A                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BC9A 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BCA0 303C 001F                  		move.w	#$1F,d0
0001BCA4                            
0001BCA4                            loc_1B4C4:
0001BCA4 4A12                       		tst.b	(a2)
0001BCA6 6700                       		beq.s	locret_1B4CE
0001BCA8 504A                       		addq.w	#8,a2
0001BCAA 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BCAE                            
0001BCAE                            locret_1B4CE:
0001BCAE 4E75                       		rts	
0001BCB0                            ; End of function SS_RemoveCollectedItem
0001BCB0                            
0001BCB0                            ; ---------------------------------------------------------------------------
0001BCB0                            ; Subroutine to	animate	special	stage items when you touch them
0001BCB0                            ; ---------------------------------------------------------------------------
0001BCB0                            
0001BCB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCB0                            
0001BCB0                            
0001BCB0                            SS_AniItems:				; XREF: SS_ShowLayout
0001BCB0 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BCB6 3E3C 001F                  		move.w	#$1F,d7
0001BCBA                            
0001BCBA                            loc_1B4DA:
0001BCBA 7000                       		moveq	#0,d0
0001BCBC 1010                       		move.b	(a0),d0
0001BCBE 6700                       		beq.s	loc_1B4E8
0001BCC0 E548                       		lsl.w	#2,d0
0001BCC2 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BCC6 4E91                       		jsr	(a1)
0001BCC8                            
0001BCC8                            loc_1B4E8:
0001BCC8 5048                       		addq.w	#8,a0
0001BCCA                            
0001BCCA                            loc_1B4EA:
0001BCCA 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BCCE                            
0001BCCE 4E75                       		rts	
0001BCD0                            ; End of function SS_AniItems
0001BCD0                            
0001BCD0                            ; ===========================================================================
0001BCD0 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BCD4 0000 0000                  		dc.l SS_AniBumper
0001BCD8 0000 0000                  		dc.l SS_Ani1Up
0001BCDC 0000 0000                  		dc.l SS_AniReverse
0001BCE0 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BCE4 0000 0000                  		dc.l SS_AniGlassBlock
0001BCE8                            ; ===========================================================================
0001BCE8                            
0001BCE8                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BCE8 5328 0002                  		subq.b	#1,2(a0)
0001BCEC 6A00                       		bpl.s	locret_1B530
0001BCEE 117C 0005 0002             		move.b	#5,2(a0)
0001BCF4 7000                       		moveq	#0,d0
0001BCF6 1028 0003                  		move.b	3(a0),d0
0001BCFA 5228 0003                  		addq.b	#1,3(a0)
0001BCFE 2268 0004                  		movea.l	4(a0),a1
0001BD02 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BD06 1280                       		move.b	d0,(a1)
0001BD08 6600                       		bne.s	locret_1B530
0001BD0A 4290                       		clr.l	(a0)
0001BD0C 42A8 0004                  		clr.l	4(a0)
0001BD10                            
0001BD10                            locret_1B530:
0001BD10 4E75                       		rts	
0001BD12                            ; ===========================================================================
0001BD12 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BD18                            ; ===========================================================================
0001BD18                            
0001BD18                            SS_AniBumper:				; XREF: SS_AniIndex
0001BD18 5328 0002                  		subq.b	#1,2(a0)
0001BD1C 6A00                       		bpl.s	locret_1B566
0001BD1E 117C 0007 0002             		move.b	#7,2(a0)
0001BD24 7000                       		moveq	#0,d0
0001BD26 1028 0003                  		move.b	3(a0),d0
0001BD2A 5228 0003                  		addq.b	#1,3(a0)
0001BD2E 2268 0004                  		movea.l	4(a0),a1
0001BD32 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BD36 6600                       		bne.s	loc_1B564
0001BD38 4290                       		clr.l	(a0)
0001BD3A 42A8 0004                  		clr.l	4(a0)
0001BD3E 12BC 0025                  		move.b	#$25,(a1)
0001BD42 4E75                       		rts	
0001BD44                            ; ===========================================================================
0001BD44                            
0001BD44                            loc_1B564:
0001BD44 1280                       		move.b	d0,(a1)
0001BD46                            
0001BD46                            locret_1B566:
0001BD46 4E75                       		rts	
0001BD48                            ; ===========================================================================
0001BD48 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BD4E                            ; ===========================================================================
0001BD4E                            
0001BD4E                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BD4E 5328 0002                  		subq.b	#1,2(a0)
0001BD52 6A00                       		bpl.s	locret_1B596
0001BD54 117C 0005 0002             		move.b	#5,2(a0)
0001BD5A 7000                       		moveq	#0,d0
0001BD5C 1028 0003                  		move.b	3(a0),d0
0001BD60 5228 0003                  		addq.b	#1,3(a0)
0001BD64 2268 0004                  		movea.l	4(a0),a1
0001BD68 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BD6C 1280                       		move.b	d0,(a1)
0001BD6E 6600                       		bne.s	locret_1B596
0001BD70 4290                       		clr.l	(a0)
0001BD72 42A8 0004                  		clr.l	4(a0)
0001BD76                            
0001BD76                            locret_1B596:
0001BD76 4E75                       		rts	
0001BD78                            ; ===========================================================================
0001BD78 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BD7E                            ; ===========================================================================
0001BD7E                            
0001BD7E                            SS_AniReverse:				; XREF: SS_AniIndex
0001BD7E 5328 0002                  		subq.b	#1,2(a0)
0001BD82 6A00                       		bpl.s	locret_1B5CC
0001BD84 117C 0007 0002             		move.b	#7,2(a0)
0001BD8A 7000                       		moveq	#0,d0
0001BD8C 1028 0003                  		move.b	3(a0),d0
0001BD90 5228 0003                  		addq.b	#1,3(a0)
0001BD94 2268 0004                  		movea.l	4(a0),a1
0001BD98 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BD9C 6600                       		bne.s	loc_1B5CA
0001BD9E 4290                       		clr.l	(a0)
0001BDA0 42A8 0004                  		clr.l	4(a0)
0001BDA4 12BC 002B                  		move.b	#$2B,(a1)
0001BDA8 4E75                       		rts	
0001BDAA                            ; ===========================================================================
0001BDAA                            
0001BDAA                            loc_1B5CA:
0001BDAA 1280                       		move.b	d0,(a1)
0001BDAC                            
0001BDAC                            locret_1B5CC:
0001BDAC 4E75                       		rts	
0001BDAE                            ; ===========================================================================
0001BDAE 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BDB4                            ; ===========================================================================
0001BDB4                            
0001BDB4                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BDB4 5328 0002                  		subq.b	#1,2(a0)
0001BDB8 6A00                       		bpl.s	locret_1B60C
0001BDBA 117C 0005 0002             		move.b	#5,2(a0)
0001BDC0 7000                       		moveq	#0,d0
0001BDC2 1028 0003                  		move.b	3(a0),d0
0001BDC6 5228 0003                  		addq.b	#1,3(a0)
0001BDCA 2268 0004                  		movea.l	4(a0),a1
0001BDCE 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BDD2 1280                       		move.b	d0,(a1)
0001BDD4 6600                       		bne.s	locret_1B60C
0001BDD6 4290                       		clr.l	(a0)
0001BDD8 42A8 0004                  		clr.l	4(a0)
0001BDDC 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BDE2 303C 00A8                  		move.w	#$A8,d0
0001BDE6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BDEC                            
0001BDEC                            locret_1B60C:
0001BDEC 4E75                       		rts	
0001BDEE                            ; ===========================================================================
0001BDEE 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BDF4                            ; ===========================================================================
0001BDF4                            
0001BDF4                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BDF4 5328 0002                  		subq.b	#1,2(a0)
0001BDF8 6A00                       		bpl.s	locret_1B640
0001BDFA 117C 0001 0002             		move.b	#1,2(a0)
0001BE00 7000                       		moveq	#0,d0
0001BE02 1028 0003                  		move.b	3(a0),d0
0001BE06 5228 0003                  		addq.b	#1,3(a0)
0001BE0A 2268 0004                  		movea.l	4(a0),a1
0001BE0E 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BE12 1280                       		move.b	d0,(a1)
0001BE14 6600                       		bne.s	locret_1B640
0001BE16 12A8 0004                  		move.b	4(a0),(a1)
0001BE1A 4290                       		clr.l	(a0)
0001BE1C 42A8 0004                  		clr.l	4(a0)
0001BE20                            
0001BE20                            locret_1B640:
0001BE20 4E75                       		rts	
0001BE22                            ; ===========================================================================
0001BE22 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BE2C                            ; ---------------------------------------------------------------------------
0001BE2C                            ; Special stage	layout pointers
0001BE2C                            ; ---------------------------------------------------------------------------
0001BE2C                            SS_LayoutIndex:
0001BE2C                            	include "_inc\Special stage layout pointers.asm"
0001BE2C                            ; ---------------------------------------------------------------------------
0001BE2C                            ; Special stage	layout pointers
0001BE2C                            ; ---------------------------------------------------------------------------
0001BE2C 0000 0000                  	dc.l SS_1
0001BE30 0000 0000                  	dc.l SS_2
0001BE34 0000 0000                  	dc.l SS_3
0001BE38 0000 0000                  	dc.l SS_4
0001BE3C 0000 0000                  	dc.l SS_5
0001BE40 0000 0000                  	dc.l SS_6
0001BE44                            	even
0001BE44                            	even
0001BE44                            
0001BE44                            ; ---------------------------------------------------------------------------
0001BE44                            ; Special stage	start locations
0001BE44                            ; ---------------------------------------------------------------------------
0001BE44                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BE5C                            		even
0001BE5C                            
0001BE5C                            ; ---------------------------------------------------------------------------
0001BE5C                            ; Subroutine to	load special stage layout
0001BE5C                            ; ---------------------------------------------------------------------------
0001BE5C                            
0001BE5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE5C                            
0001BE5C                            
0001BE5C                            SS_Load:				; XREF: SpecialStage
0001BE5C 7000                       		moveq	#0,d0
0001BE5E 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BE62 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BE66 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BE6C 6500                       		bcs.s	SS_ChkEmldNum
0001BE6E 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BE74                            
0001BE74                            SS_ChkEmldNum:
0001BE74 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BE7A 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BE7C 7200                       		moveq	#0,d1
0001BE7E 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BE82 5301                       		subq.b	#1,d1
0001BE84 6500                       		bcs.s	SS_LoadData
0001BE86 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BE8A                            
0001BE8A                            SS_ChkEmldLoop:	
0001BE8A B033 1000                  		cmp.b	(a3,d1.w),d0
0001BE8E 6600                       		bne.s	SS_ChkEmldRepeat
0001BE90 60CA                       		bra.s	SS_Load
0001BE92                            ; ===========================================================================
0001BE92                            
0001BE92                            SS_ChkEmldRepeat:
0001BE92 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BE96                            
0001BE96                            SS_LoadData:
0001BE96 E548                       		lsl.w	#2,d0
0001BE98 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BE9C 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BEA0 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BEA4 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BEA8 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BEAE 303C 0000                  		move.w	#0,d0
0001BEB2 4EB9 0000 1942             		jsr	(EniDec).l
0001BEB8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BEBE 303C 0FFF                  		move.w	#$FFF,d0
0001BEC2                            
0001BEC2                            SS_ClrRAM3:
0001BEC2 4299                       		clr.l	(a1)+
0001BEC4 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BEC8                            
0001BEC8 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BECE 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BED4 723F                       		moveq	#$3F,d1
0001BED6                            
0001BED6                            loc_1B6F6:
0001BED6 743F                       		moveq	#$3F,d2
0001BED8                            
0001BED8                            loc_1B6F8:
0001BED8 12D8                       		move.b	(a0)+,(a1)+
0001BEDA 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BEDE                            
0001BEDE 43E9 0040                  		lea	$40(a1),a1
0001BEE2 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BEE6                            
0001BEE6 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BEEC 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BEF2 724D                       		moveq	#$4D,d1
0001BEF4                            
0001BEF4                            loc_1B714:
0001BEF4 22D8                       		move.l	(a0)+,(a1)+
0001BEF6 32FC 0000                  		move.w	#0,(a1)+
0001BEFA 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BF00 32D8                       		move.w	(a0)+,(a1)+
0001BF02 51C9 FFF0                  		dbf	d1,loc_1B714
0001BF06                            
0001BF06 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BF0C 323C 003F                  		move.w	#$3F,d1
0001BF10                            
0001BF10                            loc_1B730:
0001BF10                            
0001BF10 4299                       		clr.l	(a1)+
0001BF12 51C9 FFFC                  		dbf	d1,loc_1B730
0001BF16                            
0001BF16 4E75                       		rts	
0001BF18                            ; End of function SS_Load
0001BF18                            
0001BF18                            ; ===========================================================================
0001BF18                            ; ---------------------------------------------------------------------------
0001BF18                            ; Special stage	mappings and VRAM pointers
0001BF18                            ; ---------------------------------------------------------------------------
0001BF18                            SS_MapIndex:
0001BF18                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BF18                            ; ---------------------------------------------------------------------------
0001BF18                            ; Special stage	mappings and VRAM pointers
0001BF18                            ; ---------------------------------------------------------------------------
0001BF18 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BF1C 0142                       	dc.w $142		; VRAM setting
0001BF1E 0000 0000                  	dc.l Map_SSWalls
0001BF22 0142                       	dc.w $142
0001BF24 0000 0000                  	dc.l Map_SSWalls
0001BF28 0142                       	dc.w $142
0001BF2A 0000 0000                  	dc.l Map_SSWalls
0001BF2E 0142                       	dc.w $142
0001BF30 0000 0000                  	dc.l Map_SSWalls
0001BF34 0142                       	dc.w $142
0001BF36 0000 0000                  	dc.l Map_SSWalls
0001BF3A 0142                       	dc.w $142
0001BF3C 0000 0000                  	dc.l Map_SSWalls
0001BF40 0142                       	dc.w $142
0001BF42 0000 0000                  	dc.l Map_SSWalls
0001BF46 0142                       	dc.w $142
0001BF48 0000 0000                  	dc.l Map_SSWalls
0001BF4C 0142                       	dc.w $142
0001BF4E 0000 0000                  	dc.l Map_SSWalls
0001BF52 2142                       	dc.w $2142
0001BF54 0000 0000                  	dc.l Map_SSWalls
0001BF58 2142                       	dc.w $2142
0001BF5A 0000 0000                  	dc.l Map_SSWalls
0001BF5E 2142                       	dc.w $2142
0001BF60 0000 0000                  	dc.l Map_SSWalls
0001BF64 2142                       	dc.w $2142
0001BF66 0000 0000                  	dc.l Map_SSWalls
0001BF6A 2142                       	dc.w $2142
0001BF6C 0000 0000                  	dc.l Map_SSWalls
0001BF70 2142                       	dc.w $2142
0001BF72 0000 0000                  	dc.l Map_SSWalls
0001BF76 2142                       	dc.w $2142
0001BF78 0000 0000                  	dc.l Map_SSWalls
0001BF7C 2142                       	dc.w $2142
0001BF7E 0000 0000                  	dc.l Map_SSWalls
0001BF82 2142                       	dc.w $2142
0001BF84 0000 0000                  	dc.l Map_SSWalls
0001BF88 4142                       	dc.w $4142
0001BF8A 0000 0000                  	dc.l Map_SSWalls
0001BF8E 4142                       	dc.w $4142
0001BF90 0000 0000                  	dc.l Map_SSWalls
0001BF94 4142                       	dc.w $4142
0001BF96 0000 0000                  	dc.l Map_SSWalls
0001BF9A 4142                       	dc.w $4142
0001BF9C 0000 0000                  	dc.l Map_SSWalls
0001BFA0 4142                       	dc.w $4142
0001BFA2 0000 0000                  	dc.l Map_SSWalls
0001BFA6 4142                       	dc.w $4142
0001BFA8 0000 0000                  	dc.l Map_SSWalls
0001BFAC 4142                       	dc.w $4142
0001BFAE 0000 0000                  	dc.l Map_SSWalls
0001BFB2 4142                       	dc.w $4142
0001BFB4 0000 0000                  	dc.l Map_SSWalls
0001BFB8 4142                       	dc.w $4142
0001BFBA 0000 0000                  	dc.l Map_SSWalls
0001BFBE 6142                       	dc.w $6142
0001BFC0 0000 0000                  	dc.l Map_SSWalls
0001BFC4 6142                       	dc.w $6142
0001BFC6 0000 0000                  	dc.l Map_SSWalls
0001BFCA 6142                       	dc.w $6142
0001BFCC 0000 0000                  	dc.l Map_SSWalls
0001BFD0 6142                       	dc.w $6142
0001BFD2 0000 0000                  	dc.l Map_SSWalls
0001BFD6 6142                       	dc.w $6142
0001BFD8 0000 0000                  	dc.l Map_SSWalls
0001BFDC 6142                       	dc.w $6142
0001BFDE 0000 0000                  	dc.l Map_SSWalls
0001BFE2 6142                       	dc.w $6142
0001BFE4 0000 0000                  	dc.l Map_SSWalls
0001BFE8 6142                       	dc.w $6142
0001BFEA 0000 0000                  	dc.l Map_SSWalls
0001BFEE 6142                       	dc.w $6142
0001BFF0 0000 F178                  	dc.l Map_obj47
0001BFF4 023B                       	dc.w $23B
0001BFF6 0000 0000                  	dc.l Map_SS_R
0001BFFA 0570                       	dc.w $570
0001BFFC 0000 0000                  	dc.l Map_SS_R
0001C000 0251                       	dc.w $251
0001C002 0000 0000                  	dc.l Map_SS_R
0001C006 0370                       	dc.w $370
0001C008 0000 0000                  	dc.l Map_SS_Up
0001C00C 0263                       	dc.w $263
0001C00E 0000 0000                  	dc.l Map_SS_Down
0001C012 0263                       	dc.w $263
0001C014 0000 0000                  	dc.l Map_SS_R
0001C018 22F0                       	dc.w $22F0
0001C01A 0000 0000                  	dc.l Map_SS_Glass
0001C01E 0470                       	dc.w $470
0001C020 0000 0000                  	dc.l Map_SS_Glass
0001C024 05F0                       	dc.w $5F0
0001C026 0000 0000                  	dc.l Map_SS_Glass
0001C02A 65F0                       	dc.w $65F0
0001C02C 0000 0000                  	dc.l Map_SS_Glass
0001C030 25F0                       	dc.w $25F0
0001C032 0000 0000                  	dc.l Map_SS_Glass
0001C036 45F0                       	dc.w $45F0
0001C038 0000 0000                  	dc.l Map_SS_R
0001C03C 02F0                       	dc.w $2F0
0001C03E 0100 F178                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C042 023B                       	dc.w $23B
0001C044 0200 F178                  	dc.l Map_obj47+$2000000
0001C048 023B                       	dc.w $23B
0001C04A 0000 0000                  	dc.l Map_SS_R
0001C04E 0797                       	dc.w $797
0001C050 0000 0000                  	dc.l Map_SS_R
0001C054 07A0                       	dc.w $7A0
0001C056 0000 0000                  	dc.l Map_SS_R
0001C05A 07A9                       	dc.w $7A9
0001C05C 0000 0000                  	dc.l Map_SS_R
0001C060 0797                       	dc.w $797
0001C062 0000 0000                  	dc.l Map_SS_R
0001C066 07A0                       	dc.w $7A0
0001C068 0000 0000                  	dc.l Map_SS_R
0001C06C 07A9                       	dc.w $7A9
0001C06E 0000 A4E2                  	dc.l Map_obj25
0001C072 27B2                       	dc.w $27B2
0001C074 0000 0000                  	dc.l Map_SS_Chaos3
0001C078 0770                       	dc.w $770
0001C07A 0000 0000                  	dc.l Map_SS_Chaos3
0001C07E 2770                       	dc.w $2770
0001C080 0000 0000                  	dc.l Map_SS_Chaos3
0001C084 4770                       	dc.w $4770
0001C086 0000 0000                  	dc.l Map_SS_Chaos3
0001C08A 6770                       	dc.w $6770
0001C08C 0000 0000                  	dc.l Map_SS_Chaos1
0001C090 0770                       	dc.w $770
0001C092 0000 0000                  	dc.l Map_SS_Chaos2
0001C096 0770                       	dc.w $770
0001C098 0000 0000                  	dc.l Map_SS_R
0001C09C 04F0                       	dc.w $4F0
0001C09E 0400 A4E2                  	dc.l Map_obj25+$4000000
0001C0A2 27B2                       	dc.w $27B2
0001C0A4 0500 A4E2                  	dc.l Map_obj25+$5000000
0001C0A8 27B2                       	dc.w $27B2
0001C0AA 0600 A4E2                  	dc.l Map_obj25+$6000000
0001C0AE 27B2                       	dc.w $27B2
0001C0B0 0700 A4E2                  	dc.l Map_obj25+$7000000
0001C0B4 27B2                       	dc.w $27B2
0001C0B6 0000 0000                  	dc.l Map_SS_Glass
0001C0BA 23F0                       	dc.w $23F0
0001C0BC 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C0C0 23F0                       	dc.w $23F0
0001C0C2 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C0C6 23F0                       	dc.w $23F0
0001C0C8 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C0CC 23F0                       	dc.w $23F0
0001C0CE 0000 0000                  	dc.l Map_SS_R+$2000000
0001C0D2 04F0                       	dc.w $4F0
0001C0D4 0000 0000                  	dc.l Map_SS_Glass
0001C0D8 05F0                       	dc.w $5F0
0001C0DA 0000 0000                  	dc.l Map_SS_Glass
0001C0DE 65F0                       	dc.w $65F0
0001C0E0 0000 0000                  	dc.l Map_SS_Glass
0001C0E4 25F0                       	dc.w $25F0
0001C0E6 0000 0000                  	dc.l Map_SS_Glass
0001C0EA 45F0                       	dc.w $45F0
0001C0EA 45F0                       	dc.w $45F0
0001C0EC                            
0001C0EC                            ; ---------------------------------------------------------------------------
0001C0EC                            ; Sprite mappings - special stage "R" block
0001C0EC                            ; ---------------------------------------------------------------------------
0001C0EC                            Map_SS_R:
0001C0EC                            	include "_maps\SSRblock.asm"
0001C0EC                            ; ---------------------------------------------------------------------------
0001C0EC                            ; Sprite mappings - special stage "R" block
0001C0EC                            ; ---------------------------------------------------------------------------
0001C0EC 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C0F0 0000                       		dc.w byte_1B91E-Map_SS_R
0001C0F2 01                         byte_1B912:	dc.b 1
0001C0F3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C0F8 01                         byte_1B918:	dc.b 1
0001C0F9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C0FE 00                         byte_1B91E:	dc.b 0
0001C100 00                         		even
0001C100 00                         		even
0001C100                            
0001C100                            ; ---------------------------------------------------------------------------
0001C100                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C100                            ; ---------------------------------------------------------------------------
0001C100                            Map_SS_Glass:
0001C100                            	include "_maps\SSglassblock.asm"
0001C100                            ; ---------------------------------------------------------------------------
0001C100                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C100                            ; ---------------------------------------------------------------------------
0001C100 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C104 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C108 01                         byte_1B928:	dc.b 1
0001C109 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C10E 01                         byte_1B92E:	dc.b 1
0001C10F F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C114 01                         byte_1B934:	dc.b 1
0001C115 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C11A 01                         byte_1B93A:	dc.b 1
0001C11B F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C120                            		even
0001C120                            		even
0001C120                            
0001C120                            ; ---------------------------------------------------------------------------
0001C120                            ; Sprite mappings - special stage "UP" block
0001C120                            ; ---------------------------------------------------------------------------
0001C120                            Map_SS_Up:
0001C120                            	include "_maps\SSUPblock.asm"
0001C120                            ; ---------------------------------------------------------------------------
0001C120                            ; Sprite mappings - special stage "UP" block
0001C120                            ; ---------------------------------------------------------------------------
0001C120 0000                       		dc.w byte_1B944-Map_SS_Up
0001C122 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C124 01                         byte_1B944:	dc.b 1
0001C125 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C12A 01                         byte_1B94A:	dc.b 1
0001C12B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C130                            		even
0001C130                            		even
0001C130                            
0001C130                            ; ---------------------------------------------------------------------------
0001C130                            ; Sprite mappings - special stage "DOWN" block
0001C130                            ; ---------------------------------------------------------------------------
0001C130                            Map_SS_Down:
0001C130                            	include "_maps\SSDOWNblock.asm"
0001C130                            ; ---------------------------------------------------------------------------
0001C130                            ; Sprite mappings - special stage "DOWN" block
0001C130                            ; ---------------------------------------------------------------------------
0001C130 0000                       		dc.w byte_1B954-Map_SS_Down
0001C132 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C134 01                         byte_1B954:	dc.b 1
0001C135 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C13A 01                         byte_1B95A:	dc.b 1
0001C13B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C140                            		even
0001C140                            		even
0001C140                            
0001C140                            ; ---------------------------------------------------------------------------
0001C140                            ; Sprite mappings - special stage chaos	emeralds
0001C140                            ; ---------------------------------------------------------------------------
0001C140 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C142 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C144 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C146 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C148 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C14A 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C14C 01                         byte_1B96C:	dc.b 1
0001C14D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C152 01                         byte_1B972:	dc.b 1
0001C153 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C158 01                         byte_1B978:	dc.b 1
0001C159 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C15E 01                         byte_1B97E:	dc.b 1
0001C15F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C164                            		even
0001C164                            ; ===========================================================================
0001C164                            ; ---------------------------------------------------------------------------
0001C164                            ; Object 09 - Sonic (special stage)
0001C164                            ; ---------------------------------------------------------------------------
0001C164                            
0001C164                            Obj09:					; XREF: Obj_Index
0001C164 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C168 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C16A 6100 0000                  		bsr.w	SS_FixCamera
0001C16E 6000 0000                  		bra.w	DebugMode
0001C172                            ; ===========================================================================
0001C172                            
0001C172                            Obj09_Normal:
0001C172 7000                       		moveq	#0,d0
0001C174 1028 0024                  		move.b	$24(a0),d0
0001C178 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C17C 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C180                            ; ===========================================================================
0001C180 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C182 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C184 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C186 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C188                            ; ===========================================================================
0001C188                            
0001C188                            Obj09_Main:				; XREF: Obj09_Index
0001C188 5428 0024                  		addq.b	#2,$24(a0)
0001C18C 117C 000E 0016             		move.b	#$E,$16(a0)
0001C192 117C 0007 0017             		move.b	#7,$17(a0)
0001C198 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C1A0 317C 0780 0002             		move.w	#$780,2(a0)
0001C1A6 117C 0004 0001             		move.b	#4,1(a0)
0001C1AC 117C 0000 0018             		move.b	#0,$18(a0)
0001C1B2 117C 0002 001C             		move.b	#2,$1C(a0)
0001C1B8 08E8 0002 0022             		bset	#2,$22(a0)
0001C1BE 08E8 0001 0022             		bset	#1,$22(a0)
0001C1C4                            
0001C1C4                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C1C4 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C1C8 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C1CA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C1D0 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C1D2 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C1D8                            
0001C1D8                            Obj09_NoDebug:
0001C1D8 117C 0000 0030             		move.b	#0,$30(a0)
0001C1DE 7000                       		moveq	#0,d0
0001C1E0 1028 0022                  		move.b	$22(a0),d0
0001C1E4 0240 0002                  		andi.w	#2,d0
0001C1E8 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C1EC 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C1F0 4EBA 818A                  		jsr	LoadSonicDynPLC
0001C1F4 4EF9 0000 DC84             		jmp	DisplaySprite
0001C1FA                            ; ===========================================================================
0001C1FA 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C1FC 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C1FE                            ; ===========================================================================
0001C1FE                            
0001C1FE                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C1FE 6100 0000                  		bsr.w	Obj09_Jump
0001C202 6100 0000                  		bsr.w	Obj09_Move
0001C206 6100 0000                  		bsr.w	Obj09_Fall
0001C20A 6000                       		bra.s	Obj09_Display
0001C20C                            ; ===========================================================================
0001C20C                            
0001C20C                            Obj09_InAir:				; XREF: Obj09_Modes
0001C20C 6100 0000                  		bsr.w	nullsub_2
0001C210 6100 0000                  		bsr.w	Obj09_Move
0001C214 6100 0000                  		bsr.w	Obj09_Fall
0001C218                            
0001C218                            Obj09_Display:				; XREF: Obj09_OnWall
0001C218 6100 0000                  		bsr.w	Obj09_ChkItems
0001C21C 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C220 4EB9 0000 DC5E             		jsr	SpeedToPos
0001C226 6100 0000                  		bsr.w	SS_FixCamera
0001C22A 3038 F780                  		move.w	($FFFFF780).w,d0
0001C22E D078 F782                  		add.w	($FFFFF782).w,d0
0001C232 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C236 4EB9 0001 40E6             		jsr	Sonic_Animate
0001C23C 4E75                       		rts	
0001C23E                            
0001C23E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C23E                            
0001C23E                            
0001C23E                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C23E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C244 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C246 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C24A                            
0001C24A                            Obj09_ChkRight:
0001C24A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C250 6700                       		beq.s	loc_1BA78	; if not, branch
0001C252 6100 0000                  		bsr.w	Obj09_MoveRight
0001C256                            
0001C256                            loc_1BA78:
0001C256 1038 F602                  		move.b	($FFFFF602).w,d0
0001C25A 0200 000C                  		andi.b	#$C,d0
0001C25E 6600                       		bne.s	loc_1BAA8
0001C260 3028 0014                  		move.w	$14(a0),d0
0001C264 6700                       		beq.s	loc_1BAA8
0001C266 6B00                       		bmi.s	loc_1BA9A
0001C268 0440 000C                  		subi.w	#$C,d0
0001C26C 6400                       		bcc.s	loc_1BA94
0001C26E 303C 0000                  		move.w	#0,d0
0001C272                            
0001C272                            loc_1BA94:
0001C272 3140 0014                  		move.w	d0,$14(a0)
0001C276 6000                       		bra.s	loc_1BAA8
0001C278                            ; ===========================================================================
0001C278                            
0001C278                            loc_1BA9A:
0001C278 0640 000C                  		addi.w	#$C,d0
0001C27C 6400                       		bcc.s	loc_1BAA4
0001C27E 303C 0000                  		move.w	#0,d0
0001C282                            
0001C282                            loc_1BAA4:
0001C282 3140 0014                  		move.w	d0,$14(a0)
0001C286                            
0001C286                            loc_1BAA8:
0001C286 1038 F780                  		move.b	($FFFFF780).w,d0
0001C28A 0600 0020                  		addi.b	#$20,d0
0001C28E 0200 00C0                  		andi.b	#$C0,d0
0001C292 4400                       		neg.b	d0
0001C294 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C29A C3E8 0014                  		muls.w	$14(a0),d1
0001C29E D3A8 0008                  		add.l	d1,8(a0)
0001C2A2 C1E8 0014                  		muls.w	$14(a0),d0
0001C2A6 D1A8 000C                  		add.l	d0,$C(a0)
0001C2AA 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C2AE 2428 000C                  		move.l	$C(a0),d2
0001C2B2 2628 0008                  		move.l	8(a0),d3
0001C2B6 6100 0000                  		bsr.w	sub_1BCE8
0001C2BA 6700                       		beq.s	loc_1BAF2
0001C2BC 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C2C0 93A8 0008                  		sub.l	d1,8(a0)
0001C2C4 91A8 000C                  		sub.l	d0,$C(a0)
0001C2C8 317C 0000 0014             		move.w	#0,$14(a0)
0001C2CE 4E75                       		rts	
0001C2D0                            ; ===========================================================================
0001C2D0                            
0001C2D0                            loc_1BAF2:
0001C2D0 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C2D4 4E75                       		rts	
0001C2D6                            ; End of function Obj09_Move
0001C2D6                            
0001C2D6                            
0001C2D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2D6                            
0001C2D6                            
0001C2D6                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C2D6 08E8 0000 0022             		bset	#0,$22(a0)
0001C2DC 3028 0014                  		move.w	$14(a0),d0
0001C2E0 6700                       		beq.s	loc_1BB06
0001C2E2 6A00                       		bpl.s	loc_1BB1A
0001C2E4                            
0001C2E4                            loc_1BB06:
0001C2E4 0440 000C                  		subi.w	#$C,d0
0001C2E8 0C40 F800                  		cmpi.w	#-$800,d0
0001C2EC 6E00                       		bgt.s	loc_1BB14
0001C2EE 303C F800                  		move.w	#-$800,d0
0001C2F2                            
0001C2F2                            loc_1BB14:
0001C2F2 3140 0014                  		move.w	d0,$14(a0)
0001C2F6 4E75                       		rts	
0001C2F8                            ; ===========================================================================
0001C2F8                            
0001C2F8                            loc_1BB1A:
0001C2F8 0440 0040                  		subi.w	#$40,d0
0001C2FC 6400                       		bcc.s	loc_1BB22
0001C2FE 4E71                       		nop	
0001C300                            
0001C300                            loc_1BB22:
0001C300 3140 0014                  		move.w	d0,$14(a0)
0001C304 4E75                       		rts	
0001C306                            ; End of function Obj09_MoveLeft
0001C306                            
0001C306                            
0001C306                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C306                            
0001C306                            
0001C306                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C306 08A8 0000 0022             		bclr	#0,$22(a0)
0001C30C 3028 0014                  		move.w	$14(a0),d0
0001C310 6B00                       		bmi.s	loc_1BB48
0001C312 0640 000C                  		addi.w	#$C,d0
0001C316 0C40 0800                  		cmpi.w	#$800,d0
0001C31A 6D00                       		blt.s	loc_1BB42
0001C31C 303C 0800                  		move.w	#$800,d0
0001C320                            
0001C320                            loc_1BB42:
0001C320 3140 0014                  		move.w	d0,$14(a0)
0001C324 6000                       		bra.s	locret_1BB54
0001C326                            ; ===========================================================================
0001C326                            
0001C326                            loc_1BB48:
0001C326 0640 0040                  		addi.w	#$40,d0
0001C32A 6400                       		bcc.s	loc_1BB50
0001C32C 4E71                       		nop	
0001C32E                            
0001C32E                            loc_1BB50:
0001C32E 3140 0014                  		move.w	d0,$14(a0)
0001C332                            
0001C332                            locret_1BB54:
0001C332 4E75                       		rts	
0001C334                            ; End of function Obj09_MoveRight
0001C334                            
0001C334                            
0001C334                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C334                            
0001C334                            
0001C334                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C334 1038 F603                  		move.b	($FFFFF603).w,d0
0001C338 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C33C 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C33E 1038 F780                  		move.b	($FFFFF780).w,d0
0001C342 0200 00FC                  		andi.b	#$FC,d0
0001C346 4400                       		neg.b	d0
0001C348 0400 0040                  		subi.b	#$40,d0
0001C34C 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C352 C3FC 0680                  		muls.w	#$680,d1
0001C356 E081                       		asr.l	#8,d1
0001C358 3141 0010                  		move.w	d1,$10(a0)
0001C35C C1FC 0680                  		muls.w	#$680,d0
0001C360 E080                       		asr.l	#8,d0
0001C362 3140 0012                  		move.w	d0,$12(a0)
0001C366 08E8 0001 0022             		bset	#1,$22(a0)
0001C36C 303C 00A0                  		move.w	#$A0,d0
0001C370 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C376                            
0001C376                            Obj09_NoJump:
0001C376 4E75                       		rts	
0001C378                            ; End of function Obj09_Jump
0001C378                            
0001C378                            
0001C378                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C378                            
0001C378                            
0001C378                            nullsub_2:				; XREF: Obj09_InAir
0001C378 4E75                       		rts	
0001C37A                            ; End of function nullsub_2
0001C37A                            
0001C37A                            ; ===========================================================================
0001C37A                            ; ---------------------------------------------------------------------------
0001C37A                            ; unused subroutine to limit Sonic's upward vertical speed
0001C37A                            ; ---------------------------------------------------------------------------
0001C37A 323C FC00                  		move.w	#-$400,d1
0001C37E B268 0012                  		cmp.w	$12(a0),d1
0001C382 6F00                       		ble.s	locret_1BBB4
0001C384 1038 F602                  		move.b	($FFFFF602).w,d0
0001C388 0200 0070                  		andi.b	#$70,d0
0001C38C 6600                       		bne.s	locret_1BBB4
0001C38E 3141 0012                  		move.w	d1,$12(a0)
0001C392                            
0001C392                            locret_1BBB4:
0001C392 4E75                       		rts	
0001C394                            ; ---------------------------------------------------------------------------
0001C394                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C394                            ; ---------------------------------------------------------------------------
0001C394                            
0001C394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C394                            
0001C394                            
0001C394                            SS_FixCamera:				; XREF: Obj09
0001C394 3428 000C                  		move.w	$C(a0),d2
0001C398 3628 0008                  		move.w	8(a0),d3
0001C39C 3038 F700                  		move.w	($FFFFF700).w,d0
0001C3A0 0443 00A0                  		subi.w	#$A0,d3
0001C3A4 6500                       		bcs.s	loc_1BBCE
0001C3A6 9043                       		sub.w	d3,d0
0001C3A8 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C3AC                            
0001C3AC                            loc_1BBCE:
0001C3AC 3038 F704                  		move.w	($FFFFF704).w,d0
0001C3B0 0442 0070                  		subi.w	#$70,d2
0001C3B4 6500                       		bcs.s	locret_1BBDE
0001C3B6 9042                       		sub.w	d2,d0
0001C3B8 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C3BC                            
0001C3BC                            locret_1BBDE:
0001C3BC 4E75                       		rts	
0001C3BE                            ; End of function SS_FixCamera
0001C3BE                            
0001C3BE                            ; ===========================================================================
0001C3BE                            
0001C3BE                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C3BE 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C3C4 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C3CA 6600                       		bne.s	loc_1BBF4
0001C3CC 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C3D2                            
0001C3D2                            loc_1BBF4:
0001C3D2 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C3D8 6D00                       		blt.s	loc_1BC12
0001C3DA 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C3E0 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C3E6 5428 0024                  		addq.b	#2,$24(a0)
0001C3EA 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C3F0                            
0001C3F0                            loc_1BC12:
0001C3F0 3038 F780                  		move.w	($FFFFF780).w,d0
0001C3F4 D078 F782                  		add.w	($FFFFF782).w,d0
0001C3F8 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C3FC 4EB9 0001 40E6             		jsr	Sonic_Animate
0001C402 4EB9 0001 437C             		jsr	LoadSonicDynPLC
0001C408 6100 FF8A                  		bsr.w	SS_FixCamera
0001C40C 4EF9 0000 DC84             		jmp	DisplaySprite
0001C412                            ; ===========================================================================
0001C412                            
0001C412                            Obj09_Exit2:				; XREF: Obj09_Index
0001C412 5368 0038                  		subq.w	#1,$38(a0)
0001C416 6600                       		bne.s	loc_1BC40
0001C418 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C41E                            
0001C41E                            loc_1BC40:
0001C41E 4EB9 0001 40E6             		jsr	Sonic_Animate
0001C424 4EB9 0001 437C             		jsr	LoadSonicDynPLC
0001C42A 6100 FF68                  		bsr.w	SS_FixCamera
0001C42E 4EF9 0000 DC84             		jmp	DisplaySprite
0001C434                            
0001C434                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C434                            
0001C434                            
0001C434                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C434 2428 000C                  		move.l	$C(a0),d2
0001C438 2628 0008                  		move.l	8(a0),d3
0001C43C 1038 F780                  		move.b	($FFFFF780).w,d0
0001C440 0200 00FC                  		andi.b	#$FC,d0
0001C444 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C44A 3828 0010                  		move.w	$10(a0),d4
0001C44E 48C4                       		ext.l	d4
0001C450 E184                       		asl.l	#8,d4
0001C452 C1FC 002A                  		muls.w	#$2A,d0
0001C456 D084                       		add.l	d4,d0
0001C458 3828 0012                  		move.w	$12(a0),d4
0001C45C 48C4                       		ext.l	d4
0001C45E E184                       		asl.l	#8,d4
0001C460 C3FC 002A                  		muls.w	#$2A,d1
0001C464 D284                       		add.l	d4,d1
0001C466 D680                       		add.l	d0,d3
0001C468 6100 0000                  		bsr.w	sub_1BCE8
0001C46C 6700                       		beq.s	loc_1BCB0
0001C46E 9680                       		sub.l	d0,d3
0001C470 7000                       		moveq	#0,d0
0001C472 3140 0010                  		move.w	d0,$10(a0)
0001C476 08A8 0001 0022             		bclr	#1,$22(a0)
0001C47C D481                       		add.l	d1,d2
0001C47E 6100 0000                  		bsr.w	sub_1BCE8
0001C482 6700                       		beq.s	loc_1BCC6
0001C484 9481                       		sub.l	d1,d2
0001C486 7200                       		moveq	#0,d1
0001C488 3141 0012                  		move.w	d1,$12(a0)
0001C48C 4E75                       		rts	
0001C48E                            ; ===========================================================================
0001C48E                            
0001C48E                            loc_1BCB0:
0001C48E D481                       		add.l	d1,d2
0001C490 6100 0000                  		bsr.w	sub_1BCE8
0001C494 6700                       		beq.s	loc_1BCD4
0001C496 9481                       		sub.l	d1,d2
0001C498 7200                       		moveq	#0,d1
0001C49A 3141 0012                  		move.w	d1,$12(a0)
0001C49E 08A8 0001 0022             		bclr	#1,$22(a0)
0001C4A4                            
0001C4A4                            loc_1BCC6:
0001C4A4 E080                       		asr.l	#8,d0
0001C4A6 E081                       		asr.l	#8,d1
0001C4A8 3140 0010                  		move.w	d0,$10(a0)
0001C4AC 3141 0012                  		move.w	d1,$12(a0)
0001C4B0 4E75                       		rts	
0001C4B2                            ; ===========================================================================
0001C4B2                            
0001C4B2                            loc_1BCD4:
0001C4B2 E080                       		asr.l	#8,d0
0001C4B4 E081                       		asr.l	#8,d1
0001C4B6 3140 0010                  		move.w	d0,$10(a0)
0001C4BA 3141 0012                  		move.w	d1,$12(a0)
0001C4BE 08E8 0001 0022             		bset	#1,$22(a0)
0001C4C4 4E75                       		rts	
0001C4C6                            ; End of function Obj09_Fall
0001C4C6                            
0001C4C6                            
0001C4C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4C6                            
0001C4C6                            
0001C4C6                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C4C6 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C4CC 7800                       		moveq	#0,d4
0001C4CE 4842                       		swap	d2
0001C4D0 3802                       		move.w	d2,d4
0001C4D2 4842                       		swap	d2
0001C4D4 0644 0044                  		addi.w	#$44,d4
0001C4D8 88FC 0018                  		divu.w	#$18,d4
0001C4DC C8FC 0080                  		mulu.w	#$80,d4
0001C4E0 D3C4                       		adda.l	d4,a1
0001C4E2 7800                       		moveq	#0,d4
0001C4E4 4843                       		swap	d3
0001C4E6 3803                       		move.w	d3,d4
0001C4E8 4843                       		swap	d3
0001C4EA 0644 0014                  		addi.w	#$14,d4
0001C4EE 88FC 0018                  		divu.w	#$18,d4
0001C4F2 D2C4                       		adda.w	d4,a1
0001C4F4 7A00                       		moveq	#0,d5
0001C4F6 1819                       		move.b	(a1)+,d4
0001C4F8 6100                       		bsr.s	sub_1BD30
0001C4FA 1819                       		move.b	(a1)+,d4
0001C4FC 6100                       		bsr.s	sub_1BD30
0001C4FE D2FC 007E                  		adda.w	#$7E,a1
0001C502 1819                       		move.b	(a1)+,d4
0001C504 6100                       		bsr.s	sub_1BD30
0001C506 1819                       		move.b	(a1)+,d4
0001C508 6100                       		bsr.s	sub_1BD30
0001C50A 4A05                       		tst.b	d5
0001C50C 4E75                       		rts	
0001C50E                            ; End of function sub_1BCE8
0001C50E                            
0001C50E                            
0001C50E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C50E                            
0001C50E                            
0001C50E                            sub_1BD30:				; XREF: sub_1BCE8
0001C50E 6700                       		beq.s	locret_1BD44
0001C510 0C04 0028                  		cmpi.b	#$28,d4
0001C514 6700                       		beq.s	locret_1BD44
0001C516 0C04 003A                  		cmpi.b	#$3A,d4
0001C51A 6500                       		bcs.s	loc_1BD46
0001C51C 0C04 004B                  		cmpi.b	#$4B,d4
0001C520 6400                       		bcc.s	loc_1BD46
0001C522                            
0001C522                            locret_1BD44:
0001C522 4E75                       		rts	
0001C524                            ; ===========================================================================
0001C524                            
0001C524                            loc_1BD46:
0001C524 1144 0030                  		move.b	d4,$30(a0)
0001C528 2149 0032                  		move.l	a1,$32(a0)
0001C52C 7AFF                       		moveq	#-1,d5
0001C52E 4E75                       		rts	
0001C530                            ; End of function sub_1BD30
0001C530                            
0001C530                            
0001C530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C530                            
0001C530                            
0001C530                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C530 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C536 7800                       		moveq	#0,d4
0001C538 3828 000C                  		move.w	$C(a0),d4
0001C53C 0644 0050                  		addi.w	#$50,d4
0001C540 88FC 0018                  		divu.w	#$18,d4
0001C544 C8FC 0080                  		mulu.w	#$80,d4
0001C548 D3C4                       		adda.l	d4,a1
0001C54A 7800                       		moveq	#0,d4
0001C54C 3828 0008                  		move.w	8(a0),d4
0001C550 0644 0020                  		addi.w	#$20,d4
0001C554 88FC 0018                  		divu.w	#$18,d4
0001C558 D2C4                       		adda.w	d4,a1
0001C55A 1811                       		move.b	(a1),d4
0001C55C 6600                       		bne.s	Obj09_ChkCont
0001C55E 4A28 003A                  		tst.b	$3A(a0)
0001C562 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C566 7800                       		moveq	#0,d4
0001C568 4E75                       		rts	
0001C56A                            ; ===========================================================================
0001C56A                            
0001C56A                            Obj09_ChkCont:
0001C56A 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C56E 6600                       		bne.s	Obj09_Chk1Up
0001C570 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C574 6600                       		bne.s	Obj09_GetCont
0001C576 14BC 0001                  		move.b	#1,(a2)
0001C57A 2549 0004                  		move.l	a1,4(a2)
0001C57E                            
0001C57E                            Obj09_GetCont:
0001C57E 4EB9 0000 A1CA             		jsr	CollectRing
0001C584 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C58A 6500                       		bcs.s	Obj09_NoCont
0001C58C 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C592 6600                       		bne.s	Obj09_NoCont
0001C594 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C598 303C 00BF                  		move.w	#$BF,d0
0001C59C 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra continue sound
0001C5A2                            
0001C5A2                            Obj09_NoCont:
0001C5A2 7800                       		moveq	#0,d4
0001C5A4 4E75                       		rts	
0001C5A6                            ; ===========================================================================
0001C5A6                            
0001C5A6                            Obj09_Chk1Up:
0001C5A6 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C5AA 6600                       		bne.s	Obj09_ChkEmer
0001C5AC 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C5B0 6600                       		bne.s	Obj09_Get1Up
0001C5B2 14BC 0003                  		move.b	#3,(a2)
0001C5B6 2549 0004                  		move.l	a1,4(a2)
0001C5BA                            
0001C5BA                            Obj09_Get1Up:
0001C5BA 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C5BE 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C5C2 303C 0088                  		move.w	#$88,d0
0001C5C6 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra life music
0001C5CC 7800                       		moveq	#0,d4
0001C5CE 4E75                       		rts	
0001C5D0                            ; ===========================================================================
0001C5D0                            
0001C5D0                            Obj09_ChkEmer:
0001C5D0 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C5D4 6500                       		bcs.s	Obj09_ChkGhost
0001C5D6 0C04 0040                  		cmpi.b	#$40,d4
0001C5DA 6200                       		bhi.s	Obj09_ChkGhost
0001C5DC 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C5E0 6600                       		bne.s	Obj09_GetEmer
0001C5E2 14BC 0005                  		move.b	#5,(a2)
0001C5E6 2549 0004                  		move.l	a1,4(a2)
0001C5EA                            
0001C5EA                            Obj09_GetEmer:
0001C5EA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C5F0 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C5F2 0404 003B                  		subi.b	#$3B,d4
0001C5F6 7000                       		moveq	#0,d0
0001C5F8 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C5FC 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C600 1584 0000                  		move.b	d4,(a2,d0.w)
0001C604 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C608                            
0001C608                            Obj09_NoEmer:
0001C608 303C 0093                  		move.w	#$93,d0
0001C60C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play emerald music
0001C612 7800                       		moveq	#0,d4
0001C614 4E75                       		rts	
0001C616                            ; ===========================================================================
0001C616                            
0001C616                            Obj09_ChkGhost:
0001C616 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C61A 6600                       		bne.s	Obj09_ChkGhostTag
0001C61C 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C622                            
0001C622                            Obj09_ChkGhostTag:
0001C622 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C626 6600                       		bne.s	Obj09_NoGhost
0001C628 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C62E 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C630 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C636                            
0001C636                            Obj09_NoGhost:
0001C636 78FF                       		moveq	#-1,d4
0001C638 4E75                       		rts	
0001C63A                            ; ===========================================================================
0001C63A                            
0001C63A                            Obj09_MakeGhostSolid:
0001C63A 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C640 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C642 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C648 723F                       		moveq	#$3F,d1
0001C64A                            
0001C64A                            Obj09_GhostLoop2:
0001C64A 743F                       		moveq	#$3F,d2
0001C64C                            
0001C64C                            Obj09_GhostLoop:
0001C64C 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C650 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C652 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C656                            
0001C656                            Obj09_NoReplace:
0001C656 5249                       		addq.w	#1,a1
0001C658 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C65C 43E9 0040                  		lea	$40(a1),a1
0001C660 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C664                            
0001C664                            Obj09_GhostNotSolid:
0001C664 4228 003A                  		clr.b	$3A(a0)
0001C668 7800                       		moveq	#0,d4
0001C66A 4E75                       		rts	
0001C66C                            ; End of function Obj09_ChkItems
0001C66C                            
0001C66C                            
0001C66C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C66C                            
0001C66C                            
0001C66C                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C66C 1028 0030                  		move.b	$30(a0),d0
0001C670 6600                       		bne.s	Obj09_ChkBumper
0001C672 5328 0036                  		subq.b	#1,$36(a0)
0001C676 6A00                       		bpl.s	loc_1BEA0
0001C678 117C 0000 0036             		move.b	#0,$36(a0)
0001C67E                            
0001C67E                            loc_1BEA0:
0001C67E 5328 0037                  		subq.b	#1,$37(a0)
0001C682 6A00                       		bpl.s	locret_1BEAC
0001C684 117C 0000 0037             		move.b	#0,$37(a0)
0001C68A                            
0001C68A                            locret_1BEAC:
0001C68A 4E75                       		rts	
0001C68C                            ; ===========================================================================
0001C68C                            
0001C68C                            Obj09_ChkBumper:
0001C68C 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C690 6600                       		bne.s	Obj09_GOAL
0001C692 2228 0032                  		move.l	$32(a0),d1
0001C696 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C69C 3401                       		move.w	d1,d2
0001C69E 0241 007F                  		andi.w	#$7F,d1
0001C6A2 C2FC 0018                  		mulu.w	#$18,d1
0001C6A6 0441 0014                  		subi.w	#$14,d1
0001C6AA EE4A                       		lsr.w	#7,d2
0001C6AC 0242 007F                  		andi.w	#$7F,d2
0001C6B0 C4FC 0018                  		mulu.w	#$18,d2
0001C6B4 0442 0044                  		subi.w	#$44,d2
0001C6B8 9268 0008                  		sub.w	8(a0),d1
0001C6BC 9468 000C                  		sub.w	$C(a0),d2
0001C6C0 4EB9 0000 2F32             		jsr	(CalcAngle).l
0001C6C6 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C6CC C3FC F900                  		muls.w	#-$700,d1
0001C6D0 E081                       		asr.l	#8,d1
0001C6D2 3141 0010                  		move.w	d1,$10(a0)
0001C6D6 C1FC F900                  		muls.w	#-$700,d0
0001C6DA E080                       		asr.l	#8,d0
0001C6DC 3140 0012                  		move.w	d0,$12(a0)
0001C6E0 08E8 0001 0022             		bset	#1,$22(a0)
0001C6E6 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C6EA 6600                       		bne.s	Obj09_BumpSnd
0001C6EC 14BC 0002                  		move.b	#2,(a2)
0001C6F0 2028 0032                  		move.l	$32(a0),d0
0001C6F4 5380                       		subq.l	#1,d0
0001C6F6 2540 0004                  		move.l	d0,4(a2)
0001C6FA                            
0001C6FA                            Obj09_BumpSnd:
0001C6FA 303C 00B4                  		move.w	#$B4,d0
0001C6FE 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C704                            ; ===========================================================================
0001C704                            
0001C704                            Obj09_GOAL:
0001C704 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C708 6600                       		bne.s	Obj09_UPblock
0001C70A 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C70E 303C 00A8                  		move.w	#$A8,d0		; change item
0001C712 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C718 4E75                       		rts	
0001C71A                            ; ===========================================================================
0001C71A                            
0001C71A                            Obj09_UPblock:
0001C71A 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C71E 6600                       		bne.s	Obj09_DOWNblock
0001C720 4A28 0036                  		tst.b	$36(a0)
0001C724 6600 0000                  		bne.w	Obj09_NoGlass
0001C728 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C72E 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C734 6700                       		beq.s	Obj09_UPsnd
0001C736 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C73A 2268 0032                  		movea.l	$32(a0),a1
0001C73E 5389                       		subq.l	#1,a1
0001C740 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C744                            
0001C744                            Obj09_UPsnd:
0001C744 303C 00A9                  		move.w	#$A9,d0
0001C748 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C74E                            ; ===========================================================================
0001C74E                            
0001C74E                            Obj09_DOWNblock:
0001C74E 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C752 6600                       		bne.s	Obj09_Rblock
0001C754 4A28 0036                  		tst.b	$36(a0)
0001C758 6600 0000                  		bne.w	Obj09_NoGlass
0001C75C 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C762 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C768 6600                       		bne.s	Obj09_DOWNsnd
0001C76A E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C76E 2268 0032                  		movea.l	$32(a0),a1
0001C772 5389                       		subq.l	#1,a1
0001C774 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C778                            
0001C778                            Obj09_DOWNsnd:
0001C778 303C 00A9                  		move.w	#$A9,d0
0001C77C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C782                            ; ===========================================================================
0001C782                            
0001C782                            Obj09_Rblock:
0001C782 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C786 6600                       		bne.s	Obj09_ChkGlass
0001C788 4A28 0037                  		tst.b	$37(a0)
0001C78C 6600 0000                  		bne.w	Obj09_NoGlass
0001C790 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C796 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C79A 6600                       		bne.s	Obj09_RevStage
0001C79C 14BC 0004                  		move.b	#4,(a2)
0001C7A0 2028 0032                  		move.l	$32(a0),d0
0001C7A4 5380                       		subq.l	#1,d0
0001C7A6 2540 0004                  		move.l	d0,4(a2)
0001C7AA                            
0001C7AA                            Obj09_RevStage:
0001C7AA 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C7AE 303C 00A9                  		move.w	#$A9,d0
0001C7B2 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play sound
0001C7B8                            ; ===========================================================================
0001C7B8                            
0001C7B8                            Obj09_ChkGlass:
0001C7B8 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C7BC 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C7BE 0C00 002E                  		cmpi.b	#$2E,d0
0001C7C2 6700                       		beq.s	Obj09_Glass
0001C7C4 0C00 002F                  		cmpi.b	#$2F,d0
0001C7C8 6700                       		beq.s	Obj09_Glass
0001C7CA 0C00 0030                  		cmpi.b	#$30,d0
0001C7CE 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C7D0                            
0001C7D0                            Obj09_Glass:
0001C7D0 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C7D4 6600                       		bne.s	Obj09_GlassSnd
0001C7D6 14BC 0006                  		move.b	#6,(a2)
0001C7DA 2268 0032                  		movea.l	$32(a0),a1
0001C7DE 5389                       		subq.l	#1,a1
0001C7E0 2549 0004                  		move.l	a1,4(a2)
0001C7E4 1011                       		move.b	(a1),d0
0001C7E6 5200                       		addq.b	#1,d0		; change glass type when touched
0001C7E8 0C00 0030                  		cmpi.b	#$30,d0
0001C7EC 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C7EE 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C7F0                            
0001C7F0                            Obj09_GlassUpdate:
0001C7F0 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C7F4                            
0001C7F4                            Obj09_GlassSnd:
0001C7F4 303C 00BA                  		move.w	#$BA,d0
0001C7F8 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C7FE                            ; ===========================================================================
0001C7FE                            
0001C7FE                            Obj09_NoGlass:
0001C7FE 4E75                       		rts	
0001C800                            ; End of function Obj09_ChkItems2
0001C800                            
0001C800                            ; ===========================================================================
0001C800                            ; ---------------------------------------------------------------------------
0001C800                            ; Object 10 - blank
0001C800                            ; ---------------------------------------------------------------------------
0001C800                            
0001C800                            Obj10:					; XREF: Obj_Index
0001C800 4E75                       		rts	
0001C802                            ; ---------------------------------------------------------------------------
0001C802                            ; Subroutine to	animate	level graphics
0001C802                            ; ---------------------------------------------------------------------------
0001C802                            
0001C802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C802                            
0001C802                            
0001C802                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C802 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C806 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C808 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C80E 6100 0000                  		bsr.w	AniArt_GiantRing
0001C812 7000                       		moveq	#0,d0
0001C814 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C818 D040                       		add.w	d0,d0
0001C81A 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C81E 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C822                            ; ===========================================================================
0001C822                            
0001C822                            AniArt_Pause:
0001C822 4E75                       		rts	
0001C824                            ; End of function AniArt_Load
0001C824                            
0001C824                            ; ===========================================================================
0001C824 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C828 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C82C 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C830 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C832                            ; ===========================================================================
0001C832                            ; ---------------------------------------------------------------------------
0001C832                            ; Animated pattern routine - Green Hill
0001C832                            ; ---------------------------------------------------------------------------
0001C832                            
0001C832                            AniArt_GHZ:				; XREF: AniArt_Index
0001C832 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C836 6A00                       		bpl.s	loc_1C08A
0001C838 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C83E 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C844 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C848 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C84C 0240 0001                  		andi.w	#1,d0
0001C850 6700                       		beq.s	loc_1C078
0001C852 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C856                            
0001C856                            loc_1C078:
0001C856 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C860 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C864 6000 0000                  		bra.w	LoadTiles
0001C868                            ; ===========================================================================
0001C868                            
0001C868                            loc_1C08A:
0001C868 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C86C 6A00                       		bpl.s	loc_1C0C0
0001C86E 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C874 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C87A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C87E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C882 0240 0001                  		andi.w	#1,d0
0001C886 6700                       		beq.s	loc_1C0AE
0001C888 43E9 0200                  		lea	$200(a1),a1
0001C88C                            
0001C88C                            loc_1C0AE:
0001C88C 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C896 323C 000F                  		move.w	#$F,d1
0001C89A 6000 0000                  		bra.w	LoadTiles
0001C89E                            ; ===========================================================================
0001C89E                            
0001C89E                            loc_1C0C0:
0001C89E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C8A2 6A00                       		bpl.s	locret_1C10C
0001C8A4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C8AA 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C8AE 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C8B2 0240 0003                  		andi.w	#3,d0
0001C8B6 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C8BA 0800 0000                  		btst	#0,d0
0001C8BE 6600                       		bne.s	loc_1C0E8
0001C8C0 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C8C6                            
0001C8C6                            loc_1C0E8:
0001C8C6 EF48                       		lsl.w	#7,d0
0001C8C8 3200                       		move.w	d0,d1
0001C8CA D040                       		add.w	d0,d0
0001C8CC D041                       		add.w	d1,d0
0001C8CE 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C8D8 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C8DE 43F1 0000                  		lea	(a1,d0.w),a1
0001C8E2 323C 000B                  		move.w	#$B,d1
0001C8E6 6100 0000                  		bsr.w	LoadTiles
0001C8EA                            
0001C8EA                            locret_1C10C:
0001C8EA 4E75                       		rts	
0001C8EC                            ; ===========================================================================
0001C8EC 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C8F0                            ; ===========================================================================
0001C8F0                            ; ---------------------------------------------------------------------------
0001C8F0                            ; Animated pattern routine - Marble
0001C8F0                            ; ---------------------------------------------------------------------------
0001C8F0                            
0001C8F0                            AniArt_MZ:				; XREF: AniArt_Index
0001C8F0 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C8F4 6A00                       		bpl.s	loc_1C150
0001C8F6 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C8FC 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C902 7000                       		moveq	#0,d0
0001C904 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C908 5200                       		addq.b	#1,d0
0001C90A 0C00 0003                  		cmpi.b	#3,d0
0001C90E 6600                       		bne.s	loc_1C134
0001C910 7000                       		moveq	#0,d0
0001C912                            
0001C912                            loc_1C134:
0001C912 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C916 C0FC 0100                  		mulu.w	#$100,d0
0001C91A D2C0                       		adda.w	d0,a1
0001C91C 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C926 323C 0007                  		move.w	#7,d1
0001C92A 6100 0000                  		bsr.w	LoadTiles
0001C92E                            
0001C92E                            loc_1C150:
0001C92E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C932 6A00                       		bpl.s	loc_1C1AE
0001C934 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C93A 7000                       		moveq	#0,d0
0001C93C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C940 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C946 EE58                       		ror.w	#7,d0
0001C948 D8C0                       		adda.w	d0,a4
0001C94A 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C954 7600                       		moveq	#0,d3
0001C956 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C95A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C95E 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C962 343C 0003                  		move.w	#3,d2
0001C966                            
0001C966                            loc_1C188:
0001C966 3003                       		move.w	d3,d0
0001C968 D040                       		add.w	d0,d0
0001C96A 0240 001E                  		andi.w	#$1E,d0
0001C96E 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C974 3033 0000                  		move.w	(a3,d0.w),d0
0001C978 47F3 0000                  		lea	(a3,d0.w),a3
0001C97C 224C                       		movea.l	a4,a1
0001C97E 323C 001F                  		move.w	#$1F,d1
0001C982 4E93                       		jsr	(a3)
0001C984 5843                       		addq.w	#4,d3
0001C986 51CA FFDE                  		dbf	d2,loc_1C188
0001C98A 4E75                       		rts	
0001C98C                            ; ===========================================================================
0001C98C                            
0001C98C                            loc_1C1AE:
0001C98C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C990 6A00 0000                  		bpl.w	locret_1C1EA
0001C994 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C99A 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C9A0 7000                       		moveq	#0,d0
0001C9A2 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C9A6 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C9AA 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C9B0 C0FC 00C0                  		mulu.w	#$C0,d0
0001C9B4 D2C0                       		adda.w	d0,a1
0001C9B6 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C9C0 323C 0005                  		move.w	#5,d1
0001C9C4 6000 0000                  		bra.w	LoadTiles
0001C9C8                            ; ===========================================================================
0001C9C8                            
0001C9C8                            locret_1C1EA:
0001C9C8 4E75                       		rts	
0001C9CA                            ; ===========================================================================
0001C9CA                            ; ---------------------------------------------------------------------------
0001C9CA                            ; Animated pattern routine - Scrap Brain
0001C9CA                            ; ---------------------------------------------------------------------------
0001C9CA                            
0001C9CA                            AniArt_SBZ:				; XREF: AniArt_Index
0001C9CA 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C9CE 6700                       		beq.s	loc_1C1F8
0001C9D0 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C9D4 6000                       		bra.s	loc_1C250
0001C9D6                            ; ===========================================================================
0001C9D6                            
0001C9D6                            loc_1C1F8:
0001C9D6 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C9DA 6A00                       		bpl.s	loc_1C250
0001C9DC 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C9E2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C9E8 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C9F2 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C9F6 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C9FA 0240 0007                  		andi.w	#7,d0
0001C9FE 6700                       		beq.s	loc_1C234
0001CA00 5340                       		subq.w	#1,d0
0001CA02 C0FC 0180                  		mulu.w	#$180,d0
0001CA06 43F1 0000                  		lea	(a1,d0.w),a1
0001CA0A 323C 000B                  		move.w	#$B,d1
0001CA0E 6000 0000                  		bra.w	LoadTiles
0001CA12                            ; ===========================================================================
0001CA12                            
0001CA12                            loc_1C234:
0001CA12 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CA18                            
0001CA18                            loc_1C23A:
0001CA18 323C 0005                  		move.w	#5,d1
0001CA1C 6100 0000                  		bsr.w	LoadTiles
0001CA20 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CA26 323C 0005                  		move.w	#5,d1
0001CA2A 6000 0000                  		bra.w	LoadTiles
0001CA2E                            ; ===========================================================================
0001CA2E                            
0001CA2E                            loc_1C250:
0001CA2E 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CA32 6700                       		beq.s	loc_1C25C
0001CA34 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CA38 6000                       		bra.s	locret_1C2A0
0001CA3A                            ; ===========================================================================
0001CA3A                            
0001CA3A                            loc_1C25C:
0001CA3A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CA3E 6A00                       		bpl.s	locret_1C2A0
0001CA40 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CA46 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CA4C 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CA56 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CA5A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CA5E 0240 0007                  		andi.w	#7,d0
0001CA62 6700                       		beq.s	loc_1C298
0001CA64 5340                       		subq.w	#1,d0
0001CA66 C0FC 0180                  		mulu.w	#$180,d0
0001CA6A 43F1 0000                  		lea	(a1,d0.w),a1
0001CA6E 323C 000B                  		move.w	#$B,d1
0001CA72 6000 0000                  		bra.w	LoadTiles
0001CA76                            ; ===========================================================================
0001CA76                            
0001CA76                            loc_1C298:
0001CA76 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CA7C 609A                       		bra.s	loc_1C23A
0001CA7E                            ; ===========================================================================
0001CA7E                            
0001CA7E                            locret_1C2A0:
0001CA7E 4E75                       		rts	
0001CA80                            ; ===========================================================================
0001CA80                            ; ---------------------------------------------------------------------------
0001CA80                            ; Animated pattern routine - ending sequence
0001CA80                            ; ---------------------------------------------------------------------------
0001CA80                            
0001CA80                            AniArt_Ending:				; XREF: AniArt_Index
0001CA80 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CA84 6A00                       		bpl.s	loc_1C2F4
0001CA86 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CA8C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CA92 45F8 9400                  		lea	($FFFF9400).w,a2
0001CA96 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CA9A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CA9E 0240 0001                  		andi.w	#1,d0
0001CAA2 6700                       		beq.s	loc_1C2CE
0001CAA4 43E9 0200                  		lea	$200(a1),a1
0001CAA8 45EA 0200                  		lea	$200(a2),a2
0001CAAC                            
0001CAAC                            loc_1C2CE:
0001CAAC 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CAB6 323C 000F                  		move.w	#$F,d1
0001CABA 6100 0000                  		bsr.w	LoadTiles
0001CABE 224A                       		movea.l	a2,a1
0001CAC0 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CACA 323C 000F                  		move.w	#$F,d1
0001CACE 6000 0000                  		bra.w	LoadTiles
0001CAD2                            ; ===========================================================================
0001CAD2                            
0001CAD2                            loc_1C2F4:
0001CAD2 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CAD6 6A00                       		bpl.s	loc_1C33C
0001CAD8 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CADE 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CAE2 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CAE6 0240 0007                  		andi.w	#7,d0
0001CAEA 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CAEE EF48                       		lsl.w	#7,d0
0001CAF0 3200                       		move.w	d0,d1
0001CAF2 D040                       		add.w	d0,d0
0001CAF4 D041                       		add.w	d1,d0
0001CAF6 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CB00 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CB06 43F1 0000                  		lea	(a1,d0.w),a1
0001CB0A 323C 000B                  		move.w	#$B,d1
0001CB0E 6000 0000                  		bra.w	LoadTiles
0001CB12                            ; ===========================================================================
0001CB12 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CB1A                            ; ===========================================================================
0001CB1A                            
0001CB1A                            loc_1C33C:
0001CB1A 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CB1E 6A00                       		bpl.s	loc_1C37A
0001CB20 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CB26 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CB2A 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CB2E 0240 0003                  		andi.w	#3,d0
0001CB32 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CB36 E148                       		lsl.w	#8,d0
0001CB38 D040                       		add.w	d0,d0
0001CB3A 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CB44 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CB48 43F1 0000                  		lea	(a1,d0.w),a1
0001CB4C 323C 000F                  		move.w	#$F,d1
0001CB50 6000 0000                  		bra.w	LoadTiles
0001CB54                            ; ===========================================================================
0001CB54 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CB58                            ; ===========================================================================
0001CB58                            
0001CB58                            loc_1C37A:
0001CB58 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CB5C 6A00                       		bpl.s	locret_1C3B4
0001CB5E 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CB64 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CB68 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CB6C 0240 0003                  		andi.w	#3,d0
0001CB70 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CB74 E148                       		lsl.w	#8,d0
0001CB76 D040                       		add.w	d0,d0
0001CB78 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CB82 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CB86 43F1 0000                  		lea	(a1,d0.w),a1
0001CB8A 323C 000F                  		move.w	#$F,d1
0001CB8E 6000 0000                  		bra.w	LoadTiles
0001CB92                            ; ===========================================================================
0001CB92                            
0001CB92                            locret_1C3B4:
0001CB92 4E75                       		rts	
0001CB94                            ; ===========================================================================
0001CB94                            
0001CB94                            AniArt_none:				; XREF: AniArt_Index
0001CB94 4E75                       		rts	
0001CB96                            
0001CB96                            ; ---------------------------------------------------------------------------
0001CB96                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CB96                            ; ---------------------------------------------------------------------------
0001CB96                            
0001CB96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB96                            
0001CB96                            
0001CB96                            LoadTiles:
0001CB96 2C99                       		move.l	(a1)+,(a6)
0001CB98 2C99                       		move.l	(a1)+,(a6)
0001CB9A 2C99                       		move.l	(a1)+,(a6)
0001CB9C 2C99                       		move.l	(a1)+,(a6)
0001CB9E 2C99                       		move.l	(a1)+,(a6)
0001CBA0 2C99                       		move.l	(a1)+,(a6)
0001CBA2 2C99                       		move.l	(a1)+,(a6)
0001CBA4 2C99                       		move.l	(a1)+,(a6)
0001CBA6 51C9 FFEE                  		dbf	d1,LoadTiles
0001CBAA 4E75                       		rts	
0001CBAC                            ; End of function LoadTiles
0001CBAC                            
0001CBAC                            ; ===========================================================================
0001CBAC                            ; ---------------------------------------------------------------------------
0001CBAC                            ; Animated pattern routine - more Marble Zone
0001CBAC                            ; ---------------------------------------------------------------------------
0001CBAC 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CBB0 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CBB4 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CBB8 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CBBC 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CBC0 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CBC4 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CBC8 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CBCC                            ; ===========================================================================
0001CBCC                            
0001CBCC                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CBCC 2C91                       		move.l	(a1),(a6)
0001CBCE 43E9 0010                  		lea	$10(a1),a1
0001CBD2 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CBD6 4E75                       		rts	
0001CBD8                            ; ===========================================================================
0001CBD8                            
0001CBD8                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CBD8 2029 0002                  		move.l	2(a1),d0
0001CBDC 1029 0001                  		move.b	1(a1),d0
0001CBE0 E098                       		ror.l	#8,d0
0001CBE2 2C80                       		move.l	d0,(a6)
0001CBE4 43E9 0010                  		lea	$10(a1),a1
0001CBE8 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CBEC 4E75                       		rts	
0001CBEE                            ; ===========================================================================
0001CBEE                            
0001CBEE                            loc_1C410:				; XREF: AniArt_MZextra
0001CBEE 2CA9 0002                  		move.l	2(a1),(a6)
0001CBF2 43E9 0010                  		lea	$10(a1),a1
0001CBF6 51C9 FFF6                  		dbf	d1,loc_1C410
0001CBFA 4E75                       		rts	
0001CBFC                            ; ===========================================================================
0001CBFC                            
0001CBFC                            loc_1C41E:				; XREF: AniArt_MZextra
0001CBFC 2029 0004                  		move.l	4(a1),d0
0001CC00 1029 0003                  		move.b	3(a1),d0
0001CC04 E098                       		ror.l	#8,d0
0001CC06 2C80                       		move.l	d0,(a6)
0001CC08 43E9 0010                  		lea	$10(a1),a1
0001CC0C 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CC10 4E75                       		rts	
0001CC12                            ; ===========================================================================
0001CC12                            
0001CC12                            loc_1C434:				; XREF: AniArt_MZextra
0001CC12 2CA9 0004                  		move.l	4(a1),(a6)
0001CC16 43E9 0010                  		lea	$10(a1),a1
0001CC1A 51C9 FFF6                  		dbf	d1,loc_1C434
0001CC1E 4E75                       		rts	
0001CC20                            ; ===========================================================================
0001CC20                            
0001CC20                            loc_1C442:				; XREF: AniArt_MZextra
0001CC20 2029 0006                  		move.l	6(a1),d0
0001CC24 1029 0005                  		move.b	5(a1),d0
0001CC28 E098                       		ror.l	#8,d0
0001CC2A 2C80                       		move.l	d0,(a6)
0001CC2C 43E9 0010                  		lea	$10(a1),a1
0001CC30 51C9 FFEE                  		dbf	d1,loc_1C442
0001CC34 4E75                       		rts	
0001CC36                            ; ===========================================================================
0001CC36                            
0001CC36                            loc_1C458:				; XREF: AniArt_MZextra
0001CC36 2CA9 0006                  		move.l	6(a1),(a6)
0001CC3A 43E9 0010                  		lea	$10(a1),a1
0001CC3E 51C9 FFF6                  		dbf	d1,loc_1C458
0001CC42 4E75                       		rts	
0001CC44                            ; ===========================================================================
0001CC44                            
0001CC44                            loc_1C466:				; XREF: AniArt_MZextra
0001CC44 2029 0008                  		move.l	8(a1),d0
0001CC48 1029 0007                  		move.b	7(a1),d0
0001CC4C E098                       		ror.l	#8,d0
0001CC4E 2C80                       		move.l	d0,(a6)
0001CC50 43E9 0010                  		lea	$10(a1),a1
0001CC54 51C9 FFEE                  		dbf	d1,loc_1C466
0001CC58 4E75                       		rts	
0001CC5A                            ; ===========================================================================
0001CC5A                            
0001CC5A                            loc_1C47C:				; XREF: AniArt_MZextra
0001CC5A 2CA9 0008                  		move.l	8(a1),(a6)
0001CC5E 43E9 0010                  		lea	$10(a1),a1
0001CC62 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CC66 4E75                       		rts	
0001CC68                            ; ===========================================================================
0001CC68                            
0001CC68                            loc_1C48A:				; XREF: AniArt_MZextra
0001CC68 2029 000A                  		move.l	$A(a1),d0
0001CC6C 1029 0009                  		move.b	9(a1),d0
0001CC70 E098                       		ror.l	#8,d0
0001CC72 2C80                       		move.l	d0,(a6)
0001CC74 43E9 0010                  		lea	$10(a1),a1
0001CC78 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CC7C 4E75                       		rts	
0001CC7E                            ; ===========================================================================
0001CC7E                            
0001CC7E                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CC7E 2CA9 000A                  		move.l	$A(a1),(a6)
0001CC82 43E9 0010                  		lea	$10(a1),a1
0001CC86 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CC8A 4E75                       		rts	
0001CC8C                            ; ===========================================================================
0001CC8C                            
0001CC8C                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CC8C 2029 000C                  		move.l	$C(a1),d0
0001CC90 1029 000B                  		move.b	$B(a1),d0
0001CC94 E098                       		ror.l	#8,d0
0001CC96 2C80                       		move.l	d0,(a6)
0001CC98 43E9 0010                  		lea	$10(a1),a1
0001CC9C 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CCA0 4E75                       		rts	
0001CCA2                            ; ===========================================================================
0001CCA2                            
0001CCA2                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CCA2 2CA9 000C                  		move.l	$C(a1),(a6)
0001CCA6 43E9 0010                  		lea	$10(a1),a1
0001CCAA 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CCAE 4E75                       		rts	
0001CCB0                            ; ===========================================================================
0001CCB0                            
0001CCB0                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CCB0 2029 000C                  		move.l	$C(a1),d0
0001CCB4 E198                       		rol.l	#8,d0
0001CCB6 1011                       		move.b	0(a1),d0
0001CCB8 2C80                       		move.l	d0,(a6)
0001CCBA 43E9 0010                  		lea	$10(a1),a1
0001CCBE 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CCC2 4E75                       		rts	
0001CCC4                            ; ===========================================================================
0001CCC4                            
0001CCC4                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CCC4 3CA9 000E                  		move.w	$E(a1),(a6)
0001CCC8 3C91                       		move.w	0(a1),(a6)
0001CCCA 43E9 0010                  		lea	$10(a1),a1
0001CCCE 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CCD2 4E75                       		rts	
0001CCD4                            ; ===========================================================================
0001CCD4                            
0001CCD4                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CCD4 2011                       		move.l	0(a1),d0
0001CCD6 1029 000F                  		move.b	$F(a1),d0
0001CCDA E098                       		ror.l	#8,d0
0001CCDC 2C80                       		move.l	d0,(a6)
0001CCDE 43E9 0010                  		lea	$10(a1),a1
0001CCE2 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CCE6 4E75                       		rts	
0001CCE8                            
0001CCE8                            ; ---------------------------------------------------------------------------
0001CCE8                            ; Animated pattern routine - giant ring
0001CCE8                            ; ---------------------------------------------------------------------------
0001CCE8                            
0001CCE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCE8                            
0001CCE8                            
0001CCE8                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CCE8 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CCEC 6600                       		bne.s	loc_1C518
0001CCEE 4E75                       		rts	
0001CCF0                            ; ===========================================================================
0001CCF0                            
0001CCF0                            loc_1C518:
0001CCF0 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CCF6 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CCFC 7000                       		moveq	#0,d0
0001CCFE 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CD02 43F1 0000                  		lea	(a1,d0.w),a1
0001CD06 0640 8000                  		addi.w	#$8000,d0
0001CD0A E588                       		lsl.l	#2,d0
0001CD0C E448                       		lsr.w	#2,d0
0001CD0E 0040 4000                  		ori.w	#$4000,d0
0001CD12 4840                       		swap	d0
0001CD14 2D40 0004                  		move.l	d0,4(a6)
0001CD18 323C 000D                  		move.w	#$D,d1
0001CD1C 6000 FE78                  		bra.w	LoadTiles
0001CD20                            ; End of function AniArt_GiantRing
0001CD20                            
0001CD20                            ; ===========================================================================
0001CD20                            ; ---------------------------------------------------------------------------
0001CD20                            ; Object 21 - SCORE, TIME, RINGS
0001CD20                            ; ---------------------------------------------------------------------------
0001CD20                            
0001CD20                            Obj21:					; XREF: Obj_Index
0001CD20 7000                       		moveq	#0,d0
0001CD22 1028 0024                  		move.b	$24(a0),d0
0001CD26 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CD2A 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CD2E                            ; ===========================================================================
0001CD2E 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CD30 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CD32                            ; ===========================================================================
0001CD32                            
0001CD32                            Obj21_Main:				; XREF: Obj21_Main
0001CD32 5428 0024                  		addq.b	#2,$24(a0)
0001CD36 317C 0090 0008             		move.w	#$90,8(a0)
0001CD3C 317C 0108 000A             		move.w	#$108,$A(a0)
0001CD42 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CD4A 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CD50 117C 0000 0001             		move.b	#0,1(a0)
0001CD56 117C 0000 0018             		move.b	#0,$18(a0)
0001CD5C                            
0001CD5C                            Obj21_Flash:				; XREF: Obj21_Main
0001CD5C 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CD60 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CD62 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CD66 4EF9 0000 DC84             		jmp	DisplaySprite
0001CD6C                            ; ===========================================================================
0001CD6C                            
0001CD6C                            Obj21_Flash2:
0001CD6C 7000                       		moveq	#0,d0
0001CD6E 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CD74 6600                       		bne.s	Obj21_Display
0001CD76 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CD78 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CD7E 6600                       		bne.s	Obj21_Display	; if not, branch
0001CD80 5440                       		addq.w	#2,d0		; make time counter flash red
0001CD82                            
0001CD82                            Obj21_Display:
0001CD82 1140 001A                  		move.b	d0,$1A(a0)
0001CD86 4EF9 0000 DC84             		jmp	DisplaySprite
0001CD8C                            ; ===========================================================================
0001CD8C                            ; ---------------------------------------------------------------------------
0001CD8C                            ; Sprite mappings - SCORE, TIME, RINGS
0001CD8C                            ; ---------------------------------------------------------------------------
0001CD8C                            Map_obj21:
0001CD8C                            	include "_maps\obj21.asm"
0001CD8C                            ; ---------------------------------------------------------------------------
0001CD8C                            ; Sprite mappings - SCORE, TIME, RINGS
0001CD8C                            ; ---------------------------------------------------------------------------
0001CD8C 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CD90 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CD94 0A                         byte_1C5BC:	dc.b $A
0001CD95 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CD9A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CD9F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CDA4 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CDA9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CDAE A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CDB3 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CDB8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CDBD 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CDC2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CDC7 00                         		dc.b 0
0001CDC8 0A                         byte_1C5F0:	dc.b $A
0001CDC9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CDCE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CDD3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CDD8 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CDDD 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CDE2 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CDE7 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CDEC A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CDF1 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CDF6 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CDFB 00                         		dc.b 0
0001CDFC 0A                         byte_1C624:	dc.b $A
0001CDFD 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE02 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE07 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE0C 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CE11 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CE16 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CE1B A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CE20 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CE25 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CE2A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CE2F 00                         		dc.b 0
0001CE30 0A                         byte_1C658:	dc.b $A
0001CE31 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE36 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE3B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE40 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CE45 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CE4A A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CE4F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CE54 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CE59 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CE5E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CE64 00                         		even
0001CE64 00                         		even
0001CE64                            
0001CE64                            ; ---------------------------------------------------------------------------
0001CE64                            ; Add points subroutine
0001CE64                            ; ---------------------------------------------------------------------------
0001CE64                            
0001CE64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE64                            
0001CE64                            
0001CE64                            AddPoints:
0001CE64 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CE6A 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CE6E 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CE72 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CE74 223C 000F 423F             		move.l	#999999,d1
0001CE7A B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CE7C 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CE80 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CE82 2481                       		move.l	d1,(a2)
0001CE84                            
0001CE84                            loc_1C6AC:
0001CE84 2013                       		move.l	(a3),d0
0001CE86 B092                       		cmp.l	(a2),d0
0001CE88 6500 0000                  		bcs.w	locret_1C6B6
0001CE8C 2480                       		move.l	d0,(a2)
0001CE8E                            
0001CE8E                            locret_1C6B6:
0001CE8E 4E75                       		rts	
0001CE90                            ; End of function AddPoints
0001CE90                            
0001CE90                            ; ---------------------------------------------------------------------------
0001CE90                            ; Subroutine to	update the HUD
0001CE90                            ; ---------------------------------------------------------------------------
0001CE90                            
0001CE90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE90                            
0001CE90                            
0001CE90                            HudUpdate:
0001CE90 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CE94 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CE98 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CE9C 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CE9E 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CEA2 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CEA8 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CEAC 6100 0000                  		bsr.w	Hud_Score
0001CEB0                            
0001CEB0                            Hud_ChkRings:
0001CEB0 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CEB4 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CEB6 6A00                       		bpl.s	loc_1C6E4
0001CEB8 6100 0000                  		bsr.w	Hud_LoadZero
0001CEBC                            
0001CEBC                            loc_1C6E4:
0001CEBC 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CEC0 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CEC6 7200                       		moveq	#0,d1
0001CEC8 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CECC 6100 0000                  		bsr.w	Hud_Rings
0001CED0                            
0001CED0                            Hud_ChkTime:
0001CED0 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CED4 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CED6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CEDA 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CEDC 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CEE0 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CEE6 6700                       		beq.s	TimeOver	; if yes, branch
0001CEE8 5221                       		addq.b	#1,-(a1)
0001CEEA 0C11 003C                  		cmpi.b	#60,(a1)
0001CEEE 6500                       		bcs.s	Hud_ChkLives
0001CEF0 12BC 0000                  		move.b	#0,(a1)
0001CEF4 5221                       		addq.b	#1,-(a1)
0001CEF6 0C11 003C                  		cmpi.b	#60,(a1)
0001CEFA 6500                       		bcs.s	loc_1C734
0001CEFC 12BC 0000                  		move.b	#0,(a1)
0001CF00 5221                       		addq.b	#1,-(a1)
0001CF02 0C11 0009                  		cmpi.b	#9,(a1)
0001CF06 6500                       		bcs.s	loc_1C734
0001CF08 12BC 0009                  		move.b	#9,(a1)
0001CF0C                            
0001CF0C                            loc_1C734:
0001CF0C 203C 5E40 0003             		move.l	#$5E400003,d0
0001CF12 7200                       		moveq	#0,d1
0001CF14 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CF18 6100 0000                  		bsr.w	Hud_Mins
0001CF1C 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CF22 7200                       		moveq	#0,d1
0001CF24 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CF28 6100 0000                  		bsr.w	Hud_Secs
0001CF2C                            
0001CF2C                            Hud_ChkLives:
0001CF2C 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CF30 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CF32 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CF36 6100 0000                  		bsr.w	Hud_Lives
0001CF3A                            
0001CF3A                            Hud_ChkBonus:
0001CF3A 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CF3E 6700                       		beq.s	Hud_End		; if not, branch
0001CF40 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CF44 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CF4E 7200                       		moveq	#0,d1
0001CF50 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CF54 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CF58 7200                       		moveq	#0,d1
0001CF5A 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CF5E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CF62                            
0001CF62                            Hud_End:
0001CF62 4E75                       		rts	
0001CF64                            ; ===========================================================================
0001CF64                            
0001CF64                            TimeOver:				; XREF: Hud_ChkTime
0001CF64 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CF68 41F8 D000                  		lea	($FFFFD000).w,a0
0001CF6C 2448                       		movea.l	a0,a2
0001CF6E 6100 E908                  		bsr.w	KillSonic
0001CF72 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CF78 4E75                       		rts	
0001CF7A                            ; ===========================================================================
0001CF7A                            
0001CF7A                            HudDebug:				; XREF: HudUpdate
0001CF7A 6100 0000                  		bsr.w	HudDb_XY
0001CF7E 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CF82 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CF84 6A00                       		bpl.s	HudDb_Rings
0001CF86 6100 0000                  		bsr.w	Hud_LoadZero
0001CF8A                            
0001CF8A                            HudDb_Rings:
0001CF8A 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CF8E 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CF94 7200                       		moveq	#0,d1
0001CF96 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CF9A 6100 0000                  		bsr.w	Hud_Rings
0001CF9E                            
0001CF9E                            HudDb_ObjCount:
0001CF9E 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CFA4 7200                       		moveq	#0,d1
0001CFA6 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CFAA 6100 0000                  		bsr.w	Hud_Secs
0001CFAE 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CFB2 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CFB4 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CFB8 6100 0000                  		bsr.w	Hud_Lives
0001CFBC                            
0001CFBC                            HudDb_ChkBonus:
0001CFBC 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CFC0 6700                       		beq.s	HudDb_End	; if not, branch
0001CFC2 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CFC6 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CFD0 7200                       		moveq	#0,d1
0001CFD2 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CFD6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CFDA 7200                       		moveq	#0,d1
0001CFDC 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CFE0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CFE4                            
0001CFE4                            HudDb_End:
0001CFE4 4E75                       		rts	
0001CFE6                            ; End of function HudUpdate
0001CFE6                            
0001CFE6                            ; ---------------------------------------------------------------------------
0001CFE6                            ; Subroutine to	load "0" on the	HUD
0001CFE6                            ; ---------------------------------------------------------------------------
0001CFE6                            
0001CFE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFE6                            
0001CFE6                            
0001CFE6                            Hud_LoadZero:				; XREF: HudUpdate
0001CFE6 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CFF0 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CFF4 343C 0002                  		move.w	#2,d2
0001CFF8 6000                       		bra.s	loc_1C83E
0001CFFA                            ; End of function Hud_LoadZero
0001CFFA                            
0001CFFA                            ; ---------------------------------------------------------------------------
0001CFFA                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CFFA                            ; ---------------------------------------------------------------------------
0001CFFA                            
0001CFFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFFA                            
0001CFFA                            
0001CFFA                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CFFA 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D000 6100 0000                  		bsr.w	Hud_Lives
0001D004 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D00E 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D012 343C 000E                  		move.w	#$E,d2
0001D016                            
0001D016                            loc_1C83E:				; XREF: Hud_LoadZero
0001D016 43FA 0000                  		lea	Art_Hud(pc),a1
0001D01A                            
0001D01A                            loc_1C842:
0001D01A 323C 000F                  		move.w	#$F,d1
0001D01E 101A                       		move.b	(a2)+,d0
0001D020 6B00                       		bmi.s	loc_1C85E
0001D022 4880                       		ext.w	d0
0001D024 EB48                       		lsl.w	#5,d0
0001D026 47F1 0000                  		lea	(a1,d0.w),a3
0001D02A                            
0001D02A                            loc_1C852:
0001D02A 2C9B                       		move.l	(a3)+,(a6)
0001D02C 51C9 FFFC                  		dbf	d1,loc_1C852
0001D030                            
0001D030                            loc_1C858:
0001D030 51CA FFE8                  		dbf	d2,loc_1C842
0001D034                            
0001D034 4E75                       		rts	
0001D036                            ; ===========================================================================
0001D036                            
0001D036                            loc_1C85E:
0001D036 2CBC 0000 0000             		move.l	#0,(a6)
0001D03C 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D040                            
0001D040 60EE                       		bra.s	loc_1C858
0001D042                            ; End of function Hud_Base
0001D042                            
0001D042                            ; ===========================================================================
0001D042 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D04E FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D052                            ; ---------------------------------------------------------------------------
0001D052                            ; Subroutine to	load debug mode	numbers	patterns
0001D052                            ; ---------------------------------------------------------------------------
0001D052                            
0001D052                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D052                            
0001D052                            
0001D052                            HudDb_XY:				; XREF: HudDebug
0001D052 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D05C 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D060 4841                       		swap	d1
0001D062 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D066 6100                       		bsr.s	HudDb_XY2
0001D068 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D06C 4841                       		swap	d1
0001D06E 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D072                            ; End of function HudDb_XY
0001D072                            
0001D072                            
0001D072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D072                            
0001D072                            
0001D072                            HudDb_XY2:
0001D072 7C07                       		moveq	#7,d6
0001D074 43F9 0000 05F4             		lea	(Art_Text).l,a1
0001D07A                            
0001D07A                            HudDb_XYLoop:
0001D07A E959                       		rol.w	#4,d1
0001D07C 3401                       		move.w	d1,d2
0001D07E 0242 000F                  		andi.w	#$F,d2
0001D082 0C42 000A                  		cmpi.w	#$A,d2
0001D086 6500                       		bcs.s	loc_1C8B2
0001D088 5E42                       		addq.w	#7,d2
0001D08A                            
0001D08A                            loc_1C8B2:
0001D08A EB4A                       		lsl.w	#5,d2
0001D08C 47F1 2000                  		lea	(a1,d2.w),a3
0001D090 2C9B                       		move.l	(a3)+,(a6)
0001D092 2C9B                       		move.l	(a3)+,(a6)
0001D094 2C9B                       		move.l	(a3)+,(a6)
0001D096 2C9B                       		move.l	(a3)+,(a6)
0001D098 2C9B                       		move.l	(a3)+,(a6)
0001D09A 2C9B                       		move.l	(a3)+,(a6)
0001D09C 2C9B                       		move.l	(a3)+,(a6)
0001D09E 2C9B                       		move.l	(a3)+,(a6)
0001D0A0 4841                       		swap	d1
0001D0A2 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D0A6                            
0001D0A6 4E75                       		rts	
0001D0A8                            ; End of function HudDb_XY2
0001D0A8                            
0001D0A8                            ; ---------------------------------------------------------------------------
0001D0A8                            ; Subroutine to	load rings numbers patterns
0001D0A8                            ; ---------------------------------------------------------------------------
0001D0A8                            
0001D0A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0A8                            
0001D0A8                            
0001D0A8                            Hud_Rings:				; XREF: HudUpdate
0001D0A8 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D0AE 7C02                       		moveq	#2,d6
0001D0B0 6000                       		bra.s	Hud_LoadArt
0001D0B2                            ; End of function Hud_Rings
0001D0B2                            
0001D0B2                            ; ---------------------------------------------------------------------------
0001D0B2                            ; Subroutine to	load score numbers patterns
0001D0B2                            ; ---------------------------------------------------------------------------
0001D0B2                            
0001D0B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0B2                            
0001D0B2                            
0001D0B2                            Hud_Score:				; XREF: HudUpdate
0001D0B2 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D0B8 7C05                       		moveq	#5,d6
0001D0BA                            
0001D0BA                            Hud_LoadArt:
0001D0BA 7800                       		moveq	#0,d4
0001D0BC 43FA 0000                  		lea	Art_Hud(pc),a1
0001D0C0                            
0001D0C0                            Hud_ScoreLoop:
0001D0C0 7400                       		moveq	#0,d2
0001D0C2 261A                       		move.l	(a2)+,d3
0001D0C4                            
0001D0C4                            loc_1C8EC:
0001D0C4 9283                       		sub.l	d3,d1
0001D0C6 6500                       		bcs.s	loc_1C8F4
0001D0C8 5242                       		addq.w	#1,d2
0001D0CA 60F8                       		bra.s	loc_1C8EC
0001D0CC                            ; ===========================================================================
0001D0CC                            
0001D0CC                            loc_1C8F4:
0001D0CC D283                       		add.l	d3,d1
0001D0CE 4A42                       		tst.w	d2
0001D0D0 6700                       		beq.s	loc_1C8FE
0001D0D2 383C 0001                  		move.w	#1,d4
0001D0D6                            
0001D0D6                            loc_1C8FE:
0001D0D6 4A44                       		tst.w	d4
0001D0D8 6700                       		beq.s	loc_1C92C
0001D0DA ED4A                       		lsl.w	#6,d2
0001D0DC 2D40 0004                  		move.l	d0,4(a6)
0001D0E0 47F1 2000                  		lea	(a1,d2.w),a3
0001D0E4 2C9B                       		move.l	(a3)+,(a6)
0001D0E6 2C9B                       		move.l	(a3)+,(a6)
0001D0E8 2C9B                       		move.l	(a3)+,(a6)
0001D0EA 2C9B                       		move.l	(a3)+,(a6)
0001D0EC 2C9B                       		move.l	(a3)+,(a6)
0001D0EE 2C9B                       		move.l	(a3)+,(a6)
0001D0F0 2C9B                       		move.l	(a3)+,(a6)
0001D0F2 2C9B                       		move.l	(a3)+,(a6)
0001D0F4 2C9B                       		move.l	(a3)+,(a6)
0001D0F6 2C9B                       		move.l	(a3)+,(a6)
0001D0F8 2C9B                       		move.l	(a3)+,(a6)
0001D0FA 2C9B                       		move.l	(a3)+,(a6)
0001D0FC 2C9B                       		move.l	(a3)+,(a6)
0001D0FE 2C9B                       		move.l	(a3)+,(a6)
0001D100 2C9B                       		move.l	(a3)+,(a6)
0001D102 2C9B                       		move.l	(a3)+,(a6)
0001D104                            
0001D104                            loc_1C92C:
0001D104 0680 0040 0000             		addi.l	#$400000,d0
0001D10A 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D10E                            
0001D10E 4E75                       		rts	
0001D110                            ; End of function Hud_Score
0001D110                            
0001D110                            ; ---------------------------------------------------------------------------
0001D110                            ; Subroutine to	load countdown numbers on the continue screen
0001D110                            ; ---------------------------------------------------------------------------
0001D110                            
0001D110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D110                            
0001D110                            
0001D110                            ContScrCounter:				; XREF: ContinueScreen
0001D110 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D11A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D120 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D126 7C01                       		moveq	#1,d6
0001D128 7800                       		moveq	#0,d4
0001D12A 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D12E                            
0001D12E                            ContScr_Loop:
0001D12E 7400                       		moveq	#0,d2
0001D130 261A                       		move.l	(a2)+,d3
0001D132                            
0001D132                            loc_1C95A:
0001D132 9283                       		sub.l	d3,d1
0001D134 6500                       		bcs.s	loc_1C962
0001D136 5242                       		addq.w	#1,d2
0001D138 60F8                       		bra.s	loc_1C95A
0001D13A                            ; ===========================================================================
0001D13A                            
0001D13A                            loc_1C962:
0001D13A D283                       		add.l	d3,d1
0001D13C ED4A                       		lsl.w	#6,d2
0001D13E 47F1 2000                  		lea	(a1,d2.w),a3
0001D142 2C9B                       		move.l	(a3)+,(a6)
0001D144 2C9B                       		move.l	(a3)+,(a6)
0001D146 2C9B                       		move.l	(a3)+,(a6)
0001D148 2C9B                       		move.l	(a3)+,(a6)
0001D14A 2C9B                       		move.l	(a3)+,(a6)
0001D14C 2C9B                       		move.l	(a3)+,(a6)
0001D14E 2C9B                       		move.l	(a3)+,(a6)
0001D150 2C9B                       		move.l	(a3)+,(a6)
0001D152 2C9B                       		move.l	(a3)+,(a6)
0001D154 2C9B                       		move.l	(a3)+,(a6)
0001D156 2C9B                       		move.l	(a3)+,(a6)
0001D158 2C9B                       		move.l	(a3)+,(a6)
0001D15A 2C9B                       		move.l	(a3)+,(a6)
0001D15C 2C9B                       		move.l	(a3)+,(a6)
0001D15E 2C9B                       		move.l	(a3)+,(a6)
0001D160 2C9B                       		move.l	(a3)+,(a6)
0001D162 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D166                            
0001D166 4E75                       		rts	
0001D168                            ; End of function ContScrCounter
0001D168                            
0001D168                            ; ===========================================================================
0001D168                            ; ---------------------------------------------------------------------------
0001D168                            ; HUD counter sizes
0001D168                            ; ---------------------------------------------------------------------------
0001D168 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D16C 0000 2710                  Hud_10000:	dc.l 10000
0001D170 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D174 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D178 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D17C 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D180                            
0001D180                            ; ---------------------------------------------------------------------------
0001D180                            ; Subroutine to	load time numbers patterns
0001D180                            ; ---------------------------------------------------------------------------
0001D180                            
0001D180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D180                            
0001D180                            
0001D180                            Hud_Mins:				; XREF: Hud_ChkTime
0001D180 45F9 0001 D17C             		lea	(Hud_1).l,a2
0001D186 7C00                       		moveq	#0,d6
0001D188 6000                       		bra.s	loc_1C9BA
0001D18A                            ; End of function Hud_Mins
0001D18A                            
0001D18A                            
0001D18A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D18A                            
0001D18A                            
0001D18A                            Hud_Secs:				; XREF: Hud_ChkTime
0001D18A 45F9 0001 D178             		lea	(Hud_10).l,a2
0001D190 7C01                       		moveq	#1,d6
0001D192                            
0001D192                            loc_1C9BA:
0001D192 7800                       		moveq	#0,d4
0001D194 43FA 0000                  		lea	Art_Hud(pc),a1
0001D198                            
0001D198                            Hud_TimeLoop:
0001D198 7400                       		moveq	#0,d2
0001D19A 261A                       		move.l	(a2)+,d3
0001D19C                            
0001D19C                            loc_1C9C4:
0001D19C 9283                       		sub.l	d3,d1
0001D19E 6500                       		bcs.s	loc_1C9CC
0001D1A0 5242                       		addq.w	#1,d2
0001D1A2 60F8                       		bra.s	loc_1C9C4
0001D1A4                            ; ===========================================================================
0001D1A4                            
0001D1A4                            loc_1C9CC:
0001D1A4 D283                       		add.l	d3,d1
0001D1A6 4A42                       		tst.w	d2
0001D1A8 6700                       		beq.s	loc_1C9D6
0001D1AA 383C 0001                  		move.w	#1,d4
0001D1AE                            
0001D1AE                            loc_1C9D6:
0001D1AE ED4A                       		lsl.w	#6,d2
0001D1B0 2D40 0004                  		move.l	d0,4(a6)
0001D1B4 47F1 2000                  		lea	(a1,d2.w),a3
0001D1B8 2C9B                       		move.l	(a3)+,(a6)
0001D1BA 2C9B                       		move.l	(a3)+,(a6)
0001D1BC 2C9B                       		move.l	(a3)+,(a6)
0001D1BE 2C9B                       		move.l	(a3)+,(a6)
0001D1C0 2C9B                       		move.l	(a3)+,(a6)
0001D1C2 2C9B                       		move.l	(a3)+,(a6)
0001D1C4 2C9B                       		move.l	(a3)+,(a6)
0001D1C6 2C9B                       		move.l	(a3)+,(a6)
0001D1C8 2C9B                       		move.l	(a3)+,(a6)
0001D1CA 2C9B                       		move.l	(a3)+,(a6)
0001D1CC 2C9B                       		move.l	(a3)+,(a6)
0001D1CE 2C9B                       		move.l	(a3)+,(a6)
0001D1D0 2C9B                       		move.l	(a3)+,(a6)
0001D1D2 2C9B                       		move.l	(a3)+,(a6)
0001D1D4 2C9B                       		move.l	(a3)+,(a6)
0001D1D6 2C9B                       		move.l	(a3)+,(a6)
0001D1D8 0680 0040 0000             		addi.l	#$400000,d0
0001D1DE 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D1E2                            
0001D1E2 4E75                       		rts	
0001D1E4                            ; End of function Hud_Secs
0001D1E4                            
0001D1E4                            ; ---------------------------------------------------------------------------
0001D1E4                            ; Subroutine to	load time/ring bonus numbers patterns
0001D1E4                            ; ---------------------------------------------------------------------------
0001D1E4                            
0001D1E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1E4                            
0001D1E4                            
0001D1E4                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D1E4 45F9 0001 D170             		lea	(Hud_1000).l,a2
0001D1EA 7C03                       		moveq	#3,d6
0001D1EC 7800                       		moveq	#0,d4
0001D1EE 43FA 0000                  		lea	Art_Hud(pc),a1
0001D1F2                            
0001D1F2                            Hud_BonusLoop:
0001D1F2 7400                       		moveq	#0,d2
0001D1F4 261A                       		move.l	(a2)+,d3
0001D1F6                            
0001D1F6                            loc_1CA1E:
0001D1F6 9283                       		sub.l	d3,d1
0001D1F8 6500                       		bcs.s	loc_1CA26
0001D1FA 5242                       		addq.w	#1,d2
0001D1FC 60F8                       		bra.s	loc_1CA1E
0001D1FE                            ; ===========================================================================
0001D1FE                            
0001D1FE                            loc_1CA26:
0001D1FE D283                       		add.l	d3,d1
0001D200 4A42                       		tst.w	d2
0001D202 6700                       		beq.s	loc_1CA30
0001D204 383C 0001                  		move.w	#1,d4
0001D208                            
0001D208                            loc_1CA30:
0001D208 4A44                       		tst.w	d4
0001D20A 6700                       		beq.s	Hud_ClrBonus
0001D20C ED4A                       		lsl.w	#6,d2
0001D20E 47F1 2000                  		lea	(a1,d2.w),a3
0001D212 2C9B                       		move.l	(a3)+,(a6)
0001D214 2C9B                       		move.l	(a3)+,(a6)
0001D216 2C9B                       		move.l	(a3)+,(a6)
0001D218 2C9B                       		move.l	(a3)+,(a6)
0001D21A 2C9B                       		move.l	(a3)+,(a6)
0001D21C 2C9B                       		move.l	(a3)+,(a6)
0001D21E 2C9B                       		move.l	(a3)+,(a6)
0001D220 2C9B                       		move.l	(a3)+,(a6)
0001D222 2C9B                       		move.l	(a3)+,(a6)
0001D224 2C9B                       		move.l	(a3)+,(a6)
0001D226 2C9B                       		move.l	(a3)+,(a6)
0001D228 2C9B                       		move.l	(a3)+,(a6)
0001D22A 2C9B                       		move.l	(a3)+,(a6)
0001D22C 2C9B                       		move.l	(a3)+,(a6)
0001D22E 2C9B                       		move.l	(a3)+,(a6)
0001D230 2C9B                       		move.l	(a3)+,(a6)
0001D232                            
0001D232                            loc_1CA5A:
0001D232 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D236                            
0001D236 4E75                       		rts	
0001D238                            ; ===========================================================================
0001D238                            
0001D238                            Hud_ClrBonus:
0001D238 7A0F                       		moveq	#$F,d5
0001D23A                            
0001D23A                            Hud_ClrBonusLoop:
0001D23A 2CBC 0000 0000             		move.l	#0,(a6)
0001D240 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D244                            
0001D244 60EC                       		bra.s	loc_1CA5A
0001D246                            ; End of function Hud_TimeRingBonus
0001D246                            
0001D246                            ; ---------------------------------------------------------------------------
0001D246                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D246                            ; ---------------------------------------------------------------------------
0001D246                            
0001D246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D246                            
0001D246                            
0001D246                            Hud_Lives:				; XREF: Hud_ChkLives
0001D246 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D24C 7200                       		moveq	#0,d1
0001D24E 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D252 45F9 0001 D178             		lea	(Hud_10).l,a2
0001D258 7C01                       		moveq	#1,d6
0001D25A 7800                       		moveq	#0,d4
0001D25C 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D260                            
0001D260                            Hud_LivesLoop:
0001D260 2D40 0004                  		move.l	d0,4(a6)
0001D264 7400                       		moveq	#0,d2
0001D266 261A                       		move.l	(a2)+,d3
0001D268                            
0001D268                            loc_1CA90:
0001D268 9283                       		sub.l	d3,d1
0001D26A 6500                       		bcs.s	loc_1CA98
0001D26C 5242                       		addq.w	#1,d2
0001D26E 60F8                       		bra.s	loc_1CA90
0001D270                            ; ===========================================================================
0001D270                            
0001D270                            loc_1CA98:
0001D270 D283                       		add.l	d3,d1
0001D272 4A42                       		tst.w	d2
0001D274 6700                       		beq.s	loc_1CAA2
0001D276 383C 0001                  		move.w	#1,d4
0001D27A                            
0001D27A                            loc_1CAA2:
0001D27A 4A44                       		tst.w	d4
0001D27C 6700                       		beq.s	Hud_ClrLives
0001D27E                            
0001D27E                            loc_1CAA6:
0001D27E EB4A                       		lsl.w	#5,d2
0001D280 47F1 2000                  		lea	(a1,d2.w),a3
0001D284 2C9B                       		move.l	(a3)+,(a6)
0001D286 2C9B                       		move.l	(a3)+,(a6)
0001D288 2C9B                       		move.l	(a3)+,(a6)
0001D28A 2C9B                       		move.l	(a3)+,(a6)
0001D28C 2C9B                       		move.l	(a3)+,(a6)
0001D28E 2C9B                       		move.l	(a3)+,(a6)
0001D290 2C9B                       		move.l	(a3)+,(a6)
0001D292 2C9B                       		move.l	(a3)+,(a6)
0001D294                            
0001D294                            loc_1CABC:
0001D294 0680 0040 0000             		addi.l	#$400000,d0
0001D29A 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D29E                            
0001D29E 4E75                       		rts	
0001D2A0                            ; ===========================================================================
0001D2A0                            
0001D2A0                            Hud_ClrLives:
0001D2A0 4A46                       		tst.w	d6
0001D2A2 67DA                       		beq.s	loc_1CAA6
0001D2A4 7A07                       		moveq	#7,d5
0001D2A6                            
0001D2A6                            Hud_ClrLivesLoop:
0001D2A6 2CBC 0000 0000             		move.l	#0,(a6)
0001D2AC 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D2B0 60E2                       		bra.s	loc_1CABC
0001D2B2                            ; End of function Hud_Lives
0001D2B2                            
0001D2B2                            ; ===========================================================================
0001D2B2                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D5B2                            		even
0001D5B2                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D6F2                            		even
0001D6F2                            ; ===========================================================================
0001D6F2                            ; ---------------------------------------------------------------------------
0001D6F2                            ; When debug mode is currently in use
0001D6F2                            ; ---------------------------------------------------------------------------
0001D6F2                            
0001D6F2                            DebugMode:				; XREF: Obj01; Obj09
0001D6F2 7000                       		moveq	#0,d0
0001D6F4 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D6F8 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D6FC 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D700                            ; ===========================================================================
0001D700 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D702 0000                       		dc.w Debug_Skip-Debug_Index
0001D704                            ; ===========================================================================
0001D704                            
0001D704                            Debug_Main:				; XREF: Debug_Index
0001D704 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D708 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D70E 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D714 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D71A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D720 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D726 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D72C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D732 117C 0000 001A             		move.b	#0,$1A(a0)
0001D738 117C 0000 001C             		move.b	#0,$1C(a0)
0001D73E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D744 6600                       		bne.s	Debug_Zone	; if not, branch
0001D746 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D74C 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D752 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D754 6000                       		bra.s	Debug_UseList
0001D756                            ; ===========================================================================
0001D756                            
0001D756                            Debug_Zone:
0001D756 7000                       		moveq	#0,d0
0001D758 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D75C                            
0001D75C                            Debug_UseList:
0001D75C 45F9 0000 0000             		lea	(DebugList).l,a2
0001D762 D040                       		add.w	d0,d0
0001D764 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D768 3C1A                       		move.w	(a2)+,d6
0001D76A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D76E 6200                       		bhi.s	loc_1CF9E
0001D770 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D776                            
0001D776                            loc_1CF9E:
0001D776 6100 0000                  		bsr.w	Debug_ShowItem
0001D77A 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D780 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D786                            
0001D786                            Debug_Skip:				; XREF: Debug_Index
0001D786 7006                       		moveq	#6,d0
0001D788 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D78E 6700                       		beq.s	loc_1CFBE
0001D790 7000                       		moveq	#0,d0
0001D792 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D796                            
0001D796                            loc_1CFBE:
0001D796 45F9 0000 0000             		lea	(DebugList).l,a2
0001D79C D040                       		add.w	d0,d0
0001D79E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D7A2 3C1A                       		move.w	(a2)+,d6
0001D7A4 6100 0000                  		bsr.w	Debug_Control
0001D7A8 4EF9 0000 DC84             		jmp	DisplaySprite
0001D7AE                            
0001D7AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D7AE                            
0001D7AE                            
0001D7AE                            Debug_Control:
0001D7AE 7800                       		moveq	#0,d4
0001D7B0 323C 0001                  		move.w	#1,d1
0001D7B4 1838 F605                  		move.b	($FFFFF605).w,d4
0001D7B8 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D7BC 6600                       		bne.s	loc_1D018	; if yes, branch
0001D7BE 1038 F604                  		move.b	($FFFFF604).w,d0
0001D7C2 0240 000F                  		andi.w	#$F,d0
0001D7C6 6600                       		bne.s	loc_1D000
0001D7C8 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D7CE 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D7D4 6000 0000                  		bra.w	Debug_BackItem
0001D7D8                            ; ===========================================================================
0001D7D8                            
0001D7D8                            loc_1D000:
0001D7D8 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D7DC 6600                       		bne.s	loc_1D01C
0001D7DE 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D7E4 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D7E8 6600                       		bne.s	loc_1D018
0001D7EA 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D7F0                            
0001D7F0                            loc_1D018:
0001D7F0 1838 F604                  		move.b	($FFFFF604).w,d4
0001D7F4                            
0001D7F4                            loc_1D01C:
0001D7F4 7200                       		moveq	#0,d1
0001D7F6 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D7FA 5241                       		addq.w	#1,d1
0001D7FC 4841                       		swap	d1
0001D7FE E881                       		asr.l	#4,d1
0001D800 2428 000C                  		move.l	$C(a0),d2
0001D804 2628 0008                  		move.l	8(a0),d3
0001D808 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D80C 6700                       		beq.s	loc_1D03C	; if not, branch
0001D80E 9481                       		sub.l	d1,d2
0001D810 6400                       		bcc.s	loc_1D03C
0001D812 7400                       		moveq	#0,d2
0001D814                            
0001D814                            loc_1D03C:
0001D814 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D818 6700                       		beq.s	loc_1D052	; if not, branch
0001D81A D481                       		add.l	d1,d2
0001D81C 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D822 6500                       		bcs.s	loc_1D052
0001D824 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D82A                            
0001D82A                            loc_1D052:
0001D82A 0804 0002                  		btst	#2,d4
0001D82E 6700                       		beq.s	loc_1D05E
0001D830 9681                       		sub.l	d1,d3
0001D832 6400                       		bcc.s	loc_1D05E
0001D834 7600                       		moveq	#0,d3
0001D836                            
0001D836                            loc_1D05E:
0001D836 0804 0003                  		btst	#3,d4
0001D83A 6700                       		beq.s	loc_1D066
0001D83C D681                       		add.l	d1,d3
0001D83E                            
0001D83E                            loc_1D066:
0001D83E 2142 000C                  		move.l	d2,$C(a0)
0001D842 2143 0008                  		move.l	d3,8(a0)
0001D846                            
0001D846                            Debug_BackItem:
0001D846 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D84C 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D84E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D854 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D856 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D85A 6400                       		bcc.s	Debug_NoLoop
0001D85C DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D860 6000                       		bra.s	Debug_NoLoop
0001D862                            ; ===========================================================================
0001D862                            
0001D862                            Debug_NextItem:
0001D862 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D868 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D86A 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D86E BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D872 6200                       		bhi.s	Debug_NoLoop
0001D874 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D87A                            
0001D87A                            Debug_NoLoop:
0001D87A 6000 0000                  		bra.w	Debug_ShowItem
0001D87E                            ; ===========================================================================
0001D87E                            
0001D87E                            Debug_MakeItem:
0001D87E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D884 6700                       		beq.s	Debug_Exit	; if not, branch
0001D886 4EB9 0000 E10A             		jsr	SingleObjLoad
0001D88C 6600                       		bne.s	Debug_Exit
0001D88E 3368 0008 0008             		move.w	8(a0),8(a1)
0001D894 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D89A 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D89E 1368 0001 0001             		move.b	1(a0),1(a1)
0001D8A4 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D8AA 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D8B0 7000                       		moveq	#0,d0
0001D8B2 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D8B6 E748                       		lsl.w	#3,d0
0001D8B8 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D8BE 4E75                       		rts	
0001D8C0                            ; ===========================================================================
0001D8C0                            
0001D8C0                            Debug_Exit:
0001D8C0 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D8C6 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D8C8 7000                       		moveq	#0,d0
0001D8CA 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D8CE 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D8D6 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D8DC 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D8E0 3140 000A                  		move.w	d0,$A(a0)
0001D8E4 3140 000E                  		move.w	d0,$E(a0)
0001D8E8 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D8EE 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D8F4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D8FA 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D8FC 4278 F780                  		clr.w	($FFFFF780).w
0001D900 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D906 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D90E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D914 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D91A 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D920 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D926                            
0001D926                            Debug_DoNothing:
0001D926 4E75                       		rts	
0001D928                            ; End of function Debug_Control
0001D928                            
0001D928                            
0001D928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D928                            
0001D928                            
0001D928                            Debug_ShowItem:				; XREF: Debug_Main
0001D928 7000                       		moveq	#0,d0
0001D92A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D92E E748                       		lsl.w	#3,d0
0001D930 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D936 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D93C 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D942 4E75                       		rts	
0001D944                            ; End of function Debug_ShowItem
0001D944                            
0001D944                            ; ===========================================================================
0001D944                            ; ---------------------------------------------------------------------------
0001D944                            ; Debug	list pointers
0001D944                            ; ---------------------------------------------------------------------------
0001D944                            DebugList:
0001D944                            	include "_inc\Debug list pointers.asm"
0001D944                            ; ---------------------------------------------------------------------------
0001D944                            ; Debug	list pointers
0001D944                            ; ---------------------------------------------------------------------------
0001D944 0000                       	dc.w Debug_GHZ-DebugList
0001D946 0000                       	dc.w Debug_LZ-DebugList
0001D948 0000                       	dc.w Debug_MZ-DebugList
0001D94A 0000                       	dc.w Debug_SLZ-DebugList
0001D94C 0000                       	dc.w Debug_SYZ-DebugList
0001D94E 0000                       	dc.w Debug_SBZ-DebugList
0001D950 0000                       	dc.w Debug_Ending-DebugList
0001D950 0000                       	dc.w Debug_Ending-DebugList
0001D952                            
0001D952                            ; ---------------------------------------------------------------------------
0001D952                            ; Debug	list - Green Hill
0001D952                            ; ---------------------------------------------------------------------------
0001D952                            Debug_GHZ:
0001D952                            	include "_inc\Debug list - GHZ.asm"
0001D952                            ; ---------------------------------------------------------------------------
0001D952                            ; Debug	list - Green Hill
0001D952                            ; ---------------------------------------------------------------------------
0001D952 0010                       	dc.w $10			; number of items in list
0001D954 2500 A4E2                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D958 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D95C 2600 AAE8                  	dc.l Map_obj26+$26000000
0001D960 0000 0680                  	dc.b 0,	0, 6, $80
0001D964 1F00 9CDA                  	dc.l Map_obj1F+$1F000000
0001D968 0000 0400                  	dc.b 0,	0, 4, 0
0001D96C 2200 9F96                  	dc.l Map_obj22+$22000000
0001D970 0000 0444                  	dc.b 0,	0, 4, $44
0001D974 2B00 B15C                  	dc.l Map_obj2B+$2B000000
0001D978 0000 047B                  	dc.b 0,	0, 4, $7B
0001D97C 3600 D66C                  	dc.l Map_obj36+$36000000
0001D980 0000 051B                  	dc.b 0,	0, 5, $1B
0001D984 1800 8688                  	dc.l Map_obj18+$18000000
0001D988 0000 4000                  	dc.b 0,	0, $40,	0
0001D98C 3B00 D792                  	dc.l Map_obj3B+$3B000000
0001D990 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D994 4000 FE1E                  	dc.l Map_obj40+$40000000
0001D998 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D99C 4100 E398                  	dc.l Map_obj41+$41000000
0001D9A0 0000 0523                  	dc.b 0,	0, 5, $23
0001D9A4 4200 E5BE                  	dc.l Map_obj42+$42000000
0001D9A8 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D9AC 4400 E8CC                  	dc.l Map_obj44+$44000000
0001D9B0 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D9B4 1900 86F6                  	dc.l Map_obj48+$19000000
0001D9B8 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D9BC 7901 785C                  	dc.l Map_obj79+$79000000
0001D9C0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D9C4 4B00 A522                  	dc.l Map_obj4B+$4B000000
0001D9C8 0000 2400                  	dc.b 0,	0, $24,	0
0001D9CC 7D01 79AC                  	dc.l Map_obj7D+$7D000000
0001D9D0 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D9D4                            	even
0001D9D4                            	even
0001D9D4                            
0001D9D4                            ; ---------------------------------------------------------------------------
0001D9D4                            ; Debug	list - Labyrinth
0001D9D4                            ; ---------------------------------------------------------------------------
0001D9D4                            Debug_LZ:
0001D9D4                            	include "_inc\Debug list - LZ.asm"
0001D9D4                            ; ---------------------------------------------------------------------------
0001D9D4                            ; Debug	list - Labyrinth
0001D9D4                            ; ---------------------------------------------------------------------------
0001D9D4 0019                       	dc.w $19
0001D9D6 2500 A4E2                  	dc.l Map_obj25+$25000000
0001D9DA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D9DE 2600 AAE8                  	dc.l Map_obj26+$26000000
0001D9E2 0000 0680                  	dc.b 0,	0, 6, $80
0001D9E6 4100 E398                  	dc.l Map_obj41+$41000000
0001D9EA 0000 0523                  	dc.b 0,	0, 5, $23
0001D9EE 2C00 B20C                  	dc.l Map_obj2C+$2C000000
0001D9F2 0800 2486                  	dc.b 8,	0, $24,	$86
0001D9F6 2D00 B400                  	dc.l Map_obj2D+$2D000000
0001D9FA 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D9FE 1601 25F2                  	dc.l Map_obj16+$16000000
0001DA02 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DA06 1601 25F2                  	dc.l Map_obj16+$16000000
0001DA0A 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DA0E 3300 C8B8                  	dc.l Map_obj33+$33000000
0001DA12 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DA16 3200 C478                  	dc.l Map_obj32+$32000000
0001DA1A 0000 0513                  	dc.b 0,	0, 5, $13
0001DA1E 3600 D66C                  	dc.l Map_obj36+$36000000
0001DA22 0000 051B                  	dc.b 0,	0, 5, $1B
0001DA26 5201 0714                  	dc.l Map_obj52a+$52000000
0001DA2A 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DA2E 6101 281A                  	dc.l Map_obj61+$61000000
0001DA32 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DA36 6101 281A                  	dc.l Map_obj61+$61000000
0001DA3A 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DA3E 6101 281A                  	dc.l Map_obj61+$61000000
0001DA42 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DA46 6201 296E                  	dc.l Map_obj62+$62000000
0001DA4A 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DA4E 6101 281A                  	dc.l Map_obj61+$61000000
0001DA52 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DA56 6101 281A                  	dc.l Map_obj61+$61000000
0001DA5A 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DA5E 6301 2CD0                  	dc.l Map_obj63+$63000000
0001DA62 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DA66 6001 253C                  	dc.l Map_obj60+$60000000
0001DA6A 0000 0467                  	dc.b 0,	0, 4, $67
0001DA6E 6401 3016                  	dc.l Map_obj64+$64000000
0001DA72 8413 8348                  	dc.b $84, $13, $83, $48
0001DA76 6501 319E                  	dc.l Map_obj65+$65000000
0001DA7A 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DA7E 6501 319E                  	dc.l Map_obj65+$65000000
0001DA82 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DA86 0B01 198C                  	dc.l Map_obj0B+$B000000
0001DA8A 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DA8E 0C01 1A5C                  	dc.l Map_obj0C+$C000000
0001DA92 0200 4328                  	dc.b 2,	0, $43,	$28
0001DA96 7901 785C                  	dc.l Map_obj79+$79000000
0001DA9A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA9E                            	even
0001DA9E                            	even
0001DA9E                            
0001DA9E                            ; ---------------------------------------------------------------------------
0001DA9E                            ; Debug	list - Marble
0001DA9E                            ; ---------------------------------------------------------------------------
0001DA9E                            Debug_MZ:
0001DA9E                            	include "_inc\Debug list - MZ.asm"
0001DA9E                            ; ---------------------------------------------------------------------------
0001DA9E                            ; Debug	list - Marble
0001DA9E                            ; ---------------------------------------------------------------------------
0001DA9E 0012                       	dc.w $12
0001DAA0 2500 A4E2                  	dc.l Map_obj25+$25000000
0001DAA4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DAA8 2600 AAE8                  	dc.l Map_obj26+$26000000
0001DAAC 0000 0680                  	dc.b 0,	0, 6, $80
0001DAB0 2200 9F96                  	dc.l Map_obj22+$22000000
0001DAB4 0000 0444                  	dc.b 0,	0, 4, $44
0001DAB8 3600 D66C                  	dc.l Map_obj36+$36000000
0001DABC 0000 051B                  	dc.b 0,	0, 5, $1B
0001DAC0 4100 E398                  	dc.l Map_obj41+$41000000
0001DAC4 0000 0523                  	dc.b 0,	0, 5, $23
0001DAC8 1300 B942                  	dc.l Map_obj14+$13000000
0001DACC 0000 0345                  	dc.b 0,	0, 3, $45
0001DAD0 4600 EF7E                  	dc.l Map_obj46+$46000000
0001DAD4 0000 4000                  	dc.b 0,	0, $40,	0
0001DAD8 4C00 F8CA                  	dc.l Map_obj4C+$4C000000
0001DADC 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DAE0 4E00 FBAE                  	dc.l Map_obj4E+$4E000000
0001DAE4 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DAE8 3300 C8B8                  	dc.l Map_obj33+$33000000
0001DAEC 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DAF0 5000 FFAC                  	dc.l Map_obj50+$50000000
0001DAF4 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DAF8 5101 0448                  	dc.l Map_obj51+$51000000
0001DAFC 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DB00 5201 06BE                  	dc.l Map_obj52+$52000000
0001DB04 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DB08 5300 8C8E                  	dc.l Map_obj53+$53000000
0001DB0C 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DB10 5400 F890                  	dc.l Map_obj54+$54000000
0001DB14 0000 8680                  	dc.b 0,	0, $86,	$80
0001DB18 5501 08B2                  	dc.l Map_obj55+$55000000
0001DB1C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DB20 7801 74D6                  	dc.l Map_obj78+$78000000
0001DB24 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DB28 7901 785C                  	dc.l Map_obj79+$79000000
0001DB2C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB30                            	even
0001DB30                            	even
0001DB30                            
0001DB30                            ; ---------------------------------------------------------------------------
0001DB30                            ; Debug	list - Star Light
0001DB30                            ; ---------------------------------------------------------------------------
0001DB30                            Debug_SLZ:
0001DB30                            	include "_inc\Debug list - SLZ.asm"
0001DB30                            ; ---------------------------------------------------------------------------
0001DB30                            ; Debug	list - Star Light
0001DB30                            ; ---------------------------------------------------------------------------
0001DB30 000F                       	dc.w $F
0001DB32 2500 A4E2                  	dc.l Map_obj25+$25000000
0001DB36 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB3A 2600 AAE8                  	dc.l Map_obj26+$26000000
0001DB3E 0000 0680                  	dc.b 0,	0, 6, $80
0001DB42 5901 13B4                  	dc.l Map_obj59+$59000000
0001DB46 0000 4000                  	dc.b 0,	0, $40,	0
0001DB4A 5300 8C8E                  	dc.l Map_obj53+$53000000
0001DB4E 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DB52 1800 86E6                  	dc.l Map_obj18b+$18000000
0001DB56 0000 4000                  	dc.b 0,	0, $40,	0
0001DB5A 5A01 14EE                  	dc.l Map_obj5A+$5A000000
0001DB5E 0000 4000                  	dc.b 0,	0, $40,	0
0001DB62 5B01 16A6                  	dc.l Map_obj5B+$5B000000
0001DB66 0000 4000                  	dc.b 0,	0, $40,	0
0001DB6A 5D01 1C76                  	dc.l Map_obj5D+$5D000000
0001DB6E 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DB72 5E01 2008                  	dc.l Map_obj5E+$5E000000
0001DB76 0000 0374                  	dc.b 0,	0, 3, $74
0001DB7A 4100 E398                  	dc.l Map_obj41+$41000000
0001DB7E 0000 0523                  	dc.b 0,	0, 5, $23
0001DB82 1300 B942                  	dc.l Map_obj14+$13000000
0001DB86 0000 0480                  	dc.b 0,	0, 4, $80
0001DB8A 1C00 8D9E                  	dc.l Map_obj1C+$1C000000
0001DB8E 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DB92 5F01 2286                  	dc.l Map_obj5F+$5F000000
0001DB96 0000 0400                  	dc.b 0,	0, 4, 0
0001DB9A 6001 253C                  	dc.l Map_obj60+$60000000
0001DB9E 0000 2429                  	dc.b 0,	0, $24,	$29
0001DBA2 7901 785C                  	dc.l Map_obj79+$79000000
0001DBA6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DBAA                            	even
0001DBAA                            	even
0001DBAA                            
0001DBAA                            ; ---------------------------------------------------------------------------
0001DBAA                            ; Debug	list - Spring Yard
0001DBAA                            ; ---------------------------------------------------------------------------
0001DBAA                            Debug_SYZ:
0001DBAA                            	include "_inc\Debug list - SYZ.asm"
0001DBAA                            ; ---------------------------------------------------------------------------
0001DBAA                            ; Debug	list - Spring Yard
0001DBAA                            ; ---------------------------------------------------------------------------
0001DBAA 000F                       	dc.w $F
0001DBAC 2500 A4E2                  	dc.l Map_obj25+$25000000
0001DBB0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DBB4 2600 AAE8                  	dc.l Map_obj26+$26000000
0001DBB8 0000 0680                  	dc.b 0,	0, 6, $80
0001DBBC 3600 D66C                  	dc.l Map_obj36+$36000000
0001DBC0 0000 051B                  	dc.b 0,	0, 5, $1B
0001DBC4 4100 E398                  	dc.l Map_obj41+$41000000
0001DBC8 0000 0523                  	dc.b 0,	0, 5, $23
0001DBCC 4300 E81E                  	dc.l Map_obj43+$43000000
0001DBD0 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DBD4 1200 EFFC                  	dc.l Map_obj12+$12000000
0001DBD8 0000 0000                  	dc.b 0,	0, 0, 0
0001DBDC 4700 F178                  	dc.l Map_obj47+$47000000
0001DBE0 0000 0380                  	dc.b 0,	0, 3, $80
0001DBE4 1F00 9CDA                  	dc.l Map_obj1F+$1F000000
0001DBE8 0000 0400                  	dc.b 0,	0, 4, 0
0001DBEC 2200 9F96                  	dc.l Map_obj22+$22000000
0001DBF0 0000 0444                  	dc.b 0,	0, 4, $44
0001DBF4 5000 FFAC                  	dc.l Map_obj50+$50000000
0001DBF8 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DBFC 1800 86D4                  	dc.l Map_obj18a+$18000000
0001DC00 0000 4000                  	dc.b 0,	0, $40,	0
0001DC04 5601 0D74                  	dc.l Map_obj56+$56000000
0001DC08 0000 4000                  	dc.b 0,	0, $40,	0
0001DC0C 3200 C478                  	dc.l Map_obj32+$32000000
0001DC10 0000 0513                  	dc.b 0,	0, 5, $13
0001DC14 7801 74D6                  	dc.l Map_obj78+$78000000
0001DC18 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DC1C 7901 785C                  	dc.l Map_obj79+$79000000
0001DC20 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC24                            	even
0001DC24                            	even
0001DC24                            
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24                            ; Debug	list - Scrap Brain
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24                            Debug_SBZ:
0001DC24                            	include "_inc\Debug list - SBZ.asm"
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24                            ; Debug	list - Scrap Brain
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24 001D                       	dc.w $1D
0001DC26 2500 A4E2                  	dc.l Map_obj25+$25000000
0001DC2A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC2E 2600 AAE8                  	dc.l Map_obj26+$26000000
0001DC32 0000 0680                  	dc.b 0,	0, 6, $80
0001DC36 5F01 2286                  	dc.l Map_obj5F+$5F000000
0001DC3A 0000 0400                  	dc.b 0,	0, 4, 0
0001DC3E 6001 253C                  	dc.l Map_obj60+$60000000
0001DC42 0000 0429                  	dc.b 0,	0, 4, $29
0001DC46 7801 74D6                  	dc.l Map_obj78+$78000000
0001DC4A 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DC4E 1501 1110                  	dc.l Map_obj15b+$15000000
0001DC52 0702 4391                  	dc.b 7,	2, $43,	$91
0001DC56 6701 5DEA                  	dc.l Map_obj67+$67000000
0001DC5A E000 C344                  	dc.b $E0, 0, $C3, $44
0001DC5E 5201 06BE                  	dc.l Map_obj52+$52000000
0001DC62 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DC66 3200 C478                  	dc.l Map_obj32+$32000000
0001DC6A 0000 0513                  	dc.b 0,	0, 5, $13
0001DC6E 6901 6044                  	dc.l Map_obj69+$69000000
0001DC72 0300 4492                  	dc.b 3,	0, $44,	$92
0001DC76 6901 609E                  	dc.l Map_obj69a+$69000000
0001DC7A 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DC7E 6A01 62FC                  	dc.l Map_obj6A+$6A000000
0001DC82 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DC86 5300 8C8E                  	dc.l Map_obj53+$53000000
0001DC8A 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DC8E 5201 06BE                  	dc.l Map_obj52+$52000000
0001DC92 3903 4460                  	dc.b $39, 3, $44, $60
0001DC96 6B01 66CC                  	dc.l Map_obj6B+$6B000000
0001DC9A 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DC9E 2A00 8F34                  	dc.l Map_obj2A+$2A000000
0001DCA2 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DCA6 6B01 66CC                  	dc.l Map_obj6B+$6B000000
0001DCAA 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DCAE 6A01 62FC                  	dc.l Map_obj6A+$6A000000
0001DCB2 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DCB6 6B01 66CC                  	dc.l Map_obj6B+$6B000000
0001DCBA 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DCBE 6A01 62FC                  	dc.l Map_obj6A+$6A000000
0001DCC2 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DCC6 6B01 66CC                  	dc.l Map_obj6B+$6B000000
0001DCCA 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DCCE 6C01 688E                  	dc.l Map_obj6C+$6C000000
0001DCD2 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DCD6 6D00 EC6E                  	dc.l Map_obj6D+$6D000000
0001DCDA 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DCDE 6D00 EC6E                  	dc.l Map_obj6D+$6D000000
0001DCE2 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DCE6 6E01 6944                  	dc.l Map_obj6E+$6E000000
0001DCEA 0400 047E                  	dc.b 4,	0, 4, $7E
0001DCEE 7001 6D9A                  	dc.l Map_obj70+$70000000
0001DCF2 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DCF6 7101 1B1C                  	dc.l Map_obj71+$71000000
0001DCFA 1100 8680                  	dc.b $11, 0, $86, $80
0001DCFE 1E00 93F2                  	dc.l Map_obj1E+$1E000000
0001DD02 0400 2302                  	dc.b 4,	0, $23,	2
0001DD06 7901 785C                  	dc.l Map_obj79+$79000000
0001DD0A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DD0E                            	even
0001DD0E                            	even
0001DD0E                            
0001DD0E                            ; ---------------------------------------------------------------------------
0001DD0E                            ; Debug	list - ending sequence / special stage
0001DD0E                            ; ---------------------------------------------------------------------------
0001DD0E                            Debug_Ending:
0001DD0E                            	include "_inc\Debug list - Ending and SS.asm"
0001DD0E                            ; ---------------------------------------------------------------------------
0001DD0E                            ; Debug	list - ending sequence / special stage
0001DD0E                            ; ---------------------------------------------------------------------------
0001DD0E 000D                       	dc.w $D
0001DD10 2500 A4E2                  	dc.l Map_obj25+$25000000
0001DD14 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DD18 4700 F178                  	dc.l Map_obj47+$47000000
0001DD1C 0000 0380                  	dc.b 0,	0, 3, $80
0001DD20 2800 9A0C                  	dc.l Map_obj28a+$28000000
0001DD24 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DD28 2800 9A0C                  	dc.l Map_obj28a+$28000000
0001DD2C 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DD30 2800 9A0C                  	dc.l Map_obj28a+$28000000
0001DD34 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DD38 2800 99F4                  	dc.l Map_obj28+$28000000
0001DD3C 0D00 0553                  	dc.b $D, 0, 5, $53
0001DD40 2800 99F4                  	dc.l Map_obj28+$28000000
0001DD44 0E00 0553                  	dc.b $E, 0, 5, $53
0001DD48 2800 99F4                  	dc.l Map_obj28+$28000000
0001DD4C 0F00 0573                  	dc.b $F, 0, 5, $73
0001DD50 2800 99F4                  	dc.l Map_obj28+$28000000
0001DD54 1000 0573                  	dc.b $10, 0, 5,	$73
0001DD58 2800 9A0C                  	dc.l Map_obj28a+$28000000
0001DD5C 1100 0585                  	dc.b $11, 0, 5,	$85
0001DD60 2800 9A24                  	dc.l Map_obj28b+$28000000
0001DD64 1200 0593                  	dc.b $12, 0, 5,	$93
0001DD68 2800 9A0C                  	dc.l Map_obj28a+$28000000
0001DD6C 1300 0565                  	dc.b $13, 0, 5,	$65
0001DD70 2800 9A24                  	dc.l Map_obj28b+$28000000
0001DD74 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DD78                            	even
0001DD78                            	even
0001DD78                            
0001DD78                            ; ---------------------------------------------------------------------------
0001DD78                            ; Main level load blocks
0001DD78                            ; ---------------------------------------------------------------------------
0001DD78                            MainLoadBlocks:
0001DD78                            	include "_inc\Main level load blocks.asm"
0001DD78                            ; ---------------------------------------------------------------------------
0001DD78                            ; Main level load blocks
0001DD78                            ;
0001DD78                            ; ===FORMAT===
0001DD78                            ; level	patterns + (1st	PLC num	* 10^6)
0001DD78                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DD78                            ; 256x256 mappings
0001DD78                            ; blank, music (unused), pal index (unused), pal index
0001DD78                            ; ---------------------------------------------------------------------------
0001DD78 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DD7C 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DD80 0000 0000                  	dc.l Blk256_GHZ
0001DD84 0081 0404                  	dc.b 0,	$81, 4,	4
0001DD88 0000 0000                  	dc.l Nem_LZ+$6000000
0001DD8C 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DD90 0000 0000                  	dc.l Blk256_LZ
0001DD94 0082 0505                  	dc.b 0,	$82, 5,	5
0001DD98 0000 0000                  	dc.l Nem_MZ+$8000000
0001DD9C 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DDA0 0000 0000                  	dc.l Blk256_MZ
0001DDA4 0083 0606                  	dc.b 0,	$83, 6,	6
0001DDA8 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DDAC 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DDB0 0000 0000                  	dc.l Blk256_SLZ
0001DDB4 0084 0707                  	dc.b 0,	$84, 7,	7
0001DDB8 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DDBC 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DDC0 0000 0000                  	dc.l Blk256_SYZ
0001DDC4 0085 0808                  	dc.b 0,	$85, 8,	8
0001DDC8 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DDCC 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DDD0 0000 0000                  	dc.l Blk256_SBZ
0001DDD4 0086 0909                  	dc.b 0,	$86, 9,	9
0001DDD8 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DDDC 0000 0000                  	dc.l Blk16_GHZ
0001DDE0 0000 0000                  	dc.l Blk256_GHZ
0001DDE4 0086 1313                  	dc.b 0,	$86, $13, $13
0001DDE8                            	even
0001DDE8                            	even
0001DDE8                            
0001DDE8                            ; ---------------------------------------------------------------------------
0001DDE8                            ; Pattern load cues
0001DDE8                            ; ---------------------------------------------------------------------------
0001DDE8                            ArtLoadCues:
0001DDE8                            	include "_inc\Pattern load cues.asm"
0001DDE8                            ; ---------------------------------------------------------------------------
0001DDE8                            ; Pattern load cues - index
0001DDE8                            ; ---------------------------------------------------------------------------
0001DDE8 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DDEC 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DDF0 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DDF4 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DDF8 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DDFC 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DE00 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DE04 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DE08 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DE0C 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DE10 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DE14 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DE18 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DE1C 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DE20 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DE24 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DE28                            ; ---------------------------------------------------------------------------
0001DE28                            ; Pattern load cues - standard block 1
0001DE28                            ; ---------------------------------------------------------------------------
0001DE28 0004                       PLC_Main:	dc.w 4
0001DE2A 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DE2E F400                       		dc.w $F400
0001DE30 0000 0000                  		dc.l Nem_Hud		; HUD
0001DE34 D940                       		dc.w $D940
0001DE36 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DE3A FA80                       		dc.w $FA80
0001DE3C 0000 0000                  		dc.l Nem_Ring		; rings
0001DE40 F640                       		dc.w $F640
0001DE42 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DE46 F2E0                       		dc.w $F2E0
0001DE48                            ; ---------------------------------------------------------------------------
0001DE48                            ; Pattern load cues - standard block 2
0001DE48                            ; ---------------------------------------------------------------------------
0001DE48 0002                       PLC_Main2:	dc.w 2
0001DE4A 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DE4E D000                       		dc.w $D000
0001DE50 0000 0000                  		dc.l Nem_Shield		; shield
0001DE54 A820                       		dc.w $A820
0001DE56 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DE5A AB80                       		dc.w $AB80
0001DE5C                            ; ---------------------------------------------------------------------------
0001DE5C                            ; Pattern load cues - explosion
0001DE5C                            ; ---------------------------------------------------------------------------
0001DE5C 0000                       PLC_Explode:	dc.w 0
0001DE5E 0000 0000                  		dc.l Nem_Explode	; explosion
0001DE62 B400                       		dc.w $B400
0001DE64                            ; ---------------------------------------------------------------------------
0001DE64                            ; Pattern load cues - game/time	over
0001DE64                            ; ---------------------------------------------------------------------------
0001DE64 0000                       PLC_GameOver:	dc.w 0
0001DE66 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DE6A ABC0                       		dc.w $ABC0
0001DE6C                            ; ---------------------------------------------------------------------------
0001DE6C                            ; Pattern load cues - Green Hill
0001DE6C                            ; ---------------------------------------------------------------------------
0001DE6C 000B                       PLC_GHZ:	dc.w $B
0001DE6E 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DE72 0000                       		dc.w 0
0001DE74 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DE78 39A0                       		dc.w $39A0
0001DE7A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DE7E 6B00                       		dc.w $6B00
0001DE80 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DE84 7A00                       		dc.w $7A00
0001DE86 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DE8A 8000                       		dc.w $8000
0001DE8C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DE90 8880                       		dc.w $8880
0001DE92 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DE96 8F60                       		dc.w $8F60
0001DE98 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DE9C 9360                       		dc.w $9360
0001DE9E 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DEA2 9E00                       		dc.w $9E00
0001DEA4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DEA8 A360                       		dc.w $A360
0001DEAA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DEAE A460                       		dc.w $A460
0001DEB0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DEB4 A660                       		dc.w $A660
0001DEB6 0005                       PLC_GHZ2:	dc.w 5
0001DEB8 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DEBC 7000                       		dc.w $7000
0001DEBE 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DEC2 71C0                       		dc.w $71C0
0001DEC4 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DEC8 7300                       		dc.w $7300
0001DECA 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DECE 7540                       		dc.w $7540
0001DED0 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DED4 A1E0                       		dc.w $A1E0
0001DED6 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DEDA 6980                       		dc.w $6980
0001DEDC                            ; ---------------------------------------------------------------------------
0001DEDC                            ; Pattern load cues - Labyrinth
0001DEDC                            ; ---------------------------------------------------------------------------
0001DEDC 000B                       PLC_LZ:		dc.w $B
0001DEDE 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DEE2 0000                       		dc.w 0
0001DEE4 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DEE8 3C00                       		dc.w $3C00
0001DEEA 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DEEE 3E00                       		dc.w $3E00
0001DEF0 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DEF4 4B20                       		dc.w $4B20
0001DEF6 0000 0000                  		dc.l Nem_Water		; water	surface
0001DEFA 6000                       		dc.w $6000
0001DEFC 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DF00 6200                       		dc.w $6200
0001DF02 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DF06 6500                       		dc.w $6500
0001DF08 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DF0C 6900                       		dc.w $6900
0001DF0E 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DF12 7780                       		dc.w $7780
0001DF14 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DF18 7880                       		dc.w $7880
0001DF1A 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DF1E 7980                       		dc.w $7980
0001DF20 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DF24 94C0                       		dc.w $94C0
0001DF26 000C                       PLC_LZ2:	dc.w $C
0001DF28 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DF2C 7BC0                       		dc.w $7BC0
0001DF2E 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DF32 7CC0                       		dc.w $7CC0
0001DF34 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DF38 7EC0                       		dc.w $7EC0
0001DF3A 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DF3E 5D20                       		dc.w $5D20
0001DF40 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DF44 8800                       		dc.w $8800
0001DF46 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DF4A 89E0                       		dc.w $89E0
0001DF4C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DF50 8CE0                       		dc.w $8CE0
0001DF52 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DF56 90C0                       		dc.w $90C0
0001DF58 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DF5C A1E0                       		dc.w $A1E0
0001DF5E 0000 0000                  		dc.l Nem_Cork		; cork block
0001DF62 A000                       		dc.w $A000
0001DF64 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF68 A360                       		dc.w $A360
0001DF6A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF6E A460                       		dc.w $A460
0001DF70 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF74 A660                       		dc.w $A660
0001DF76                            ; ---------------------------------------------------------------------------
0001DF76                            ; Pattern load cues - Marble
0001DF76                            ; ---------------------------------------------------------------------------
0001DF76 0009                       PLC_MZ:		dc.w 9
0001DF78 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DF7C 0000                       		dc.w 0
0001DF7E 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DF82 6000                       		dc.w $6000
0001DF84 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DF88 68A0                       		dc.w $68A0
0001DF8A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DF8E 7000                       		dc.w $7000
0001DF90 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DF94 71C0                       		dc.w $71C0
0001DF96 0000 0000                  		dc.l Nem_Lava		; lava
0001DF9A 7500                       		dc.w $7500
0001DF9C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DFA0 8880                       		dc.w $8880
0001DFA2 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DFA6 8F60                       		dc.w $8F60
0001DFA8 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DFAC 9700                       		dc.w $9700
0001DFAE 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DFB2 9FE0                       		dc.w $9FE0
0001DFB4 0004                       PLC_MZ2:	dc.w 4
0001DFB6 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DFBA A260                       		dc.w $A260
0001DFBC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DFC0 A360                       		dc.w $A360
0001DFC2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DFC6 A460                       		dc.w $A460
0001DFC8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DFCC A660                       		dc.w $A660
0001DFCE 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DFD2 5700                       		dc.w $5700
0001DFD4                            ; ---------------------------------------------------------------------------
0001DFD4                            ; Pattern load cues - Star Light
0001DFD4                            ; ---------------------------------------------------------------------------
0001DFD4 0008                       PLC_SLZ:	dc.w 8
0001DFD6 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DFDA 0000                       		dc.w 0
0001DFDC 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DFE0 8000                       		dc.w $8000
0001DFE2 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DFE6 8520                       		dc.w $8520
0001DFE8 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DFEC 9000                       		dc.w $9000
0001DFEE 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DFF2 9C00                       		dc.w $9C00
0001DFF4 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DFF8 A260                       		dc.w $A260
0001DFFA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DFFE A360                       		dc.w $A360
0001E000 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E004 A460                       		dc.w $A460
0001E006 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E00A A660                       		dc.w $A660
0001E00C 0005                       PLC_SLZ2:	dc.w 5
0001E00E 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E012 6E80                       		dc.w $6E80
0001E014 0000 0000                  		dc.l Nem_Fan		; fan
0001E018 7400                       		dc.w $7400
0001E01A 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E01E 7980                       		dc.w $7980
0001E020 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E024 7B80                       		dc.w $7B80
0001E026 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E02A 9B00                       		dc.w $9B00
0001E02C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E030 9E00                       		dc.w $9E00
0001E032                            ; ---------------------------------------------------------------------------
0001E032                            ; Pattern load cues - Spring Yard
0001E032                            ; ---------------------------------------------------------------------------
0001E032 0004                       PLC_SYZ:	dc.w 4
0001E034 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E038 0000                       		dc.w 0
0001E03A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E03E 8000                       		dc.w $8000
0001E040 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E044 8880                       		dc.w $8880
0001E046 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E04A 8F60                       		dc.w $8F60
0001E04C 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E050 9700                       		dc.w $9700
0001E052 0007                       PLC_SYZ2:	dc.w 7
0001E054 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E058 7000                       		dc.w $7000
0001E05A 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E05E 72C0                       		dc.w $72C0
0001E060 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E064 7740                       		dc.w $7740
0001E066 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E06A 9FE0                       		dc.w $9FE0
0001E06C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E070 A1E0                       		dc.w $A1E0
0001E072 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E076 A360                       		dc.w $A360
0001E078 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E07C A460                       		dc.w $A460
0001E07E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E082 A660                       		dc.w $A660
0001E084                            ; ---------------------------------------------------------------------------
0001E084                            ; Pattern load cues - Scrap Brain
0001E084                            ; ---------------------------------------------------------------------------
0001E084 000B                       PLC_SBZ:	dc.w $B
0001E086 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E08A 0000                       		dc.w 0
0001E08C 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E090 5800                       		dc.w $5800
0001E092 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E096 5D00                       		dc.w $5D00
0001E098 0000 0000                  		dc.l Nem_Girder		; girder
0001E09C 5E00                       		dc.w $5E00
0001E09E 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E0A2 6040                       		dc.w $6040
0001E0A4 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E0A8 6880                       		dc.w $6880
0001E0AA 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E0AE 6900                       		dc.w $6900
0001E0B0 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E0B4 7220                       		dc.w $7220
0001E0B6 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E0BA 76A0                       		dc.w $76A0
0001E0BC 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E0C0 7B20                       		dc.w $7B20
0001E0C2 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E0C6 7EA0                       		dc.w $7EA0
0001E0C8 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E0CC 9860                       		dc.w $9860
0001E0CE 000C                       PLC_SBZ2:	dc.w $C
0001E0D0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E0D4 5600                       		dc.w $5600
0001E0D6 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E0DA 8000                       		dc.w $8000
0001E0DC 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E0E0 8520                       		dc.w $8520
0001E0E2 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E0E6 8C00                       		dc.w $8C00
0001E0E8 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E0EC 8DE0                       		dc.w $8DE0
0001E0EE 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E0F2 8FC0                       		dc.w $8FC0
0001E0F4 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E0F8 9240                       		dc.w $9240
0001E0FA 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E0FE 7F20                       		dc.w $7F20
0001E100 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E104 9BE0                       		dc.w $9BE0
0001E106 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E10A A1E0                       		dc.w $A1E0
0001E10C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E110 A360                       		dc.w $A360
0001E112 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E116 A460                       		dc.w $A460
0001E118 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E11C A660                       		dc.w $A660
0001E11E                            ; ---------------------------------------------------------------------------
0001E11E                            ; Pattern load cues - title card
0001E11E                            ; ---------------------------------------------------------------------------
0001E11E 0000                       PLC_TitleCard:	dc.w 0
0001E120 0000 0000                  		dc.l Nem_TitleCard
0001E124 B000                       		dc.w $B000
0001E126                            ; ---------------------------------------------------------------------------
0001E126                            ; Pattern load cues - act 3 boss
0001E126                            ; ---------------------------------------------------------------------------
0001E126 0005                       PLC_Boss:	dc.w 5
0001E128 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E12C 8000                       		dc.w $8000
0001E12E 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E132 8D80                       		dc.w $8D80
0001E134 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E138 93A0                       		dc.w $93A0
0001E13A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E13E A300                       		dc.w $A300
0001E140 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E144 A300                       		dc.w $A300
0001E146 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E14A A540                       		dc.w $A540
0001E14C                            ; ---------------------------------------------------------------------------
0001E14C                            ; Pattern load cues - act 1/2 signpost
0001E14C                            ; ---------------------------------------------------------------------------
0001E14C 0002                       PLC_Signpost:	dc.w 2
0001E14E 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E152 D000                       		dc.w $D000
0001E154 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E158 96C0                       		dc.w $96C0
0001E15A 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E15E 8C40                       		dc.w $8C40
0001E160                            ; ---------------------------------------------------------------------------
0001E160                            ; Pattern load cues - beta special stage warp effect
0001E160                            ; ---------------------------------------------------------------------------
0001E160 0000                       PLC_Warp:	dc.w 0
0001E162 0000 0000                  		dc.l Nem_Warp
0001E166 A820                       		dc.w $A820
0001E168                            ; ---------------------------------------------------------------------------
0001E168                            ; Pattern load cues - special stage
0001E168                            ; ---------------------------------------------------------------------------
0001E168 0010                       PLC_SpeStage:	dc.w $10
0001E16A 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E16E 0000                       		dc.w 0
0001E170 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E174 0A20                       		dc.w $A20
0001E176 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E17A 2840                       		dc.w $2840
0001E17C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E180 4760                       		dc.w $4760
0001E182 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E186 4A20                       		dc.w $4A20
0001E188 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E18C 4C60                       		dc.w $4C60
0001E18E 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E192 5E00                       		dc.w $5E00
0001E194 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E198 6E00                       		dc.w $6E00
0001E19A 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E19E 7E00                       		dc.w $7E00
0001E1A0 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E1A4 8E00                       		dc.w $8E00
0001E1A6 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E1AA 9E00                       		dc.w $9E00
0001E1AC 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E1B0 AE00                       		dc.w $AE00
0001E1B2 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E1B6 BE00                       		dc.w $BE00
0001E1B8 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E1BC EE00                       		dc.w $EE00
0001E1BE 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E1C2 F2E0                       		dc.w $F2E0
0001E1C4 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E1C8 F400                       		dc.w $F400
0001E1CA 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E1CE F520                       		dc.w $F520
0001E1D0 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E1D4 F2E0                       		dc.w $F2E0
0001E1D6 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E1DA F400                       		dc.w $F400
0001E1DC 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E1E0 F520                       		dc.w $F520
0001E1E2                            ; ---------------------------------------------------------------------------
0001E1E2                            ; Pattern load cues - GHZ animals
0001E1E2                            ; ---------------------------------------------------------------------------
0001E1E2 0001                       PLC_GHZAnimals:	dc.w 1
0001E1E4 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E1E8 B000                       		dc.w $B000
0001E1EA 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E1EE B240                       		dc.w $B240
0001E1F0                            ; ---------------------------------------------------------------------------
0001E1F0                            ; Pattern load cues - LZ animals
0001E1F0                            ; ---------------------------------------------------------------------------
0001E1F0 0001                       PLC_LZAnimals:	dc.w 1
0001E1F2 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E1F6 B000                       		dc.w $B000
0001E1F8 0000 0000                  		dc.l Nem_Seal		; seal
0001E1FC B240                       		dc.w $B240
0001E1FE                            ; ---------------------------------------------------------------------------
0001E1FE                            ; Pattern load cues - MZ animals
0001E1FE                            ; ---------------------------------------------------------------------------
0001E1FE 0001                       PLC_MZAnimals:	dc.w 1
0001E200 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E204 B000                       		dc.w $B000
0001E206 0000 0000                  		dc.l Nem_Seal		; seal
0001E20A B240                       		dc.w $B240
0001E20C                            ; ---------------------------------------------------------------------------
0001E20C                            ; Pattern load cues - SLZ animals
0001E20C                            ; ---------------------------------------------------------------------------
0001E20C 0001                       PLC_SLZAnimals:	dc.w 1
0001E20E 0000 0000                  		dc.l Nem_Pig		; pig
0001E212 B000                       		dc.w $B000
0001E214 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E218 B240                       		dc.w $B240
0001E21A                            ; ---------------------------------------------------------------------------
0001E21A                            ; Pattern load cues - SYZ animals
0001E21A                            ; ---------------------------------------------------------------------------
0001E21A 0001                       PLC_SYZAnimals:	dc.w 1
0001E21C 0000 0000                  		dc.l Nem_Pig		; pig
0001E220 B000                       		dc.w $B000
0001E222 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E226 B240                       		dc.w $B240
0001E228                            ; ---------------------------------------------------------------------------
0001E228                            ; Pattern load cues - SBZ animals
0001E228                            ; ---------------------------------------------------------------------------
0001E228 0001                       PLC_SBZAnimals:	dc.w 1
0001E22A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E22E B000                       		dc.w $B000
0001E230 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E234 B240                       		dc.w $B240
0001E236                            ; ---------------------------------------------------------------------------
0001E236                            ; Pattern load cues - special stage results screen
0001E236                            ; ---------------------------------------------------------------------------
0001E236 0001                       PLC_SpeStResult:dc.w 1
0001E238 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E23C A820                       		dc.w $A820
0001E23E 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E242 AA20                       		dc.w $AA20
0001E244                            ; ---------------------------------------------------------------------------
0001E244                            ; Pattern load cues - ending sequence
0001E244                            ; ---------------------------------------------------------------------------
0001E244 000E                       PLC_Ending:	dc.w $E
0001E246 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E24A 0000                       		dc.w 0
0001E24C 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E250 39A0                       		dc.w $39A0
0001E252 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E256 6B00                       		dc.w $6B00
0001E258 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E25C 7400                       		dc.w $7400
0001E25E 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E262 78A0                       		dc.w $78A0
0001E264 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E268 7C20                       		dc.w $7C20
0001E26A 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E26E A480                       		dc.w $A480
0001E270 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E274 AA60                       		dc.w $AA60
0001E276 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E27A ACA0                       		dc.w $ACA0
0001E27C 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E280 AE60                       		dc.w $AE60
0001E282 0000 0000                  		dc.l Nem_Seal		; seal
0001E286 B0A0                       		dc.w $B0A0
0001E288 0000 0000                  		dc.l Nem_Pig		; pig
0001E28C B260                       		dc.w $B260
0001E28E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E292 B4A0                       		dc.w $B4A0
0001E294 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E298 B660                       		dc.w $B660
0001E29A 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E29E B8A0                       		dc.w $B8A0
0001E2A0                            ; ---------------------------------------------------------------------------
0001E2A0                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E2A0                            ; ---------------------------------------------------------------------------
0001E2A0 0002                       PLC_TryAgain:	dc.w 2
0001E2A2 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E2A6 78A0                       		dc.w $78A0
0001E2A8 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E2AC 7C20                       		dc.w $7C20
0001E2AE 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E2B2 B400                       		dc.w $B400
0001E2B4                            ; ---------------------------------------------------------------------------
0001E2B4                            ; Pattern load cues - Eggman on SBZ 2
0001E2B4                            ; ---------------------------------------------------------------------------
0001E2B4 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E2B6 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E2BA A300                       		dc.w $A300
0001E2BC 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E2C0 8000                       		dc.w $8000
0001E2C2 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E2C6 9400                       		dc.w $9400
0001E2C8                            ; ---------------------------------------------------------------------------
0001E2C8                            ; Pattern load cues - final boss
0001E2C8                            ; ---------------------------------------------------------------------------
0001E2C8 0004                       PLC_FZBoss:	dc.w 4
0001E2CA 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E2CE 7400                       		dc.w $7400
0001E2D0 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E2D4 6000                       		dc.w $6000
0001E2D6 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E2DA 8000                       		dc.w $8000
0001E2DC 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E2E0 8E00                       		dc.w $8E00
0001E2E2 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E2E6 A540                       		dc.w $A540
0001E2E8                            		even
0001E2E8                            		even
0001E2E8                            
0001E2E8                            		incbin	misc\padding.bin
0001E3D6                            		even
0001E3D6                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E826                            		even
0001E826                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E8B8                            		even
0001E8B8                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E9CC                            		even
0001E9CC                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F896                            		even
0001F896                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
0002399C                            		even
0002399C                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000239D0                            		even
000239D0                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023A8E                            		even
00023A8E                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00023F36                            		even
00023F36                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00023F94                            		even
00023F94                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024B9A                            		even
00024B9A                            ; ---------------------------------------------------------------------------
00024B9A                            ; Sprite mappings - Sonic
00024B9A                            ; ---------------------------------------------------------------------------
00024B9A                            Map_Sonic:
00024B9A                            	include "_maps\Sonic.asm"
00024B9A                            Map_6d2d:
00024B9A 0000                       Map_6d2d_0: 	dc.w Map_6d2d_B8-Map_6d2d
00024B9C 0000                       Map_6d2d_2: 	dc.w Map_6d2d_B9-Map_6d2d
00024B9E 0000                       Map_6d2d_4: 	dc.w Map_6d2d_C4-Map_6d2d
00024BA0 0000                       Map_6d2d_6: 	dc.w Map_6d2d_D4-Map_6d2d
00024BA2 0000                       Map_6d2d_8: 	dc.w Map_6d2d_E4-Map_6d2d
00024BA4 0000                       Map_6d2d_A: 	dc.w Map_6d2d_F4-Map_6d2d
00024BA6 0000                       Map_6d2d_C: 	dc.w Map_6d2d_104-Map_6d2d
00024BA8 0000                       Map_6d2d_E: 	dc.w Map_6d2d_119-Map_6d2d
00024BAA 0000                       Map_6d2d_10: 	dc.w Map_6d2d_124-Map_6d2d
00024BAC 0000                       Map_6d2d_12: 	dc.w Map_6d2d_12F-Map_6d2d
00024BAE 0000                       Map_6d2d_14: 	dc.w Map_6d2d_144-Map_6d2d
00024BB0 0000                       Map_6d2d_16: 	dc.w Map_6d2d_14F-Map_6d2d
00024BB2 0000                       Map_6d2d_18: 	dc.w Map_6d2d_15F-Map_6d2d
00024BB4 0000                       Map_6d2d_1A: 	dc.w Map_6d2d_179-Map_6d2d
00024BB6 0000                       Map_6d2d_1C: 	dc.w Map_6d2d_198-Map_6d2d
00024BB8 0000                       Map_6d2d_1E: 	dc.w Map_6d2d_1AD-Map_6d2d
00024BBA 0000                       Map_6d2d_20: 	dc.w Map_6d2d_1C7-Map_6d2d
00024BBC 0000                       Map_6d2d_22: 	dc.w Map_6d2d_1DC-Map_6d2d
00024BBE 0000                       Map_6d2d_24: 	dc.w Map_6d2d_1F6-Map_6d2d
00024BC0 0000                       Map_6d2d_26: 	dc.w Map_6d2d_20B-Map_6d2d
00024BC2 0000                       Map_6d2d_28: 	dc.w Map_6d2d_216-Map_6d2d
00024BC4 0000                       Map_6d2d_2A: 	dc.w Map_6d2d_221-Map_6d2d
00024BC6 0000                       Map_6d2d_2C: 	dc.w Map_6d2d_236-Map_6d2d
00024BC8 0000                       Map_6d2d_2E: 	dc.w Map_6d2d_241-Map_6d2d
00024BCA 0000                       Map_6d2d_30: 	dc.w Map_6d2d_251-Map_6d2d
00024BCC 0000                       Map_6d2d_32: 	dc.w Map_6d2d_270-Map_6d2d
00024BCE 0000                       Map_6d2d_34: 	dc.w Map_6d2d_28F-Map_6d2d
00024BD0 0000                       Map_6d2d_36: 	dc.w Map_6d2d_2A4-Map_6d2d
00024BD2 0000                       Map_6d2d_38: 	dc.w Map_6d2d_2BE-Map_6d2d
00024BD4 0000                       Map_6d2d_3A: 	dc.w Map_6d2d_2D3-Map_6d2d
00024BD6 0000                       Map_6d2d_3C: 	dc.w Map_6d2d_2ED-Map_6d2d
00024BD8 0000                       Map_6d2d_3E: 	dc.w Map_6d2d_2F8-Map_6d2d
00024BDA 0000                       Map_6d2d_40: 	dc.w Map_6d2d_303-Map_6d2d
00024BDC 0000                       Map_6d2d_42: 	dc.w Map_6d2d_30E-Map_6d2d
00024BDE 0000                       Map_6d2d_44: 	dc.w Map_6d2d_319-Map_6d2d
00024BE0 0000                       Map_6d2d_46: 	dc.w Map_6d2d_32E-Map_6d2d
00024BE2 0000                       Map_6d2d_48: 	dc.w Map_6d2d_33E-Map_6d2d
00024BE4 0000                       Map_6d2d_4A: 	dc.w Map_6d2d_353-Map_6d2d
00024BE6 0000                       Map_6d2d_4C: 	dc.w Map_6d2d_363-Map_6d2d
00024BE8 0000                       Map_6d2d_4E: 	dc.w Map_6d2d_36E-Map_6d2d
00024BEA 0000                       Map_6d2d_50: 	dc.w Map_6d2d_379-Map_6d2d
00024BEC 0000                       Map_6d2d_52: 	dc.w Map_6d2d_384-Map_6d2d
00024BEE 0000                       Map_6d2d_54: 	dc.w Map_6d2d_38F-Map_6d2d
00024BF0 0000                       Map_6d2d_56: 	dc.w Map_6d2d_3A4-Map_6d2d
00024BF2 0000                       Map_6d2d_58: 	dc.w Map_6d2d_3AF-Map_6d2d
00024BF4 0000                       Map_6d2d_5A: 	dc.w Map_6d2d_3C4-Map_6d2d
00024BF6 0000                       Map_6d2d_5C: 	dc.w Map_6d2d_3CF-Map_6d2d
00024BF8 0000                       Map_6d2d_5E: 	dc.w Map_6d2d_3D5-Map_6d2d
00024BFA 0000                       Map_6d2d_60: 	dc.w Map_6d2d_3DB-Map_6d2d
00024BFC 0000                       Map_6d2d_62: 	dc.w Map_6d2d_3E1-Map_6d2d
00024BFE 0000                       Map_6d2d_64: 	dc.w Map_6d2d_3E7-Map_6d2d
00024C00 0000                       Map_6d2d_66: 	dc.w Map_6d2d_3ED-Map_6d2d
00024C02 0000                       Map_6d2d_68: 	dc.w Map_6d2d_3F8-Map_6d2d
00024C04 0000                       Map_6d2d_6A: 	dc.w Map_6d2d_3FE-Map_6d2d
00024C06 0000                       Map_6d2d_6C: 	dc.w Map_6d2d_409-Map_6d2d
00024C08 0000                       Map_6d2d_6E: 	dc.w Map_6d2d_40F-Map_6d2d
00024C0A 0000                       Map_6d2d_70: 	dc.w Map_6d2d_41A-Map_6d2d
00024C0C 0000                       Map_6d2d_72: 	dc.w Map_6d2d_42F-Map_6d2d
00024C0E 0000                       Map_6d2d_74: 	dc.w Map_6d2d_44E-Map_6d2d
00024C10 0000                       Map_6d2d_76: 	dc.w Map_6d2d_459-Map_6d2d
00024C12 0000                       Map_6d2d_78: 	dc.w Map_6d2d_464-Map_6d2d
00024C14 0000                       Map_6d2d_7A: 	dc.w Map_6d2d_479-Map_6d2d
00024C16 0000                       Map_6d2d_7C: 	dc.w Map_6d2d_484-Map_6d2d
00024C18 0000                       Map_6d2d_7E: 	dc.w Map_6d2d_494-Map_6d2d
00024C1A 0000                       Map_6d2d_80: 	dc.w Map_6d2d_4A9-Map_6d2d
00024C1C 0000                       Map_6d2d_82: 	dc.w Map_6d2d_4B9-Map_6d2d
00024C1E 0000                       Map_6d2d_84: 	dc.w Map_6d2d_4CE-Map_6d2d
00024C20 0000                       Map_6d2d_86: 	dc.w Map_6d2d_4E3-Map_6d2d
00024C22 0000                       Map_6d2d_88: 	dc.w Map_6d2d_4FD-Map_6d2d
00024C24 0000                       Map_6d2d_8A: 	dc.w Map_6d2d_517-Map_6d2d
00024C26 0000                       Map_6d2d_8C: 	dc.w Map_6d2d_522-Map_6d2d
00024C28 0000                       Map_6d2d_8E: 	dc.w Map_6d2d_532-Map_6d2d
00024C2A 0000                       Map_6d2d_90: 	dc.w Map_6d2d_53D-Map_6d2d
00024C2C 0000                       Map_6d2d_92: 	dc.w Map_6d2d_54D-Map_6d2d
00024C2E 0000                       Map_6d2d_94: 	dc.w Map_6d2d_558-Map_6d2d
00024C30 0000                       Map_6d2d_96: 	dc.w Map_6d2d_568-Map_6d2d
00024C32 0000                       Map_6d2d_98: 	dc.w Map_6d2d_578-Map_6d2d
00024C34 0000                       Map_6d2d_9A: 	dc.w Map_6d2d_592-Map_6d2d
00024C36 0000                       Map_6d2d_9C: 	dc.w Map_6d2d_5AC-Map_6d2d
00024C38 0000                       Map_6d2d_9E: 	dc.w Map_6d2d_5B7-Map_6d2d
00024C3A 0000                       Map_6d2d_A0: 	dc.w Map_6d2d_5C7-Map_6d2d
00024C3C 0000                       Map_6d2d_A2: 	dc.w Map_6d2d_5CD-Map_6d2d
00024C3E 0000                       Map_6d2d_A4: 	dc.w Map_6d2d_5D3-Map_6d2d
00024C40 0000                       Map_6d2d_A6: 	dc.w Map_6d2d_5D9-Map_6d2d
00024C42 0000                       Map_6d2d_A8: 	dc.w Map_6d2d_5EE-Map_6d2d
00024C44 0000                       Map_6d2d_AA: 	dc.w Map_6d2d_5FE-Map_6d2d
00024C46 0000                       Map_6d2d_AC: 	dc.w Map_6d2d_60E-Map_6d2d
00024C48 0000                       Map_6d2d_AE: 	dc.w Map_6d2d_61E-Map_6d2d
00024C4A 0000                       Map_6d2d_B0: 	dc.w Map_6d2d_629-Map_6d2d
00024C4C 0000                       Map_6d2d_B2: 	dc.w Map_6d2d_634-Map_6d2d
00024C4E 0000                       Map_6d2d_B4: 	dc.w Map_6d2d_644-Map_6d2d
00024C50 0000                       Map_6d2d_B6: 	dc.w Map_6d2d_64F-Map_6d2d
00024C52 00                         Map_6d2d_B8: 	dc.b $0
00024C53 02                         Map_6d2d_B9: 	dc.b $2
00024C54 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024C59 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024C5E 03                         Map_6d2d_C4: 	dc.b $3
00024C5F EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024C64 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024C69 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C6E 03                         Map_6d2d_D4: 	dc.b $3
00024C6F EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024C74 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024C79 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C7E 03                         Map_6d2d_E4: 	dc.b $3
00024C7F EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024C84 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024C89 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C8E 03                         Map_6d2d_F4: 	dc.b $3
00024C8F EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024C94 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024C99 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C9E 04                         Map_6d2d_104: 	dc.b $4
00024C9F EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024CA4 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024CA9 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024CAE 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024CB3 02                         Map_6d2d_119: 	dc.b $2
00024CB4 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024CB9 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024CBE 02                         Map_6d2d_124: 	dc.b $2
00024CBF ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024CC4 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024CC9 04                         Map_6d2d_12F: 	dc.b $4
00024CCA EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024CCF FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024CD4 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024CD9 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024CDE 02                         Map_6d2d_144: 	dc.b $2
00024CDF FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024CE4 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024CE9 03                         Map_6d2d_14F: 	dc.b $3
00024CEA ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024CEF FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024CF4 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024CF9 05                         Map_6d2d_15F: 	dc.b $5
00024CFA EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024CFF EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024D04 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024D09 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024D0E 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024D13 06                         Map_6d2d_179: 	dc.b $6
00024D14 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024D19 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024D1E FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024D23 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00024D28 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00024D2D F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00024D32 04                         Map_6d2d_198: 	dc.b $4
00024D33 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024D38 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024D3D FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00024D42 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00024D47 05                         Map_6d2d_1AD: 	dc.b $5
00024D48 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024D4D EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00024D52 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00024D57 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00024D5C 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00024D61 04                         Map_6d2d_1C7: 	dc.b $4
00024D62 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024D67 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024D6C FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00024D71 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00024D76 05                         Map_6d2d_1DC: 	dc.b $5
00024D77 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024D7C ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024D81 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00024D86 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00024D8B 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00024D90 04                         Map_6d2d_1F6: 	dc.b $4
00024D91 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00024D96 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00024D9B FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00024DA0 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00024DA5 02                         Map_6d2d_20B: 	dc.b $2
00024DA6 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00024DAB EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00024DB0 02                         Map_6d2d_216: 	dc.b $2
00024DB1 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00024DB6 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00024DBB 04                         Map_6d2d_221: 	dc.b $4
00024DBC F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00024DC1 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00024DC6 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00024DCB 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00024DD0 02                         Map_6d2d_236: 	dc.b $2
00024DD1 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00024DD6 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00024DDB 03                         Map_6d2d_241: 	dc.b $3
00024DDC F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00024DE1 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00024DE6 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00024DEB 06                         Map_6d2d_251: 	dc.b $6
00024DEC FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024DF1 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00024DF6 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00024DFB F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00024E00 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00024E05 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00024E0A 06                         Map_6d2d_270: 	dc.b $6
00024E0B FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024E10 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00024E15 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00024E1A F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00024E1F F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00024E24 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00024E29 04                         Map_6d2d_28F: 	dc.b $4
00024E2A FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00024E2F F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00024E34 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00024E39 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00024E3E 05                         Map_6d2d_2A4: 	dc.b $5
00024E3F FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024E44 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00024E49 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00024E4E F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00024E53 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00024E58 04                         Map_6d2d_2BE: 	dc.b $4
00024E59 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024E5E F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00024E63 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00024E68 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00024E6D 05                         Map_6d2d_2D3: 	dc.b $5
00024E6E FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00024E73 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00024E78 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00024E7D 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00024E82 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00024E87 02                         Map_6d2d_2ED: 	dc.b $2
00024E88 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E8D FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024E92 02                         Map_6d2d_2F8: 	dc.b $2
00024E93 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E98 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024E9D 02                         Map_6d2d_303: 	dc.b $2
00024E9E EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024EA3 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024EA8 02                         Map_6d2d_30E: 	dc.b $2
00024EA9 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024EAE FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024EB3 04                         Map_6d2d_319: 	dc.b $4
00024EB4 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024EB9 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024EBE FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024EC3 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024EC8 03                         Map_6d2d_32E: 	dc.b $3
00024EC9 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024ECE EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024ED3 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024ED8 04                         Map_6d2d_33E: 	dc.b $4
00024ED9 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024EDE EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024EE3 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024EE8 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024EED 03                         Map_6d2d_353: 	dc.b $3
00024EEE EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024EF3 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024EF8 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024EFD 02                         Map_6d2d_363: 	dc.b $2
00024EFE F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024F03 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024F08 02                         Map_6d2d_36E: 	dc.b $2
00024F09 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024F0E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024F13 02                         Map_6d2d_379: 	dc.b $2
00024F14 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024F19 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024F1E 02                         Map_6d2d_384: 	dc.b $2
00024F1F F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024F24 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024F29 04                         Map_6d2d_38F: 	dc.b $4
00024F2A FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024F2F F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024F34 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F39 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024F3E 02                         Map_6d2d_3A4: 	dc.b $2
00024F3F F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024F44 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F49 04                         Map_6d2d_3AF: 	dc.b $4
00024F4A FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024F4F F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024F54 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F59 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024F5E 02                         Map_6d2d_3C4: 	dc.b $2
00024F5F F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024F64 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F69 01                         Map_6d2d_3CF: 	dc.b $1
00024F6A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F6F 01                         Map_6d2d_3D5: 	dc.b $1
00024F70 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F75 01                         Map_6d2d_3DB: 	dc.b $1
00024F76 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F7B 01                         Map_6d2d_3E1: 	dc.b $1
00024F7C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F81 01                         Map_6d2d_3E7: 	dc.b $1
00024F82 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F87 02                         Map_6d2d_3ED: 	dc.b $2
00024F88 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00024F8D F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00024F92 01                         Map_6d2d_3F8: 	dc.b $1
00024F93 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F98 02                         Map_6d2d_3FE: 	dc.b $2
00024F99 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00024F9E 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00024FA3 01                         Map_6d2d_409: 	dc.b $1
00024FA4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024FA9 02                         Map_6d2d_40F: 	dc.b $2
00024FAA ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00024FAF FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00024FB4 04                         Map_6d2d_41A: 	dc.b $4
00024FB5 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00024FBA FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00024FBF 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00024FC4 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00024FC9 06                         Map_6d2d_42F: 	dc.b $6
00024FCA F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00024FCF FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00024FD4 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00024FD9 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00024FDE FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00024FE3 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00024FE8 02                         Map_6d2d_44E: 	dc.b $2
00024FE9 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00024FEE EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00024FF3 02                         Map_6d2d_459: 	dc.b $2
00024FF4 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00024FF9 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00024FFE 04                         Map_6d2d_464: 	dc.b $4
00024FFF F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025004 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025009 0408 000C 03               	dc.b $4, $8, $0, $C, $3
0002500E 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025013 02                         Map_6d2d_479: 	dc.b $2
00025014 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00025019 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
0002501E 03                         Map_6d2d_484: 	dc.b $3
0002501F F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00025024 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025029 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
0002502E 04                         Map_6d2d_494: 	dc.b $4
0002502F F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025034 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025039 0408 000C 02               	dc.b $4, $8, $0, $C, $2
0002503E 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025043 03                         Map_6d2d_4A9: 	dc.b $3
00025044 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00025049 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
0002504E 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00025053 04                         Map_6d2d_4B9: 	dc.b $4
00025054 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025059 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002505E F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025063 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025068 04                         Map_6d2d_4CE: 	dc.b $4
00025069 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002506E 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025073 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025078 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002507D 05                         Map_6d2d_4E3: 	dc.b $5
0002507E E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025083 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00025088 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002508D 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025092 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025097 05                         Map_6d2d_4FD: 	dc.b $5
00025098 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002509D E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000250A2 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000250A7 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000250AC 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000250B1 02                         Map_6d2d_517: 	dc.b $2
000250B2 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000250B7 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000250BC 03                         Map_6d2d_522: 	dc.b $3
000250BD EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000250C2 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000250C7 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000250CC 02                         Map_6d2d_532: 	dc.b $2
000250CD ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000250D2 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000250D7 03                         Map_6d2d_53D: 	dc.b $3
000250D8 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000250DD 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000250E2 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000250E7 02                         Map_6d2d_54D: 	dc.b $2
000250E8 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000250ED FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000250F2 03                         Map_6d2d_558: 	dc.b $3
000250F3 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000250F8 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000250FD E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025102 03                         Map_6d2d_568: 	dc.b $3
00025103 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025108 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002510D F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025112 05                         Map_6d2d_578: 	dc.b $5
00025113 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025118 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002511D F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025122 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025127 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002512C 05                         Map_6d2d_592: 	dc.b $5
0002512D E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025132 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025137 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002513C 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025141 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025146 02                         Map_6d2d_5AC: 	dc.b $2
00025147 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002514C F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025151 03                         Map_6d2d_5B7: 	dc.b $3
00025152 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025157 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
0002515C 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025161 01                         Map_6d2d_5C7: 	dc.b $1
00025162 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00025167 01                         Map_6d2d_5CD: 	dc.b $1
00025168 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0002516D 01                         Map_6d2d_5D3: 	dc.b $1
0002516E F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00025173 04                         Map_6d2d_5D9: 	dc.b $4
00025174 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00025179 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
0002517E 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
00025183 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
00025188 03                         Map_6d2d_5EE: 	dc.b $3
00025189 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
0002518E FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00025193 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00025198 03                         Map_6d2d_5FE: 	dc.b $3
00025199 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
0002519E F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000251A3 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000251A8 03                         Map_6d2d_60E: 	dc.b $3
000251A9 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000251AE FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000251B3 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000251B8 02                         Map_6d2d_61E: 	dc.b $2
000251B9 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000251BE F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000251C3 02                         Map_6d2d_629: 	dc.b $2
000251C4 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000251C9 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000251CE 03                         Map_6d2d_634: 	dc.b $3
000251CF ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000251D4 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000251D9 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000251DE 02                         Map_6d2d_644: 	dc.b $2
000251DF F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000251E4 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000251E9 04                         Map_6d2d_64F: 	dc.b $4
000251EA ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
000251EF F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
000251F4 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
000251F9 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
000251FE                            	even
000251FE                            	even
000251FE                            
000251FE                            ; ---------------------------------------------------------------------------
000251FE                            ; Uncompressed graphics	loading	array for Sonic
000251FE                            ; ---------------------------------------------------------------------------
000251FE                            SonicDynPLC:
000251FE                            	include "_inc\Sonic dynamic pattern load cues.asm"
000251FE                            DPLC_2d5b:
000251FE 0000                       DPLC_2d5b_0: 	dc.w DPLC_2d5b_B8-DPLC_2d5b
00025200 0000                       DPLC_2d5b_2: 	dc.w DPLC_2d5b_B9-DPLC_2d5b
00025202 0000                       DPLC_2d5b_4: 	dc.w DPLC_2d5b_BE-DPLC_2d5b
00025204 0000                       DPLC_2d5b_6: 	dc.w DPLC_2d5b_C5-DPLC_2d5b
00025206 0000                       DPLC_2d5b_8: 	dc.w DPLC_2d5b_CC-DPLC_2d5b
00025208 0000                       DPLC_2d5b_A: 	dc.w DPLC_2d5b_D3-DPLC_2d5b
0002520A 0000                       DPLC_2d5b_C: 	dc.w DPLC_2d5b_DA-DPLC_2d5b
0002520C 0000                       DPLC_2d5b_E: 	dc.w DPLC_2d5b_E3-DPLC_2d5b
0002520E 0000                       DPLC_2d5b_10: 	dc.w DPLC_2d5b_E8-DPLC_2d5b
00025210 0000                       DPLC_2d5b_12: 	dc.w DPLC_2d5b_ED-DPLC_2d5b
00025212 0000                       DPLC_2d5b_14: 	dc.w DPLC_2d5b_F6-DPLC_2d5b
00025214 0000                       DPLC_2d5b_16: 	dc.w DPLC_2d5b_FB-DPLC_2d5b
00025216 0000                       DPLC_2d5b_18: 	dc.w DPLC_2d5b_102-DPLC_2d5b
00025218 0000                       DPLC_2d5b_1A: 	dc.w DPLC_2d5b_10D-DPLC_2d5b
0002521A 0000                       DPLC_2d5b_1C: 	dc.w DPLC_2d5b_11A-DPLC_2d5b
0002521C 0000                       DPLC_2d5b_1E: 	dc.w DPLC_2d5b_123-DPLC_2d5b
0002521E 0000                       DPLC_2d5b_20: 	dc.w DPLC_2d5b_12E-DPLC_2d5b
00025220 0000                       DPLC_2d5b_22: 	dc.w DPLC_2d5b_137-DPLC_2d5b
00025222 0000                       DPLC_2d5b_24: 	dc.w DPLC_2d5b_142-DPLC_2d5b
00025224 0000                       DPLC_2d5b_26: 	dc.w DPLC_2d5b_14B-DPLC_2d5b
00025226 0000                       DPLC_2d5b_28: 	dc.w DPLC_2d5b_150-DPLC_2d5b
00025228 0000                       DPLC_2d5b_2A: 	dc.w DPLC_2d5b_155-DPLC_2d5b
0002522A 0000                       DPLC_2d5b_2C: 	dc.w DPLC_2d5b_15E-DPLC_2d5b
0002522C 0000                       DPLC_2d5b_2E: 	dc.w DPLC_2d5b_163-DPLC_2d5b
0002522E 0000                       DPLC_2d5b_30: 	dc.w DPLC_2d5b_16A-DPLC_2d5b
00025230 0000                       DPLC_2d5b_32: 	dc.w DPLC_2d5b_177-DPLC_2d5b
00025232 0000                       DPLC_2d5b_34: 	dc.w DPLC_2d5b_184-DPLC_2d5b
00025234 0000                       DPLC_2d5b_36: 	dc.w DPLC_2d5b_18D-DPLC_2d5b
00025236 0000                       DPLC_2d5b_38: 	dc.w DPLC_2d5b_198-DPLC_2d5b
00025238 0000                       DPLC_2d5b_3A: 	dc.w DPLC_2d5b_1A1-DPLC_2d5b
0002523A 0000                       DPLC_2d5b_3C: 	dc.w DPLC_2d5b_1AC-DPLC_2d5b
0002523C 0000                       DPLC_2d5b_3E: 	dc.w DPLC_2d5b_1B1-DPLC_2d5b
0002523E 0000                       DPLC_2d5b_40: 	dc.w DPLC_2d5b_1B6-DPLC_2d5b
00025240 0000                       DPLC_2d5b_42: 	dc.w DPLC_2d5b_1BB-DPLC_2d5b
00025242 0000                       DPLC_2d5b_44: 	dc.w DPLC_2d5b_1C0-DPLC_2d5b
00025244 0000                       DPLC_2d5b_46: 	dc.w DPLC_2d5b_1C9-DPLC_2d5b
00025246 0000                       DPLC_2d5b_48: 	dc.w DPLC_2d5b_1D0-DPLC_2d5b
00025248 0000                       DPLC_2d5b_4A: 	dc.w DPLC_2d5b_1D9-DPLC_2d5b
0002524A 0000                       DPLC_2d5b_4C: 	dc.w DPLC_2d5b_1E0-DPLC_2d5b
0002524C 0000                       DPLC_2d5b_4E: 	dc.w DPLC_2d5b_1E5-DPLC_2d5b
0002524E 0000                       DPLC_2d5b_50: 	dc.w DPLC_2d5b_1EA-DPLC_2d5b
00025250 0000                       DPLC_2d5b_52: 	dc.w DPLC_2d5b_1EF-DPLC_2d5b
00025252 0000                       DPLC_2d5b_54: 	dc.w DPLC_2d5b_1F4-DPLC_2d5b
00025254 0000                       DPLC_2d5b_56: 	dc.w DPLC_2d5b_1FD-DPLC_2d5b
00025256 0000                       DPLC_2d5b_58: 	dc.w DPLC_2d5b_202-DPLC_2d5b
00025258 0000                       DPLC_2d5b_5A: 	dc.w DPLC_2d5b_20B-DPLC_2d5b
0002525A 0000                       DPLC_2d5b_5C: 	dc.w DPLC_2d5b_210-DPLC_2d5b
0002525C 0000                       DPLC_2d5b_5E: 	dc.w DPLC_2d5b_213-DPLC_2d5b
0002525E 0000                       DPLC_2d5b_60: 	dc.w DPLC_2d5b_216-DPLC_2d5b
00025260 0000                       DPLC_2d5b_62: 	dc.w DPLC_2d5b_219-DPLC_2d5b
00025262 0000                       DPLC_2d5b_64: 	dc.w DPLC_2d5b_21C-DPLC_2d5b
00025264 0000                       DPLC_2d5b_66: 	dc.w DPLC_2d5b_21F-DPLC_2d5b
00025266 0000                       DPLC_2d5b_68: 	dc.w DPLC_2d5b_224-DPLC_2d5b
00025268 0000                       DPLC_2d5b_6A: 	dc.w DPLC_2d5b_227-DPLC_2d5b
0002526A 0000                       DPLC_2d5b_6C: 	dc.w DPLC_2d5b_22C-DPLC_2d5b
0002526C 0000                       DPLC_2d5b_6E: 	dc.w DPLC_2d5b_22F-DPLC_2d5b
0002526E 0000                       DPLC_2d5b_70: 	dc.w DPLC_2d5b_234-DPLC_2d5b
00025270 0000                       DPLC_2d5b_72: 	dc.w DPLC_2d5b_23D-DPLC_2d5b
00025272 0000                       DPLC_2d5b_74: 	dc.w DPLC_2d5b_242-DPLC_2d5b
00025274 0000                       DPLC_2d5b_76: 	dc.w DPLC_2d5b_247-DPLC_2d5b
00025276 0000                       DPLC_2d5b_78: 	dc.w DPLC_2d5b_24C-DPLC_2d5b
00025278 0000                       DPLC_2d5b_7A: 	dc.w DPLC_2d5b_251-DPLC_2d5b
0002527A 0000                       DPLC_2d5b_7C: 	dc.w DPLC_2d5b_254-DPLC_2d5b
0002527C 0000                       DPLC_2d5b_7E: 	dc.w DPLC_2d5b_25B-DPLC_2d5b
0002527E 0000                       DPLC_2d5b_80: 	dc.w DPLC_2d5b_260-DPLC_2d5b
00025280 0000                       DPLC_2d5b_82: 	dc.w DPLC_2d5b_267-DPLC_2d5b
00025282 0000                       DPLC_2d5b_84: 	dc.w DPLC_2d5b_270-DPLC_2d5b
00025284 0000                       DPLC_2d5b_86: 	dc.w DPLC_2d5b_279-DPLC_2d5b
00025286 0000                       DPLC_2d5b_88: 	dc.w DPLC_2d5b_284-DPLC_2d5b
00025288 0000                       DPLC_2d5b_8A: 	dc.w DPLC_2d5b_28F-DPLC_2d5b
0002528A 0000                       DPLC_2d5b_8C: 	dc.w DPLC_2d5b_294-DPLC_2d5b
0002528C 0000                       DPLC_2d5b_8E: 	dc.w DPLC_2d5b_29B-DPLC_2d5b
0002528E 0000                       DPLC_2d5b_90: 	dc.w DPLC_2d5b_2A0-DPLC_2d5b
00025290 0000                       DPLC_2d5b_92: 	dc.w DPLC_2d5b_2A7-DPLC_2d5b
00025292 0000                       DPLC_2d5b_94: 	dc.w DPLC_2d5b_2AC-DPLC_2d5b
00025294 0000                       DPLC_2d5b_96: 	dc.w DPLC_2d5b_2B3-DPLC_2d5b
00025296 0000                       DPLC_2d5b_98: 	dc.w DPLC_2d5b_2BA-DPLC_2d5b
00025298 0000                       DPLC_2d5b_9A: 	dc.w DPLC_2d5b_2C5-DPLC_2d5b
0002529A 0000                       DPLC_2d5b_9C: 	dc.w DPLC_2d5b_2D0-DPLC_2d5b
0002529C 0000                       DPLC_2d5b_9E: 	dc.w DPLC_2d5b_2D5-DPLC_2d5b
0002529E 0000                       DPLC_2d5b_A0: 	dc.w DPLC_2d5b_2DC-DPLC_2d5b
000252A0 0000                       DPLC_2d5b_A2: 	dc.w DPLC_2d5b_2DF-DPLC_2d5b
000252A2 0000                       DPLC_2d5b_A4: 	dc.w DPLC_2d5b_2E2-DPLC_2d5b
000252A4 0000                       DPLC_2d5b_A6: 	dc.w DPLC_2d5b_2E5-DPLC_2d5b
000252A6 0000                       DPLC_2d5b_A8: 	dc.w DPLC_2d5b_2EA-DPLC_2d5b
000252A8 0000                       DPLC_2d5b_AA: 	dc.w DPLC_2d5b_2F1-DPLC_2d5b
000252AA 0000                       DPLC_2d5b_AC: 	dc.w DPLC_2d5b_2F8-DPLC_2d5b
000252AC 0000                       DPLC_2d5b_AE: 	dc.w DPLC_2d5b_2FF-DPLC_2d5b
000252AE 0000                       DPLC_2d5b_B0: 	dc.w DPLC_2d5b_304-DPLC_2d5b
000252B0 0000                       DPLC_2d5b_B2: 	dc.w DPLC_2d5b_309-DPLC_2d5b
000252B2 0000                       DPLC_2d5b_B4: 	dc.w DPLC_2d5b_30E-DPLC_2d5b
000252B4 0000                       DPLC_2d5b_B6: 	dc.w DPLC_2d5b_313-DPLC_2d5b
000252B6 00                         DPLC_2d5b_B8: 	dc.b $0
000252B7 02                         DPLC_2d5b_B9: 	dc.b $2
000252B8 F000                       	dc.b $F0, $0
000252BA 1010                       	dc.b $10, $10
000252BC 03                         DPLC_2d5b_BE: 	dc.b $3
000252BD 5012                       	dc.b $50, $12
000252BF 5018                       	dc.b $50, $18
000252C1 201E                       	dc.b $20, $1E
000252C3 03                         DPLC_2d5b_C5: 	dc.b $3
000252C4 5021                       	dc.b $50, $21
000252C6 5018                       	dc.b $50, $18
000252C8 201E                       	dc.b $20, $1E
000252CA 03                         DPLC_2d5b_CC: 	dc.b $3
000252CB 5021                       	dc.b $50, $21
000252CD 5018                       	dc.b $50, $18
000252CF 2027                       	dc.b $20, $27
000252D1 03                         DPLC_2d5b_D3: 	dc.b $3
000252D2 802A                       	dc.b $80, $2A
000252D4 2033                       	dc.b $20, $33
000252D6 2036                       	dc.b $20, $36
000252D8 04                         DPLC_2d5b_DA: 	dc.b $4
000252D9 7039                       	dc.b $70, $39
000252DB 5041                       	dc.b $50, $41
000252DD 5047                       	dc.b $50, $47
000252DF 104D                       	dc.b $10, $4D
000252E1 02                         DPLC_2d5b_E3: 	dc.b $2
000252E2 7039                       	dc.b $70, $39
000252E4 B04F                       	dc.b $B0, $4F
000252E6 02                         DPLC_2d5b_E8: 	dc.b $2
000252E7 505B                       	dc.b $50, $5B
000252E9 8061                       	dc.b $80, $61
000252EB 04                         DPLC_2d5b_ED: 	dc.b $4
000252EC 505B                       	dc.b $50, $5B
000252EE 506A                       	dc.b $50, $6A
000252F0 5070                       	dc.b $50, $70
000252F2 1076                       	dc.b $10, $76
000252F4 02                         DPLC_2d5b_F6: 	dc.b $2
000252F5 F4F0                       	dc.b $F4, $F0
000252F7 1500                       	dc.b $15, $0
000252F9 03                         DPLC_2d5b_FB: 	dc.b $3
000252FA 7039                       	dc.b $70, $39
000252FC 3078                       	dc.b $30, $78
000252FE 507C                       	dc.b $50, $7C
00025300 05                         DPLC_2d5b_102: 	dc.b $5
00025301 5082                       	dc.b $50, $82
00025303 5088                       	dc.b $50, $88
00025305 208E                       	dc.b $20, $8E
00025307 5091                       	dc.b $50, $91
00025309 0097                       	dc.b $0, $97
0002530B 06                         DPLC_2d5b_10D: 	dc.b $6
0002530C 5082                       	dc.b $50, $82
0002530E 1098                       	dc.b $10, $98
00025310 309A                       	dc.b $30, $9A
00025312 509E                       	dc.b $50, $9E
00025314 30A4                       	dc.b $30, $A4
00025316 00A8                       	dc.b $0, $A8
00025318 04                         DPLC_2d5b_11A: 	dc.b $4
00025319 50A9                       	dc.b $50, $A9
0002531B 10AF                       	dc.b $10, $AF
0002531D 70B1                       	dc.b $70, $B1
0002531F 20B9                       	dc.b $20, $B9
00025321 05                         DPLC_2d5b_123: 	dc.b $5
00025322 50BC                       	dc.b $50, $BC
00025324 30C2                       	dc.b $30, $C2
00025326 70C6                       	dc.b $70, $C6
00025328 20CE                       	dc.b $20, $CE
0002532A 10D1                       	dc.b $10, $D1
0002532C 04                         DPLC_2d5b_12E: 	dc.b $4
0002532D 50BC                       	dc.b $50, $BC
0002532F 10D3                       	dc.b $10, $D3
00025331 70D5                       	dc.b $70, $D5
00025333 20DD                       	dc.b $20, $DD
00025335 05                         DPLC_2d5b_137: 	dc.b $5
00025336 5082                       	dc.b $50, $82
00025338 1098                       	dc.b $10, $98
0002533A 008E                       	dc.b $0, $8E
0002533C 70E0                       	dc.b $70, $E0
0002533E 20E8                       	dc.b $20, $E8
00025340 04                         DPLC_2d5b_142: 	dc.b $4
00025341 70EB                       	dc.b $70, $EB
00025343 50F3                       	dc.b $50, $F3
00025345 10F9                       	dc.b $10, $F9
00025347 50FB                       	dc.b $50, $FB
00025349 02                         DPLC_2d5b_14B: 	dc.b $2
0002534A 70EB                       	dc.b $70, $EB
0002534C B101                       	dc.b $B1, $1
0002534E 02                         DPLC_2d5b_150: 	dc.b $2
0002534F 510D                       	dc.b $51, $D
00025351 8113                       	dc.b $81, $13
00025353 04                         DPLC_2d5b_155: 	dc.b $4
00025354 510D                       	dc.b $51, $D
00025356 511C                       	dc.b $51, $1C
00025358 1122                       	dc.b $11, $22
0002535A 5124                       	dc.b $51, $24
0002535C 02                         DPLC_2d5b_15E: 	dc.b $2
0002535D 510D                       	dc.b $51, $D
0002535F B12A                       	dc.b $B1, $2A
00025361 03                         DPLC_2d5b_163: 	dc.b $3
00025362 70EB                       	dc.b $70, $EB
00025364 0101                       	dc.b $1, $1
00025366 8136                       	dc.b $81, $36
00025368 06                         DPLC_2d5b_16A: 	dc.b $6
00025369 513F                       	dc.b $51, $3F
0002536B 1145                       	dc.b $11, $45
0002536D 1147                       	dc.b $11, $47
0002536F 8149                       	dc.b $81, $49
00025371 0152                       	dc.b $1, $52
00025373 0153                       	dc.b $1, $53
00025375 06                         DPLC_2d5b_177: 	dc.b $6
00025376 513F                       	dc.b $51, $3F
00025378 2154                       	dc.b $21, $54
0002537A 1157                       	dc.b $11, $57
0002537C 1159                       	dc.b $11, $59
0002537E 815B                       	dc.b $81, $5B
00025380 0152                       	dc.b $1, $52
00025382 04                         DPLC_2d5b_184: 	dc.b $4
00025383 5164                       	dc.b $51, $64
00025385 116A                       	dc.b $11, $6A
00025387 816C                       	dc.b $81, $6C
00025389 1175                       	dc.b $11, $75
0002538B 05                         DPLC_2d5b_18D: 	dc.b $5
0002538C 5177                       	dc.b $51, $77
0002538E 217D                       	dc.b $21, $7D
00025390 1180                       	dc.b $11, $80
00025392 7182                       	dc.b $71, $82
00025394 218A                       	dc.b $21, $8A
00025396 04                         DPLC_2d5b_198: 	dc.b $4
00025397 5177                       	dc.b $51, $77
00025399 118D                       	dc.b $11, $8D
0002539B 818F                       	dc.b $81, $8F
0002539D 1198                       	dc.b $11, $98
0002539F 05                         DPLC_2d5b_1A1: 	dc.b $5
000253A0 513F                       	dc.b $51, $3F
000253A2 819A                       	dc.b $81, $9A
000253A4 1159                       	dc.b $11, $59
000253A6 11A3                       	dc.b $11, $A3
000253A8 0152                       	dc.b $1, $52
000253AA 02                         DPLC_2d5b_1AC: 	dc.b $2
000253AB 51A5                       	dc.b $51, $A5
000253AD B1AB                       	dc.b $B1, $AB
000253AF 02                         DPLC_2d5b_1B1: 	dc.b $2
000253B0 505B                       	dc.b $50, $5B
000253B2 B1B7                       	dc.b $B1, $B7
000253B4 02                         DPLC_2d5b_1B6: 	dc.b $2
000253B5 51A5                       	dc.b $51, $A5
000253B7 B1C3                       	dc.b $B1, $C3
000253B9 02                         DPLC_2d5b_1BB: 	dc.b $2
000253BA 505B                       	dc.b $50, $5B
000253BC B1CF                       	dc.b $B1, $CF
000253BE 04                         DPLC_2d5b_1C0: 	dc.b $4
000253BF 51DB                       	dc.b $51, $DB
000253C1 11E1                       	dc.b $11, $E1
000253C3 B1E3                       	dc.b $B1, $E3
000253C5 01EF                       	dc.b $1, $EF
000253C7 03                         DPLC_2d5b_1C9: 	dc.b $3
000253C8 51F0                       	dc.b $51, $F0
000253CA 11F6                       	dc.b $11, $F6
000253CC B1F8                       	dc.b $B1, $F8
000253CE 04                         DPLC_2d5b_1D0: 	dc.b $4
000253CF 51DB                       	dc.b $51, $DB
000253D1 1204                       	dc.b $12, $4
000253D3 B206                       	dc.b $B2, $6
000253D5 01EF                       	dc.b $1, $EF
000253D7 03                         DPLC_2d5b_1D9: 	dc.b $3
000253D8 51F0                       	dc.b $51, $F0
000253DA 11F6                       	dc.b $11, $F6
000253DC B212                       	dc.b $B2, $12
000253DE 02                         DPLC_2d5b_1E0: 	dc.b $2
000253DF 521E                       	dc.b $52, $1E
000253E1 B224                       	dc.b $B2, $24
000253E3 02                         DPLC_2d5b_1E5: 	dc.b $2
000253E4 510D                       	dc.b $51, $D
000253E6 B230                       	dc.b $B2, $30
000253E8 02                         DPLC_2d5b_1EA: 	dc.b $2
000253E9 521E                       	dc.b $52, $1E
000253EB B23C                       	dc.b $B2, $3C
000253ED 02                         DPLC_2d5b_1EF: 	dc.b $2
000253EE 510D                       	dc.b $51, $D
000253F0 B248                       	dc.b $B2, $48
000253F2 04                         DPLC_2d5b_1F4: 	dc.b $4
000253F3 5254                       	dc.b $52, $54
000253F5 125A                       	dc.b $12, $5A
000253F7 B25C                       	dc.b $B2, $5C
000253F9 0268                       	dc.b $2, $68
000253FB 02                         DPLC_2d5b_1FD: 	dc.b $2
000253FC 7269                       	dc.b $72, $69
000253FE B271                       	dc.b $B2, $71
00025400 04                         DPLC_2d5b_202: 	dc.b $4
00025401 5254                       	dc.b $52, $54
00025403 127D                       	dc.b $12, $7D
00025405 B27F                       	dc.b $B2, $7F
00025407 0268                       	dc.b $2, $68
00025409 02                         DPLC_2d5b_20B: 	dc.b $2
0002540A 7269                       	dc.b $72, $69
0002540C B28B                       	dc.b $B2, $8B
0002540E 01                         DPLC_2d5b_210: 	dc.b $1
0002540F F297                       	dc.b $F2, $97
00025411 01                         DPLC_2d5b_213: 	dc.b $1
00025412 F2A7                       	dc.b $F2, $A7
00025414 01                         DPLC_2d5b_216: 	dc.b $1
00025415 F2B7                       	dc.b $F2, $B7
00025417 01                         DPLC_2d5b_219: 	dc.b $1
00025418 F2C7                       	dc.b $F2, $C7
0002541A 01                         DPLC_2d5b_21C: 	dc.b $1
0002541B F2D7                       	dc.b $F2, $D7
0002541D 02                         DPLC_2d5b_21F: 	dc.b $2
0002541E B2E7                       	dc.b $B2, $E7
00025420 22F3                       	dc.b $22, $F3
00025422 01                         DPLC_2d5b_224: 	dc.b $1
00025423 F2F6                       	dc.b $F2, $F6
00025425 02                         DPLC_2d5b_227: 	dc.b $2
00025426 B306                       	dc.b $B3, $6
00025428 2312                       	dc.b $23, $12
0002542A 01                         DPLC_2d5b_22C: 	dc.b $1
0002542B F315                       	dc.b $F3, $15
0002542D 02                         DPLC_2d5b_22F: 	dc.b $2
0002542E 5325                       	dc.b $53, $25
00025430 B32B                       	dc.b $B3, $2B
00025432 04                         DPLC_2d5b_234: 	dc.b $4
00025433 5337                       	dc.b $53, $37
00025435 733D                       	dc.b $73, $3D
00025437 1345                       	dc.b $13, $45
00025439 0347                       	dc.b $3, $47
0002543B 02                         DPLC_2d5b_23D: 	dc.b $2
0002543C D348                       	dc.b $D3, $48
0002543E 34EC                       	dc.b $34, $EC
00025440 02                         DPLC_2d5b_242: 	dc.b $2
00025441 F528                       	dc.b $F5, $28
00025443 0538                       	dc.b $5, $38
00025445 02                         DPLC_2d5b_247: 	dc.b $2
00025446 F539                       	dc.b $F5, $39
00025448 0549                       	dc.b $5, $49
0002544A 02                         DPLC_2d5b_24C: 	dc.b $2
0002544B E356                       	dc.b $E3, $56
0002544D 054A                       	dc.b $5, $4A
0002544F 01                         DPLC_2d5b_251: 	dc.b $1
00025450 8365                       	dc.b $83, $65
00025452 03                         DPLC_2d5b_254: 	dc.b $3
00025453 736E                       	dc.b $73, $6E
00025455 0376                       	dc.b $3, $76
00025457 3377                       	dc.b $33, $77
00025459 02                         DPLC_2d5b_25B: 	dc.b $2
0002545A E37B                       	dc.b $E3, $7B
0002545C 054A                       	dc.b $5, $4A
0002545E 03                         DPLC_2d5b_260: 	dc.b $3
0002545F B38A                       	dc.b $B3, $8A
00025461 1396                       	dc.b $13, $96
00025463 0398                       	dc.b $3, $98
00025465 04                         DPLC_2d5b_267: 	dc.b $4
00025466 B399                       	dc.b $B3, $99
00025468 33A5                       	dc.b $33, $A5
0002546A 03A9                       	dc.b $3, $A9
0002546C 03AA                       	dc.b $3, $AA
0002546E 04                         DPLC_2d5b_270: 	dc.b $4
0002546F B3AB                       	dc.b $B3, $AB
00025471 33B7                       	dc.b $33, $B7
00025473 03BB                       	dc.b $3, $BB
00025475 03BC                       	dc.b $3, $BC
00025477 05                         DPLC_2d5b_279: 	dc.b $5
00025478 83BD                       	dc.b $83, $BD
0002547A 13C6                       	dc.b $13, $C6
0002547C 53C8                       	dc.b $53, $C8
0002547E 13CE                       	dc.b $13, $CE
00025480 03D0                       	dc.b $3, $D0
00025482 05                         DPLC_2d5b_284: 	dc.b $5
00025483 83D1                       	dc.b $83, $D1
00025485 13DA                       	dc.b $13, $DA
00025487 53C8                       	dc.b $53, $C8
00025489 13CE                       	dc.b $13, $CE
0002548B 03D0                       	dc.b $3, $D0
0002548D 02                         DPLC_2d5b_28F: 	dc.b $2
0002548E 83DC                       	dc.b $83, $DC
00025490 73E5                       	dc.b $73, $E5
00025492 03                         DPLC_2d5b_294: 	dc.b $3
00025493 83ED                       	dc.b $83, $ED
00025495 23F6                       	dc.b $23, $F6
00025497 13F9                       	dc.b $13, $F9
00025499 02                         DPLC_2d5b_29B: 	dc.b $2
0002549A 83FB                       	dc.b $83, $FB
0002549C 7404                       	dc.b $74, $4
0002549E 03                         DPLC_2d5b_2A0: 	dc.b $3
0002549F 83ED                       	dc.b $83, $ED
000254A1 240C                       	dc.b $24, $C
000254A3 140F                       	dc.b $14, $F
000254A5 02                         DPLC_2d5b_2A7: 	dc.b $2
000254A6 5411                       	dc.b $54, $11
000254A8 B417                       	dc.b $B4, $17
000254AA 03                         DPLC_2d5b_2AC: 	dc.b $3
000254AB 8423                       	dc.b $84, $23
000254AD 342C                       	dc.b $34, $2C
000254AF 0430                       	dc.b $4, $30
000254B1 03                         DPLC_2d5b_2B3: 	dc.b $3
000254B2 7431                       	dc.b $74, $31
000254B4 1439                       	dc.b $14, $39
000254B6 B43B                       	dc.b $B4, $3B
000254B8 05                         DPLC_2d5b_2BA: 	dc.b $5
000254B9 7447                       	dc.b $74, $47
000254BB 144F                       	dc.b $14, $4F
000254BD 5451                       	dc.b $54, $51
000254BF 3457                       	dc.b $34, $57
000254C1 045B                       	dc.b $4, $5B
000254C3 05                         DPLC_2d5b_2C5: 	dc.b $5
000254C4 745C                       	dc.b $74, $5C
000254C6 144F                       	dc.b $14, $4F
000254C8 5464                       	dc.b $54, $64
000254CA 3457                       	dc.b $34, $57
000254CC 045B                       	dc.b $4, $5B
000254CE 02                         DPLC_2d5b_2D0: 	dc.b $2
000254CF 246A                       	dc.b $24, $6A
000254D1 F46D                       	dc.b $F4, $6D
000254D3 03                         DPLC_2d5b_2D5: 	dc.b $3
000254D4 247D                       	dc.b $24, $7D
000254D6 B480                       	dc.b $B4, $80
000254D8 248C                       	dc.b $24, $8C
000254DA 01                         DPLC_2d5b_2DC: 	dc.b $1
000254DB B48F                       	dc.b $B4, $8F
000254DD 01                         DPLC_2d5b_2DF: 	dc.b $1
000254DE 549B                       	dc.b $54, $9B
000254E0 01                         DPLC_2d5b_2E2: 	dc.b $1
000254E1 14A1                       	dc.b $14, $A1
000254E3 02                         DPLC_2d5b_2E5: 	dc.b $2
000254E4 E356                       	dc.b $E3, $56
000254E6 054A                       	dc.b $5, $4A
000254E8 03                         DPLC_2d5b_2EA: 	dc.b $3
000254E9 736E                       	dc.b $73, $6E
000254EB 0376                       	dc.b $3, $76
000254ED 3377                       	dc.b $33, $77
000254EF 03                         DPLC_2d5b_2F1: 	dc.b $3
000254F0 B4A3                       	dc.b $B4, $A3
000254F2 14AF                       	dc.b $14, $AF
000254F4 34B1                       	dc.b $34, $B1
000254F6 03                         DPLC_2d5b_2F8: 	dc.b $3
000254F7 54B5                       	dc.b $54, $B5
000254F9 B4BB                       	dc.b $B4, $BB
000254FB 1074                       	dc.b $10, $74
000254FD 02                         DPLC_2d5b_2FF: 	dc.b $2
000254FE F4C7                       	dc.b $F4, $C7
00025500 24D7                       	dc.b $24, $D7
00025502 02                         DPLC_2d5b_304: 	dc.b $2
00025503 F4DA                       	dc.b $F4, $DA
00025505 14EA                       	dc.b $14, $EA
00025507 02                         DPLC_2d5b_309: 	dc.b $2
00025508 F502                       	dc.b $F5, $2
0002550A 2512                       	dc.b $25, $12
0002550C 02                         DPLC_2d5b_30E: 	dc.b $2
0002550D F515                       	dc.b $F5, $15
0002550F 2525                       	dc.b $25, $25
00025511 02                         DPLC_2d5b_313: 	dc.b $2
00025512 F54B                       	dc.b $F5, $4B
00025514 755B                       	dc.b $75, $5B
00025516                            	even
00025516                            	even
00025516                            
00025516                            ; ---------------------------------------------------------------------------
00025516                            ; Uncompressed graphics	- Sonic
00025516                            ; ---------------------------------------------------------------------------
00025516                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00030136                            		even
00030136                            ; ---------------------------------------------------------------------------
00030136                            ; Compressed graphics - various
00030136                            ; ---------------------------------------------------------------------------
00030136                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0003023A                            		even
0003023A                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030274                            		even
00030274                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0003040A                            		even
0003040A                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030552                            		even
00030552                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0003065C                            		even
0003065C                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
000306AE                            		even
000306AE                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
000308F6                            		even
000308F6                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030A7C                            		even
00030A7C                            ; ---------------------------------------------------------------------------
00030A7C                            ; Sprite mappings - walls of the special stage
00030A7C                            ; ---------------------------------------------------------------------------
00030A7C                            Map_SSWalls:
00030A7C                            	include "_maps\SSwalls.asm"
00030A7C                            ; ---------------------------------------------------------------------------
00030A7C                            ; Sprite mappings - walls of the special stage
00030A7C                            ; ---------------------------------------------------------------------------
00030A7C 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030A80 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030A84 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030A88 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030A8C 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030A90 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030A94 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030A98 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030A9C 01                         byte_2C584:	dc.b 1
00030A9D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030AA2 01                         byte_2C58A:	dc.b 1
00030AA3 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030AA8 01                         byte_2C590:	dc.b 1
00030AA9 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030AAE 01                         byte_2C596:	dc.b 1
00030AAF F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030AB4 01                         byte_2C59C:	dc.b 1
00030AB5 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030ABA 01                         byte_2C5A2:	dc.b 1
00030ABB F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030AC0 01                         byte_2C5A8:	dc.b 1
00030AC1 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030AC6 01                         byte_2C5AE:	dc.b 1
00030AC7 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030ACC 01                         byte_2C5B4:	dc.b 1
00030ACD F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030AD2 01                         byte_2C5BA:	dc.b 1
00030AD3 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030AD8 01                         byte_2C5C0:	dc.b 1
00030AD9 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030ADE 01                         byte_2C5C6:	dc.b 1
00030ADF F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030AE4 01                         byte_2C5CC:	dc.b 1
00030AE5 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030AEA 01                         byte_2C5D2:	dc.b 1
00030AEB F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030AF0 01                         byte_2C5D8:	dc.b 1
00030AF1 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030AF6 01                         byte_2C5DE:	dc.b 1
00030AF7 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030AFC                            		even
00030AFC                            		even
00030AFC                            ; ---------------------------------------------------------------------------
00030AFC                            ; Compressed graphics - special stage
00030AFC                            ; ---------------------------------------------------------------------------
00030AFC                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031434                            		even
00031434                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031582                            		even
00031582                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032A14                            		even
00032A14                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032D14                            		even
00032D14                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033208                            		even
00033208                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000332F6                            		even
000332F6                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000333C6                            		even
000333C6                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000334BC                            		even
000334BC                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003351A                            		even
0003351A                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000335AC                            		even
000335AC                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0003366E                            		even
0003366E                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0003373C                            		even
0003373C                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033808                            		even
00033808                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000338D0                            		even
000338D0                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003399A                            		even
0003399A                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033A6A                            		even
00033A6A                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033C5E                            		even
00033C5E                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00033DC6                            		even
00033DC6                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00033E76                            		even
00033E76                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00033F50                            		even
00033F50                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00033FD4                            		even
00033FD4                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00034152                            		even
00034152                            ; ---------------------------------------------------------------------------
00034152                            ; Compressed graphics - GHZ stuff
00034152                            ; ---------------------------------------------------------------------------
00034152                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0003419C                            		even
0003419C                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000342B6                            		even
000342B6                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
000343A2                            		even
000343A2                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
000343EA                            		even
000343EA                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034588                            		even
00034588                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034604                            		even
00034604                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034818                            		even
00034818                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034944                            		even
00034944                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034A72                            		even
00034A72                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034B10                            		even
00034B10                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034B70                            		even
00034B70                            ; ---------------------------------------------------------------------------
00034B70                            ; Compressed graphics - LZ stuff
00034B70                            ; ---------------------------------------------------------------------------
00034B70                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034C94                            		even
00034C94                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035488                            		even
00035488                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035608                            		even
00035608                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035772                            		even
00035772                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00035DC8                            		even
00035DC8                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00035E7E                            		even
00035E7E                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00035F20                            		even
00035F20                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003607C                            		even
0003607C                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000360E0                            		even
000360E0                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036232                            		even
00036232                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036714                            		even
00036714                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036884                            		even
00036884                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036B3C                            		even
00036B3C                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036C74                            		even
00036C74                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036D9E                            		even
00036D9E                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00036EAE                            		even
00036EAE                            ; ---------------------------------------------------------------------------
00036EAE                            ; Compressed graphics - MZ stuff
00036EAE                            ; ---------------------------------------------------------------------------
00036EAE                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003713C                            		even
0003713C                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000371FA                            		even
000371FA                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000372B2                            		even
000372B2                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037306                            		even
00037306                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
000375D8 00                         		even
000375D8                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00037EEE                            		even
00037EEE                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038052                            		even
00038052                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000380DA                            		even
000380DA                            ; ---------------------------------------------------------------------------
000380DA                            ; Compressed graphics - SLZ stuff
000380DA                            ; ---------------------------------------------------------------------------
000380DA                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038316                            		even
00038316                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0003845C                            		even
0003845C                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
000386A0                            		even
000386A0                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038702                            		even
00038702                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000387E4                            		even
000387E4                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000389C6                            		even
000389C6                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038AD2                            		even
00038AD2                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038B76                            		even
00038B76                            ; ---------------------------------------------------------------------------
00038B76                            ; Compressed graphics - SYZ stuff
00038B76                            ; ---------------------------------------------------------------------------
00038B76                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038CE0                            		even
00038CE0                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038D42                            		even
00038D42                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00038E24                            		even
00038E24                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000390B2                            		even
000390B2                            ; ---------------------------------------------------------------------------
000390B2                            ; Compressed graphics - SBZ stuff
000390B2                            ; ---------------------------------------------------------------------------
000390B2                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00039106                            		even
00039106                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000393A2                            		even
000393A2                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
000395A6                            		even
000395A6                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039744                            		even
00039744                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039A74                            		even
00039A74                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039C52                            		even
00039C52                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039CAA                            		even
00039CAA                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00039E74 00                         		even
00039E74                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00039F72                            		even
00039F72                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A0FE                            		even
0003A0FE                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A14E                            		even
0003A14E                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A1A6                            		even
0003A1A6                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A2A2                            		even
0003A2A2                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A3B8                            		even
0003A3B8                            ; ---------------------------------------------------------------------------
0003A3B8                            ; Compressed graphics - enemies
0003A3B8                            ; ---------------------------------------------------------------------------
0003A3B8                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003A778                            		even
0003A778                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003A922 00                         		even
0003A922                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003ACE4 00                         		even
0003ACE4                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003AECC                            		even
0003AECC                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B084 00                         		even
0003B084                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B1CE                            		even
0003B1CE                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003B458                            		even
0003B458                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003BA7C                            		even
0003BA7C                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003BC72                            		even
0003BC72                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C290                            		even
0003C290                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003C690 00                         		even
0003C690                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003C98C                            		even
0003C98C                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003CBD4                            		even
0003CBD4                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003CE6C                            		even
0003CE6C                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D04A                            		even
0003D04A                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D1D8                            		even
0003D1D8                            ; ---------------------------------------------------------------------------
0003D1D8                            ; Compressed graphics - various
0003D1D8                            ; ---------------------------------------------------------------------------
0003D1D8                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003D7E6                            		even
0003D7E6                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003D8DC                            		even
0003D8DC                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003D9E2                            		even
0003D9E2                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003DAD6                            		even
0003DAD6                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E01A                            		even
0003E01A                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003E680                            		even
0003E680                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003E730                            		even
0003E730                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003E8C2                            		even
0003E8C2                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003E9C4                            		even
0003E9C4                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003EAA0                            		even
0003EAA0                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003EF1C                            		even
0003EF1C                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003EFDC                            		even
0003EFDC                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F150                            		even
0003F150                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F452                            		even
0003F452                            ; ---------------------------------------------------------------------------
0003F452                            ; Compressed graphics - continue screen
0003F452                            ; ---------------------------------------------------------------------------
0003F452                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003F702                            		even
0003F702                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003F93C                            		even
0003F93C                            ; ---------------------------------------------------------------------------
0003F93C                            ; Compressed graphics - animals
0003F93C                            ; ---------------------------------------------------------------------------
0003F93C                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003FA94                            		even
0003FA94                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003FBF0                            		even
0003FBF0                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003FD6C                            		even
0003FD6C                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003FE88                            		even
0003FE88                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003FFBE                            		even
0003FFBE                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000400F8                            		even
000400F8                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040254                            		even
00040254                            ; ---------------------------------------------------------------------------
00040254                            ; Compressed graphics - primary patterns and block mappings
00040254                            ; ---------------------------------------------------------------------------
00040254                            Blk16_GHZ:	incbin	map16\ghz.bin
00040B68                            		even
00040B68                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042476                            		even
00042476                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
000437F6                            		even
000437F6                            Blk256_GHZ:	incbin	map256\ghz.bin
00045AF4                            		even
00045AF4                            Blk16_LZ:	incbin	map16\lz.bin
0004622E                            		even
0004622E                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00048630                            		even
00048630                            Blk256_LZ:	incbin	map256\lz.bin
0004AFB0                            		even
0004AFB0                            Blk16_MZ:	incbin	map16\mz.bin
0004B70C                            		even
0004B70C                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004DF94                            		even
0004DF94                            Blk256_MZ:	incbin	map256\mz.bin
0004F718                            		even
0004F718                            Blk16_SLZ:	incbin	map16\slz.bin
0004FDE2                            		even
0004FDE2                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00051D36                            		even
00051D36                            Blk256_SLZ:	incbin	map256\slz.bin
000523B0                            		even
000523B0                            Blk16_SYZ:	incbin	map16\syz.bin
00052FD6                            		even
00052FD6                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057568                            		even
00057568                            Blk256_SYZ:	incbin	map256\syz.bin
000595C4                            		even
000595C4                            Blk16_SBZ:	incbin	map16\sbz.bin
0005A50C                            		even
0005A50C                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005CED0                            		even
0005CED0                            Blk256_SBZ:	incbin	map256\sbz.bin
0005F9C6                            		even
0005F9C6                            ; ---------------------------------------------------------------------------
0005F9C6                            ; Compressed graphics - bosses and ending sequence
0005F9C6                            ; ---------------------------------------------------------------------------
0005F9C6                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000601E0 00                         		even
000601E0                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000604CA                            		even
000604CA                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00060D4E                            		even
00060D4E                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00061AA4 00                         		even
00061AA4                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006220C                            		even
0006220C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0006278C                            		even
0006278C                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000628AC                            		even
000628AC                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00062AAA                            		even
00062AAA                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00063C88                            		even
00063C88                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000645CC                            		even
000645CC                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000649A2                            		even
000649A2                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00064F32                            		even
00064F32                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000651BA                            		even
000651BA                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000657A8 00                         		even
000657A8                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00065A30                            		even
00065A30                            		incbin	misc\padding2.bin
00065B34                            		even
00065B34                            ; ---------------------------------------------------------------------------
00065B34                            ; Collision data
00065B34                            ; ---------------------------------------------------------------------------
00065B34                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00065C34                            		even
00065C34                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00066C34                            		even
00066C34                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00067C34                            		even
00067C34                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00067DEC 00                         		even
00067DEC                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00067F54                            		even
00067F54                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000680E4                            		even
000680E4                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000682D8                            		even
000682D8                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000684DE                            		even
000684DE                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006877C                            		even
0006877C                            ; ---------------------------------------------------------------------------
0006877C                            ; Special layouts
0006877C                            ; ---------------------------------------------------------------------------
0006877C                            SS_1:		incbin	sslayout\1.bin
000689F6                            		even
000689F6                            SS_2:		incbin	sslayout\2.bin
00068E08                            		even
00068E08                            SS_3:		incbin	sslayout\3.bin
00069164                            		even
00069164                            SS_4:		incbin	sslayout\4.bin
0006963E                            		even
0006963E                            SS_5:		incbin	sslayout\5.bin
00069B10                            		even
00069B10                            SS_6:		incbin	sslayout\6.bin
00069E20                            		even
00069E20                            ; ---------------------------------------------------------------------------
00069E20                            ; Animated uncompressed graphics
00069E20                            ; ---------------------------------------------------------------------------
00069E20                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006A058                            		even
0006A058                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006A458                            		even
0006A458                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006A8D8                            		even
0006A8D8                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006ABD8                            		even
0006ABD8                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006B1D8                            		even
0006B1D8                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006B4D8                            		even
0006B4D8                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006BF58                            		even
0006BF58                            
0006BF58                            ; ---------------------------------------------------------------------------
0006BF58                            ; Level	layout index
0006BF58                            ; ---------------------------------------------------------------------------
0006BF58 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006BF5E 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006BF64 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006BF6A 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006BF70 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006BF76 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006BF7C 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006BF82 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006BF88 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006BF8E 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006BF94 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006BF9A 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006BFA0 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006BFA6 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006BFAC 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006BFB2 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006BFB8 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006BFBE 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006BFC4 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006BFCA 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006BFD0 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006BFD6 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006BFDC 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006BFE2 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006BFE8 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006BFEE 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006BFF4 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006BFFA 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C000                            
0006C000                            Level_GHZ1:	incbin	levels\ghz1.bin
0006C0F2                            		even
0006C0F2 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006C0F6                            Level_GHZ2:	incbin	levels\ghz2.bin
0006C1BE                            		even
0006C1BE 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006C1C2                            Level_GHZ3:	incbin	levels\ghz3.bin
0006C2E4                            		even
0006C2E4                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006C306                            		even
0006C306 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006C30A 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006C30E                            
0006C30E                            Level_LZ1:	incbin	levels\lz1.bin
0006C410                            		even
0006C410                            Level_LZbg:	incbin	levels\lzbg.bin
0006C512                            		even
0006C512 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006C516                            Level_LZ2:	incbin	levels\lz2.bin
0006C5B0                            		even
0006C5B0 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006C5B4                            Level_LZ3:	incbin	levels\lz3.bin
0006C6CE                            		even
0006C6CE 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006C6D2                            Level_SBZ3:	incbin	levels\sbz3.bin
0006C78C                            		even
0006C78C 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006C790                            
0006C790                            Level_MZ1:	incbin	levels\mz1.bin
0006C82E                            		even
0006C82E                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006C8A8                            		even
0006C8A8                            Level_MZ2:	incbin	levels\mz2.bin
0006C94C                            		even
0006C94C                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006C9DE                            		even
0006C9DE 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006C9E2                            Level_MZ3:	incbin	levels\mz3.bin
0006CAC4                            		even
0006CAC4                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006CB68 00                         		even
0006CB68 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006CB6C 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006CB70                            
0006CB70                            Level_SLZ1:	incbin	levels\slz1.bin
0006CC82                            		even
0006CC82                            Level_SLZbg:	incbin	levels\slzbg.bin
0006CC9C                            		even
0006CC9C                            Level_SLZ2:	incbin	levels\slz2.bin
0006CD8C                            		even
0006CD8C                            Level_SLZ3:	incbin	levels\slz3.bin
0006CEA6                            		even
0006CEA6 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006CEAA                            
0006CEAA                            Level_SYZ1:	incbin	levels\syz1.bin
0006CF66 00                         		even
0006CF66                            Level_SYZbg:	incbin	levels\syzbg.bin
0006CFA0                            		even
0006CFA0 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006CFA4                            Level_SYZ2:	incbin	levels\syz2.bin
0006D0A8                            		even
0006D0A8 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006D0AC                            Level_SYZ3:	incbin	levels\syz3.bin
0006D206 00                         		even
0006D206 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006D20A 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006D20E                            
0006D20E                            Level_SBZ1:	incbin	levels\sbz1.bin
0006D330                            		even
0006D330                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006D36E                            		even
0006D36E                            Level_SBZ2:	incbin	levels\sbz2.bin
0006D4B0                            		even
0006D4B0                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006D61A                            		even
0006D61A 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006D61E 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006D622                            Level_End:	incbin	levels\ending.bin
0006D652 00                         		even
0006D652 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006D656                            
0006D656                            ; ---------------------------------------------------------------------------
0006D656                            ; Animated uncompressed giant ring graphics
0006D656                            ; ---------------------------------------------------------------------------
0006D656                            Art_BigRing:	incbin	artunc\bigring.bin
0006E296                            		even
0006E296                            
0006E296                            		incbin	misc\padding3.bin
0006E332                            		even
0006E332                            
0006E332                            ; ---------------------------------------------------------------------------
0006E332                            ; Sprite locations index
0006E332                            ; ---------------------------------------------------------------------------
0006E332 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E336 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E33A 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E33E 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E342 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E346 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E34A 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E34E 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E352 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E356 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E35A 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E35E 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E362 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E366 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E36A 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E36E 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E372 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E376 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E37A 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E37E 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E382 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E386 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E38A 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E38E 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E392 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E396 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E39A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E39E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3A2 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006E3A6 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006E3AA 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006E3AE 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006E3B2 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006E3B6 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006E3BA 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006E3BE 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006E3C2 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006E3C8                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006EC14                            		even
0006EC14                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006ECC8                            		even
0006ECC8                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006F70C                            		even
0006F70C                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006FAB4                            		even
0006FAB4                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006FDEA                            		even
0006FDEA                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00070336                            		even
00070336                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000707CE                            		even
000707CE                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00070800                            		even
00070800                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00070832                            		even
00070832                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00070864                            		even
00070864                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00070896                            		even
00070896                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000708E0                            		even
000708E0                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007091E                            		even
0007091E                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00070C8A                            		even
00070C8A                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00071134                            		even
00071134                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000716AA                            		even
000716AA                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000716D4                            		even
000716D4                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00071B3C                            		even
00071B3C                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0007211E                            		even
0007211E                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00072790                            		even
00072790                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00072CFA                            		even
00072CFA                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00073300                            		even
00073300                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00073A3E                            		even
00073A3E                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007411C                            		even
0007411C                            ObjPos_FZ:	incbin	objpos\fz.bin
0007412E                            		even
0007412E                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00074160                            		even
00074160                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00074192                            		even
00074192                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000741C4                            		even
000741C4                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000741F6                            		even
000741F6                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00074228                            		even
00074228                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00074260                            		even
00074260                            ObjPos_End:	incbin	objpos\ending.bin
000743BC                            		even
000743BC FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000743C2                            ; ---------------------------------------------------------------------------
000743C2                            		incbin	misc\padding4.bin
000749EC                            		even
000749EC                            
000749EC 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000749F0 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000749F4 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000749F8 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000749FC 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00074A00 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00074A04                            ; ---------------------------------------------------------------------------
00074A04                            ; PSG instruments used in music
00074A04                            ; ---------------------------------------------------------------------------
00074A04 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00074A10 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00074A1C 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00074A28                            PSG1:		incbin	sound\psg1.bin
00074A3F                            PSG2:		incbin	sound\psg2.bin
00074A46                            PSG3:		incbin	sound\psg3.bin
00074A57                            PSG4:		incbin	sound\psg4.bin
00074A62                            PSG6:		incbin	sound\psg6.bin
00074A71                            PSG5:		incbin	sound\psg5.bin
00074A9B                            PSG7:		incbin	sound\psg7.bin
00074AB7                            PSG8:		incbin	sound\psg8.bin
00074ADF                            PSG9:		incbin	sound\psg9.bin
00074AF0                            
00074AF0 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00074AF8                            ; ---------------------------------------------------------------------------
00074AF8                            ; Music	Pointers
00074AF8                            ; ---------------------------------------------------------------------------
00074AF8 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00074B00 0000 0000 0000 0000        		dc.l Music83, Music84
00074B08 0000 0000 0000 0000        		dc.l Music85, Music86
00074B10 0000 0000 0000 0000        		dc.l Music87, Music88
00074B18 0000 0000 0000 0000        		dc.l Music89, Music8A
00074B20 0000 0000 0000 0000        		dc.l Music8B, Music8C
00074B28 0000 0000 0000 0000        		dc.l Music8D, Music8E
00074B30 0000 0000 0000 0000        		dc.l Music8F, Music90
00074B38 0000 0000 0000 0000        		dc.l Music91, Music92
00074B40 0000 0000 0000 0000        		dc.l Music93, Music94
00074B48 0000 0000 0000 0000        		dc.l Music95, Music96
00074B50 0000 0000 0000 0000        		dc.l Music97, Music98
00074B58 0000 0000 0000 0000        		dc.l Music99, Music9A
00074B60 0000 0000 0000 0000        		dc.l Music9B, Music9C
00074B68 0000 0000 0000 0000        		dc.l Music9D, Music9E
00074B70 0000 0000                  		dc.l Music9F
00074B74                            ; ---------------------------------------------------------------------------
00074B74                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00074B74                            ; ---------------------------------------------------------------------------
00074B74 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00074B84 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00074B94 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00074BA4 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00074BB4 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00074BC4 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00074BD4 9090 9090                  		dc.b $90, $90, $90, $90
00074BD8                            
00074BD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074BD8                            
00074BD8                            
00074BD8                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00074BD8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00074BE0 4E71                       		nop	
00074BE2 4E71                       		nop	
00074BE4 4E71                       		nop	
00074BE6                            
00074BE6                            loc_71B5A:
00074BE6 0839 0000 00A1 1100        		btst	#0,($A11100).l
00074BEE 66F6                       		bne.s	loc_71B5A
00074BF0                            
00074BF0 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00074BF8 6700                       		beq.s	loc_71B82
00074BFA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00074C02 4E71                       		nop	
00074C04 4E71                       		nop	
00074C06 4E71                       		nop	
00074C08 4E71                       		nop	
00074C0A 4E71                       		nop	
00074C0C 60CA                       		bra.s	sub_71B4C
00074C0E                            ; ===========================================================================
00074C0E                            
00074C0E                            loc_71B82:
00074C0E 4DF9 00FF F000             		lea	($FFF000).l,a6
00074C14 422E 000E                  		clr.b	$E(a6)
00074C18 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00074C1C 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00074C20 532E 0001                  		subq.b	#1,1(a6)
00074C24 6600                       		bne.s	loc_71B9E
00074C26 4EBA 0000                  		jsr	sub_7260C(pc)
00074C2A                            
00074C2A                            loc_71B9E:
00074C2A 102E 0004                  		move.b	4(a6),d0
00074C2E 6700                       		beq.s	loc_71BA8
00074C30 4EBA 0000                  		jsr	sub_72504(pc)
00074C34                            
00074C34                            loc_71BA8:
00074C34 4A2E 0024                  		tst.b	$24(a6)
00074C38 6700                       		beq.s	loc_71BB2
00074C3A 4EBA 0000                  		jsr	sub_7267C(pc)
00074C3E                            
00074C3E                            loc_71BB2:
00074C3E 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00074C42 6700                       		beq.s	loc_71BBC	; if not, branch
00074C44 4EBA 0000                  		jsr	Sound_Play(pc)
00074C48                            
00074C48                            loc_71BBC:
00074C48 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00074C4E 6700                       		beq.s	loc_71BC8
00074C50 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00074C54                            
00074C54                            loc_71BC8:
00074C54 4BEE 0040                  		lea	$40(a6),a5
00074C58 4A15                       		tst.b	(a5)
00074C5A 6A00                       		bpl.s	loc_71BD4
00074C5C 4EBA 0000                  		jsr	sub_71C4E(pc)
00074C60                            
00074C60                            loc_71BD4:
00074C60 422E 0008                  		clr.b	8(a6)
00074C64 7E05                       		moveq	#5,d7
00074C66                            
00074C66                            loc_71BDA:
00074C66 DAFC 0030                  		adda.w	#$30,a5
00074C6A 4A15                       		tst.b	(a5)
00074C6C 6A00                       		bpl.s	loc_71BE6
00074C6E 4EBA 0000                  		jsr	sub_71CCA(pc)
00074C72                            
00074C72                            loc_71BE6:
00074C72 51CF FFF2                  		dbf	d7,loc_71BDA
00074C76                            
00074C76 7E02                       		moveq	#2,d7
00074C78                            
00074C78                            loc_71BEC:
00074C78 DAFC 0030                  		adda.w	#$30,a5
00074C7C 4A15                       		tst.b	(a5)
00074C7E 6A00                       		bpl.s	loc_71BF8
00074C80 4EBA 0000                  		jsr	sub_72850(pc)
00074C84                            
00074C84                            loc_71BF8:
00074C84 51CF FFF2                  		dbf	d7,loc_71BEC
00074C88                            
00074C88 1D7C 0080 000E             		move.b	#$80,$E(a6)
00074C8E 7E02                       		moveq	#2,d7
00074C90                            
00074C90                            loc_71C04:
00074C90 DAFC 0030                  		adda.w	#$30,a5
00074C94 4A15                       		tst.b	(a5)
00074C96 6A00                       		bpl.s	loc_71C10
00074C98 4EBA 0000                  		jsr	sub_71CCA(pc)
00074C9C                            
00074C9C                            loc_71C10:
00074C9C 51CF FFF2                  		dbf	d7,loc_71C04
00074CA0                            
00074CA0 7E02                       		moveq	#2,d7
00074CA2                            
00074CA2                            loc_71C16:
00074CA2 DAFC 0030                  		adda.w	#$30,a5
00074CA6 4A15                       		tst.b	(a5)
00074CA8 6A00                       		bpl.s	loc_71C22
00074CAA 4EBA 0000                  		jsr	sub_72850(pc)
00074CAE                            
00074CAE                            loc_71C22:
00074CAE 51CF FFF2                  		dbf	d7,loc_71C16
00074CB2 1D7C 0040 000E             		move.b	#$40,$E(a6)
00074CB8 DAFC 0030                  		adda.w	#$30,a5
00074CBC 4A15                       		tst.b	(a5)
00074CBE 6A00                       		bpl.s	loc_71C38
00074CC0 4EBA 0000                  		jsr	sub_71CCA(pc)
00074CC4                            
00074CC4                            loc_71C38:
00074CC4 DAFC 0030                  		adda.w	#$30,a5
00074CC8 4A15                       		tst.b	(a5)
00074CCA 6A00                       		bpl.s	loc_71C44
00074CCC 4EBA 0000                  		jsr	sub_72850(pc)
00074CD0                            
00074CD0                            loc_71C44:
00074CD0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00074CD8 4E75                       		rts	
00074CDA                            ; End of function sub_71B4C
00074CDA                            
00074CDA                            
00074CDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074CDA                            
00074CDA                            
00074CDA                            sub_71C4E:				; XREF: sub_71B4C
00074CDA 532D 000E                  		subq.b	#1,$E(a5)
00074CDE 6600                       		bne.s	locret_71CAA
00074CE0 1D7C 0080 0008             		move.b	#$80,8(a6)
00074CE6 286D 0004                  		movea.l	4(a5),a4
00074CEA                            
00074CEA                            loc_71C5E:
00074CEA 7A00                       		moveq	#0,d5
00074CEC 1A1C                       		move.b	(a4)+,d5
00074CEE 0C05 00E0                  		cmpi.b	#-$20,d5
00074CF2 6500                       		bcs.s	loc_71C6E
00074CF4 4EBA 0000                  		jsr	sub_72A5A(pc)
00074CF8 60F0                       		bra.s	loc_71C5E
00074CFA                            ; ===========================================================================
00074CFA                            
00074CFA                            loc_71C6E:
00074CFA 4A05                       		tst.b	d5
00074CFC 6A00                       		bpl.s	loc_71C84
00074CFE 1B45 0010                  		move.b	d5,$10(a5)
00074D02 1A1C                       		move.b	(a4)+,d5
00074D04 6A00                       		bpl.s	loc_71C84
00074D06 534C                       		subq.w	#1,a4
00074D08 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00074D0E 6000                       		bra.s	loc_71C88
00074D10                            ; ===========================================================================
00074D10                            
00074D10                            loc_71C84:
00074D10 4EBA 0000                  		jsr	sub_71D40(pc)
00074D14                            
00074D14                            loc_71C88:
00074D14 2B4C 0004                  		move.l	a4,4(a5)
00074D18 0815 0002                  		btst	#2,(a5)
00074D1C 6600                       		bne.s	locret_71CAA
00074D1E 7000                       		moveq	#0,d0
00074D20 102D 0010                  		move.b	$10(a5),d0
00074D24 0C00 0080                  		cmpi.b	#$80,d0
00074D28 6700                       		beq.s	locret_71CAA
00074D2A 0800 0003                  		btst	#3,d0
00074D2E 6600                       		bne.s	loc_71CAC
00074D30 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00074D36                            
00074D36                            locret_71CAA:
00074D36 4E75                       		rts	
00074D38                            ; ===========================================================================
00074D38                            
00074D38                            loc_71CAC:
00074D38 0400 0088                  		subi.b	#$88,d0
00074D3C 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00074D40 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00074D46 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00074D4E 4E75                       		rts	
00074D50                            ; End of function sub_71C4E
00074D50                            
00074D50                            ; ===========================================================================
00074D50 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00074D56                            
00074D56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074D56                            
00074D56                            
00074D56                            sub_71CCA:				; XREF: sub_71B4C
00074D56 532D 000E                  		subq.b	#1,$E(a5)
00074D5A 6600                       		bne.s	loc_71CE0
00074D5C 0895 0004                  		bclr	#4,(a5)
00074D60 4EBA 0000                  		jsr	sub_71CEC(pc)
00074D64 4EBA 0000                  		jsr	sub_71E18(pc)
00074D68 6000 0000                  		bra.w	loc_726E2
00074D6C                            ; ===========================================================================
00074D6C                            
00074D6C                            loc_71CE0:
00074D6C 4EBA 0000                  		jsr	sub_71D9E(pc)
00074D70 4EBA 0000                  		jsr	sub_71DC6(pc)
00074D74 6000 0000                  		bra.w	loc_71E24
00074D78                            ; End of function sub_71CCA
00074D78                            
00074D78                            
00074D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074D78                            
00074D78                            
00074D78                            sub_71CEC:				; XREF: sub_71CCA
00074D78 286D 0004                  		movea.l	4(a5),a4
00074D7C 0895 0001                  		bclr	#1,(a5)
00074D80                            
00074D80                            loc_71CF4:
00074D80 7A00                       		moveq	#0,d5
00074D82 1A1C                       		move.b	(a4)+,d5
00074D84 0C05 00E0                  		cmpi.b	#-$20,d5
00074D88 6500                       		bcs.s	loc_71D04
00074D8A 4EBA 0000                  		jsr	sub_72A5A(pc)
00074D8E 60F0                       		bra.s	loc_71CF4
00074D90                            ; ===========================================================================
00074D90                            
00074D90                            loc_71D04:
00074D90 4EBA 0000                  		jsr	sub_726FE(pc)
00074D94 4A05                       		tst.b	d5
00074D96 6A00                       		bpl.s	loc_71D1A
00074D98 4EBA 0000                  		jsr	sub_71D22(pc)
00074D9C 1A1C                       		move.b	(a4)+,d5
00074D9E 6A00                       		bpl.s	loc_71D1A
00074DA0 534C                       		subq.w	#1,a4
00074DA2 6000 0000                  		bra.w	sub_71D60
00074DA6                            ; ===========================================================================
00074DA6                            
00074DA6                            loc_71D1A:
00074DA6 4EBA 0000                  		jsr	sub_71D40(pc)
00074DAA 6000 0000                  		bra.w	sub_71D60
00074DAE                            ; End of function sub_71CEC
00074DAE                            
00074DAE                            
00074DAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074DAE                            
00074DAE                            
00074DAE                            sub_71D22:				; XREF: sub_71CEC
00074DAE 0405 0080                  		subi.b	#$80,d5
00074DB2 6700                       		beq.s	loc_71D58
00074DB4 DA2D 0008                  		add.b	8(a5),d5
00074DB8 0245 007F                  		andi.w	#$7F,d5
00074DBC E34D                       		lsl.w	#1,d5
00074DBE 41FA 0000                  		lea	word_72790(pc),a0
00074DC2 3C30 5000                  		move.w	(a0,d5.w),d6
00074DC6 3B46 0010                  		move.w	d6,$10(a5)
00074DCA 4E75                       		rts	
00074DCC                            ; End of function sub_71D22
00074DCC                            
00074DCC                            
00074DCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074DCC                            
00074DCC                            
00074DCC                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00074DCC 1005                       		move.b	d5,d0
00074DCE 122D 0002                  		move.b	2(a5),d1
00074DD2                            
00074DD2                            loc_71D46:
00074DD2 5301                       		subq.b	#1,d1
00074DD4 6700                       		beq.s	loc_71D4E
00074DD6 D005                       		add.b	d5,d0
00074DD8 60F8                       		bra.s	loc_71D46
00074DDA                            ; ===========================================================================
00074DDA                            
00074DDA                            loc_71D4E:
00074DDA 1B40 000F                  		move.b	d0,$F(a5)
00074DDE 1B40 000E                  		move.b	d0,$E(a5)
00074DE2 4E75                       		rts	
00074DE4                            ; End of function sub_71D40
00074DE4                            
00074DE4                            ; ===========================================================================
00074DE4                            
00074DE4                            loc_71D58:				; XREF: sub_71D22
00074DE4 08D5 0001                  		bset	#1,(a5)
00074DE8 426D 0010                  		clr.w	$10(a5)
00074DEC                            
00074DEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074DEC                            
00074DEC                            
00074DEC                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00074DEC 2B4C 0004                  		move.l	a4,4(a5)
00074DF0 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00074DF6 0815 0004                  		btst	#4,(a5)
00074DFA 6600                       		bne.s	locret_71D9C
00074DFC 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00074E02 422D 000C                  		clr.b	$C(a5)
00074E06 0815 0003                  		btst	#3,(a5)
00074E0A 6700                       		beq.s	locret_71D9C
00074E0C 206D 0014                  		movea.l	$14(a5),a0
00074E10 1B58 0018                  		move.b	(a0)+,$18(a5)
00074E14 1B58 0019                  		move.b	(a0)+,$19(a5)
00074E18 1B58 001A                  		move.b	(a0)+,$1A(a5)
00074E1C 1018                       		move.b	(a0)+,d0
00074E1E E208                       		lsr.b	#1,d0
00074E20 1B40 001B                  		move.b	d0,$1B(a5)
00074E24 426D 001C                  		clr.w	$1C(a5)
00074E28                            
00074E28                            locret_71D9C:
00074E28 4E75                       		rts	
00074E2A                            ; End of function sub_71D60
00074E2A                            
00074E2A                            
00074E2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074E2A                            
00074E2A                            
00074E2A                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00074E2A 4A2D 0012                  		tst.b	$12(a5)
00074E2E 6700                       		beq.s	locret_71DC4
00074E30 532D 0012                  		subq.b	#1,$12(a5)
00074E34 6600                       		bne.s	locret_71DC4
00074E36 08D5 0001                  		bset	#1,(a5)
00074E3A 4A2D 0001                  		tst.b	1(a5)
00074E3E 6B00 0000                  		bmi.w	loc_71DBE
00074E42 4EBA 0000                  		jsr	sub_726FE(pc)
00074E46 584F                       		addq.w	#4,sp
00074E48 4E75                       		rts	
00074E4A                            ; ===========================================================================
00074E4A                            
00074E4A                            loc_71DBE:
00074E4A 4EBA 0000                  		jsr	sub_729A0(pc)
00074E4E 584F                       		addq.w	#4,sp
00074E50                            
00074E50                            locret_71DC4:
00074E50 4E75                       		rts	
00074E52                            ; End of function sub_71D9E
00074E52                            
00074E52                            
00074E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074E52                            
00074E52                            
00074E52                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00074E52 584F                       		addq.w	#4,sp
00074E54 0815 0003                  		btst	#3,(a5)
00074E58 6700                       		beq.s	locret_71E16
00074E5A 4A2D 0018                  		tst.b	$18(a5)
00074E5E 6700                       		beq.s	loc_71DDA
00074E60 532D 0018                  		subq.b	#1,$18(a5)
00074E64 4E75                       		rts	
00074E66                            ; ===========================================================================
00074E66                            
00074E66                            loc_71DDA:
00074E66 532D 0019                  		subq.b	#1,$19(a5)
00074E6A 6700                       		beq.s	loc_71DE2
00074E6C 4E75                       		rts	
00074E6E                            ; ===========================================================================
00074E6E                            
00074E6E                            loc_71DE2:
00074E6E 206D 0014                  		movea.l	$14(a5),a0
00074E72 1B68 0001 0019             		move.b	1(a0),$19(a5)
00074E78 4A2D 001B                  		tst.b	$1B(a5)
00074E7C 6600                       		bne.s	loc_71DFE
00074E7E 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00074E84 442D 001A                  		neg.b	$1A(a5)
00074E88 4E75                       		rts	
00074E8A                            ; ===========================================================================
00074E8A                            
00074E8A                            loc_71DFE:
00074E8A 532D 001B                  		subq.b	#1,$1B(a5)
00074E8E 1C2D 001A                  		move.b	$1A(a5),d6
00074E92 4886                       		ext.w	d6
00074E94 DC6D 001C                  		add.w	$1C(a5),d6
00074E98 3B46 001C                  		move.w	d6,$1C(a5)
00074E9C DC6D 0010                  		add.w	$10(a5),d6
00074EA0 594F                       		subq.w	#4,sp
00074EA2                            
00074EA2                            locret_71E16:
00074EA2 4E75                       		rts	
00074EA4                            ; End of function sub_71DC6
00074EA4                            
00074EA4                            
00074EA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074EA4                            
00074EA4                            
00074EA4                            sub_71E18:				; XREF: sub_71CCA
00074EA4 0815 0001                  		btst	#1,(a5)
00074EA8 6600                       		bne.s	locret_71E48
00074EAA 3C2D 0010                  		move.w	$10(a5),d6
00074EAE 6700                       		beq.s	loc_71E4A
00074EB0                            
00074EB0                            loc_71E24:				; XREF: sub_71CCA
00074EB0 102D 001E                  		move.b	$1E(a5),d0
00074EB4 4880                       		ext.w	d0
00074EB6 DC40                       		add.w	d0,d6
00074EB8 0815 0002                  		btst	#2,(a5)
00074EBC 6600                       		bne.s	locret_71E48
00074EBE 3206                       		move.w	d6,d1
00074EC0 E049                       		lsr.w	#8,d1
00074EC2 103C 00A4                  		move.b	#-$5C,d0
00074EC6 4EBA 0000                  		jsr	sub_72722(pc)
00074ECA 1206                       		move.b	d6,d1
00074ECC 103C 00A0                  		move.b	#-$60,d0
00074ED0 4EBA 0000                  		jsr	sub_72722(pc)
00074ED4                            
00074ED4                            locret_71E48:
00074ED4 4E75                       		rts	
00074ED6                            ; ===========================================================================
00074ED6                            
00074ED6                            loc_71E4A:
00074ED6 08D5 0001                  		bset	#1,(a5)
00074EDA 4E75                       		rts	
00074EDC                            ; End of function sub_71E18
00074EDC                            
00074EDC                            ; ===========================================================================
00074EDC                            
00074EDC                            loc_71E50:				; XREF: sub_71B4C
00074EDC 6B00                       		bmi.s	loc_71E94
00074EDE 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00074EE4 6700 0000                  		beq.w	loc_71EFE
00074EE8 1D7C 0002 0003             		move.b	#2,3(a6)
00074EEE 7602                       		moveq	#2,d3
00074EF0 103C 00B4                  		move.b	#-$4C,d0
00074EF4 7200                       		moveq	#0,d1
00074EF6                            
00074EF6                            loc_71E6A:
00074EF6 4EBA 0000                  		jsr	sub_7272E(pc)
00074EFA 4EBA 0000                  		jsr	sub_72764(pc)
00074EFE 5200                       		addq.b	#1,d0
00074F00 51CB FFF4                  		dbf	d3,loc_71E6A
00074F04                            
00074F04 7602                       		moveq	#2,d3
00074F06 7028                       		moveq	#$28,d0
00074F08                            
00074F08                            loc_71E7C:
00074F08 1203                       		move.b	d3,d1
00074F0A 4EBA 0000                  		jsr	sub_7272E(pc)
00074F0E 5801                       		addq.b	#4,d1
00074F10 4EBA 0000                  		jsr	sub_7272E(pc)
00074F14 51CB FFF2                  		dbf	d3,loc_71E7C
00074F18                            
00074F18 4EBA 0000                  		jsr	sub_729B6(pc)
00074F1C 6000 FDB2                  		bra.w	loc_71C44
00074F20                            ; ===========================================================================
00074F20                            
00074F20                            loc_71E94:				; XREF: loc_71E50
00074F20 422E 0003                  		clr.b	3(a6)
00074F24 7630                       		moveq	#$30,d3
00074F26 4BEE 0040                  		lea	$40(a6),a5
00074F2A 7806                       		moveq	#6,d4
00074F2C                            
00074F2C                            loc_71EA0:
00074F2C 0815 0007                  		btst	#7,(a5)
00074F30 6700                       		beq.s	loc_71EB8
00074F32 0815 0002                  		btst	#2,(a5)
00074F36 6600                       		bne.s	loc_71EB8
00074F38 103C 00B4                  		move.b	#-$4C,d0
00074F3C 122D 000A                  		move.b	$A(a5),d1
00074F40 4EBA 0000                  		jsr	sub_72722(pc)
00074F44                            
00074F44                            loc_71EB8:
00074F44 DAC3                       		adda.w	d3,a5
00074F46 51CC FFE4                  		dbf	d4,loc_71EA0
00074F4A                            
00074F4A 4BEE 0220                  		lea	$220(a6),a5
00074F4E 7802                       		moveq	#2,d4
00074F50                            
00074F50                            loc_71EC4:
00074F50 0815 0007                  		btst	#7,(a5)
00074F54 6700                       		beq.s	loc_71EDC
00074F56 0815 0002                  		btst	#2,(a5)
00074F5A 6600                       		bne.s	loc_71EDC
00074F5C 103C 00B4                  		move.b	#-$4C,d0
00074F60 122D 000A                  		move.b	$A(a5),d1
00074F64 4EBA 0000                  		jsr	sub_72722(pc)
00074F68                            
00074F68                            loc_71EDC:
00074F68 DAC3                       		adda.w	d3,a5
00074F6A 51CC FFE4                  		dbf	d4,loc_71EC4
00074F6E                            
00074F6E 4BEE 0340                  		lea	$340(a6),a5
00074F72 0815 0007                  		btst	#7,(a5)
00074F76 6700                       		beq.s	loc_71EFE
00074F78 0815 0002                  		btst	#2,(a5)
00074F7C 6600                       		bne.s	loc_71EFE
00074F7E 103C 00B4                  		move.b	#-$4C,d0
00074F82 122D 000A                  		move.b	$A(a5),d1
00074F86 4EBA 0000                  		jsr	sub_72722(pc)
00074F8A                            
00074F8A                            loc_71EFE:
00074F8A 6000 FD44                  		bra.w	loc_71C44
00074F8E                            
00074F8E                            ; ---------------------------------------------------------------------------
00074F8E                            ; Subroutine to	play a sound or	music track
00074F8E                            ; ---------------------------------------------------------------------------
00074F8E                            
00074F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F8E                            
00074F8E                            
00074F8E                            Sound_Play:				; XREF: sub_71B4C
00074F8E 2079 0007 49EC             		movea.l	(Go_SoundTypes).l,a0
00074F94 43EE 000A                  		lea	$A(a6),a1	; load music track number
00074F98 1616                       		move.b	0(a6),d3
00074F9A 7802                       		moveq	#2,d4
00074F9C                            
00074F9C                            loc_71F12:
00074F9C 1011                       		move.b	(a1),d0		; move track number to d0
00074F9E 1200                       		move.b	d0,d1
00074FA0 4219                       		clr.b	(a1)+
00074FA2 0400 0081                  		subi.b	#$81,d0
00074FA6 6500                       		bcs.s	loc_71F3E
00074FA8 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00074FAE 6700                       		beq.s	loc_71F2C
00074FB0 1D41 000A                  		move.b	d1,$A(a6)
00074FB4 6000                       		bra.s	loc_71F3E
00074FB6                            ; ===========================================================================
00074FB6                            
00074FB6                            loc_71F2C:
00074FB6 0240 007F                  		andi.w	#$7F,d0
00074FBA 1430 0000                  		move.b	(a0,d0.w),d2
00074FBE B403                       		cmp.b	d3,d2
00074FC0 6500                       		bcs.s	loc_71F3E
00074FC2 1602                       		move.b	d2,d3
00074FC4 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00074FC8                            
00074FC8                            loc_71F3E:
00074FC8 51CC FFD2                  		dbf	d4,loc_71F12
00074FCC                            
00074FCC 4A03                       		tst.b	d3
00074FCE 6B00                       		bmi.s	locret_71F4A
00074FD0 1C83                       		move.b	d3,0(a6)
00074FD2                            
00074FD2                            locret_71F4A:
00074FD2 4E75                       		rts	
00074FD4                            ; End of function Sound_Play
00074FD4                            
00074FD4                            
00074FD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074FD4                            
00074FD4                            
00074FD4                            Sound_ChkValue:				; XREF: sub_71B4C
00074FD4 7E00                       		moveq	#0,d7
00074FD6 1E2E 0009                  		move.b	9(a6),d7
00074FDA 6700 0000                  		beq.w	Sound_E4
00074FDE 6A00                       		bpl.s	locret_71F8C
00074FE0 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00074FE6 0C07 009F                  		cmpi.b	#$9F,d7
00074FEA 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00074FEE 0C07 00A0                  		cmpi.b	#$A0,d7
00074FF2 6500 0000                  		bcs.w	locret_71F8C
00074FF6 0C07 00CF                  		cmpi.b	#$CF,d7
00074FFA 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00074FFE 0C07 00D0                  		cmpi.b	#$D0,d7
00075002 6500 0000                  		bcs.w	locret_71F8C
00075006 0C07 00E0                  		cmpi.b	#$E0,d7
0007500A 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007500E 0C07 00E5                  		cmpi.b	#$E5,d7
00075012 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
00075014                            
00075014                            locret_71F8C:
00075014 4E75                       		rts	
00075016                            ; ===========================================================================
00075016                            
00075016                            Sound_E0toE5				; XREF: Sound_ChkValue
00075016 0407 00E0                  		subi.b	#$E0,d7
0007501A E54F                       		lsl.w	#2,d7
0007501C 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00075020                            ; ===========================================================================
00075020                            
00075020                            Sound_ExIndex:
00075020 6000 0000                  		bra.w	Sound_E0
00075024                            ; ===========================================================================
00075024 6000 0000                  		bra.w	Sound_E1
00075028                            ; ===========================================================================
00075028 6000 0000                  		bra.w	Sound_E2
0007502C                            ; ===========================================================================
0007502C 6000 0000                  		bra.w	Sound_E3
00075030                            ; ===========================================================================
00075030 6000 0000                  		bra.w	Sound_E4
00075034                            ; ===========================================================================
00075034 6000 0000                  		bra.w	Sound_E5
00075038                            ; ===========================================================================
00075038                            ; ---------------------------------------------------------------------------
00075038                            ; Play "Say-gaa" PCM sound
00075038                            ; ---------------------------------------------------------------------------
00075038                            
00075038                            Sound_E1:				  
00075038 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007503E 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00075044 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007504C                            PlayPCM_Loop:	  
0007504C 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075052 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00075056 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007505A 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007505C 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007505E 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00075062 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00075068 4EB8 1418                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007506C 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00075072 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00075074 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00075076                            return_PlayPCM: 
00075076 584F                       		addq.w	#4,sp 
00075078 4E75                       		rts
0007507A                            		
0007507A                            ; ---------------------------------------------------------------------------
0007507A                            ; Play you are an idiot pcm sound
0007507A                            ; since the sfx already crashes the game forever load it here :V
0007507A                            ; ---------------------------------------------------------------------------
0007507A                            
0007507A                            Sound_E5: 
0007507A 4EB8 14E8                  		jsr	ClearScreen
0007507E                            		;control port on a5
0007507E 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
00075084 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007508A 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0007508E 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
00075092 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
00075096                            		
00075096 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007509A                            		
0007509A 2ABC 4000 0000             		move.l	#$40000000,(a5)
000750A0 41F9 0002 3F94             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
000750A6 4EB8 1664                  		jsr	NemDec
000750AA 43F9 00FF 0000             		lea	($FF0000).l,a1
000750B0 41F9 0002 3F36             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
000750B6 303C 0000                  		move.w	#0,d0
000750BA 4EB8 1942                  		jsr	EniDec
000750BE 43F9 00FF 0000             		lea	($FF0000).l,a1
000750C4 203C 4304 0003             		move.l	#$43040003,d0
000750CA 7223                       		moveq	#35,d1
000750CC 740D                       		moveq	#13,d2
000750CE 4EB8 1644                  		jsr	ShowVDPGraphics
000750D2 7014                       		moveq	#20,d0
000750D4 4EB8 2302                  		jsr	PalLoad2	; load pallet
000750D8                            		
000750D8                            Sound_E5_StartPCM:
000750D8 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000750DE 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
000750E4 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000750EC                            PlayPCM_LoopE5:	  
000750EC                            
000750EC 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000750F2                            		
000750F2 5278 FE24                  		addq.w	#1,($FFFFFE24).w
000750F6                            		
000750F6 1038 FE24                  		move.b	($FFFFFE24).w,d0
000750FA 0200 000F                  		andi.b	#$F,d0
000750FE 6700                       		beq.s	SfxE5SwapPalette
00075100                            		
00075100 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00075104 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00075108 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007510A 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
0007510C 60DE                       		bra.s	PlayPCM_LoopE5
0007510E                            		
0007510E                            SfxE5SwapPalette:
0007510E                            		
0007510E 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00075114                            		
00075114                            		
00075114 0838 0004 FE24             		btst	#4,($FFFFFE24).w
0007511A 6700                       		beq.s	@not_black
0007511C 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00075122 6000                       		bra.s	@merge
00075124                            	@not_black:
00075124 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007512A                            	@merge:
0007512A 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007512E 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00075132 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
00075138 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0007513C                            		
0007513C 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00075140 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00075144 60A6                       		bra.s	PlayPCM_LoopE5
00075146                            		
00075146                            ; ===========================================================================
00075146                            ; ---------------------------------------------------------------------------
00075146                            ; Play music track $81-$9F
00075146                            ; ---------------------------------------------------------------------------
00075146                            
00075146                            Sound_81to9F:				; XREF: Sound_ChkValue
00075146 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007514A 6600                       		bne.s	loc_72024	; if not, branch
0007514C 4A2E 0027                  		tst.b	$27(a6)
00075150 6600 0000                  		bne.w	loc_721B6
00075154 4BEE 0040                  		lea	$40(a6),a5
00075158 7009                       		moveq	#9,d0
0007515A                            
0007515A                            loc_71FE6:
0007515A 0895 0002                  		bclr	#2,(a5)
0007515E DAFC 0030                  		adda.w	#$30,a5
00075162 51C8 FFF6                  		dbf	d0,loc_71FE6
00075166                            
00075166 4BEE 0220                  		lea	$220(a6),a5
0007516A 7005                       		moveq	#5,d0
0007516C                            
0007516C                            loc_71FF8:
0007516C 0895 0007                  		bclr	#7,(a5)
00075170 DAFC 0030                  		adda.w	#$30,a5
00075174 51C8 FFF6                  		dbf	d0,loc_71FF8
00075178 4216                       		clr.b	0(a6)
0007517A 204E                       		movea.l	a6,a0
0007517C 43EE 03A0                  		lea	$3A0(a6),a1
00075180 303C 0087                  		move.w	#$87,d0
00075184                            
00075184                            loc_72012:
00075184 22D8                       		move.l	(a0)+,(a1)+
00075186 51C8 FFFC                  		dbf	d0,loc_72012
0007518A                            
0007518A 1D7C 0080 0027             		move.b	#$80,$27(a6)
00075190 4216                       		clr.b	0(a6)
00075192 6000                       		bra.s	loc_7202C
00075194                            ; ===========================================================================
00075194                            
00075194                            loc_72024:
00075194 422E 0027                  		clr.b	$27(a6)
00075198 422E 0026                  		clr.b	$26(a6)
0007519C                            
0007519C                            loc_7202C:
0007519C 4EBA 0000                  		jsr	sub_725CA(pc)
000751A0 2879 0007 49FC             		movea.l	(off_719A0).l,a4
000751A6 0407 0081                  		subi.b	#$81,d7
000751AA 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000751B0 2879 0007 49F4             		movea.l	(Go_MusicIndex).l,a4
000751B6 E54F                       		lsl.w	#2,d7
000751B8 2874 7000                  		movea.l	(a4,d7.w),a4
000751BC 7000                       		moveq	#0,d0
000751BE 3014                       		move.w	(a4),d0
000751C0 D08C                       		add.l	a4,d0
000751C2 2D40 0018                  		move.l	d0,$18(a6)
000751C6 102C 0005                  		move.b	5(a4),d0
000751CA 1D40 0028                  		move.b	d0,$28(a6)
000751CE 4A2E 002A                  		tst.b	$2A(a6)
000751D2 6700                       		beq.s	loc_72068
000751D4 102E 0029                  		move.b	$29(a6),d0
000751D8                            
000751D8                            loc_72068:
000751D8 1D40 0002                  		move.b	d0,2(a6)
000751DC 1D40 0001                  		move.b	d0,1(a6)
000751E0 7200                       		moveq	#0,d1
000751E2 264C                       		movea.l	a4,a3
000751E4 5C4C                       		addq.w	#6,a4
000751E6 7E00                       		moveq	#0,d7
000751E8 1E2B 0002                  		move.b	2(a3),d7
000751EC 6700 0000                  		beq.w	loc_72114
000751F0 5307                       		subq.b	#1,d7
000751F2 123C 00C0                  		move.b	#-$40,d1
000751F6 182B 0004                  		move.b	4(a3),d4
000751FA 7C30                       		moveq	#$30,d6
000751FC 1A3C 0001                  		move.b	#1,d5
00075200 43EE 0040                  		lea	$40(a6),a1
00075204 45FA 0000                  		lea	byte_721BA(pc),a2
00075208                            
00075208                            loc_72098:
00075208 08D1 0007                  		bset	#7,(a1)
0007520C 135A 0001                  		move.b	(a2)+,1(a1)
00075210 1344 0002                  		move.b	d4,2(a1)
00075214 1346 000D                  		move.b	d6,$D(a1)
00075218 1341 000A                  		move.b	d1,$A(a1)
0007521C 1345 000E                  		move.b	d5,$E(a1)
00075220 7000                       		moveq	#0,d0
00075222 301C                       		move.w	(a4)+,d0
00075224 D08B                       		add.l	a3,d0
00075226 2340 0004                  		move.l	d0,4(a1)
0007522A 335C 0008                  		move.w	(a4)+,8(a1)
0007522E D2C6                       		adda.w	d6,a1
00075230 51CF FFD6                  		dbf	d7,loc_72098
00075234 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007523A 6600                       		bne.s	loc_720D8
0007523C 702B                       		moveq	#$2B,d0
0007523E 7200                       		moveq	#0,d1
00075240 4EBA 0000                  		jsr	sub_7272E(pc)
00075244 6000 0000                  		bra.w	loc_72114
00075248                            ; ===========================================================================
00075248                            
00075248                            loc_720D8:
00075248 7028                       		moveq	#$28,d0
0007524A 7206                       		moveq	#6,d1
0007524C 4EBA 0000                  		jsr	sub_7272E(pc)
00075250 103C 0042                  		move.b	#$42,d0
00075254 727F                       		moveq	#$7F,d1
00075256 4EBA 0000                  		jsr	sub_72764(pc)
0007525A 103C 004A                  		move.b	#$4A,d0
0007525E 727F                       		moveq	#$7F,d1
00075260 4EBA 0000                  		jsr	sub_72764(pc)
00075264 103C 0046                  		move.b	#$46,d0
00075268 727F                       		moveq	#$7F,d1
0007526A 4EBA 0000                  		jsr	sub_72764(pc)
0007526E 103C 004E                  		move.b	#$4E,d0
00075272 727F                       		moveq	#$7F,d1
00075274 4EBA 0000                  		jsr	sub_72764(pc)
00075278 103C 00B6                  		move.b	#-$4A,d0
0007527C 123C 00C0                  		move.b	#-$40,d1
00075280 4EBA 0000                  		jsr	sub_72764(pc)
00075284                            
00075284                            loc_72114:
00075284 7E00                       		moveq	#0,d7
00075286 1E2B 0003                  		move.b	3(a3),d7
0007528A 6700                       		beq.s	loc_72154
0007528C 5307                       		subq.b	#1,d7
0007528E 43EE 0190                  		lea	$190(a6),a1
00075292 45FA 0000                  		lea	byte_721C2(pc),a2
00075296                            
00075296                            loc_72126:
00075296 08D1 0007                  		bset	#7,(a1)
0007529A 135A 0001                  		move.b	(a2)+,1(a1)
0007529E 1344 0002                  		move.b	d4,2(a1)
000752A2 1346 000D                  		move.b	d6,$D(a1)
000752A6 1345 000E                  		move.b	d5,$E(a1)
000752AA 7000                       		moveq	#0,d0
000752AC 301C                       		move.w	(a4)+,d0
000752AE D08B                       		add.l	a3,d0
000752B0 2340 0004                  		move.l	d0,4(a1)
000752B4 335C 0008                  		move.w	(a4)+,8(a1)
000752B8 101C                       		move.b	(a4)+,d0
000752BA 135C 000B                  		move.b	(a4)+,$B(a1)
000752BE D2C6                       		adda.w	d6,a1
000752C0 51CF FFD4                  		dbf	d7,loc_72126
000752C4                            
000752C4                            loc_72154:
000752C4 43EE 0220                  		lea	$220(a6),a1
000752C8 7E05                       		moveq	#5,d7
000752CA                            
000752CA                            loc_7215A:
000752CA 4A11                       		tst.b	(a1)
000752CC 6A00 0000                  		bpl.w	loc_7217C
000752D0 7000                       		moveq	#0,d0
000752D2 1029 0001                  		move.b	1(a1),d0
000752D6 6B00                       		bmi.s	loc_7216E
000752D8 5500                       		subq.b	#2,d0
000752DA E508                       		lsl.b	#2,d0
000752DC 6000                       		bra.s	loc_72170
000752DE                            ; ===========================================================================
000752DE                            
000752DE                            loc_7216E:
000752DE E608                       		lsr.b	#3,d0
000752E0                            
000752E0                            loc_72170:
000752E0 41FA 0000                  		lea	dword_722CC(pc),a0
000752E4 2070 0000                  		movea.l	(a0,d0.w),a0
000752E8 08D0 0002                  		bset	#2,(a0)
000752EC                            
000752EC                            loc_7217C:
000752EC D2C6                       		adda.w	d6,a1
000752EE 51CF FFDA                  		dbf	d7,loc_7215A
000752F2                            
000752F2 4A6E 0340                  		tst.w	$340(a6)
000752F6 6A00                       		bpl.s	loc_7218E
000752F8 08EE 0002 0100             		bset	#2,$100(a6)
000752FE                            
000752FE                            loc_7218E:
000752FE 4A6E 0370                  		tst.w	$370(a6)
00075302 6A00                       		bpl.s	loc_7219A
00075304 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007530A                            
0007530A                            loc_7219A:
0007530A 4BEE 0070                  		lea	$70(a6),a5
0007530E 7805                       		moveq	#5,d4
00075310                            
00075310                            loc_721A0:
00075310 4EBA 0000                  		jsr	sub_726FE(pc)
00075314 DAC6                       		adda.w	d6,a5
00075316 51CC FFF8                  		dbf	d4,loc_721A0
0007531A 7802                       		moveq	#2,d4
0007531C                            
0007531C                            loc_721AC:
0007531C 4EBA 0000                  		jsr	sub_729A0(pc)
00075320 DAC6                       		adda.w	d6,a5
00075322 51CC FFF8                  		dbf	d4,loc_721AC
00075326                            
00075326                            loc_721B6:
00075326 584F                       		addq.w	#4,sp
00075328 4E75                       		rts	
0007532A                            ; ===========================================================================
0007532A 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00075332                            		even
00075332 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00075336                            		even
00075336                            ; ===========================================================================
00075336                            ; ---------------------------------------------------------------------------
00075336                            ; Play normal sound effect
00075336                            ; ---------------------------------------------------------------------------
00075336                            
00075336                            Sound_A0toCF:				; XREF: Sound_ChkValue
00075336 4A2E 0027                  		tst.b	$27(a6)
0007533A 6600 0000                  		bne.w	loc_722C6
0007533E 4A2E 0004                  		tst.b	4(a6)
00075342 6600 0000                  		bne.w	loc_722C6
00075346 4A2E 0024                  		tst.b	$24(a6)
0007534A 6600 0000                  		bne.w	loc_722C6
0007534E 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00075352 6600                       		bne.s	Sound_notB5	; if not, branch
00075354 4A2E 002B                  		tst.b	$2B(a6)
00075358 6600                       		bne.s	loc_721EE
0007535A 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007535E                            
0007535E                            loc_721EE:
0007535E 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00075364                            
00075364                            Sound_notB5:
00075364 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00075368 6600                       		bne.s	Sound_notA7	; if not, branch
0007536A 4A2E 002C                  		tst.b	$2C(a6)
0007536E 6600 0000                  		bne.w	locret_722C4
00075372 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00075378                            
00075378                            Sound_notA7:
00075378 2079 0007 49F8             		movea.l	(Go_SoundIndex).l,a0
0007537E 0407 00A0                  		subi.b	#$A0,d7
00075382 E54F                       		lsl.w	#2,d7
00075384 2670 7000                  		movea.l	(a0,d7.w),a3
00075388 224B                       		movea.l	a3,a1
0007538A 7200                       		moveq	#0,d1
0007538C 3219                       		move.w	(a1)+,d1
0007538E D28B                       		add.l	a3,d1
00075390 1A19                       		move.b	(a1)+,d5
00075392 1E19                       		move.b	(a1)+,d7
00075394 5307                       		subq.b	#1,d7
00075396 7C30                       		moveq	#$30,d6
00075398                            
00075398                            loc_72228:
00075398 7600                       		moveq	#0,d3
0007539A 1629 0001                  		move.b	1(a1),d3
0007539E 1803                       		move.b	d3,d4
000753A0 6B00                       		bmi.s	loc_72244
000753A2 5543                       		subq.w	#2,d3
000753A4 E54B                       		lsl.w	#2,d3
000753A6 4BFA 0000                  		lea	dword_722CC(pc),a5
000753AA 2A75 3000                  		movea.l	(a5,d3.w),a5
000753AE 08D5 0002                  		bset	#2,(a5)
000753B2 6000                       		bra.s	loc_7226E
000753B4                            ; ===========================================================================
000753B4                            
000753B4                            loc_72244:
000753B4 E64B                       		lsr.w	#3,d3
000753B6 4BFA 0000                  		lea	dword_722CC(pc),a5
000753BA 2A75 3000                  		movea.l	(a5,d3.w),a5
000753BE 08D5 0002                  		bset	#2,(a5)
000753C2 0C04 00C0                  		cmpi.b	#$C0,d4
000753C6 6600                       		bne.s	loc_7226E
000753C8 1004                       		move.b	d4,d0
000753CA 0000 001F                  		ori.b	#$1F,d0
000753CE 13C0 00C0 0011             		move.b	d0,($C00011).l
000753D4 0840 0005                  		bchg	#5,d0
000753D8 13C0 00C0 0011             		move.b	d0,($C00011).l
000753DE                            
000753DE                            loc_7226E:
000753DE 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000753E2 244D                       		movea.l	a5,a2
000753E4 700B                       		moveq	#$B,d0
000753E6                            
000753E6                            loc_72276:
000753E6 429A                       		clr.l	(a2)+
000753E8 51C8 FFFC                  		dbf	d0,loc_72276
000753EC                            
000753EC 3A99                       		move.w	(a1)+,(a5)
000753EE 1B45 0002                  		move.b	d5,2(a5)
000753F2 7000                       		moveq	#0,d0
000753F4 3019                       		move.w	(a1)+,d0
000753F6 D08B                       		add.l	a3,d0
000753F8 2B40 0004                  		move.l	d0,4(a5)
000753FC 3B59 0008                  		move.w	(a1)+,8(a5)
00075400 1B7C 0001 000E             		move.b	#1,$E(a5)
00075406 1B46 000D                  		move.b	d6,$D(a5)
0007540A 4A04                       		tst.b	d4
0007540C 6B00                       		bmi.s	loc_722A8
0007540E 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075414 2B41 0020                  		move.l	d1,$20(a5)
00075418                            
00075418                            loc_722A8:
00075418 51CF FF7E                  		dbf	d7,loc_72228
0007541C                            
0007541C 4A2E 0250                  		tst.b	$250(a6)
00075420 6A00                       		bpl.s	loc_722B8
00075422 08EE 0002 0340             		bset	#2,$340(a6)
00075428                            
00075428                            loc_722B8:
00075428 4A2E 0310                  		tst.b	$310(a6)
0007542C 6A00                       		bpl.s	locret_722C4
0007542E 08EE 0002 0370             		bset	#2,$370(a6)
00075434                            
00075434                            locret_722C4:
00075434 4E75                       		rts	
00075436                            ; ===========================================================================
00075436                            
00075436                            loc_722C6:
00075436 4216                       		clr.b	0(a6)
00075438 4E75                       		rts	
0007543A                            ; ===========================================================================
0007543A 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007543E 0000 0000                  		dc.l 0
00075442 00FF F100                  		dc.l $FFF100
00075446 00FF F130                  		dc.l $FFF130
0007544A 00FF F190                  		dc.l $FFF190
0007544E 00FF F1C0                  		dc.l $FFF1C0
00075452 00FF F1F0                  		dc.l $FFF1F0
00075456 00FF F1F0                  		dc.l $FFF1F0
0007545A 00FF F220                  dword_722EC:	dc.l $FFF220
0007545E 0000 0000                  		dc.l 0
00075462 00FF F250                  		dc.l $FFF250
00075466 00FF F280                  		dc.l $FFF280
0007546A 00FF F2B0                  		dc.l $FFF2B0
0007546E 00FF F2E0                  		dc.l $FFF2E0
00075472 00FF F310                  		dc.l $FFF310
00075476 00FF F310                  		dc.l $FFF310
0007547A                            ; ===========================================================================
0007547A                            ; ---------------------------------------------------------------------------
0007547A                            ; Play GHZ waterfall sound
0007547A                            ; ---------------------------------------------------------------------------
0007547A                            
0007547A                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007547A 4A2E 0027                  		tst.b	$27(a6)
0007547E 6600 0000                  		bne.w	locret_723C6
00075482 4A2E 0004                  		tst.b	4(a6)
00075486 6600 0000                  		bne.w	locret_723C6
0007548A 4A2E 0024                  		tst.b	$24(a6)
0007548E 6600 0000                  		bne.w	locret_723C6
00075492 2079 0007 49F0             		movea.l	(Go_SoundD0).l,a0
00075498 0407 00D0                  		subi.b	#$D0,d7
0007549C E54F                       		lsl.w	#2,d7
0007549E 2670 7000                  		movea.l	(a0,d7.w),a3
000754A2 224B                       		movea.l	a3,a1
000754A4 7000                       		moveq	#0,d0
000754A6 3019                       		move.w	(a1)+,d0
000754A8 D08B                       		add.l	a3,d0
000754AA 2D40 0020                  		move.l	d0,$20(a6)
000754AE 1A19                       		move.b	(a1)+,d5
000754B0 1E19                       		move.b	(a1)+,d7
000754B2 5307                       		subq.b	#1,d7
000754B4 7C30                       		moveq	#$30,d6
000754B6                            
000754B6                            loc_72348:
000754B6 1829 0001                  		move.b	1(a1),d4
000754BA 6B00                       		bmi.s	loc_7235A
000754BC 08EE 0002 0100             		bset	#2,$100(a6)
000754C2 4BEE 0340                  		lea	$340(a6),a5
000754C6 6000                       		bra.s	loc_72364
000754C8                            ; ===========================================================================
000754C8                            
000754C8                            loc_7235A:
000754C8 08EE 0002 01F0             		bset	#2,$1F0(a6)
000754CE 4BEE 0370                  		lea	$370(a6),a5
000754D2                            
000754D2                            loc_72364:
000754D2 244D                       		movea.l	a5,a2
000754D4 700B                       		moveq	#$B,d0
000754D6                            
000754D6                            loc_72368:
000754D6 429A                       		clr.l	(a2)+
000754D8 51C8 FFFC                  		dbf	d0,loc_72368
000754DC                            
000754DC 3A99                       		move.w	(a1)+,(a5)
000754DE 1B45 0002                  		move.b	d5,2(a5)
000754E2 7000                       		moveq	#0,d0
000754E4 3019                       		move.w	(a1)+,d0
000754E6 D08B                       		add.l	a3,d0
000754E8 2B40 0004                  		move.l	d0,4(a5)
000754EC 3B59 0008                  		move.w	(a1)+,8(a5)
000754F0 1B7C 0001 000E             		move.b	#1,$E(a5)
000754F6 1B46 000D                  		move.b	d6,$D(a5)
000754FA 4A04                       		tst.b	d4
000754FC 6B00                       		bmi.s	loc_72396
000754FE 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075504                            
00075504                            loc_72396:
00075504 51CF FFB0                  		dbf	d7,loc_72348
00075508                            
00075508 4A2E 0250                  		tst.b	$250(a6)
0007550C 6A00                       		bpl.s	loc_723A6
0007550E 08EE 0002 0340             		bset	#2,$340(a6)
00075514                            
00075514                            loc_723A6:
00075514 4A2E 0310                  		tst.b	$310(a6)
00075518 6A00                       		bpl.s	locret_723C6
0007551A 08EE 0002 0370             		bset	#2,$370(a6)
00075520 0004 001F                  		ori.b	#$1F,d4
00075524 13C4 00C0 0011             		move.b	d4,($C00011).l
0007552A 0844 0005                  		bchg	#5,d4
0007552E 13C4 00C0 0011             		move.b	d4,($C00011).l
00075534                            
00075534                            locret_723C6:
00075534 4E75                       		rts	
00075536                            ; End of function Sound_ChkValue
00075536                            
00075536                            ; ===========================================================================
00075536 00FF F100                  		dc.l $FFF100
0007553A 00FF F1F0                  		dc.l $FFF1F0
0007553E 00FF F250                  		dc.l $FFF250
00075542 00FF F310                  		dc.l $FFF310
00075546 00FF F340                  		dc.l $FFF340
0007554A 00FF F370                  		dc.l $FFF370
0007554E                            
0007554E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007554E                            
0007554E                            
0007554E                            Snd_FadeOut1:				; XREF: Sound_E0
0007554E 4216                       		clr.b	0(a6)
00075550 4BEE 0220                  		lea	$220(a6),a5
00075554 7E05                       		moveq	#5,d7
00075556                            
00075556                            loc_723EA:
00075556 4A15                       		tst.b	(a5)
00075558 6A00 0000                  		bpl.w	loc_72472
0007555C 0895 0007                  		bclr	#7,(a5)
00075560 7600                       		moveq	#0,d3
00075562 162D 0001                  		move.b	1(a5),d3
00075566 6B00                       		bmi.s	loc_7243C
00075568 4EBA 0000                  		jsr	sub_726FE(pc)
0007556C 0C03 0004                  		cmpi.b	#4,d3
00075570 6600                       		bne.s	loc_72416
00075572 4A2E 0340                  		tst.b	$340(a6)
00075576 6A00                       		bpl.s	loc_72416
00075578 4BEE 0340                  		lea	$340(a6),a5
0007557C 226E 0020                  		movea.l	$20(a6),a1
00075580 6000                       		bra.s	loc_72428
00075582                            ; ===========================================================================
00075582                            
00075582                            loc_72416:
00075582 5503                       		subq.b	#2,d3
00075584 E50B                       		lsl.b	#2,d3
00075586 41FA FEB2                  		lea	dword_722CC(pc),a0
0007558A 264D                       		movea.l	a5,a3
0007558C 2A70 3000                  		movea.l	(a0,d3.w),a5
00075590 226E 0018                  		movea.l	$18(a6),a1
00075594                            
00075594                            loc_72428:
00075594 0895 0002                  		bclr	#2,(a5)
00075598 08D5 0001                  		bset	#1,(a5)
0007559C 102D 000B                  		move.b	$B(a5),d0
000755A0 4EBA 0000                  		jsr	sub_72C4E(pc)
000755A4 2A4B                       		movea.l	a3,a5
000755A6 6000                       		bra.s	loc_72472
000755A8                            ; ===========================================================================
000755A8                            
000755A8                            loc_7243C:
000755A8 4EBA 0000                  		jsr	sub_729A0(pc)
000755AC 41EE 0370                  		lea	$370(a6),a0
000755B0 0C03 00E0                  		cmpi.b	#$E0,d3
000755B4 6700                       		beq.s	loc_7245A
000755B6 0C03 00C0                  		cmpi.b	#$C0,d3
000755BA 6700                       		beq.s	loc_7245A
000755BC E60B                       		lsr.b	#3,d3
000755BE 41FA FE7A                  		lea	dword_722CC(pc),a0
000755C2 2070 3000                  		movea.l	(a0,d3.w),a0
000755C6                            
000755C6                            loc_7245A:
000755C6 0890 0002                  		bclr	#2,(a0)
000755CA 08D0 0001                  		bset	#1,(a0)
000755CE 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000755D4 6600                       		bne.s	loc_72472
000755D6 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000755DE                            
000755DE                            loc_72472:
000755DE DAFC 0030                  		adda.w	#$30,a5
000755E2 51CF FF72                  		dbf	d7,loc_723EA
000755E6                            
000755E6 4E75                       		rts	
000755E8                            ; End of function Snd_FadeOut1
000755E8                            
000755E8                            
000755E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000755E8                            
000755E8                            
000755E8                            Snd_FadeOut2:				; XREF: Sound_E0
000755E8 4BEE 0340                  		lea	$340(a6),a5
000755EC 4A15                       		tst.b	(a5)
000755EE 6A00                       		bpl.s	loc_724AE
000755F0 0895 0007                  		bclr	#7,(a5)
000755F4 0815 0002                  		btst	#2,(a5)
000755F8 6600                       		bne.s	loc_724AE
000755FA 4EBA 0000                  		jsr	loc_7270A(pc)
000755FE 4BEE 0100                  		lea	$100(a6),a5
00075602 0895 0002                  		bclr	#2,(a5)
00075606 08D5 0001                  		bset	#1,(a5)
0007560A 4A15                       		tst.b	(a5)
0007560C 6A00                       		bpl.s	loc_724AE
0007560E 226E 0018                  		movea.l	$18(a6),a1
00075612 102D 000B                  		move.b	$B(a5),d0
00075616 4EBA 0000                  		jsr	sub_72C4E(pc)
0007561A                            
0007561A                            loc_724AE:
0007561A 4BEE 0370                  		lea	$370(a6),a5
0007561E 4A15                       		tst.b	(a5)
00075620 6A00                       		bpl.s	locret_724E4
00075622 0895 0007                  		bclr	#7,(a5)
00075626 0815 0002                  		btst	#2,(a5)
0007562A 6600                       		bne.s	locret_724E4
0007562C 4EBA 0000                  		jsr	loc_729A6(pc)
00075630 4BEE 01F0                  		lea	$1F0(a6),a5
00075634 0895 0002                  		bclr	#2,(a5)
00075638 08D5 0001                  		bset	#1,(a5)
0007563C 4A15                       		tst.b	(a5)
0007563E 6A00                       		bpl.s	locret_724E4
00075640 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00075646 6600                       		bne.s	locret_724E4
00075648 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00075650                            
00075650                            locret_724E4:
00075650 4E75                       		rts	
00075652                            ; End of function Snd_FadeOut2
00075652                            
00075652                            ; ===========================================================================
00075652                            ; ---------------------------------------------------------------------------
00075652                            ; Fade out music
00075652                            ; ---------------------------------------------------------------------------
00075652                            
00075652                            Sound_E0:				; XREF: Sound_ExIndex
00075652 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00075656 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007565A 1D7C 0003 0006             		move.b	#3,6(a6)
00075660 1D7C 0028 0004             		move.b	#$28,4(a6)
00075666 422E 0040                  		clr.b	$40(a6)
0007566A 422E 002A                  		clr.b	$2A(a6)
0007566E 4E75                       		rts	
00075670                            
00075670                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075670                            
00075670                            
00075670                            sub_72504:				; XREF: sub_71B4C
00075670 102E 0006                  		move.b	6(a6),d0
00075674 6700                       		beq.s	loc_72510
00075676 532E 0006                  		subq.b	#1,6(a6)
0007567A 4E75                       		rts	
0007567C                            ; ===========================================================================
0007567C                            
0007567C                            loc_72510:
0007567C 532E 0004                  		subq.b	#1,4(a6)
00075680 6700 0000                  		beq.w	Sound_E4
00075684 1D7C 0003 0006             		move.b	#3,6(a6)
0007568A 4BEE 0070                  		lea	$70(a6),a5
0007568E 7E05                       		moveq	#5,d7
00075690                            
00075690                            loc_72524:
00075690 4A15                       		tst.b	(a5)
00075692 6A00                       		bpl.s	loc_72538
00075694 522D 0009                  		addq.b	#1,9(a5)
00075698 6A00                       		bpl.s	loc_72534
0007569A 0895 0007                  		bclr	#7,(a5)
0007569E 6000                       		bra.s	loc_72538
000756A0                            ; ===========================================================================
000756A0                            
000756A0                            loc_72534:
000756A0 4EBA 0000                  		jsr	sub_72CB4(pc)
000756A4                            
000756A4                            loc_72538:
000756A4 DAFC 0030                  		adda.w	#$30,a5
000756A8 51CF FFE6                  		dbf	d7,loc_72524
000756AC                            
000756AC 7E02                       		moveq	#2,d7
000756AE                            
000756AE                            loc_72542:
000756AE 4A15                       		tst.b	(a5)
000756B0 6A00                       		bpl.s	loc_72560
000756B2 522D 0009                  		addq.b	#1,9(a5)
000756B6 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000756BC 6500                       		bcs.s	loc_72558
000756BE 0895 0007                  		bclr	#7,(a5)
000756C2 6000                       		bra.s	loc_72560
000756C4                            ; ===========================================================================
000756C4                            
000756C4                            loc_72558:
000756C4 1C2D 0009                  		move.b	9(a5),d6
000756C8 4EBA 0000                  		jsr	sub_7296A(pc)
000756CC                            
000756CC                            loc_72560:
000756CC DAFC 0030                  		adda.w	#$30,a5
000756D0 51CF FFDC                  		dbf	d7,loc_72542
000756D4                            
000756D4 4E75                       		rts	
000756D6                            ; End of function sub_72504
000756D6                            
000756D6                            
000756D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756D6                            
000756D6                            
000756D6                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000756D6 7602                       		moveq	#2,d3
000756D8 7028                       		moveq	#$28,d0
000756DA                            
000756DA                            loc_7256E:
000756DA 1203                       		move.b	d3,d1
000756DC 4EBA 0000                  		jsr	sub_7272E(pc)
000756E0 5801                       		addq.b	#4,d1
000756E2 4EBA 0000                  		jsr	sub_7272E(pc)
000756E6 51CB FFF2                  		dbf	d3,loc_7256E
000756EA                            
000756EA 7040                       		moveq	#$40,d0
000756EC 727F                       		moveq	#$7F,d1
000756EE 7802                       		moveq	#2,d4
000756F0                            
000756F0                            loc_72584:
000756F0 7603                       		moveq	#3,d3
000756F2                            
000756F2                            loc_72586:
000756F2 4EBA 0000                  		jsr	sub_7272E(pc)
000756F6 4EBA 0000                  		jsr	sub_72764(pc)
000756FA 5840                       		addq.w	#4,d0
000756FC 51CB FFF4                  		dbf	d3,loc_72586
00075700                            
00075700 0400 000F                  		subi.b	#$F,d0
00075704 51CC FFEA                  		dbf	d4,loc_72584
00075708                            
00075708 4E75                       		rts	
0007570A                            ; End of function sub_7256A
0007570A                            
0007570A                            ; ===========================================================================
0007570A                            ; ---------------------------------------------------------------------------
0007570A                            ; Stop music
0007570A                            ; ---------------------------------------------------------------------------
0007570A                            
0007570A                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007570A 702B                       		moveq	#$2B,d0
0007570C 123C 0080                  		move.b	#$80,d1
00075710 4EBA 0000                  		jsr	sub_7272E(pc)
00075714 7027                       		moveq	#$27,d0
00075716 7200                       		moveq	#0,d1
00075718 4EBA 0000                  		jsr	sub_7272E(pc)
0007571C 204E                       		movea.l	a6,a0
0007571E 303C 00E3                  		move.w	#$E3,d0
00075722                            
00075722                            loc_725B6:
00075722 4298                       		clr.l	(a0)+
00075724 51C8 FFFC                  		dbf	d0,loc_725B6
00075728                            
00075728 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007572E 4EBA FFA6                  		jsr	sub_7256A(pc)
00075732 6000 0000                  		bra.w	sub_729B6
00075736                            
00075736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075736                            
00075736                            
00075736                            sub_725CA:				; XREF: Sound_ChkValue
00075736 204E                       		movea.l	a6,a0
00075738 1216                       		move.b	0(a6),d1
0007573A 142E 0027                  		move.b	$27(a6),d2
0007573E 162E 002A                  		move.b	$2A(a6),d3
00075742 182E 0026                  		move.b	$26(a6),d4
00075746 3A2E 000A                  		move.w	$A(a6),d5
0007574A 303C 0087                  		move.w	#$87,d0
0007574E                            
0007574E                            loc_725E4:
0007574E 4298                       		clr.l	(a0)+
00075750 51C8 FFFC                  		dbf	d0,loc_725E4
00075754                            
00075754 1C81                       		move.b	d1,0(a6)
00075756 1D42 0027                  		move.b	d2,$27(a6)
0007575A 1D43 002A                  		move.b	d3,$2A(a6)
0007575E 1D44 0026                  		move.b	d4,$26(a6)
00075762 3D45 000A                  		move.w	d5,$A(a6)
00075766 1D7C 0080 0009             		move.b	#$80,9(a6)
0007576C 4EBA FF68                  		jsr	sub_7256A(pc)
00075770 6000 0000                  		bra.w	sub_729B6
00075774                            ; End of function sub_725CA
00075774                            
00075774                            
00075774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075774                            
00075774                            
00075774                            sub_7260C:				; XREF: sub_71B4C
00075774 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007577A 41EE 004E                  		lea	$4E(a6),a0
0007577E 7030                       		moveq	#$30,d0
00075780 7209                       		moveq	#9,d1
00075782                            
00075782                            loc_7261A:
00075782 5210                       		addq.b	#1,(a0)
00075784 D0C0                       		adda.w	d0,a0
00075786 51C9 FFFA                  		dbf	d1,loc_7261A
0007578A                            
0007578A 4E75                       		rts	
0007578C                            ; End of function sub_7260C
0007578C                            
0007578C                            ; ===========================================================================
0007578C                            ; ---------------------------------------------------------------------------
0007578C                            ; Speed	up music
0007578C                            ; ---------------------------------------------------------------------------
0007578C                            
0007578C                            Sound_E2:				; XREF: Sound_ExIndex
0007578C 4A2E 0027                  		tst.b	$27(a6)
00075790 6600                       		bne.s	loc_7263E
00075792 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00075798 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007579E 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000757A4 4E75                       		rts	
000757A6                            ; ===========================================================================
000757A6                            
000757A6                            loc_7263E:
000757A6 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
000757AC 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000757B2 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000757B8 4E75                       		rts	
000757BA                            ; ===========================================================================
000757BA                            ; ---------------------------------------------------------------------------
000757BA                            ; Change music back to normal speed
000757BA                            ; ---------------------------------------------------------------------------
000757BA                            
000757BA                            Sound_E3:				; XREF: Sound_ExIndex
000757BA 4A2E 0027                  		tst.b	$27(a6)
000757BE 6600                       		bne.s	loc_7266A
000757C0 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000757C6 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000757CC 422E 002A                  		clr.b	$2A(a6)
000757D0 4E75                       		rts	
000757D2                            ; ===========================================================================
000757D2                            
000757D2                            loc_7266A:
000757D2 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
000757D8 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
000757DE 422E 03CA                  		clr.b	$3CA(a6)
000757E2 4E75                       		rts	
000757E4                            
000757E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000757E4                            
000757E4                            
000757E4                            sub_7267C:				; XREF: sub_71B4C
000757E4 4A2E 0025                  		tst.b	$25(a6)
000757E8 6700                       		beq.s	loc_72688
000757EA 532E 0025                  		subq.b	#1,$25(a6)
000757EE 4E75                       		rts	
000757F0                            ; ===========================================================================
000757F0                            
000757F0                            loc_72688:
000757F0 4A2E 0026                  		tst.b	$26(a6)
000757F4 6700                       		beq.s	loc_726D6
000757F6 532E 0026                  		subq.b	#1,$26(a6)
000757FA 1D7C 0002 0025             		move.b	#2,$25(a6)
00075800 4BEE 0070                  		lea	$70(a6),a5
00075804 7E05                       		moveq	#5,d7
00075806                            
00075806                            loc_7269E:
00075806 4A15                       		tst.b	(a5)
00075808 6A00                       		bpl.s	loc_726AA
0007580A 532D 0009                  		subq.b	#1,9(a5)
0007580E 4EBA 0000                  		jsr	sub_72CB4(pc)
00075812                            
00075812                            loc_726AA:
00075812 DAFC 0030                  		adda.w	#$30,a5
00075816 51CF FFEE                  		dbf	d7,loc_7269E
0007581A 7E02                       		moveq	#2,d7
0007581C                            
0007581C                            loc_726B4:
0007581C 4A15                       		tst.b	(a5)
0007581E 6A00                       		bpl.s	loc_726CC
00075820 532D 0009                  		subq.b	#1,9(a5)
00075824 1C2D 0009                  		move.b	9(a5),d6
00075828 0C06 0010                  		cmpi.b	#$10,d6
0007582C 6500                       		bcs.s	loc_726C8
0007582E 7C0F                       		moveq	#$F,d6
00075830                            
00075830                            loc_726C8:
00075830 4EBA 0000                  		jsr	sub_7296A(pc)
00075834                            
00075834                            loc_726CC:
00075834 DAFC 0030                  		adda.w	#$30,a5
00075838 51CF FFE2                  		dbf	d7,loc_726B4
0007583C 4E75                       		rts	
0007583E                            ; ===========================================================================
0007583E                            
0007583E                            loc_726D6:
0007583E 08AE 0002 0040             		bclr	#2,$40(a6)
00075844 422E 0024                  		clr.b	$24(a6)
00075848 4E75                       		rts	
0007584A                            ; End of function sub_7267C
0007584A                            
0007584A                            ; ===========================================================================
0007584A                            
0007584A                            loc_726E2:				; XREF: sub_71CCA
0007584A 0815 0001                  		btst	#1,(a5)
0007584E 6600                       		bne.s	locret_726FC
00075850 0815 0002                  		btst	#2,(a5)
00075854 6600                       		bne.s	locret_726FC
00075856 7028                       		moveq	#$28,d0
00075858 122D 0001                  		move.b	1(a5),d1
0007585C 0001 00F0                  		ori.b	#-$10,d1
00075860 6000 0000                  		bra.w	sub_7272E
00075864                            ; ===========================================================================
00075864                            
00075864                            locret_726FC:
00075864 4E75                       		rts	
00075866                            
00075866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075866                            
00075866                            
00075866                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00075866 0815 0004                  		btst	#4,(a5)
0007586A 6600                       		bne.s	locret_72714
0007586C 0815 0002                  		btst	#2,(a5)
00075870 6600                       		bne.s	locret_72714
00075872                            
00075872                            loc_7270A:				; XREF: Snd_FadeOut2
00075872 7028                       		moveq	#$28,d0
00075874 122D 0001                  		move.b	1(a5),d1
00075878 6000 0000                  		bra.w	sub_7272E
0007587C                            ; ===========================================================================
0007587C                            
0007587C                            locret_72714:
0007587C 4E75                       		rts	
0007587E                            ; End of function sub_726FE
0007587E                            
0007587E                            ; ===========================================================================
0007587E                            
0007587E                            loc_72716:				; XREF: sub_72A5A
0007587E 0815 0002                  		btst	#2,(a5)
00075882 6600                       		bne.s	locret_72720
00075884 6000 0000                  		bra.w	sub_72722
00075888                            ; ===========================================================================
00075888                            
00075888                            locret_72720:
00075888 4E75                       		rts	
0007588A                            
0007588A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007588A                            
0007588A                            
0007588A                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007588A 082D 0002 0001             		btst	#2,1(a5)
00075890 6600                       		bne.s	loc_7275A
00075892 D02D 0001                  		add.b	1(a5),d0
00075896                            ; End of function sub_72722
00075896                            
00075896                            
00075896                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075896                            
00075896                            
00075896                            sub_7272E:				; XREF: loc_71E6A
00075896 1439 00A0 4000             		move.b	($A04000).l,d2
0007589C 0802 0007                  		btst	#7,d2
000758A0 66F4                       		bne.s	sub_7272E
000758A2 13C0 00A0 4000             		move.b	d0,($A04000).l
000758A8 4E71                       		nop	
000758AA 4E71                       		nop	
000758AC 4E71                       		nop	
000758AE                            
000758AE                            loc_72746:
000758AE 1439 00A0 4000             		move.b	($A04000).l,d2
000758B4 0802 0007                  		btst	#7,d2
000758B8 66F4                       		bne.s	loc_72746
000758BA                            
000758BA 13C1 00A0 4001             		move.b	d1,($A04001).l
000758C0 4E75                       		rts	
000758C2                            ; End of function sub_7272E
000758C2                            
000758C2                            ; ===========================================================================
000758C2                            
000758C2                            loc_7275A:				; XREF: sub_72722
000758C2 142D 0001                  		move.b	1(a5),d2
000758C6 0882 0002                  		bclr	#2,d2
000758CA D002                       		add.b	d2,d0
000758CC                            
000758CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758CC                            
000758CC                            
000758CC                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
000758CC 1439 00A0 4000             		move.b	($A04000).l,d2
000758D2 0802 0007                  		btst	#7,d2
000758D6 66F4                       		bne.s	sub_72764
000758D8 13C0 00A0 4002             		move.b	d0,($A04002).l
000758DE 4E71                       		nop	
000758E0 4E71                       		nop	
000758E2 4E71                       		nop	
000758E4                            
000758E4                            loc_7277C:
000758E4 1439 00A0 4000             		move.b	($A04000).l,d2
000758EA 0802 0007                  		btst	#7,d2
000758EE 66F4                       		bne.s	loc_7277C
000758F0                            
000758F0 13C1 00A0 4003             		move.b	d1,($A04003).l
000758F6 4E75                       		rts	
000758F8                            ; End of function sub_72764
000758F8                            
000758F8                            ; ===========================================================================
000758F8 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007590A 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007591C 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007592C 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007593C 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007594C 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007595C 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007596C 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007597C 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007598C 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007599C 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000759AC 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000759B8                            
000759B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000759B8                            
000759B8                            
000759B8                            sub_72850:				; XREF: sub_71B4C
000759B8 532D 000E                  		subq.b	#1,$E(a5)
000759BC 6600                       		bne.s	loc_72866
000759BE 0895 0004                  		bclr	#4,(a5)
000759C2 4EBA 0000                  		jsr	sub_72878(pc)
000759C6 4EBA 0000                  		jsr	sub_728DC(pc)
000759CA 6000 0000                  		bra.w	loc_7292E
000759CE                            ; ===========================================================================
000759CE                            
000759CE                            loc_72866:
000759CE 4EBA F45A                  		jsr	sub_71D9E(pc)
000759D2 4EBA 0000                  		jsr	sub_72926(pc)
000759D6 4EBA F47A                  		jsr	sub_71DC6(pc)
000759DA 4EBA 0000                  		jsr	sub_728E2(pc)
000759DE 4E75                       		rts	
000759E0                            ; End of function sub_72850
000759E0                            
000759E0                            
000759E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000759E0                            
000759E0                            
000759E0                            sub_72878:				; XREF: sub_72850
000759E0 0895 0001                  		bclr	#1,(a5)
000759E4 286D 0004                  		movea.l	4(a5),a4
000759E8                            
000759E8                            loc_72880:
000759E8 7A00                       		moveq	#0,d5
000759EA 1A1C                       		move.b	(a4)+,d5
000759EC 0C05 00E0                  		cmpi.b	#$E0,d5
000759F0 6500                       		bcs.s	loc_72890
000759F2 4EBA 0000                  		jsr	sub_72A5A(pc)
000759F6 60F0                       		bra.s	loc_72880
000759F8                            ; ===========================================================================
000759F8                            
000759F8                            loc_72890:
000759F8 4A05                       		tst.b	d5
000759FA 6A00                       		bpl.s	loc_728A4
000759FC 4EBA 0000                  		jsr	sub_728AC(pc)
00075A00 1A1C                       		move.b	(a4)+,d5
00075A02 4A05                       		tst.b	d5
00075A04 6A00                       		bpl.s	loc_728A4
00075A06 534C                       		subq.w	#1,a4
00075A08 6000 F3E2                  		bra.w	sub_71D60
00075A0C                            ; ===========================================================================
00075A0C                            
00075A0C                            loc_728A4:
00075A0C 4EBA F3BE                  		jsr	sub_71D40(pc)
00075A10 6000 F3DA                  		bra.w	sub_71D60
00075A14                            ; End of function sub_72878
00075A14                            
00075A14                            
00075A14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A14                            
00075A14                            
00075A14                            sub_728AC:				; XREF: sub_72878
00075A14 0405 0081                  		subi.b	#$81,d5
00075A18 6500                       		bcs.s	loc_728CA
00075A1A DA2D 0008                  		add.b	8(a5),d5
00075A1E 0245 007F                  		andi.w	#$7F,d5
00075A22 E34D                       		lsl.w	#1,d5
00075A24 41FA 0000                  		lea	word_729CE(pc),a0
00075A28 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00075A2E 6000 F3BC                  		bra.w	sub_71D60
00075A32                            ; ===========================================================================
00075A32                            
00075A32                            loc_728CA:
00075A32 08D5 0001                  		bset	#1,(a5)
00075A36 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00075A3C 4EBA F3AE                  		jsr	sub_71D60(pc)
00075A40 6000 0000                  		bra.w	sub_729A0
00075A44                            ; End of function sub_728AC
00075A44                            
00075A44                            
00075A44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A44                            
00075A44                            
00075A44                            sub_728DC:				; XREF: sub_72850
00075A44 3C2D 0010                  		move.w	$10(a5),d6
00075A48 6B00                       		bmi.s	loc_72920
00075A4A                            ; End of function sub_728DC
00075A4A                            
00075A4A                            
00075A4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A4A                            
00075A4A                            
00075A4A                            sub_728E2:				; XREF: sub_72850
00075A4A 102D 001E                  		move.b	$1E(a5),d0
00075A4E 4880                       		ext.w	d0
00075A50 DC40                       		add.w	d0,d6
00075A52 0815 0002                  		btst	#2,(a5)
00075A56 6600                       		bne.s	locret_7291E
00075A58 0815 0001                  		btst	#1,(a5)
00075A5C 6600                       		bne.s	locret_7291E
00075A5E 102D 0001                  		move.b	1(a5),d0
00075A62 0C00 00E0                  		cmpi.b	#$E0,d0
00075A66 6600                       		bne.s	loc_72904
00075A68 103C 00C0                  		move.b	#$C0,d0
00075A6C                            
00075A6C                            loc_72904:
00075A6C 3206                       		move.w	d6,d1
00075A6E 0201 000F                  		andi.b	#$F,d1
00075A72 8001                       		or.b	d1,d0
00075A74 E84E                       		lsr.w	#4,d6
00075A76 0206 003F                  		andi.b	#$3F,d6
00075A7A 13C0 00C0 0011             		move.b	d0,($C00011).l
00075A80 13C6 00C0 0011             		move.b	d6,($C00011).l
00075A86                            
00075A86                            locret_7291E:
00075A86 4E75                       		rts	
00075A88                            ; End of function sub_728E2
00075A88                            
00075A88                            ; ===========================================================================
00075A88                            
00075A88                            loc_72920:				; XREF: sub_728DC
00075A88 08D5 0001                  		bset	#1,(a5)
00075A8C 4E75                       		rts	
00075A8E                            
00075A8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A8E                            
00075A8E                            
00075A8E                            sub_72926:				; XREF: sub_72850
00075A8E 4A2D 000B                  		tst.b	$B(a5)
00075A92 6700 0000                  		beq.w	locret_7298A
00075A96                            
00075A96                            loc_7292E:				; XREF: sub_72850
00075A96 1C2D 0009                  		move.b	9(a5),d6
00075A9A 7000                       		moveq	#0,d0
00075A9C 102D 000B                  		move.b	$B(a5),d0
00075AA0 6700                       		beq.s	sub_7296A
00075AA2 2079 0007 4A00             		movea.l	(Go_PSGIndex).l,a0
00075AA8 5340                       		subq.w	#1,d0
00075AAA E548                       		lsl.w	#2,d0
00075AAC 2070 0000                  		movea.l	(a0,d0.w),a0
00075AB0 102D 000C                  		move.b	$C(a5),d0
00075AB4 1030 0000                  		move.b	(a0,d0.w),d0
00075AB8 522D 000C                  		addq.b	#1,$C(a5)
00075ABC 0800 0007                  		btst	#7,d0
00075AC0 6700                       		beq.s	loc_72960
00075AC2 0C00 0080                  		cmpi.b	#$80,d0
00075AC6 6700                       		beq.s	loc_7299A
00075AC8                            
00075AC8                            loc_72960:
00075AC8 DC40                       		add.w	d0,d6
00075ACA 0C06 0010                  		cmpi.b	#$10,d6
00075ACE 6500                       		bcs.s	sub_7296A
00075AD0 7C0F                       		moveq	#$F,d6
00075AD2                            ; End of function sub_72926
00075AD2                            
00075AD2                            
00075AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075AD2                            
00075AD2                            
00075AD2                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00075AD2 0815 0001                  		btst	#1,(a5)
00075AD6 6600                       		bne.s	locret_7298A
00075AD8 0815 0002                  		btst	#2,(a5)
00075ADC 6600                       		bne.s	locret_7298A
00075ADE 0815 0004                  		btst	#4,(a5)
00075AE2 6600                       		bne.s	loc_7298C
00075AE4                            
00075AE4                            loc_7297C:
00075AE4 8C2D 0001                  		or.b	1(a5),d6
00075AE8 0606 0010                  		addi.b	#$10,d6
00075AEC 13C6 00C0 0011             		move.b	d6,($C00011).l
00075AF2                            
00075AF2                            locret_7298A:
00075AF2 4E75                       		rts	
00075AF4                            ; ===========================================================================
00075AF4                            
00075AF4                            loc_7298C:
00075AF4 4A2D 0013                  		tst.b	$13(a5)
00075AF8 67EA                       		beq.s	loc_7297C
00075AFA 4A2D 0012                  		tst.b	$12(a5)
00075AFE 66E4                       		bne.s	loc_7297C
00075B00 4E75                       		rts	
00075B02                            ; End of function sub_7296A
00075B02                            
00075B02                            ; ===========================================================================
00075B02                            
00075B02                            loc_7299A:				; XREF: sub_72926
00075B02 532D 000C                  		subq.b	#1,$C(a5)
00075B06 4E75                       		rts	
00075B08                            
00075B08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B08                            
00075B08                            
00075B08                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00075B08 0815 0002                  		btst	#2,(a5)
00075B0C 6600                       		bne.s	locret_729B4
00075B0E                            
00075B0E                            loc_729A6:				; XREF: Snd_FadeOut2
00075B0E 102D 0001                  		move.b	1(a5),d0
00075B12 0000 001F                  		ori.b	#$1F,d0
00075B16 13C0 00C0 0011             		move.b	d0,($C00011).l
00075B1C                            
00075B1C                            locret_729B4:
00075B1C 4E75                       		rts	
00075B1E                            ; End of function sub_729A0
00075B1E                            
00075B1E                            
00075B1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B1E                            
00075B1E                            
00075B1E                            sub_729B6:				; XREF: loc_71E7C
00075B1E 41F9 00C0 0011             		lea	($C00011).l,a0
00075B24 10BC 009F                  		move.b	#$9F,(a0)
00075B28 10BC 00BF                  		move.b	#$BF,(a0)
00075B2C 10BC 00DF                  		move.b	#$DF,(a0)
00075B30 10BC 00FF                  		move.b	#$FF,(a0)
00075B34 4E75                       		rts	
00075B36                            ; End of function sub_729B6
00075B36                            
00075B36                            ; ===========================================================================
00075B36 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00075B48 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00075B5A 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00075B6E 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00075B82 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00075B96 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00075BAA 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00075BBE 0011 0000                  		dc.w $11, 0
00075BC2                            
00075BC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075BC2                            
00075BC2                            
00075BC2                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00075BC2 0445 00E0                  		subi.w	#$E0,d5
00075BC6 E54D                       		lsl.w	#2,d5
00075BC8 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00075BCC                            ; End of function sub_72A5A
00075BCC                            
00075BCC                            ; ===========================================================================
00075BCC                            
00075BCC                            loc_72A64:
00075BCC 6000 0000                  		bra.w	loc_72ACC
00075BD0                            ; ===========================================================================
00075BD0 6000 0000                  		bra.w	loc_72AEC
00075BD4                            ; ===========================================================================
00075BD4 6000 0000                  		bra.w	loc_72AF2
00075BD8                            ; ===========================================================================
00075BD8 6000 0000                  		bra.w	loc_72AF8
00075BDC                            ; ===========================================================================
00075BDC 6000 0000                  		bra.w	loc_72B14
00075BE0                            ; ===========================================================================
00075BE0 6000 0000                  		bra.w	loc_72B9E
00075BE4                            ; ===========================================================================
00075BE4 6000 0000                  		bra.w	loc_72BA4
00075BE8                            ; ===========================================================================
00075BE8 6000 0000                  		bra.w	loc_72BAE
00075BEC                            ; ===========================================================================
00075BEC 6000 0000                  		bra.w	loc_72BB4
00075BF0                            ; ===========================================================================
00075BF0 6000 0000                  		bra.w	loc_72BBE
00075BF4                            ; ===========================================================================
00075BF4 6000 0000                  		bra.w	loc_72BC6
00075BF8                            ; ===========================================================================
00075BF8 6000 0000                  		bra.w	loc_72BD0
00075BFC                            ; ===========================================================================
00075BFC 6000 0000                  		bra.w	loc_72BE6
00075C00                            ; ===========================================================================
00075C00 6000 0000                  		bra.w	loc_72BEE
00075C04                            ; ===========================================================================
00075C04 6000 0000                  		bra.w	loc_72BF4
00075C08                            ; ===========================================================================
00075C08 6000 0000                  		bra.w	loc_72C26
00075C0C                            ; ===========================================================================
00075C0C 6000 0000                  		bra.w	loc_72D30
00075C10                            ; ===========================================================================
00075C10 6000 0000                  		bra.w	loc_72D52
00075C14                            ; ===========================================================================
00075C14 6000 0000                  		bra.w	loc_72D58
00075C18                            ; ===========================================================================
00075C18 6000 0000                  		bra.w	loc_72E06
00075C1C                            ; ===========================================================================
00075C1C 6000 0000                  		bra.w	loc_72E20
00075C20                            ; ===========================================================================
00075C20 6000 0000                  		bra.w	loc_72E26
00075C24                            ; ===========================================================================
00075C24 6000 0000                  		bra.w	loc_72E2C
00075C28                            ; ===========================================================================
00075C28 6000 0000                  		bra.w	loc_72E38
00075C2C                            ; ===========================================================================
00075C2C 6000 0000                  		bra.w	loc_72E52
00075C30                            ; ===========================================================================
00075C30 6000 0000                  		bra.w	loc_72E64
00075C34                            ; ===========================================================================
00075C34                            
00075C34                            loc_72ACC:				; XREF: loc_72A64
00075C34 121C                       		move.b	(a4)+,d1
00075C36 4A2D 0001                  		tst.b	1(a5)
00075C3A 6B00                       		bmi.s	locret_72AEA
00075C3C 102D 000A                  		move.b	$A(a5),d0
00075C40 0200 0037                  		andi.b	#$37,d0
00075C44 8200                       		or.b	d0,d1
00075C46 1B41 000A                  		move.b	d1,$A(a5)
00075C4A 103C 00B4                  		move.b	#$B4,d0
00075C4E 6000 FC2E                  		bra.w	loc_72716
00075C52                            ; ===========================================================================
00075C52                            
00075C52                            locret_72AEA:
00075C52 4E75                       		rts	
00075C54                            ; ===========================================================================
00075C54                            
00075C54                            loc_72AEC:				; XREF: loc_72A64
00075C54 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00075C58 4E75                       		rts	
00075C5A                            ; ===========================================================================
00075C5A                            
00075C5A                            loc_72AF2:				; XREF: loc_72A64
00075C5A 1D5C 0007                  		move.b	(a4)+,7(a6)
00075C5E 4E75                       		rts	
00075C60                            ; ===========================================================================
00075C60                            
00075C60                            loc_72AF8:				; XREF: loc_72A64
00075C60 7000                       		moveq	#0,d0
00075C62 102D 000D                  		move.b	$D(a5),d0
00075C66 2875 0000                  		movea.l	(a5,d0.w),a4
00075C6A 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00075C72 544C                       		addq.w	#2,a4
00075C74 5800                       		addq.b	#4,d0
00075C76 1B40 000D                  		move.b	d0,$D(a5)
00075C7A 4E75                       		rts	
00075C7C                            ; ===========================================================================
00075C7C                            
00075C7C                            loc_72B14:				; XREF: loc_72A64
00075C7C 204E                       		movea.l	a6,a0
00075C7E 43EE 03A0                  		lea	$3A0(a6),a1
00075C82 303C 0087                  		move.w	#$87,d0
00075C86                            
00075C86                            loc_72B1E:
00075C86 20D9                       		move.l	(a1)+,(a0)+
00075C88 51C8 FFFC                  		dbf	d0,loc_72B1E
00075C8C                            
00075C8C 08EE 0002 0040             		bset	#2,$40(a6)
00075C92 264D                       		movea.l	a5,a3
00075C94 1C3C 0028                  		move.b	#$28,d6
00075C98 9C2E 0026                  		sub.b	$26(a6),d6
00075C9C 7E05                       		moveq	#5,d7
00075C9E 4BEE 0070                  		lea	$70(a6),a5
00075CA2                            
00075CA2                            loc_72B3A:
00075CA2 0815 0007                  		btst	#7,(a5)
00075CA6 6700                       		beq.s	loc_72B5C
00075CA8 08D5 0001                  		bset	#1,(a5)
00075CAC DD2D 0009                  		add.b	d6,9(a5)
00075CB0 0815 0002                  		btst	#2,(a5)
00075CB4 6600                       		bne.s	loc_72B5C
00075CB6 7000                       		moveq	#0,d0
00075CB8 102D 000B                  		move.b	$B(a5),d0
00075CBC 226E 0018                  		movea.l	$18(a6),a1
00075CC0 4EBA 0000                  		jsr	sub_72C4E(pc)
00075CC4                            
00075CC4                            loc_72B5C:
00075CC4 DAFC 0030                  		adda.w	#$30,a5
00075CC8 51CF FFD8                  		dbf	d7,loc_72B3A
00075CCC                            
00075CCC 7E02                       		moveq	#2,d7
00075CCE                            
00075CCE                            loc_72B66:
00075CCE 0815 0007                  		btst	#7,(a5)
00075CD2 6700                       		beq.s	loc_72B78
00075CD4 08D5 0001                  		bset	#1,(a5)
00075CD8 4EBA FE2E                  		jsr	sub_729A0(pc)
00075CDC DD2D 0009                  		add.b	d6,9(a5)
00075CE0                            
00075CE0                            loc_72B78:
00075CE0 DAFC 0030                  		adda.w	#$30,a5
00075CE4 51CF FFE8                  		dbf	d7,loc_72B66
00075CE8 2A4B                       		movea.l	a3,a5
00075CEA 1D7C 0080 0024             		move.b	#$80,$24(a6)
00075CF0 1D7C 0028 0026             		move.b	#$28,$26(a6)
00075CF6 422E 0027                  		clr.b	$27(a6)
00075CFA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00075D02 504F                       		addq.w	#8,sp
00075D04 4E75                       		rts	
00075D06                            ; ===========================================================================
00075D06                            
00075D06                            loc_72B9E:				; XREF: loc_72A64
00075D06 1B5C 0002                  		move.b	(a4)+,2(a5)
00075D0A 4E75                       		rts	
00075D0C                            ; ===========================================================================
00075D0C                            
00075D0C                            loc_72BA4:				; XREF: loc_72A64
00075D0C 101C                       		move.b	(a4)+,d0
00075D0E D12D 0009                  		add.b	d0,9(a5)
00075D12 6000 0000                  		bra.w	sub_72CB4
00075D16                            ; ===========================================================================
00075D16                            
00075D16                            loc_72BAE:				; XREF: loc_72A64
00075D16 08D5 0004                  		bset	#4,(a5)
00075D1A 4E75                       		rts	
00075D1C                            ; ===========================================================================
00075D1C                            
00075D1C                            loc_72BB4:				; XREF: loc_72A64
00075D1C 1B54 0012                  		move.b	(a4),$12(a5)
00075D20 1B5C 0013                  		move.b	(a4)+,$13(a5)
00075D24 4E75                       		rts	
00075D26                            ; ===========================================================================
00075D26                            
00075D26                            loc_72BBE:				; XREF: loc_72A64
00075D26 101C                       		move.b	(a4)+,d0
00075D28 D12D 0008                  		add.b	d0,8(a5)
00075D2C 4E75                       		rts	
00075D2E                            ; ===========================================================================
00075D2E                            
00075D2E                            loc_72BC6:				; XREF: loc_72A64
00075D2E 1D54 0002                  		move.b	(a4),2(a6)
00075D32 1D5C 0001                  		move.b	(a4)+,1(a6)
00075D36 4E75                       		rts	
00075D38                            ; ===========================================================================
00075D38                            
00075D38                            loc_72BD0:				; XREF: loc_72A64
00075D38 41EE 0040                  		lea	$40(a6),a0
00075D3C 101C                       		move.b	(a4)+,d0
00075D3E 7230                       		moveq	#$30,d1
00075D40 7409                       		moveq	#9,d2
00075D42                            
00075D42                            loc_72BDA:
00075D42 1140 0002                  		move.b	d0,2(a0)
00075D46 D0C1                       		adda.w	d1,a0
00075D48 51CA FFF8                  		dbf	d2,loc_72BDA
00075D4C                            
00075D4C 4E75                       		rts	
00075D4E                            ; ===========================================================================
00075D4E                            
00075D4E                            loc_72BE6:				; XREF: loc_72A64
00075D4E 101C                       		move.b	(a4)+,d0
00075D50 D12D 0009                  		add.b	d0,9(a5)
00075D54 4E75                       		rts	
00075D56                            ; ===========================================================================
00075D56                            
00075D56                            loc_72BEE:				; XREF: loc_72A64
00075D56 422E 002C                  		clr.b	$2C(a6)
00075D5A 4E75                       		rts	
00075D5C                            ; ===========================================================================
00075D5C                            
00075D5C                            loc_72BF4:				; XREF: loc_72A64
00075D5C 0895 0007                  		bclr	#7,(a5)
00075D60 0895 0004                  		bclr	#4,(a5)
00075D64 4EBA FB00                  		jsr	sub_726FE(pc)
00075D68 4A2E 0250                  		tst.b	$250(a6)
00075D6C 6B00                       		bmi.s	loc_72C22
00075D6E 264D                       		movea.l	a5,a3
00075D70 4BEE 0100                  		lea	$100(a6),a5
00075D74 226E 0018                  		movea.l	$18(a6),a1
00075D78 0895 0002                  		bclr	#2,(a5)
00075D7C 08D5 0001                  		bset	#1,(a5)
00075D80 102D 000B                  		move.b	$B(a5),d0
00075D84 4EBA 0000                  		jsr	sub_72C4E(pc)
00075D88 2A4B                       		movea.l	a3,a5
00075D8A                            
00075D8A                            loc_72C22:
00075D8A 504F                       		addq.w	#8,sp
00075D8C 4E75                       		rts	
00075D8E                            ; ===========================================================================
00075D8E                            
00075D8E                            loc_72C26:				; XREF: loc_72A64
00075D8E 7000                       		moveq	#0,d0
00075D90 101C                       		move.b	(a4)+,d0
00075D92 1B40 000B                  		move.b	d0,$B(a5)
00075D96 0815 0002                  		btst	#2,(a5)
00075D9A 6600 0000                  		bne.w	locret_72CAA
00075D9E 226E 0018                  		movea.l	$18(a6),a1
00075DA2 4A2E 000E                  		tst.b	$E(a6)
00075DA6 6700                       		beq.s	sub_72C4E
00075DA8 226D 0020                  		movea.l	$20(a5),a1
00075DAC 4A2E 000E                  		tst.b	$E(a6)
00075DB0 6B00                       		bmi.s	sub_72C4E
00075DB2 226E 0020                  		movea.l	$20(a6),a1
00075DB6                            
00075DB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075DB6                            
00075DB6                            
00075DB6                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00075DB6 5340                       		subq.w	#1,d0
00075DB8 6B00                       		bmi.s	loc_72C5C
00075DBA 323C 0019                  		move.w	#$19,d1
00075DBE                            
00075DBE                            loc_72C56:
00075DBE D2C1                       		adda.w	d1,a1
00075DC0 51C8 FFFC                  		dbf	d0,loc_72C56
00075DC4                            
00075DC4                            loc_72C5C:
00075DC4 1219                       		move.b	(a1)+,d1
00075DC6 1B41 001F                  		move.b	d1,$1F(a5)
00075DCA 1801                       		move.b	d1,d4
00075DCC 103C 00B0                  		move.b	#$B0,d0
00075DD0 4EBA FAB8                  		jsr	sub_72722(pc)
00075DD4 45FA 0000                  		lea	byte_72D18(pc),a2
00075DD8 7613                       		moveq	#$13,d3
00075DDA                            
00075DDA                            loc_72C72:
00075DDA 101A                       		move.b	(a2)+,d0
00075DDC 1219                       		move.b	(a1)+,d1
00075DDE 4EBA FAAA                  		jsr	sub_72722(pc)
00075DE2 51CB FFF6                  		dbf	d3,loc_72C72
00075DE6 7A03                       		moveq	#3,d5
00075DE8 0244 0007                  		andi.w	#7,d4
00075DEC 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00075DF0 162D 0009                  		move.b	9(a5),d3
00075DF4                            
00075DF4                            loc_72C8C:
00075DF4 101A                       		move.b	(a2)+,d0
00075DF6 1219                       		move.b	(a1)+,d1
00075DF8 E20C                       		lsr.b	#1,d4
00075DFA 6400                       		bcc.s	loc_72C96
00075DFC D203                       		add.b	d3,d1
00075DFE                            
00075DFE                            loc_72C96:
00075DFE 4EBA FA8A                  		jsr	sub_72722(pc)
00075E02 51CD FFF0                  		dbf	d5,loc_72C8C
00075E06 103C 00B4                  		move.b	#$B4,d0
00075E0A 122D 000A                  		move.b	$A(a5),d1
00075E0E 4EBA FA7A                  		jsr	sub_72722(pc)
00075E12                            
00075E12                            locret_72CAA:
00075E12 4E75                       		rts	
00075E14                            ; End of function sub_72C4E
00075E14                            
00075E14                            ; ===========================================================================
00075E14 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00075E1C                            
00075E1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075E1C                            
00075E1C                            
00075E1C                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00075E1C 0815 0002                  		btst	#2,(a5)
00075E20 6600                       		bne.s	locret_72D16
00075E22 7000                       		moveq	#0,d0
00075E24 102D 000B                  		move.b	$B(a5),d0
00075E28 226E 0018                  		movea.l	$18(a6),a1
00075E2C 4A2E 000E                  		tst.b	$E(a6)
00075E30 6700                       		beq.s	loc_72CD8
00075E32 226E 0020                  		movea.l	$20(a6),a1
00075E36 4A2E 000E                  		tst.b	$E(a6)
00075E3A 6B00                       		bmi.s	loc_72CD8
00075E3C 226E 0020                  		movea.l	$20(a6),a1
00075E40                            
00075E40                            loc_72CD8:
00075E40 5340                       		subq.w	#1,d0
00075E42 6B00                       		bmi.s	loc_72CE6
00075E44 323C 0019                  		move.w	#$19,d1
00075E48                            
00075E48                            loc_72CE0:
00075E48 D2C1                       		adda.w	d1,a1
00075E4A 51C8 FFFC                  		dbf	d0,loc_72CE0
00075E4E                            
00075E4E                            loc_72CE6:
00075E4E D2FC 0015                  		adda.w	#$15,a1
00075E52 45FA 0000                  		lea	byte_72D2C(pc),a2
00075E56 102D 001F                  		move.b	$1F(a5),d0
00075E5A 0240 0007                  		andi.w	#7,d0
00075E5E 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00075E62 162D 0009                  		move.b	9(a5),d3
00075E66 6B00                       		bmi.s	locret_72D16
00075E68 7A03                       		moveq	#3,d5
00075E6A                            
00075E6A                            loc_72D02:
00075E6A 101A                       		move.b	(a2)+,d0
00075E6C 1219                       		move.b	(a1)+,d1
00075E6E E20C                       		lsr.b	#1,d4
00075E70 6400                       		bcc.s	loc_72D12
00075E72 D203                       		add.b	d3,d1
00075E74 6500                       		bcs.s	loc_72D12
00075E76 4EBA FA12                  		jsr	sub_72722(pc)
00075E7A                            
00075E7A                            loc_72D12:
00075E7A 51CD FFEE                  		dbf	d5,loc_72D02
00075E7E                            
00075E7E                            locret_72D16:
00075E7E 4E75                       		rts	
00075E80                            ; End of function sub_72CB4
00075E80                            
00075E80                            ; ===========================================================================
00075E80 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00075E8A 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00075E94 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00075E98                            ; ===========================================================================
00075E98                            
00075E98                            loc_72D30:				; XREF: loc_72A64
00075E98 08D5 0003                  		bset	#3,(a5)
00075E9C 2B4C 0014                  		move.l	a4,$14(a5)
00075EA0 1B5C 0018                  		move.b	(a4)+,$18(a5)
00075EA4 1B5C 0019                  		move.b	(a4)+,$19(a5)
00075EA8 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00075EAC 101C                       		move.b	(a4)+,d0
00075EAE E208                       		lsr.b	#1,d0
00075EB0 1B40 001B                  		move.b	d0,$1B(a5)
00075EB4 426D 001C                  		clr.w	$1C(a5)
00075EB8 4E75                       		rts	
00075EBA                            ; ===========================================================================
00075EBA                            
00075EBA                            loc_72D52:				; XREF: loc_72A64
00075EBA 08D5 0003                  		bset	#3,(a5)
00075EBE 4E75                       		rts	
00075EC0                            ; ===========================================================================
00075EC0                            
00075EC0                            loc_72D58:				; XREF: loc_72A64
00075EC0 0895 0007                  		bclr	#7,(a5)
00075EC4 0895 0004                  		bclr	#4,(a5)
00075EC8 4A2D 0001                  		tst.b	1(a5)
00075ECC 6B00                       		bmi.s	loc_72D74
00075ECE 4A2E 0008                  		tst.b	8(a6)
00075ED2 6B00 0000                  		bmi.w	loc_72E02
00075ED6 4EBA F98E                  		jsr	sub_726FE(pc)
00075EDA 6000                       		bra.s	loc_72D78
00075EDC                            ; ===========================================================================
00075EDC                            
00075EDC                            loc_72D74:
00075EDC 4EBA FC2A                  		jsr	sub_729A0(pc)
00075EE0                            
00075EE0                            loc_72D78:
00075EE0 4A2E 000E                  		tst.b	$E(a6)
00075EE4 6A00 0000                  		bpl.w	loc_72E02
00075EE8 4216                       		clr.b	0(a6)
00075EEA 7000                       		moveq	#0,d0
00075EEC 102D 0001                  		move.b	1(a5),d0
00075EF0 6B00                       		bmi.s	loc_72DCC
00075EF2 41FA F546                  		lea	dword_722CC(pc),a0
00075EF6 264D                       		movea.l	a5,a3
00075EF8 0C00 0004                  		cmpi.b	#4,d0
00075EFC 6600                       		bne.s	loc_72DA8
00075EFE 4A2E 0340                  		tst.b	$340(a6)
00075F02 6A00                       		bpl.s	loc_72DA8
00075F04 4BEE 0340                  		lea	$340(a6),a5
00075F08 226E 0020                  		movea.l	$20(a6),a1
00075F0C 6000                       		bra.s	loc_72DB8
00075F0E                            ; ===========================================================================
00075F0E                            
00075F0E                            loc_72DA8:
00075F0E 5500                       		subq.b	#2,d0
00075F10 E508                       		lsl.b	#2,d0
00075F12 2A70 0000                  		movea.l	(a0,d0.w),a5
00075F16 4A15                       		tst.b	(a5)
00075F18 6A00                       		bpl.s	loc_72DC8
00075F1A 226E 0018                  		movea.l	$18(a6),a1
00075F1E                            
00075F1E                            loc_72DB8:
00075F1E 0895 0002                  		bclr	#2,(a5)
00075F22 08D5 0001                  		bset	#1,(a5)
00075F26 102D 000B                  		move.b	$B(a5),d0
00075F2A 4EBA FE8A                  		jsr	sub_72C4E(pc)
00075F2E                            
00075F2E                            loc_72DC8:
00075F2E 2A4B                       		movea.l	a3,a5
00075F30 6000                       		bra.s	loc_72E02
00075F32                            ; ===========================================================================
00075F32                            
00075F32                            loc_72DCC:
00075F32 41EE 0370                  		lea	$370(a6),a0
00075F36 4A10                       		tst.b	(a0)
00075F38 6A00                       		bpl.s	loc_72DE0
00075F3A 0C00 00E0                  		cmpi.b	#$E0,d0
00075F3E 6700                       		beq.s	loc_72DEA
00075F40 0C00 00C0                  		cmpi.b	#$C0,d0
00075F44 6700                       		beq.s	loc_72DEA
00075F46                            
00075F46                            loc_72DE0:
00075F46 41FA F4F2                  		lea	dword_722CC(pc),a0
00075F4A E608                       		lsr.b	#3,d0
00075F4C 2070 0000                  		movea.l	(a0,d0.w),a0
00075F50                            
00075F50                            loc_72DEA:
00075F50 0890 0002                  		bclr	#2,(a0)
00075F54 08D0 0001                  		bset	#1,(a0)
00075F58 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00075F5E 6600                       		bne.s	loc_72E02
00075F60 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00075F68                            
00075F68                            loc_72E02:
00075F68 504F                       		addq.w	#8,sp
00075F6A 4E75                       		rts	
00075F6C                            ; ===========================================================================
00075F6C                            
00075F6C                            loc_72E06:				; XREF: loc_72A64
00075F6C 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00075F72 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00075F76 0815 0002                  		btst	#2,(a5)
00075F7A 6600                       		bne.s	locret_72E1E
00075F7C 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00075F84                            
00075F84                            locret_72E1E:
00075F84 4E75                       		rts	
00075F86                            ; ===========================================================================
00075F86                            
00075F86                            loc_72E20:				; XREF: loc_72A64
00075F86 0895 0003                  		bclr	#3,(a5)
00075F8A 4E75                       		rts	
00075F8C                            ; ===========================================================================
00075F8C                            
00075F8C                            loc_72E26:				; XREF: loc_72A64
00075F8C 1B5C 000B                  		move.b	(a4)+,$B(a5)
00075F90 4E75                       		rts	
00075F92                            ; ===========================================================================
00075F92                            
00075F92                            loc_72E2C:				; XREF: loc_72A64
00075F92 101C                       		move.b	(a4)+,d0
00075F94 E148                       		lsl.w	#8,d0
00075F96 101C                       		move.b	(a4)+,d0
00075F98 D8C0                       		adda.w	d0,a4
00075F9A 534C                       		subq.w	#1,a4
00075F9C 4E75                       		rts	
00075F9E                            ; ===========================================================================
00075F9E                            
00075F9E                            loc_72E38:				; XREF: loc_72A64
00075F9E 7000                       		moveq	#0,d0
00075FA0 101C                       		move.b	(a4)+,d0
00075FA2 121C                       		move.b	(a4)+,d1
00075FA4 4A35 0024                  		tst.b	$24(a5,d0.w)
00075FA8 6600                       		bne.s	loc_72E48
00075FAA 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00075FAE                            
00075FAE                            loc_72E48:
00075FAE 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00075FB2 66DE                       		bne.s	loc_72E2C
00075FB4 544C                       		addq.w	#2,a4
00075FB6 4E75                       		rts	
00075FB8                            ; ===========================================================================
00075FB8                            
00075FB8                            loc_72E52:				; XREF: loc_72A64
00075FB8 7000                       		moveq	#0,d0
00075FBA 102D 000D                  		move.b	$D(a5),d0
00075FBE 5900                       		subq.b	#4,d0
00075FC0 2B8C 0000                  		move.l	a4,(a5,d0.w)
00075FC4 1B40 000D                  		move.b	d0,$D(a5)
00075FC8 60C8                       		bra.s	loc_72E2C
00075FCA                            ; ===========================================================================
00075FCA                            
00075FCA                            loc_72E64:				; XREF: loc_72A64
00075FCA 103C 0088                  		move.b	#$88,d0
00075FCE 123C 000F                  		move.b	#$F,d1
00075FD2 4EBA F8C2                  		jsr	sub_7272E(pc)
00075FD6 103C 008C                  		move.b	#$8C,d0
00075FDA 123C 000F                  		move.b	#$F,d1
00075FDE 6000 F8B6                  		bra.w	sub_7272E
00075FE2                            ; ===========================================================================
00075FE2                            Kos_Z80:	incbin	sound\z80_1.bin
00076092 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00076094 21                         		dc.b $21
00076095 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00076097                            		incbin	sound\z80_2.bin
00077742                            		even
00077742                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007DF42                            		even
0007DF42                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
000877E0                            		even
000877E0                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00087D6E                            		even
00087D6E                            Music84:	include	sound\music84.asm ; Star Light Act 1
00087D6E                            music84_Header:
00087D6E =00000001                  smpsHeaderStartSong = 1
00087D6E 0000                       	smpsHeaderVoice     music84_Voices
00087D70 0603                       	smpsHeaderChan      $06, $03
00087D72 0205                       	smpsHeaderTempo     $02, $05
00087D74                            
00087D78 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00087D7C 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00087D80 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00087D84 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00087D88 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00087D8C 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00087D92 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00087D98 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00087D9E                            
00087D9E                            ; FM1 Data
00087D9E                            music84_FM1:
00087D9E E0C0                       	smpsPan             panCenter, $00
00087DA2 E107                       	smpsAlterNote       $07
00087DA4 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00087DA8 E106                       	smpsAlterNote       $06
00087DAA 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00087DAE E10B                       	smpsAlterNote       $0B
00087DB0 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00087DB6 E10C                       	smpsAlterNote       $0C
00087DB8 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087DBB E10B                       	smpsAlterNote       $0B
00087DBD E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087DC0 E109                       	smpsAlterNote       $09
00087DC2 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00087DC7 E108                       	smpsAlterNote       $08
00087DC9 8001                       	dc.b	nRst, $01
00087DCB E10B                       	smpsAlterNote       $0B
00087DCD 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00087DD3 E107                       	smpsAlterNote       $07
00087DD5 9B03                       	dc.b	nD2, $03
00087DD7                            
00087DD7                            music84_Jump04:
00087DD7 E107                       	smpsAlterNote       $07
00087DD9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087DDD E10B                       	smpsAlterNote       $0B
00087DDF A202 8001                  	dc.b	nA2, $02, nRst, $01
00087DE3 E107                       	smpsAlterNote       $07
00087DE5 9B03                       	dc.b	nD2, $03
00087DE7 E11A                       	smpsAlterNote       $1A
00087DE9 A301                       	dc.b	nBb2, $01
00087DEB E1F2                       	smpsAlterNote       $F2
00087DED E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087DF0 E1FF                       	smpsAlterNote       $FF
00087DF2 E701                       	dc.b	smpsNoAttack, $01
00087DF4 E111                       	smpsAlterNote       $11
00087DF6 E701                       	dc.b	smpsNoAttack, $01
00087DF8 E106                       	smpsAlterNote       $06
00087DFA E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00087DFD E107                       	smpsAlterNote       $07
00087DFF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087E03 E108                       	smpsAlterNote       $08
00087E05 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00087E0D E109                       	smpsAlterNote       $09
00087E0F A003                       	dc.b	nG2, $03
00087E11 E10C                       	smpsAlterNote       $0C
00087E13 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00087E17 E1FD                       	smpsAlterNote       $FD
00087E19 A401                       	dc.b	nB2, $01
00087E1B E109                       	smpsAlterNote       $09
00087E1D E701                       	dc.b	smpsNoAttack, $01
00087E1F E106                       	smpsAlterNote       $06
00087E21 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087E24 E109                       	smpsAlterNote       $09
00087E26 A007                       	dc.b	nG2, $07
00087E28 E108                       	smpsAlterNote       $08
00087E2A 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00087E2E E107                       	smpsAlterNote       $07
00087E30 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00087E36 E10B                       	smpsAlterNote       $0B
00087E38 A203 8001                  	dc.b	nA2, $03, nRst, $01
00087E3C E107                       	smpsAlterNote       $07
00087E3E 9B03                       	dc.b	nD2, $03
00087E40 E11A                       	smpsAlterNote       $1A
00087E42 A301                       	dc.b	nBb2, $01
00087E44 E1F9                       	smpsAlterNote       $F9
00087E46 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087E49 E107                       	smpsAlterNote       $07
00087E4B E701                       	dc.b	smpsNoAttack, $01
00087E4D E111                       	smpsAlterNote       $11
00087E4F E701                       	dc.b	smpsNoAttack, $01
00087E51 E106                       	smpsAlterNote       $06
00087E53 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00087E58 E107                       	smpsAlterNote       $07
00087E5A 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00087E62 E1EC                       	smpsAlterNote       $EC
00087E64 A101                       	dc.b	nAb2, $01
00087E66 E108                       	smpsAlterNote       $08
00087E68 E701                       	dc.b	smpsNoAttack, $01
00087E6A E116                       	smpsAlterNote       $16
00087E6C E701                       	dc.b	smpsNoAttack, $01
00087E6E E1F5                       	smpsAlterNote       $F5
00087E70 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087E73 E10B                       	smpsAlterNote       $0B
00087E75 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087E79 E107                       	smpsAlterNote       $07
00087E7B 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00087E81 E109                       	smpsAlterNote       $09
00087E83 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00087E87 E10B                       	smpsAlterNote       $0B
00087E89 9603                       	dc.b	nA1, $03
00087E8B E107                       	smpsAlterNote       $07
00087E8D 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00087E93 E10B                       	smpsAlterNote       $0B
00087E95 A203 8001                  	dc.b	nA2, $03, nRst, $01
00087E99 E107                       	smpsAlterNote       $07
00087E9B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00087E9F E11A                       	smpsAlterNote       $1A
00087EA1 A301                       	dc.b	nBb2, $01
00087EA3 E1F9                       	smpsAlterNote       $F9
00087EA5 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087EA8 E107                       	smpsAlterNote       $07
00087EAA E701                       	dc.b	smpsNoAttack, $01
00087EAC E1FB                       	smpsAlterNote       $FB
00087EAE E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087EB1 E106                       	smpsAlterNote       $06
00087EB3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087EB7 E107                       	smpsAlterNote       $07
00087EB9 9B03                       	dc.b	nD2, $03
00087EBB E108                       	smpsAlterNote       $08
00087EBD 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00087EC3 E109                       	smpsAlterNote       $09
00087EC5 A002 8001                  	dc.b	nG2, $02, nRst, $01
00087EC9 E10C                       	smpsAlterNote       $0C
00087ECB A303                       	dc.b	nBb2, $03
00087ECD E1F0                       	smpsAlterNote       $F0
00087ECF A401                       	dc.b	nB2, $01
00087ED1 E1FD                       	smpsAlterNote       $FD
00087ED3 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00087ED8 E106                       	smpsAlterNote       $06
00087EDA 8001                       	dc.b	nRst, $01
00087EDC E109                       	smpsAlterNote       $09
00087EDE A006 8001                  	dc.b	nG2, $06, nRst, $01
00087EE2 E108                       	smpsAlterNote       $08
00087EE4 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00087EE8 E107                       	smpsAlterNote       $07
00087EEA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00087EF0 E10B                       	smpsAlterNote       $0B
00087EF2 A203                       	dc.b	nA2, $03
00087EF4 E107                       	smpsAlterNote       $07
00087EF6 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087EFA E1F2                       	smpsAlterNote       $F2
00087EFC A401                       	dc.b	nB2, $01
00087EFE E1FF                       	smpsAlterNote       $FF
00087F00 E701                       	dc.b	smpsNoAttack, $01
00087F02 E107                       	smpsAlterNote       $07
00087F04 E701                       	dc.b	smpsNoAttack, $01
00087F06 E1FB                       	smpsAlterNote       $FB
00087F08 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087F0B E106                       	smpsAlterNote       $06
00087F0D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087F11 E107                       	smpsAlterNote       $07
00087F13 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00087F1D E117                       	smpsAlterNote       $17
00087F1F A001                       	dc.b	nG2, $01
00087F21 E1FA                       	smpsAlterNote       $FA
00087F23 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00087F26 E108                       	smpsAlterNote       $08
00087F28 E701                       	dc.b	smpsNoAttack, $01
00087F2A E1E7                       	smpsAlterNote       $E7
00087F2C E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087F2F E103                       	smpsAlterNote       $03
00087F31 E701                       	dc.b	smpsNoAttack, $01
00087F33 E10B                       	smpsAlterNote       $0B
00087F35 E702                       	dc.b	smpsNoAttack, $02
00087F37 E107                       	smpsAlterNote       $07
00087F39 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00087F41 E106                       	smpsAlterNote       $06
00087F43 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00087F49 E10C                       	smpsAlterNote       $0C
00087F4B 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00087F51 E109                       	smpsAlterNote       $09
00087F53 9E03                       	dc.b	nF2, $03
00087F55 E10C                       	smpsAlterNote       $0C
00087F57 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00087F5B E1EA                       	smpsAlterNote       $EA
00087F5D A201                       	dc.b	nA2, $01
00087F5F E106                       	smpsAlterNote       $06
00087F61 E701                       	dc.b	smpsNoAttack, $01
00087F63 E1E2                       	smpsAlterNote       $E2
00087F65 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087F68 E1F0                       	smpsAlterNote       $F0
00087F6A E701                       	dc.b	smpsNoAttack, $01
00087F6C E10C                       	smpsAlterNote       $0C
00087F6E E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00087F7A E116                       	smpsAlterNote       $16
00087F7C 9C01                       	dc.b	nEb2, $01
00087F7E E105                       	smpsAlterNote       $05
00087F80 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00087F83 E1F1                       	smpsAlterNote       $F1
00087F85 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00087F88 E1FF                       	smpsAlterNote       $FF
00087F8A E701                       	dc.b	smpsNoAttack, $01
00087F8C E109                       	smpsAlterNote       $09
00087F8E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087F92 E10C                       	smpsAlterNote       $0C
00087F94 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00087FA0 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00087FA6 E109                       	smpsAlterNote       $09
00087FA8 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00087FAC E10C                       	smpsAlterNote       $0C
00087FAE 9703                       	dc.b	nBb1, $03
00087FB0 E11A                       	smpsAlterNote       $1A
00087FB2 A101                       	dc.b	nAb2, $01
00087FB4 E1FB                       	smpsAlterNote       $FB
00087FB6 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087FB9 E10A                       	smpsAlterNote       $0A
00087FBB E701                       	dc.b	smpsNoAttack, $01
00087FBD E1E8                       	smpsAlterNote       $E8
00087FBF E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087FC2 E106                       	smpsAlterNote       $06
00087FC4 E701                       	dc.b	smpsNoAttack, $01
00087FC6 E10C                       	smpsAlterNote       $0C
00087FC8 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00087FD4 E1F9                       	smpsAlterNote       $F9
00087FD6 9D01                       	dc.b	nE2, $01
00087FD8 E108                       	smpsAlterNote       $08
00087FDA E701                       	dc.b	smpsNoAttack, $01
00087FDC E1F6                       	smpsAlterNote       $F6
00087FDE E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00087FE1 E109                       	smpsAlterNote       $09
00087FE3 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00087FE7 E10C                       	smpsAlterNote       $0C
00087FE9 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00087FF5 E108                       	smpsAlterNote       $08
00087FF7 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00087FFD E106                       	smpsAlterNote       $06
00087FFF A403 8001                  	dc.b	nB2, $03, nRst, $01
00088003 E108                       	smpsAlterNote       $08
00088005 9D03                       	dc.b	nE2, $03
00088007 E1EB                       	smpsAlterNote       $EB
00088009 A801                       	dc.b	nEb3, $01
0008800B E109                       	smpsAlterNote       $09
0008800D E701                       	dc.b	smpsNoAttack, $01
0008800F E1FA                       	smpsAlterNote       $FA
00088011 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00088014 E108                       	smpsAlterNote       $08
00088016 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00088022 E1E9                       	smpsAlterNote       $E9
00088024 A301                       	dc.b	nBb2, $01
00088026 E107                       	smpsAlterNote       $07
00088028 E701                       	dc.b	smpsNoAttack, $01
0008802A E1F0                       	smpsAlterNote       $F0
0008802C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008802F E1F7                       	smpsAlterNote       $F7
00088031 E701                       	dc.b	smpsNoAttack, $01
00088033 E107                       	smpsAlterNote       $07
00088035 E701                       	dc.b	smpsNoAttack, $01
00088037 E106                       	smpsAlterNote       $06
00088039 E701                       	dc.b	smpsNoAttack, $01
0008803B E108                       	smpsAlterNote       $08
0008803D 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00088043 E106                       	smpsAlterNote       $06
00088045 A403 8001                  	dc.b	nB2, $03, nRst, $01
00088049 E108                       	smpsAlterNote       $08
0008804B 9D03                       	dc.b	nE2, $03
0008804D E10B                       	smpsAlterNote       $0B
0008804F 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00088057 E108                       	smpsAlterNote       $08
00088059 9D03                       	dc.b	nE2, $03
0008805B E10B                       	smpsAlterNote       $0B
0008805D 9603 8001                  	dc.b	nA1, $03, nRst, $01
00088061 E113                       	smpsAlterNote       $13
00088063 A001                       	dc.b	nG2, $01
00088065 E118                       	smpsAlterNote       $18
00088067 E701                       	dc.b	smpsNoAttack, $01
00088069 E1E9                       	smpsAlterNote       $E9
0008806B E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008806E E1F3                       	smpsAlterNote       $F3
00088070 E701                       	dc.b	smpsNoAttack, $01
00088072 E1FD                       	smpsAlterNote       $FD
00088074 E701                       	dc.b	smpsNoAttack, $01
00088076 E102                       	smpsAlterNote       $02
00088078 E701                       	dc.b	smpsNoAttack, $01
0008807A E107                       	smpsAlterNote       $07
0008807C 8001                       	dc.b	nRst, $01
0008807E E10B                       	smpsAlterNote       $0B
00088080 9603                       	dc.b	nA1, $03
00088082 E10C                       	smpsAlterNote       $0C
00088084 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008808A E10B                       	smpsAlterNote       $0B
0008808C 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00088098 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
0008809E E107                       	smpsAlterNote       $07
000880A0 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000880A6 E10B                       	smpsAlterNote       $0B
000880A8 A203                       	dc.b	nA2, $03
000880AA E107                       	smpsAlterNote       $07
000880AC 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000880B0 E1F2                       	smpsAlterNote       $F2
000880B2 A401                       	dc.b	nB2, $01
000880B4 E1FF                       	smpsAlterNote       $FF
000880B6 E701                       	dc.b	smpsNoAttack, $01
000880B8 E107                       	smpsAlterNote       $07
000880BA E701                       	dc.b	smpsNoAttack, $01
000880BC E1FB                       	smpsAlterNote       $FB
000880BE E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000880C1 E106                       	smpsAlterNote       $06
000880C3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000880C7 E107                       	smpsAlterNote       $07
000880C9 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000880CD E108                       	smpsAlterNote       $08
000880CF 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000880D5 E109                       	smpsAlterNote       $09
000880D7 A003 8001                  	dc.b	nG2, $03, nRst, $01
000880DB E10C                       	smpsAlterNote       $0C
000880DD A302 8001                  	dc.b	nBb2, $02, nRst, $01
000880E1 E1F0                       	smpsAlterNote       $F0
000880E3 A401                       	dc.b	nB2, $01
000880E5 E109                       	smpsAlterNote       $09
000880E7 E701                       	dc.b	smpsNoAttack, $01
000880E9 E106                       	smpsAlterNote       $06
000880EB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000880EE E109                       	smpsAlterNote       $09
000880F0 A007                       	dc.b	nG2, $07
000880F2 E108                       	smpsAlterNote       $08
000880F4 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000880F8 E107                       	smpsAlterNote       $07
000880FA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088100 E10B                       	smpsAlterNote       $0B
00088102 A202 8001                  	dc.b	nA2, $02, nRst, $01
00088106 E107                       	smpsAlterNote       $07
00088108 9B03                       	dc.b	nD2, $03
0008810A E11A                       	smpsAlterNote       $1A
0008810C A301                       	dc.b	nBb2, $01
0008810E E1F2                       	smpsAlterNote       $F2
00088110 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088113 E1FF                       	smpsAlterNote       $FF
00088115 E701                       	dc.b	smpsNoAttack, $01
00088117 E111                       	smpsAlterNote       $11
00088119 E701                       	dc.b	smpsNoAttack, $01
0008811B E106                       	smpsAlterNote       $06
0008811D E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088120 E107                       	smpsAlterNote       $07
00088122 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008812E E117                       	smpsAlterNote       $17
00088130 A001                       	dc.b	nG2, $01
00088132 E1FA                       	smpsAlterNote       $FA
00088134 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088137 E116                       	smpsAlterNote       $16
00088139 E701                       	dc.b	smpsNoAttack, $01
0008813B E1F5                       	smpsAlterNote       $F5
0008813D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088140 E103                       	smpsAlterNote       $03
00088142 E701                       	dc.b	smpsNoAttack, $01
00088144 E10B                       	smpsAlterNote       $0B
00088146 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008814A E107                       	smpsAlterNote       $07
0008814C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088152 E109                       	smpsAlterNote       $09
00088154 9E03                       	dc.b	nF2, $03
00088156 E10B                       	smpsAlterNote       $0B
00088158 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008815C E107                       	smpsAlterNote       $07
0008815E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00088164 E10B                       	smpsAlterNote       $0B
00088166 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008816A E107                       	smpsAlterNote       $07
0008816C 9B03                       	dc.b	nD2, $03
0008816E E11A                       	smpsAlterNote       $1A
00088170 A301                       	dc.b	nBb2, $01
00088172 E1F9                       	smpsAlterNote       $F9
00088174 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088177 E107                       	smpsAlterNote       $07
00088179 E701                       	dc.b	smpsNoAttack, $01
0008817B E111                       	smpsAlterNote       $11
0008817D E701                       	dc.b	smpsNoAttack, $01
0008817F E106                       	smpsAlterNote       $06
00088181 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00088186 E107                       	smpsAlterNote       $07
00088188 9B03                       	dc.b	nD2, $03
0008818A E108                       	smpsAlterNote       $08
0008818C 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088192 E109                       	smpsAlterNote       $09
00088194 A003                       	dc.b	nG2, $03
00088196 E10C                       	smpsAlterNote       $0C
00088198 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008819C E1FD                       	smpsAlterNote       $FD
0008819E A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000881A3 E106                       	smpsAlterNote       $06
000881A5 8001                       	dc.b	nRst, $01
000881A7 E109                       	smpsAlterNote       $09
000881A9 A006 8001                  	dc.b	nG2, $06, nRst, $01
000881AD E108                       	smpsAlterNote       $08
000881AF 9C03                       	dc.b	nEb2, $03
000881B1 E107                       	smpsAlterNote       $07
000881B3 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000881B9 E10B                       	smpsAlterNote       $0B
000881BB A203 8001                  	dc.b	nA2, $03, nRst, $01
000881BF E107                       	smpsAlterNote       $07
000881C1 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000881C5 E11A                       	smpsAlterNote       $1A
000881C7 A301                       	dc.b	nBb2, $01
000881C9 E1F9                       	smpsAlterNote       $F9
000881CB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000881CE E107                       	smpsAlterNote       $07
000881D0 E701                       	dc.b	smpsNoAttack, $01
000881D2 E1FB                       	smpsAlterNote       $FB
000881D4 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000881D7 E106                       	smpsAlterNote       $06
000881D9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000881DD E107                       	smpsAlterNote       $07
000881DF 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000881E7 E1EC                       	smpsAlterNote       $EC
000881E9 A101                       	dc.b	nAb2, $01
000881EB E108                       	smpsAlterNote       $08
000881ED E701                       	dc.b	smpsNoAttack, $01
000881EF E1E7                       	smpsAlterNote       $E7
000881F1 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000881F4 E1F5                       	smpsAlterNote       $F5
000881F6 E701                       	dc.b	smpsNoAttack, $01
000881F8 E10B                       	smpsAlterNote       $0B
000881FA E702                       	dc.b	smpsNoAttack, $02
000881FC E107                       	smpsAlterNote       $07
000881FE 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00088204 E106                       	smpsAlterNote       $06
00088206 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008820C E10C                       	smpsAlterNote       $0C
0008820E 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00088216 E109                       	smpsAlterNote       $09
00088218 9E03                       	dc.b	nF2, $03
0008821A E10C                       	smpsAlterNote       $0C
0008821C 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088220 E1EA                       	smpsAlterNote       $EA
00088222 A201                       	dc.b	nA2, $01
00088224 E106                       	smpsAlterNote       $06
00088226 E701                       	dc.b	smpsNoAttack, $01
00088228 E114                       	smpsAlterNote       $14
0008822A E701                       	dc.b	smpsNoAttack, $01
0008822C E1F0                       	smpsAlterNote       $F0
0008822E E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088231 E10C                       	smpsAlterNote       $0C
00088233 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008823F 9703                       	dc.b	nBb1, $03
00088241 E116                       	smpsAlterNote       $16
00088243 9C01                       	dc.b	nEb2, $01
00088245 E105                       	smpsAlterNote       $05
00088247 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008824A E113                       	smpsAlterNote       $13
0008824C E701                       	dc.b	smpsNoAttack, $01
0008824E E1FF                       	smpsAlterNote       $FF
00088250 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088253 E109                       	smpsAlterNote       $09
00088255 E703                       	dc.b	smpsNoAttack, $03
00088257 E10C                       	smpsAlterNote       $0C
00088259 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00088265 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008826D E109                       	smpsAlterNote       $09
0008826F 9E03                       	dc.b	nF2, $03
00088271 E10C                       	smpsAlterNote       $0C
00088273 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088277 E1EC                       	smpsAlterNote       $EC
00088279 A201                       	dc.b	nA2, $01
0008827B E10A                       	smpsAlterNote       $0A
0008827D E701                       	dc.b	smpsNoAttack, $01
0008827F E1E8                       	smpsAlterNote       $E8
00088281 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088284 E1F7                       	smpsAlterNote       $F7
00088286 E701                       	dc.b	smpsNoAttack, $01
00088288 E10C                       	smpsAlterNote       $0C
0008828A E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00088296 E1EA                       	smpsAlterNote       $EA
00088298 9D01                       	dc.b	nE2, $01
0008829A E108                       	smpsAlterNote       $08
0008829C E701                       	dc.b	smpsNoAttack, $01
0008829E E1F6                       	smpsAlterNote       $F6
000882A0 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000882A3 E105                       	smpsAlterNote       $05
000882A5 E701                       	dc.b	smpsNoAttack, $01
000882A7 E109                       	smpsAlterNote       $09
000882A9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000882AD E10C                       	smpsAlterNote       $0C
000882AF 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000882BB E108                       	smpsAlterNote       $08
000882BD 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
000882C3 E106                       	smpsAlterNote       $06
000882C5 A403 8001                  	dc.b	nB2, $03, nRst, $01
000882C9 E108                       	smpsAlterNote       $08
000882CB 9D03                       	dc.b	nE2, $03
000882CD E1EB                       	smpsAlterNote       $EB
000882CF A801                       	dc.b	nEb3, $01
000882D1 E109                       	smpsAlterNote       $09
000882D3 E701                       	dc.b	smpsNoAttack, $01
000882D5 E1EB                       	smpsAlterNote       $EB
000882D7 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000882DA E108                       	smpsAlterNote       $08
000882DC E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
000882E8 E1E9                       	smpsAlterNote       $E9
000882EA A301                       	dc.b	nBb2, $01
000882EC E1F8                       	smpsAlterNote       $F8
000882EE E701                       	dc.b	smpsNoAttack, $01
000882F0 E116                       	smpsAlterNote       $16
000882F2 E701                       	dc.b	smpsNoAttack, $01
000882F4 E1F7                       	smpsAlterNote       $F7
000882F6 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000882F9 E107                       	smpsAlterNote       $07
000882FB E701                       	dc.b	smpsNoAttack, $01
000882FD E1EE                       	smpsAlterNote       $EE
000882FF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088302 E106                       	smpsAlterNote       $06
00088304 8001                       	dc.b	nRst, $01
00088306 E108                       	smpsAlterNote       $08
00088308 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
0008830E E106                       	smpsAlterNote       $06
00088310 A402 8001                  	dc.b	nB2, $02, nRst, $01
00088314 E108                       	smpsAlterNote       $08
00088316 9D03                       	dc.b	nE2, $03
00088318 E10B                       	smpsAlterNote       $0B
0008831A 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00088320 E108                       	smpsAlterNote       $08
00088322 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00088326 E10B                       	smpsAlterNote       $0B
00088328 9603                       	dc.b	nA1, $03
0008832A E10E                       	smpsAlterNote       $0E
0008832C A001                       	dc.b	nG2, $01
0008832E E118                       	smpsAlterNote       $18
00088330 E701                       	dc.b	smpsNoAttack, $01
00088332 E1E9                       	smpsAlterNote       $E9
00088334 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088337 E1EE                       	smpsAlterNote       $EE
00088339 E701                       	dc.b	smpsNoAttack, $01
0008833B E1F8                       	smpsAlterNote       $F8
0008833D E701                       	dc.b	smpsNoAttack, $01
0008833F E102                       	smpsAlterNote       $02
00088341 E701                       	dc.b	smpsNoAttack, $01
00088343 E107                       	smpsAlterNote       $07
00088345 8001                       	dc.b	nRst, $01
00088347 E10B                       	smpsAlterNote       $0B
00088349 9603                       	dc.b	nA1, $03
0008834B E10C                       	smpsAlterNote       $0C
0008834D 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00088353 E10B                       	smpsAlterNote       $0B
00088355 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00088361 8001 9603                  	dc.b	nRst, $01, nA1, $03
00088365 E10C                       	smpsAlterNote       $0C
00088367 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00088373 8001                       	dc.b	nRst, $01
00088375 E10B                       	smpsAlterNote       $0B
00088377 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008837F E107                       	smpsAlterNote       $07
00088381 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00088385 E10B                       	smpsAlterNote       $0B
00088387 9603                       	dc.b	nA1, $03
00088389 E109                       	smpsAlterNote       $09
0008838B 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008838F E108                       	smpsAlterNote       $08
00088391 9D06                       	dc.b	nE2, $06
00088393 E107                       	smpsAlterNote       $07
00088395 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088399 E106                       	smpsAlterNote       $06
0008839B 9903                       	dc.b	nC2, $03
0008839D E10C                       	smpsAlterNote       $0C
0008839F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000883A3 E10B                       	smpsAlterNote       $0B
000883A5 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000883B1 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000883BB E10C                       	smpsAlterNote       $0C
000883BD 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
000883C9 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000883D5 8001                       	dc.b	nRst, $01
000883D7 E10B                       	smpsAlterNote       $0B
000883D9 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000883E5 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
000883F1 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
000883FD 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088407 E10C                       	smpsAlterNote       $0C
00088409 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00088415 E10B                       	smpsAlterNote       $0B
00088417 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008841F E107                       	smpsAlterNote       $07
00088421 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00088425 E10B                       	smpsAlterNote       $0B
00088427 9603                       	dc.b	nA1, $03
00088429 E109                       	smpsAlterNote       $09
0008842B 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008842F E108                       	smpsAlterNote       $08
00088431 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00088435 E107                       	smpsAlterNote       $07
00088437 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008843B E106                       	smpsAlterNote       $06
0008843D 9903                       	dc.b	nC2, $03
0008843F E10C                       	smpsAlterNote       $0C
00088441 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088445 E10B                       	smpsAlterNote       $0B
00088447 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088453 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008845D E10C                       	smpsAlterNote       $0C
0008845F 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
0008846B 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00088477 8001                       	dc.b	nRst, $01
00088479 E10B                       	smpsAlterNote       $0B
0008847B 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088487 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088491 E10C                       	smpsAlterNote       $0C
00088493 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008849F 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
000884AB E10B                       	smpsAlterNote       $0B
000884AD 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000884B9 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000884C3 E10C                       	smpsAlterNote       $0C
000884C5 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000884D1 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
000884DD E10B                       	smpsAlterNote       $0B
000884DF 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
000884EB 8001                       	dc.b	nRst, $01
000884ED E1EC                       	smpsAlterNote       $EC
000884EF A101                       	dc.b	nAb2, $01
000884F1 E1FA                       	smpsAlterNote       $FA
000884F3 E701                       	dc.b	smpsNoAttack, $01
000884F5 E116                       	smpsAlterNote       $16
000884F7 E701                       	dc.b	smpsNoAttack, $01
000884F9 E1F5                       	smpsAlterNote       $F5
000884FB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000884FE E10B                       	smpsAlterNote       $0B
00088500 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0008850C 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00088518 E107                       	smpsAlterNote       $07
0008851A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088520 E10B                       	smpsAlterNote       $0B
00088522 A203                       	dc.b	nA2, $03
00088524 E107                       	smpsAlterNote       $07
00088526 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008852A E1F3                       	smpsAlterNote       $F3
0008852C A401                       	dc.b	nB2, $01
0008852E E102                       	smpsAlterNote       $02
00088530 E701                       	dc.b	smpsNoAttack, $01
00088532 E109                       	smpsAlterNote       $09
00088534 E701                       	dc.b	smpsNoAttack, $01
00088536 E102                       	smpsAlterNote       $02
00088538 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008853B E106                       	smpsAlterNote       $06
0008853D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088541 E107                       	smpsAlterNote       $07
00088543 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088547 E108                       	smpsAlterNote       $08
00088549 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008854F E109                       	smpsAlterNote       $09
00088551 A003 8001                  	dc.b	nG2, $03, nRst, $01
00088555 E1F2                       	smpsAlterNote       $F2
00088557 A401                       	dc.b	nB2, $01
00088559 E1FF                       	smpsAlterNote       $FF
0008855B E701                       	dc.b	smpsNoAttack, $01
0008855D E111                       	smpsAlterNote       $11
0008855F E701                       	dc.b	smpsNoAttack, $01
00088561 E1FB                       	smpsAlterNote       $FB
00088563 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088566 E106                       	smpsAlterNote       $06
00088568 E702                       	dc.b	smpsNoAttack, $02
0008856A E109                       	smpsAlterNote       $09
0008856C A007                       	dc.b	nG2, $07
0008856E E108                       	smpsAlterNote       $08
00088570 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00088574 E107                       	smpsAlterNote       $07
00088576 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008857C E10B                       	smpsAlterNote       $0B
0008857E A202 8001                  	dc.b	nA2, $02, nRst, $01
00088582 E107                       	smpsAlterNote       $07
00088584 9B03                       	dc.b	nD2, $03
00088586 E11A                       	smpsAlterNote       $1A
00088588 A301                       	dc.b	nBb2, $01
0008858A E1F2                       	smpsAlterNote       $F2
0008858C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008858F E1FF                       	smpsAlterNote       $FF
00088591 E701                       	dc.b	smpsNoAttack, $01
00088593 E111                       	smpsAlterNote       $11
00088595 E701                       	dc.b	smpsNoAttack, $01
00088597 E106                       	smpsAlterNote       $06
00088599 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008859C E107                       	smpsAlterNote       $07
0008859E 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000885AA E117                       	smpsAlterNote       $17
000885AC A001                       	dc.b	nG2, $01
000885AE E1FA                       	smpsAlterNote       $FA
000885B0 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000885B3 E116                       	smpsAlterNote       $16
000885B5 E701                       	dc.b	smpsNoAttack, $01
000885B7 E1F5                       	smpsAlterNote       $F5
000885B9 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000885BC E103                       	smpsAlterNote       $03
000885BE E701                       	dc.b	smpsNoAttack, $01
000885C0 E10B                       	smpsAlterNote       $0B
000885C2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000885C6 E107                       	smpsAlterNote       $07
000885C8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000885CE E109                       	smpsAlterNote       $09
000885D0 9E03                       	dc.b	nF2, $03
000885D2 E10B                       	smpsAlterNote       $0B
000885D4 9603 8001                  	dc.b	nA1, $03, nRst, $01
000885D8 E107                       	smpsAlterNote       $07
000885DA 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000885E0 E10B                       	smpsAlterNote       $0B
000885E2 A203 8001                  	dc.b	nA2, $03, nRst, $01
000885E6 E107                       	smpsAlterNote       $07
000885E8 9B03                       	dc.b	nD2, $03
000885EA E11A                       	smpsAlterNote       $1A
000885EC A301                       	dc.b	nBb2, $01
000885EE E1F9                       	smpsAlterNote       $F9
000885F0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000885F3 E1FF                       	smpsAlterNote       $FF
000885F5 E701                       	dc.b	smpsNoAttack, $01
000885F7 E111                       	smpsAlterNote       $11
000885F9 E701                       	dc.b	smpsNoAttack, $01
000885FB E106                       	smpsAlterNote       $06
000885FD E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088600 E107                       	smpsAlterNote       $07
00088602 9B03                       	dc.b	nD2, $03
00088604 E108                       	smpsAlterNote       $08
00088606 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008860C E109                       	smpsAlterNote       $09
0008860E A003                       	dc.b	nG2, $03
00088610 E1F0                       	smpsAlterNote       $F0
00088612 A501                       	dc.b	nC3, $01
00088614 E106                       	smpsAlterNote       $06
00088616 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0008861A E109                       	smpsAlterNote       $09
0008861C A006 8001                  	dc.b	nG2, $06, nRst, $01
00088620 E108                       	smpsAlterNote       $08
00088622 9C03                       	dc.b	nEb2, $03
00088624 E107                       	smpsAlterNote       $07
00088626 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008862C E10B                       	smpsAlterNote       $0B
0008862E A203 8001                  	dc.b	nA2, $03, nRst, $01
00088632 E107                       	smpsAlterNote       $07
00088634 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088638 E11A                       	smpsAlterNote       $1A
0008863A A301                       	dc.b	nBb2, $01
0008863C E1F9                       	smpsAlterNote       $F9
0008863E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088641 E107                       	smpsAlterNote       $07
00088643 E701                       	dc.b	smpsNoAttack, $01
00088645 E1FB                       	smpsAlterNote       $FB
00088647 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008864A E106                       	smpsAlterNote       $06
0008864C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088650 E107                       	smpsAlterNote       $07
00088652 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008865A E1EC                       	smpsAlterNote       $EC
0008865C A101                       	dc.b	nAb2, $01
0008865E E108                       	smpsAlterNote       $08
00088660 E701                       	dc.b	smpsNoAttack, $01
00088662 E1E7                       	smpsAlterNote       $E7
00088664 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088667 E1F5                       	smpsAlterNote       $F5
00088669 E701                       	dc.b	smpsNoAttack, $01
0008866B E10B                       	smpsAlterNote       $0B
0008866D E702                       	dc.b	smpsNoAttack, $02
0008866F E107                       	smpsAlterNote       $07
00088671 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00088677 E106                       	smpsAlterNote       $06
00088679 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008867F E10C                       	smpsAlterNote       $0C
00088681 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00088689 E109                       	smpsAlterNote       $09
0008868B 9E03                       	dc.b	nF2, $03
0008868D E10C                       	smpsAlterNote       $0C
0008868F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088693 E1EA                       	smpsAlterNote       $EA
00088695 A201                       	dc.b	nA2, $01
00088697 E106                       	smpsAlterNote       $06
00088699 E701                       	dc.b	smpsNoAttack, $01
0008869B E114                       	smpsAlterNote       $14
0008869D E701                       	dc.b	smpsNoAttack, $01
0008869F E1F0                       	smpsAlterNote       $F0
000886A1 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000886A4 E10C                       	smpsAlterNote       $0C
000886A6 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000886B2 9703                       	dc.b	nBb1, $03
000886B4 E116                       	smpsAlterNote       $16
000886B6 9C01                       	dc.b	nEb2, $01
000886B8 E105                       	smpsAlterNote       $05
000886BA E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000886BD E113                       	smpsAlterNote       $13
000886BF E701                       	dc.b	smpsNoAttack, $01
000886C1 E1FF                       	smpsAlterNote       $FF
000886C3 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000886C6 E109                       	smpsAlterNote       $09
000886C8 E703                       	dc.b	smpsNoAttack, $03
000886CA E10C                       	smpsAlterNote       $0C
000886CC 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000886D8 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000886E0 E109                       	smpsAlterNote       $09
000886E2 9E03                       	dc.b	nF2, $03
000886E4 E10C                       	smpsAlterNote       $0C
000886E6 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000886EA E1EA                       	smpsAlterNote       $EA
000886EC A201                       	dc.b	nA2, $01
000886EE E106                       	smpsAlterNote       $06
000886F0 E701                       	dc.b	smpsNoAttack, $01
000886F2 E1E2                       	smpsAlterNote       $E2
000886F4 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000886F7 E1F0                       	smpsAlterNote       $F0
000886F9 E701                       	dc.b	smpsNoAttack, $01
000886FB E10C                       	smpsAlterNote       $0C
000886FD E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00088709 E116                       	smpsAlterNote       $16
0008870B 9C01                       	dc.b	nEb2, $01
0008870D E105                       	smpsAlterNote       $05
0008870F E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088712 E1F1                       	smpsAlterNote       $F1
00088714 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088717 E1FF                       	smpsAlterNote       $FF
00088719 E701                       	dc.b	smpsNoAttack, $01
0008871B E109                       	smpsAlterNote       $09
0008871D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088721 E10C                       	smpsAlterNote       $0C
00088723 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
0008872F E106                       	smpsAlterNote       $06
00088731 9903                       	dc.b	nC2, $03
00088733 E107                       	smpsAlterNote       $07
00088735 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088739 E109                       	smpsAlterNote       $09
0008873B 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00088741 E107                       	smpsAlterNote       $07
00088743 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088747 E108                       	smpsAlterNote       $08
00088749 9D03                       	dc.b	nE2, $03
0008874B E10B                       	smpsAlterNote       $0B
0008874D 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00088753 E109                       	smpsAlterNote       $09
00088755 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
0008875B E10C                       	smpsAlterNote       $0C
0008875D 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00088763 E106                       	smpsAlterNote       $06
00088765 9903                       	dc.b	nC2, $03
00088767 E11A                       	smpsAlterNote       $1A
00088769 A301                       	dc.b	nBb2, $01
0008876B E1F9                       	smpsAlterNote       $F9
0008876D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088770 E1FF                       	smpsAlterNote       $FF
00088772 E701                       	dc.b	smpsNoAttack, $01
00088774 E111                       	smpsAlterNote       $11
00088776 E701                       	dc.b	smpsNoAttack, $01
00088778 E106                       	smpsAlterNote       $06
0008877A E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00088781 E109                       	smpsAlterNote       $09
00088783 A003                       	dc.b	nG2, $03
00088785 E106                       	smpsAlterNote       $06
00088787 9907                       	dc.b	nC2, $07
00088789 E107                       	smpsAlterNote       $07
0008878B 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00088793 E10B                       	smpsAlterNote       $0B
00088795 A203                       	dc.b	nA2, $03
00088797 E107                       	smpsAlterNote       $07
00088799 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008879D E1F2                       	smpsAlterNote       $F2
0008879F A401                       	dc.b	nB2, $01
000887A1 E1F9                       	smpsAlterNote       $F9
000887A3 E701                       	dc.b	smpsNoAttack, $01
000887A5 E107                       	smpsAlterNote       $07
000887A7 E701                       	dc.b	smpsNoAttack, $01
000887A9 E1FB                       	smpsAlterNote       $FB
000887AB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000887AE E106                       	smpsAlterNote       $06
000887B0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000887B4 E107                       	smpsAlterNote       $07
000887B6 9B03                       	dc.b	nD2, $03
000887B8 E108                       	smpsAlterNote       $08
000887BA 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000887C0 E109                       	smpsAlterNote       $09
000887C2 A003 8001                  	dc.b	nG2, $03, nRst, $01
000887C6 E1F2                       	smpsAlterNote       $F2
000887C8 A401                       	dc.b	nB2, $01
000887CA E1F9                       	smpsAlterNote       $F9
000887CC E701                       	dc.b	smpsNoAttack, $01
000887CE E107                       	smpsAlterNote       $07
000887D0 E701                       	dc.b	smpsNoAttack, $01
000887D2 E1FB                       	smpsAlterNote       $FB
000887D4 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000887D7 E106                       	smpsAlterNote       $06
000887D9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000887DD E108                       	smpsAlterNote       $08
000887DF 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
000887E3 E10C                       	smpsAlterNote       $0C
000887E5 A302 8001                  	dc.b	nBb2, $02, nRst, $01
000887E9 E107                       	smpsAlterNote       $07
000887EB 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000887F1 E10B                       	smpsAlterNote       $0B
000887F3 A203                       	dc.b	nA2, $03
000887F5 E107                       	smpsAlterNote       $07
000887F7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000887FB E1F2                       	smpsAlterNote       $F2
000887FD A401                       	dc.b	nB2, $01
000887FF E1FF                       	smpsAlterNote       $FF
00088801 E701                       	dc.b	smpsNoAttack, $01
00088803 E107                       	smpsAlterNote       $07
00088805 E701                       	dc.b	smpsNoAttack, $01
00088807 E1FB                       	smpsAlterNote       $FB
00088809 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008880C E106                       	smpsAlterNote       $06
0008880E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088812 E107                       	smpsAlterNote       $07
00088814 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088818 E108                       	smpsAlterNote       $08
0008881A 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00088820 E109                       	smpsAlterNote       $09
00088822 A003 8001                  	dc.b	nG2, $03, nRst, $01
00088826 E1F2                       	smpsAlterNote       $F2
00088828 A401                       	dc.b	nB2, $01
0008882A E1FF                       	smpsAlterNote       $FF
0008882C E701                       	dc.b	smpsNoAttack, $01
0008882E E111                       	smpsAlterNote       $11
00088830 E701                       	dc.b	smpsNoAttack, $01
00088832 E1FB                       	smpsAlterNote       $FB
00088834 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088837 E106                       	smpsAlterNote       $06
00088839 E702                       	dc.b	smpsNoAttack, $02
0008883B E108                       	smpsAlterNote       $08
0008883D 9C07                       	dc.b	nEb2, $07
0008883F E10C                       	smpsAlterNote       $0C
00088841 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00088845 E107                       	smpsAlterNote       $07
00088847 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008884D E10B                       	smpsAlterNote       $0B
0008884F A202 8001                  	dc.b	nA2, $02, nRst, $01
00088853 E107                       	smpsAlterNote       $07
00088855 9B03                       	dc.b	nD2, $03
00088857 E11A                       	smpsAlterNote       $1A
00088859 A301                       	dc.b	nBb2, $01
0008885B E1F2                       	smpsAlterNote       $F2
0008885D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088860 E1FF                       	smpsAlterNote       $FF
00088862 E701                       	dc.b	smpsNoAttack, $01
00088864 E111                       	smpsAlterNote       $11
00088866 E701                       	dc.b	smpsNoAttack, $01
00088868 E106                       	smpsAlterNote       $06
0008886A E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008886D E107                       	smpsAlterNote       $07
0008886F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088873 E108                       	smpsAlterNote       $08
00088875 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0008887D E109                       	smpsAlterNote       $09
0008887F A003                       	dc.b	nG2, $03
00088881 E11A                       	smpsAlterNote       $1A
00088883 A301                       	dc.b	nBb2, $01
00088885 E1F2                       	smpsAlterNote       $F2
00088887 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008888A E1FF                       	smpsAlterNote       $FF
0008888C E701                       	dc.b	smpsNoAttack, $01
0008888E E111                       	smpsAlterNote       $11
00088890 E701                       	dc.b	smpsNoAttack, $01
00088892 E106                       	smpsAlterNote       $06
00088894 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088897 E108                       	smpsAlterNote       $08
00088899 9C07                       	dc.b	nEb2, $07
0008889B E10C                       	smpsAlterNote       $0C
0008889D A303 8001                  	dc.b	nBb2, $03, nRst, $01
000888A1 E107                       	smpsAlterNote       $07
000888A3 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
000888AF 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
000888B9 E108                       	smpsAlterNote       $08
000888BB 9C06                       	dc.b	nEb2, $06
000888BD E10C                       	smpsAlterNote       $0C
000888BF 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000888C3 E108                       	smpsAlterNote       $08
000888C5 9C03                       	dc.b	nEb2, $03
000888C7 E109                       	smpsAlterNote       $09
000888C9 A003 8001                  	dc.b	nG2, $03, nRst, $01
000888CD E10C                       	smpsAlterNote       $0C
000888CF A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
000888D7 E107                       	smpsAlterNote       $07
000888D9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000888DD F6F4 F8                    	smpsJump            music84_Jump04
000888E0                            
000888E0                            ; FM2 Data
000888E0                            music84_FM2:
000888E0 E0C0                       	smpsPan             panCenter, $00
000888E4 E10B                       	smpsAlterNote       $0B
000888E6 C603 8007                  	dc.b	nA5, $03, nRst, $07
000888EA E109                       	smpsAlterNote       $09
000888EC C403 800B                  	dc.b	nG5, $03, nRst, $0B
000888F0 E108                       	smpsAlterNote       $08
000888F2 C103 8004                  	dc.b	nE5, $03, nRst, $04
000888F8 E080                       	smpsPan             panLeft, $00
000888FA E10C                       	smpsAlterNote       $0C
000888FC E6F9                       	smpsAlterVol        $F9
000888FE C703                       	dc.b	nBb5, $03
00088900 E10B                       	smpsAlterNote       $0B
00088902 C603 8001                  	dc.b	nA5, $03, nRst, $01
00088906 E109                       	smpsAlterNote       $09
00088908 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008890E E108                       	smpsAlterNote       $08
00088910 C103 8001                  	dc.b	nE5, $03, nRst, $01
00088914 E106                       	smpsAlterNote       $06
00088916 BD03                       	dc.b	nC5, $03
00088918 E10B                       	smpsAlterNote       $0B
0008891A BA03 8001                  	dc.b	nA4, $03, nRst, $01
00088920 E0C0                       	smpsPan             panCenter, $00
00088922 E107                       	smpsAlterNote       $07
00088924 E606                       	smpsAlterVol        $06
00088926 BF03                       	dc.b	nD5, $03
00088928                            
00088928                            music84_Jump03:
00088928 E108                       	smpsAlterNote       $08
0008892A C103 8001                  	dc.b	nE5, $03, nRst, $01
0008892E E109                       	smpsAlterNote       $09
00088930 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00088936 E10B                       	smpsAlterNote       $0B
00088938 C607                       	dc.b	nA5, $07
0008893A E107                       	smpsAlterNote       $07
0008893C BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088940 E106                       	smpsAlterNote       $06
00088942 C90D                       	dc.b	nC6, $0D
00088944 E100                       	smpsAlterNote       $00
00088946 E701                       	dc.b	smpsNoAttack, $01
00088948 E1FF                       	smpsAlterNote       $FF
0008894A E701                       	dc.b	smpsNoAttack, $01
0008894C E103                       	smpsAlterNote       $03
0008894E E701                       	dc.b	smpsNoAttack, $01
00088950 E109                       	smpsAlterNote       $09
00088952 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088956 E106                       	smpsAlterNote       $06
00088958 E701                       	dc.b	smpsNoAttack, $01
0008895A E100                       	smpsAlterNote       $00
0008895C E701                       	dc.b	smpsNoAttack, $01
0008895E E10C                       	smpsAlterNote       $0C
00088960 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00088964 E10B                       	smpsAlterNote       $0B
00088966 C603                       	dc.b	nA5, $03
00088968 E109                       	smpsAlterNote       $09
0008896A C403 8001                  	dc.b	nG5, $03, nRst, $01
0008896E E10B                       	smpsAlterNote       $0B
00088970 C60D                       	dc.b	nA5, $0D
00088972 E105                       	smpsAlterNote       $05
00088974 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088978 E10B                       	smpsAlterNote       $0B
0008897A E701                       	dc.b	smpsNoAttack, $01
0008897C E10E                       	smpsAlterNote       $0E
0008897E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088982 E108                       	smpsAlterNote       $08
00088984 E701                       	dc.b	smpsNoAttack, $01
00088986 E104                       	smpsAlterNote       $04
00088988 E701                       	dc.b	smpsNoAttack, $01
0008898A E105                       	smpsAlterNote       $05
0008898C E701                       	dc.b	smpsNoAttack, $01
0008898E E10B                       	smpsAlterNote       $0B
00088990 E701                       	dc.b	smpsNoAttack, $01
00088992 E10F                       	smpsAlterNote       $0F
00088994 E701                       	dc.b	smpsNoAttack, $01
00088996 E10B                       	smpsAlterNote       $0B
00088998 E701                       	dc.b	smpsNoAttack, $01
0008899A E108                       	smpsAlterNote       $08
0008899C E701                       	dc.b	smpsNoAttack, $01
0008899E E104                       	smpsAlterNote       $04
000889A0 E701                       	dc.b	smpsNoAttack, $01
000889A2 E108                       	smpsAlterNote       $08
000889A4 E701                       	dc.b	smpsNoAttack, $01
000889A6 E10E                       	smpsAlterNote       $0E
000889A8 E701                       	dc.b	smpsNoAttack, $01
000889AA E10F                       	smpsAlterNote       $0F
000889AC E701                       	dc.b	smpsNoAttack, $01
000889AE E10B                       	smpsAlterNote       $0B
000889B0 E701                       	dc.b	smpsNoAttack, $01
000889B2 E105                       	smpsAlterNote       $05
000889B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000889B8 E108                       	smpsAlterNote       $08
000889BA E701                       	dc.b	smpsNoAttack, $01
000889BC E10E                       	smpsAlterNote       $0E
000889BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000889C2 E108                       	smpsAlterNote       $08
000889C4 E701                       	dc.b	smpsNoAttack, $01
000889C6 E105                       	smpsAlterNote       $05
000889C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000889CC E10B                       	smpsAlterNote       $0B
000889CE E701                       	dc.b	smpsNoAttack, $01
000889D0 E10F                       	smpsAlterNote       $0F
000889D2 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000889D6 E107                       	smpsAlterNote       $07
000889D8 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000889DC E108                       	smpsAlterNote       $08
000889DE C103                       	dc.b	nE5, $03
000889E0 E109                       	smpsAlterNote       $09
000889E2 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
000889EA E10B                       	smpsAlterNote       $0B
000889EC C606 8001                  	dc.b	nA5, $06, nRst, $01
000889F0 E107                       	smpsAlterNote       $07
000889F2 BF03                       	dc.b	nD5, $03
000889F4 E106                       	smpsAlterNote       $06
000889F6 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
000889FA E107                       	smpsAlterNote       $07
000889FC CB03                       	dc.b	nD6, $03
000889FE E10C                       	smpsAlterNote       $0C
00088A00 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00088A04 E10B                       	smpsAlterNote       $0B
00088A06 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088A0A E109                       	smpsAlterNote       $09
00088A0C C404                       	dc.b	nG5, $04
00088A0E E10B                       	smpsAlterNote       $0B
00088A10 C60D                       	dc.b	nA5, $0D
00088A12 E108                       	smpsAlterNote       $08
00088A14 E701                       	dc.b	smpsNoAttack, $01
00088A16 E104                       	smpsAlterNote       $04
00088A18 E701                       	dc.b	smpsNoAttack, $01
00088A1A E108                       	smpsAlterNote       $08
00088A1C E701                       	dc.b	smpsNoAttack, $01
00088A1E E10B                       	smpsAlterNote       $0B
00088A20 E701                       	dc.b	smpsNoAttack, $01
00088A22 E10F                       	smpsAlterNote       $0F
00088A24 E701                       	dc.b	smpsNoAttack, $01
00088A26 E10B                       	smpsAlterNote       $0B
00088A28 E701                       	dc.b	smpsNoAttack, $01
00088A2A E105                       	smpsAlterNote       $05
00088A2C E701                       	dc.b	smpsNoAttack, $01
00088A2E E104                       	smpsAlterNote       $04
00088A30 E701                       	dc.b	smpsNoAttack, $01
00088A32 E108                       	smpsAlterNote       $08
00088A34 E701                       	dc.b	smpsNoAttack, $01
00088A36 E10E                       	smpsAlterNote       $0E
00088A38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A3C E10B                       	smpsAlterNote       $0B
00088A3E E701                       	dc.b	smpsNoAttack, $01
00088A40 E105                       	smpsAlterNote       $05
00088A42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A46 E10B                       	smpsAlterNote       $0B
00088A48 E701                       	dc.b	smpsNoAttack, $01
00088A4A E10E                       	smpsAlterNote       $0E
00088A4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A50 E108                       	smpsAlterNote       $08
00088A52 E701                       	dc.b	smpsNoAttack, $01
00088A54 E104                       	smpsAlterNote       $04
00088A56 E701                       	dc.b	smpsNoAttack, $01
00088A58 E105                       	smpsAlterNote       $05
00088A5A E701                       	dc.b	smpsNoAttack, $01
00088A5C E10B                       	smpsAlterNote       $0B
00088A5E E701                       	dc.b	smpsNoAttack, $01
00088A60 E10F                       	smpsAlterNote       $0F
00088A62 E701                       	dc.b	smpsNoAttack, $01
00088A64 E10B                       	smpsAlterNote       $0B
00088A66 E701                       	dc.b	smpsNoAttack, $01
00088A68 E108                       	smpsAlterNote       $08
00088A6A E701                       	dc.b	smpsNoAttack, $01
00088A6C E105                       	smpsAlterNote       $05
00088A6E 8001                       	dc.b	nRst, $01
00088A70 E109                       	smpsAlterNote       $09
00088A72 C401                       	dc.b	nG5, $01
00088A74 E10B                       	smpsAlterNote       $0B
00088A76 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00088A7F E109                       	smpsAlterNote       $09
00088A81 C404 8001                  	dc.b	nG5, $04, nRst, $01
00088A85 E10B                       	smpsAlterNote       $0B
00088A87 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088A8B E107                       	smpsAlterNote       $07
00088A8D BF0D                       	dc.b	nD5, $0D
00088A8F E101                       	smpsAlterNote       $01
00088A91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A95 E104                       	smpsAlterNote       $04
00088A97 E701                       	dc.b	smpsNoAttack, $01
00088A99 E10A                       	smpsAlterNote       $0A
00088A9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A9F E104                       	smpsAlterNote       $04
00088AA1 E701                       	dc.b	smpsNoAttack, $01
00088AA3 E101                       	smpsAlterNote       $01
00088AA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AA9 E107                       	smpsAlterNote       $07
00088AAB E701                       	dc.b	smpsNoAttack, $01
00088AAD E10B                       	smpsAlterNote       $0B
00088AAF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088AB3 E108                       	smpsAlterNote       $08
00088AB5 C101                       	dc.b	nE5, $01
00088AB7 E109                       	smpsAlterNote       $09
00088AB9 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00088ABE E10B                       	smpsAlterNote       $0B
00088AC0 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00088AC8 E108                       	smpsAlterNote       $08
00088ACA CD06                       	dc.b	nE6, $06
00088ACC E109                       	smpsAlterNote       $09
00088ACE CE07                       	dc.b	nF6, $07
00088AD0 E108                       	smpsAlterNote       $08
00088AD2 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00088AD6 E106                       	smpsAlterNote       $06
00088AD8 C903                       	dc.b	nC6, $03
00088ADA E109                       	smpsAlterNote       $09
00088ADC C403 8001                  	dc.b	nG5, $03, nRst, $01
00088AE0 E10C                       	smpsAlterNote       $0C
00088AE2 C70D                       	dc.b	nBb5, $0D
00088AE4 E106                       	smpsAlterNote       $06
00088AE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AEA E109                       	smpsAlterNote       $09
00088AEC E701                       	dc.b	smpsNoAttack, $01
00088AEE E10F                       	smpsAlterNote       $0F
00088AF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AF4 E109                       	smpsAlterNote       $09
00088AF6 E701                       	dc.b	smpsNoAttack, $01
00088AF8 E106                       	smpsAlterNote       $06
00088AFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AFE E10C                       	smpsAlterNote       $0C
00088B00 E701                       	dc.b	smpsNoAttack, $01
00088B02 E110                       	smpsAlterNote       $10
00088B04 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088B08 E10B                       	smpsAlterNote       $0B
00088B0A C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00088B0E E105                       	smpsAlterNote       $05
00088B10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B14 E10B                       	smpsAlterNote       $0B
00088B16 E701                       	dc.b	smpsNoAttack, $01
00088B18 E10E                       	smpsAlterNote       $0E
00088B1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B1E E108                       	smpsAlterNote       $08
00088B20 E701                       	dc.b	smpsNoAttack, $01
00088B22 E104                       	smpsAlterNote       $04
00088B24 E701                       	dc.b	smpsNoAttack, $01
00088B26 E105                       	smpsAlterNote       $05
00088B28 E701                       	dc.b	smpsNoAttack, $01
00088B2A E10B                       	smpsAlterNote       $0B
00088B2C E701                       	dc.b	smpsNoAttack, $01
00088B2E E10F                       	smpsAlterNote       $0F
00088B30 E701                       	dc.b	smpsNoAttack, $01
00088B32 E10B                       	smpsAlterNote       $0B
00088B34 E701                       	dc.b	smpsNoAttack, $01
00088B36 E108                       	smpsAlterNote       $08
00088B38 E701                       	dc.b	smpsNoAttack, $01
00088B3A E104                       	smpsAlterNote       $04
00088B3C E701                       	dc.b	smpsNoAttack, $01
00088B3E E108                       	smpsAlterNote       $08
00088B40 E701                       	dc.b	smpsNoAttack, $01
00088B42 E10E                       	smpsAlterNote       $0E
00088B44 E701                       	dc.b	smpsNoAttack, $01
00088B46 E10F                       	smpsAlterNote       $0F
00088B48 E701                       	dc.b	smpsNoAttack, $01
00088B4A E10B                       	smpsAlterNote       $0B
00088B4C E701                       	dc.b	smpsNoAttack, $01
00088B4E E105                       	smpsAlterNote       $05
00088B50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B54 E108                       	smpsAlterNote       $08
00088B56 E701                       	dc.b	smpsNoAttack, $01
00088B58 E10E                       	smpsAlterNote       $0E
00088B5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B5E E108                       	smpsAlterNote       $08
00088B60 E701                       	dc.b	smpsNoAttack, $01
00088B62 E105                       	smpsAlterNote       $05
00088B64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B68 E10B                       	smpsAlterNote       $0B
00088B6A E701                       	dc.b	smpsNoAttack, $01
00088B6C E10F                       	smpsAlterNote       $0F
00088B6E E701                       	dc.b	smpsNoAttack, $01
00088B70 E10E                       	smpsAlterNote       $0E
00088B72 E701                       	dc.b	smpsNoAttack, $01
00088B74 E108                       	smpsAlterNote       $08
00088B76 E701                       	dc.b	smpsNoAttack, $01
00088B78 E104                       	smpsAlterNote       $04
00088B7A E701                       	dc.b	smpsNoAttack, $01
00088B7C E108                       	smpsAlterNote       $08
00088B7E E701                       	dc.b	smpsNoAttack, $01
00088B80 E10E                       	smpsAlterNote       $0E
00088B82 E701                       	dc.b	smpsNoAttack, $01
00088B84 E10F                       	smpsAlterNote       $0F
00088B86 E701                       	dc.b	smpsNoAttack, $01
00088B88 E10B                       	smpsAlterNote       $0B
00088B8A E701                       	dc.b	smpsNoAttack, $01
00088B8C E105                       	smpsAlterNote       $05
00088B8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B92 E108                       	smpsAlterNote       $08
00088B94 E701                       	dc.b	smpsNoAttack, $01
00088B96 E10E                       	smpsAlterNote       $0E
00088B98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B9C E108                       	smpsAlterNote       $08
00088B9E E701                       	dc.b	smpsNoAttack, $01
00088BA0 E105                       	smpsAlterNote       $05
00088BA2 E701                       	dc.b	smpsNoAttack, $01
00088BA4 E10B                       	smpsAlterNote       $0B
00088BA6 C60D                       	dc.b	nA5, $0D
00088BA8 E108                       	smpsAlterNote       $08
00088BAA E701                       	dc.b	smpsNoAttack, $01
00088BAC E104                       	smpsAlterNote       $04
00088BAE E701                       	dc.b	smpsNoAttack, $01
00088BB0 E105                       	smpsAlterNote       $05
00088BB2 E701                       	dc.b	smpsNoAttack, $01
00088BB4 E10B                       	smpsAlterNote       $0B
00088BB6 E701                       	dc.b	smpsNoAttack, $01
00088BB8 E10F                       	smpsAlterNote       $0F
00088BBA E701                       	dc.b	smpsNoAttack, $01
00088BBC E10B                       	smpsAlterNote       $0B
00088BBE E701                       	dc.b	smpsNoAttack, $01
00088BC0 E108                       	smpsAlterNote       $08
00088BC2 E701                       	dc.b	smpsNoAttack, $01
00088BC4 E104                       	smpsAlterNote       $04
00088BC6 E701                       	dc.b	smpsNoAttack, $01
00088BC8 E108                       	smpsAlterNote       $08
00088BCA E701                       	dc.b	smpsNoAttack, $01
00088BCC E10E                       	smpsAlterNote       $0E
00088BCE E701                       	dc.b	smpsNoAttack, $01
00088BD0 E10F                       	smpsAlterNote       $0F
00088BD2 E701                       	dc.b	smpsNoAttack, $01
00088BD6 E109                       	smpsAlterNote       $09
00088BD8 E6FF                       	smpsAlterVol        $FF
00088BDA C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00088BE4 E108                       	smpsAlterNote       $08
00088BE6 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00088BEC E107                       	smpsAlterNote       $07
00088BEE E601                       	smpsAlterVol        $01
00088BF0 BF03                       	dc.b	nD5, $03
00088BF2 E108                       	smpsAlterNote       $08
00088BF4 C103 8001                  	dc.b	nE5, $03, nRst, $01
00088BF8 E109                       	smpsAlterNote       $09
00088BFA C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00088C00 E10B                       	smpsAlterNote       $0B
00088C02 C606 8001                  	dc.b	nA5, $06, nRst, $01
00088C06 E107                       	smpsAlterNote       $07
00088C08 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088C0C E106                       	smpsAlterNote       $06
00088C0E C90D                       	dc.b	nC6, $0D
00088C10 E103                       	smpsAlterNote       $03
00088C12 E701                       	dc.b	smpsNoAttack, $01
00088C14 E1FF                       	smpsAlterNote       $FF
00088C16 E701                       	dc.b	smpsNoAttack, $01
00088C18 E103                       	smpsAlterNote       $03
00088C1A E701                       	dc.b	smpsNoAttack, $01
00088C1C E109                       	smpsAlterNote       $09
00088C1E E701                       	dc.b	smpsNoAttack, $01
00088C20 E10A                       	smpsAlterNote       $0A
00088C22 E701                       	dc.b	smpsNoAttack, $01
00088C24 E106                       	smpsAlterNote       $06
00088C26 E701                       	dc.b	smpsNoAttack, $01
00088C28 E100                       	smpsAlterNote       $00
00088C2A E701                       	dc.b	smpsNoAttack, $01
00088C2C E10C                       	smpsAlterNote       $0C
00088C2E C703 8001                  	dc.b	nBb5, $03, nRst, $01
00088C32 E10B                       	smpsAlterNote       $0B
00088C34 C603                       	dc.b	nA5, $03
00088C36 E109                       	smpsAlterNote       $09
00088C38 C403 8001                  	dc.b	nG5, $03, nRst, $01
00088C3C E10B                       	smpsAlterNote       $0B
00088C3E C60D                       	dc.b	nA5, $0D
00088C40 E105                       	smpsAlterNote       $05
00088C42 E701                       	dc.b	smpsNoAttack, $01
00088C44 E104                       	smpsAlterNote       $04
00088C46 E701                       	dc.b	smpsNoAttack, $01
00088C48 E108                       	smpsAlterNote       $08
00088C4A E701                       	dc.b	smpsNoAttack, $01
00088C4C E10E                       	smpsAlterNote       $0E
00088C4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C52 E10B                       	smpsAlterNote       $0B
00088C54 E701                       	dc.b	smpsNoAttack, $01
00088C56 E105                       	smpsAlterNote       $05
00088C58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C5C E10B                       	smpsAlterNote       $0B
00088C5E E701                       	dc.b	smpsNoAttack, $01
00088C60 E10E                       	smpsAlterNote       $0E
00088C62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C66 E108                       	smpsAlterNote       $08
00088C68 E701                       	dc.b	smpsNoAttack, $01
00088C6A E104                       	smpsAlterNote       $04
00088C6C E701                       	dc.b	smpsNoAttack, $01
00088C6E E105                       	smpsAlterNote       $05
00088C70 E701                       	dc.b	smpsNoAttack, $01
00088C72 E10B                       	smpsAlterNote       $0B
00088C74 E701                       	dc.b	smpsNoAttack, $01
00088C76 E10F                       	smpsAlterNote       $0F
00088C78 E701                       	dc.b	smpsNoAttack, $01
00088C7A E10B                       	smpsAlterNote       $0B
00088C7C E701                       	dc.b	smpsNoAttack, $01
00088C7E E108                       	smpsAlterNote       $08
00088C80 E701                       	dc.b	smpsNoAttack, $01
00088C82 E104                       	smpsAlterNote       $04
00088C84 E701                       	dc.b	smpsNoAttack, $01
00088C86 E108                       	smpsAlterNote       $08
00088C88 E701                       	dc.b	smpsNoAttack, $01
00088C8A E10E                       	smpsAlterNote       $0E
00088C8C E701                       	dc.b	smpsNoAttack, $01
00088C8E E10F                       	smpsAlterNote       $0F
00088C90 E701                       	dc.b	smpsNoAttack, $01
00088C92 E10B                       	smpsAlterNote       $0B
00088C94 E701                       	dc.b	smpsNoAttack, $01
00088C96 E105                       	smpsAlterNote       $05
00088C98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C9C E108                       	smpsAlterNote       $08
00088C9E E701                       	dc.b	smpsNoAttack, $01
00088CA0 E10E                       	smpsAlterNote       $0E
00088CA2 E701                       	dc.b	smpsNoAttack, $01
00088CA4 E10F                       	smpsAlterNote       $0F
00088CA6 800F                       	dc.b	nRst, $0F
00088CA8 E107                       	smpsAlterNote       $07
00088CAA BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088CAE E108                       	smpsAlterNote       $08
00088CB0 C103                       	dc.b	nE5, $03
00088CB2 E109                       	smpsAlterNote       $09
00088CB4 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00088CBA E10B                       	smpsAlterNote       $0B
00088CBC C606 8001                  	dc.b	nA5, $06, nRst, $01
00088CC0 E107                       	smpsAlterNote       $07
00088CC2 BF03                       	dc.b	nD5, $03
00088CC4 E106                       	smpsAlterNote       $06
00088CC6 C90E                       	dc.b	nC6, $0E
00088CC8 E107                       	smpsAlterNote       $07
00088CCA CB03 8001                  	dc.b	nD6, $03, nRst, $01
00088CCE E10C                       	smpsAlterNote       $0C
00088CD0 C704                       	dc.b	nBb5, $04
00088CD2 E10B                       	smpsAlterNote       $0B
00088CD4 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088CD8 E109                       	smpsAlterNote       $09
00088CDA C404                       	dc.b	nG5, $04
00088CDC E10B                       	smpsAlterNote       $0B
00088CDE C60D                       	dc.b	nA5, $0D
00088CE0 E108                       	smpsAlterNote       $08
00088CE2 E701                       	dc.b	smpsNoAttack, $01
00088CE4 E105                       	smpsAlterNote       $05
00088CE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CEA E10B                       	smpsAlterNote       $0B
00088CEC E701                       	dc.b	smpsNoAttack, $01
00088CEE E10F                       	smpsAlterNote       $0F
00088CF0 E701                       	dc.b	smpsNoAttack, $01
00088CF2 E10E                       	smpsAlterNote       $0E
00088CF4 E701                       	dc.b	smpsNoAttack, $01
00088CF6 E108                       	smpsAlterNote       $08
00088CF8 E701                       	dc.b	smpsNoAttack, $01
00088CFA E104                       	smpsAlterNote       $04
00088CFC E701                       	dc.b	smpsNoAttack, $01
00088CFE E108                       	smpsAlterNote       $08
00088D00 E701                       	dc.b	smpsNoAttack, $01
00088D02 E10B                       	smpsAlterNote       $0B
00088D04 E701                       	dc.b	smpsNoAttack, $01
00088D06 E10F                       	smpsAlterNote       $0F
00088D08 E701                       	dc.b	smpsNoAttack, $01
00088D0A E10B                       	smpsAlterNote       $0B
00088D0C E701                       	dc.b	smpsNoAttack, $01
00088D0E E105                       	smpsAlterNote       $05
00088D10 E701                       	dc.b	smpsNoAttack, $01
00088D12 E104                       	smpsAlterNote       $04
00088D14 E701                       	dc.b	smpsNoAttack, $01
00088D16 E108                       	smpsAlterNote       $08
00088D18 E701                       	dc.b	smpsNoAttack, $01
00088D1A E10E                       	smpsAlterNote       $0E
00088D1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D20 E10B                       	smpsAlterNote       $0B
00088D22 E701                       	dc.b	smpsNoAttack, $01
00088D24 E105                       	smpsAlterNote       $05
00088D26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D2A E10B                       	smpsAlterNote       $0B
00088D2C E701                       	dc.b	smpsNoAttack, $01
00088D2E E10E                       	smpsAlterNote       $0E
00088D30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D34 E108                       	smpsAlterNote       $08
00088D36 E701                       	dc.b	smpsNoAttack, $01
00088D38 E105                       	smpsAlterNote       $05
00088D3A 8001                       	dc.b	nRst, $01
00088D3C E109                       	smpsAlterNote       $09
00088D3E C402                       	dc.b	nG5, $02
00088D40 E10B                       	smpsAlterNote       $0B
00088D42 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00088D4B E109                       	smpsAlterNote       $09
00088D4D C404                       	dc.b	nG5, $04
00088D4F E10B                       	smpsAlterNote       $0B
00088D51 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088D55 E107                       	smpsAlterNote       $07
00088D57 BF0D                       	dc.b	nD5, $0D
00088D59 E101                       	smpsAlterNote       $01
00088D5B E701                       	dc.b	smpsNoAttack, $01
00088D5D E100                       	smpsAlterNote       $00
00088D5F E701                       	dc.b	smpsNoAttack, $01
00088D61 E104                       	smpsAlterNote       $04
00088D63 E701                       	dc.b	smpsNoAttack, $01
00088D65 E10A                       	smpsAlterNote       $0A
00088D67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D6B E107                       	smpsAlterNote       $07
00088D6D E701                       	dc.b	smpsNoAttack, $01
00088D6F E101                       	smpsAlterNote       $01
00088D71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D75 E107                       	smpsAlterNote       $07
00088D77 E701                       	dc.b	smpsNoAttack, $01
00088D79 E10A                       	smpsAlterNote       $0A
00088D7B E701                       	dc.b	smpsNoAttack, $01
00088D7D E10B                       	smpsAlterNote       $0B
00088D7F 8001                       	dc.b	nRst, $01
00088D81 E108                       	smpsAlterNote       $08
00088D83 C101                       	dc.b	nE5, $01
00088D85 E109                       	smpsAlterNote       $09
00088D87 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00088D8C E10B                       	smpsAlterNote       $0B
00088D8E C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00088D96 E108                       	smpsAlterNote       $08
00088D98 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00088D9C E109                       	smpsAlterNote       $09
00088D9E CE06 8001                  	dc.b	nF6, $06, nRst, $01
00088DA2 E108                       	smpsAlterNote       $08
00088DA4 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00088DA8 E106                       	smpsAlterNote       $06
00088DAA C903                       	dc.b	nC6, $03
00088DAC E109                       	smpsAlterNote       $09
00088DAE C403 8001                  	dc.b	nG5, $03, nRst, $01
00088DB2 E10C                       	smpsAlterNote       $0C
00088DB4 C70D                       	dc.b	nBb5, $0D
00088DB6 E109                       	smpsAlterNote       $09
00088DB8 E701                       	dc.b	smpsNoAttack, $01
00088DBA E105                       	smpsAlterNote       $05
00088DBC E701                       	dc.b	smpsNoAttack, $01
00088DBE E109                       	smpsAlterNote       $09
00088DC0 E701                       	dc.b	smpsNoAttack, $01
00088DC2 E10F                       	smpsAlterNote       $0F
00088DC4 E701                       	dc.b	smpsNoAttack, $01
00088DC6 E110                       	smpsAlterNote       $10
00088DC8 E701                       	dc.b	smpsNoAttack, $01
00088DCA E10C                       	smpsAlterNote       $0C
00088DCC E701                       	dc.b	smpsNoAttack, $01
00088DCE E106                       	smpsAlterNote       $06
00088DD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DD4 E109                       	smpsAlterNote       $09
00088DD6 E701                       	dc.b	smpsNoAttack, $01
00088DD8 E10F                       	smpsAlterNote       $0F
00088DDA E701                       	dc.b	smpsNoAttack, $01
00088DDC E110                       	smpsAlterNote       $10
00088DDE 8001                       	dc.b	nRst, $01
00088DE0 E10B                       	smpsAlterNote       $0B
00088DE2 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00088DE8 E105                       	smpsAlterNote       $05
00088DEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DEE E108                       	smpsAlterNote       $08
00088DF0 E701                       	dc.b	smpsNoAttack, $01
00088DF2 E10E                       	smpsAlterNote       $0E
00088DF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DF8 E108                       	smpsAlterNote       $08
00088DFA E701                       	dc.b	smpsNoAttack, $01
00088DFC E105                       	smpsAlterNote       $05
00088DFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E02 E10B                       	smpsAlterNote       $0B
00088E04 E701                       	dc.b	smpsNoAttack, $01
00088E06 E10F                       	smpsAlterNote       $0F
00088E08 E701                       	dc.b	smpsNoAttack, $01
00088E0A E10E                       	smpsAlterNote       $0E
00088E0C E701                       	dc.b	smpsNoAttack, $01
00088E0E E108                       	smpsAlterNote       $08
00088E10 E701                       	dc.b	smpsNoAttack, $01
00088E12 E104                       	smpsAlterNote       $04
00088E14 E701                       	dc.b	smpsNoAttack, $01
00088E16 E108                       	smpsAlterNote       $08
00088E18 E701                       	dc.b	smpsNoAttack, $01
00088E1A E10B                       	smpsAlterNote       $0B
00088E1C E701                       	dc.b	smpsNoAttack, $01
00088E1E E10F                       	smpsAlterNote       $0F
00088E20 E701                       	dc.b	smpsNoAttack, $01
00088E22 E10B                       	smpsAlterNote       $0B
00088E24 E701                       	dc.b	smpsNoAttack, $01
00088E26 E105                       	smpsAlterNote       $05
00088E28 E701                       	dc.b	smpsNoAttack, $01
00088E2A E104                       	smpsAlterNote       $04
00088E2C E701                       	dc.b	smpsNoAttack, $01
00088E2E E108                       	smpsAlterNote       $08
00088E30 E701                       	dc.b	smpsNoAttack, $01
00088E32 E10E                       	smpsAlterNote       $0E
00088E34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E38 E10B                       	smpsAlterNote       $0B
00088E3A E701                       	dc.b	smpsNoAttack, $01
00088E3C E105                       	smpsAlterNote       $05
00088E3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E42 E10B                       	smpsAlterNote       $0B
00088E44 E701                       	dc.b	smpsNoAttack, $01
00088E46 E10E                       	smpsAlterNote       $0E
00088E48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E4C E108                       	smpsAlterNote       $08
00088E4E E701                       	dc.b	smpsNoAttack, $01
00088E50 E104                       	smpsAlterNote       $04
00088E52 E701                       	dc.b	smpsNoAttack, $01
00088E54 E105                       	smpsAlterNote       $05
00088E56 E701                       	dc.b	smpsNoAttack, $01
00088E58 E10B                       	smpsAlterNote       $0B
00088E5A E701                       	dc.b	smpsNoAttack, $01
00088E5C E10F                       	smpsAlterNote       $0F
00088E5E E701                       	dc.b	smpsNoAttack, $01
00088E60 E10B                       	smpsAlterNote       $0B
00088E62 E701                       	dc.b	smpsNoAttack, $01
00088E64 E108                       	smpsAlterNote       $08
00088E66 E701                       	dc.b	smpsNoAttack, $01
00088E68 E104                       	smpsAlterNote       $04
00088E6A E701                       	dc.b	smpsNoAttack, $01
00088E6C E108                       	smpsAlterNote       $08
00088E6E E701                       	dc.b	smpsNoAttack, $01
00088E70 E10E                       	smpsAlterNote       $0E
00088E72 E701                       	dc.b	smpsNoAttack, $01
00088E74 E10F                       	smpsAlterNote       $0F
00088E76 E701                       	dc.b	smpsNoAttack, $01
00088E78 E10B                       	smpsAlterNote       $0B
00088E7A E701                       	dc.b	smpsNoAttack, $01
00088E7C E105                       	smpsAlterNote       $05
00088E7E E701                       	dc.b	smpsNoAttack, $01
00088E80 E10B                       	smpsAlterNote       $0B
00088E82 C60E                       	dc.b	nA5, $0E
00088E84 E105                       	smpsAlterNote       $05
00088E86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E8A E10B                       	smpsAlterNote       $0B
00088E8C E701                       	dc.b	smpsNoAttack, $01
00088E8E E10E                       	smpsAlterNote       $0E
00088E90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E94 E108                       	smpsAlterNote       $08
00088E96 E701                       	dc.b	smpsNoAttack, $01
00088E98 E104                       	smpsAlterNote       $04
00088E9A E701                       	dc.b	smpsNoAttack, $01
00088E9C E105                       	smpsAlterNote       $05
00088E9E E701                       	dc.b	smpsNoAttack, $01
00088EA0 E10B                       	smpsAlterNote       $0B
00088EA2 E701                       	dc.b	smpsNoAttack, $01
00088EA4 E10F                       	smpsAlterNote       $0F
00088EA6 E701                       	dc.b	smpsNoAttack, $01
00088EA8 E10B                       	smpsAlterNote       $0B
00088EAA E701                       	dc.b	smpsNoAttack, $01
00088EAC E108                       	smpsAlterNote       $08
00088EAE E701                       	dc.b	smpsNoAttack, $01
00088EB0 E104                       	smpsAlterNote       $04
00088EB2 E701                       	dc.b	smpsNoAttack, $01
00088EB4 E108                       	smpsAlterNote       $08
00088EB6 E701                       	dc.b	smpsNoAttack, $01
00088EB8 E10E                       	smpsAlterNote       $0E
00088EBA E701                       	dc.b	smpsNoAttack, $01
00088EBC E10F                       	smpsAlterNote       $0F
00088EBE E701                       	dc.b	smpsNoAttack, $01
00088EC0 E10B                       	smpsAlterNote       $0B
00088EC2 E701                       	dc.b	smpsNoAttack, $01
00088EC4 E105                       	smpsAlterNote       $05
00088EC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088ECA E108                       	smpsAlterNote       $08
00088ECC E701                       	dc.b	smpsNoAttack, $01
00088ECE E10E                       	smpsAlterNote       $0E
00088ED0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088ED4 E108                       	smpsAlterNote       $08
00088ED6 E701                       	dc.b	smpsNoAttack, $01
00088ED8 E105                       	smpsAlterNote       $05
00088EDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EDE E10B                       	smpsAlterNote       $0B
00088EE0 E701                       	dc.b	smpsNoAttack, $01
00088EE2 E10F                       	smpsAlterNote       $0F
00088EE4 E701                       	dc.b	smpsNoAttack, $01
00088EE6 E10E                       	smpsAlterNote       $0E
00088EE8 E701                       	dc.b	smpsNoAttack, $01
00088EEA E108                       	smpsAlterNote       $08
00088EEC E701                       	dc.b	smpsNoAttack, $01
00088EEE E104                       	smpsAlterNote       $04
00088EF0 E701                       	dc.b	smpsNoAttack, $01
00088EF2 E108                       	smpsAlterNote       $08
00088EF4 E701                       	dc.b	smpsNoAttack, $01
00088EF6 E10E                       	smpsAlterNote       $0E
00088EF8 E701                       	dc.b	smpsNoAttack, $01
00088EFA E10F                       	smpsAlterNote       $0F
00088EFC E701                       	dc.b	smpsNoAttack, $01
00088EFE E10B                       	smpsAlterNote       $0B
00088F00 E701                       	dc.b	smpsNoAttack, $01
00088F02 E105                       	smpsAlterNote       $05
00088F04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F08 E108                       	smpsAlterNote       $08
00088F0A E701                       	dc.b	smpsNoAttack, $01
00088F0C E10E                       	smpsAlterNote       $0E
00088F0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F12 E108                       	smpsAlterNote       $08
00088F14 E701                       	dc.b	smpsNoAttack, $01
00088F16 E105                       	smpsAlterNote       $05
00088F18 E701                       	dc.b	smpsNoAttack, $01
00088F1C E10B                       	smpsAlterNote       $0B
00088F1E E6FD                       	smpsAlterVol        $FD
00088F20 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088F24 E109                       	smpsAlterNote       $09
00088F26 C404                       	dc.b	nG5, $04
00088F28 E10B                       	smpsAlterNote       $0B
00088F2A C604 8001                  	dc.b	nA5, $04, nRst, $01
00088F2E E107                       	smpsAlterNote       $07
00088F30 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00088F36 E10B                       	smpsAlterNote       $0B
00088F38 C604                       	dc.b	nA5, $04
00088F3A E109                       	smpsAlterNote       $09
00088F3C C404 8001                  	dc.b	nG5, $04, nRst, $01
00088F40 E10B                       	smpsAlterNote       $0B
00088F42 C604                       	dc.b	nA5, $04
00088F44 E108                       	smpsAlterNote       $08
00088F46 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00088F4E E106                       	smpsAlterNote       $06
00088F50 C904 8001                  	dc.b	nC6, $04, nRst, $01
00088F54 E10C                       	smpsAlterNote       $0C
00088F56 C704                       	dc.b	nBb5, $04
00088F58 E10B                       	smpsAlterNote       $0B
00088F5A C604 8001                  	dc.b	nA5, $04, nRst, $01
00088F5E E109                       	smpsAlterNote       $09
00088F60 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00088F6A E10B                       	smpsAlterNote       $0B
00088F6C C60D                       	dc.b	nA5, $0D
00088F6E E108                       	smpsAlterNote       $08
00088F70 E701                       	dc.b	smpsNoAttack, $01
00088F72 E104                       	smpsAlterNote       $04
00088F74 E701                       	dc.b	smpsNoAttack, $01
00088F76 E108                       	smpsAlterNote       $08
00088F78 E701                       	dc.b	smpsNoAttack, $01
00088F7A E10E                       	smpsAlterNote       $0E
00088F7C E701                       	dc.b	smpsNoAttack, $01
00088F7E E10F                       	smpsAlterNote       $0F
00088F80 E701                       	dc.b	smpsNoAttack, $01
00088F82 E10B                       	smpsAlterNote       $0B
00088F84 E701                       	dc.b	smpsNoAttack, $01
00088F86 E105                       	smpsAlterNote       $05
00088F88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F8C E108                       	smpsAlterNote       $08
00088F8E E701                       	dc.b	smpsNoAttack, $01
00088F90 E10E                       	smpsAlterNote       $0E
00088F92 E701                       	dc.b	smpsNoAttack, $01
00088F94 E10F                       	smpsAlterNote       $0F
00088F96 8001                       	dc.b	nRst, $01
00088F98 E109                       	smpsAlterNote       $09
00088F9A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00088FA0 E108                       	smpsAlterNote       $08
00088FA2 C10D                       	dc.b	nE5, $0D
00088FA4 E102                       	smpsAlterNote       $02
00088FA6 E701                       	dc.b	smpsNoAttack, $01
00088FA8 E101                       	smpsAlterNote       $01
00088FAA E701                       	dc.b	smpsNoAttack, $01
00088FAC E105                       	smpsAlterNote       $05
00088FAE E701                       	dc.b	smpsNoAttack, $01
00088FB0 E10B                       	smpsAlterNote       $0B
00088FB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FB6 E108                       	smpsAlterNote       $08
00088FB8 E701                       	dc.b	smpsNoAttack, $01
00088FBA E102                       	smpsAlterNote       $02
00088FBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FC0 E108                       	smpsAlterNote       $08
00088FC2 E701                       	dc.b	smpsNoAttack, $01
00088FC4 E10B                       	smpsAlterNote       $0B
00088FC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FCA E105                       	smpsAlterNote       $05
00088FCC E701                       	dc.b	smpsNoAttack, $01
00088FCE E101                       	smpsAlterNote       $01
00088FD0 E701                       	dc.b	smpsNoAttack, $01
00088FD2 E102                       	smpsAlterNote       $02
00088FD4 E701                       	dc.b	smpsNoAttack, $01
00088FD6 E108                       	smpsAlterNote       $08
00088FD8 E701                       	dc.b	smpsNoAttack, $01
00088FDA E10C                       	smpsAlterNote       $0C
00088FDC E701                       	dc.b	smpsNoAttack, $01
00088FDE E108                       	smpsAlterNote       $08
00088FE0 E701                       	dc.b	smpsNoAttack, $01
00088FE2 E105                       	smpsAlterNote       $05
00088FE4 E701                       	dc.b	smpsNoAttack, $01
00088FE6 E101                       	smpsAlterNote       $01
00088FE8 E701                       	dc.b	smpsNoAttack, $01
00088FEA E105                       	smpsAlterNote       $05
00088FEC E701                       	dc.b	smpsNoAttack, $01
00088FEE E10B                       	smpsAlterNote       $0B
00088FF0 E701                       	dc.b	smpsNoAttack, $01
00088FF2 E10C                       	smpsAlterNote       $0C
00088FF4 E701                       	dc.b	smpsNoAttack, $01
00088FF6 E108                       	smpsAlterNote       $08
00088FF8 E701                       	dc.b	smpsNoAttack, $01
00088FFA E102                       	smpsAlterNote       $02
00088FFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089000 E105                       	smpsAlterNote       $05
00089002 E701                       	dc.b	smpsNoAttack, $01
00089004 E10B                       	smpsAlterNote       $0B
00089006 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008900A E105                       	smpsAlterNote       $05
0008900C E701                       	dc.b	smpsNoAttack, $01
0008900E E102                       	smpsAlterNote       $02
00089010 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089014 E108                       	smpsAlterNote       $08
00089016 E701                       	dc.b	smpsNoAttack, $01
00089018 E10C                       	smpsAlterNote       $0C
0008901A E701                       	dc.b	smpsNoAttack, $01
0008901C E10B                       	smpsAlterNote       $0B
0008901E E701                       	dc.b	smpsNoAttack, $01
00089020 E105                       	smpsAlterNote       $05
00089022 E701                       	dc.b	smpsNoAttack, $01
00089024 E101                       	smpsAlterNote       $01
00089026 E701                       	dc.b	smpsNoAttack, $01
00089028 E105                       	smpsAlterNote       $05
0008902A E701                       	dc.b	smpsNoAttack, $01
0008902C E108                       	smpsAlterNote       $08
0008902E E701                       	dc.b	smpsNoAttack, $01
00089030 E10C                       	smpsAlterNote       $0C
00089032 E701                       	dc.b	smpsNoAttack, $01
00089034 E108                       	smpsAlterNote       $08
00089036 E701                       	dc.b	smpsNoAttack, $01
00089038 E102                       	smpsAlterNote       $02
0008903A E701                       	dc.b	smpsNoAttack, $01
0008903C E101                       	smpsAlterNote       $01
0008903E E701                       	dc.b	smpsNoAttack, $01
00089040 E105                       	smpsAlterNote       $05
00089042 E701                       	dc.b	smpsNoAttack, $01
00089044 E10B                       	smpsAlterNote       $0B
00089046 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008904A E108                       	smpsAlterNote       $08
0008904C E701                       	dc.b	smpsNoAttack, $01
0008904E E102                       	smpsAlterNote       $02
00089050 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089054 E108                       	smpsAlterNote       $08
00089056 E701                       	dc.b	smpsNoAttack, $01
00089058 E10B                       	smpsAlterNote       $0B
0008905A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008905E E105                       	smpsAlterNote       $05
00089060 E701                       	dc.b	smpsNoAttack, $01
00089062 E101                       	smpsAlterNote       $01
00089064 E701                       	dc.b	smpsNoAttack, $01
00089066 E102                       	smpsAlterNote       $02
00089068 E701                       	dc.b	smpsNoAttack, $01
0008906A E108                       	smpsAlterNote       $08
0008906C E701                       	dc.b	smpsNoAttack, $01
0008906E E10C                       	smpsAlterNote       $0C
00089070 E701                       	dc.b	smpsNoAttack, $01
00089072 E108                       	smpsAlterNote       $08
00089074 E701                       	dc.b	smpsNoAttack, $01
00089076 E105                       	smpsAlterNote       $05
00089078 E701                       	dc.b	smpsNoAttack, $01
0008907A E101                       	smpsAlterNote       $01
0008907C E701                       	dc.b	smpsNoAttack, $01
0008907E E105                       	smpsAlterNote       $05
00089080 E701                       	dc.b	smpsNoAttack, $01
00089082 E10B                       	smpsAlterNote       $0B
00089084 E701                       	dc.b	smpsNoAttack, $01
00089086 E10C                       	smpsAlterNote       $0C
00089088 E701                       	dc.b	smpsNoAttack, $01
0008908A E108                       	smpsAlterNote       $08
0008908C E701                       	dc.b	smpsNoAttack, $01
0008908E E102                       	smpsAlterNote       $02
00089090 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089094 E105                       	smpsAlterNote       $05
00089096 E701                       	dc.b	smpsNoAttack, $01
00089098 E10B                       	smpsAlterNote       $0B
0008909A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008909E E105                       	smpsAlterNote       $05
000890A0 E701                       	dc.b	smpsNoAttack, $01
000890A2 E101                       	smpsAlterNote       $01
000890A4 E701                       	dc.b	smpsNoAttack, $01
000890A6 E102                       	smpsAlterNote       $02
000890A8 E701                       	dc.b	smpsNoAttack, $01
000890AA E108                       	smpsAlterNote       $08
000890AC E701                       	dc.b	smpsNoAttack, $01
000890AE E10C                       	smpsAlterNote       $0C
000890B0 E701                       	dc.b	smpsNoAttack, $01
000890B2 E108                       	smpsAlterNote       $08
000890B4 E701                       	dc.b	smpsNoAttack, $01
000890B6 E105                       	smpsAlterNote       $05
000890B8 E701                       	dc.b	smpsNoAttack, $01
000890BA E101                       	smpsAlterNote       $01
000890BC E701                       	dc.b	smpsNoAttack, $01
000890BE E105                       	smpsAlterNote       $05
000890C0 E701                       	dc.b	smpsNoAttack, $01
000890C2 E10B                       	smpsAlterNote       $0B
000890C4 E701                       	dc.b	smpsNoAttack, $01
000890C6 E10C                       	smpsAlterNote       $0C
000890C8 E701                       	dc.b	smpsNoAttack, $01
000890CA E108                       	smpsAlterNote       $08
000890CC E701                       	dc.b	smpsNoAttack, $01
000890CE E102                       	smpsAlterNote       $02
000890D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890D4 E105                       	smpsAlterNote       $05
000890D6 E701                       	dc.b	smpsNoAttack, $01
000890D8 E10B                       	smpsAlterNote       $0B
000890DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890DE E105                       	smpsAlterNote       $05
000890E0 E701                       	dc.b	smpsNoAttack, $01
000890E2 E102                       	smpsAlterNote       $02
000890E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890E8 E108                       	smpsAlterNote       $08
000890EA E701                       	dc.b	smpsNoAttack, $01
000890EC E10C                       	smpsAlterNote       $0C
000890EE E701                       	dc.b	smpsNoAttack, $01
000890F0 E10B                       	smpsAlterNote       $0B
000890F2 E701                       	dc.b	smpsNoAttack, $01
000890F4 E105                       	smpsAlterNote       $05
000890F6 E701                       	dc.b	smpsNoAttack, $01
000890F8 E101                       	smpsAlterNote       $01
000890FA E701                       	dc.b	smpsNoAttack, $01
000890FC E105                       	smpsAlterNote       $05
000890FE E701                       	dc.b	smpsNoAttack, $01
00089100 E108                       	smpsAlterNote       $08
00089102 E701                       	dc.b	smpsNoAttack, $01
00089104 E10C                       	smpsAlterNote       $0C
00089106 E701                       	dc.b	smpsNoAttack, $01
0008910A E10B                       	smpsAlterNote       $0B
0008910C C604 8001                  	dc.b	nA5, $04, nRst, $01
00089110 E109                       	smpsAlterNote       $09
00089112 C404                       	dc.b	nG5, $04
00089114 E10B                       	smpsAlterNote       $0B
00089116 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008911A E107                       	smpsAlterNote       $07
0008911C BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00089122 E10B                       	smpsAlterNote       $0B
00089124 C604                       	dc.b	nA5, $04
00089126 E109                       	smpsAlterNote       $09
00089128 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008912C E10B                       	smpsAlterNote       $0B
0008912E C604                       	dc.b	nA5, $04
00089130 E108                       	smpsAlterNote       $08
00089132 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00089138 E106                       	smpsAlterNote       $06
0008913A C904 8001                  	dc.b	nC6, $04, nRst, $01
0008913E E10C                       	smpsAlterNote       $0C
00089140 C704                       	dc.b	nBb5, $04
00089142 E10B                       	smpsAlterNote       $0B
00089144 C604 8001                  	dc.b	nA5, $04, nRst, $01
00089148 E109                       	smpsAlterNote       $09
0008914A C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00089154 E10B                       	smpsAlterNote       $0B
00089156 C60D                       	dc.b	nA5, $0D
00089158 E108                       	smpsAlterNote       $08
0008915A E701                       	dc.b	smpsNoAttack, $01
0008915C E104                       	smpsAlterNote       $04
0008915E E701                       	dc.b	smpsNoAttack, $01
00089160 E108                       	smpsAlterNote       $08
00089162 E701                       	dc.b	smpsNoAttack, $01
00089164 E10B                       	smpsAlterNote       $0B
00089166 E701                       	dc.b	smpsNoAttack, $01
00089168 E10F                       	smpsAlterNote       $0F
0008916A E701                       	dc.b	smpsNoAttack, $01
0008916C E10B                       	smpsAlterNote       $0B
0008916E E701                       	dc.b	smpsNoAttack, $01
00089170 E105                       	smpsAlterNote       $05
00089172 E701                       	dc.b	smpsNoAttack, $01
00089174 E104                       	smpsAlterNote       $04
00089176 E701                       	dc.b	smpsNoAttack, $01
00089178 E108                       	smpsAlterNote       $08
0008917A E701                       	dc.b	smpsNoAttack, $01
0008917C E10E                       	smpsAlterNote       $0E
0008917E E701                       	dc.b	smpsNoAttack, $01
00089180 E10F                       	smpsAlterNote       $0F
00089182 8001                       	dc.b	nRst, $01
00089184 E109                       	smpsAlterNote       $09
00089186 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008918C E108                       	smpsAlterNote       $08
0008918E C10D                       	dc.b	nE5, $0D
00089190 E105                       	smpsAlterNote       $05
00089192 E701                       	dc.b	smpsNoAttack, $01
00089194 E101                       	smpsAlterNote       $01
00089196 E701                       	dc.b	smpsNoAttack, $01
00089198 E105                       	smpsAlterNote       $05
0008919A E701                       	dc.b	smpsNoAttack, $01
0008919C E10B                       	smpsAlterNote       $0B
0008919E E701                       	dc.b	smpsNoAttack, $01
000891A0 E10C                       	smpsAlterNote       $0C
000891A2 E701                       	dc.b	smpsNoAttack, $01
000891A4 E108                       	smpsAlterNote       $08
000891A6 E701                       	dc.b	smpsNoAttack, $01
000891A8 E102                       	smpsAlterNote       $02
000891AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891AE E105                       	smpsAlterNote       $05
000891B0 E701                       	dc.b	smpsNoAttack, $01
000891B2 E10B                       	smpsAlterNote       $0B
000891B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891B8 E105                       	smpsAlterNote       $05
000891BA E701                       	dc.b	smpsNoAttack, $01
000891BC E102                       	smpsAlterNote       $02
000891BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891C2 E108                       	smpsAlterNote       $08
000891C4 E701                       	dc.b	smpsNoAttack, $01
000891C6 E10C                       	smpsAlterNote       $0C
000891C8 E701                       	dc.b	smpsNoAttack, $01
000891CA E10B                       	smpsAlterNote       $0B
000891CC E701                       	dc.b	smpsNoAttack, $01
000891CE E105                       	smpsAlterNote       $05
000891D0 E701                       	dc.b	smpsNoAttack, $01
000891D2 E101                       	smpsAlterNote       $01
000891D4 E701                       	dc.b	smpsNoAttack, $01
000891D6 E105                       	smpsAlterNote       $05
000891D8 E701                       	dc.b	smpsNoAttack, $01
000891DA E108                       	smpsAlterNote       $08
000891DC E701                       	dc.b	smpsNoAttack, $01
000891DE E10C                       	smpsAlterNote       $0C
000891E0 E701                       	dc.b	smpsNoAttack, $01
000891E2 E108                       	smpsAlterNote       $08
000891E4 E701                       	dc.b	smpsNoAttack, $01
000891E6 E102                       	smpsAlterNote       $02
000891E8 E701                       	dc.b	smpsNoAttack, $01
000891EA E101                       	smpsAlterNote       $01
000891EC E701                       	dc.b	smpsNoAttack, $01
000891EE E105                       	smpsAlterNote       $05
000891F0 E701                       	dc.b	smpsNoAttack, $01
000891F2 E10B                       	smpsAlterNote       $0B
000891F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891F8 E108                       	smpsAlterNote       $08
000891FA E701                       	dc.b	smpsNoAttack, $01
000891FC E102                       	smpsAlterNote       $02
000891FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089202 E108                       	smpsAlterNote       $08
00089204 E701                       	dc.b	smpsNoAttack, $01
00089206 E10B                       	smpsAlterNote       $0B
00089208 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008920C E105                       	smpsAlterNote       $05
0008920E E701                       	dc.b	smpsNoAttack, $01
00089210 E101                       	smpsAlterNote       $01
00089212 E701                       	dc.b	smpsNoAttack, $01
00089214 E102                       	smpsAlterNote       $02
00089216 E701                       	dc.b	smpsNoAttack, $01
00089218 E108                       	smpsAlterNote       $08
0008921A E701                       	dc.b	smpsNoAttack, $01
0008921C E10C                       	smpsAlterNote       $0C
0008921E E701                       	dc.b	smpsNoAttack, $01
00089220 E108                       	smpsAlterNote       $08
00089222 E701                       	dc.b	smpsNoAttack, $01
00089224 E105                       	smpsAlterNote       $05
00089226 E701                       	dc.b	smpsNoAttack, $01
00089228 E101                       	smpsAlterNote       $01
0008922A E701                       	dc.b	smpsNoAttack, $01
0008922C E105                       	smpsAlterNote       $05
0008922E E701                       	dc.b	smpsNoAttack, $01
00089230 E10B                       	smpsAlterNote       $0B
00089232 E701                       	dc.b	smpsNoAttack, $01
00089234 E10C                       	smpsAlterNote       $0C
00089236 E701                       	dc.b	smpsNoAttack, $01
00089238 E108                       	smpsAlterNote       $08
0008923A E701                       	dc.b	smpsNoAttack, $01
0008923C E102                       	smpsAlterNote       $02
0008923E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089242 E108                       	smpsAlterNote       $08
00089244 E701                       	dc.b	smpsNoAttack, $01
00089246 E10B                       	smpsAlterNote       $0B
00089248 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008924C E105                       	smpsAlterNote       $05
0008924E E701                       	dc.b	smpsNoAttack, $01
00089250 E101                       	smpsAlterNote       $01
00089252 E701                       	dc.b	smpsNoAttack, $01
00089254 E102                       	smpsAlterNote       $02
00089256 E701                       	dc.b	smpsNoAttack, $01
00089258 E108                       	smpsAlterNote       $08
0008925A E701                       	dc.b	smpsNoAttack, $01
0008925C E10C                       	smpsAlterNote       $0C
0008925E E701                       	dc.b	smpsNoAttack, $01
00089260 E108                       	smpsAlterNote       $08
00089262 E701                       	dc.b	smpsNoAttack, $01
00089264 E105                       	smpsAlterNote       $05
00089266 E701                       	dc.b	smpsNoAttack, $01
00089268 E101                       	smpsAlterNote       $01
0008926A E701                       	dc.b	smpsNoAttack, $01
0008926C E105                       	smpsAlterNote       $05
0008926E E701                       	dc.b	smpsNoAttack, $01
00089270 E10B                       	smpsAlterNote       $0B
00089272 E701                       	dc.b	smpsNoAttack, $01
00089274 E10C                       	smpsAlterNote       $0C
00089276 E701                       	dc.b	smpsNoAttack, $01
00089278 E108                       	smpsAlterNote       $08
0008927A E701                       	dc.b	smpsNoAttack, $01
0008927C E102                       	smpsAlterNote       $02
0008927E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089282 E105                       	smpsAlterNote       $05
00089284 E701                       	dc.b	smpsNoAttack, $01
00089286 E10B                       	smpsAlterNote       $0B
00089288 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008928C E105                       	smpsAlterNote       $05
0008928E E701                       	dc.b	smpsNoAttack, $01
00089290 E102                       	smpsAlterNote       $02
00089292 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089296 E108                       	smpsAlterNote       $08
00089298 E701                       	dc.b	smpsNoAttack, $01
0008929A E10C                       	smpsAlterNote       $0C
0008929C E701                       	dc.b	smpsNoAttack, $01
0008929E E10B                       	smpsAlterNote       $0B
000892A0 E701                       	dc.b	smpsNoAttack, $01
000892A2 E105                       	smpsAlterNote       $05
000892A4 E701                       	dc.b	smpsNoAttack, $01
000892A6 E101                       	smpsAlterNote       $01
000892A8 E701                       	dc.b	smpsNoAttack, $01
000892AA E105                       	smpsAlterNote       $05
000892AC E701                       	dc.b	smpsNoAttack, $01
000892AE E108                       	smpsAlterNote       $08
000892B0 E701                       	dc.b	smpsNoAttack, $01
000892B2 E10C                       	smpsAlterNote       $0C
000892B4 E701                       	dc.b	smpsNoAttack, $01
000892B6 E108                       	smpsAlterNote       $08
000892B8 E701                       	dc.b	smpsNoAttack, $01
000892BA E102                       	smpsAlterNote       $02
000892BC E701                       	dc.b	smpsNoAttack, $01
000892BE E101                       	smpsAlterNote       $01
000892C0 E701                       	dc.b	smpsNoAttack, $01
000892C2 E105                       	smpsAlterNote       $05
000892C4 E701                       	dc.b	smpsNoAttack, $01
000892C6 E10B                       	smpsAlterNote       $0B
000892C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892CC E108                       	smpsAlterNote       $08
000892CE E701                       	dc.b	smpsNoAttack, $01
000892D0 E102                       	smpsAlterNote       $02
000892D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892D6 E108                       	smpsAlterNote       $08
000892D8 E701                       	dc.b	smpsNoAttack, $01
000892DA E10B                       	smpsAlterNote       $0B
000892DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892E0 E105                       	smpsAlterNote       $05
000892E2 E701                       	dc.b	smpsNoAttack, $01
000892E4 E102                       	smpsAlterNote       $02
000892E6 8001                       	dc.b	nRst, $01
000892E8 E107                       	smpsAlterNote       $07
000892EA BF01 8001                  	dc.b	nD5, $01, nRst, $01
000892EE E108                       	smpsAlterNote       $08
000892F0 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
000892F4 E102                       	smpsAlterNote       $02
000892F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892FA E108                       	smpsAlterNote       $08
000892FC E701                       	dc.b	smpsNoAttack, $01
000892FE E10B                       	smpsAlterNote       $0B
00089300 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089304 E105                       	smpsAlterNote       $05
00089306 E701                       	dc.b	smpsNoAttack, $01
00089308 E101                       	smpsAlterNote       $01
0008930A E701                       	dc.b	smpsNoAttack, $01
0008930C E102                       	smpsAlterNote       $02
0008930E E701                       	dc.b	smpsNoAttack, $01
00089310 E108                       	smpsAlterNote       $08
00089312 E701                       	dc.b	smpsNoAttack, $01
00089314 E10C                       	smpsAlterNote       $0C
00089316 E701                       	dc.b	smpsNoAttack, $01
00089318 E108                       	smpsAlterNote       $08
0008931A E701                       	dc.b	smpsNoAttack, $01
0008931C E105                       	smpsAlterNote       $05
0008931E E701                       	dc.b	smpsNoAttack, $01
00089320 E101                       	smpsAlterNote       $01
00089322 E701                       	dc.b	smpsNoAttack, $01
00089324 E105                       	smpsAlterNote       $05
00089326 E701                       	dc.b	smpsNoAttack, $01
00089328 E10B                       	smpsAlterNote       $0B
0008932A E701                       	dc.b	smpsNoAttack, $01
0008932C E10C                       	smpsAlterNote       $0C
0008932E E701                       	dc.b	smpsNoAttack, $01
00089330 E108                       	smpsAlterNote       $08
00089332 E701                       	dc.b	smpsNoAttack, $01
00089334 E102                       	smpsAlterNote       $02
00089336 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008933A E105                       	smpsAlterNote       $05
0008933C E701                       	dc.b	smpsNoAttack, $01
0008933E E10B                       	smpsAlterNote       $0B
00089340 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089344 E105                       	smpsAlterNote       $05
00089346 E701                       	dc.b	smpsNoAttack, $01
00089348 E102                       	smpsAlterNote       $02
0008934A E701                       	dc.b	smpsNoAttack, $01
0008934C E109                       	smpsAlterNote       $09
0008934E C40A C207                  	dc.b	nG5, $0A, nF5, $07
00089352 E108                       	smpsAlterNote       $08
00089354 C10D                       	dc.b	nE5, $0D
00089356 E105                       	smpsAlterNote       $05
00089358 E701                       	dc.b	smpsNoAttack, $01
0008935A E101                       	smpsAlterNote       $01
0008935C E701                       	dc.b	smpsNoAttack, $01
0008935E E102                       	smpsAlterNote       $02
00089360 E701                       	dc.b	smpsNoAttack, $01
00089362 E108                       	smpsAlterNote       $08
00089364 E701                       	dc.b	smpsNoAttack, $01
00089366 E10C                       	smpsAlterNote       $0C
00089368 E701                       	dc.b	smpsNoAttack, $01
0008936A E108                       	smpsAlterNote       $08
0008936C E701                       	dc.b	smpsNoAttack, $01
0008936E E105                       	smpsAlterNote       $05
00089370 E701                       	dc.b	smpsNoAttack, $01
00089372 E101                       	smpsAlterNote       $01
00089374 E701                       	dc.b	smpsNoAttack, $01
00089376 E105                       	smpsAlterNote       $05
00089378 E701                       	dc.b	smpsNoAttack, $01
0008937A E10B                       	smpsAlterNote       $0B
0008937C E701                       	dc.b	smpsNoAttack, $01
0008937E E10C                       	smpsAlterNote       $0C
00089380 E701                       	dc.b	smpsNoAttack, $01
00089382 E108                       	smpsAlterNote       $08
00089384 E701                       	dc.b	smpsNoAttack, $01
00089386 E102                       	smpsAlterNote       $02
00089388 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00089390 E10B                       	smpsAlterNote       $0B
00089392 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00089396 E10C                       	smpsAlterNote       $0C
00089398 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008939C E10B                       	smpsAlterNote       $0B
0008939E BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
000893A4 E107                       	smpsAlterNote       $07
000893A6 BF03                       	dc.b	nD5, $03
000893A8 E108                       	smpsAlterNote       $08
000893AA C103 8001                  	dc.b	nE5, $03, nRst, $01
000893AE E109                       	smpsAlterNote       $09
000893B0 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000893B6 E10B                       	smpsAlterNote       $0B
000893B8 C606 8001                  	dc.b	nA5, $06, nRst, $01
000893BC E107                       	smpsAlterNote       $07
000893BE BF02 8001                  	dc.b	nD5, $02, nRst, $01
000893C2 E106                       	smpsAlterNote       $06
000893C4 C90D                       	dc.b	nC6, $0D
000893C6 E103                       	smpsAlterNote       $03
000893C8 E701                       	dc.b	smpsNoAttack, $01
000893CA E1FF                       	smpsAlterNote       $FF
000893CC E701                       	dc.b	smpsNoAttack, $01
000893CE E103                       	smpsAlterNote       $03
000893D0 E701                       	dc.b	smpsNoAttack, $01
000893D2 E109                       	smpsAlterNote       $09
000893D4 E701                       	dc.b	smpsNoAttack, $01
000893D6 E10A                       	smpsAlterNote       $0A
000893D8 E701                       	dc.b	smpsNoAttack, $01
000893DA E106                       	smpsAlterNote       $06
000893DC E701                       	dc.b	smpsNoAttack, $01
000893DE E100                       	smpsAlterNote       $00
000893E0 E701                       	dc.b	smpsNoAttack, $01
000893E2 E10C                       	smpsAlterNote       $0C
000893E4 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000893E8 E10B                       	smpsAlterNote       $0B
000893EA C603                       	dc.b	nA5, $03
000893EC E109                       	smpsAlterNote       $09
000893EE C403 8001                  	dc.b	nG5, $03, nRst, $01
000893F2 E10B                       	smpsAlterNote       $0B
000893F4 C60D                       	dc.b	nA5, $0D
000893F6 E105                       	smpsAlterNote       $05
000893F8 E701                       	dc.b	smpsNoAttack, $01
000893FA E104                       	smpsAlterNote       $04
000893FC E701                       	dc.b	smpsNoAttack, $01
000893FE E108                       	smpsAlterNote       $08
00089400 E701                       	dc.b	smpsNoAttack, $01
00089402 E10E                       	smpsAlterNote       $0E
00089404 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089408 E10B                       	smpsAlterNote       $0B
0008940A E701                       	dc.b	smpsNoAttack, $01
0008940C E105                       	smpsAlterNote       $05
0008940E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089412 E10B                       	smpsAlterNote       $0B
00089414 E701                       	dc.b	smpsNoAttack, $01
00089416 E10E                       	smpsAlterNote       $0E
00089418 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008941C E108                       	smpsAlterNote       $08
0008941E E701                       	dc.b	smpsNoAttack, $01
00089420 E104                       	smpsAlterNote       $04
00089422 E701                       	dc.b	smpsNoAttack, $01
00089424 E105                       	smpsAlterNote       $05
00089426 E701                       	dc.b	smpsNoAttack, $01
00089428 E10B                       	smpsAlterNote       $0B
0008942A E701                       	dc.b	smpsNoAttack, $01
0008942C E10F                       	smpsAlterNote       $0F
0008942E E701                       	dc.b	smpsNoAttack, $01
00089430 E10B                       	smpsAlterNote       $0B
00089432 E701                       	dc.b	smpsNoAttack, $01
00089434 E108                       	smpsAlterNote       $08
00089436 E701                       	dc.b	smpsNoAttack, $01
00089438 E104                       	smpsAlterNote       $04
0008943A E701                       	dc.b	smpsNoAttack, $01
0008943C E108                       	smpsAlterNote       $08
0008943E E701                       	dc.b	smpsNoAttack, $01
00089440 E10E                       	smpsAlterNote       $0E
00089442 E701                       	dc.b	smpsNoAttack, $01
00089444 E10F                       	smpsAlterNote       $0F
00089446 E701                       	dc.b	smpsNoAttack, $01
00089448 E10B                       	smpsAlterNote       $0B
0008944A E701                       	dc.b	smpsNoAttack, $01
0008944C E105                       	smpsAlterNote       $05
0008944E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089452 E108                       	smpsAlterNote       $08
00089454 E701                       	dc.b	smpsNoAttack, $01
00089456 E10E                       	smpsAlterNote       $0E
00089458 E701                       	dc.b	smpsNoAttack, $01
0008945A E10F                       	smpsAlterNote       $0F
0008945C 800F                       	dc.b	nRst, $0F
0008945E E107                       	smpsAlterNote       $07
00089460 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089464 E108                       	smpsAlterNote       $08
00089466 C103                       	dc.b	nE5, $03
00089468 E109                       	smpsAlterNote       $09
0008946A C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00089470 E10B                       	smpsAlterNote       $0B
00089472 C607                       	dc.b	nA5, $07
00089474 E107                       	smpsAlterNote       $07
00089476 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008947A E106                       	smpsAlterNote       $06
0008947C C90D                       	dc.b	nC6, $0D
0008947E E107                       	smpsAlterNote       $07
00089480 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00089484 E10C                       	smpsAlterNote       $0C
00089486 C704                       	dc.b	nBb5, $04
00089488 E10B                       	smpsAlterNote       $0B
0008948A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008948E E109                       	smpsAlterNote       $09
00089490 C404                       	dc.b	nG5, $04
00089492 E10B                       	smpsAlterNote       $0B
00089494 C60D                       	dc.b	nA5, $0D
00089496 E108                       	smpsAlterNote       $08
00089498 E701                       	dc.b	smpsNoAttack, $01
0008949A E105                       	smpsAlterNote       $05
0008949C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894A0 E10B                       	smpsAlterNote       $0B
000894A2 E701                       	dc.b	smpsNoAttack, $01
000894A4 E10F                       	smpsAlterNote       $0F
000894A6 E701                       	dc.b	smpsNoAttack, $01
000894A8 E10E                       	smpsAlterNote       $0E
000894AA E701                       	dc.b	smpsNoAttack, $01
000894AC E108                       	smpsAlterNote       $08
000894AE E701                       	dc.b	smpsNoAttack, $01
000894B0 E104                       	smpsAlterNote       $04
000894B2 E701                       	dc.b	smpsNoAttack, $01
000894B4 E108                       	smpsAlterNote       $08
000894B6 E701                       	dc.b	smpsNoAttack, $01
000894B8 E10B                       	smpsAlterNote       $0B
000894BA E701                       	dc.b	smpsNoAttack, $01
000894BC E10F                       	smpsAlterNote       $0F
000894BE E701                       	dc.b	smpsNoAttack, $01
000894C0 E10B                       	smpsAlterNote       $0B
000894C2 E701                       	dc.b	smpsNoAttack, $01
000894C4 E105                       	smpsAlterNote       $05
000894C6 E701                       	dc.b	smpsNoAttack, $01
000894C8 E104                       	smpsAlterNote       $04
000894CA E701                       	dc.b	smpsNoAttack, $01
000894CC E108                       	smpsAlterNote       $08
000894CE E701                       	dc.b	smpsNoAttack, $01
000894D0 E10E                       	smpsAlterNote       $0E
000894D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894D6 E10B                       	smpsAlterNote       $0B
000894D8 E701                       	dc.b	smpsNoAttack, $01
000894DA E105                       	smpsAlterNote       $05
000894DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894E0 E10B                       	smpsAlterNote       $0B
000894E2 E701                       	dc.b	smpsNoAttack, $01
000894E4 E10E                       	smpsAlterNote       $0E
000894E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894EA E108                       	smpsAlterNote       $08
000894EC E701                       	dc.b	smpsNoAttack, $01
000894EE E105                       	smpsAlterNote       $05
000894F0 8001                       	dc.b	nRst, $01
000894F2 E109                       	smpsAlterNote       $09
000894F4 C401 8001                  	dc.b	nG5, $01, nRst, $01
000894F8 E10B                       	smpsAlterNote       $0B
000894FA C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00089502 E109                       	smpsAlterNote       $09
00089504 C404                       	dc.b	nG5, $04
00089506 E10B                       	smpsAlterNote       $0B
00089508 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008950C E107                       	smpsAlterNote       $07
0008950E BF0D                       	dc.b	nD5, $0D
00089510 E101                       	smpsAlterNote       $01
00089512 E701                       	dc.b	smpsNoAttack, $01
00089514 E100                       	smpsAlterNote       $00
00089516 E701                       	dc.b	smpsNoAttack, $01
00089518 E104                       	smpsAlterNote       $04
0008951A E701                       	dc.b	smpsNoAttack, $01
0008951C E10A                       	smpsAlterNote       $0A
0008951E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089522 E107                       	smpsAlterNote       $07
00089524 E701                       	dc.b	smpsNoAttack, $01
00089526 E101                       	smpsAlterNote       $01
00089528 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008952C E107                       	smpsAlterNote       $07
0008952E E701                       	dc.b	smpsNoAttack, $01
00089530 E10A                       	smpsAlterNote       $0A
00089532 E701                       	dc.b	smpsNoAttack, $01
00089534 E10B                       	smpsAlterNote       $0B
00089536 8001                       	dc.b	nRst, $01
00089538 E108                       	smpsAlterNote       $08
0008953A 8001                       	dc.b	nRst, $01
0008953C E109                       	smpsAlterNote       $09
0008953E 8001 C401                  	dc.b	nRst, $01, nG5, $01
00089542 E10B                       	smpsAlterNote       $0B
00089544 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008954C E108                       	smpsAlterNote       $08
0008954E CD06 8001                  	dc.b	nE6, $06, nRst, $01
00089552 E109                       	smpsAlterNote       $09
00089554 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00089558 E108                       	smpsAlterNote       $08
0008955A CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008955E E106                       	smpsAlterNote       $06
00089560 C903                       	dc.b	nC6, $03
00089562 E109                       	smpsAlterNote       $09
00089564 C403 8001                  	dc.b	nG5, $03, nRst, $01
00089568 E10C                       	smpsAlterNote       $0C
0008956A C70D                       	dc.b	nBb5, $0D
0008956C E109                       	smpsAlterNote       $09
0008956E E701                       	dc.b	smpsNoAttack, $01
00089570 E105                       	smpsAlterNote       $05
00089572 E701                       	dc.b	smpsNoAttack, $01
00089574 E109                       	smpsAlterNote       $09
00089576 E701                       	dc.b	smpsNoAttack, $01
00089578 E10F                       	smpsAlterNote       $0F
0008957A E701                       	dc.b	smpsNoAttack, $01
0008957C E110                       	smpsAlterNote       $10
0008957E E701                       	dc.b	smpsNoAttack, $01
00089580 E10C                       	smpsAlterNote       $0C
00089582 E701                       	dc.b	smpsNoAttack, $01
00089584 E106                       	smpsAlterNote       $06
00089586 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008958A E109                       	smpsAlterNote       $09
0008958C E701                       	dc.b	smpsNoAttack, $01
0008958E E10F                       	smpsAlterNote       $0F
00089590 E701                       	dc.b	smpsNoAttack, $01
00089592 E110                       	smpsAlterNote       $10
00089594 8001                       	dc.b	nRst, $01
00089596 E10B                       	smpsAlterNote       $0B
00089598 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008959C E109                       	smpsAlterNote       $09
0008959E C40D                       	dc.b	nG5, $0D
000895A0 E103                       	smpsAlterNote       $03
000895A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895A6 E106                       	smpsAlterNote       $06
000895A8 E701                       	dc.b	smpsNoAttack, $01
000895AA E10C                       	smpsAlterNote       $0C
000895AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895B0 E106                       	smpsAlterNote       $06
000895B2 E701                       	dc.b	smpsNoAttack, $01
000895B4 E103                       	smpsAlterNote       $03
000895B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895BA E109                       	smpsAlterNote       $09
000895BC E701                       	dc.b	smpsNoAttack, $01
000895BE E10D                       	smpsAlterNote       $0D
000895C0 E701                       	dc.b	smpsNoAttack, $01
000895C2 E10C                       	smpsAlterNote       $0C
000895C4 E701                       	dc.b	smpsNoAttack, $01
000895C6 E106                       	smpsAlterNote       $06
000895C8 E701                       	dc.b	smpsNoAttack, $01
000895CA E102                       	smpsAlterNote       $02
000895CC E701                       	dc.b	smpsNoAttack, $01
000895CE E103                       	smpsAlterNote       $03
000895D0 8001                       	dc.b	nRst, $01
000895D2 E10B                       	smpsAlterNote       $0B
000895D4 C60D                       	dc.b	nA5, $0D
000895D6 E108                       	smpsAlterNote       $08
000895D8 E701                       	dc.b	smpsNoAttack, $01
000895DA E104                       	smpsAlterNote       $04
000895DC E701                       	dc.b	smpsNoAttack, $01
000895DE E108                       	smpsAlterNote       $08
000895E0 E701                       	dc.b	smpsNoAttack, $01
000895E2 E10B                       	smpsAlterNote       $0B
000895E4 E701                       	dc.b	smpsNoAttack, $01
000895E6 E10F                       	smpsAlterNote       $0F
000895E8 E701                       	dc.b	smpsNoAttack, $01
000895EA E10B                       	smpsAlterNote       $0B
000895EC E701                       	dc.b	smpsNoAttack, $01
000895EE E105                       	smpsAlterNote       $05
000895F0 E701                       	dc.b	smpsNoAttack, $01
000895F2 E104                       	smpsAlterNote       $04
000895F4 E701                       	dc.b	smpsNoAttack, $01
000895F6 E108                       	smpsAlterNote       $08
000895F8 E701                       	dc.b	smpsNoAttack, $01
000895FA E10E                       	smpsAlterNote       $0E
000895FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089600 E10B                       	smpsAlterNote       $0B
00089602 E701                       	dc.b	smpsNoAttack, $01
00089604 E105                       	smpsAlterNote       $05
00089606 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008960A E10C                       	smpsAlterNote       $0C
0008960C C70E                       	dc.b	nBb5, $0E
0008960E E106                       	smpsAlterNote       $06
00089610 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089614 E10C                       	smpsAlterNote       $0C
00089616 E701                       	dc.b	smpsNoAttack, $01
00089618 E10F                       	smpsAlterNote       $0F
0008961A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008961E E109                       	smpsAlterNote       $09
00089620 E701                       	dc.b	smpsNoAttack, $01
00089622 E105                       	smpsAlterNote       $05
00089624 E701                       	dc.b	smpsNoAttack, $01
00089626 E106                       	smpsAlterNote       $06
00089628 E701                       	dc.b	smpsNoAttack, $01
0008962A E10C                       	smpsAlterNote       $0C
0008962C E701                       	dc.b	smpsNoAttack, $01
0008962E E110                       	smpsAlterNote       $10
00089630 E701                       	dc.b	smpsNoAttack, $01
00089632 E10C                       	smpsAlterNote       $0C
00089634 E701                       	dc.b	smpsNoAttack, $01
00089636 E109                       	smpsAlterNote       $09
00089638 E701                       	dc.b	smpsNoAttack, $01
0008963A E105                       	smpsAlterNote       $05
0008963C E701                       	dc.b	smpsNoAttack, $01
0008963E E106                       	smpsAlterNote       $06
00089640 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00089644 E107                       	smpsAlterNote       $07
00089646 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
0008964B E108                       	smpsAlterNote       $08
0008964D CD0D                       	dc.b	nE6, $0D
0008964F E107                       	smpsAlterNote       $07
00089651 CB0D                       	dc.b	nD6, $0D
00089653 E104                       	smpsAlterNote       $04
00089655 E701                       	dc.b	smpsNoAttack, $01
00089657 E100                       	smpsAlterNote       $00
00089659 E701                       	dc.b	smpsNoAttack, $01
0008965B E101                       	smpsAlterNote       $01
0008965D E701                       	dc.b	smpsNoAttack, $01
0008965F E107                       	smpsAlterNote       $07
00089661 E701                       	dc.b	smpsNoAttack, $01
00089663 E10B                       	smpsAlterNote       $0B
00089665 E701                       	dc.b	smpsNoAttack, $01
00089667 E107                       	smpsAlterNote       $07
00089669 E701                       	dc.b	smpsNoAttack, $01
0008966B E104                       	smpsAlterNote       $04
0008966D E701                       	dc.b	smpsNoAttack, $01
0008966F E100                       	smpsAlterNote       $00
00089671 E701                       	dc.b	smpsNoAttack, $01
00089673 E104                       	smpsAlterNote       $04
00089675 E701                       	dc.b	smpsNoAttack, $01
00089677 E10A                       	smpsAlterNote       $0A
00089679 E701                       	dc.b	smpsNoAttack, $01
0008967B E10B                       	smpsAlterNote       $0B
0008967D E701                       	dc.b	smpsNoAttack, $01
0008967F E108                       	smpsAlterNote       $08
00089681 CC0D                       	dc.b	nEb6, $0D
00089683 E105                       	smpsAlterNote       $05
00089685 E701                       	dc.b	smpsNoAttack, $01
00089687 E101                       	smpsAlterNote       $01
00089689 E701                       	dc.b	smpsNoAttack, $01
0008968B E102                       	smpsAlterNote       $02
0008968D E701                       	dc.b	smpsNoAttack, $01
0008968F E108                       	smpsAlterNote       $08
00089691 E701                       	dc.b	smpsNoAttack, $01
00089693 E106                       	smpsAlterNote       $06
00089695 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
000896A1 8001                       	dc.b	nRst, $01
000896A3 E107                       	smpsAlterNote       $07
000896A5 CB0D                       	dc.b	nD6, $0D
000896A7 E104                       	smpsAlterNote       $04
000896A9 E701                       	dc.b	smpsNoAttack, $01
000896AB E100                       	smpsAlterNote       $00
000896AD E701                       	dc.b	smpsNoAttack, $01
000896AF E104                       	smpsAlterNote       $04
000896B1 E701                       	dc.b	smpsNoAttack, $01
000896B3 E107                       	smpsAlterNote       $07
000896B5 E701                       	dc.b	smpsNoAttack, $01
000896B7 E10B                       	smpsAlterNote       $0B
000896B9 E701                       	dc.b	smpsNoAttack, $01
000896BB E107                       	smpsAlterNote       $07
000896BD E701                       	dc.b	smpsNoAttack, $01
000896BF E101                       	smpsAlterNote       $01
000896C1 E701                       	dc.b	smpsNoAttack, $01
000896C3 E100                       	smpsAlterNote       $00
000896C5 E701                       	dc.b	smpsNoAttack, $01
000896C7 E104                       	smpsAlterNote       $04
000896C9 E701                       	dc.b	smpsNoAttack, $01
000896CB E10A                       	smpsAlterNote       $0A
000896CD E701                       	dc.b	smpsNoAttack, $01
000896CF E10B                       	smpsAlterNote       $0B
000896D1 8001                       	dc.b	nRst, $01
000896D3 E109                       	smpsAlterNote       $09
000896D5 CE0A                       	dc.b	nF6, $0A
000896D7 E108                       	smpsAlterNote       $08
000896D9 CC07                       	dc.b	nEb6, $07
000896DB E106                       	smpsAlterNote       $06
000896DD C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
000896E9 E107                       	smpsAlterNote       $07
000896EB CB0D                       	dc.b	nD6, $0D
000896ED E101                       	smpsAlterNote       $01
000896EF E701                       	dc.b	smpsNoAttack, $01
000896F1 E100                       	smpsAlterNote       $00
000896F3 E701                       	dc.b	smpsNoAttack, $01
000896F5 E104                       	smpsAlterNote       $04
000896F7 E701                       	dc.b	smpsNoAttack, $01
000896F9 E10A                       	smpsAlterNote       $0A
000896FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896FF E107                       	smpsAlterNote       $07
00089701 E701                       	dc.b	smpsNoAttack, $01
00089703 E101                       	smpsAlterNote       $01
00089705 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089709 E107                       	smpsAlterNote       $07
0008970B E701                       	dc.b	smpsNoAttack, $01
0008970D E10A                       	smpsAlterNote       $0A
0008970F E701                       	dc.b	smpsNoAttack, $01
00089711 E10B                       	smpsAlterNote       $0B
00089713 8001                       	dc.b	nRst, $01
00089715 E108                       	smpsAlterNote       $08
00089717 CC0D                       	dc.b	nEb6, $0D
00089719 E102                       	smpsAlterNote       $02
0008971B E701                       	dc.b	smpsNoAttack, $01
0008971D E101                       	smpsAlterNote       $01
0008971F E701                       	dc.b	smpsNoAttack, $01
00089721 E105                       	smpsAlterNote       $05
00089723 E701                       	dc.b	smpsNoAttack, $01
00089725 E108                       	smpsAlterNote       $08
00089727 8001                       	dc.b	nRst, $01
00089729 E106                       	smpsAlterNote       $06
0008972B C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00089737 8001                       	dc.b	nRst, $01
00089739 E107                       	smpsAlterNote       $07
0008973B CB0D                       	dc.b	nD6, $0D
0008973D E101                       	smpsAlterNote       $01
0008973F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089743 E104                       	smpsAlterNote       $04
00089745 E701                       	dc.b	smpsNoAttack, $01
00089747 E10A                       	smpsAlterNote       $0A
00089749 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008974D E104                       	smpsAlterNote       $04
0008974F E701                       	dc.b	smpsNoAttack, $01
00089751 E101                       	smpsAlterNote       $01
00089753 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089757 E107                       	smpsAlterNote       $07
00089759 E701                       	dc.b	smpsNoAttack, $01
0008975B E10B                       	smpsAlterNote       $0B
0008975D E701                       	dc.b	smpsNoAttack, $01
0008975F E10A                       	smpsAlterNote       $0A
00089761 E701                       	dc.b	smpsNoAttack, $01
00089763 E104                       	smpsAlterNote       $04
00089765 E701                       	dc.b	smpsNoAttack, $01
00089767 E100                       	smpsAlterNote       $00
00089769 E701                       	dc.b	smpsNoAttack, $01
0008976B E101                       	smpsAlterNote       $01
0008976D 801C                       	dc.b	nRst, $1C
00089771 E107                       	smpsAlterNote       $07
00089773 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00089777 E603                       	smpsAlterVol        $03
00089779 F6F1 AD                    	smpsJump            music84_Jump03
0008977C                            
0008977C                            ; FM3 Data
0008977C                            music84_FM3:
0008977C E0C0                       	smpsPan             panCenter, $00
00089780 E109                       	smpsAlterNote       $09
00089782 C203 8007                  	dc.b	nF5, $03, nRst, $07
00089786 E108                       	smpsAlterNote       $08
00089788 C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008978C E10B                       	smpsAlterNote       $0B
0008978E BA03 8006                  	dc.b	nA4, $03, nRst, $06
00089794 E040                       	smpsPan             panRight, $00
00089796 E110                       	smpsAlterNote       $10
00089798 E6F9                       	smpsAlterVol        $F9
0008979A C702 8001                  	dc.b	nBb5, $02, nRst, $01
0008979E E10F                       	smpsAlterNote       $0F
000897A0 C603                       	dc.b	nA5, $03
000897A2 E10D                       	smpsAlterNote       $0D
000897A4 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000897AA E10C                       	smpsAlterNote       $0C
000897AC C103 8001                  	dc.b	nE5, $03, nRst, $01
000897B0 E10A                       	smpsAlterNote       $0A
000897B2 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000897B6 E10F                       	smpsAlterNote       $0F
000897B8 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000897BC E0C0                       	smpsPan             panCenter, $00
000897C0 E109                       	smpsAlterNote       $09
000897C2 E609                       	smpsAlterVol        $09
000897C4 B603                       	dc.b	nF4, $03
000897C6                            
000897C6                            music84_Jump02:
000897C6 E70A                       	dc.b	smpsNoAttack, $0A
000897C8 E103                       	smpsAlterNote       $03
000897CA E701                       	dc.b	smpsNoAttack, $01
000897CC E102                       	smpsAlterNote       $02
000897CE E701                       	dc.b	smpsNoAttack, $01
000897D0 E106                       	smpsAlterNote       $06
000897D2 E701                       	dc.b	smpsNoAttack, $01
000897D4 E10C                       	smpsAlterNote       $0C
000897D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000897DA E109                       	smpsAlterNote       $09
000897DC E701                       	dc.b	smpsNoAttack, $01
000897DE E103                       	smpsAlterNote       $03
000897E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000897E4 E109                       	smpsAlterNote       $09
000897E6 E701                       	dc.b	smpsNoAttack, $01
000897E8 E10C                       	smpsAlterNote       $0C
000897EA E701                       	dc.b	smpsNoAttack, $01
000897EC E10D                       	smpsAlterNote       $0D
000897EE 8001                       	dc.b	nRst, $01
000897F0 E109                       	smpsAlterNote       $09
000897F2 B80D                       	dc.b	nG4, $0D
000897F4 E103                       	smpsAlterNote       $03
000897F6 E701                       	dc.b	smpsNoAttack, $01
000897F8 E102                       	smpsAlterNote       $02
000897FA E701                       	dc.b	smpsNoAttack, $01
000897FC E106                       	smpsAlterNote       $06
000897FE E701                       	dc.b	smpsNoAttack, $01
00089800 E10C                       	smpsAlterNote       $0C
00089802 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089806 E109                       	smpsAlterNote       $09
00089808 E701                       	dc.b	smpsNoAttack, $01
0008980A E103                       	smpsAlterNote       $03
0008980C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089810 E109                       	smpsAlterNote       $09
00089812 E701                       	dc.b	smpsNoAttack, $01
00089814 E10C                       	smpsAlterNote       $0C
00089816 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008981A E106                       	smpsAlterNote       $06
0008981C E701                       	dc.b	smpsNoAttack, $01
0008981E E102                       	smpsAlterNote       $02
00089820 E701                       	dc.b	smpsNoAttack, $01
00089822 E103                       	smpsAlterNote       $03
00089824 E701                       	dc.b	smpsNoAttack, $01
00089826 E109                       	smpsAlterNote       $09
00089828 E701                       	dc.b	smpsNoAttack, $01
0008982A E10D                       	smpsAlterNote       $0D
0008982C E701                       	dc.b	smpsNoAttack, $01
0008982E E109                       	smpsAlterNote       $09
00089830 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089834 E10B                       	smpsAlterNote       $0B
00089836 BA0D                       	dc.b	nA4, $0D
00089838 E105                       	smpsAlterNote       $05
0008983A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008983E E108                       	smpsAlterNote       $08
00089840 E701                       	dc.b	smpsNoAttack, $01
00089842 E10E                       	smpsAlterNote       $0E
00089844 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089848 E108                       	smpsAlterNote       $08
0008984A E701                       	dc.b	smpsNoAttack, $01
0008984C E104                       	smpsAlterNote       $04
0008984E E701                       	dc.b	smpsNoAttack, $01
00089850 E105                       	smpsAlterNote       $05
00089852 E701                       	dc.b	smpsNoAttack, $01
00089854 E10B                       	smpsAlterNote       $0B
00089856 E701                       	dc.b	smpsNoAttack, $01
00089858 E10F                       	smpsAlterNote       $0F
0008985A E701                       	dc.b	smpsNoAttack, $01
0008985C E10B                       	smpsAlterNote       $0B
0008985E E701                       	dc.b	smpsNoAttack, $01
00089860 E108                       	smpsAlterNote       $08
00089862 E701                       	dc.b	smpsNoAttack, $01
00089864 E104                       	smpsAlterNote       $04
00089866 E701                       	dc.b	smpsNoAttack, $01
00089868 E108                       	smpsAlterNote       $08
0008986A E701                       	dc.b	smpsNoAttack, $01
0008986C E10E                       	smpsAlterNote       $0E
0008986E E701                       	dc.b	smpsNoAttack, $01
00089870 E10F                       	smpsAlterNote       $0F
00089872 E701                       	dc.b	smpsNoAttack, $01
00089874 E10B                       	smpsAlterNote       $0B
00089876 E701                       	dc.b	smpsNoAttack, $01
00089878 E105                       	smpsAlterNote       $05
0008987A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008987E E108                       	smpsAlterNote       $08
00089880 E701                       	dc.b	smpsNoAttack, $01
00089882 E10E                       	smpsAlterNote       $0E
00089884 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089888 E108                       	smpsAlterNote       $08
0008988A E701                       	dc.b	smpsNoAttack, $01
0008988C E105                       	smpsAlterNote       $05
0008988E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089892 E10B                       	smpsAlterNote       $0B
00089894 E701                       	dc.b	smpsNoAttack, $01
00089896 E10F                       	smpsAlterNote       $0F
00089898 E701                       	dc.b	smpsNoAttack, $01
0008989A E10E                       	smpsAlterNote       $0E
0008989C E701                       	dc.b	smpsNoAttack, $01
0008989E E108                       	smpsAlterNote       $08
000898A0 E701                       	dc.b	smpsNoAttack, $01
000898A2 E104                       	smpsAlterNote       $04
000898A4 E701                       	dc.b	smpsNoAttack, $01
000898A6 E105                       	smpsAlterNote       $05
000898A8 8001                       	dc.b	nRst, $01
000898AA E108                       	smpsAlterNote       $08
000898AC B50A                       	dc.b	nE4, $0A
000898AE E109                       	smpsAlterNote       $09
000898B0 B60D                       	dc.b	nF4, $0D
000898B2 E106                       	smpsAlterNote       $06
000898B4 E701                       	dc.b	smpsNoAttack, $01
000898B6 E103                       	smpsAlterNote       $03
000898B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898BC E109                       	smpsAlterNote       $09
000898BE E701                       	dc.b	smpsNoAttack, $01
000898C0 E10D                       	smpsAlterNote       $0D
000898C2 E701                       	dc.b	smpsNoAttack, $01
000898C4 E10C                       	smpsAlterNote       $0C
000898C6 E701                       	dc.b	smpsNoAttack, $01
000898C8 E106                       	smpsAlterNote       $06
000898CA E701                       	dc.b	smpsNoAttack, $01
000898CC E102                       	smpsAlterNote       $02
000898CE E701                       	dc.b	smpsNoAttack, $01
000898D0 E106                       	smpsAlterNote       $06
000898D2 E701                       	dc.b	smpsNoAttack, $01
000898D4 E109                       	smpsAlterNote       $09
000898D6 E701                       	dc.b	smpsNoAttack, $01
000898D8 E10D                       	smpsAlterNote       $0D
000898DA E701                       	dc.b	smpsNoAttack, $01
000898DC E109                       	smpsAlterNote       $09
000898DE B80D                       	dc.b	nG4, $0D
000898E0 E106                       	smpsAlterNote       $06
000898E2 E701                       	dc.b	smpsNoAttack, $01
000898E4 E103                       	smpsAlterNote       $03
000898E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898EA E109                       	smpsAlterNote       $09
000898EC E701                       	dc.b	smpsNoAttack, $01
000898EE E10D                       	smpsAlterNote       $0D
000898F0 E701                       	dc.b	smpsNoAttack, $01
000898F2 E10C                       	smpsAlterNote       $0C
000898F4 E701                       	dc.b	smpsNoAttack, $01
000898F6 E106                       	smpsAlterNote       $06
000898F8 E701                       	dc.b	smpsNoAttack, $01
000898FA E102                       	smpsAlterNote       $02
000898FC E701                       	dc.b	smpsNoAttack, $01
000898FE E106                       	smpsAlterNote       $06
00089900 E701                       	dc.b	smpsNoAttack, $01
00089902 E109                       	smpsAlterNote       $09
00089904 E701                       	dc.b	smpsNoAttack, $01
00089906 E10D                       	smpsAlterNote       $0D
00089908 E701                       	dc.b	smpsNoAttack, $01
0008990A E109                       	smpsAlterNote       $09
0008990C E701                       	dc.b	smpsNoAttack, $01
0008990E E103                       	smpsAlterNote       $03
00089910 E701                       	dc.b	smpsNoAttack, $01
00089912 E102                       	smpsAlterNote       $02
00089914 E701                       	dc.b	smpsNoAttack, $01
00089916 E106                       	smpsAlterNote       $06
00089918 E701                       	dc.b	smpsNoAttack, $01
0008991A E10C                       	smpsAlterNote       $0C
0008991C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089920 E109                       	smpsAlterNote       $09
00089922 E701                       	dc.b	smpsNoAttack, $01
00089924 E10B                       	smpsAlterNote       $0B
00089926 BA0D                       	dc.b	nA4, $0D
00089928 E108                       	smpsAlterNote       $08
0008992A E701                       	dc.b	smpsNoAttack, $01
0008992C E104                       	smpsAlterNote       $04
0008992E E701                       	dc.b	smpsNoAttack, $01
00089930 E108                       	smpsAlterNote       $08
00089932 E701                       	dc.b	smpsNoAttack, $01
00089934 E10B                       	smpsAlterNote       $0B
00089936 E701                       	dc.b	smpsNoAttack, $01
00089938 E10F                       	smpsAlterNote       $0F
0008993A E701                       	dc.b	smpsNoAttack, $01
0008993C E10B                       	smpsAlterNote       $0B
0008993E E701                       	dc.b	smpsNoAttack, $01
00089940 E105                       	smpsAlterNote       $05
00089942 E701                       	dc.b	smpsNoAttack, $01
00089944 E104                       	smpsAlterNote       $04
00089946 E701                       	dc.b	smpsNoAttack, $01
00089948 E108                       	smpsAlterNote       $08
0008994A E701                       	dc.b	smpsNoAttack, $01
0008994C E10E                       	smpsAlterNote       $0E
0008994E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089952 E10B                       	smpsAlterNote       $0B
00089954 E701                       	dc.b	smpsNoAttack, $01
00089956 E105                       	smpsAlterNote       $05
00089958 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008995C E10B                       	smpsAlterNote       $0B
0008995E E701                       	dc.b	smpsNoAttack, $01
00089960 E10E                       	smpsAlterNote       $0E
00089962 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089966 E108                       	smpsAlterNote       $08
00089968 E701                       	dc.b	smpsNoAttack, $01
0008996A E104                       	smpsAlterNote       $04
0008996C E701                       	dc.b	smpsNoAttack, $01
0008996E E105                       	smpsAlterNote       $05
00089970 E701                       	dc.b	smpsNoAttack, $01
00089972 E10B                       	smpsAlterNote       $0B
00089974 E701                       	dc.b	smpsNoAttack, $01
00089976 E10F                       	smpsAlterNote       $0F
00089978 E701                       	dc.b	smpsNoAttack, $01
0008997A E10B                       	smpsAlterNote       $0B
0008997C E701                       	dc.b	smpsNoAttack, $01
0008997E E108                       	smpsAlterNote       $08
00089980 E701                       	dc.b	smpsNoAttack, $01
00089982 E105                       	smpsAlterNote       $05
00089984 8001                       	dc.b	nRst, $01
00089986 E109                       	smpsAlterNote       $09
00089988 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008998C E108                       	smpsAlterNote       $08
0008998E B506 8001                  	dc.b	nE4, $06, nRst, $01
00089992 E107                       	smpsAlterNote       $07
00089994 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00089998 E108                       	smpsAlterNote       $08
0008999A B502 8001                  	dc.b	nE4, $02, nRst, $01
0008999E E109                       	smpsAlterNote       $09
000899A0 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000899A6 E10B                       	smpsAlterNote       $0B
000899A8 BA0D                       	dc.b	nA4, $0D
000899AA E108                       	smpsAlterNote       $08
000899AC E701                       	dc.b	smpsNoAttack, $01
000899AE E104                       	smpsAlterNote       $04
000899B0 E701                       	dc.b	smpsNoAttack, $01
000899B2 E108                       	smpsAlterNote       $08
000899B4 E701                       	dc.b	smpsNoAttack, $01
000899B6 E10E                       	smpsAlterNote       $0E
000899B8 E701                       	dc.b	smpsNoAttack, $01
000899BA E10F                       	smpsAlterNote       $0F
000899BC E701                       	dc.b	smpsNoAttack, $01
000899BE E10B                       	smpsAlterNote       $0B
000899C0 E701                       	dc.b	smpsNoAttack, $01
000899C2 E105                       	smpsAlterNote       $05
000899C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899C8 E108                       	smpsAlterNote       $08
000899CA E701                       	dc.b	smpsNoAttack, $01
000899CC E10E                       	smpsAlterNote       $0E
000899CE E701                       	dc.b	smpsNoAttack, $01
000899D0 E10F                       	smpsAlterNote       $0F
000899D2 8001                       	dc.b	nRst, $01
000899D4 E109                       	smpsAlterNote       $09
000899D6 C20D                       	dc.b	nF5, $0D
000899D8 E103                       	smpsAlterNote       $03
000899DA E701                       	dc.b	smpsNoAttack, $01
000899DC E102                       	smpsAlterNote       $02
000899DE E701                       	dc.b	smpsNoAttack, $01
000899E0 E106                       	smpsAlterNote       $06
000899E2 E701                       	dc.b	smpsNoAttack, $01
000899E4 E10C                       	smpsAlterNote       $0C
000899E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899EA E109                       	smpsAlterNote       $09
000899EC E701                       	dc.b	smpsNoAttack, $01
000899EE E103                       	smpsAlterNote       $03
000899F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899F4 E109                       	smpsAlterNote       $09
000899F6 E701                       	dc.b	smpsNoAttack, $01
000899F8 E10C                       	smpsAlterNote       $0C
000899FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899FE E106                       	smpsAlterNote       $06
00089A00 E701                       	dc.b	smpsNoAttack, $01
00089A02 E102                       	smpsAlterNote       $02
00089A04 E701                       	dc.b	smpsNoAttack, $01
00089A06 E103                       	smpsAlterNote       $03
00089A08 E701                       	dc.b	smpsNoAttack, $01
00089A0A E109                       	smpsAlterNote       $09
00089A0C E701                       	dc.b	smpsNoAttack, $01
00089A0E E10D                       	smpsAlterNote       $0D
00089A10 E701                       	dc.b	smpsNoAttack, $01
00089A12 E109                       	smpsAlterNote       $09
00089A14 E701                       	dc.b	smpsNoAttack, $01
00089A16 E106                       	smpsAlterNote       $06
00089A18 E701                       	dc.b	smpsNoAttack, $01
00089A1A E102                       	smpsAlterNote       $02
00089A1C E701                       	dc.b	smpsNoAttack, $01
00089A1E E106                       	smpsAlterNote       $06
00089A20 E701                       	dc.b	smpsNoAttack, $01
00089A22 E10C                       	smpsAlterNote       $0C
00089A24 E701                       	dc.b	smpsNoAttack, $01
00089A26 E10D                       	smpsAlterNote       $0D
00089A28 E701                       	dc.b	smpsNoAttack, $01
00089A2A E109                       	smpsAlterNote       $09
00089A2C E701                       	dc.b	smpsNoAttack, $01
00089A2E E103                       	smpsAlterNote       $03
00089A30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A34 E106                       	smpsAlterNote       $06
00089A36 E701                       	dc.b	smpsNoAttack, $01
00089A38 E10C                       	smpsAlterNote       $0C
00089A3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A3E E106                       	smpsAlterNote       $06
00089A40 E701                       	dc.b	smpsNoAttack, $01
00089A42 E103                       	smpsAlterNote       $03
00089A44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A48 E109                       	smpsAlterNote       $09
00089A4A E701                       	dc.b	smpsNoAttack, $01
00089A4C E10D                       	smpsAlterNote       $0D
00089A4E E701                       	dc.b	smpsNoAttack, $01
00089A50 E10C                       	smpsAlterNote       $0C
00089A52 E701                       	dc.b	smpsNoAttack, $01
00089A54 E106                       	smpsAlterNote       $06
00089A56 E701                       	dc.b	smpsNoAttack, $01
00089A58 E102                       	smpsAlterNote       $02
00089A5A E701                       	dc.b	smpsNoAttack, $01
00089A5C E106                       	smpsAlterNote       $06
00089A5E E701                       	dc.b	smpsNoAttack, $01
00089A60 E109                       	smpsAlterNote       $09
00089A62 E701                       	dc.b	smpsNoAttack, $01
00089A64 E10D                       	smpsAlterNote       $0D
00089A66 E701                       	dc.b	smpsNoAttack, $01
00089A68 E109                       	smpsAlterNote       $09
00089A6A E701                       	dc.b	smpsNoAttack, $01
00089A6C E103                       	smpsAlterNote       $03
00089A6E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089A72 E109                       	smpsAlterNote       $09
00089A74 C206                       	dc.b	nF5, $06
00089A76 E108                       	smpsAlterNote       $08
00089A78 C10E                       	dc.b	nE5, $0E
00089A7A E102                       	smpsAlterNote       $02
00089A7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A80 E108                       	smpsAlterNote       $08
00089A82 E701                       	dc.b	smpsNoAttack, $01
00089A84 E10B                       	smpsAlterNote       $0B
00089A86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A8A E105                       	smpsAlterNote       $05
00089A8C E701                       	dc.b	smpsNoAttack, $01
00089A8E E101                       	smpsAlterNote       $01
00089A90 E701                       	dc.b	smpsNoAttack, $01
00089A92 E102                       	smpsAlterNote       $02
00089A94 E701                       	dc.b	smpsNoAttack, $01
00089A96 E108                       	smpsAlterNote       $08
00089A98 E701                       	dc.b	smpsNoAttack, $01
00089A9A E10C                       	smpsAlterNote       $0C
00089A9C E701                       	dc.b	smpsNoAttack, $01
00089A9E E107                       	smpsAlterNote       $07
00089AA0 BF0E                       	dc.b	nD5, $0E
00089AA2 E101                       	smpsAlterNote       $01
00089AA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AA8 E107                       	smpsAlterNote       $07
00089AAA E701                       	dc.b	smpsNoAttack, $01
00089AAC E10A                       	smpsAlterNote       $0A
00089AAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AB2 E104                       	smpsAlterNote       $04
00089AB4 E701                       	dc.b	smpsNoAttack, $01
00089AB6 E100                       	smpsAlterNote       $00
00089AB8 E701                       	dc.b	smpsNoAttack, $01
00089ABA E104                       	smpsAlterNote       $04
00089ABC E701                       	dc.b	smpsNoAttack, $01
00089ABE E107                       	smpsAlterNote       $07
00089AC0 E701                       	dc.b	smpsNoAttack, $01
00089AC2 E10B                       	smpsAlterNote       $0B
00089AC4 E701                       	dc.b	smpsNoAttack, $01
00089AC6 E107                       	smpsAlterNote       $07
00089AC8 E701                       	dc.b	smpsNoAttack, $01
00089ACA E101                       	smpsAlterNote       $01
00089ACC E701                       	dc.b	smpsNoAttack, $01
00089ACE E100                       	smpsAlterNote       $00
00089AD0 E701                       	dc.b	smpsNoAttack, $01
00089AD2 E104                       	smpsAlterNote       $04
00089AD4 E701                       	dc.b	smpsNoAttack, $01
00089AD6 E10A                       	smpsAlterNote       $0A
00089AD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089ADC E107                       	smpsAlterNote       $07
00089ADE E701                       	dc.b	smpsNoAttack, $01
00089AE0 E101                       	smpsAlterNote       $01
00089AE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AE6 E107                       	smpsAlterNote       $07
00089AE8 E701                       	dc.b	smpsNoAttack, $01
00089AEA E10A                       	smpsAlterNote       $0A
00089AEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AF0 E104                       	smpsAlterNote       $04
00089AF2 E701                       	dc.b	smpsNoAttack, $01
00089AF4 E100                       	smpsAlterNote       $00
00089AF6 E701                       	dc.b	smpsNoAttack, $01
00089AF8 E101                       	smpsAlterNote       $01
00089AFA E701                       	dc.b	smpsNoAttack, $01
00089AFC E107                       	smpsAlterNote       $07
00089AFE E701                       	dc.b	smpsNoAttack, $01
00089B00 E10B                       	smpsAlterNote       $0B
00089B02 E701                       	dc.b	smpsNoAttack, $01
00089B04 E107                       	smpsAlterNote       $07
00089B06 E701                       	dc.b	smpsNoAttack, $01
00089B08 E104                       	smpsAlterNote       $04
00089B0A E701                       	dc.b	smpsNoAttack, $01
00089B0C E100                       	smpsAlterNote       $00
00089B0E E701                       	dc.b	smpsNoAttack, $01
00089B10 E104                       	smpsAlterNote       $04
00089B12 E701                       	dc.b	smpsNoAttack, $01
00089B14 E10A                       	smpsAlterNote       $0A
00089B16 E701                       	dc.b	smpsNoAttack, $01
00089B18 E10B                       	smpsAlterNote       $0B
00089B1A E701                       	dc.b	smpsNoAttack, $01
00089B1C E107                       	smpsAlterNote       $07
00089B1E E701                       	dc.b	smpsNoAttack, $01
00089B20 E101                       	smpsAlterNote       $01
00089B22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B26 E104                       	smpsAlterNote       $04
00089B28 E701                       	dc.b	smpsNoAttack, $01
00089B2A E10A                       	smpsAlterNote       $0A
00089B2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B30 E104                       	smpsAlterNote       $04
00089B32 E701                       	dc.b	smpsNoAttack, $01
00089B34 E101                       	smpsAlterNote       $01
00089B36 E701                       	dc.b	smpsNoAttack, $01
00089B3A E107                       	smpsAlterNote       $07
00089B3C E6FF                       	smpsAlterVol        $FF
00089B3E BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00089B4A 8004                       	dc.b	nRst, $04
00089B4E E109                       	smpsAlterNote       $09
00089B50 E602                       	smpsAlterVol        $02
00089B52 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00089B58 E108                       	smpsAlterNote       $08
00089B5A B502 8001                  	dc.b	nE4, $02, nRst, $01
00089B5E E109                       	smpsAlterNote       $09
00089B60 B60D                       	dc.b	nF4, $0D
00089B62 E106                       	smpsAlterNote       $06
00089B64 E701                       	dc.b	smpsNoAttack, $01
00089B66 E102                       	smpsAlterNote       $02
00089B68 E701                       	dc.b	smpsNoAttack, $01
00089B6A E106                       	smpsAlterNote       $06
00089B6C E701                       	dc.b	smpsNoAttack, $01
00089B6E E109                       	smpsAlterNote       $09
00089B70 E701                       	dc.b	smpsNoAttack, $01
00089B72 E10D                       	smpsAlterNote       $0D
00089B74 E701                       	dc.b	smpsNoAttack, $01
00089B76 E109                       	smpsAlterNote       $09
00089B78 E701                       	dc.b	smpsNoAttack, $01
00089B7A E103                       	smpsAlterNote       $03
00089B7C E701                       	dc.b	smpsNoAttack, $01
00089B7E E102                       	smpsAlterNote       $02
00089B80 E701                       	dc.b	smpsNoAttack, $01
00089B82 E106                       	smpsAlterNote       $06
00089B84 E701                       	dc.b	smpsNoAttack, $01
00089B86 E10C                       	smpsAlterNote       $0C
00089B88 E701                       	dc.b	smpsNoAttack, $01
00089B8A E10D                       	smpsAlterNote       $0D
00089B8C 8001                       	dc.b	nRst, $01
00089B8E E109                       	smpsAlterNote       $09
00089B90 B80D                       	dc.b	nG4, $0D
00089B92 E106                       	smpsAlterNote       $06
00089B94 E701                       	dc.b	smpsNoAttack, $01
00089B96 E102                       	smpsAlterNote       $02
00089B98 E701                       	dc.b	smpsNoAttack, $01
00089B9A E106                       	smpsAlterNote       $06
00089B9C E701                       	dc.b	smpsNoAttack, $01
00089B9E E10C                       	smpsAlterNote       $0C
00089BA0 E701                       	dc.b	smpsNoAttack, $01
00089BA2 E10D                       	smpsAlterNote       $0D
00089BA4 E701                       	dc.b	smpsNoAttack, $01
00089BA6 E109                       	smpsAlterNote       $09
00089BA8 E701                       	dc.b	smpsNoAttack, $01
00089BAA E103                       	smpsAlterNote       $03
00089BAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BB0 E106                       	smpsAlterNote       $06
00089BB2 E701                       	dc.b	smpsNoAttack, $01
00089BB4 E10C                       	smpsAlterNote       $0C
00089BB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BBA E106                       	smpsAlterNote       $06
00089BBC E701                       	dc.b	smpsNoAttack, $01
00089BBE E103                       	smpsAlterNote       $03
00089BC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BC4 E109                       	smpsAlterNote       $09
00089BC6 E701                       	dc.b	smpsNoAttack, $01
00089BC8 E10D                       	smpsAlterNote       $0D
00089BCA E701                       	dc.b	smpsNoAttack, $01
00089BCC E10C                       	smpsAlterNote       $0C
00089BCE E701                       	dc.b	smpsNoAttack, $01
00089BD0 E109                       	smpsAlterNote       $09
00089BD2 8001                       	dc.b	nRst, $01
00089BD4 E10B                       	smpsAlterNote       $0B
00089BD6 BA03                       	dc.b	nA4, $03
00089BD8 E10C                       	smpsAlterNote       $0C
00089BDA BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00089BDE E10B                       	smpsAlterNote       $0B
00089BE0 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00089BE6 E10C                       	smpsAlterNote       $0C
00089BE8 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089BEC E10B                       	smpsAlterNote       $0B
00089BEE C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00089BF4 E10C                       	smpsAlterNote       $0C
00089BF6 D303                       	dc.b	nBb6, $03
00089BF8 E10B                       	smpsAlterNote       $0B
00089BFA D20D                       	dc.b	nA6, $0D
00089BFC E108                       	smpsAlterNote       $08
00089BFE E701                       	dc.b	smpsNoAttack, $01
00089C00 E104                       	smpsAlterNote       $04
00089C02 E701                       	dc.b	smpsNoAttack, $01
00089C04 E105                       	smpsAlterNote       $05
00089C06 E701                       	dc.b	smpsNoAttack, $01
00089C08 E10B                       	smpsAlterNote       $0B
00089C0A E701                       	dc.b	smpsNoAttack, $01
00089C0C E10F                       	smpsAlterNote       $0F
00089C0E E701                       	dc.b	smpsNoAttack, $01
00089C10 E10B                       	smpsAlterNote       $0B
00089C12 E701                       	dc.b	smpsNoAttack, $01
00089C14 E108                       	smpsAlterNote       $08
00089C16 E701                       	dc.b	smpsNoAttack, $01
00089C18 E104                       	smpsAlterNote       $04
00089C1A E701                       	dc.b	smpsNoAttack, $01
00089C1C E108                       	smpsAlterNote       $08
00089C1E E701                       	dc.b	smpsNoAttack, $01
00089C20 E10E                       	smpsAlterNote       $0E
00089C22 E701                       	dc.b	smpsNoAttack, $01
00089C24 E10F                       	smpsAlterNote       $0F
00089C26 E701                       	dc.b	smpsNoAttack, $01
00089C28 E10B                       	smpsAlterNote       $0B
00089C2A E701                       	dc.b	smpsNoAttack, $01
00089C2C E105                       	smpsAlterNote       $05
00089C2E E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00089C34 E109                       	smpsAlterNote       $09
00089C36 CE07                       	dc.b	nF6, $07
00089C38 E108                       	smpsAlterNote       $08
00089C3A CD06 8001                  	dc.b	nE6, $06, nRst, $01
00089C3E E109                       	smpsAlterNote       $09
00089C40 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00089C44 E108                       	smpsAlterNote       $08
00089C46 CC0D                       	dc.b	nEb6, $0D
00089C48 E102                       	smpsAlterNote       $02
00089C4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C4E E108                       	smpsAlterNote       $08
00089C50 E701                       	dc.b	smpsNoAttack, $01
00089C52 E10B                       	smpsAlterNote       $0B
00089C54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C58 E105                       	smpsAlterNote       $05
00089C5A E701                       	dc.b	smpsNoAttack, $01
00089C5C E101                       	smpsAlterNote       $01
00089C5E E701                       	dc.b	smpsNoAttack, $01
00089C60 E102                       	smpsAlterNote       $02
00089C62 E701                       	dc.b	smpsNoAttack, $01
00089C64 E108                       	smpsAlterNote       $08
00089C66 E701                       	dc.b	smpsNoAttack, $01
00089C68 E10C                       	smpsAlterNote       $0C
00089C6A E701                       	dc.b	smpsNoAttack, $01
00089C6C E108                       	smpsAlterNote       $08
00089C6E E701                       	dc.b	smpsNoAttack, $01
00089C70 E105                       	smpsAlterNote       $05
00089C72 E701                       	dc.b	smpsNoAttack, $01
00089C74 E101                       	smpsAlterNote       $01
00089C76 E701                       	dc.b	smpsNoAttack, $01
00089C78 E105                       	smpsAlterNote       $05
00089C7A E701                       	dc.b	smpsNoAttack, $01
00089C7C E10B                       	smpsAlterNote       $0B
00089C7E E701                       	dc.b	smpsNoAttack, $01
00089C80 E10C                       	smpsAlterNote       $0C
00089C82 E701                       	dc.b	smpsNoAttack, $01
00089C84 E108                       	smpsAlterNote       $08
00089C86 E701                       	dc.b	smpsNoAttack, $01
00089C88 E107                       	smpsAlterNote       $07
00089C8A CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00089C94 E10B                       	smpsAlterNote       $0B
00089C96 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00089CA0 E109                       	smpsAlterNote       $09
00089CA2 C203                       	dc.b	nF5, $03
00089CA4 E108                       	smpsAlterNote       $08
00089CA6 C103 8001                  	dc.b	nE5, $03, nRst, $01
00089CAA E109                       	smpsAlterNote       $09
00089CAC C20D                       	dc.b	nF5, $0D
00089CAE E108                       	smpsAlterNote       $08
00089CB0 C10E                       	dc.b	nE5, $0E
00089CB2 E107                       	smpsAlterNote       $07
00089CB4 BF0D                       	dc.b	nD5, $0D
00089CB6 E104                       	smpsAlterNote       $04
00089CB8 E701                       	dc.b	smpsNoAttack, $01
00089CBA E100                       	smpsAlterNote       $00
00089CBC E701                       	dc.b	smpsNoAttack, $01
00089CBE E104                       	smpsAlterNote       $04
00089CC0 E701                       	dc.b	smpsNoAttack, $01
00089CC2 E107                       	smpsAlterNote       $07
00089CC4 E701                       	dc.b	smpsNoAttack, $01
00089CC6 E10B                       	smpsAlterNote       $0B
00089CC8 E701                       	dc.b	smpsNoAttack, $01
00089CCA E107                       	smpsAlterNote       $07
00089CCC E701                       	dc.b	smpsNoAttack, $01
00089CCE E101                       	smpsAlterNote       $01
00089CD0 E701                       	dc.b	smpsNoAttack, $01
00089CD2 E100                       	smpsAlterNote       $00
00089CD4 E701                       	dc.b	smpsNoAttack, $01
00089CD6 E104                       	smpsAlterNote       $04
00089CD8 E701                       	dc.b	smpsNoAttack, $01
00089CDA E10A                       	smpsAlterNote       $0A
00089CDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CE0 E107                       	smpsAlterNote       $07
00089CE2 E701                       	dc.b	smpsNoAttack, $01
00089CE4 E101                       	smpsAlterNote       $01
00089CE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CEA E107                       	smpsAlterNote       $07
00089CEC E701                       	dc.b	smpsNoAttack, $01
00089CEE E10A                       	smpsAlterNote       $0A
00089CF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CF4 E104                       	smpsAlterNote       $04
00089CF6 E701                       	dc.b	smpsNoAttack, $01
00089CF8 E100                       	smpsAlterNote       $00
00089CFA E701                       	dc.b	smpsNoAttack, $01
00089CFC E101                       	smpsAlterNote       $01
00089CFE E701                       	dc.b	smpsNoAttack, $01
00089D00 E107                       	smpsAlterNote       $07
00089D02 E701                       	dc.b	smpsNoAttack, $01
00089D04 E10B                       	smpsAlterNote       $0B
00089D06 E701                       	dc.b	smpsNoAttack, $01
00089D08 E107                       	smpsAlterNote       $07
00089D0A E701                       	dc.b	smpsNoAttack, $01
00089D0C E104                       	smpsAlterNote       $04
00089D0E E701                       	dc.b	smpsNoAttack, $01
00089D10 E100                       	smpsAlterNote       $00
00089D12 E701                       	dc.b	smpsNoAttack, $01
00089D14 E104                       	smpsAlterNote       $04
00089D16 E701                       	dc.b	smpsNoAttack, $01
00089D18 E10A                       	smpsAlterNote       $0A
00089D1A E701                       	dc.b	smpsNoAttack, $01
00089D1C E10B                       	smpsAlterNote       $0B
00089D1E E701                       	dc.b	smpsNoAttack, $01
00089D20 E107                       	smpsAlterNote       $07
00089D22 E701                       	dc.b	smpsNoAttack, $01
00089D24 E101                       	smpsAlterNote       $01
00089D26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D2A E104                       	smpsAlterNote       $04
00089D2C E701                       	dc.b	smpsNoAttack, $01
00089D2E E10A                       	smpsAlterNote       $0A
00089D30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D34 E104                       	smpsAlterNote       $04
00089D36 E701                       	dc.b	smpsNoAttack, $01
00089D38 E101                       	smpsAlterNote       $01
00089D3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D3E E107                       	smpsAlterNote       $07
00089D40 E701                       	dc.b	smpsNoAttack, $01
00089D42 E10B                       	smpsAlterNote       $0B
00089D44 E701                       	dc.b	smpsNoAttack, $01
00089D46 E10A                       	smpsAlterNote       $0A
00089D48 E701                       	dc.b	smpsNoAttack, $01
00089D4A E104                       	smpsAlterNote       $04
00089D4C E701                       	dc.b	smpsNoAttack, $01
00089D4E E100                       	smpsAlterNote       $00
00089D50 E701                       	dc.b	smpsNoAttack, $01
00089D52 E104                       	smpsAlterNote       $04
00089D54 E701                       	dc.b	smpsNoAttack, $01
00089D56 E107                       	smpsAlterNote       $07
00089D58 E701                       	dc.b	smpsNoAttack, $01
00089D5A E10B                       	smpsAlterNote       $0B
00089D5C E701                       	dc.b	smpsNoAttack, $01
00089D5E E107                       	smpsAlterNote       $07
00089D60 E701                       	dc.b	smpsNoAttack, $01
00089D62 E101                       	smpsAlterNote       $01
00089D64 E701                       	dc.b	smpsNoAttack, $01
00089D66 E100                       	smpsAlterNote       $00
00089D68 E701                       	dc.b	smpsNoAttack, $01
00089D6A E104                       	smpsAlterNote       $04
00089D6C E701                       	dc.b	smpsNoAttack, $01
00089D6E E10A                       	smpsAlterNote       $0A
00089D70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D74 E107                       	smpsAlterNote       $07
00089D76 E701                       	dc.b	smpsNoAttack, $01
00089D78 E101                       	smpsAlterNote       $01
00089D7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D7E E107                       	smpsAlterNote       $07
00089D80 E701                       	dc.b	smpsNoAttack, $01
00089D82 E10A                       	smpsAlterNote       $0A
00089D84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D88 E104                       	smpsAlterNote       $04
00089D8A E701                       	dc.b	smpsNoAttack, $01
00089D8C E100                       	smpsAlterNote       $00
00089D8E E701                       	dc.b	smpsNoAttack, $01
00089D90 E101                       	smpsAlterNote       $01
00089D92 E701                       	dc.b	smpsNoAttack, $01
00089D94 E107                       	smpsAlterNote       $07
00089D96 E701                       	dc.b	smpsNoAttack, $01
00089D98 E10B                       	smpsAlterNote       $0B
00089D9A E701                       	dc.b	smpsNoAttack, $01
00089D9C E107                       	smpsAlterNote       $07
00089D9E E701                       	dc.b	smpsNoAttack, $01
00089DA0 E104                       	smpsAlterNote       $04
00089DA2 E701                       	dc.b	smpsNoAttack, $01
00089DA4 E100                       	smpsAlterNote       $00
00089DA6 E701                       	dc.b	smpsNoAttack, $01
00089DA8 E101                       	smpsAlterNote       $01
00089DAA 8001                       	dc.b	nRst, $01
00089DAC E109                       	smpsAlterNote       $09
00089DAE C20D                       	dc.b	nF5, $0D
00089DB0 E106                       	smpsAlterNote       $06
00089DB2 E701                       	dc.b	smpsNoAttack, $01
00089DB4 E102                       	smpsAlterNote       $02
00089DB6 E701                       	dc.b	smpsNoAttack, $01
00089DB8 E106                       	smpsAlterNote       $06
00089DBA E701                       	dc.b	smpsNoAttack, $01
00089DBC E10C                       	smpsAlterNote       $0C
00089DBE E701                       	dc.b	smpsNoAttack, $01
00089DC0 E10D                       	smpsAlterNote       $0D
00089DC2 E701                       	dc.b	smpsNoAttack, $01
00089DC4 E109                       	smpsAlterNote       $09
00089DC6 E701                       	dc.b	smpsNoAttack, $01
00089DC8 E103                       	smpsAlterNote       $03
00089DCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DCE E106                       	smpsAlterNote       $06
00089DD0 E701                       	dc.b	smpsNoAttack, $01
00089DD2 E10C                       	smpsAlterNote       $0C
00089DD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DD8 E106                       	smpsAlterNote       $06
00089DDA E701                       	dc.b	smpsNoAttack, $01
00089DDC E103                       	smpsAlterNote       $03
00089DDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DE2 E109                       	smpsAlterNote       $09
00089DE4 E701                       	dc.b	smpsNoAttack, $01
00089DE6 E10D                       	smpsAlterNote       $0D
00089DE8 E701                       	dc.b	smpsNoAttack, $01
00089DEA E10C                       	smpsAlterNote       $0C
00089DEC E701                       	dc.b	smpsNoAttack, $01
00089DEE E109                       	smpsAlterNote       $09
00089DF0 8001                       	dc.b	nRst, $01
00089DF2 E108                       	smpsAlterNote       $08
00089DF4 C10D                       	dc.b	nE5, $0D
00089DF6 E109                       	smpsAlterNote       $09
00089DF8 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00089DFC E108                       	smpsAlterNote       $08
00089DFE C10D                       	dc.b	nE5, $0D
00089E00 E102                       	smpsAlterNote       $02
00089E02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E06 E105                       	smpsAlterNote       $05
00089E08 E701                       	dc.b	smpsNoAttack, $01
00089E0A E108                       	smpsAlterNote       $08
00089E0C 8001                       	dc.b	nRst, $01
00089E0E E107                       	smpsAlterNote       $07
00089E10 BF0D                       	dc.b	nD5, $0D
00089E12 E108                       	smpsAlterNote       $08
00089E14 C107                       	dc.b	nE5, $07
00089E16 E109                       	smpsAlterNote       $09
00089E18 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00089E1E E10B                       	smpsAlterNote       $0B
00089E20 C603                       	dc.b	nA5, $03
00089E22 E10C                       	smpsAlterNote       $0C
00089E24 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00089E2A E10B                       	smpsAlterNote       $0B
00089E2C C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00089E32 E109                       	smpsAlterNote       $09
00089E34 D003                       	dc.b	nG6, $03
00089E36 E108                       	smpsAlterNote       $08
00089E38 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00089E3C E10B                       	smpsAlterNote       $0B
00089E3E C601 8001                  	dc.b	nA5, $01, nRst, $01
00089E42 E108                       	smpsAlterNote       $08
00089E44 C102                       	dc.b	nE5, $02
00089E48 E10C                       	smpsAlterNote       $0C
00089E4A E6FB                       	smpsAlterVol        $FB
00089E4C A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00089E58 8001                       	dc.b	nRst, $01
00089E5A E10B                       	smpsAlterNote       $0B
00089E5C A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00089E64 E107                       	smpsAlterNote       $07
00089E66 A706 8001                  	dc.b	nD3, $06, nRst, $01
00089E6A E10B                       	smpsAlterNote       $0B
00089E6C A203                       	dc.b	nA2, $03
00089E6E E109                       	smpsAlterNote       $09
00089E70 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00089E74 E108                       	smpsAlterNote       $08
00089E76 A906                       	dc.b	nE3, $06
00089E78 E107                       	smpsAlterNote       $07
00089E7A A703 8001                  	dc.b	nD3, $03, nRst, $01
00089E7E E106                       	smpsAlterNote       $06
00089E80 A503                       	dc.b	nC3, $03
00089E82 E10C                       	smpsAlterNote       $0C
00089E84 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00089E88 E10B                       	smpsAlterNote       $0B
00089E8A A203 8004                  	dc.b	nA2, $03, nRst, $04
00089E8E E11B                       	smpsAlterNote       $1B
00089E90 C401                       	dc.b	nG5, $01
00089E92 E1F4                       	smpsAlterNote       $F4
00089E94 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00089E97 E106                       	smpsAlterNote       $06
00089E99 E701                       	dc.b	smpsNoAttack, $01
00089E9B E10F                       	smpsAlterNote       $0F
00089E9D E701                       	dc.b	smpsNoAttack, $01
00089E9F E1E4                       	smpsAlterNote       $E4
00089EA1 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00089EA4 E1F6                       	smpsAlterNote       $F6
00089EA6 E701                       	dc.b	smpsNoAttack, $01
00089EA8 E108                       	smpsAlterNote       $08
00089EAA E701                       	dc.b	smpsNoAttack, $01
00089EAC E10B                       	smpsAlterNote       $0B
00089EAE E706                       	dc.b	smpsNoAttack, $06
00089EB0 E105                       	smpsAlterNote       $05
00089EB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EB6 E108                       	smpsAlterNote       $08
00089EB8 E701                       	dc.b	smpsNoAttack, $01
00089EBA E10E                       	smpsAlterNote       $0E
00089EBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EC0 E108                       	smpsAlterNote       $08
00089EC2 E701                       	dc.b	smpsNoAttack, $01
00089EC4 E105                       	smpsAlterNote       $05
00089EC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089ECA E10B                       	smpsAlterNote       $0B
00089ECC E701                       	dc.b	smpsNoAttack, $01
00089ECE E10F                       	smpsAlterNote       $0F
00089ED0 E701                       	dc.b	smpsNoAttack, $01
00089ED2 E10E                       	smpsAlterNote       $0E
00089ED4 E701                       	dc.b	smpsNoAttack, $01
00089ED6 E108                       	smpsAlterNote       $08
00089ED8 E701                       	dc.b	smpsNoAttack, $01
00089EDA E104                       	smpsAlterNote       $04
00089EDC E701                       	dc.b	smpsNoAttack, $01
00089EDE E108                       	smpsAlterNote       $08
00089EE0 E701                       	dc.b	smpsNoAttack, $01
00089EE2 E10B                       	smpsAlterNote       $0B
00089EE4 E701                       	dc.b	smpsNoAttack, $01
00089EE6 E10F                       	smpsAlterNote       $0F
00089EE8 E701                       	dc.b	smpsNoAttack, $01
00089EEA E10B                       	smpsAlterNote       $0B
00089EEC E701                       	dc.b	smpsNoAttack, $01
00089EEE E105                       	smpsAlterNote       $05
00089EF0 E701                       	dc.b	smpsNoAttack, $01
00089EF2 E104                       	smpsAlterNote       $04
00089EF4 E701                       	dc.b	smpsNoAttack, $01
00089EF6 E108                       	smpsAlterNote       $08
00089EF8 E701                       	dc.b	smpsNoAttack, $01
00089EFA E10E                       	smpsAlterNote       $0E
00089EFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F00 E10B                       	smpsAlterNote       $0B
00089F02 E701                       	dc.b	smpsNoAttack, $01
00089F04 E105                       	smpsAlterNote       $05
00089F06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F0A E10B                       	smpsAlterNote       $0B
00089F0C E701                       	dc.b	smpsNoAttack, $01
00089F0E E10E                       	smpsAlterNote       $0E
00089F10 E701                       	dc.b	smpsNoAttack, $01
00089F12 E10F                       	smpsAlterNote       $0F
00089F14 8001                       	dc.b	nRst, $01
00089F16 E109                       	smpsAlterNote       $09
00089F18 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00089F1E E108                       	smpsAlterNote       $08
00089F20 C101 8001                  	dc.b	nE5, $01, nRst, $01
00089F24 E109                       	smpsAlterNote       $09
00089F26 C202                       	dc.b	nF5, $02
00089F28 E108                       	smpsAlterNote       $08
00089F2A C102                       	dc.b	nE5, $02
00089F2C E107                       	smpsAlterNote       $07
00089F2E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089F32 E108                       	smpsAlterNote       $08
00089F34 C101 8001                  	dc.b	nE5, $01, nRst, $01
00089F38 E107                       	smpsAlterNote       $07
00089F3A BF02                       	dc.b	nD5, $02
00089F3C E106                       	smpsAlterNote       $06
00089F3E BD02 8001                  	dc.b	nC5, $02, nRst, $01
00089F42 E107                       	smpsAlterNote       $07
00089F44 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00089F48 E106                       	smpsAlterNote       $06
00089F4A BD02                       	dc.b	nC5, $02
00089F4C E10C                       	smpsAlterNote       $0C
00089F4E BB02                       	dc.b	nBb4, $02
00089F50 E106                       	smpsAlterNote       $06
00089F52 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00089F56 E10C                       	smpsAlterNote       $0C
00089F58 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00089F5C E10B                       	smpsAlterNote       $0B
00089F5E BA02                       	dc.b	nA4, $02
00089F60 E10C                       	smpsAlterNote       $0C
00089F62 BB02                       	dc.b	nBb4, $02
00089F64 E10B                       	smpsAlterNote       $0B
00089F66 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00089F70 E108                       	smpsAlterNote       $08
00089F72 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
00089F7A E107                       	smpsAlterNote       $07
00089F7C BE02                       	dc.b	nCs5, $02
00089F7E E10B                       	smpsAlterNote       $0B
00089F80 BA02                       	dc.b	nA4, $02
00089F82 E109                       	smpsAlterNote       $09
00089F84 B802 8001                  	dc.b	nG4, $02, nRst, $01
00089F88 E108                       	smpsAlterNote       $08
00089F8A B501 8001                  	dc.b	nE4, $01, nRst, $01
00089F8E E10B                       	smpsAlterNote       $0B
00089F90 AE02                       	dc.b	nA3, $02
00089F92 E10C                       	smpsAlterNote       $0C
00089F94 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00089FA0 E10B                       	smpsAlterNote       $0B
00089FA2 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00089FAA E107                       	smpsAlterNote       $07
00089FAC A706 8001                  	dc.b	nD3, $06, nRst, $01
00089FB0 E10B                       	smpsAlterNote       $0B
00089FB2 A203                       	dc.b	nA2, $03
00089FB4 E109                       	smpsAlterNote       $09
00089FB6 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00089FBA E108                       	smpsAlterNote       $08
00089FBC A906 8001                  	dc.b	nE3, $06, nRst, $01
00089FC0 E107                       	smpsAlterNote       $07
00089FC2 A702 8001                  	dc.b	nD3, $02, nRst, $01
00089FC6 E106                       	smpsAlterNote       $06
00089FC8 A503                       	dc.b	nC3, $03
00089FCA E10C                       	smpsAlterNote       $0C
00089FCC A303 8001                  	dc.b	nBb2, $03, nRst, $01
00089FD2 E107                       	smpsAlterNote       $07
00089FD4 B20D                       	dc.b	nCs4, $0D
00089FD6 E104                       	smpsAlterNote       $04
00089FD8 E701                       	dc.b	smpsNoAttack, $01
00089FDA E100                       	smpsAlterNote       $00
00089FDC E701                       	dc.b	smpsNoAttack, $01
00089FDE E104                       	smpsAlterNote       $04
00089FE0 E701                       	dc.b	smpsNoAttack, $01
00089FE2 E10A                       	smpsAlterNote       $0A
00089FE4 E701                       	dc.b	smpsNoAttack, $01
00089FE6 E10B                       	smpsAlterNote       $0B
00089FE8 E701                       	dc.b	smpsNoAttack, $01
00089FEA E107                       	smpsAlterNote       $07
00089FEC E701                       	dc.b	smpsNoAttack, $01
00089FEE E101                       	smpsAlterNote       $01
00089FF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FF4 E104                       	smpsAlterNote       $04
00089FF6 E701                       	dc.b	smpsNoAttack, $01
00089FF8 E10A                       	smpsAlterNote       $0A
00089FFA E701                       	dc.b	smpsNoAttack, $01
00089FFC E10B                       	smpsAlterNote       $0B
00089FFE 8001                       	dc.b	nRst, $01
0008A000 E107                       	smpsAlterNote       $07
0008A002 B30D                       	dc.b	nD4, $0D
0008A004 E104                       	smpsAlterNote       $04
0008A006 E701                       	dc.b	smpsNoAttack, $01
0008A008 E100                       	smpsAlterNote       $00
0008A00A E701                       	dc.b	smpsNoAttack, $01
0008A00C E104                       	smpsAlterNote       $04
0008A00E E701                       	dc.b	smpsNoAttack, $01
0008A010 E10A                       	smpsAlterNote       $0A
0008A012 E701                       	dc.b	smpsNoAttack, $01
0008A014 E10B                       	smpsAlterNote       $0B
0008A016 E701                       	dc.b	smpsNoAttack, $01
0008A018 E107                       	smpsAlterNote       $07
0008A01A E701                       	dc.b	smpsNoAttack, $01
0008A01C E101                       	smpsAlterNote       $01
0008A01E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A022 E104                       	smpsAlterNote       $04
0008A024 E701                       	dc.b	smpsNoAttack, $01
0008A026 E10A                       	smpsAlterNote       $0A
0008A028 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A02C E104                       	smpsAlterNote       $04
0008A02E E701                       	dc.b	smpsNoAttack, $01
0008A030 E101                       	smpsAlterNote       $01
0008A032 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A036 E107                       	smpsAlterNote       $07
0008A038 E701                       	dc.b	smpsNoAttack, $01
0008A03A E10B                       	smpsAlterNote       $0B
0008A03C E701                       	dc.b	smpsNoAttack, $01
0008A03E E10A                       	smpsAlterNote       $0A
0008A040 E701                       	dc.b	smpsNoAttack, $01
0008A042 E107                       	smpsAlterNote       $07
0008A044 8001                       	dc.b	nRst, $01
0008A046 E108                       	smpsAlterNote       $08
0008A048 B50D                       	dc.b	nE4, $0D
0008A04A E102                       	smpsAlterNote       $02
0008A04C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A050 E105                       	smpsAlterNote       $05
0008A052 E701                       	dc.b	smpsNoAttack, $01
0008A054 E10B                       	smpsAlterNote       $0B
0008A056 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A05A E105                       	smpsAlterNote       $05
0008A05C E701                       	dc.b	smpsNoAttack, $01
0008A05E E102                       	smpsAlterNote       $02
0008A060 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A064 E108                       	smpsAlterNote       $08
0008A066 E701                       	dc.b	smpsNoAttack, $01
0008A068 E10C                       	smpsAlterNote       $0C
0008A06A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A06E E107                       	smpsAlterNote       $07
0008A070 B30D                       	dc.b	nD4, $0D
0008A072 E101                       	smpsAlterNote       $01
0008A074 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A078 E104                       	smpsAlterNote       $04
0008A07A E701                       	dc.b	smpsNoAttack, $01
0008A07C E10A                       	smpsAlterNote       $0A
0008A07E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A082 E104                       	smpsAlterNote       $04
0008A084 E701                       	dc.b	smpsNoAttack, $01
0008A086 E101                       	smpsAlterNote       $01
0008A088 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A08C E107                       	smpsAlterNote       $07
0008A08E E701                       	dc.b	smpsNoAttack, $01
0008A090 E10B                       	smpsAlterNote       $0B
0008A092 E701                       	dc.b	smpsNoAttack, $01
0008A094 E10A                       	smpsAlterNote       $0A
0008A096 E701                       	dc.b	smpsNoAttack, $01
0008A098 E104                       	smpsAlterNote       $04
0008A09A E701                       	dc.b	smpsNoAttack, $01
0008A09C E100                       	smpsAlterNote       $00
0008A09E E701                       	dc.b	smpsNoAttack, $01
0008A0A0 E104                       	smpsAlterNote       $04
0008A0A2 E701                       	dc.b	smpsNoAttack, $01
0008A0A4 E107                       	smpsAlterNote       $07
0008A0A6 E701                       	dc.b	smpsNoAttack, $01
0008A0A8 E10B                       	smpsAlterNote       $0B
0008A0AA E701                       	dc.b	smpsNoAttack, $01
0008A0AC E107                       	smpsAlterNote       $07
0008A0AE E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008A0B2 E101                       	smpsAlterNote       $01
0008A0B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0B8 E107                       	smpsAlterNote       $07
0008A0BA E701                       	dc.b	smpsNoAttack, $01
0008A0BC E10A                       	smpsAlterNote       $0A
0008A0BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0C2 E104                       	smpsAlterNote       $04
0008A0C4 E701                       	dc.b	smpsNoAttack, $01
0008A0C6 E100                       	smpsAlterNote       $00
0008A0C8 E701                       	dc.b	smpsNoAttack, $01
0008A0CA E101                       	smpsAlterNote       $01
0008A0CC E701                       	dc.b	smpsNoAttack, $01
0008A0CE E107                       	smpsAlterNote       $07
0008A0D0 E701                       	dc.b	smpsNoAttack, $01
0008A0D2 E10B                       	smpsAlterNote       $0B
0008A0D4 E701                       	dc.b	smpsNoAttack, $01
0008A0D6 E107                       	smpsAlterNote       $07
0008A0D8 B30E                       	dc.b	nD4, $0E
0008A0DA E101                       	smpsAlterNote       $01
0008A0DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0E0 E107                       	smpsAlterNote       $07
0008A0E2 E701                       	dc.b	smpsNoAttack, $01
0008A0E4 E10A                       	smpsAlterNote       $0A
0008A0E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0EA E104                       	smpsAlterNote       $04
0008A0EC E701                       	dc.b	smpsNoAttack, $01
0008A0EE E100                       	smpsAlterNote       $00
0008A0F0 E701                       	dc.b	smpsNoAttack, $01
0008A0F2 E101                       	smpsAlterNote       $01
0008A0F4 E701                       	dc.b	smpsNoAttack, $01
0008A0F6 E107                       	smpsAlterNote       $07
0008A0F8 E701                       	dc.b	smpsNoAttack, $01
0008A0FA E10B                       	smpsAlterNote       $0B
0008A0FC E701                       	dc.b	smpsNoAttack, $01
0008A0FE E107                       	smpsAlterNote       $07
0008A100 E701                       	dc.b	smpsNoAttack, $01
0008A102 E104                       	smpsAlterNote       $04
0008A104 E701                       	dc.b	smpsNoAttack, $01
0008A106 E100                       	smpsAlterNote       $00
0008A108 E701                       	dc.b	smpsNoAttack, $01
0008A10A E104                       	smpsAlterNote       $04
0008A10C E701                       	dc.b	smpsNoAttack, $01
0008A10E E10A                       	smpsAlterNote       $0A
0008A110 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A114 E107                       	smpsAlterNote       $07
0008A116 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008A11A E104                       	smpsAlterNote       $04
0008A11C E701                       	dc.b	smpsNoAttack, $01
0008A11E E100                       	smpsAlterNote       $00
0008A120 E701                       	dc.b	smpsNoAttack, $01
0008A122 E101                       	smpsAlterNote       $01
0008A124 E701                       	dc.b	smpsNoAttack, $01
0008A126 E107                       	smpsAlterNote       $07
0008A128 E701                       	dc.b	smpsNoAttack, $01
0008A12A E10B                       	smpsAlterNote       $0B
0008A12C E701                       	dc.b	smpsNoAttack, $01
0008A12E E107                       	smpsAlterNote       $07
0008A130 E701                       	dc.b	smpsNoAttack, $01
0008A132 E104                       	smpsAlterNote       $04
0008A134 E701                       	dc.b	smpsNoAttack, $01
0008A136 E100                       	smpsAlterNote       $00
0008A138 E701                       	dc.b	smpsNoAttack, $01
0008A13A E104                       	smpsAlterNote       $04
0008A13C E701                       	dc.b	smpsNoAttack, $01
0008A13E E10A                       	smpsAlterNote       $0A
0008A140 E701                       	dc.b	smpsNoAttack, $01
0008A142 E10B                       	smpsAlterNote       $0B
0008A144 E701                       	dc.b	smpsNoAttack, $01
0008A148 E6FF                       	smpsAlterVol        $FF
0008A14A A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008A156 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008A15E E109                       	smpsAlterNote       $09
0008A160 E601                       	smpsAlterVol        $01
0008A162 B60D                       	dc.b	nF4, $0D
0008A164 E106                       	smpsAlterNote       $06
0008A166 E701                       	dc.b	smpsNoAttack, $01
0008A168 E102                       	smpsAlterNote       $02
0008A16A E701                       	dc.b	smpsNoAttack, $01
0008A16C E106                       	smpsAlterNote       $06
0008A16E E701                       	dc.b	smpsNoAttack, $01
0008A170 E109                       	smpsAlterNote       $09
0008A172 E701                       	dc.b	smpsNoAttack, $01
0008A174 E10D                       	smpsAlterNote       $0D
0008A176 E701                       	dc.b	smpsNoAttack, $01
0008A178 E109                       	smpsAlterNote       $09
0008A17A E701                       	dc.b	smpsNoAttack, $01
0008A17C E103                       	smpsAlterNote       $03
0008A17E E701                       	dc.b	smpsNoAttack, $01
0008A180 E102                       	smpsAlterNote       $02
0008A182 E701                       	dc.b	smpsNoAttack, $01
0008A184 E106                       	smpsAlterNote       $06
0008A186 E701                       	dc.b	smpsNoAttack, $01
0008A188 E10C                       	smpsAlterNote       $0C
0008A18A E701                       	dc.b	smpsNoAttack, $01
0008A18C E10D                       	smpsAlterNote       $0D
0008A18E 8001                       	dc.b	nRst, $01
0008A190 E109                       	smpsAlterNote       $09
0008A192 B80D                       	dc.b	nG4, $0D
0008A194 E106                       	smpsAlterNote       $06
0008A196 E701                       	dc.b	smpsNoAttack, $01
0008A198 E102                       	smpsAlterNote       $02
0008A19A E701                       	dc.b	smpsNoAttack, $01
0008A19C E106                       	smpsAlterNote       $06
0008A19E E701                       	dc.b	smpsNoAttack, $01
0008A1A0 E109                       	smpsAlterNote       $09
0008A1A2 E701                       	dc.b	smpsNoAttack, $01
0008A1A4 E10D                       	smpsAlterNote       $0D
0008A1A6 E701                       	dc.b	smpsNoAttack, $01
0008A1A8 E109                       	smpsAlterNote       $09
0008A1AA E701                       	dc.b	smpsNoAttack, $01
0008A1AC E103                       	smpsAlterNote       $03
0008A1AE E701                       	dc.b	smpsNoAttack, $01
0008A1B0 E102                       	smpsAlterNote       $02
0008A1B2 E701                       	dc.b	smpsNoAttack, $01
0008A1B4 E106                       	smpsAlterNote       $06
0008A1B6 E701                       	dc.b	smpsNoAttack, $01
0008A1B8 E10C                       	smpsAlterNote       $0C
0008A1BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1BE E106                       	smpsAlterNote       $06
0008A1C0 E701                       	dc.b	smpsNoAttack, $01
0008A1C2 E103                       	smpsAlterNote       $03
0008A1C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1C8 E109                       	smpsAlterNote       $09
0008A1CA E701                       	dc.b	smpsNoAttack, $01
0008A1CC E10D                       	smpsAlterNote       $0D
0008A1CE E701                       	dc.b	smpsNoAttack, $01
0008A1D0 E10C                       	smpsAlterNote       $0C
0008A1D2 E701                       	dc.b	smpsNoAttack, $01
0008A1D4 E109                       	smpsAlterNote       $09
0008A1D6 8001                       	dc.b	nRst, $01
0008A1D8 E10B                       	smpsAlterNote       $0B
0008A1DA BA0D                       	dc.b	nA4, $0D
0008A1DC E105                       	smpsAlterNote       $05
0008A1DE E701                       	dc.b	smpsNoAttack, $01
0008A1E0 E104                       	smpsAlterNote       $04
0008A1E2 E701                       	dc.b	smpsNoAttack, $01
0008A1E4 E108                       	smpsAlterNote       $08
0008A1E6 E701                       	dc.b	smpsNoAttack, $01
0008A1E8 E10E                       	smpsAlterNote       $0E
0008A1EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1EE E10B                       	smpsAlterNote       $0B
0008A1F0 E701                       	dc.b	smpsNoAttack, $01
0008A1F2 E105                       	smpsAlterNote       $05
0008A1F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1F8 E10B                       	smpsAlterNote       $0B
0008A1FA E701                       	dc.b	smpsNoAttack, $01
0008A1FC E10E                       	smpsAlterNote       $0E
0008A1FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A202 E108                       	smpsAlterNote       $08
0008A204 E701                       	dc.b	smpsNoAttack, $01
0008A206 E104                       	smpsAlterNote       $04
0008A208 E701                       	dc.b	smpsNoAttack, $01
0008A20A E105                       	smpsAlterNote       $05
0008A20C E701                       	dc.b	smpsNoAttack, $01
0008A20E E10B                       	smpsAlterNote       $0B
0008A210 E701                       	dc.b	smpsNoAttack, $01
0008A212 E10F                       	smpsAlterNote       $0F
0008A214 E701                       	dc.b	smpsNoAttack, $01
0008A216 E10B                       	smpsAlterNote       $0B
0008A218 E701                       	dc.b	smpsNoAttack, $01
0008A21A E108                       	smpsAlterNote       $08
0008A21C E701                       	dc.b	smpsNoAttack, $01
0008A21E E104                       	smpsAlterNote       $04
0008A220 E701                       	dc.b	smpsNoAttack, $01
0008A222 E108                       	smpsAlterNote       $08
0008A224 E701                       	dc.b	smpsNoAttack, $01
0008A226 E10E                       	smpsAlterNote       $0E
0008A228 E701                       	dc.b	smpsNoAttack, $01
0008A22A E10F                       	smpsAlterNote       $0F
0008A22C E701                       	dc.b	smpsNoAttack, $01
0008A22E E10B                       	smpsAlterNote       $0B
0008A230 E701                       	dc.b	smpsNoAttack, $01
0008A232 E105                       	smpsAlterNote       $05
0008A234 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A238 E108                       	smpsAlterNote       $08
0008A23A E701                       	dc.b	smpsNoAttack, $01
0008A23C E10E                       	smpsAlterNote       $0E
0008A23E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A242 E108                       	smpsAlterNote       $08
0008A244 E701                       	dc.b	smpsNoAttack, $01
0008A246 E105                       	smpsAlterNote       $05
0008A248 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A24C E108                       	smpsAlterNote       $08
0008A24E B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008A252 E109                       	smpsAlterNote       $09
0008A254 B60D                       	dc.b	nF4, $0D
0008A256 E103                       	smpsAlterNote       $03
0008A258 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A25C E106                       	smpsAlterNote       $06
0008A25E E701                       	dc.b	smpsNoAttack, $01
0008A260 E10C                       	smpsAlterNote       $0C
0008A262 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A266 E106                       	smpsAlterNote       $06
0008A268 E701                       	dc.b	smpsNoAttack, $01
0008A26A E103                       	smpsAlterNote       $03
0008A26C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A270 E109                       	smpsAlterNote       $09
0008A272 E701                       	dc.b	smpsNoAttack, $01
0008A274 E10D                       	smpsAlterNote       $0D
0008A276 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A27A E109                       	smpsAlterNote       $09
0008A27C B80D                       	dc.b	nG4, $0D
0008A27E E103                       	smpsAlterNote       $03
0008A280 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A284 E109                       	smpsAlterNote       $09
0008A286 E701                       	dc.b	smpsNoAttack, $01
0008A288 E10C                       	smpsAlterNote       $0C
0008A28A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A28E E106                       	smpsAlterNote       $06
0008A290 E701                       	dc.b	smpsNoAttack, $01
0008A292 E102                       	smpsAlterNote       $02
0008A294 E701                       	dc.b	smpsNoAttack, $01
0008A296 E103                       	smpsAlterNote       $03
0008A298 E701                       	dc.b	smpsNoAttack, $01
0008A29A E109                       	smpsAlterNote       $09
0008A29C E701                       	dc.b	smpsNoAttack, $01
0008A29E E10D                       	smpsAlterNote       $0D
0008A2A0 E701                       	dc.b	smpsNoAttack, $01
0008A2A2 E109                       	smpsAlterNote       $09
0008A2A4 E701                       	dc.b	smpsNoAttack, $01
0008A2A6 E106                       	smpsAlterNote       $06
0008A2A8 E701                       	dc.b	smpsNoAttack, $01
0008A2AA E102                       	smpsAlterNote       $02
0008A2AC E701                       	dc.b	smpsNoAttack, $01
0008A2AE E106                       	smpsAlterNote       $06
0008A2B0 E701                       	dc.b	smpsNoAttack, $01
0008A2B2 E10C                       	smpsAlterNote       $0C
0008A2B4 E701                       	dc.b	smpsNoAttack, $01
0008A2B6 E10D                       	smpsAlterNote       $0D
0008A2B8 E701                       	dc.b	smpsNoAttack, $01
0008A2BA E109                       	smpsAlterNote       $09
0008A2BC E701                       	dc.b	smpsNoAttack, $01
0008A2BE E10B                       	smpsAlterNote       $0B
0008A2C0 BA0D                       	dc.b	nA4, $0D
0008A2C2 E108                       	smpsAlterNote       $08
0008A2C4 E701                       	dc.b	smpsNoAttack, $01
0008A2C6 E105                       	smpsAlterNote       $05
0008A2C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2CC E10B                       	smpsAlterNote       $0B
0008A2CE E701                       	dc.b	smpsNoAttack, $01
0008A2D0 E10F                       	smpsAlterNote       $0F
0008A2D2 E701                       	dc.b	smpsNoAttack, $01
0008A2D4 E10E                       	smpsAlterNote       $0E
0008A2D6 E701                       	dc.b	smpsNoAttack, $01
0008A2D8 E108                       	smpsAlterNote       $08
0008A2DA E701                       	dc.b	smpsNoAttack, $01
0008A2DC E104                       	smpsAlterNote       $04
0008A2DE E701                       	dc.b	smpsNoAttack, $01
0008A2E0 E108                       	smpsAlterNote       $08
0008A2E2 E701                       	dc.b	smpsNoAttack, $01
0008A2E4 E10B                       	smpsAlterNote       $0B
0008A2E6 E701                       	dc.b	smpsNoAttack, $01
0008A2E8 E10F                       	smpsAlterNote       $0F
0008A2EA E701                       	dc.b	smpsNoAttack, $01
0008A2EC E10B                       	smpsAlterNote       $0B
0008A2EE E701                       	dc.b	smpsNoAttack, $01
0008A2F0 E105                       	smpsAlterNote       $05
0008A2F2 E701                       	dc.b	smpsNoAttack, $01
0008A2F4 E104                       	smpsAlterNote       $04
0008A2F6 E701                       	dc.b	smpsNoAttack, $01
0008A2F8 E108                       	smpsAlterNote       $08
0008A2FA E701                       	dc.b	smpsNoAttack, $01
0008A2FC E10E                       	smpsAlterNote       $0E
0008A2FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A302 E10B                       	smpsAlterNote       $0B
0008A304 E701                       	dc.b	smpsNoAttack, $01
0008A306 E105                       	smpsAlterNote       $05
0008A308 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A30C E10B                       	smpsAlterNote       $0B
0008A30E E701                       	dc.b	smpsNoAttack, $01
0008A310 E10E                       	smpsAlterNote       $0E
0008A312 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A316 E108                       	smpsAlterNote       $08
0008A318 E701                       	dc.b	smpsNoAttack, $01
0008A31A E105                       	smpsAlterNote       $05
0008A31C 8001                       	dc.b	nRst, $01
0008A31E E109                       	smpsAlterNote       $09
0008A320 B60A                       	dc.b	nF4, $0A
0008A322 E108                       	smpsAlterNote       $08
0008A324 B507                       	dc.b	nE4, $07
0008A326 E107                       	smpsAlterNote       $07
0008A328 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008A32C E108                       	smpsAlterNote       $08
0008A32E B503                       	dc.b	nE4, $03
0008A330 E109                       	smpsAlterNote       $09
0008A332 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008A33A E10B                       	smpsAlterNote       $0B
0008A33C BA0D                       	dc.b	nA4, $0D
0008A33E E108                       	smpsAlterNote       $08
0008A340 E701                       	dc.b	smpsNoAttack, $01
0008A342 E104                       	smpsAlterNote       $04
0008A344 E701                       	dc.b	smpsNoAttack, $01
0008A346 E108                       	smpsAlterNote       $08
0008A348 E701                       	dc.b	smpsNoAttack, $01
0008A34A E10B                       	smpsAlterNote       $0B
0008A34C E701                       	dc.b	smpsNoAttack, $01
0008A34E E10F                       	smpsAlterNote       $0F
0008A350 E701                       	dc.b	smpsNoAttack, $01
0008A352 E10B                       	smpsAlterNote       $0B
0008A354 E701                       	dc.b	smpsNoAttack, $01
0008A356 E105                       	smpsAlterNote       $05
0008A358 E701                       	dc.b	smpsNoAttack, $01
0008A35A E104                       	smpsAlterNote       $04
0008A35C E701                       	dc.b	smpsNoAttack, $01
0008A35E E108                       	smpsAlterNote       $08
0008A360 E701                       	dc.b	smpsNoAttack, $01
0008A362 E10E                       	smpsAlterNote       $0E
0008A364 E701                       	dc.b	smpsNoAttack, $01
0008A366 E10F                       	smpsAlterNote       $0F
0008A368 8001                       	dc.b	nRst, $01
0008A36A E109                       	smpsAlterNote       $09
0008A36C C20D                       	dc.b	nF5, $0D
0008A36E E106                       	smpsAlterNote       $06
0008A370 E701                       	dc.b	smpsNoAttack, $01
0008A372 E102                       	smpsAlterNote       $02
0008A374 E701                       	dc.b	smpsNoAttack, $01
0008A376 E106                       	smpsAlterNote       $06
0008A378 E701                       	dc.b	smpsNoAttack, $01
0008A37A E109                       	smpsAlterNote       $09
0008A37C E701                       	dc.b	smpsNoAttack, $01
0008A37E E10D                       	smpsAlterNote       $0D
0008A380 E701                       	dc.b	smpsNoAttack, $01
0008A382 E109                       	smpsAlterNote       $09
0008A384 E701                       	dc.b	smpsNoAttack, $01
0008A386 E103                       	smpsAlterNote       $03
0008A388 E701                       	dc.b	smpsNoAttack, $01
0008A38A E102                       	smpsAlterNote       $02
0008A38C E701                       	dc.b	smpsNoAttack, $01
0008A38E E106                       	smpsAlterNote       $06
0008A390 E701                       	dc.b	smpsNoAttack, $01
0008A392 E10C                       	smpsAlterNote       $0C
0008A394 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A398 E109                       	smpsAlterNote       $09
0008A39A E701                       	dc.b	smpsNoAttack, $01
0008A39C E103                       	smpsAlterNote       $03
0008A39E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3A2 E109                       	smpsAlterNote       $09
0008A3A4 E701                       	dc.b	smpsNoAttack, $01
0008A3A6 E10C                       	smpsAlterNote       $0C
0008A3A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3AC E106                       	smpsAlterNote       $06
0008A3AE E701                       	dc.b	smpsNoAttack, $01
0008A3B0 E102                       	smpsAlterNote       $02
0008A3B2 E701                       	dc.b	smpsNoAttack, $01
0008A3B4 E103                       	smpsAlterNote       $03
0008A3B6 E701                       	dc.b	smpsNoAttack, $01
0008A3B8 E109                       	smpsAlterNote       $09
0008A3BA E701                       	dc.b	smpsNoAttack, $01
0008A3BC E10D                       	smpsAlterNote       $0D
0008A3BE E701                       	dc.b	smpsNoAttack, $01
0008A3C0 E109                       	smpsAlterNote       $09
0008A3C2 E701                       	dc.b	smpsNoAttack, $01
0008A3C4 E106                       	smpsAlterNote       $06
0008A3C6 E701                       	dc.b	smpsNoAttack, $01
0008A3C8 E102                       	smpsAlterNote       $02
0008A3CA E701                       	dc.b	smpsNoAttack, $01
0008A3CC E106                       	smpsAlterNote       $06
0008A3CE E701                       	dc.b	smpsNoAttack, $01
0008A3D0 E10C                       	smpsAlterNote       $0C
0008A3D2 E701                       	dc.b	smpsNoAttack, $01
0008A3D4 E10D                       	smpsAlterNote       $0D
0008A3D6 E701                       	dc.b	smpsNoAttack, $01
0008A3D8 E109                       	smpsAlterNote       $09
0008A3DA E701                       	dc.b	smpsNoAttack, $01
0008A3DC E103                       	smpsAlterNote       $03
0008A3DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3E2 E106                       	smpsAlterNote       $06
0008A3E4 E701                       	dc.b	smpsNoAttack, $01
0008A3E6 E10C                       	smpsAlterNote       $0C
0008A3E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3EC E106                       	smpsAlterNote       $06
0008A3EE E701                       	dc.b	smpsNoAttack, $01
0008A3F0 E103                       	smpsAlterNote       $03
0008A3F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3F6 E109                       	smpsAlterNote       $09
0008A3F8 E701                       	dc.b	smpsNoAttack, $01
0008A3FA E10D                       	smpsAlterNote       $0D
0008A3FC E701                       	dc.b	smpsNoAttack, $01
0008A3FE E10C                       	smpsAlterNote       $0C
0008A400 E701                       	dc.b	smpsNoAttack, $01
0008A402 E106                       	smpsAlterNote       $06
0008A404 E701                       	dc.b	smpsNoAttack, $01
0008A406 E103                       	smpsAlterNote       $03
0008A408 8001                       	dc.b	nRst, $01
0008A40A E109                       	smpsAlterNote       $09
0008A40C C206 8001                  	dc.b	nF5, $06, nRst, $01
0008A412 E10C                       	smpsAlterNote       $0C
0008A414 E601                       	smpsAlterVol        $01
0008A416 BB0D                       	dc.b	nBb4, $0D
0008A418 E106                       	smpsAlterNote       $06
0008A41A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A41E E109                       	smpsAlterNote       $09
0008A420 E701                       	dc.b	smpsNoAttack, $01
0008A422 E10F                       	smpsAlterNote       $0F
0008A424 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A428 E109                       	smpsAlterNote       $09
0008A42A E701                       	dc.b	smpsNoAttack, $01
0008A42C E106                       	smpsAlterNote       $06
0008A42E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A432 E10C                       	smpsAlterNote       $0C
0008A434 E701                       	dc.b	smpsNoAttack, $01
0008A436 E110                       	smpsAlterNote       $10
0008A438 E701                       	dc.b	smpsNoAttack, $01
0008A43A E10F                       	smpsAlterNote       $0F
0008A43C E701                       	dc.b	smpsNoAttack, $01
0008A43E E109                       	smpsAlterNote       $09
0008A440 E701                       	dc.b	smpsNoAttack, $01
0008A442 E105                       	smpsAlterNote       $05
0008A444 E701                       	dc.b	smpsNoAttack, $01
0008A446 E106                       	smpsAlterNote       $06
0008A448 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008A44C E103                       	smpsAlterNote       $03
0008A44E E701                       	dc.b	smpsNoAttack, $01
0008A450 E1FF                       	smpsAlterNote       $FF
0008A452 E701                       	dc.b	smpsNoAttack, $01
0008A454 E103                       	smpsAlterNote       $03
0008A456 E701                       	dc.b	smpsNoAttack, $01
0008A458 E106                       	smpsAlterNote       $06
0008A45A E701                       	dc.b	smpsNoAttack, $01
0008A45C E10A                       	smpsAlterNote       $0A
0008A45E E701                       	dc.b	smpsNoAttack, $01
0008A460 E106                       	smpsAlterNote       $06
0008A462 E701                       	dc.b	smpsNoAttack, $01
0008A464 E100                       	smpsAlterNote       $00
0008A466 E701                       	dc.b	smpsNoAttack, $01
0008A468 E1FF                       	smpsAlterNote       $FF
0008A46A E701                       	dc.b	smpsNoAttack, $01
0008A46C E103                       	smpsAlterNote       $03
0008A46E E701                       	dc.b	smpsNoAttack, $01
0008A470 E109                       	smpsAlterNote       $09
0008A472 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A476 E106                       	smpsAlterNote       $06
0008A478 E701                       	dc.b	smpsNoAttack, $01
0008A47A E100                       	smpsAlterNote       $00
0008A47C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A480 E107                       	smpsAlterNote       $07
0008A482 BF0E                       	dc.b	nD5, $0E
0008A484 E101                       	smpsAlterNote       $01
0008A486 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A48A E107                       	smpsAlterNote       $07
0008A48C E701                       	dc.b	smpsNoAttack, $01
0008A48E E10A                       	smpsAlterNote       $0A
0008A490 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A494 E104                       	smpsAlterNote       $04
0008A496 E701                       	dc.b	smpsNoAttack, $01
0008A498 E100                       	smpsAlterNote       $00
0008A49A E701                       	dc.b	smpsNoAttack, $01
0008A49C E101                       	smpsAlterNote       $01
0008A49E E701                       	dc.b	smpsNoAttack, $01
0008A4A0 E107                       	smpsAlterNote       $07
0008A4A2 E701                       	dc.b	smpsNoAttack, $01
0008A4A4 E10B                       	smpsAlterNote       $0B
0008A4A6 E701                       	dc.b	smpsNoAttack, $01
0008A4A8 E107                       	smpsAlterNote       $07
0008A4AA E701                       	dc.b	smpsNoAttack, $01
0008A4AC E104                       	smpsAlterNote       $04
0008A4AE E701                       	dc.b	smpsNoAttack, $01
0008A4B0 E100                       	smpsAlterNote       $00
0008A4B2 E701                       	dc.b	smpsNoAttack, $01
0008A4B4 E101                       	smpsAlterNote       $01
0008A4B6 8001                       	dc.b	nRst, $01
0008A4B8 E108                       	smpsAlterNote       $08
0008A4BA C10C                       	dc.b	nE5, $0C
0008A4BC E109                       	smpsAlterNote       $09
0008A4BE C201 8001                  	dc.b	nF5, $01, nRst, $01
0008A4C2 E10A                       	smpsAlterNote       $0A
0008A4C4 8001                       	dc.b	nRst, $01
0008A4C6 E109                       	smpsAlterNote       $09
0008A4C8 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008A4CC E106                       	smpsAlterNote       $06
0008A4CE E701                       	dc.b	smpsNoAttack, $01
0008A4D0 E102                       	smpsAlterNote       $02
0008A4D2 E701                       	dc.b	smpsNoAttack, $01
0008A4D4 E103                       	smpsAlterNote       $03
0008A4D6 E701                       	dc.b	smpsNoAttack, $01
0008A4D8 E109                       	smpsAlterNote       $09
0008A4DA E701                       	dc.b	smpsNoAttack, $01
0008A4DC E10D                       	smpsAlterNote       $0D
0008A4DE E701                       	dc.b	smpsNoAttack, $01
0008A4E0 E109                       	smpsAlterNote       $09
0008A4E2 E701                       	dc.b	smpsNoAttack, $01
0008A4E4 E106                       	smpsAlterNote       $06
0008A4E6 E701                       	dc.b	smpsNoAttack, $01
0008A4E8 E102                       	smpsAlterNote       $02
0008A4EA E701                       	dc.b	smpsNoAttack, $01
0008A4EC E106                       	smpsAlterNote       $06
0008A4EE E701                       	dc.b	smpsNoAttack, $01
0008A4F0 E10C                       	smpsAlterNote       $0C
0008A4F2 E701                       	dc.b	smpsNoAttack, $01
0008A4F4 E10D                       	smpsAlterNote       $0D
0008A4F6 E701                       	dc.b	smpsNoAttack, $01
0008A4F8 E109                       	smpsAlterNote       $09
0008A4FA C40D                       	dc.b	nG5, $0D
0008A4FC E106                       	smpsAlterNote       $06
0008A4FE E701                       	dc.b	smpsNoAttack, $01
0008A500 E102                       	smpsAlterNote       $02
0008A502 E701                       	dc.b	smpsNoAttack, $01
0008A504 E103                       	smpsAlterNote       $03
0008A506 E701                       	dc.b	smpsNoAttack, $01
0008A508 E109                       	smpsAlterNote       $09
0008A50A E701                       	dc.b	smpsNoAttack, $01
0008A50C E108                       	smpsAlterNote       $08
0008A50E C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008A51A E109                       	smpsAlterNote       $09
0008A51C C20D                       	dc.b	nF5, $0D
0008A51E E106                       	smpsAlterNote       $06
0008A520 E701                       	dc.b	smpsNoAttack, $01
0008A522 E102                       	smpsAlterNote       $02
0008A524 E701                       	dc.b	smpsNoAttack, $01
0008A526 E106                       	smpsAlterNote       $06
0008A528 E701                       	dc.b	smpsNoAttack, $01
0008A52A E109                       	smpsAlterNote       $09
0008A52C E701                       	dc.b	smpsNoAttack, $01
0008A52E E10D                       	smpsAlterNote       $0D
0008A530 E701                       	dc.b	smpsNoAttack, $01
0008A532 E109                       	smpsAlterNote       $09
0008A534 E701                       	dc.b	smpsNoAttack, $01
0008A536 E103                       	smpsAlterNote       $03
0008A538 E701                       	dc.b	smpsNoAttack, $01
0008A53A E102                       	smpsAlterNote       $02
0008A53C E701                       	dc.b	smpsNoAttack, $01
0008A53E E106                       	smpsAlterNote       $06
0008A540 E701                       	dc.b	smpsNoAttack, $01
0008A542 E10C                       	smpsAlterNote       $0C
0008A544 E701                       	dc.b	smpsNoAttack, $01
0008A546 E10D                       	smpsAlterNote       $0D
0008A548 8001                       	dc.b	nRst, $01
0008A54A E112                       	smpsAlterNote       $12
0008A54C C401                       	dc.b	nG5, $01
0008A54E E1EB                       	smpsAlterNote       $EB
0008A550 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008A553 E1FD                       	smpsAlterNote       $FD
0008A555 E701                       	dc.b	smpsNoAttack, $01
0008A557 E10F                       	smpsAlterNote       $0F
0008A559 E701                       	dc.b	smpsNoAttack, $01
0008A55B E118                       	smpsAlterNote       $18
0008A55D E701                       	dc.b	smpsNoAttack, $01
0008A55F E1ED                       	smpsAlterNote       $ED
0008A561 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008A564 E1FF                       	smpsAlterNote       $FF
0008A566 E701                       	dc.b	smpsNoAttack, $01
0008A568 E10B                       	smpsAlterNote       $0B
0008A56A E703                       	dc.b	smpsNoAttack, $03
0008A56C E109                       	smpsAlterNote       $09
0008A56E C407                       	dc.b	nG5, $07
0008A570 E108                       	smpsAlterNote       $08
0008A572 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008A57E E109                       	smpsAlterNote       $09
0008A580 C20D                       	dc.b	nF5, $0D
0008A582 E103                       	smpsAlterNote       $03
0008A584 E701                       	dc.b	smpsNoAttack, $01
0008A586 E102                       	smpsAlterNote       $02
0008A588 E701                       	dc.b	smpsNoAttack, $01
0008A58A E106                       	smpsAlterNote       $06
0008A58C E701                       	dc.b	smpsNoAttack, $01
0008A58E E10C                       	smpsAlterNote       $0C
0008A590 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A594 E109                       	smpsAlterNote       $09
0008A596 E701                       	dc.b	smpsNoAttack, $01
0008A598 E103                       	smpsAlterNote       $03
0008A59A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A59E E109                       	smpsAlterNote       $09
0008A5A0 E701                       	dc.b	smpsNoAttack, $01
0008A5A2 E10C                       	smpsAlterNote       $0C
0008A5A4 E701                       	dc.b	smpsNoAttack, $01
0008A5A6 E10D                       	smpsAlterNote       $0D
0008A5A8 8001                       	dc.b	nRst, $01
0008A5AA E10B                       	smpsAlterNote       $0B
0008A5AC C609 8001                  	dc.b	nA5, $09, nRst, $01
0008A5B0 E109                       	smpsAlterNote       $09
0008A5B2 B806 8001                  	dc.b	nG4, $06, nRst, $01
0008A5B6 E108                       	smpsAlterNote       $08
0008A5B8 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008A5C4 8001                       	dc.b	nRst, $01
0008A5C6 E109                       	smpsAlterNote       $09
0008A5C8 C20D                       	dc.b	nF5, $0D
0008A5CA E103                       	smpsAlterNote       $03
0008A5CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5D0 E106                       	smpsAlterNote       $06
0008A5D2 E701                       	dc.b	smpsNoAttack, $01
0008A5D4 E10C                       	smpsAlterNote       $0C
0008A5D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5DA E106                       	smpsAlterNote       $06
0008A5DC E701                       	dc.b	smpsNoAttack, $01
0008A5DE E103                       	smpsAlterNote       $03
0008A5E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5E4 E109                       	smpsAlterNote       $09
0008A5E6 E701                       	dc.b	smpsNoAttack, $01
0008A5E8 E10D                       	smpsAlterNote       $0D
0008A5EA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A5F0 E108                       	smpsAlterNote       $08
0008A5F2 E6FF                       	smpsAlterVol        $FF
0008A5F4 A806                       	dc.b	nEb3, $06
0008A5F6 E10C                       	smpsAlterNote       $0C
0008A5F8 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A5FC E108                       	smpsAlterNote       $08
0008A5FE A803                       	dc.b	nEb3, $03
0008A600 E109                       	smpsAlterNote       $09
0008A602 AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008A606 E10C                       	smpsAlterNote       $0C
0008A608 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008A612 E109                       	smpsAlterNote       $09
0008A614 E602                       	smpsAlterVol        $02
0008A616 B604                       	dc.b	nF4, $04
0008A618 E602                       	smpsAlterVol        $02
0008A61A F6F1 AA                    	smpsJump            music84_Jump02
0008A61D                            
0008A61D                            ; FM4 Data
0008A61D                            music84_FM4:
0008A61F E040                       	smpsPan             panRight, $00
0008A621 8003                       	dc.b	nRst, $03
0008A623 E10F                       	smpsAlterNote       $0F
0008A625 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008A629 E10D                       	smpsAlterNote       $0D
0008A62B C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008A62F E10C                       	smpsAlterNote       $0C
0008A631 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008A637 E6FE                       	smpsAlterVol        $FE
0008A639 E110                       	smpsAlterNote       $10
0008A63B C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008A63F E10F                       	smpsAlterNote       $0F
0008A641 C602 8001                  	dc.b	nA5, $02, nRst, $01
0008A645 E10D                       	smpsAlterNote       $0D
0008A647 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008A650 E10C                       	smpsAlterNote       $0C
0008A652 C103                       	dc.b	nE5, $03
0008A654 E10A                       	smpsAlterNote       $0A
0008A656 BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008A65C 03                         	dc.b	$03
0008A65D                            
0008A65D                            music84_Jump01:
0008A65D E10B                       	smpsAlterNote       $0B
0008A65F BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008A663 E10C                       	smpsAlterNote       $0C
0008A665 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008A669 E10D                       	smpsAlterNote       $0D
0008A66B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008A675 E10B                       	smpsAlterNote       $0B
0008A677 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008A67B E107                       	smpsAlterNote       $07
0008A67D E701                       	dc.b	smpsNoAttack, $01
0008A67F E103                       	smpsAlterNote       $03
0008A681 E701                       	dc.b	smpsNoAttack, $01
0008A683 E104                       	smpsAlterNote       $04
0008A685 E701                       	dc.b	smpsNoAttack, $01
0008A687 E10A                       	smpsAlterNote       $0A
0008A689 E701                       	dc.b	smpsNoAttack, $01
0008A68B E10E                       	smpsAlterNote       $0E
0008A68D E701                       	dc.b	smpsNoAttack, $01
0008A68F E10A                       	smpsAlterNote       $0A
0008A691 E701                       	dc.b	smpsNoAttack, $01
0008A693 E107                       	smpsAlterNote       $07
0008A695 E701                       	dc.b	smpsNoAttack, $01
0008A697 E104                       	smpsAlterNote       $04
0008A699 8001                       	dc.b	nRst, $01
0008A69B E110                       	smpsAlterNote       $10
0008A69D C703                       	dc.b	nBb5, $03
0008A69F E10F                       	smpsAlterNote       $0F
0008A6A1 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008A6A5 E10D                       	smpsAlterNote       $0D
0008A6A7 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008A6AD E10C                       	smpsAlterNote       $0C
0008A6AF E701                       	dc.b	smpsNoAttack, $01
0008A6B1 E108                       	smpsAlterNote       $08
0008A6B3 E701                       	dc.b	smpsNoAttack, $01
0008A6B5 E10C                       	smpsAlterNote       $0C
0008A6B7 E701                       	dc.b	smpsNoAttack, $01
0008A6B9 E10F                       	smpsAlterNote       $0F
0008A6BB E701                       	dc.b	smpsNoAttack, $01
0008A6BD E113                       	smpsAlterNote       $13
0008A6BF E701                       	dc.b	smpsNoAttack, $01
0008A6C1 E10F                       	smpsAlterNote       $0F
0008A6C3 E701                       	dc.b	smpsNoAttack, $01
0008A6C5 E109                       	smpsAlterNote       $09
0008A6C7 E701                       	dc.b	smpsNoAttack, $01
0008A6C9 E108                       	smpsAlterNote       $08
0008A6CB E701                       	dc.b	smpsNoAttack, $01
0008A6CD E10C                       	smpsAlterNote       $0C
0008A6CF E701                       	dc.b	smpsNoAttack, $01
0008A6D1 E112                       	smpsAlterNote       $12
0008A6D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A6D7 E10C                       	smpsAlterNote       $0C
0008A6D9 E701                       	dc.b	smpsNoAttack, $01
0008A6DB E109                       	smpsAlterNote       $09
0008A6DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A6E1 E10F                       	smpsAlterNote       $0F
0008A6E3 E701                       	dc.b	smpsNoAttack, $01
0008A6E5 E113                       	smpsAlterNote       $13
0008A6E7 E701                       	dc.b	smpsNoAttack, $01
0008A6E9 E112                       	smpsAlterNote       $12
0008A6EB E701                       	dc.b	smpsNoAttack, $01
0008A6ED E10C                       	smpsAlterNote       $0C
0008A6EF E701                       	dc.b	smpsNoAttack, $01
0008A6F1 E108                       	smpsAlterNote       $08
0008A6F3 E701                       	dc.b	smpsNoAttack, $01
0008A6F5 E10C                       	smpsAlterNote       $0C
0008A6F7 E701                       	dc.b	smpsNoAttack, $01
0008A6F9 E10F                       	smpsAlterNote       $0F
0008A6FB E701                       	dc.b	smpsNoAttack, $01
0008A6FD E113                       	smpsAlterNote       $13
0008A6FF E701                       	dc.b	smpsNoAttack, $01
0008A701 E10F                       	smpsAlterNote       $0F
0008A703 E701                       	dc.b	smpsNoAttack, $01
0008A705 E109                       	smpsAlterNote       $09
0008A707 E701                       	dc.b	smpsNoAttack, $01
0008A709 E108                       	smpsAlterNote       $08
0008A70B E701                       	dc.b	smpsNoAttack, $01
0008A70D E10C                       	smpsAlterNote       $0C
0008A70F E701                       	dc.b	smpsNoAttack, $01
0008A711 E112                       	smpsAlterNote       $12
0008A713 E701                       	dc.b	smpsNoAttack, $01
0008A715 E113                       	smpsAlterNote       $13
0008A717 800F                       	dc.b	nRst, $0F
0008A719 E10B                       	smpsAlterNote       $0B
0008A71B BF03                       	dc.b	nD5, $03
0008A71D E10C                       	smpsAlterNote       $0C
0008A71F C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A723 E10D                       	smpsAlterNote       $0D
0008A725 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008A72D E10B                       	smpsAlterNote       $0B
0008A72F BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008A739 E110                       	smpsAlterNote       $10
0008A73B C704                       	dc.b	nBb5, $04
0008A73D E10F                       	smpsAlterNote       $0F
0008A73F C604 8001                  	dc.b	nA5, $04, nRst, $01
0008A743 E10D                       	smpsAlterNote       $0D
0008A745 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008A74B E109                       	smpsAlterNote       $09
0008A74D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A751 E10F                       	smpsAlterNote       $0F
0008A753 E701                       	dc.b	smpsNoAttack, $01
0008A755 E112                       	smpsAlterNote       $12
0008A757 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A75B E10C                       	smpsAlterNote       $0C
0008A75D E701                       	dc.b	smpsNoAttack, $01
0008A75F E108                       	smpsAlterNote       $08
0008A761 E701                       	dc.b	smpsNoAttack, $01
0008A763 E109                       	smpsAlterNote       $09
0008A765 E701                       	dc.b	smpsNoAttack, $01
0008A767 E10F                       	smpsAlterNote       $0F
0008A769 E701                       	dc.b	smpsNoAttack, $01
0008A76B E113                       	smpsAlterNote       $13
0008A76D E701                       	dc.b	smpsNoAttack, $01
0008A76F E10F                       	smpsAlterNote       $0F
0008A771 E701                       	dc.b	smpsNoAttack, $01
0008A773 E10C                       	smpsAlterNote       $0C
0008A775 E701                       	dc.b	smpsNoAttack, $01
0008A777 E108                       	smpsAlterNote       $08
0008A779 E701                       	dc.b	smpsNoAttack, $01
0008A77B E10C                       	smpsAlterNote       $0C
0008A77D E701                       	dc.b	smpsNoAttack, $01
0008A77F E112                       	smpsAlterNote       $12
0008A781 E701                       	dc.b	smpsNoAttack, $01
0008A783 E113                       	smpsAlterNote       $13
0008A785 E701                       	dc.b	smpsNoAttack, $01
0008A787 E10F                       	smpsAlterNote       $0F
0008A789 E701                       	dc.b	smpsNoAttack, $01
0008A78B E109                       	smpsAlterNote       $09
0008A78D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A791 E10C                       	smpsAlterNote       $0C
0008A793 E701                       	dc.b	smpsNoAttack, $01
0008A795 E112                       	smpsAlterNote       $12
0008A797 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A79B E10C                       	smpsAlterNote       $0C
0008A79D E701                       	dc.b	smpsNoAttack, $01
0008A79F E109                       	smpsAlterNote       $09
0008A7A1 E701                       	dc.b	smpsNoAttack, $01
0008A7A3 E10D                       	smpsAlterNote       $0D
0008A7A5 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008A7A9 E10F                       	smpsAlterNote       $0F
0008A7AB C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008A7B5 E10D                       	smpsAlterNote       $0D
0008A7B7 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008A7BD E10B                       	smpsAlterNote       $0B
0008A7BF BF0D                       	dc.b	nD5, $0D
0008A7C1 E108                       	smpsAlterNote       $08
0008A7C3 E701                       	dc.b	smpsNoAttack, $01
0008A7C5 E104                       	smpsAlterNote       $04
0008A7C7 E701                       	dc.b	smpsNoAttack, $01
0008A7C9 E108                       	smpsAlterNote       $08
0008A7CB E701                       	dc.b	smpsNoAttack, $01
0008A7CD E10B                       	smpsAlterNote       $0B
0008A7CF E701                       	dc.b	smpsNoAttack, $01
0008A7D1 E10F                       	smpsAlterNote       $0F
0008A7D3 E701                       	dc.b	smpsNoAttack, $01
0008A7D5 E10B                       	smpsAlterNote       $0B
0008A7D7 E701                       	dc.b	smpsNoAttack, $01
0008A7D9 E105                       	smpsAlterNote       $05
0008A7DB E701                       	dc.b	smpsNoAttack, $01
0008A7DD E104                       	smpsAlterNote       $04
0008A7DF E701                       	dc.b	smpsNoAttack, $01
0008A7E1 E108                       	smpsAlterNote       $08
0008A7E3 E701                       	dc.b	smpsNoAttack, $01
0008A7E5 E10E                       	smpsAlterNote       $0E
0008A7E7 E701                       	dc.b	smpsNoAttack, $01
0008A7E9 E10F                       	smpsAlterNote       $0F
0008A7EB 8001                       	dc.b	nRst, $01
0008A7ED E10C                       	smpsAlterNote       $0C
0008A7EF C101                       	dc.b	nE5, $01
0008A7F1 E10D                       	smpsAlterNote       $0D
0008A7F3 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008A7F9 E10F                       	smpsAlterNote       $0F
0008A7FB C606 8001                  	dc.b	nA5, $06, nRst, $01
0008A7FF E10C                       	smpsAlterNote       $0C
0008A801 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008A805 E10D                       	smpsAlterNote       $0D
0008A807 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008A80B E10C                       	smpsAlterNote       $0C
0008A80D CD03                       	dc.b	nE6, $03
0008A80F E10A                       	smpsAlterNote       $0A
0008A811 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008A815 E10D                       	smpsAlterNote       $0D
0008A817 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008A81F E109                       	smpsAlterNote       $09
0008A821 E701                       	dc.b	smpsNoAttack, $01
0008A823 E10D                       	smpsAlterNote       $0D
0008A825 E701                       	dc.b	smpsNoAttack, $01
0008A827 E110                       	smpsAlterNote       $10
0008A829 E701                       	dc.b	smpsNoAttack, $01
0008A82B E114                       	smpsAlterNote       $14
0008A82D E701                       	dc.b	smpsNoAttack, $01
0008A82F E110                       	smpsAlterNote       $10
0008A831 E701                       	dc.b	smpsNoAttack, $01
0008A833 E10A                       	smpsAlterNote       $0A
0008A835 E701                       	dc.b	smpsNoAttack, $01
0008A837 E109                       	smpsAlterNote       $09
0008A839 E701                       	dc.b	smpsNoAttack, $01
0008A83B E10D                       	smpsAlterNote       $0D
0008A83D E701                       	dc.b	smpsNoAttack, $01
0008A83F E113                       	smpsAlterNote       $13
0008A841 E701                       	dc.b	smpsNoAttack, $01
0008A843 E114                       	smpsAlterNote       $14
0008A845 8001                       	dc.b	nRst, $01
0008A847 E10F                       	smpsAlterNote       $0F
0008A849 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008A84F E10C                       	smpsAlterNote       $0C
0008A851 E701                       	dc.b	smpsNoAttack, $01
0008A853 E108                       	smpsAlterNote       $08
0008A855 E701                       	dc.b	smpsNoAttack, $01
0008A857 E10C                       	smpsAlterNote       $0C
0008A859 E701                       	dc.b	smpsNoAttack, $01
0008A85B E112                       	smpsAlterNote       $12
0008A85D E701                       	dc.b	smpsNoAttack, $01
0008A85F E113                       	smpsAlterNote       $13
0008A861 E701                       	dc.b	smpsNoAttack, $01
0008A863 E10F                       	smpsAlterNote       $0F
0008A865 E701                       	dc.b	smpsNoAttack, $01
0008A867 E109                       	smpsAlterNote       $09
0008A869 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A86D E10C                       	smpsAlterNote       $0C
0008A86F E701                       	dc.b	smpsNoAttack, $01
0008A871 E112                       	smpsAlterNote       $12
0008A873 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A877 E10C                       	smpsAlterNote       $0C
0008A879 E701                       	dc.b	smpsNoAttack, $01
0008A87B E109                       	smpsAlterNote       $09
0008A87D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A881 E10F                       	smpsAlterNote       $0F
0008A883 E701                       	dc.b	smpsNoAttack, $01
0008A885 E113                       	smpsAlterNote       $13
0008A887 E701                       	dc.b	smpsNoAttack, $01
0008A889 E112                       	smpsAlterNote       $12
0008A88B E701                       	dc.b	smpsNoAttack, $01
0008A88D E10C                       	smpsAlterNote       $0C
0008A88F E701                       	dc.b	smpsNoAttack, $01
0008A891 E108                       	smpsAlterNote       $08
0008A893 E701                       	dc.b	smpsNoAttack, $01
0008A895 E10C                       	smpsAlterNote       $0C
0008A897 E701                       	dc.b	smpsNoAttack, $01
0008A899 E10F                       	smpsAlterNote       $0F
0008A89B E701                       	dc.b	smpsNoAttack, $01
0008A89D E113                       	smpsAlterNote       $13
0008A89F E701                       	dc.b	smpsNoAttack, $01
0008A8A1 E10F                       	smpsAlterNote       $0F
0008A8A3 E701                       	dc.b	smpsNoAttack, $01
0008A8A5 E109                       	smpsAlterNote       $09
0008A8A7 E701                       	dc.b	smpsNoAttack, $01
0008A8A9 E108                       	smpsAlterNote       $08
0008A8AB E701                       	dc.b	smpsNoAttack, $01
0008A8AD E10C                       	smpsAlterNote       $0C
0008A8AF E701                       	dc.b	smpsNoAttack, $01
0008A8B1 E112                       	smpsAlterNote       $12
0008A8B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8B7 E10F                       	smpsAlterNote       $0F
0008A8B9 E701                       	dc.b	smpsNoAttack, $01
0008A8BB E109                       	smpsAlterNote       $09
0008A8BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8C1 E10F                       	smpsAlterNote       $0F
0008A8C3 E701                       	dc.b	smpsNoAttack, $01
0008A8C5 E113                       	smpsAlterNote       $13
0008A8C7 E701                       	dc.b	smpsNoAttack, $01
0008A8C9 E112                       	smpsAlterNote       $12
0008A8CB E701                       	dc.b	smpsNoAttack, $01
0008A8CD E10C                       	smpsAlterNote       $0C
0008A8CF E701                       	dc.b	smpsNoAttack, $01
0008A8D1 E108                       	smpsAlterNote       $08
0008A8D3 E701                       	dc.b	smpsNoAttack, $01
0008A8D5 E10C                       	smpsAlterNote       $0C
0008A8D7 E701                       	dc.b	smpsNoAttack, $01
0008A8D9 E10F                       	smpsAlterNote       $0F
0008A8DB E701                       	dc.b	smpsNoAttack, $01
0008A8DD E113                       	smpsAlterNote       $13
0008A8DF E701                       	dc.b	smpsNoAttack, $01
0008A8E1 E10F                       	smpsAlterNote       $0F
0008A8E3 E701                       	dc.b	smpsNoAttack, $01
0008A8E5 E109                       	smpsAlterNote       $09
0008A8E7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A8EB E10F                       	smpsAlterNote       $0F
0008A8ED C60D                       	dc.b	nA5, $0D
0008A8EF E109                       	smpsAlterNote       $09
0008A8F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8F5 E10C                       	smpsAlterNote       $0C
0008A8F7 E701                       	dc.b	smpsNoAttack, $01
0008A8F9 E112                       	smpsAlterNote       $12
0008A8FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8FF E10C                       	smpsAlterNote       $0C
0008A901 E701                       	dc.b	smpsNoAttack, $01
0008A903 E109                       	smpsAlterNote       $09
0008A905 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A909 E10F                       	smpsAlterNote       $0F
0008A90B E701                       	dc.b	smpsNoAttack, $01
0008A90D E113                       	smpsAlterNote       $13
0008A90F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A915 E10D                       	smpsAlterNote       $0D
0008A917 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008A91F E10C                       	smpsAlterNote       $0C
0008A921 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008A927 E6FF                       	smpsAlterVol        $FF
0008A929 E10B                       	smpsAlterNote       $0B
0008A92B BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008A92F E10C                       	smpsAlterNote       $0C
0008A931 C103                       	dc.b	nE5, $03
0008A933 E10D                       	smpsAlterNote       $0D
0008A935 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008A93F E10B                       	smpsAlterNote       $0B
0008A941 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008A945 E107                       	smpsAlterNote       $07
0008A947 E701                       	dc.b	smpsNoAttack, $01
0008A949 E104                       	smpsAlterNote       $04
0008A94B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A94F E10A                       	smpsAlterNote       $0A
0008A951 E701                       	dc.b	smpsNoAttack, $01
0008A953 E10D                       	smpsAlterNote       $0D
0008A955 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A959 E107                       	smpsAlterNote       $07
0008A95B E701                       	dc.b	smpsNoAttack, $01
0008A95D E104                       	smpsAlterNote       $04
0008A95F 8001                       	dc.b	nRst, $01
0008A961 E110                       	smpsAlterNote       $10
0008A963 C703                       	dc.b	nBb5, $03
0008A965 E10F                       	smpsAlterNote       $0F
0008A967 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008A96B E10D                       	smpsAlterNote       $0D
0008A96D C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008A971 E10C                       	smpsAlterNote       $0C
0008A973 E701                       	dc.b	smpsNoAttack, $01
0008A975 E108                       	smpsAlterNote       $08
0008A977 E701                       	dc.b	smpsNoAttack, $01
0008A979 E109                       	smpsAlterNote       $09
0008A97B E701                       	dc.b	smpsNoAttack, $01
0008A97D E10F                       	smpsAlterNote       $0F
0008A97F E701                       	dc.b	smpsNoAttack, $01
0008A981 E113                       	smpsAlterNote       $13
0008A983 E701                       	dc.b	smpsNoAttack, $01
0008A985 E10F                       	smpsAlterNote       $0F
0008A987 E701                       	dc.b	smpsNoAttack, $01
0008A989 E10C                       	smpsAlterNote       $0C
0008A98B E701                       	dc.b	smpsNoAttack, $01
0008A98D E108                       	smpsAlterNote       $08
0008A98F E701                       	dc.b	smpsNoAttack, $01
0008A991 E10C                       	smpsAlterNote       $0C
0008A993 E701                       	dc.b	smpsNoAttack, $01
0008A995 E112                       	smpsAlterNote       $12
0008A997 E701                       	dc.b	smpsNoAttack, $01
0008A999 E113                       	smpsAlterNote       $13
0008A99B E701                       	dc.b	smpsNoAttack, $01
0008A99D E10F                       	smpsAlterNote       $0F
0008A99F E701                       	dc.b	smpsNoAttack, $01
0008A9A1 E109                       	smpsAlterNote       $09
0008A9A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9A7 E10C                       	smpsAlterNote       $0C
0008A9A9 E701                       	dc.b	smpsNoAttack, $01
0008A9AB E112                       	smpsAlterNote       $12
0008A9AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9B1 E10C                       	smpsAlterNote       $0C
0008A9B3 E701                       	dc.b	smpsNoAttack, $01
0008A9B5 E109                       	smpsAlterNote       $09
0008A9B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9BB E10F                       	smpsAlterNote       $0F
0008A9BD E701                       	dc.b	smpsNoAttack, $01
0008A9BF E113                       	smpsAlterNote       $13
0008A9C1 E701                       	dc.b	smpsNoAttack, $01
0008A9C3 E112                       	smpsAlterNote       $12
0008A9C5 E701                       	dc.b	smpsNoAttack, $01
0008A9C7 E10C                       	smpsAlterNote       $0C
0008A9C9 E701                       	dc.b	smpsNoAttack, $01
0008A9CB E108                       	smpsAlterNote       $08
0008A9CD E701                       	dc.b	smpsNoAttack, $01
0008A9CF E10C                       	smpsAlterNote       $0C
0008A9D1 E701                       	dc.b	smpsNoAttack, $01
0008A9D3 E10F                       	smpsAlterNote       $0F
0008A9D5 E701                       	dc.b	smpsNoAttack, $01
0008A9D7 E113                       	smpsAlterNote       $13
0008A9D9 E701                       	dc.b	smpsNoAttack, $01
0008A9DB E10F                       	smpsAlterNote       $0F
0008A9DD BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008A9E1 E110                       	smpsAlterNote       $10
0008A9E3 BB03                       	dc.b	nBb4, $03
0008A9E5 E10F                       	smpsAlterNote       $0F
0008A9E7 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008A9EB E10B                       	smpsAlterNote       $0B
0008A9ED BF03                       	dc.b	nD5, $03
0008A9EF E10C                       	smpsAlterNote       $0C
0008A9F1 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A9F5 E10D                       	smpsAlterNote       $0D
0008A9F7 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008AA01 E10B                       	smpsAlterNote       $0B
0008AA03 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008AA0F E110                       	smpsAlterNote       $10
0008AA11 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008AA15 E10F                       	smpsAlterNote       $0F
0008AA17 C604                       	dc.b	nA5, $04
0008AA19 E10D                       	smpsAlterNote       $0D
0008AA1B C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008AA21 E109                       	smpsAlterNote       $09
0008AA23 E701                       	dc.b	smpsNoAttack, $01
0008AA25 E108                       	smpsAlterNote       $08
0008AA27 E701                       	dc.b	smpsNoAttack, $01
0008AA29 E10C                       	smpsAlterNote       $0C
0008AA2B E701                       	dc.b	smpsNoAttack, $01
0008AA2D E112                       	smpsAlterNote       $12
0008AA2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA33 E10F                       	smpsAlterNote       $0F
0008AA35 E701                       	dc.b	smpsNoAttack, $01
0008AA37 E109                       	smpsAlterNote       $09
0008AA39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA3D E10F                       	smpsAlterNote       $0F
0008AA3F E701                       	dc.b	smpsNoAttack, $01
0008AA41 E112                       	smpsAlterNote       $12
0008AA43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA47 E10C                       	smpsAlterNote       $0C
0008AA49 E701                       	dc.b	smpsNoAttack, $01
0008AA4B E108                       	smpsAlterNote       $08
0008AA4D E701                       	dc.b	smpsNoAttack, $01
0008AA4F E109                       	smpsAlterNote       $09
0008AA51 E701                       	dc.b	smpsNoAttack, $01
0008AA53 E10F                       	smpsAlterNote       $0F
0008AA55 E701                       	dc.b	smpsNoAttack, $01
0008AA57 E113                       	smpsAlterNote       $13
0008AA59 E701                       	dc.b	smpsNoAttack, $01
0008AA5B E10F                       	smpsAlterNote       $0F
0008AA5D E701                       	dc.b	smpsNoAttack, $01
0008AA5F E10C                       	smpsAlterNote       $0C
0008AA61 E701                       	dc.b	smpsNoAttack, $01
0008AA63 E108                       	smpsAlterNote       $08
0008AA65 E701                       	dc.b	smpsNoAttack, $01
0008AA67 E10C                       	smpsAlterNote       $0C
0008AA69 E701                       	dc.b	smpsNoAttack, $01
0008AA6B E112                       	smpsAlterNote       $12
0008AA6D E701                       	dc.b	smpsNoAttack, $01
0008AA6F E113                       	smpsAlterNote       $13
0008AA71 E701                       	dc.b	smpsNoAttack, $01
0008AA73 E10F                       	smpsAlterNote       $0F
0008AA75 E701                       	dc.b	smpsNoAttack, $01
0008AA77 E109                       	smpsAlterNote       $09
0008AA79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA7D E10C                       	smpsAlterNote       $0C
0008AA7F E701                       	dc.b	smpsNoAttack, $01
0008AA81 E112                       	smpsAlterNote       $12
0008AA83 E701                       	dc.b	smpsNoAttack, $01
0008AA85 E113                       	smpsAlterNote       $13
0008AA87 8001                       	dc.b	nRst, $01
0008AA89 E10F                       	smpsAlterNote       $0F
0008AA8B C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008AA97 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008AA9F E10D                       	smpsAlterNote       $0D
0008AAA1 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008AAA7 E10B                       	smpsAlterNote       $0B
0008AAA9 BF0D                       	dc.b	nD5, $0D
0008AAAB E108                       	smpsAlterNote       $08
0008AAAD E701                       	dc.b	smpsNoAttack, $01
0008AAAF E104                       	smpsAlterNote       $04
0008AAB1 E701                       	dc.b	smpsNoAttack, $01
0008AAB3 E105                       	smpsAlterNote       $05
0008AAB5 E701                       	dc.b	smpsNoAttack, $01
0008AAB7 E10B                       	smpsAlterNote       $0B
0008AAB9 E701                       	dc.b	smpsNoAttack, $01
0008AABB E10F                       	smpsAlterNote       $0F
0008AABD E701                       	dc.b	smpsNoAttack, $01
0008AABF E10B                       	smpsAlterNote       $0B
0008AAC1 E701                       	dc.b	smpsNoAttack, $01
0008AAC3 E108                       	smpsAlterNote       $08
0008AAC5 E701                       	dc.b	smpsNoAttack, $01
0008AAC7 E104                       	smpsAlterNote       $04
0008AAC9 E701                       	dc.b	smpsNoAttack, $01
0008AACB E108                       	smpsAlterNote       $08
0008AACD E701                       	dc.b	smpsNoAttack, $01
0008AACF E10E                       	smpsAlterNote       $0E
0008AAD1 E701                       	dc.b	smpsNoAttack, $01
0008AAD3 E10F                       	smpsAlterNote       $0F
0008AAD5 E701                       	dc.b	smpsNoAttack, $01
0008AAD7 E10C                       	smpsAlterNote       $0C
0008AAD9 C101                       	dc.b	nE5, $01
0008AADB E10D                       	smpsAlterNote       $0D
0008AADD C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008AAE5 E10F                       	smpsAlterNote       $0F
0008AAE7 C607                       	dc.b	nA5, $07
0008AAE9 E10C                       	smpsAlterNote       $0C
0008AAEB CD07                       	dc.b	nE6, $07
0008AAED E10D                       	smpsAlterNote       $0D
0008AAEF CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008AAF3 E10C                       	smpsAlterNote       $0C
0008AAF5 CD03                       	dc.b	nE6, $03
0008AAF7 E10A                       	smpsAlterNote       $0A
0008AAF9 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008AAFD E10D                       	smpsAlterNote       $0D
0008AAFF C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008AB05 E10A                       	smpsAlterNote       $0A
0008AB07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB0B E110                       	smpsAlterNote       $10
0008AB0D E701                       	dc.b	smpsNoAttack, $01
0008AB0F E114                       	smpsAlterNote       $14
0008AB11 E701                       	dc.b	smpsNoAttack, $01
0008AB13 E113                       	smpsAlterNote       $13
0008AB15 E701                       	dc.b	smpsNoAttack, $01
0008AB17 E10D                       	smpsAlterNote       $0D
0008AB19 E701                       	dc.b	smpsNoAttack, $01
0008AB1B E109                       	smpsAlterNote       $09
0008AB1D E701                       	dc.b	smpsNoAttack, $01
0008AB1F E10D                       	smpsAlterNote       $0D
0008AB21 E701                       	dc.b	smpsNoAttack, $01
0008AB23 E110                       	smpsAlterNote       $10
0008AB25 E701                       	dc.b	smpsNoAttack, $01
0008AB27 E114                       	smpsAlterNote       $14
0008AB29 E701                       	dc.b	smpsNoAttack, $01
0008AB2B E10F                       	smpsAlterNote       $0F
0008AB2D C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008AB31 E10C                       	smpsAlterNote       $0C
0008AB33 E701                       	dc.b	smpsNoAttack, $01
0008AB35 E108                       	smpsAlterNote       $08
0008AB37 E701                       	dc.b	smpsNoAttack, $01
0008AB39 E10C                       	smpsAlterNote       $0C
0008AB3B E701                       	dc.b	smpsNoAttack, $01
0008AB3D E10F                       	smpsAlterNote       $0F
0008AB3F E701                       	dc.b	smpsNoAttack, $01
0008AB41 E113                       	smpsAlterNote       $13
0008AB43 E701                       	dc.b	smpsNoAttack, $01
0008AB45 E10F                       	smpsAlterNote       $0F
0008AB47 E701                       	dc.b	smpsNoAttack, $01
0008AB49 E109                       	smpsAlterNote       $09
0008AB4B E701                       	dc.b	smpsNoAttack, $01
0008AB4D E108                       	smpsAlterNote       $08
0008AB4F E701                       	dc.b	smpsNoAttack, $01
0008AB51 E10C                       	smpsAlterNote       $0C
0008AB53 E701                       	dc.b	smpsNoAttack, $01
0008AB55 E112                       	smpsAlterNote       $12
0008AB57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB5B E10F                       	smpsAlterNote       $0F
0008AB5D E701                       	dc.b	smpsNoAttack, $01
0008AB5F E109                       	smpsAlterNote       $09
0008AB61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB65 E10F                       	smpsAlterNote       $0F
0008AB67 E701                       	dc.b	smpsNoAttack, $01
0008AB69 E112                       	smpsAlterNote       $12
0008AB6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB6F E10C                       	smpsAlterNote       $0C
0008AB71 E701                       	dc.b	smpsNoAttack, $01
0008AB73 E108                       	smpsAlterNote       $08
0008AB75 E701                       	dc.b	smpsNoAttack, $01
0008AB77 E109                       	smpsAlterNote       $09
0008AB79 E701                       	dc.b	smpsNoAttack, $01
0008AB7B E10F                       	smpsAlterNote       $0F
0008AB7D E701                       	dc.b	smpsNoAttack, $01
0008AB7F E113                       	smpsAlterNote       $13
0008AB81 E701                       	dc.b	smpsNoAttack, $01
0008AB83 E10F                       	smpsAlterNote       $0F
0008AB85 E701                       	dc.b	smpsNoAttack, $01
0008AB87 E10C                       	smpsAlterNote       $0C
0008AB89 E701                       	dc.b	smpsNoAttack, $01
0008AB8B E108                       	smpsAlterNote       $08
0008AB8D E701                       	dc.b	smpsNoAttack, $01
0008AB8F E10C                       	smpsAlterNote       $0C
0008AB91 E701                       	dc.b	smpsNoAttack, $01
0008AB93 E112                       	smpsAlterNote       $12
0008AB95 E701                       	dc.b	smpsNoAttack, $01
0008AB97 E113                       	smpsAlterNote       $13
0008AB99 E701                       	dc.b	smpsNoAttack, $01
0008AB9B E10F                       	smpsAlterNote       $0F
0008AB9D E701                       	dc.b	smpsNoAttack, $01
0008AB9F E109                       	smpsAlterNote       $09
0008ABA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABA5 E10C                       	smpsAlterNote       $0C
0008ABA7 E701                       	dc.b	smpsNoAttack, $01
0008ABA9 E112                       	smpsAlterNote       $12
0008ABAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABAF E10C                       	smpsAlterNote       $0C
0008ABB1 E701                       	dc.b	smpsNoAttack, $01
0008ABB3 E109                       	smpsAlterNote       $09
0008ABB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABB9 E10F                       	smpsAlterNote       $0F
0008ABBB E701                       	dc.b	smpsNoAttack, $01
0008ABBD E113                       	smpsAlterNote       $13
0008ABBF E701                       	dc.b	smpsNoAttack, $01
0008ABC1 E112                       	smpsAlterNote       $12
0008ABC3 E701                       	dc.b	smpsNoAttack, $01
0008ABC5 E10C                       	smpsAlterNote       $0C
0008ABC7 E701                       	dc.b	smpsNoAttack, $01
0008ABC9 E109                       	smpsAlterNote       $09
0008ABCB 8001                       	dc.b	nRst, $01
0008ABCD E10F                       	smpsAlterNote       $0F
0008ABCF C60D                       	dc.b	nA5, $0D
0008ABD1 E10C                       	smpsAlterNote       $0C
0008ABD3 E701                       	dc.b	smpsNoAttack, $01
0008ABD5 E108                       	smpsAlterNote       $08
0008ABD7 E701                       	dc.b	smpsNoAttack, $01
0008ABD9 E10C                       	smpsAlterNote       $0C
0008ABDB E701                       	dc.b	smpsNoAttack, $01
0008ABDD E112                       	smpsAlterNote       $12
0008ABDF E701                       	dc.b	smpsNoAttack, $01
0008ABE1 E113                       	smpsAlterNote       $13
0008ABE3 E701                       	dc.b	smpsNoAttack, $01
0008ABE5 E10F                       	smpsAlterNote       $0F
0008ABE7 E701                       	dc.b	smpsNoAttack, $01
0008ABE9 E109                       	smpsAlterNote       $09
0008ABEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABEF E10C                       	smpsAlterNote       $0C
0008ABF1 E701                       	dc.b	smpsNoAttack, $01
0008ABF3 E112                       	smpsAlterNote       $12
0008ABF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABF9 E10C                       	smpsAlterNote       $0C
0008ABFB E701                       	dc.b	smpsNoAttack, $01
0008ABFD E109                       	smpsAlterNote       $09
0008ABFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC03 E10F                       	smpsAlterNote       $0F
0008AC05 E701                       	dc.b	smpsNoAttack, $01
0008AC07 E113                       	smpsAlterNote       $13
0008AC09 E701                       	dc.b	smpsNoAttack, $01
0008AC0B E112                       	smpsAlterNote       $12
0008AC0D E701                       	dc.b	smpsNoAttack, $01
0008AC0F E10C                       	smpsAlterNote       $0C
0008AC11 E701                       	dc.b	smpsNoAttack, $01
0008AC13 E108                       	smpsAlterNote       $08
0008AC15 E701                       	dc.b	smpsNoAttack, $01
0008AC17 E10C                       	smpsAlterNote       $0C
0008AC19 E701                       	dc.b	smpsNoAttack, $01
0008AC1B E10F                       	smpsAlterNote       $0F
0008AC1D E701                       	dc.b	smpsNoAttack, $01
0008AC1F E113                       	smpsAlterNote       $13
0008AC21 E701                       	dc.b	smpsNoAttack, $01
0008AC23 E10F                       	smpsAlterNote       $0F
0008AC25 E701                       	dc.b	smpsNoAttack, $01
0008AC27 E109                       	smpsAlterNote       $09
0008AC29 E701                       	dc.b	smpsNoAttack, $01
0008AC2B E108                       	smpsAlterNote       $08
0008AC2D E701                       	dc.b	smpsNoAttack, $01
0008AC2F E10C                       	smpsAlterNote       $0C
0008AC31 E701                       	dc.b	smpsNoAttack, $01
0008AC33 E112                       	smpsAlterNote       $12
0008AC35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC39 E10F                       	smpsAlterNote       $0F
0008AC3B E701                       	dc.b	smpsNoAttack, $01
0008AC3D E109                       	smpsAlterNote       $09
0008AC3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC43 E10F                       	smpsAlterNote       $0F
0008AC45 E701                       	dc.b	smpsNoAttack, $01
0008AC47 E112                       	smpsAlterNote       $12
0008AC49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC4D E10C                       	smpsAlterNote       $0C
0008AC4F E701                       	dc.b	smpsNoAttack, $01
0008AC51 E108                       	smpsAlterNote       $08
0008AC53 E701                       	dc.b	smpsNoAttack, $01
0008AC55 E10C                       	smpsAlterNote       $0C
0008AC57 E701                       	dc.b	smpsNoAttack, $01
0008AC59 E10F                       	smpsAlterNote       $0F
0008AC5B E701                       	dc.b	smpsNoAttack, $01
0008AC5D E113                       	smpsAlterNote       $13
0008AC5F E701                       	dc.b	smpsNoAttack, $01
0008AC61 E10F                       	smpsAlterNote       $0F
0008AC63 E701                       	dc.b	smpsNoAttack, $01
0008AC65 E109                       	smpsAlterNote       $09
0008AC67 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AC6D E601                       	smpsAlterVol        $01
0008AC6F E10F                       	smpsAlterNote       $0F
0008AC71 C604                       	dc.b	nA5, $04
0008AC73 E10D                       	smpsAlterNote       $0D
0008AC75 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008AC7B E10B                       	smpsAlterNote       $0B
0008AC7D BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008AC85 E10F                       	smpsAlterNote       $0F
0008AC87 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008AC8B E10D                       	smpsAlterNote       $0D
0008AC8D C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008AC93 E10C                       	smpsAlterNote       $0C
0008AC95 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008AC9B E10A                       	smpsAlterNote       $0A
0008AC9D C904 8001                  	dc.b	nC6, $04, nRst, $01
0008ACA1 E110                       	smpsAlterNote       $10
0008ACA3 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008ACA7 E10F                       	smpsAlterNote       $0F
0008ACA9 C604                       	dc.b	nA5, $04
0008ACAB E10D                       	smpsAlterNote       $0D
0008ACAD C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008ACB9 E109                       	smpsAlterNote       $09
0008ACBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACBF E10F                       	smpsAlterNote       $0F
0008ACC1 E701                       	dc.b	smpsNoAttack, $01
0008ACC3 E112                       	smpsAlterNote       $12
0008ACC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACC9 E10C                       	smpsAlterNote       $0C
0008ACCB E701                       	dc.b	smpsNoAttack, $01
0008ACCD E108                       	smpsAlterNote       $08
0008ACCF E701                       	dc.b	smpsNoAttack, $01
0008ACD1 E10C                       	smpsAlterNote       $0C
0008ACD3 E701                       	dc.b	smpsNoAttack, $01
0008ACD5 E10F                       	smpsAlterNote       $0F
0008ACD7 E701                       	dc.b	smpsNoAttack, $01
0008ACD9 E113                       	smpsAlterNote       $13
0008ACDB E701                       	dc.b	smpsNoAttack, $01
0008ACDD E10D                       	smpsAlterNote       $0D
0008ACDF C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008ACE5 E10C                       	smpsAlterNote       $0C
0008ACE7 C10D                       	dc.b	nE5, $0D
0008ACE9 E109                       	smpsAlterNote       $09
0008ACEB E701                       	dc.b	smpsNoAttack, $01
0008ACED E105                       	smpsAlterNote       $05
0008ACEF E701                       	dc.b	smpsNoAttack, $01
0008ACF1 E106                       	smpsAlterNote       $06
0008ACF3 E701                       	dc.b	smpsNoAttack, $01
0008ACF5 E10C                       	smpsAlterNote       $0C
0008ACF7 E701                       	dc.b	smpsNoAttack, $01
0008ACF9 E110                       	smpsAlterNote       $10
0008ACFB E701                       	dc.b	smpsNoAttack, $01
0008ACFD E10C                       	smpsAlterNote       $0C
0008ACFF E701                       	dc.b	smpsNoAttack, $01
0008AD01 E109                       	smpsAlterNote       $09
0008AD03 E701                       	dc.b	smpsNoAttack, $01
0008AD05 E105                       	smpsAlterNote       $05
0008AD07 E701                       	dc.b	smpsNoAttack, $01
0008AD09 E109                       	smpsAlterNote       $09
0008AD0B E701                       	dc.b	smpsNoAttack, $01
0008AD0D E10F                       	smpsAlterNote       $0F
0008AD0F E701                       	dc.b	smpsNoAttack, $01
0008AD11 E110                       	smpsAlterNote       $10
0008AD13 E701                       	dc.b	smpsNoAttack, $01
0008AD15 E10C                       	smpsAlterNote       $0C
0008AD17 E701                       	dc.b	smpsNoAttack, $01
0008AD19 E106                       	smpsAlterNote       $06
0008AD1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD1F E109                       	smpsAlterNote       $09
0008AD21 E701                       	dc.b	smpsNoAttack, $01
0008AD23 E10F                       	smpsAlterNote       $0F
0008AD25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD29 E109                       	smpsAlterNote       $09
0008AD2B E701                       	dc.b	smpsNoAttack, $01
0008AD2D E106                       	smpsAlterNote       $06
0008AD2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD33 E10C                       	smpsAlterNote       $0C
0008AD35 E701                       	dc.b	smpsNoAttack, $01
0008AD37 E110                       	smpsAlterNote       $10
0008AD39 E701                       	dc.b	smpsNoAttack, $01
0008AD3B E10F                       	smpsAlterNote       $0F
0008AD3D E701                       	dc.b	smpsNoAttack, $01
0008AD3F E109                       	smpsAlterNote       $09
0008AD41 E701                       	dc.b	smpsNoAttack, $01
0008AD43 E105                       	smpsAlterNote       $05
0008AD45 E701                       	dc.b	smpsNoAttack, $01
0008AD47 E109                       	smpsAlterNote       $09
0008AD49 E701                       	dc.b	smpsNoAttack, $01
0008AD4B E10C                       	smpsAlterNote       $0C
0008AD4D E701                       	dc.b	smpsNoAttack, $01
0008AD4F E110                       	smpsAlterNote       $10
0008AD51 E701                       	dc.b	smpsNoAttack, $01
0008AD53 E10C                       	smpsAlterNote       $0C
0008AD55 E701                       	dc.b	smpsNoAttack, $01
0008AD57 E106                       	smpsAlterNote       $06
0008AD59 E701                       	dc.b	smpsNoAttack, $01
0008AD5B E105                       	smpsAlterNote       $05
0008AD5D E701                       	dc.b	smpsNoAttack, $01
0008AD5F E109                       	smpsAlterNote       $09
0008AD61 E701                       	dc.b	smpsNoAttack, $01
0008AD63 E10F                       	smpsAlterNote       $0F
0008AD65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD69 E10C                       	smpsAlterNote       $0C
0008AD6B E701                       	dc.b	smpsNoAttack, $01
0008AD6D E106                       	smpsAlterNote       $06
0008AD6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD73 E10C                       	smpsAlterNote       $0C
0008AD75 E701                       	dc.b	smpsNoAttack, $01
0008AD77 E10F                       	smpsAlterNote       $0F
0008AD79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD7D E109                       	smpsAlterNote       $09
0008AD7F E701                       	dc.b	smpsNoAttack, $01
0008AD81 E105                       	smpsAlterNote       $05
0008AD83 E701                       	dc.b	smpsNoAttack, $01
0008AD85 E106                       	smpsAlterNote       $06
0008AD87 E701                       	dc.b	smpsNoAttack, $01
0008AD89 E10C                       	smpsAlterNote       $0C
0008AD8B E701                       	dc.b	smpsNoAttack, $01
0008AD8D E110                       	smpsAlterNote       $10
0008AD8F E701                       	dc.b	smpsNoAttack, $01
0008AD91 E10C                       	smpsAlterNote       $0C
0008AD93 E701                       	dc.b	smpsNoAttack, $01
0008AD95 E109                       	smpsAlterNote       $09
0008AD97 E701                       	dc.b	smpsNoAttack, $01
0008AD99 E105                       	smpsAlterNote       $05
0008AD9B E701                       	dc.b	smpsNoAttack, $01
0008AD9D E109                       	smpsAlterNote       $09
0008AD9F E701                       	dc.b	smpsNoAttack, $01
0008ADA1 E10F                       	smpsAlterNote       $0F
0008ADA3 E701                       	dc.b	smpsNoAttack, $01
0008ADA5 E110                       	smpsAlterNote       $10
0008ADA7 E701                       	dc.b	smpsNoAttack, $01
0008ADA9 E10C                       	smpsAlterNote       $0C
0008ADAB E701                       	dc.b	smpsNoAttack, $01
0008ADAD E106                       	smpsAlterNote       $06
0008ADAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADB3 E109                       	smpsAlterNote       $09
0008ADB5 E701                       	dc.b	smpsNoAttack, $01
0008ADB7 E10F                       	smpsAlterNote       $0F
0008ADB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADBD E109                       	smpsAlterNote       $09
0008ADBF E701                       	dc.b	smpsNoAttack, $01
0008ADC1 E106                       	smpsAlterNote       $06
0008ADC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADC7 E10C                       	smpsAlterNote       $0C
0008ADC9 E701                       	dc.b	smpsNoAttack, $01
0008ADCB E110                       	smpsAlterNote       $10
0008ADCD E701                       	dc.b	smpsNoAttack, $01
0008ADCF E10F                       	smpsAlterNote       $0F
0008ADD1 E701                       	dc.b	smpsNoAttack, $01
0008ADD3 E109                       	smpsAlterNote       $09
0008ADD5 E701                       	dc.b	smpsNoAttack, $01
0008ADD7 E105                       	smpsAlterNote       $05
0008ADD9 E701                       	dc.b	smpsNoAttack, $01
0008ADDB E109                       	smpsAlterNote       $09
0008ADDD E701                       	dc.b	smpsNoAttack, $01
0008ADDF E10C                       	smpsAlterNote       $0C
0008ADE1 E701                       	dc.b	smpsNoAttack, $01
0008ADE3 E110                       	smpsAlterNote       $10
0008ADE5 E701                       	dc.b	smpsNoAttack, $01
0008ADE7 E10C                       	smpsAlterNote       $0C
0008ADE9 E701                       	dc.b	smpsNoAttack, $01
0008ADEB E106                       	smpsAlterNote       $06
0008ADED E701                       	dc.b	smpsNoAttack, $01
0008ADEF E105                       	smpsAlterNote       $05
0008ADF1 E701                       	dc.b	smpsNoAttack, $01
0008ADF3 E109                       	smpsAlterNote       $09
0008ADF5 E701                       	dc.b	smpsNoAttack, $01
0008ADF7 E10F                       	smpsAlterNote       $0F
0008ADF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADFD E109                       	smpsAlterNote       $09
0008ADFF E701                       	dc.b	smpsNoAttack, $01
0008AE01 E106                       	smpsAlterNote       $06
0008AE03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE07 E10C                       	smpsAlterNote       $0C
0008AE09 E701                       	dc.b	smpsNoAttack, $01
0008AE0B E110                       	smpsAlterNote       $10
0008AE0D E701                       	dc.b	smpsNoAttack, $01
0008AE0F E10F                       	smpsAlterNote       $0F
0008AE11 E701                       	dc.b	smpsNoAttack, $01
0008AE13 E109                       	smpsAlterNote       $09
0008AE15 E701                       	dc.b	smpsNoAttack, $01
0008AE17 E105                       	smpsAlterNote       $05
0008AE19 E701                       	dc.b	smpsNoAttack, $01
0008AE1B E109                       	smpsAlterNote       $09
0008AE1D E701                       	dc.b	smpsNoAttack, $01
0008AE1F E10C                       	smpsAlterNote       $0C
0008AE21 E701                       	dc.b	smpsNoAttack, $01
0008AE23 E110                       	smpsAlterNote       $10
0008AE25 E701                       	dc.b	smpsNoAttack, $01
0008AE27 E10C                       	smpsAlterNote       $0C
0008AE29 E701                       	dc.b	smpsNoAttack, $01
0008AE2B E106                       	smpsAlterNote       $06
0008AE2D E701                       	dc.b	smpsNoAttack, $01
0008AE2F E105                       	smpsAlterNote       $05
0008AE31 E701                       	dc.b	smpsNoAttack, $01
0008AE33 E109                       	smpsAlterNote       $09
0008AE35 E701                       	dc.b	smpsNoAttack, $01
0008AE37 E10F                       	smpsAlterNote       $0F
0008AE39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE3D E10C                       	smpsAlterNote       $0C
0008AE3F E701                       	dc.b	smpsNoAttack, $01
0008AE41 E106                       	smpsAlterNote       $06
0008AE43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE47 E10C                       	smpsAlterNote       $0C
0008AE49 E701                       	dc.b	smpsNoAttack, $01
0008AE4B E10F                       	smpsAlterNote       $0F
0008AE4D E701                       	dc.b	smpsNoAttack, $01
0008AE4F E110                       	smpsAlterNote       $10
0008AE51 8001                       	dc.b	nRst, $01
0008AE53 E10F                       	smpsAlterNote       $0F
0008AE55 C604                       	dc.b	nA5, $04
0008AE57 E10D                       	smpsAlterNote       $0D
0008AE59 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008AE5F E10B                       	smpsAlterNote       $0B
0008AE61 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008AE67 E10F                       	smpsAlterNote       $0F
0008AE69 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008AE6D E10D                       	smpsAlterNote       $0D
0008AE6F C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008AE75 E10C                       	smpsAlterNote       $0C
0008AE77 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008AE7D E10A                       	smpsAlterNote       $0A
0008AE7F C904                       	dc.b	nC6, $04
0008AE81 E110                       	smpsAlterNote       $10
0008AE83 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008AE87 E10F                       	smpsAlterNote       $0F
0008AE89 C604                       	dc.b	nA5, $04
0008AE8B E10D                       	smpsAlterNote       $0D
0008AE8D C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008AE99 E109                       	smpsAlterNote       $09
0008AE9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE9F E10F                       	smpsAlterNote       $0F
0008AEA1 E701                       	dc.b	smpsNoAttack, $01
0008AEA3 E112                       	smpsAlterNote       $12
0008AEA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEA9 E10C                       	smpsAlterNote       $0C
0008AEAB E701                       	dc.b	smpsNoAttack, $01
0008AEAD E108                       	smpsAlterNote       $08
0008AEAF E701                       	dc.b	smpsNoAttack, $01
0008AEB1 E109                       	smpsAlterNote       $09
0008AEB3 E701                       	dc.b	smpsNoAttack, $01
0008AEB5 E10F                       	smpsAlterNote       $0F
0008AEB7 E701                       	dc.b	smpsNoAttack, $01
0008AEB9 E113                       	smpsAlterNote       $13
0008AEBB E701                       	dc.b	smpsNoAttack, $01
0008AEBD E10D                       	smpsAlterNote       $0D
0008AEBF C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008AEC5 E10C                       	smpsAlterNote       $0C
0008AEC7 C10D                       	dc.b	nE5, $0D
0008AEC9 E109                       	smpsAlterNote       $09
0008AECB E701                       	dc.b	smpsNoAttack, $01
0008AECD E106                       	smpsAlterNote       $06
0008AECF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AED3 E10C                       	smpsAlterNote       $0C
0008AED5 E701                       	dc.b	smpsNoAttack, $01
0008AED7 E110                       	smpsAlterNote       $10
0008AED9 E701                       	dc.b	smpsNoAttack, $01
0008AEDB E10F                       	smpsAlterNote       $0F
0008AEDD E701                       	dc.b	smpsNoAttack, $01
0008AEDF E109                       	smpsAlterNote       $09
0008AEE1 E701                       	dc.b	smpsNoAttack, $01
0008AEE3 E105                       	smpsAlterNote       $05
0008AEE5 E701                       	dc.b	smpsNoAttack, $01
0008AEE7 E109                       	smpsAlterNote       $09
0008AEE9 E701                       	dc.b	smpsNoAttack, $01
0008AEEB E10C                       	smpsAlterNote       $0C
0008AEED E701                       	dc.b	smpsNoAttack, $01
0008AEEF E110                       	smpsAlterNote       $10
0008AEF1 E701                       	dc.b	smpsNoAttack, $01
0008AEF3 E10C                       	smpsAlterNote       $0C
0008AEF5 E701                       	dc.b	smpsNoAttack, $01
0008AEF7 E106                       	smpsAlterNote       $06
0008AEF9 E701                       	dc.b	smpsNoAttack, $01
0008AEFB E105                       	smpsAlterNote       $05
0008AEFD E701                       	dc.b	smpsNoAttack, $01
0008AEFF E109                       	smpsAlterNote       $09
0008AF01 E701                       	dc.b	smpsNoAttack, $01
0008AF03 E10F                       	smpsAlterNote       $0F
0008AF05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF09 E10C                       	smpsAlterNote       $0C
0008AF0B E701                       	dc.b	smpsNoAttack, $01
0008AF0D E106                       	smpsAlterNote       $06
0008AF0F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF13 E10C                       	smpsAlterNote       $0C
0008AF15 E701                       	dc.b	smpsNoAttack, $01
0008AF17 E10F                       	smpsAlterNote       $0F
0008AF19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF1D E109                       	smpsAlterNote       $09
0008AF1F E701                       	dc.b	smpsNoAttack, $01
0008AF21 E105                       	smpsAlterNote       $05
0008AF23 E701                       	dc.b	smpsNoAttack, $01
0008AF25 E106                       	smpsAlterNote       $06
0008AF27 E701                       	dc.b	smpsNoAttack, $01
0008AF29 E10C                       	smpsAlterNote       $0C
0008AF2B E701                       	dc.b	smpsNoAttack, $01
0008AF2D E110                       	smpsAlterNote       $10
0008AF2F E701                       	dc.b	smpsNoAttack, $01
0008AF31 E10C                       	smpsAlterNote       $0C
0008AF33 E701                       	dc.b	smpsNoAttack, $01
0008AF35 E109                       	smpsAlterNote       $09
0008AF37 E701                       	dc.b	smpsNoAttack, $01
0008AF39 E105                       	smpsAlterNote       $05
0008AF3B E701                       	dc.b	smpsNoAttack, $01
0008AF3D E109                       	smpsAlterNote       $09
0008AF3F E701                       	dc.b	smpsNoAttack, $01
0008AF41 E10F                       	smpsAlterNote       $0F
0008AF43 E701                       	dc.b	smpsNoAttack, $01
0008AF45 E110                       	smpsAlterNote       $10
0008AF47 E701                       	dc.b	smpsNoAttack, $01
0008AF49 E10C                       	smpsAlterNote       $0C
0008AF4B E701                       	dc.b	smpsNoAttack, $01
0008AF4D E106                       	smpsAlterNote       $06
0008AF4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF53 E109                       	smpsAlterNote       $09
0008AF55 E701                       	dc.b	smpsNoAttack, $01
0008AF57 E10F                       	smpsAlterNote       $0F
0008AF59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF5D E109                       	smpsAlterNote       $09
0008AF5F E701                       	dc.b	smpsNoAttack, $01
0008AF61 E106                       	smpsAlterNote       $06
0008AF63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF67 E10C                       	smpsAlterNote       $0C
0008AF69 E701                       	dc.b	smpsNoAttack, $01
0008AF6B E110                       	smpsAlterNote       $10
0008AF6D E701                       	dc.b	smpsNoAttack, $01
0008AF6F E10F                       	smpsAlterNote       $0F
0008AF71 E701                       	dc.b	smpsNoAttack, $01
0008AF73 E109                       	smpsAlterNote       $09
0008AF75 E701                       	dc.b	smpsNoAttack, $01
0008AF77 E105                       	smpsAlterNote       $05
0008AF79 E701                       	dc.b	smpsNoAttack, $01
0008AF7B E109                       	smpsAlterNote       $09
0008AF7D E701                       	dc.b	smpsNoAttack, $01
0008AF7F E10F                       	smpsAlterNote       $0F
0008AF81 E701                       	dc.b	smpsNoAttack, $01
0008AF83 E110                       	smpsAlterNote       $10
0008AF85 E701                       	dc.b	smpsNoAttack, $01
0008AF87 E10C                       	smpsAlterNote       $0C
0008AF89 E701                       	dc.b	smpsNoAttack, $01
0008AF8B E106                       	smpsAlterNote       $06
0008AF8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF91 E109                       	smpsAlterNote       $09
0008AF93 E701                       	dc.b	smpsNoAttack, $01
0008AF95 E10F                       	smpsAlterNote       $0F
0008AF97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF9B E109                       	smpsAlterNote       $09
0008AF9D E701                       	dc.b	smpsNoAttack, $01
0008AF9F E106                       	smpsAlterNote       $06
0008AFA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFA5 E10C                       	smpsAlterNote       $0C
0008AFA7 E701                       	dc.b	smpsNoAttack, $01
0008AFA9 E110                       	smpsAlterNote       $10
0008AFAB E701                       	dc.b	smpsNoAttack, $01
0008AFAD E10F                       	smpsAlterNote       $0F
0008AFAF E701                       	dc.b	smpsNoAttack, $01
0008AFB1 E109                       	smpsAlterNote       $09
0008AFB3 E701                       	dc.b	smpsNoAttack, $01
0008AFB5 E105                       	smpsAlterNote       $05
0008AFB7 E701                       	dc.b	smpsNoAttack, $01
0008AFB9 E109                       	smpsAlterNote       $09
0008AFBB E701                       	dc.b	smpsNoAttack, $01
0008AFBD E10C                       	smpsAlterNote       $0C
0008AFBF E701                       	dc.b	smpsNoAttack, $01
0008AFC1 E110                       	smpsAlterNote       $10
0008AFC3 E701                       	dc.b	smpsNoAttack, $01
0008AFC5 E10C                       	smpsAlterNote       $0C
0008AFC7 E701                       	dc.b	smpsNoAttack, $01
0008AFC9 E106                       	smpsAlterNote       $06
0008AFCB E701                       	dc.b	smpsNoAttack, $01
0008AFCD E105                       	smpsAlterNote       $05
0008AFCF E701                       	dc.b	smpsNoAttack, $01
0008AFD1 E109                       	smpsAlterNote       $09
0008AFD3 E701                       	dc.b	smpsNoAttack, $01
0008AFD5 E10F                       	smpsAlterNote       $0F
0008AFD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFDB E10C                       	smpsAlterNote       $0C
0008AFDD E701                       	dc.b	smpsNoAttack, $01
0008AFDF E106                       	smpsAlterNote       $06
0008AFE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFE5 E10C                       	smpsAlterNote       $0C
0008AFE7 E701                       	dc.b	smpsNoAttack, $01
0008AFE9 E10F                       	smpsAlterNote       $0F
0008AFEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFEF E109                       	smpsAlterNote       $09
0008AFF1 E701                       	dc.b	smpsNoAttack, $01
0008AFF3 E105                       	smpsAlterNote       $05
0008AFF5 E701                       	dc.b	smpsNoAttack, $01
0008AFF7 E106                       	smpsAlterNote       $06
0008AFF9 E701                       	dc.b	smpsNoAttack, $01
0008AFFB E10C                       	smpsAlterNote       $0C
0008AFFD E701                       	dc.b	smpsNoAttack, $01
0008AFFF E110                       	smpsAlterNote       $10
0008B001 E701                       	dc.b	smpsNoAttack, $01
0008B003 E10C                       	smpsAlterNote       $0C
0008B005 E701                       	dc.b	smpsNoAttack, $01
0008B007 E109                       	smpsAlterNote       $09
0008B009 E701                       	dc.b	smpsNoAttack, $01
0008B00B E105                       	smpsAlterNote       $05
0008B00D E701                       	dc.b	smpsNoAttack, $01
0008B00F E109                       	smpsAlterNote       $09
0008B011 E701                       	dc.b	smpsNoAttack, $01
0008B013 E10F                       	smpsAlterNote       $0F
0008B015 E701                       	dc.b	smpsNoAttack, $01
0008B017 E110                       	smpsAlterNote       $10
0008B019 E701                       	dc.b	smpsNoAttack, $01
0008B01B E10C                       	smpsAlterNote       $0C
0008B01D E701                       	dc.b	smpsNoAttack, $01
0008B01F E106                       	smpsAlterNote       $06
0008B021 E701                       	dc.b	smpsNoAttack, $01
0008B023 E10B                       	smpsAlterNote       $0B
0008B025 BF02                       	dc.b	nD5, $02
0008B027 E10C                       	smpsAlterNote       $0C
0008B029 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008B02F E109                       	smpsAlterNote       $09
0008B031 E701                       	dc.b	smpsNoAttack, $01
0008B033 E105                       	smpsAlterNote       $05
0008B035 E701                       	dc.b	smpsNoAttack, $01
0008B037 E109                       	smpsAlterNote       $09
0008B039 E701                       	dc.b	smpsNoAttack, $01
0008B03B E10F                       	smpsAlterNote       $0F
0008B03D E701                       	dc.b	smpsNoAttack, $01
0008B03F E110                       	smpsAlterNote       $10
0008B041 E701                       	dc.b	smpsNoAttack, $01
0008B043 E10C                       	smpsAlterNote       $0C
0008B045 E701                       	dc.b	smpsNoAttack, $01
0008B047 E106                       	smpsAlterNote       $06
0008B049 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B04D E109                       	smpsAlterNote       $09
0008B04F E701                       	dc.b	smpsNoAttack, $01
0008B051 E10F                       	smpsAlterNote       $0F
0008B053 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B057 E109                       	smpsAlterNote       $09
0008B059 E701                       	dc.b	smpsNoAttack, $01
0008B05B E106                       	smpsAlterNote       $06
0008B05D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B061 E10C                       	smpsAlterNote       $0C
0008B063 E701                       	dc.b	smpsNoAttack, $01
0008B065 E110                       	smpsAlterNote       $10
0008B067 E701                       	dc.b	smpsNoAttack, $01
0008B069 E10F                       	smpsAlterNote       $0F
0008B06B E701                       	dc.b	smpsNoAttack, $01
0008B06D E109                       	smpsAlterNote       $09
0008B06F E701                       	dc.b	smpsNoAttack, $01
0008B071 E105                       	smpsAlterNote       $05
0008B073 E701                       	dc.b	smpsNoAttack, $01
0008B075 E109                       	smpsAlterNote       $09
0008B077 E701                       	dc.b	smpsNoAttack, $01
0008B079 E10C                       	smpsAlterNote       $0C
0008B07B E701                       	dc.b	smpsNoAttack, $01
0008B07D E110                       	smpsAlterNote       $10
0008B07F E701                       	dc.b	smpsNoAttack, $01
0008B081 E10C                       	smpsAlterNote       $0C
0008B083 E701                       	dc.b	smpsNoAttack, $01
0008B085 E106                       	smpsAlterNote       $06
0008B087 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B08B E10D                       	smpsAlterNote       $0D
0008B08D C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008B095 E10C                       	smpsAlterNote       $0C
0008B097 C10D                       	dc.b	nE5, $0D
0008B099 E106                       	smpsAlterNote       $06
0008B09B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B09F E109                       	smpsAlterNote       $09
0008B0A1 E701                       	dc.b	smpsNoAttack, $01
0008B0A3 E10F                       	smpsAlterNote       $0F
0008B0A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0A9 E109                       	smpsAlterNote       $09
0008B0AB E701                       	dc.b	smpsNoAttack, $01
0008B0AD E106                       	smpsAlterNote       $06
0008B0AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0B3 E10C                       	smpsAlterNote       $0C
0008B0B5 E701                       	dc.b	smpsNoAttack, $01
0008B0B7 E110                       	smpsAlterNote       $10
0008B0B9 E701                       	dc.b	smpsNoAttack, $01
0008B0BB E10F                       	smpsAlterNote       $0F
0008B0BD E701                       	dc.b	smpsNoAttack, $01
0008B0BF E109                       	smpsAlterNote       $09
0008B0C1 E701                       	dc.b	smpsNoAttack, $01
0008B0C3 E105                       	smpsAlterNote       $05
0008B0C5 E701                       	dc.b	smpsNoAttack, $01
0008B0C7 E106                       	smpsAlterNote       $06
0008B0C9 800F                       	dc.b	nRst, $0F
0008B0CD E6FF                       	smpsAlterVol        $FF
0008B0CF E10F                       	smpsAlterNote       $0F
0008B0D1 BA01                       	dc.b	nA4, $01
0008B0D3 E110                       	smpsAlterNote       $10
0008B0D5 BB02                       	dc.b	nBb4, $02
0008B0D7 E10F                       	smpsAlterNote       $0F
0008B0D9 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008B0DF E10B                       	smpsAlterNote       $0B
0008B0E1 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008B0E5 E10C                       	smpsAlterNote       $0C
0008B0E7 C103                       	dc.b	nE5, $03
0008B0E9 E10D                       	smpsAlterNote       $0D
0008B0EB C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008B0F5 E10B                       	smpsAlterNote       $0B
0008B0F7 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008B0FB E104                       	smpsAlterNote       $04
0008B0FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B101 E10A                       	smpsAlterNote       $0A
0008B103 E701                       	dc.b	smpsNoAttack, $01
0008B105 E10D                       	smpsAlterNote       $0D
0008B107 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B10B E107                       	smpsAlterNote       $07
0008B10D E701                       	dc.b	smpsNoAttack, $01
0008B10F E104                       	smpsAlterNote       $04
0008B111 8001                       	dc.b	nRst, $01
0008B113 E110                       	smpsAlterNote       $10
0008B115 C703                       	dc.b	nBb5, $03
0008B117 E10F                       	smpsAlterNote       $0F
0008B119 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008B11D E10D                       	smpsAlterNote       $0D
0008B11F C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008B123 E10C                       	smpsAlterNote       $0C
0008B125 E701                       	dc.b	smpsNoAttack, $01
0008B127 E108                       	smpsAlterNote       $08
0008B129 E701                       	dc.b	smpsNoAttack, $01
0008B12B E109                       	smpsAlterNote       $09
0008B12D E701                       	dc.b	smpsNoAttack, $01
0008B12F E10F                       	smpsAlterNote       $0F
0008B131 E701                       	dc.b	smpsNoAttack, $01
0008B133 E113                       	smpsAlterNote       $13
0008B135 E701                       	dc.b	smpsNoAttack, $01
0008B137 E10F                       	smpsAlterNote       $0F
0008B139 E701                       	dc.b	smpsNoAttack, $01
0008B13B E10C                       	smpsAlterNote       $0C
0008B13D E701                       	dc.b	smpsNoAttack, $01
0008B13F E108                       	smpsAlterNote       $08
0008B141 E701                       	dc.b	smpsNoAttack, $01
0008B143 E10C                       	smpsAlterNote       $0C
0008B145 E701                       	dc.b	smpsNoAttack, $01
0008B147 E112                       	smpsAlterNote       $12
0008B149 E701                       	dc.b	smpsNoAttack, $01
0008B14B E113                       	smpsAlterNote       $13
0008B14D E701                       	dc.b	smpsNoAttack, $01
0008B14F E10F                       	smpsAlterNote       $0F
0008B151 E701                       	dc.b	smpsNoAttack, $01
0008B153 E109                       	smpsAlterNote       $09
0008B155 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B159 E10C                       	smpsAlterNote       $0C
0008B15B E701                       	dc.b	smpsNoAttack, $01
0008B15D E112                       	smpsAlterNote       $12
0008B15F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B163 E10C                       	smpsAlterNote       $0C
0008B165 E701                       	dc.b	smpsNoAttack, $01
0008B167 E109                       	smpsAlterNote       $09
0008B169 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B16D E10F                       	smpsAlterNote       $0F
0008B16F E701                       	dc.b	smpsNoAttack, $01
0008B171 E113                       	smpsAlterNote       $13
0008B173 E701                       	dc.b	smpsNoAttack, $01
0008B175 E112                       	smpsAlterNote       $12
0008B177 E701                       	dc.b	smpsNoAttack, $01
0008B179 E10C                       	smpsAlterNote       $0C
0008B17B E701                       	dc.b	smpsNoAttack, $01
0008B17D E108                       	smpsAlterNote       $08
0008B17F E701                       	dc.b	smpsNoAttack, $01
0008B181 E10C                       	smpsAlterNote       $0C
0008B183 E701                       	dc.b	smpsNoAttack, $01
0008B185 E10F                       	smpsAlterNote       $0F
0008B187 E701                       	dc.b	smpsNoAttack, $01
0008B189 E113                       	smpsAlterNote       $13
0008B18B E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008B18F E10B                       	smpsAlterNote       $0B
0008B191 BF03                       	dc.b	nD5, $03
0008B193 E10C                       	smpsAlterNote       $0C
0008B195 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008B199 E10D                       	smpsAlterNote       $0D
0008B19B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008B1A5 E10B                       	smpsAlterNote       $0B
0008B1A7 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008B1B3 E110                       	smpsAlterNote       $10
0008B1B5 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B1B9 E10F                       	smpsAlterNote       $0F
0008B1BB C604                       	dc.b	nA5, $04
0008B1BD E10D                       	smpsAlterNote       $0D
0008B1BF C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008B1C5 E109                       	smpsAlterNote       $09
0008B1C7 E701                       	dc.b	smpsNoAttack, $01
0008B1C9 E108                       	smpsAlterNote       $08
0008B1CB E701                       	dc.b	smpsNoAttack, $01
0008B1CD E10C                       	smpsAlterNote       $0C
0008B1CF E701                       	dc.b	smpsNoAttack, $01
0008B1D1 E112                       	smpsAlterNote       $12
0008B1D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1D7 E10F                       	smpsAlterNote       $0F
0008B1D9 E701                       	dc.b	smpsNoAttack, $01
0008B1DB E109                       	smpsAlterNote       $09
0008B1DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1E1 E10F                       	smpsAlterNote       $0F
0008B1E3 E701                       	dc.b	smpsNoAttack, $01
0008B1E5 E112                       	smpsAlterNote       $12
0008B1E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1EB E10C                       	smpsAlterNote       $0C
0008B1ED E701                       	dc.b	smpsNoAttack, $01
0008B1EF E108                       	smpsAlterNote       $08
0008B1F1 E701                       	dc.b	smpsNoAttack, $01
0008B1F3 E109                       	smpsAlterNote       $09
0008B1F5 E701                       	dc.b	smpsNoAttack, $01
0008B1F7 E10F                       	smpsAlterNote       $0F
0008B1F9 E701                       	dc.b	smpsNoAttack, $01
0008B1FB E113                       	smpsAlterNote       $13
0008B1FD E701                       	dc.b	smpsNoAttack, $01
0008B1FF E10F                       	smpsAlterNote       $0F
0008B201 E701                       	dc.b	smpsNoAttack, $01
0008B203 E10C                       	smpsAlterNote       $0C
0008B205 E701                       	dc.b	smpsNoAttack, $01
0008B207 E108                       	smpsAlterNote       $08
0008B209 E701                       	dc.b	smpsNoAttack, $01
0008B20B E10C                       	smpsAlterNote       $0C
0008B20D E701                       	dc.b	smpsNoAttack, $01
0008B20F E112                       	smpsAlterNote       $12
0008B211 E701                       	dc.b	smpsNoAttack, $01
0008B213 E113                       	smpsAlterNote       $13
0008B215 E701                       	dc.b	smpsNoAttack, $01
0008B217 E10F                       	smpsAlterNote       $0F
0008B219 E701                       	dc.b	smpsNoAttack, $01
0008B21B E109                       	smpsAlterNote       $09
0008B21D E701                       	dc.b	smpsNoAttack, $01
0008B21F E10D                       	smpsAlterNote       $0D
0008B221 C402                       	dc.b	nG5, $02
0008B223 E10F                       	smpsAlterNote       $0F
0008B225 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008B22F E10D                       	smpsAlterNote       $0D
0008B231 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B237 E10B                       	smpsAlterNote       $0B
0008B239 BF0D                       	dc.b	nD5, $0D
0008B23B E108                       	smpsAlterNote       $08
0008B23D E701                       	dc.b	smpsNoAttack, $01
0008B23F E104                       	smpsAlterNote       $04
0008B241 E701                       	dc.b	smpsNoAttack, $01
0008B243 E105                       	smpsAlterNote       $05
0008B245 E701                       	dc.b	smpsNoAttack, $01
0008B247 E10B                       	smpsAlterNote       $0B
0008B249 E701                       	dc.b	smpsNoAttack, $01
0008B24B E10F                       	smpsAlterNote       $0F
0008B24D E701                       	dc.b	smpsNoAttack, $01
0008B24F E10B                       	smpsAlterNote       $0B
0008B251 E701                       	dc.b	smpsNoAttack, $01
0008B253 E108                       	smpsAlterNote       $08
0008B255 E701                       	dc.b	smpsNoAttack, $01
0008B257 E104                       	smpsAlterNote       $04
0008B259 E701                       	dc.b	smpsNoAttack, $01
0008B25B E108                       	smpsAlterNote       $08
0008B25D E701                       	dc.b	smpsNoAttack, $01
0008B25F E10E                       	smpsAlterNote       $0E
0008B261 E701                       	dc.b	smpsNoAttack, $01
0008B263 E10F                       	smpsAlterNote       $0F
0008B265 E701                       	dc.b	smpsNoAttack, $01
0008B267 E10C                       	smpsAlterNote       $0C
0008B269 C101                       	dc.b	nE5, $01
0008B26B E10D                       	smpsAlterNote       $0D
0008B26D C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008B275 E10F                       	smpsAlterNote       $0F
0008B277 C607                       	dc.b	nA5, $07
0008B279 E10C                       	smpsAlterNote       $0C
0008B27B CD07                       	dc.b	nE6, $07
0008B27D E10D                       	smpsAlterNote       $0D
0008B27F CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008B283 E10C                       	smpsAlterNote       $0C
0008B285 CD03                       	dc.b	nE6, $03
0008B287 E10A                       	smpsAlterNote       $0A
0008B289 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008B28D E10D                       	smpsAlterNote       $0D
0008B28F C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008B295 E10A                       	smpsAlterNote       $0A
0008B297 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B29B E110                       	smpsAlterNote       $10
0008B29D E701                       	dc.b	smpsNoAttack, $01
0008B29F E114                       	smpsAlterNote       $14
0008B2A1 E701                       	dc.b	smpsNoAttack, $01
0008B2A3 E113                       	smpsAlterNote       $13
0008B2A5 E701                       	dc.b	smpsNoAttack, $01
0008B2A7 E10D                       	smpsAlterNote       $0D
0008B2A9 E701                       	dc.b	smpsNoAttack, $01
0008B2AB E109                       	smpsAlterNote       $09
0008B2AD E701                       	dc.b	smpsNoAttack, $01
0008B2AF E10D                       	smpsAlterNote       $0D
0008B2B1 E701                       	dc.b	smpsNoAttack, $01
0008B2B3 E110                       	smpsAlterNote       $10
0008B2B5 E701                       	dc.b	smpsNoAttack, $01
0008B2B7 E114                       	smpsAlterNote       $14
0008B2B9 E701                       	dc.b	smpsNoAttack, $01
0008B2BB E10F                       	smpsAlterNote       $0F
0008B2BD C607                       	dc.b	nA5, $07
0008B2BF E10D                       	smpsAlterNote       $0D
0008B2C1 C40D                       	dc.b	nG5, $0D
0008B2C3 E10A                       	smpsAlterNote       $0A
0008B2C5 E701                       	dc.b	smpsNoAttack, $01
0008B2C7 E106                       	smpsAlterNote       $06
0008B2C9 E701                       	dc.b	smpsNoAttack, $01
0008B2CB E10A                       	smpsAlterNote       $0A
0008B2CD E701                       	dc.b	smpsNoAttack, $01
0008B2CF E10D                       	smpsAlterNote       $0D
0008B2D1 E701                       	dc.b	smpsNoAttack, $01
0008B2D3 E111                       	smpsAlterNote       $11
0008B2D5 E701                       	dc.b	smpsNoAttack, $01
0008B2D7 E10D                       	smpsAlterNote       $0D
0008B2D9 E701                       	dc.b	smpsNoAttack, $01
0008B2DB E107                       	smpsAlterNote       $07
0008B2DD E701                       	dc.b	smpsNoAttack, $01
0008B2DF E106                       	smpsAlterNote       $06
0008B2E1 E701                       	dc.b	smpsNoAttack, $01
0008B2E3 E10A                       	smpsAlterNote       $0A
0008B2E5 E701                       	dc.b	smpsNoAttack, $01
0008B2E7 E110                       	smpsAlterNote       $10
0008B2E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2ED E10D                       	smpsAlterNote       $0D
0008B2EF E701                       	dc.b	smpsNoAttack, $01
0008B2F1 E107                       	smpsAlterNote       $07
0008B2F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2F7 E10F                       	smpsAlterNote       $0F
0008B2F9 C60E                       	dc.b	nA5, $0E
0008B2FB E109                       	smpsAlterNote       $09
0008B2FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B301 E10F                       	smpsAlterNote       $0F
0008B303 E701                       	dc.b	smpsNoAttack, $01
0008B305 E112                       	smpsAlterNote       $12
0008B307 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B30B E10C                       	smpsAlterNote       $0C
0008B30D E701                       	dc.b	smpsNoAttack, $01
0008B30F E108                       	smpsAlterNote       $08
0008B311 E701                       	dc.b	smpsNoAttack, $01
0008B313 E109                       	smpsAlterNote       $09
0008B315 E701                       	dc.b	smpsNoAttack, $01
0008B317 E10F                       	smpsAlterNote       $0F
0008B319 E701                       	dc.b	smpsNoAttack, $01
0008B31B E113                       	smpsAlterNote       $13
0008B31D E701                       	dc.b	smpsNoAttack, $01
0008B31F E10F                       	smpsAlterNote       $0F
0008B321 E701                       	dc.b	smpsNoAttack, $01
0008B323 E10C                       	smpsAlterNote       $0C
0008B325 E701                       	dc.b	smpsNoAttack, $01
0008B327 E108                       	smpsAlterNote       $08
0008B329 E701                       	dc.b	smpsNoAttack, $01
0008B32B E109                       	smpsAlterNote       $09
0008B32D 8001                       	dc.b	nRst, $01
0008B32F E110                       	smpsAlterNote       $10
0008B331 C70D                       	dc.b	nBb5, $0D
0008B333 E10D                       	smpsAlterNote       $0D
0008B335 E701                       	dc.b	smpsNoAttack, $01
0008B337 E109                       	smpsAlterNote       $09
0008B339 E701                       	dc.b	smpsNoAttack, $01
0008B33B E10D                       	smpsAlterNote       $0D
0008B33D E701                       	dc.b	smpsNoAttack, $01
0008B33F E113                       	smpsAlterNote       $13
0008B341 E701                       	dc.b	smpsNoAttack, $01
0008B343 E114                       	smpsAlterNote       $14
0008B345 E701                       	dc.b	smpsNoAttack, $01
0008B347 E110                       	smpsAlterNote       $10
0008B349 E701                       	dc.b	smpsNoAttack, $01
0008B34B E10A                       	smpsAlterNote       $0A
0008B34D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B351 E10D                       	smpsAlterNote       $0D
0008B353 E701                       	dc.b	smpsNoAttack, $01
0008B355 E113                       	smpsAlterNote       $13
0008B357 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B35B E10D                       	smpsAlterNote       $0D
0008B35D E701                       	dc.b	smpsNoAttack, $01
0008B35F E10A                       	smpsAlterNote       $0A
0008B361 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008B36B E10B                       	smpsAlterNote       $0B
0008B36D 8001                       	dc.b	nRst, $01
0008B36F E10C                       	smpsAlterNote       $0C
0008B371 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008B375 E10B                       	smpsAlterNote       $0B
0008B377 CB0D                       	dc.b	nD6, $0D
0008B379 E105                       	smpsAlterNote       $05
0008B37B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B37F E108                       	smpsAlterNote       $08
0008B381 E701                       	dc.b	smpsNoAttack, $01
0008B383 E10E                       	smpsAlterNote       $0E
0008B385 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B389 E108                       	smpsAlterNote       $08
0008B38B E701                       	dc.b	smpsNoAttack, $01
0008B38D E105                       	smpsAlterNote       $05
0008B38F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B393 E10B                       	smpsAlterNote       $0B
0008B395 E701                       	dc.b	smpsNoAttack, $01
0008B397 E10F                       	smpsAlterNote       $0F
0008B399 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B39D E10C                       	smpsAlterNote       $0C
0008B39F CC0D                       	dc.b	nEb6, $0D
0008B3A1 E106                       	smpsAlterNote       $06
0008B3A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B3A7 E109                       	smpsAlterNote       $09
0008B3A9 E701                       	dc.b	smpsNoAttack, $01
0008B3AB E10C                       	smpsAlterNote       $0C
0008B3AD 8001                       	dc.b	nRst, $01
0008B3AF E10A                       	smpsAlterNote       $0A
0008B3B1 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008B3BD CB0E                       	dc.b	nD6, $0E
0008B3BF E105                       	smpsAlterNote       $05
0008B3C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B3C5 E10B                       	smpsAlterNote       $0B
0008B3C7 E701                       	dc.b	smpsNoAttack, $01
0008B3C9 E10E                       	smpsAlterNote       $0E
0008B3CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B3CF E108                       	smpsAlterNote       $08
0008B3D1 E701                       	dc.b	smpsNoAttack, $01
0008B3D3 E104                       	smpsAlterNote       $04
0008B3D5 E701                       	dc.b	smpsNoAttack, $01
0008B3D7 E105                       	smpsAlterNote       $05
0008B3D9 E701                       	dc.b	smpsNoAttack, $01
0008B3DB E10B                       	smpsAlterNote       $0B
0008B3DD E701                       	dc.b	smpsNoAttack, $01
0008B3DF E10F                       	smpsAlterNote       $0F
0008B3E1 E701                       	dc.b	smpsNoAttack, $01
0008B3E3 E10D                       	smpsAlterNote       $0D
0008B3E5 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008B3E9 E10C                       	smpsAlterNote       $0C
0008B3EB CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008B3EF E10A                       	smpsAlterNote       $0A
0008B3F1 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008B3FD CB0D                       	dc.b	nD6, $0D
0008B3FF E108                       	smpsAlterNote       $08
0008B401 E701                       	dc.b	smpsNoAttack, $01
0008B403 E104                       	smpsAlterNote       $04
0008B405 E701                       	dc.b	smpsNoAttack, $01
0008B407 E105                       	smpsAlterNote       $05
0008B409 E701                       	dc.b	smpsNoAttack, $01
0008B40B E10B                       	smpsAlterNote       $0B
0008B40D E701                       	dc.b	smpsNoAttack, $01
0008B40F E10F                       	smpsAlterNote       $0F
0008B411 E701                       	dc.b	smpsNoAttack, $01
0008B413 E10B                       	smpsAlterNote       $0B
0008B415 E701                       	dc.b	smpsNoAttack, $01
0008B417 E108                       	smpsAlterNote       $08
0008B419 E701                       	dc.b	smpsNoAttack, $01
0008B41B E104                       	smpsAlterNote       $04
0008B41D E701                       	dc.b	smpsNoAttack, $01
0008B41F E108                       	smpsAlterNote       $08
0008B421 E701                       	dc.b	smpsNoAttack, $01
0008B423 E10E                       	smpsAlterNote       $0E
0008B425 E701                       	dc.b	smpsNoAttack, $01
0008B427 E10F                       	smpsAlterNote       $0F
0008B429 E701                       	dc.b	smpsNoAttack, $01
0008B42B E10C                       	smpsAlterNote       $0C
0008B42D CC0D                       	dc.b	nEb6, $0D
0008B42F E109                       	smpsAlterNote       $09
0008B431 E701                       	dc.b	smpsNoAttack, $01
0008B433 E105                       	smpsAlterNote       $05
0008B435 E701                       	dc.b	smpsNoAttack, $01
0008B437 E106                       	smpsAlterNote       $06
0008B439 E701                       	dc.b	smpsNoAttack, $01
0008B43B E10C                       	smpsAlterNote       $0C
0008B43D E701                       	dc.b	smpsNoAttack, $01
0008B43F E10A                       	smpsAlterNote       $0A
0008B441 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008B44D CB0D                       	dc.b	nD6, $0D
0008B44F E108                       	smpsAlterNote       $08
0008B451 E701                       	dc.b	smpsNoAttack, $01
0008B453 E104                       	smpsAlterNote       $04
0008B455 E701                       	dc.b	smpsNoAttack, $01
0008B457 E108                       	smpsAlterNote       $08
0008B459 E701                       	dc.b	smpsNoAttack, $01
0008B45B E10B                       	smpsAlterNote       $0B
0008B45D E701                       	dc.b	smpsNoAttack, $01
0008B45F E10F                       	smpsAlterNote       $0F
0008B461 E701                       	dc.b	smpsNoAttack, $01
0008B463 E10B                       	smpsAlterNote       $0B
0008B465 E701                       	dc.b	smpsNoAttack, $01
0008B467 E105                       	smpsAlterNote       $05
0008B469 E701                       	dc.b	smpsNoAttack, $01
0008B46B E104                       	smpsAlterNote       $04
0008B46D E701                       	dc.b	smpsNoAttack, $01
0008B46F E108                       	smpsAlterNote       $08
0008B471 E701                       	dc.b	smpsNoAttack, $01
0008B473 E10E                       	smpsAlterNote       $0E
0008B475 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B479 E10B                       	smpsAlterNote       $0B
0008B47B E701                       	dc.b	smpsNoAttack, $01
0008B47D E105                       	smpsAlterNote       $05
0008B47F E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008B487 03                         	dc.b	$03
0008B488 E601                       	smpsAlterVol        $01
0008B48A F6F1 D1                    	smpsJump            music84_Jump01
0008B48D                            
0008B48D                            ; FM5 Data
0008B48D                            music84_FM5:
0008B48F E080                       	smpsPan             panLeft, $00
0008B491 8003                       	dc.b	nRst, $03
0008B493 E10D                       	smpsAlterNote       $0D
0008B495 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008B499 E10C                       	smpsAlterNote       $0C
0008B49B C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008B49F E10F                       	smpsAlterNote       $0F
0008B4A1 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008B4A7 E6FE                       	smpsAlterVol        $FE
0008B4A9 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008B4AF E10D                       	smpsAlterNote       $0D
0008B4B1 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008B4B7 E10C                       	smpsAlterNote       $0C
0008B4B9 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008B4BD E10A                       	smpsAlterNote       $0A
0008B4BF BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008B4C5 03                         	dc.b	$03
0008B4C6                            
0008B4C6                            music84_Jump00:
0008B4C6 8004                       	dc.b	nRst, $04
0008B4C8 E602                       	smpsAlterVol        $02
0008B4CA E10D                       	smpsAlterNote       $0D
0008B4CC B60D                       	dc.b	nF4, $0D
0008B4CE E107                       	smpsAlterNote       $07
0008B4D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4D4 E10A                       	smpsAlterNote       $0A
0008B4D6 E701                       	dc.b	smpsNoAttack, $01
0008B4D8 E110                       	smpsAlterNote       $10
0008B4DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4DE E10A                       	smpsAlterNote       $0A
0008B4E0 E701                       	dc.b	smpsNoAttack, $01
0008B4E2 E107                       	smpsAlterNote       $07
0008B4E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4E8 E10D                       	smpsAlterNote       $0D
0008B4EA E701                       	dc.b	smpsNoAttack, $01
0008B4EC E111                       	smpsAlterNote       $11
0008B4EE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B4F2 E10D                       	smpsAlterNote       $0D
0008B4F4 B80D                       	dc.b	nG4, $0D
0008B4F6 E107                       	smpsAlterNote       $07
0008B4F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4FC E10A                       	smpsAlterNote       $0A
0008B4FE E701                       	dc.b	smpsNoAttack, $01
0008B500 E110                       	smpsAlterNote       $10
0008B502 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B506 E10A                       	smpsAlterNote       $0A
0008B508 E701                       	dc.b	smpsNoAttack, $01
0008B50A E107                       	smpsAlterNote       $07
0008B50C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B510 E10D                       	smpsAlterNote       $0D
0008B512 E701                       	dc.b	smpsNoAttack, $01
0008B514 E111                       	smpsAlterNote       $11
0008B516 E701                       	dc.b	smpsNoAttack, $01
0008B518 E110                       	smpsAlterNote       $10
0008B51A E701                       	dc.b	smpsNoAttack, $01
0008B51C E10A                       	smpsAlterNote       $0A
0008B51E E701                       	dc.b	smpsNoAttack, $01
0008B520 E106                       	smpsAlterNote       $06
0008B522 E701                       	dc.b	smpsNoAttack, $01
0008B524 E10A                       	smpsAlterNote       $0A
0008B526 E701                       	dc.b	smpsNoAttack, $01
0008B528 E10D                       	smpsAlterNote       $0D
0008B52A E701                       	dc.b	smpsNoAttack, $01
0008B52C E111                       	smpsAlterNote       $11
0008B52E E701                       	dc.b	smpsNoAttack, $01
0008B530 E10D                       	smpsAlterNote       $0D
0008B532 E701                       	dc.b	smpsNoAttack, $01
0008B534 E10F                       	smpsAlterNote       $0F
0008B536 BA0E                       	dc.b	nA4, $0E
0008B538 E109                       	smpsAlterNote       $09
0008B53A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B53E E10F                       	smpsAlterNote       $0F
0008B540 E701                       	dc.b	smpsNoAttack, $01
0008B542 E112                       	smpsAlterNote       $12
0008B544 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B548 E10C                       	smpsAlterNote       $0C
0008B54A E701                       	dc.b	smpsNoAttack, $01
0008B54C E108                       	smpsAlterNote       $08
0008B54E E701                       	dc.b	smpsNoAttack, $01
0008B550 E109                       	smpsAlterNote       $09
0008B552 E701                       	dc.b	smpsNoAttack, $01
0008B554 E10F                       	smpsAlterNote       $0F
0008B556 E701                       	dc.b	smpsNoAttack, $01
0008B558 E113                       	smpsAlterNote       $13
0008B55A E701                       	dc.b	smpsNoAttack, $01
0008B55C E10F                       	smpsAlterNote       $0F
0008B55E E701                       	dc.b	smpsNoAttack, $01
0008B560 E109                       	smpsAlterNote       $09
0008B562 E701                       	dc.b	smpsNoAttack, $01
0008B564 E108                       	smpsAlterNote       $08
0008B566 E701                       	dc.b	smpsNoAttack, $01
0008B568 E10C                       	smpsAlterNote       $0C
0008B56A E701                       	dc.b	smpsNoAttack, $01
0008B56C E112                       	smpsAlterNote       $12
0008B56E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B572 E10F                       	smpsAlterNote       $0F
0008B574 E701                       	dc.b	smpsNoAttack, $01
0008B576 E109                       	smpsAlterNote       $09
0008B578 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B57C E10F                       	smpsAlterNote       $0F
0008B57E E701                       	dc.b	smpsNoAttack, $01
0008B580 E112                       	smpsAlterNote       $12
0008B582 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B586 E10C                       	smpsAlterNote       $0C
0008B588 E701                       	dc.b	smpsNoAttack, $01
0008B58A E108                       	smpsAlterNote       $08
0008B58C E701                       	dc.b	smpsNoAttack, $01
0008B58E E109                       	smpsAlterNote       $09
0008B590 E701                       	dc.b	smpsNoAttack, $01
0008B592 E10F                       	smpsAlterNote       $0F
0008B594 E701                       	dc.b	smpsNoAttack, $01
0008B596 E113                       	smpsAlterNote       $13
0008B598 E701                       	dc.b	smpsNoAttack, $01
0008B59A E10F                       	smpsAlterNote       $0F
0008B59C E701                       	dc.b	smpsNoAttack, $01
0008B59E E10C                       	smpsAlterNote       $0C
0008B5A0 E701                       	dc.b	smpsNoAttack, $01
0008B5A2 E108                       	smpsAlterNote       $08
0008B5A4 E701                       	dc.b	smpsNoAttack, $01
0008B5A6 E109                       	smpsAlterNote       $09
0008B5A8 8001                       	dc.b	nRst, $01
0008B5AA E10C                       	smpsAlterNote       $0C
0008B5AC B50A                       	dc.b	nE4, $0A
0008B5AE E10D                       	smpsAlterNote       $0D
0008B5B0 B60D                       	dc.b	nF4, $0D
0008B5B2 E10A                       	smpsAlterNote       $0A
0008B5B4 E701                       	dc.b	smpsNoAttack, $01
0008B5B6 E106                       	smpsAlterNote       $06
0008B5B8 E701                       	dc.b	smpsNoAttack, $01
0008B5BA E107                       	smpsAlterNote       $07
0008B5BC E701                       	dc.b	smpsNoAttack, $01
0008B5BE E10D                       	smpsAlterNote       $0D
0008B5C0 E701                       	dc.b	smpsNoAttack, $01
0008B5C2 E111                       	smpsAlterNote       $11
0008B5C4 E701                       	dc.b	smpsNoAttack, $01
0008B5C6 E10D                       	smpsAlterNote       $0D
0008B5C8 E701                       	dc.b	smpsNoAttack, $01
0008B5CA E10A                       	smpsAlterNote       $0A
0008B5CC E701                       	dc.b	smpsNoAttack, $01
0008B5CE E106                       	smpsAlterNote       $06
0008B5D0 E701                       	dc.b	smpsNoAttack, $01
0008B5D2 E10A                       	smpsAlterNote       $0A
0008B5D4 E701                       	dc.b	smpsNoAttack, $01
0008B5D6 E110                       	smpsAlterNote       $10
0008B5D8 E701                       	dc.b	smpsNoAttack, $01
0008B5DA E111                       	smpsAlterNote       $11
0008B5DC E701                       	dc.b	smpsNoAttack, $01
0008B5DE E10D                       	smpsAlterNote       $0D
0008B5E0 B80D                       	dc.b	nG4, $0D
0008B5E2 E10A                       	smpsAlterNote       $0A
0008B5E4 E701                       	dc.b	smpsNoAttack, $01
0008B5E6 E106                       	smpsAlterNote       $06
0008B5E8 E701                       	dc.b	smpsNoAttack, $01
0008B5EA E107                       	smpsAlterNote       $07
0008B5EC E701                       	dc.b	smpsNoAttack, $01
0008B5EE E10D                       	smpsAlterNote       $0D
0008B5F0 E701                       	dc.b	smpsNoAttack, $01
0008B5F2 E111                       	smpsAlterNote       $11
0008B5F4 E701                       	dc.b	smpsNoAttack, $01
0008B5F6 E10D                       	smpsAlterNote       $0D
0008B5F8 E701                       	dc.b	smpsNoAttack, $01
0008B5FA E10A                       	smpsAlterNote       $0A
0008B5FC E701                       	dc.b	smpsNoAttack, $01
0008B5FE E106                       	smpsAlterNote       $06
0008B600 E701                       	dc.b	smpsNoAttack, $01
0008B602 E10A                       	smpsAlterNote       $0A
0008B604 E701                       	dc.b	smpsNoAttack, $01
0008B606 E110                       	smpsAlterNote       $10
0008B608 E701                       	dc.b	smpsNoAttack, $01
0008B60A E111                       	smpsAlterNote       $11
0008B60C E701                       	dc.b	smpsNoAttack, $01
0008B60E E10D                       	smpsAlterNote       $0D
0008B610 E701                       	dc.b	smpsNoAttack, $01
0008B612 E107                       	smpsAlterNote       $07
0008B614 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B618 E10A                       	smpsAlterNote       $0A
0008B61A E701                       	dc.b	smpsNoAttack, $01
0008B61C E110                       	smpsAlterNote       $10
0008B61E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B622 E10D                       	smpsAlterNote       $0D
0008B624 8001                       	dc.b	nRst, $01
0008B626 E10F                       	smpsAlterNote       $0F
0008B628 BA0D                       	dc.b	nA4, $0D
0008B62A E10C                       	smpsAlterNote       $0C
0008B62C E701                       	dc.b	smpsNoAttack, $01
0008B62E E108                       	smpsAlterNote       $08
0008B630 E701                       	dc.b	smpsNoAttack, $01
0008B632 E10C                       	smpsAlterNote       $0C
0008B634 E701                       	dc.b	smpsNoAttack, $01
0008B636 E112                       	smpsAlterNote       $12
0008B638 E701                       	dc.b	smpsNoAttack, $01
0008B63A E113                       	smpsAlterNote       $13
0008B63C E701                       	dc.b	smpsNoAttack, $01
0008B63E E10F                       	smpsAlterNote       $0F
0008B640 E701                       	dc.b	smpsNoAttack, $01
0008B642 E109                       	smpsAlterNote       $09
0008B644 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B648 E10C                       	smpsAlterNote       $0C
0008B64A E701                       	dc.b	smpsNoAttack, $01
0008B64C E112                       	smpsAlterNote       $12
0008B64E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B652 E10C                       	smpsAlterNote       $0C
0008B654 E701                       	dc.b	smpsNoAttack, $01
0008B656 E109                       	smpsAlterNote       $09
0008B658 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B65C E10F                       	smpsAlterNote       $0F
0008B65E E701                       	dc.b	smpsNoAttack, $01
0008B660 E113                       	smpsAlterNote       $13
0008B662 E701                       	dc.b	smpsNoAttack, $01
0008B664 E112                       	smpsAlterNote       $12
0008B666 E701                       	dc.b	smpsNoAttack, $01
0008B668 E10C                       	smpsAlterNote       $0C
0008B66A E701                       	dc.b	smpsNoAttack, $01
0008B66C E108                       	smpsAlterNote       $08
0008B66E E701                       	dc.b	smpsNoAttack, $01
0008B670 E10C                       	smpsAlterNote       $0C
0008B672 E701                       	dc.b	smpsNoAttack, $01
0008B674 E10F                       	smpsAlterNote       $0F
0008B676 E701                       	dc.b	smpsNoAttack, $01
0008B678 E113                       	smpsAlterNote       $13
0008B67A E701                       	dc.b	smpsNoAttack, $01
0008B67C E10F                       	smpsAlterNote       $0F
0008B67E E701                       	dc.b	smpsNoAttack, $01
0008B680 E109                       	smpsAlterNote       $09
0008B682 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B686 E10D                       	smpsAlterNote       $0D
0008B688 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008B68C E10C                       	smpsAlterNote       $0C
0008B68E B506 8001                  	dc.b	nE4, $06, nRst, $01
0008B692 E10B                       	smpsAlterNote       $0B
0008B694 B30D                       	dc.b	nD4, $0D
0008B696 E10C                       	smpsAlterNote       $0C
0008B698 B503 8001                  	dc.b	nE4, $03, nRst, $01
0008B69C E10D                       	smpsAlterNote       $0D
0008B69E B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008B6A6 E109                       	smpsAlterNote       $09
0008B6A8 E701                       	dc.b	smpsNoAttack, $01
0008B6AA E108                       	smpsAlterNote       $08
0008B6AC E701                       	dc.b	smpsNoAttack, $01
0008B6AE E10C                       	smpsAlterNote       $0C
0008B6B0 E701                       	dc.b	smpsNoAttack, $01
0008B6B2 E112                       	smpsAlterNote       $12
0008B6B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6B8 E10F                       	smpsAlterNote       $0F
0008B6BA E701                       	dc.b	smpsNoAttack, $01
0008B6BC E109                       	smpsAlterNote       $09
0008B6BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6C2 E10F                       	smpsAlterNote       $0F
0008B6C4 E701                       	dc.b	smpsNoAttack, $01
0008B6C6 E112                       	smpsAlterNote       $12
0008B6C8 E701                       	dc.b	smpsNoAttack, $01
0008B6CA E113                       	smpsAlterNote       $13
0008B6CC 8001                       	dc.b	nRst, $01
0008B6CE E10D                       	smpsAlterNote       $0D
0008B6D0 C20D                       	dc.b	nF5, $0D
0008B6D2 E107                       	smpsAlterNote       $07
0008B6D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6D8 E10A                       	smpsAlterNote       $0A
0008B6DA E701                       	dc.b	smpsNoAttack, $01
0008B6DC E110                       	smpsAlterNote       $10
0008B6DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6E2 E10A                       	smpsAlterNote       $0A
0008B6E4 E701                       	dc.b	smpsNoAttack, $01
0008B6E6 E107                       	smpsAlterNote       $07
0008B6E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6EC E10D                       	smpsAlterNote       $0D
0008B6EE E701                       	dc.b	smpsNoAttack, $01
0008B6F0 E111                       	smpsAlterNote       $11
0008B6F2 E701                       	dc.b	smpsNoAttack, $01
0008B6F4 E110                       	smpsAlterNote       $10
0008B6F6 E701                       	dc.b	smpsNoAttack, $01
0008B6F8 E10A                       	smpsAlterNote       $0A
0008B6FA E701                       	dc.b	smpsNoAttack, $01
0008B6FC E106                       	smpsAlterNote       $06
0008B6FE E701                       	dc.b	smpsNoAttack, $01
0008B700 E10A                       	smpsAlterNote       $0A
0008B702 E701                       	dc.b	smpsNoAttack, $01
0008B704 E10D                       	smpsAlterNote       $0D
0008B706 E701                       	dc.b	smpsNoAttack, $01
0008B708 E111                       	smpsAlterNote       $11
0008B70A E701                       	dc.b	smpsNoAttack, $01
0008B70C E10D                       	smpsAlterNote       $0D
0008B70E E701                       	dc.b	smpsNoAttack, $01
0008B710 E107                       	smpsAlterNote       $07
0008B712 E701                       	dc.b	smpsNoAttack, $01
0008B714 E106                       	smpsAlterNote       $06
0008B716 E701                       	dc.b	smpsNoAttack, $01
0008B718 E10A                       	smpsAlterNote       $0A
0008B71A E701                       	dc.b	smpsNoAttack, $01
0008B71C E110                       	smpsAlterNote       $10
0008B71E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B722 E10D                       	smpsAlterNote       $0D
0008B724 E701                       	dc.b	smpsNoAttack, $01
0008B726 E107                       	smpsAlterNote       $07
0008B728 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B72C E10D                       	smpsAlterNote       $0D
0008B72E E701                       	dc.b	smpsNoAttack, $01
0008B730 E110                       	smpsAlterNote       $10
0008B732 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B736 E10A                       	smpsAlterNote       $0A
0008B738 E701                       	dc.b	smpsNoAttack, $01
0008B73A E106                       	smpsAlterNote       $06
0008B73C E701                       	dc.b	smpsNoAttack, $01
0008B73E E107                       	smpsAlterNote       $07
0008B740 E701                       	dc.b	smpsNoAttack, $01
0008B742 E10D                       	smpsAlterNote       $0D
0008B744 E701                       	dc.b	smpsNoAttack, $01
0008B746 E111                       	smpsAlterNote       $11
0008B748 E701                       	dc.b	smpsNoAttack, $01
0008B74A E10D                       	smpsAlterNote       $0D
0008B74C E701                       	dc.b	smpsNoAttack, $01
0008B74E E10A                       	smpsAlterNote       $0A
0008B750 E701                       	dc.b	smpsNoAttack, $01
0008B752 E106                       	smpsAlterNote       $06
0008B754 E701                       	dc.b	smpsNoAttack, $01
0008B756 E10A                       	smpsAlterNote       $0A
0008B758 E701                       	dc.b	smpsNoAttack, $01
0008B75A E110                       	smpsAlterNote       $10
0008B75C E701                       	dc.b	smpsNoAttack, $01
0008B75E E111                       	smpsAlterNote       $11
0008B760 E701                       	dc.b	smpsNoAttack, $01
0008B762 E10D                       	smpsAlterNote       $0D
0008B764 E701                       	dc.b	smpsNoAttack, $01
0008B766 E107                       	smpsAlterNote       $07
0008B768 E701                       	dc.b	smpsNoAttack, $01
0008B76A E10D                       	smpsAlterNote       $0D
0008B76C C207                       	dc.b	nF5, $07
0008B76E E10C                       	smpsAlterNote       $0C
0008B770 C10D                       	dc.b	nE5, $0D
0008B772 E109                       	smpsAlterNote       $09
0008B774 E701                       	dc.b	smpsNoAttack, $01
0008B776 E106                       	smpsAlterNote       $06
0008B778 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B77C E10C                       	smpsAlterNote       $0C
0008B77E E701                       	dc.b	smpsNoAttack, $01
0008B780 E110                       	smpsAlterNote       $10
0008B782 E701                       	dc.b	smpsNoAttack, $01
0008B784 E10F                       	smpsAlterNote       $0F
0008B786 E701                       	dc.b	smpsNoAttack, $01
0008B788 E109                       	smpsAlterNote       $09
0008B78A E701                       	dc.b	smpsNoAttack, $01
0008B78C E105                       	smpsAlterNote       $05
0008B78E E701                       	dc.b	smpsNoAttack, $01
0008B790 E109                       	smpsAlterNote       $09
0008B792 E701                       	dc.b	smpsNoAttack, $01
0008B794 E10C                       	smpsAlterNote       $0C
0008B796 E701                       	dc.b	smpsNoAttack, $01
0008B798 E110                       	smpsAlterNote       $10
0008B79A E701                       	dc.b	smpsNoAttack, $01
0008B79C E10B                       	smpsAlterNote       $0B
0008B79E BF0D                       	dc.b	nD5, $0D
0008B7A0 E108                       	smpsAlterNote       $08
0008B7A2 E701                       	dc.b	smpsNoAttack, $01
0008B7A4 E105                       	smpsAlterNote       $05
0008B7A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7AA E10B                       	smpsAlterNote       $0B
0008B7AC E701                       	dc.b	smpsNoAttack, $01
0008B7AE E10F                       	smpsAlterNote       $0F
0008B7B0 E701                       	dc.b	smpsNoAttack, $01
0008B7B2 E10E                       	smpsAlterNote       $0E
0008B7B4 E701                       	dc.b	smpsNoAttack, $01
0008B7B6 E108                       	smpsAlterNote       $08
0008B7B8 E701                       	dc.b	smpsNoAttack, $01
0008B7BA E104                       	smpsAlterNote       $04
0008B7BC E701                       	dc.b	smpsNoAttack, $01
0008B7BE E108                       	smpsAlterNote       $08
0008B7C0 E701                       	dc.b	smpsNoAttack, $01
0008B7C2 E10E                       	smpsAlterNote       $0E
0008B7C4 E701                       	dc.b	smpsNoAttack, $01
0008B7C6 E10F                       	smpsAlterNote       $0F
0008B7C8 E701                       	dc.b	smpsNoAttack, $01
0008B7CA E10B                       	smpsAlterNote       $0B
0008B7CC E701                       	dc.b	smpsNoAttack, $01
0008B7CE E105                       	smpsAlterNote       $05
0008B7D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7D4 E108                       	smpsAlterNote       $08
0008B7D6 E701                       	dc.b	smpsNoAttack, $01
0008B7D8 E10E                       	smpsAlterNote       $0E
0008B7DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7DE E108                       	smpsAlterNote       $08
0008B7E0 E701                       	dc.b	smpsNoAttack, $01
0008B7E2 E105                       	smpsAlterNote       $05
0008B7E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7E8 E10B                       	smpsAlterNote       $0B
0008B7EA E701                       	dc.b	smpsNoAttack, $01
0008B7EC E10F                       	smpsAlterNote       $0F
0008B7EE E701                       	dc.b	smpsNoAttack, $01
0008B7F0 E10E                       	smpsAlterNote       $0E
0008B7F2 E701                       	dc.b	smpsNoAttack, $01
0008B7F4 E108                       	smpsAlterNote       $08
0008B7F6 E701                       	dc.b	smpsNoAttack, $01
0008B7F8 E104                       	smpsAlterNote       $04
0008B7FA E701                       	dc.b	smpsNoAttack, $01
0008B7FC E108                       	smpsAlterNote       $08
0008B7FE E701                       	dc.b	smpsNoAttack, $01
0008B800 E10B                       	smpsAlterNote       $0B
0008B802 E701                       	dc.b	smpsNoAttack, $01
0008B804 E10F                       	smpsAlterNote       $0F
0008B806 E701                       	dc.b	smpsNoAttack, $01
0008B808 E10B                       	smpsAlterNote       $0B
0008B80A E701                       	dc.b	smpsNoAttack, $01
0008B80C E105                       	smpsAlterNote       $05
0008B80E E701                       	dc.b	smpsNoAttack, $01
0008B810 E104                       	smpsAlterNote       $04
0008B812 E701                       	dc.b	smpsNoAttack, $01
0008B814 E108                       	smpsAlterNote       $08
0008B816 E701                       	dc.b	smpsNoAttack, $01
0008B818 E10E                       	smpsAlterNote       $0E
0008B81A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B81E E10B                       	smpsAlterNote       $0B
0008B820 E701                       	dc.b	smpsNoAttack, $01
0008B822 E105                       	smpsAlterNote       $05
0008B824 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B828 E10B                       	smpsAlterNote       $0B
0008B82A E701                       	dc.b	smpsNoAttack, $01
0008B82C E10E                       	smpsAlterNote       $0E
0008B82E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B832 E108                       	smpsAlterNote       $08
0008B834 E701                       	dc.b	smpsNoAttack, $01
0008B836 E105                       	smpsAlterNote       $05
0008B838 8001                       	dc.b	nRst, $01
0008B83C E601                       	smpsAlterVol        $01
0008B83E E10B                       	smpsAlterNote       $0B
0008B840 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008B84C 8004                       	dc.b	nRst, $04
0008B850 E6FF                       	smpsAlterVol        $FF
0008B852 E10D                       	smpsAlterNote       $0D
0008B854 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008B85C E10C                       	smpsAlterNote       $0C
0008B85E E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008B863 E10D                       	smpsAlterNote       $0D
0008B865 B60D                       	dc.b	nF4, $0D
0008B867 E10A                       	smpsAlterNote       $0A
0008B869 E701                       	dc.b	smpsNoAttack, $01
0008B86B E106                       	smpsAlterNote       $06
0008B86D E701                       	dc.b	smpsNoAttack, $01
0008B86F E10A                       	smpsAlterNote       $0A
0008B871 E701                       	dc.b	smpsNoAttack, $01
0008B873 E110                       	smpsAlterNote       $10
0008B875 E701                       	dc.b	smpsNoAttack, $01
0008B877 E111                       	smpsAlterNote       $11
0008B879 E701                       	dc.b	smpsNoAttack, $01
0008B87B E10D                       	smpsAlterNote       $0D
0008B87D E701                       	dc.b	smpsNoAttack, $01
0008B87F E107                       	smpsAlterNote       $07
0008B881 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B885 E10A                       	smpsAlterNote       $0A
0008B887 E701                       	dc.b	smpsNoAttack, $01
0008B889 E110                       	smpsAlterNote       $10
0008B88B E701                       	dc.b	smpsNoAttack, $01
0008B88D E111                       	smpsAlterNote       $11
0008B88F 8001                       	dc.b	nRst, $01
0008B891 E10D                       	smpsAlterNote       $0D
0008B893 B80D                       	dc.b	nG4, $0D
0008B895 E10A                       	smpsAlterNote       $0A
0008B897 E701                       	dc.b	smpsNoAttack, $01
0008B899 E106                       	smpsAlterNote       $06
0008B89B E701                       	dc.b	smpsNoAttack, $01
0008B89D E10A                       	smpsAlterNote       $0A
0008B89F E701                       	dc.b	smpsNoAttack, $01
0008B8A1 E110                       	smpsAlterNote       $10
0008B8A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8A7 E10D                       	smpsAlterNote       $0D
0008B8A9 E701                       	dc.b	smpsNoAttack, $01
0008B8AB E107                       	smpsAlterNote       $07
0008B8AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8B1 E10D                       	smpsAlterNote       $0D
0008B8B3 E701                       	dc.b	smpsNoAttack, $01
0008B8B5 E110                       	smpsAlterNote       $10
0008B8B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8BB E10A                       	smpsAlterNote       $0A
0008B8BD E701                       	dc.b	smpsNoAttack, $01
0008B8BF E106                       	smpsAlterNote       $06
0008B8C1 E701                       	dc.b	smpsNoAttack, $01
0008B8C3 E107                       	smpsAlterNote       $07
0008B8C5 E701                       	dc.b	smpsNoAttack, $01
0008B8C7 E10D                       	smpsAlterNote       $0D
0008B8C9 E701                       	dc.b	smpsNoAttack, $01
0008B8CB E111                       	smpsAlterNote       $11
0008B8CD E701                       	dc.b	smpsNoAttack, $01
0008B8CF E10D                       	smpsAlterNote       $0D
0008B8D1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B8D5 E10F                       	smpsAlterNote       $0F
0008B8D7 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008B8DB E110                       	smpsAlterNote       $10
0008B8DD BB03                       	dc.b	nBb4, $03
0008B8DF E10F                       	smpsAlterNote       $0F
0008B8E1 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008B8E7 E110                       	smpsAlterNote       $10
0008B8E9 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008B8ED E10F                       	smpsAlterNote       $0F
0008B8EF C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008B8F5 E110                       	smpsAlterNote       $10
0008B8F7 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008B8FB E10F                       	smpsAlterNote       $0F
0008B8FD D20D                       	dc.b	nA6, $0D
0008B8FF E10C                       	smpsAlterNote       $0C
0008B901 E701                       	dc.b	smpsNoAttack, $01
0008B903 E108                       	smpsAlterNote       $08
0008B905 E701                       	dc.b	smpsNoAttack, $01
0008B907 E10C                       	smpsAlterNote       $0C
0008B909 E701                       	dc.b	smpsNoAttack, $01
0008B90B E10F                       	smpsAlterNote       $0F
0008B90D E701                       	dc.b	smpsNoAttack, $01
0008B90F E113                       	smpsAlterNote       $13
0008B911 E701                       	dc.b	smpsNoAttack, $01
0008B913 E10F                       	smpsAlterNote       $0F
0008B915 E701                       	dc.b	smpsNoAttack, $01
0008B917 E109                       	smpsAlterNote       $09
0008B919 E701                       	dc.b	smpsNoAttack, $01
0008B91B E108                       	smpsAlterNote       $08
0008B91D E701                       	dc.b	smpsNoAttack, $01
0008B91F E10C                       	smpsAlterNote       $0C
0008B921 E701                       	dc.b	smpsNoAttack, $01
0008B923 E112                       	smpsAlterNote       $12
0008B925 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B929 E10F                       	smpsAlterNote       $0F
0008B92B E701                       	dc.b	smpsNoAttack, $01
0008B92D E109                       	smpsAlterNote       $09
0008B92F E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008B935 E10D                       	smpsAlterNote       $0D
0008B937 CE07                       	dc.b	nF6, $07
0008B939 E10C                       	smpsAlterNote       $0C
0008B93B CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008B93F E10D                       	smpsAlterNote       $0D
0008B941 CE03                       	dc.b	nF6, $03
0008B943 E10C                       	smpsAlterNote       $0C
0008B945 CC0D                       	dc.b	nEb6, $0D
0008B947 E109                       	smpsAlterNote       $09
0008B949 E701                       	dc.b	smpsNoAttack, $01
0008B94B E106                       	smpsAlterNote       $06
0008B94D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B951 E10C                       	smpsAlterNote       $0C
0008B953 E701                       	dc.b	smpsNoAttack, $01
0008B955 E110                       	smpsAlterNote       $10
0008B957 E701                       	dc.b	smpsNoAttack, $01
0008B959 E10F                       	smpsAlterNote       $0F
0008B95B E701                       	dc.b	smpsNoAttack, $01
0008B95D E109                       	smpsAlterNote       $09
0008B95F E701                       	dc.b	smpsNoAttack, $01
0008B961 E105                       	smpsAlterNote       $05
0008B963 E701                       	dc.b	smpsNoAttack, $01
0008B965 E109                       	smpsAlterNote       $09
0008B967 E701                       	dc.b	smpsNoAttack, $01
0008B969 E10C                       	smpsAlterNote       $0C
0008B96B E701                       	dc.b	smpsNoAttack, $01
0008B96D E110                       	smpsAlterNote       $10
0008B96F E701                       	dc.b	smpsNoAttack, $01
0008B971 E10C                       	smpsAlterNote       $0C
0008B973 E701                       	dc.b	smpsNoAttack, $01
0008B975 E106                       	smpsAlterNote       $06
0008B977 E701                       	dc.b	smpsNoAttack, $01
0008B979 E105                       	smpsAlterNote       $05
0008B97B E701                       	dc.b	smpsNoAttack, $01
0008B97D E109                       	smpsAlterNote       $09
0008B97F E701                       	dc.b	smpsNoAttack, $01
0008B981 E10F                       	smpsAlterNote       $0F
0008B983 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B987 E10C                       	smpsAlterNote       $0C
0008B989 E701                       	dc.b	smpsNoAttack, $01
0008B98B E10B                       	smpsAlterNote       $0B
0008B98D CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008B997 E10F                       	smpsAlterNote       $0F
0008B999 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008B9A3 E10D                       	smpsAlterNote       $0D
0008B9A5 C203                       	dc.b	nF5, $03
0008B9A7 E10C                       	smpsAlterNote       $0C
0008B9A9 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008B9AD E10D                       	smpsAlterNote       $0D
0008B9AF C20D                       	dc.b	nF5, $0D
0008B9B1 E10C                       	smpsAlterNote       $0C
0008B9B3 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008B9B7 E10B                       	smpsAlterNote       $0B
0008B9B9 BF0D                       	dc.b	nD5, $0D
0008B9BB E108                       	smpsAlterNote       $08
0008B9BD E701                       	dc.b	smpsNoAttack, $01
0008B9BF E104                       	smpsAlterNote       $04
0008B9C1 E701                       	dc.b	smpsNoAttack, $01
0008B9C3 E108                       	smpsAlterNote       $08
0008B9C5 E701                       	dc.b	smpsNoAttack, $01
0008B9C7 E10E                       	smpsAlterNote       $0E
0008B9C9 E701                       	dc.b	smpsNoAttack, $01
0008B9CB E10F                       	smpsAlterNote       $0F
0008B9CD E701                       	dc.b	smpsNoAttack, $01
0008B9CF E10B                       	smpsAlterNote       $0B
0008B9D1 E701                       	dc.b	smpsNoAttack, $01
0008B9D3 E105                       	smpsAlterNote       $05
0008B9D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9D9 E108                       	smpsAlterNote       $08
0008B9DB E701                       	dc.b	smpsNoAttack, $01
0008B9DD E10E                       	smpsAlterNote       $0E
0008B9DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9E3 E108                       	smpsAlterNote       $08
0008B9E5 E701                       	dc.b	smpsNoAttack, $01
0008B9E7 E105                       	smpsAlterNote       $05
0008B9E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9ED E10B                       	smpsAlterNote       $0B
0008B9EF E701                       	dc.b	smpsNoAttack, $01
0008B9F1 E10F                       	smpsAlterNote       $0F
0008B9F3 E701                       	dc.b	smpsNoAttack, $01
0008B9F5 E10E                       	smpsAlterNote       $0E
0008B9F7 E701                       	dc.b	smpsNoAttack, $01
0008B9F9 E108                       	smpsAlterNote       $08
0008B9FB E701                       	dc.b	smpsNoAttack, $01
0008B9FD E104                       	smpsAlterNote       $04
0008B9FF E701                       	dc.b	smpsNoAttack, $01
0008BA01 E108                       	smpsAlterNote       $08
0008BA03 E701                       	dc.b	smpsNoAttack, $01
0008BA05 E10B                       	smpsAlterNote       $0B
0008BA07 E701                       	dc.b	smpsNoAttack, $01
0008BA09 E10F                       	smpsAlterNote       $0F
0008BA0B E701                       	dc.b	smpsNoAttack, $01
0008BA0D E10B                       	smpsAlterNote       $0B
0008BA0F E701                       	dc.b	smpsNoAttack, $01
0008BA11 E105                       	smpsAlterNote       $05
0008BA13 E701                       	dc.b	smpsNoAttack, $01
0008BA15 E104                       	smpsAlterNote       $04
0008BA17 E701                       	dc.b	smpsNoAttack, $01
0008BA19 E108                       	smpsAlterNote       $08
0008BA1B E701                       	dc.b	smpsNoAttack, $01
0008BA1D E10E                       	smpsAlterNote       $0E
0008BA1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA23 E10B                       	smpsAlterNote       $0B
0008BA25 E701                       	dc.b	smpsNoAttack, $01
0008BA27 E105                       	smpsAlterNote       $05
0008BA29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA2D E10B                       	smpsAlterNote       $0B
0008BA2F E701                       	dc.b	smpsNoAttack, $01
0008BA31 E10E                       	smpsAlterNote       $0E
0008BA33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA37 E108                       	smpsAlterNote       $08
0008BA39 E701                       	dc.b	smpsNoAttack, $01
0008BA3B E104                       	smpsAlterNote       $04
0008BA3D E701                       	dc.b	smpsNoAttack, $01
0008BA3F E105                       	smpsAlterNote       $05
0008BA41 E701                       	dc.b	smpsNoAttack, $01
0008BA43 E10B                       	smpsAlterNote       $0B
0008BA45 E701                       	dc.b	smpsNoAttack, $01
0008BA47 E10F                       	smpsAlterNote       $0F
0008BA49 E701                       	dc.b	smpsNoAttack, $01
0008BA4B E10B                       	smpsAlterNote       $0B
0008BA4D E701                       	dc.b	smpsNoAttack, $01
0008BA4F E108                       	smpsAlterNote       $08
0008BA51 E701                       	dc.b	smpsNoAttack, $01
0008BA53 E104                       	smpsAlterNote       $04
0008BA55 E701                       	dc.b	smpsNoAttack, $01
0008BA57 E108                       	smpsAlterNote       $08
0008BA59 E701                       	dc.b	smpsNoAttack, $01
0008BA5B E10E                       	smpsAlterNote       $0E
0008BA5D E701                       	dc.b	smpsNoAttack, $01
0008BA5F E10F                       	smpsAlterNote       $0F
0008BA61 E701                       	dc.b	smpsNoAttack, $01
0008BA63 E10B                       	smpsAlterNote       $0B
0008BA65 E701                       	dc.b	smpsNoAttack, $01
0008BA67 E105                       	smpsAlterNote       $05
0008BA69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA6D E108                       	smpsAlterNote       $08
0008BA6F E701                       	dc.b	smpsNoAttack, $01
0008BA71 E10E                       	smpsAlterNote       $0E
0008BA73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA77 E108                       	smpsAlterNote       $08
0008BA79 E701                       	dc.b	smpsNoAttack, $01
0008BA7B E105                       	smpsAlterNote       $05
0008BA7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA81 E10B                       	smpsAlterNote       $0B
0008BA83 E701                       	dc.b	smpsNoAttack, $01
0008BA85 E10F                       	smpsAlterNote       $0F
0008BA87 E701                       	dc.b	smpsNoAttack, $01
0008BA89 E10E                       	smpsAlterNote       $0E
0008BA8B E701                       	dc.b	smpsNoAttack, $01
0008BA8D E108                       	smpsAlterNote       $08
0008BA8F E701                       	dc.b	smpsNoAttack, $01
0008BA91 E104                       	smpsAlterNote       $04
0008BA93 E701                       	dc.b	smpsNoAttack, $01
0008BA95 E108                       	smpsAlterNote       $08
0008BA97 E701                       	dc.b	smpsNoAttack, $01
0008BA99 E10B                       	smpsAlterNote       $0B
0008BA9B E701                       	dc.b	smpsNoAttack, $01
0008BA9D E10F                       	smpsAlterNote       $0F
0008BA9F E701                       	dc.b	smpsNoAttack, $01
0008BAA1 E10B                       	smpsAlterNote       $0B
0008BAA3 E701                       	dc.b	smpsNoAttack, $01
0008BAA5 E105                       	smpsAlterNote       $05
0008BAA7 E701                       	dc.b	smpsNoAttack, $01
0008BAA9 E104                       	smpsAlterNote       $04
0008BAAB E701                       	dc.b	smpsNoAttack, $01
0008BAAD E105                       	smpsAlterNote       $05
0008BAAF 8001                       	dc.b	nRst, $01
0008BAB1 E10D                       	smpsAlterNote       $0D
0008BAB3 C20D                       	dc.b	nF5, $0D
0008BAB5 E107                       	smpsAlterNote       $07
0008BAB7 E701                       	dc.b	smpsNoAttack, $01
0008BAB9 E106                       	smpsAlterNote       $06
0008BABB E701                       	dc.b	smpsNoAttack, $01
0008BABD E10A                       	smpsAlterNote       $0A
0008BABF E701                       	dc.b	smpsNoAttack, $01
0008BAC1 E110                       	smpsAlterNote       $10
0008BAC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BAC7 E10D                       	smpsAlterNote       $0D
0008BAC9 E701                       	dc.b	smpsNoAttack, $01
0008BACB E107                       	smpsAlterNote       $07
0008BACD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BAD1 E10D                       	smpsAlterNote       $0D
0008BAD3 E701                       	dc.b	smpsNoAttack, $01
0008BAD5 E110                       	smpsAlterNote       $10
0008BAD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BADB E10A                       	smpsAlterNote       $0A
0008BADD E701                       	dc.b	smpsNoAttack, $01
0008BADF E106                       	smpsAlterNote       $06
0008BAE1 E701                       	dc.b	smpsNoAttack, $01
0008BAE3 E107                       	smpsAlterNote       $07
0008BAE5 E701                       	dc.b	smpsNoAttack, $01
0008BAE7 E10D                       	smpsAlterNote       $0D
0008BAE9 E701                       	dc.b	smpsNoAttack, $01
0008BAEB E111                       	smpsAlterNote       $11
0008BAED E701                       	dc.b	smpsNoAttack, $01
0008BAEF E10D                       	smpsAlterNote       $0D
0008BAF1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BAF5 E10C                       	smpsAlterNote       $0C
0008BAF7 C10D                       	dc.b	nE5, $0D
0008BAF9 E10D                       	smpsAlterNote       $0D
0008BAFB C20A                       	dc.b	nF5, $0A
0008BAFD E10C                       	smpsAlterNote       $0C
0008BAFF C10E                       	dc.b	nE5, $0E
0008BB01 E106                       	smpsAlterNote       $06
0008BB03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB07 E10C                       	smpsAlterNote       $0C
0008BB09 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BB0D E10B                       	smpsAlterNote       $0B
0008BB0F BF0D                       	dc.b	nD5, $0D
0008BB11 E10C                       	smpsAlterNote       $0C
0008BB13 C107                       	dc.b	nE5, $07
0008BB15 E10D                       	smpsAlterNote       $0D
0008BB17 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008BB21 E110                       	smpsAlterNote       $10
0008BB23 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008BB29 E10F                       	smpsAlterNote       $0F
0008BB2B C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008BB33 E10D                       	smpsAlterNote       $0D
0008BB35 D003                       	dc.b	nG6, $03
0008BB39 E0C0                       	smpsPan             panCenter, $00
0008BB3B E6FF                       	smpsAlterVol        $FF
0008BB3D AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008BB49 8001                       	dc.b	nRst, $01
0008BB4B E10C                       	smpsAlterNote       $0C
0008BB4D A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008BB57 E604                       	smpsAlterVol        $04
0008BB59 E10B                       	smpsAlterNote       $0B
0008BB5B B306 8001                  	dc.b	nD4, $06, nRst, $01
0008BB5F E10F                       	smpsAlterNote       $0F
0008BB61 AE03                       	dc.b	nA3, $03
0008BB63 E10D                       	smpsAlterNote       $0D
0008BB65 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008BB69 E10C                       	smpsAlterNote       $0C
0008BB6B B506 8001                  	dc.b	nE4, $06, nRst, $01
0008BB6F E10B                       	smpsAlterNote       $0B
0008BB71 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008BB75 E10A                       	smpsAlterNote       $0A
0008BB77 B103                       	dc.b	nC4, $03
0008BB79 E110                       	smpsAlterNote       $10
0008BB7B AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008BB7F E10F                       	smpsAlterNote       $0F
0008BB81 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008BB85 E080                       	smpsPan             panLeft, $00
0008BB87 01                         	dc.b	$01
0008BB8A E6FB                       	smpsAlterVol        $FB
0008BB8C E1E4                       	smpsAlterNote       $E4
0008BB8E C501                       	dc.b	nAb5, $01
0008BB90 E1F4                       	smpsAlterNote       $F4
0008BB92 E701                       	dc.b	smpsNoAttack, $01
0008BB94 E104                       	smpsAlterNote       $04
0008BB96 E701                       	dc.b	smpsNoAttack, $01
0008BB98 E114                       	smpsAlterNote       $14
0008BB9A E701                       	dc.b	smpsNoAttack, $01
0008BB9C E11C                       	smpsAlterNote       $1C
0008BB9E E701                       	dc.b	smpsNoAttack, $01
0008BBA0 E1EF                       	smpsAlterNote       $EF
0008BBA2 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008BBA5 E1FF                       	smpsAlterNote       $FF
0008BBA7 E701                       	dc.b	smpsNoAttack, $01
0008BBA9 E10F                       	smpsAlterNote       $0F
0008BBAB C606                       	dc.b	nA5, $06
0008BBAD E109                       	smpsAlterNote       $09
0008BBAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBB3 E10F                       	smpsAlterNote       $0F
0008BBB5 E701                       	dc.b	smpsNoAttack, $01
0008BBB7 E112                       	smpsAlterNote       $12
0008BBB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBBD E10C                       	smpsAlterNote       $0C
0008BBBF E701                       	dc.b	smpsNoAttack, $01
0008BBC1 E108                       	smpsAlterNote       $08
0008BBC3 E701                       	dc.b	smpsNoAttack, $01
0008BBC5 E109                       	smpsAlterNote       $09
0008BBC7 E701                       	dc.b	smpsNoAttack, $01
0008BBC9 E10F                       	smpsAlterNote       $0F
0008BBCB E701                       	dc.b	smpsNoAttack, $01
0008BBCD E113                       	smpsAlterNote       $13
0008BBCF E701                       	dc.b	smpsNoAttack, $01
0008BBD1 E10F                       	smpsAlterNote       $0F
0008BBD3 E701                       	dc.b	smpsNoAttack, $01
0008BBD5 E10C                       	smpsAlterNote       $0C
0008BBD7 E701                       	dc.b	smpsNoAttack, $01
0008BBD9 E108                       	smpsAlterNote       $08
0008BBDB E701                       	dc.b	smpsNoAttack, $01
0008BBDD E10C                       	smpsAlterNote       $0C
0008BBDF E701                       	dc.b	smpsNoAttack, $01
0008BBE1 E112                       	smpsAlterNote       $12
0008BBE3 E701                       	dc.b	smpsNoAttack, $01
0008BBE5 E113                       	smpsAlterNote       $13
0008BBE7 E701                       	dc.b	smpsNoAttack, $01
0008BBE9 E10F                       	smpsAlterNote       $0F
0008BBEB E701                       	dc.b	smpsNoAttack, $01
0008BBED E109                       	smpsAlterNote       $09
0008BBEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBF3 E10C                       	smpsAlterNote       $0C
0008BBF5 E701                       	dc.b	smpsNoAttack, $01
0008BBF7 E112                       	smpsAlterNote       $12
0008BBF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBFD E10C                       	smpsAlterNote       $0C
0008BBFF E701                       	dc.b	smpsNoAttack, $01
0008BC01 E109                       	smpsAlterNote       $09
0008BC03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC07 E10F                       	smpsAlterNote       $0F
0008BC09 E701                       	dc.b	smpsNoAttack, $01
0008BC0B E113                       	smpsAlterNote       $13
0008BC0D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BC11 E10D                       	smpsAlterNote       $0D
0008BC13 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008BC19 E10C                       	smpsAlterNote       $0C
0008BC1B C102 8001                  	dc.b	nE5, $02, nRst, $01
0008BC1F E10D                       	smpsAlterNote       $0D
0008BC21 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008BC25 E10C                       	smpsAlterNote       $0C
0008BC27 C102                       	dc.b	nE5, $02
0008BC29 E10B                       	smpsAlterNote       $0B
0008BC2B BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008BC2F E10C                       	smpsAlterNote       $0C
0008BC31 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008BC35 E10B                       	smpsAlterNote       $0B
0008BC37 BF02                       	dc.b	nD5, $02
0008BC39 E10A                       	smpsAlterNote       $0A
0008BC3B BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008BC45 E110                       	smpsAlterNote       $10
0008BC47 BB02                       	dc.b	nBb4, $02
0008BC49 E10A                       	smpsAlterNote       $0A
0008BC4B BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008BC4F E110                       	smpsAlterNote       $10
0008BC51 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008BC55 E10F                       	smpsAlterNote       $0F
0008BC57 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008BC5B E110                       	smpsAlterNote       $10
0008BC5D BB02                       	dc.b	nBb4, $02
0008BC5F E10F                       	smpsAlterNote       $0F
0008BC61 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008BC6B E10C                       	smpsAlterNote       $0C
0008BC6D B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008BC75 E10B                       	smpsAlterNote       $0B
0008BC77 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008BC7B E10F                       	smpsAlterNote       $0F
0008BC7D BA02                       	dc.b	nA4, $02
0008BC81 E0C0                       	smpsPan             panCenter, $00
0008BC83 E601                       	smpsAlterVol        $01
0008BC85 E109                       	smpsAlterNote       $09
0008BC87 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008BC93 E108                       	smpsAlterNote       $08
0008BC95 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008BC9B E107                       	smpsAlterNote       $07
0008BC9D B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008BCA3 E109                       	smpsAlterNote       $09
0008BCA5 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008BCA9 E108                       	smpsAlterNote       $08
0008BCAB B506 8001                  	dc.b	nE4, $06, nRst, $01
0008BCAF E107                       	smpsAlterNote       $07
0008BCB1 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008BCB5 E106                       	smpsAlterNote       $06
0008BCB7 B103                       	dc.b	nC4, $03
0008BCB9 E10C                       	smpsAlterNote       $0C
0008BCBB AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008BCC1 E080                       	smpsPan             panLeft, $00
0008BCC3 07                         	dc.b	$07
0008BCC4 E6FE                       	smpsAlterVol        $FE
0008BCC6 E10B                       	smpsAlterNote       $0B
0008BCC8 B20D                       	dc.b	nCs4, $0D
0008BCCA E105                       	smpsAlterNote       $05
0008BCCC E701                       	dc.b	smpsNoAttack, $01
0008BCCE E104                       	smpsAlterNote       $04
0008BCD0 E701                       	dc.b	smpsNoAttack, $01
0008BCD2 E108                       	smpsAlterNote       $08
0008BCD4 E701                       	dc.b	smpsNoAttack, $01
0008BCD6 E10E                       	smpsAlterNote       $0E
0008BCD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BCDC E10B                       	smpsAlterNote       $0B
0008BCDE E701                       	dc.b	smpsNoAttack, $01
0008BCE0 E105                       	smpsAlterNote       $05
0008BCE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BCE6 E10B                       	smpsAlterNote       $0B
0008BCE8 E701                       	dc.b	smpsNoAttack, $01
0008BCEA E10E                       	smpsAlterNote       $0E
0008BCEC E701                       	dc.b	smpsNoAttack, $01
0008BCEE E10F                       	smpsAlterNote       $0F
0008BCF0 8001                       	dc.b	nRst, $01
0008BCF2 E10B                       	smpsAlterNote       $0B
0008BCF4 B30D                       	dc.b	nD4, $0D
0008BCF6 E105                       	smpsAlterNote       $05
0008BCF8 E701                       	dc.b	smpsNoAttack, $01
0008BCFA E104                       	smpsAlterNote       $04
0008BCFC E701                       	dc.b	smpsNoAttack, $01
0008BCFE E108                       	smpsAlterNote       $08
0008BD00 E701                       	dc.b	smpsNoAttack, $01
0008BD02 E10E                       	smpsAlterNote       $0E
0008BD04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD08 E10B                       	smpsAlterNote       $0B
0008BD0A E701                       	dc.b	smpsNoAttack, $01
0008BD0C E105                       	smpsAlterNote       $05
0008BD0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD12 E10B                       	smpsAlterNote       $0B
0008BD14 E701                       	dc.b	smpsNoAttack, $01
0008BD16 E10E                       	smpsAlterNote       $0E
0008BD18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD1C E108                       	smpsAlterNote       $08
0008BD1E E701                       	dc.b	smpsNoAttack, $01
0008BD20 E104                       	smpsAlterNote       $04
0008BD22 E701                       	dc.b	smpsNoAttack, $01
0008BD24 E105                       	smpsAlterNote       $05
0008BD26 E701                       	dc.b	smpsNoAttack, $01
0008BD28 E10B                       	smpsAlterNote       $0B
0008BD2A E701                       	dc.b	smpsNoAttack, $01
0008BD2C E10F                       	smpsAlterNote       $0F
0008BD2E E701                       	dc.b	smpsNoAttack, $01
0008BD30 E10B                       	smpsAlterNote       $0B
0008BD32 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BD36 E10C                       	smpsAlterNote       $0C
0008BD38 B50D                       	dc.b	nE4, $0D
0008BD3A E106                       	smpsAlterNote       $06
0008BD3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD40 E10C                       	smpsAlterNote       $0C
0008BD42 E701                       	dc.b	smpsNoAttack, $01
0008BD44 E10F                       	smpsAlterNote       $0F
0008BD46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD4A E109                       	smpsAlterNote       $09
0008BD4C E701                       	dc.b	smpsNoAttack, $01
0008BD4E E105                       	smpsAlterNote       $05
0008BD50 E701                       	dc.b	smpsNoAttack, $01
0008BD52 E106                       	smpsAlterNote       $06
0008BD54 E701                       	dc.b	smpsNoAttack, $01
0008BD56 E10C                       	smpsAlterNote       $0C
0008BD58 E701                       	dc.b	smpsNoAttack, $01
0008BD5A E110                       	smpsAlterNote       $10
0008BD5C E701                       	dc.b	smpsNoAttack, $01
0008BD5E E10B                       	smpsAlterNote       $0B
0008BD60 B30E                       	dc.b	nD4, $0E
0008BD62 E105                       	smpsAlterNote       $05
0008BD64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD68 E10B                       	smpsAlterNote       $0B
0008BD6A E701                       	dc.b	smpsNoAttack, $01
0008BD6C E10E                       	smpsAlterNote       $0E
0008BD6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD72 E108                       	smpsAlterNote       $08
0008BD74 E701                       	dc.b	smpsNoAttack, $01
0008BD76 E104                       	smpsAlterNote       $04
0008BD78 E701                       	dc.b	smpsNoAttack, $01
0008BD7A E105                       	smpsAlterNote       $05
0008BD7C E701                       	dc.b	smpsNoAttack, $01
0008BD7E E10B                       	smpsAlterNote       $0B
0008BD80 E701                       	dc.b	smpsNoAttack, $01
0008BD82 E10F                       	smpsAlterNote       $0F
0008BD84 E701                       	dc.b	smpsNoAttack, $01
0008BD86 E10B                       	smpsAlterNote       $0B
0008BD88 E701                       	dc.b	smpsNoAttack, $01
0008BD8A E108                       	smpsAlterNote       $08
0008BD8C E701                       	dc.b	smpsNoAttack, $01
0008BD8E E104                       	smpsAlterNote       $04
0008BD90 E701                       	dc.b	smpsNoAttack, $01
0008BD92 E108                       	smpsAlterNote       $08
0008BD94 E701                       	dc.b	smpsNoAttack, $01
0008BD96 E10E                       	smpsAlterNote       $0E
0008BD98 E701                       	dc.b	smpsNoAttack, $01
0008BD9A E10F                       	smpsAlterNote       $0F
0008BD9C E701                       	dc.b	smpsNoAttack, $01
0008BD9E E10B                       	smpsAlterNote       $0B
0008BDA0 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008BDA4 E108                       	smpsAlterNote       $08
0008BDA6 E701                       	dc.b	smpsNoAttack, $01
0008BDA8 E105                       	smpsAlterNote       $05
0008BDAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDAE E10B                       	smpsAlterNote       $0B
0008BDB0 E701                       	dc.b	smpsNoAttack, $01
0008BDB2 E10F                       	smpsAlterNote       $0F
0008BDB4 E701                       	dc.b	smpsNoAttack, $01
0008BDB6 E10E                       	smpsAlterNote       $0E
0008BDB8 E701                       	dc.b	smpsNoAttack, $01
0008BDBA E108                       	smpsAlterNote       $08
0008BDBC E701                       	dc.b	smpsNoAttack, $01
0008BDBE E104                       	smpsAlterNote       $04
0008BDC0 E701                       	dc.b	smpsNoAttack, $01
0008BDC2 E108                       	smpsAlterNote       $08
0008BDC4 E701                       	dc.b	smpsNoAttack, $01
0008BDC6 E10B                       	smpsAlterNote       $0B
0008BDC8 E701                       	dc.b	smpsNoAttack, $01
0008BDCA E10F                       	smpsAlterNote       $0F
0008BDCC E701                       	dc.b	smpsNoAttack, $01
0008BDCE E10B                       	smpsAlterNote       $0B
0008BDD0 B30D                       	dc.b	nD4, $0D
0008BDD2 E108                       	smpsAlterNote       $08
0008BDD4 E701                       	dc.b	smpsNoAttack, $01
0008BDD6 E105                       	smpsAlterNote       $05
0008BDD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDDC E10B                       	smpsAlterNote       $0B
0008BDDE E701                       	dc.b	smpsNoAttack, $01
0008BDE0 E10F                       	smpsAlterNote       $0F
0008BDE2 E701                       	dc.b	smpsNoAttack, $01
0008BDE4 E10E                       	smpsAlterNote       $0E
0008BDE6 E701                       	dc.b	smpsNoAttack, $01
0008BDE8 E108                       	smpsAlterNote       $08
0008BDEA E701                       	dc.b	smpsNoAttack, $01
0008BDEC E104                       	smpsAlterNote       $04
0008BDEE E701                       	dc.b	smpsNoAttack, $01
0008BDF0 E108                       	smpsAlterNote       $08
0008BDF2 E701                       	dc.b	smpsNoAttack, $01
0008BDF4 E10B                       	smpsAlterNote       $0B
0008BDF6 E701                       	dc.b	smpsNoAttack, $01
0008BDF8 E10F                       	smpsAlterNote       $0F
0008BDFA E701                       	dc.b	smpsNoAttack, $01
0008BDFC E10B                       	smpsAlterNote       $0B
0008BDFE E701                       	dc.b	smpsNoAttack, $01
0008BE00 E105                       	smpsAlterNote       $05
0008BE02 E701                       	dc.b	smpsNoAttack, $01
0008BE04 E104                       	smpsAlterNote       $04
0008BE06 E701                       	dc.b	smpsNoAttack, $01
0008BE08 E108                       	smpsAlterNote       $08
0008BE0A E701                       	dc.b	smpsNoAttack, $01
0008BE0C E10E                       	smpsAlterNote       $0E
0008BE0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE12 E10B                       	smpsAlterNote       $0B
0008BE14 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008BE18 E108                       	smpsAlterNote       $08
0008BE1A E701                       	dc.b	smpsNoAttack, $01
0008BE1C E104                       	smpsAlterNote       $04
0008BE1E E701                       	dc.b	smpsNoAttack, $01
0008BE20 E108                       	smpsAlterNote       $08
0008BE22 E701                       	dc.b	smpsNoAttack, $01
0008BE24 E10B                       	smpsAlterNote       $0B
0008BE26 E701                       	dc.b	smpsNoAttack, $01
0008BE2A E0C0                       	smpsPan             panCenter, $00
0008BE2C E601                       	smpsAlterVol        $01
0008BE2E E108                       	smpsAlterNote       $08
0008BE30 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008BE3C 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008BE44 E080                       	smpsPan             panLeft, $00
0008BE46 07                         	dc.b	$07
0008BE47 E6FF                       	smpsAlterVol        $FF
0008BE49 E10D                       	smpsAlterNote       $0D
0008BE4B B60D                       	dc.b	nF4, $0D
0008BE4D E10A                       	smpsAlterNote       $0A
0008BE4F E701                       	dc.b	smpsNoAttack, $01
0008BE51 E106                       	smpsAlterNote       $06
0008BE53 E701                       	dc.b	smpsNoAttack, $01
0008BE55 E10A                       	smpsAlterNote       $0A
0008BE57 E701                       	dc.b	smpsNoAttack, $01
0008BE59 E110                       	smpsAlterNote       $10
0008BE5B E701                       	dc.b	smpsNoAttack, $01
0008BE5D E111                       	smpsAlterNote       $11
0008BE5F E701                       	dc.b	smpsNoAttack, $01
0008BE61 E10D                       	smpsAlterNote       $0D
0008BE63 E701                       	dc.b	smpsNoAttack, $01
0008BE65 E107                       	smpsAlterNote       $07
0008BE67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE6B E10A                       	smpsAlterNote       $0A
0008BE6D E701                       	dc.b	smpsNoAttack, $01
0008BE6F E110                       	smpsAlterNote       $10
0008BE71 E701                       	dc.b	smpsNoAttack, $01
0008BE73 E111                       	smpsAlterNote       $11
0008BE75 8001                       	dc.b	nRst, $01
0008BE77 E10D                       	smpsAlterNote       $0D
0008BE79 B80D                       	dc.b	nG4, $0D
0008BE7B E10A                       	smpsAlterNote       $0A
0008BE7D E701                       	dc.b	smpsNoAttack, $01
0008BE7F E106                       	smpsAlterNote       $06
0008BE81 E701                       	dc.b	smpsNoAttack, $01
0008BE83 E10A                       	smpsAlterNote       $0A
0008BE85 E701                       	dc.b	smpsNoAttack, $01
0008BE87 E110                       	smpsAlterNote       $10
0008BE89 E701                       	dc.b	smpsNoAttack, $01
0008BE8B E111                       	smpsAlterNote       $11
0008BE8D E701                       	dc.b	smpsNoAttack, $01
0008BE8F E10D                       	smpsAlterNote       $0D
0008BE91 E701                       	dc.b	smpsNoAttack, $01
0008BE93 E107                       	smpsAlterNote       $07
0008BE95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE99 E10D                       	smpsAlterNote       $0D
0008BE9B E701                       	dc.b	smpsNoAttack, $01
0008BE9D E110                       	smpsAlterNote       $10
0008BE9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEA3 E10A                       	smpsAlterNote       $0A
0008BEA5 E701                       	dc.b	smpsNoAttack, $01
0008BEA7 E106                       	smpsAlterNote       $06
0008BEA9 E701                       	dc.b	smpsNoAttack, $01
0008BEAB E107                       	smpsAlterNote       $07
0008BEAD E701                       	dc.b	smpsNoAttack, $01
0008BEAF E10D                       	smpsAlterNote       $0D
0008BEB1 E701                       	dc.b	smpsNoAttack, $01
0008BEB3 E111                       	smpsAlterNote       $11
0008BEB5 E701                       	dc.b	smpsNoAttack, $01
0008BEB7 E10D                       	smpsAlterNote       $0D
0008BEB9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BEBD E10F                       	smpsAlterNote       $0F
0008BEBF BA0D                       	dc.b	nA4, $0D
0008BEC1 E109                       	smpsAlterNote       $09
0008BEC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEC7 E10C                       	smpsAlterNote       $0C
0008BEC9 E701                       	dc.b	smpsNoAttack, $01
0008BECB E112                       	smpsAlterNote       $12
0008BECD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BED1 E10C                       	smpsAlterNote       $0C
0008BED3 E701                       	dc.b	smpsNoAttack, $01
0008BED5 E109                       	smpsAlterNote       $09
0008BED7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEDB E10F                       	smpsAlterNote       $0F
0008BEDD E701                       	dc.b	smpsNoAttack, $01
0008BEDF E113                       	smpsAlterNote       $13
0008BEE1 E701                       	dc.b	smpsNoAttack, $01
0008BEE3 E112                       	smpsAlterNote       $12
0008BEE5 E701                       	dc.b	smpsNoAttack, $01
0008BEE7 E10C                       	smpsAlterNote       $0C
0008BEE9 E701                       	dc.b	smpsNoAttack, $01
0008BEEB E108                       	smpsAlterNote       $08
0008BEED E701                       	dc.b	smpsNoAttack, $01
0008BEEF E10C                       	smpsAlterNote       $0C
0008BEF1 E701                       	dc.b	smpsNoAttack, $01
0008BEF3 E10F                       	smpsAlterNote       $0F
0008BEF5 E701                       	dc.b	smpsNoAttack, $01
0008BEF7 E113                       	smpsAlterNote       $13
0008BEF9 E701                       	dc.b	smpsNoAttack, $01
0008BEFB E10F                       	smpsAlterNote       $0F
0008BEFD E701                       	dc.b	smpsNoAttack, $01
0008BEFF E109                       	smpsAlterNote       $09
0008BF01 E701                       	dc.b	smpsNoAttack, $01
0008BF03 E108                       	smpsAlterNote       $08
0008BF05 E701                       	dc.b	smpsNoAttack, $01
0008BF07 E10C                       	smpsAlterNote       $0C
0008BF09 E701                       	dc.b	smpsNoAttack, $01
0008BF0B E112                       	smpsAlterNote       $12
0008BF0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF11 E10F                       	smpsAlterNote       $0F
0008BF13 E701                       	dc.b	smpsNoAttack, $01
0008BF15 E109                       	smpsAlterNote       $09
0008BF17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF1B E10F                       	smpsAlterNote       $0F
0008BF1D E701                       	dc.b	smpsNoAttack, $01
0008BF1F E112                       	smpsAlterNote       $12
0008BF21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF25 E10C                       	smpsAlterNote       $0C
0008BF27 E701                       	dc.b	smpsNoAttack, $01
0008BF29 E108                       	smpsAlterNote       $08
0008BF2B E701                       	dc.b	smpsNoAttack, $01
0008BF2D E109                       	smpsAlterNote       $09
0008BF2F E701                       	dc.b	smpsNoAttack, $01
0008BF31 E10C                       	smpsAlterNote       $0C
0008BF33 B50A                       	dc.b	nE4, $0A
0008BF35 E10D                       	smpsAlterNote       $0D
0008BF37 B60E                       	dc.b	nF4, $0E
0008BF39 E107                       	smpsAlterNote       $07
0008BF3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF3F E10D                       	smpsAlterNote       $0D
0008BF41 E701                       	dc.b	smpsNoAttack, $01
0008BF43 E110                       	smpsAlterNote       $10
0008BF45 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF49 E10A                       	smpsAlterNote       $0A
0008BF4B E701                       	dc.b	smpsNoAttack, $01
0008BF4D E106                       	smpsAlterNote       $06
0008BF4F E701                       	dc.b	smpsNoAttack, $01
0008BF51 E107                       	smpsAlterNote       $07
0008BF53 E701                       	dc.b	smpsNoAttack, $01
0008BF55 E10D                       	smpsAlterNote       $0D
0008BF57 E701                       	dc.b	smpsNoAttack, $01
0008BF59 E111                       	smpsAlterNote       $11
0008BF5B E701                       	dc.b	smpsNoAttack, $01
0008BF5D E10D                       	smpsAlterNote       $0D
0008BF5F B80D                       	dc.b	nG4, $0D
0008BF61 E10A                       	smpsAlterNote       $0A
0008BF63 E701                       	dc.b	smpsNoAttack, $01
0008BF65 E107                       	smpsAlterNote       $07
0008BF67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF6B E10D                       	smpsAlterNote       $0D
0008BF6D E701                       	dc.b	smpsNoAttack, $01
0008BF6F E111                       	smpsAlterNote       $11
0008BF71 E701                       	dc.b	smpsNoAttack, $01
0008BF73 E110                       	smpsAlterNote       $10
0008BF75 E701                       	dc.b	smpsNoAttack, $01
0008BF77 E10A                       	smpsAlterNote       $0A
0008BF79 E701                       	dc.b	smpsNoAttack, $01
0008BF7B E106                       	smpsAlterNote       $06
0008BF7D E701                       	dc.b	smpsNoAttack, $01
0008BF7F E10A                       	smpsAlterNote       $0A
0008BF81 E701                       	dc.b	smpsNoAttack, $01
0008BF83 E10D                       	smpsAlterNote       $0D
0008BF85 E701                       	dc.b	smpsNoAttack, $01
0008BF87 E111                       	smpsAlterNote       $11
0008BF89 E701                       	dc.b	smpsNoAttack, $01
0008BF8B E10D                       	smpsAlterNote       $0D
0008BF8D E701                       	dc.b	smpsNoAttack, $01
0008BF8F E107                       	smpsAlterNote       $07
0008BF91 E701                       	dc.b	smpsNoAttack, $01
0008BF93 E106                       	smpsAlterNote       $06
0008BF95 E701                       	dc.b	smpsNoAttack, $01
0008BF97 E10A                       	smpsAlterNote       $0A
0008BF99 E701                       	dc.b	smpsNoAttack, $01
0008BF9B E110                       	smpsAlterNote       $10
0008BF9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFA1 E10D                       	smpsAlterNote       $0D
0008BFA3 E701                       	dc.b	smpsNoAttack, $01
0008BFA5 E10F                       	smpsAlterNote       $0F
0008BFA7 BA0D                       	dc.b	nA4, $0D
0008BFA9 E10C                       	smpsAlterNote       $0C
0008BFAB E701                       	dc.b	smpsNoAttack, $01
0008BFAD E108                       	smpsAlterNote       $08
0008BFAF E701                       	dc.b	smpsNoAttack, $01
0008BFB1 E109                       	smpsAlterNote       $09
0008BFB3 E701                       	dc.b	smpsNoAttack, $01
0008BFB5 E10F                       	smpsAlterNote       $0F
0008BFB7 E701                       	dc.b	smpsNoAttack, $01
0008BFB9 E113                       	smpsAlterNote       $13
0008BFBB E701                       	dc.b	smpsNoAttack, $01
0008BFBD E10F                       	smpsAlterNote       $0F
0008BFBF E701                       	dc.b	smpsNoAttack, $01
0008BFC1 E10C                       	smpsAlterNote       $0C
0008BFC3 E701                       	dc.b	smpsNoAttack, $01
0008BFC5 E108                       	smpsAlterNote       $08
0008BFC7 E701                       	dc.b	smpsNoAttack, $01
0008BFC9 E10C                       	smpsAlterNote       $0C
0008BFCB E701                       	dc.b	smpsNoAttack, $01
0008BFCD E112                       	smpsAlterNote       $12
0008BFCF E701                       	dc.b	smpsNoAttack, $01
0008BFD1 E113                       	smpsAlterNote       $13
0008BFD3 E701                       	dc.b	smpsNoAttack, $01
0008BFD5 E10F                       	smpsAlterNote       $0F
0008BFD7 E701                       	dc.b	smpsNoAttack, $01
0008BFD9 E109                       	smpsAlterNote       $09
0008BFDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFDF E10C                       	smpsAlterNote       $0C
0008BFE1 E701                       	dc.b	smpsNoAttack, $01
0008BFE3 E112                       	smpsAlterNote       $12
0008BFE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFE9 E10C                       	smpsAlterNote       $0C
0008BFEB E701                       	dc.b	smpsNoAttack, $01
0008BFED E109                       	smpsAlterNote       $09
0008BFEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFF3 E10F                       	smpsAlterNote       $0F
0008BFF5 E701                       	dc.b	smpsNoAttack, $01
0008BFF7 E113                       	smpsAlterNote       $13
0008BFF9 E701                       	dc.b	smpsNoAttack, $01
0008BFFB E112                       	smpsAlterNote       $12
0008BFFD E701                       	dc.b	smpsNoAttack, $01
0008BFFF E10C                       	smpsAlterNote       $0C
0008C001 E701                       	dc.b	smpsNoAttack, $01
0008C003 E109                       	smpsAlterNote       $09
0008C005 8001                       	dc.b	nRst, $01
0008C007 E10D                       	smpsAlterNote       $0D
0008C009 B60A                       	dc.b	nF4, $0A
0008C00B E10C                       	smpsAlterNote       $0C
0008C00D B506 8001                  	dc.b	nE4, $06, nRst, $01
0008C011 E10B                       	smpsAlterNote       $0B
0008C013 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008C017 E10C                       	smpsAlterNote       $0C
0008C019 B503                       	dc.b	nE4, $03
0008C01B E10D                       	smpsAlterNote       $0D
0008C01D B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008C027 E10C                       	smpsAlterNote       $0C
0008C029 E701                       	dc.b	smpsNoAttack, $01
0008C02B E108                       	smpsAlterNote       $08
0008C02D E701                       	dc.b	smpsNoAttack, $01
0008C02F E10C                       	smpsAlterNote       $0C
0008C031 E701                       	dc.b	smpsNoAttack, $01
0008C033 E112                       	smpsAlterNote       $12
0008C035 E701                       	dc.b	smpsNoAttack, $01
0008C037 E113                       	smpsAlterNote       $13
0008C039 E701                       	dc.b	smpsNoAttack, $01
0008C03B E10F                       	smpsAlterNote       $0F
0008C03D E701                       	dc.b	smpsNoAttack, $01
0008C03F E109                       	smpsAlterNote       $09
0008C041 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C045 E10C                       	smpsAlterNote       $0C
0008C047 E701                       	dc.b	smpsNoAttack, $01
0008C049 E112                       	smpsAlterNote       $12
0008C04B E701                       	dc.b	smpsNoAttack, $01
0008C04D E113                       	smpsAlterNote       $13
0008C04F 8001                       	dc.b	nRst, $01
0008C051 E10D                       	smpsAlterNote       $0D
0008C053 C20D                       	dc.b	nF5, $0D
0008C055 E10A                       	smpsAlterNote       $0A
0008C057 E701                       	dc.b	smpsNoAttack, $01
0008C059 E106                       	smpsAlterNote       $06
0008C05B E701                       	dc.b	smpsNoAttack, $01
0008C05D E10A                       	smpsAlterNote       $0A
0008C05F E701                       	dc.b	smpsNoAttack, $01
0008C061 E110                       	smpsAlterNote       $10
0008C063 E701                       	dc.b	smpsNoAttack, $01
0008C065 E111                       	smpsAlterNote       $11
0008C067 E701                       	dc.b	smpsNoAttack, $01
0008C069 E10D                       	smpsAlterNote       $0D
0008C06B E701                       	dc.b	smpsNoAttack, $01
0008C06D E107                       	smpsAlterNote       $07
0008C06F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C073 E10A                       	smpsAlterNote       $0A
0008C075 E701                       	dc.b	smpsNoAttack, $01
0008C077 E110                       	smpsAlterNote       $10
0008C079 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C07D E10A                       	smpsAlterNote       $0A
0008C07F E701                       	dc.b	smpsNoAttack, $01
0008C081 E107                       	smpsAlterNote       $07
0008C083 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C087 E10D                       	smpsAlterNote       $0D
0008C089 E701                       	dc.b	smpsNoAttack, $01
0008C08B E111                       	smpsAlterNote       $11
0008C08D E701                       	dc.b	smpsNoAttack, $01
0008C08F E110                       	smpsAlterNote       $10
0008C091 E701                       	dc.b	smpsNoAttack, $01
0008C093 E10A                       	smpsAlterNote       $0A
0008C095 E701                       	dc.b	smpsNoAttack, $01
0008C097 E106                       	smpsAlterNote       $06
0008C099 E701                       	dc.b	smpsNoAttack, $01
0008C09B E10A                       	smpsAlterNote       $0A
0008C09D E701                       	dc.b	smpsNoAttack, $01
0008C09F E10D                       	smpsAlterNote       $0D
0008C0A1 E701                       	dc.b	smpsNoAttack, $01
0008C0A3 E111                       	smpsAlterNote       $11
0008C0A5 E701                       	dc.b	smpsNoAttack, $01
0008C0A7 E10D                       	smpsAlterNote       $0D
0008C0A9 E701                       	dc.b	smpsNoAttack, $01
0008C0AB E107                       	smpsAlterNote       $07
0008C0AD E701                       	dc.b	smpsNoAttack, $01
0008C0AF E106                       	smpsAlterNote       $06
0008C0B1 E701                       	dc.b	smpsNoAttack, $01
0008C0B3 E10A                       	smpsAlterNote       $0A
0008C0B5 E701                       	dc.b	smpsNoAttack, $01
0008C0B7 E110                       	smpsAlterNote       $10
0008C0B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0BD E10D                       	smpsAlterNote       $0D
0008C0BF E701                       	dc.b	smpsNoAttack, $01
0008C0C1 E107                       	smpsAlterNote       $07
0008C0C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0C7 E10D                       	smpsAlterNote       $0D
0008C0C9 E701                       	dc.b	smpsNoAttack, $01
0008C0CB E110                       	smpsAlterNote       $10
0008C0CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0D1 E10A                       	smpsAlterNote       $0A
0008C0D3 E701                       	dc.b	smpsNoAttack, $01
0008C0D5 E106                       	smpsAlterNote       $06
0008C0D7 E701                       	dc.b	smpsNoAttack, $01
0008C0D9 E107                       	smpsAlterNote       $07
0008C0DB E701                       	dc.b	smpsNoAttack, $01
0008C0DD E10D                       	smpsAlterNote       $0D
0008C0DF E701                       	dc.b	smpsNoAttack, $01
0008C0E1 E111                       	smpsAlterNote       $11
0008C0E3 E701                       	dc.b	smpsNoAttack, $01
0008C0E5 E10D                       	smpsAlterNote       $0D
0008C0E7 E701                       	dc.b	smpsNoAttack, $01
0008C0E9 E10A                       	smpsAlterNote       $0A
0008C0EB E701                       	dc.b	smpsNoAttack, $01
0008C0ED E107                       	smpsAlterNote       $07
0008C0EF 8001                       	dc.b	nRst, $01
0008C0F1 E10D                       	smpsAlterNote       $0D
0008C0F3 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008C0F9 E601                       	smpsAlterVol        $01
0008C0FB E110                       	smpsAlterNote       $10
0008C0FD BB0D                       	dc.b	nBb4, $0D
0008C0FF E10A                       	smpsAlterNote       $0A
0008C101 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C105 E110                       	smpsAlterNote       $10
0008C107 E701                       	dc.b	smpsNoAttack, $01
0008C109 E113                       	smpsAlterNote       $13
0008C10B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C10F E10D                       	smpsAlterNote       $0D
0008C111 E701                       	dc.b	smpsNoAttack, $01
0008C113 E109                       	smpsAlterNote       $09
0008C115 E701                       	dc.b	smpsNoAttack, $01
0008C117 E10A                       	smpsAlterNote       $0A
0008C119 E701                       	dc.b	smpsNoAttack, $01
0008C11B E110                       	smpsAlterNote       $10
0008C11D E701                       	dc.b	smpsNoAttack, $01
0008C11F E114                       	smpsAlterNote       $14
0008C121 E701                       	dc.b	smpsNoAttack, $01
0008C123 E110                       	smpsAlterNote       $10
0008C125 E701                       	dc.b	smpsNoAttack, $01
0008C127 E10D                       	smpsAlterNote       $0D
0008C129 E701                       	dc.b	smpsNoAttack, $01
0008C12B E109                       	smpsAlterNote       $09
0008C12D E701                       	dc.b	smpsNoAttack, $01
0008C12F E10A                       	smpsAlterNote       $0A
0008C131 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008C135 E107                       	smpsAlterNote       $07
0008C137 E701                       	dc.b	smpsNoAttack, $01
0008C139 E103                       	smpsAlterNote       $03
0008C13B E701                       	dc.b	smpsNoAttack, $01
0008C13D E107                       	smpsAlterNote       $07
0008C13F E701                       	dc.b	smpsNoAttack, $01
0008C141 E10D                       	smpsAlterNote       $0D
0008C143 E701                       	dc.b	smpsNoAttack, $01
0008C145 E10E                       	smpsAlterNote       $0E
0008C147 E701                       	dc.b	smpsNoAttack, $01
0008C149 E10A                       	smpsAlterNote       $0A
0008C14B E701                       	dc.b	smpsNoAttack, $01
0008C14D E104                       	smpsAlterNote       $04
0008C14F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C153 E107                       	smpsAlterNote       $07
0008C155 E701                       	dc.b	smpsNoAttack, $01
0008C157 E10D                       	smpsAlterNote       $0D
0008C159 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C15D E107                       	smpsAlterNote       $07
0008C15F E701                       	dc.b	smpsNoAttack, $01
0008C161 E104                       	smpsAlterNote       $04
0008C163 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C167 E10B                       	smpsAlterNote       $0B
0008C169 BF0D                       	dc.b	nD5, $0D
0008C16B E108                       	smpsAlterNote       $08
0008C16D E701                       	dc.b	smpsNoAttack, $01
0008C16F E105                       	smpsAlterNote       $05
0008C171 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C175 E10B                       	smpsAlterNote       $0B
0008C177 E701                       	dc.b	smpsNoAttack, $01
0008C179 E10F                       	smpsAlterNote       $0F
0008C17B E701                       	dc.b	smpsNoAttack, $01
0008C17D E10E                       	smpsAlterNote       $0E
0008C17F E701                       	dc.b	smpsNoAttack, $01
0008C181 E108                       	smpsAlterNote       $08
0008C183 E701                       	dc.b	smpsNoAttack, $01
0008C185 E104                       	smpsAlterNote       $04
0008C187 E701                       	dc.b	smpsNoAttack, $01
0008C189 E108                       	smpsAlterNote       $08
0008C18B E701                       	dc.b	smpsNoAttack, $01
0008C18D E10B                       	smpsAlterNote       $0B
0008C18F E701                       	dc.b	smpsNoAttack, $01
0008C191 E10F                       	smpsAlterNote       $0F
0008C193 E701                       	dc.b	smpsNoAttack, $01
0008C195 E10B                       	smpsAlterNote       $0B
0008C197 E701                       	dc.b	smpsNoAttack, $01
0008C199 E105                       	smpsAlterNote       $05
0008C19B E701                       	dc.b	smpsNoAttack, $01
0008C19D E104                       	smpsAlterNote       $04
0008C19F E701                       	dc.b	smpsNoAttack, $01
0008C1A1 E105                       	smpsAlterNote       $05
0008C1A3 8001                       	dc.b	nRst, $01
0008C1A5 E10C                       	smpsAlterNote       $0C
0008C1A7 C10C                       	dc.b	nE5, $0C
0008C1A9 E10D                       	smpsAlterNote       $0D
0008C1AB C201                       	dc.b	nF5, $01
0008C1AD E10E                       	smpsAlterNote       $0E
0008C1AF C301 8001                  	dc.b	nFs5, $01, nRst, $01
0008C1B3 E10D                       	smpsAlterNote       $0D
0008C1B5 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008C1B9 E10A                       	smpsAlterNote       $0A
0008C1BB E701                       	dc.b	smpsNoAttack, $01
0008C1BD E106                       	smpsAlterNote       $06
0008C1BF E701                       	dc.b	smpsNoAttack, $01
0008C1C1 E10A                       	smpsAlterNote       $0A
0008C1C3 E701                       	dc.b	smpsNoAttack, $01
0008C1C5 E10D                       	smpsAlterNote       $0D
0008C1C7 E701                       	dc.b	smpsNoAttack, $01
0008C1C9 E111                       	smpsAlterNote       $11
0008C1CB E701                       	dc.b	smpsNoAttack, $01
0008C1CD E10D                       	smpsAlterNote       $0D
0008C1CF E701                       	dc.b	smpsNoAttack, $01
0008C1D1 E107                       	smpsAlterNote       $07
0008C1D3 E701                       	dc.b	smpsNoAttack, $01
0008C1D5 E106                       	smpsAlterNote       $06
0008C1D7 E701                       	dc.b	smpsNoAttack, $01
0008C1D9 E10A                       	smpsAlterNote       $0A
0008C1DB E701                       	dc.b	smpsNoAttack, $01
0008C1DD E110                       	smpsAlterNote       $10
0008C1DF E701                       	dc.b	smpsNoAttack, $01
0008C1E1 E111                       	smpsAlterNote       $11
0008C1E3 8001                       	dc.b	nRst, $01
0008C1E5 E10D                       	smpsAlterNote       $0D
0008C1E7 C40D                       	dc.b	nG5, $0D
0008C1E9 E10A                       	smpsAlterNote       $0A
0008C1EB E701                       	dc.b	smpsNoAttack, $01
0008C1ED E106                       	smpsAlterNote       $06
0008C1EF E701                       	dc.b	smpsNoAttack, $01
0008C1F1 E10A                       	smpsAlterNote       $0A
0008C1F3 E701                       	dc.b	smpsNoAttack, $01
0008C1F5 E10D                       	smpsAlterNote       $0D
0008C1F7 E701                       	dc.b	smpsNoAttack, $01
0008C1F9 E10C                       	smpsAlterNote       $0C
0008C1FB C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0008C207 8001                       	dc.b	nRst, $01
0008C209 E10D                       	smpsAlterNote       $0D
0008C20B C20D                       	dc.b	nF5, $0D
0008C20D E10A                       	smpsAlterNote       $0A
0008C20F E701                       	dc.b	smpsNoAttack, $01
0008C211 E106                       	smpsAlterNote       $06
0008C213 E701                       	dc.b	smpsNoAttack, $01
0008C215 E10A                       	smpsAlterNote       $0A
0008C217 E701                       	dc.b	smpsNoAttack, $01
0008C219 E110                       	smpsAlterNote       $10
0008C21B E701                       	dc.b	smpsNoAttack, $01
0008C21D E111                       	smpsAlterNote       $11
0008C21F E701                       	dc.b	smpsNoAttack, $01
0008C221 E10D                       	smpsAlterNote       $0D
0008C223 E701                       	dc.b	smpsNoAttack, $01
0008C225 E107                       	smpsAlterNote       $07
0008C227 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C22B E10A                       	smpsAlterNote       $0A
0008C22D E701                       	dc.b	smpsNoAttack, $01
0008C22F E110                       	smpsAlterNote       $10
0008C231 E701                       	dc.b	smpsNoAttack, $01
0008C233 E111                       	smpsAlterNote       $11
0008C235 8001                       	dc.b	nRst, $01
0008C237 E10F                       	smpsAlterNote       $0F
0008C239 C60A                       	dc.b	nA5, $0A
0008C23B E10D                       	smpsAlterNote       $0D
0008C23D C406 8001                  	dc.b	nG5, $06, nRst, $01
0008C241 E10C                       	smpsAlterNote       $0C
0008C243 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008C24F 8001                       	dc.b	nRst, $01
0008C251 E10D                       	smpsAlterNote       $0D
0008C253 C20D                       	dc.b	nF5, $0D
0008C255 E107                       	smpsAlterNote       $07
0008C257 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C25B E10A                       	smpsAlterNote       $0A
0008C25D E701                       	dc.b	smpsNoAttack, $01
0008C25F E110                       	smpsAlterNote       $10
0008C261 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C265 E10A                       	smpsAlterNote       $0A
0008C267 E701                       	dc.b	smpsNoAttack, $01
0008C269 E107                       	smpsAlterNote       $07
0008C26B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C26F E10D                       	smpsAlterNote       $0D
0008C271 E701                       	dc.b	smpsNoAttack, $01
0008C273 E111                       	smpsAlterNote       $11
0008C275 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C279 E10D                       	smpsAlterNote       $0D
0008C27B C40D                       	dc.b	nG5, $0D
0008C27D E107                       	smpsAlterNote       $07
0008C27F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C283 E10A                       	smpsAlterNote       $0A
0008C285 E701                       	dc.b	smpsNoAttack, $01
0008C287 E10D                       	smpsAlterNote       $0D
0008C289 8001                       	dc.b	nRst, $01
0008C28B E10C                       	smpsAlterNote       $0C
0008C28D C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008C299 E10D                       	smpsAlterNote       $0D
0008C29B C20E                       	dc.b	nF5, $0E
0008C29D E107                       	smpsAlterNote       $07
0008C29F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2A3 E10D                       	smpsAlterNote       $0D
0008C2A5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C2AB E0C0                       	smpsPan             panCenter, $00
0008C2AD E603                       	smpsAlterVol        $03
0008C2AF E108                       	smpsAlterNote       $08
0008C2B1 B406                       	dc.b	nEb4, $06
0008C2B3 E10C                       	smpsAlterNote       $0C
0008C2B5 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008C2B9 E108                       	smpsAlterNote       $08
0008C2BB B403                       	dc.b	nEb4, $03
0008C2BD E109                       	smpsAlterNote       $09
0008C2BF B803 8001                  	dc.b	nG4, $03, nRst, $01
0008C2C3 E10C                       	smpsAlterNote       $0C
0008C2C5 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0008C2CD 03                         	dc.b	$03
0008C2CE E6FD                       	smpsAlterVol        $FD
0008C2D0 F6F1 F4                    	smpsJump            music84_Jump00
0008C2D3                            
0008C2D3                            ; PSG1 Data
0008C2D3                            music84_PSG1:
0008C2D3 E1FD                       	smpsAlterNote       $FD
0008C2D5 EC04                       	smpsPSGAlterVol     $04
0008C2D7 9203                       	dc.b	nF1, $03
0008C2D9 E1FE                       	smpsAlterNote       $FE
0008C2DB 9603                       	dc.b	nA1, $03
0008C2DD EC04                       	smpsPSGAlterVol     $04
0008C2DF E701                       	dc.b	smpsNoAttack, $01
0008C2E1 E1FF                       	smpsAlterNote       $FF
0008C2E3 ECFC                       	smpsPSGAlterVol     $FC
0008C2E5 9B03                       	dc.b	nD2, $03
0008C2E7 E1FD                       	smpsAlterNote       $FD
0008C2E9 9403                       	dc.b	nG1, $03
0008C2EB EC04                       	smpsPSGAlterVol     $04
0008C2ED E701                       	dc.b	smpsNoAttack, $01
0008C2EF E1FE                       	smpsAlterNote       $FE
0008C2F1 ECFC                       	smpsPSGAlterVol     $FC
0008C2F3 9703                       	dc.b	nBb1, $03
0008C2F5 E1FF                       	smpsAlterNote       $FF
0008C2F7 9B03                       	dc.b	nD2, $03
0008C2F9 EC04                       	smpsPSGAlterVol     $04
0008C2FB E701                       	dc.b	smpsNoAttack, $01
0008C2FD E1FE                       	smpsAlterNote       $FE
0008C2FF ECFC                       	smpsPSGAlterVol     $FC
0008C301 A002                       	dc.b	nG2, $02
0008C303 EC04                       	smpsPSGAlterVol     $04
0008C305 E701                       	dc.b	smpsNoAttack, $01
0008C307 E1FF                       	smpsAlterNote       $FF
0008C309 ECFC                       	smpsPSGAlterVol     $FC
0008C30B A203                       	dc.b	nA2, $03
0008C30D EC0B                       	smpsPSGAlterVol     $0B
0008C30F 800A                       	dc.b	nRst, $0A
0008C311 E105                       	smpsAlterNote       $05
0008C313 01                         	dc.b	$01
0008C314 E1FC                       	smpsAlterNote       $FC
0008C316 01                         	dc.b	$01
0008C317 E105                       	smpsAlterNote       $05
0008C319 01                         	dc.b	$01
0008C31A E1FD                       	smpsAlterNote       $FD
0008C31C 01                         	dc.b	$01
0008C31D E105                       	smpsAlterNote       $05
0008C31F 01                         	dc.b	$01
0008C320 E1FD                       	smpsAlterNote       $FD
0008C322 01                         	dc.b	$01
0008C323 E1FA                       	smpsAlterNote       $FA
0008C325 01                         	dc.b	$01
0008C326 E1FC                       	smpsAlterNote       $FC
0008C328 01                         	dc.b	$01
0008C329 E105                       	smpsAlterNote       $05
0008C32B 01                         	dc.b	$01
0008C32C E108                       	smpsAlterNote       $08
0008C32E 0101                       	dc.b	$01, $01
0008C330 E105                       	smpsAlterNote       $05
0008C332 01                         	dc.b	$01
0008C333 E1FA                       	smpsAlterNote       $FA
0008C335 0101                       	dc.b	$01, $01
0008C337 E1FD                       	smpsAlterNote       $FD
0008C339 01                         	dc.b	$01
0008C33A E105                       	smpsAlterNote       $05
0008C33C 01                         	dc.b	$01
0008C33D E108                       	smpsAlterNote       $08
0008C33F 01                         	dc.b	$01
0008C340 E105                       	smpsAlterNote       $05
0008C342 01                         	dc.b	$01
0008C343 E1FC                       	smpsAlterNote       $FC
0008C345 01                         	dc.b	$01
0008C346 E105                       	smpsAlterNote       $05
0008C348 01                         	dc.b	$01
0008C349 E1FD                       	smpsAlterNote       $FD
0008C34B 01                         	dc.b	$01
0008C34C                            
0008C34C                            music84_Jump07:
0008C34C E105                       	smpsAlterNote       $05
0008C34E 8001                       	dc.b	nRst, $01
0008C350 E1FD                       	smpsAlterNote       $FD
0008C352 01                         	dc.b	$01
0008C353 E1FA                       	smpsAlterNote       $FA
0008C355 01                         	dc.b	$01
0008C356 E1FC                       	smpsAlterNote       $FC
0008C358 01                         	dc.b	$01
0008C359 E1FD                       	smpsAlterNote       $FD
0008C35B ECF5                       	smpsPSGAlterVol     $F5
0008C35D 9206                       	dc.b	nF1, $06
0008C35F EC04                       	smpsPSGAlterVol     $04
0008C361 E701                       	dc.b	smpsNoAttack, $01
0008C363 EC07                       	smpsPSGAlterVol     $07
0008C365 8003                       	dc.b	nRst, $03
0008C367 ECF5                       	smpsPSGAlterVol     $F5
0008C369 9206                       	dc.b	nF1, $06
0008C36B EC04                       	smpsPSGAlterVol     $04
0008C36D E701                       	dc.b	smpsNoAttack, $01
0008C36F EC07                       	smpsPSGAlterVol     $07
0008C371 8006                       	dc.b	nRst, $06
0008C373 E100                       	smpsAlterNote       $00
0008C375 01                         	dc.b	$01
0008C376 E104                       	smpsAlterNote       $04
0008C378 01                         	dc.b	$01
0008C379 E100                       	smpsAlterNote       $00
0008C37B 01                         	dc.b	$01
0008C37C E1FB                       	smpsAlterNote       $FB
0008C37E 01                         	dc.b	$01
0008C37F E1FD                       	smpsAlterNote       $FD
0008C381 ECF5                       	smpsPSGAlterVol     $F5
0008C383 9406                       	dc.b	nG1, $06
0008C385 EC04                       	smpsPSGAlterVol     $04
0008C387 E701                       	dc.b	smpsNoAttack, $01
0008C389 EC07                       	smpsPSGAlterVol     $07
0008C38B 8003                       	dc.b	nRst, $03
0008C38D ECF5                       	smpsPSGAlterVol     $F5
0008C38F 9407                       	dc.b	nG1, $07
0008C391 EC0B                       	smpsPSGAlterVol     $0B
0008C393 8006                       	dc.b	nRst, $06
0008C395 E100                       	smpsAlterNote       $00
0008C397 01                         	dc.b	$01
0008C398 E103                       	smpsAlterNote       $03
0008C39A 0101                       	dc.b	$01, $01
0008C39C E1FD                       	smpsAlterNote       $FD
0008C39E 01                         	dc.b	$01
0008C39F ECF5                       	smpsPSGAlterVol     $F5
0008C3A1 9207                       	dc.b	nF1, $07
0008C3A3 EC0B                       	smpsPSGAlterVol     $0B
0008C3A5 8004                       	dc.b	nRst, $04
0008C3A7 ECF5                       	smpsPSGAlterVol     $F5
0008C3A9 9206                       	dc.b	nF1, $06
0008C3AB EC04                       	smpsPSGAlterVol     $04
0008C3AD E701                       	dc.b	smpsNoAttack, $01
0008C3AF EC07                       	smpsPSGAlterVol     $07
0008C3B1 8006                       	dc.b	nRst, $06
0008C3B3 E103                       	smpsAlterNote       $03
0008C3B5 01                         	dc.b	$01
0008C3B6 E104                       	smpsAlterNote       $04
0008C3B8 01                         	dc.b	$01
0008C3B9 E100                       	smpsAlterNote       $00
0008C3BB 01                         	dc.b	$01
0008C3BC E1FA                       	smpsAlterNote       $FA
0008C3BE 01                         	dc.b	$01
0008C3BF E1FD                       	smpsAlterNote       $FD
0008C3C1 ECF5                       	smpsPSGAlterVol     $F5
0008C3C3 9206                       	dc.b	nF1, $06
0008C3C5 EC04                       	smpsPSGAlterVol     $04
0008C3C7 E701                       	dc.b	smpsNoAttack, $01
0008C3C9 EC07                       	smpsPSGAlterVol     $07
0008C3CB 8003                       	dc.b	nRst, $03
0008C3CD ECF5                       	smpsPSGAlterVol     $F5
0008C3CF 9106                       	dc.b	nE1, $06
0008C3D1 EC04                       	smpsPSGAlterVol     $04
0008C3D3 E701                       	dc.b	smpsNoAttack, $01
0008C3D5 EC07                       	smpsPSGAlterVol     $07
0008C3D7 8006                       	dc.b	nRst, $06
0008C3D9 E100                       	smpsAlterNote       $00
0008C3DB 01                         	dc.b	$01
0008C3DC E104                       	smpsAlterNote       $04
0008C3DE 01                         	dc.b	$01
0008C3DF E100                       	smpsAlterNote       $00
0008C3E1 01                         	dc.b	$01
0008C3E2 E1FD                       	smpsAlterNote       $FD
0008C3E4 01                         	dc.b	$01
0008C3E5 ECF5                       	smpsPSGAlterVol     $F5
0008C3E7 9206                       	dc.b	nF1, $06
0008C3E9 EC04                       	smpsPSGAlterVol     $04
0008C3EB E701                       	dc.b	smpsNoAttack, $01
0008C3ED EC07                       	smpsPSGAlterVol     $07
0008C3EF 8003                       	dc.b	nRst, $03
0008C3F1 ECF5                       	smpsPSGAlterVol     $F5
0008C3F3 9207                       	dc.b	nF1, $07
0008C3F5 EC0B                       	smpsPSGAlterVol     $0B
0008C3F7 8007                       	dc.b	nRst, $07
0008C3F9 E103                       	smpsAlterNote       $03
0008C3FB 0101                       	dc.b	$01, $01
0008C3FD E1FD                       	smpsAlterNote       $FD
0008C3FF 01                         	dc.b	$01
0008C400 E1FB                       	smpsAlterNote       $FB
0008C402 01                         	dc.b	$01
0008C403 E1FD                       	smpsAlterNote       $FD
0008C405 ECF5                       	smpsPSGAlterVol     $F5
0008C407 9406                       	dc.b	nG1, $06
0008C409 EC0B                       	smpsPSGAlterVol     $0B
0008C40B 8004                       	dc.b	nRst, $04
0008C40D ECF5                       	smpsPSGAlterVol     $F5
0008C40F 9406                       	dc.b	nG1, $06
0008C411 EC04                       	smpsPSGAlterVol     $04
0008C413 E701                       	dc.b	smpsNoAttack, $01
0008C415 EC07                       	smpsPSGAlterVol     $07
0008C417 8006                       	dc.b	nRst, $06
0008C419 E100                       	smpsAlterNote       $00
0008C41B 01                         	dc.b	$01
0008C41C E104                       	smpsAlterNote       $04
0008C41E 01                         	dc.b	$01
0008C41F E100                       	smpsAlterNote       $00
0008C421 01                         	dc.b	$01
0008C422 E1F9                       	smpsAlterNote       $F9
0008C424 01                         	dc.b	$01
0008C425 E1FD                       	smpsAlterNote       $FD
0008C427 ECF5                       	smpsPSGAlterVol     $F5
0008C429 9206                       	dc.b	nF1, $06
0008C42B EC04                       	smpsPSGAlterVol     $04
0008C42D E701                       	dc.b	smpsNoAttack, $01
0008C42F EC07                       	smpsPSGAlterVol     $07
0008C431 8003                       	dc.b	nRst, $03
0008C433 ECF5                       	smpsPSGAlterVol     $F5
0008C435 9207                       	dc.b	nF1, $07
0008C437 EC0B                       	smpsPSGAlterVol     $0B
0008C439 8006                       	dc.b	nRst, $06
0008C43B E100                       	smpsAlterNote       $00
0008C43D 01                         	dc.b	$01
0008C43E E104                       	smpsAlterNote       $04
0008C440 01                         	dc.b	$01
0008C441 E103                       	smpsAlterNote       $03
0008C443 01                         	dc.b	$01
0008C444 E1FD                       	smpsAlterNote       $FD
0008C446 01                         	dc.b	$01
0008C447 ECF5                       	smpsPSGAlterVol     $F5
0008C449 9207                       	dc.b	nF1, $07
0008C44B EC0B                       	smpsPSGAlterVol     $0B
0008C44D 8004                       	dc.b	nRst, $04
0008C44F ECF5                       	smpsPSGAlterVol     $F5
0008C451 9206                       	dc.b	nF1, $06
0008C453 EC0B                       	smpsPSGAlterVol     $0B
0008C455 8007                       	dc.b	nRst, $07
0008C457 E103                       	smpsAlterNote       $03
0008C459 0101                       	dc.b	$01, $01
0008C45B E100                       	smpsAlterNote       $00
0008C45D 01                         	dc.b	$01
0008C45E E1FA                       	smpsAlterNote       $FA
0008C460 01                         	dc.b	$01
0008C461 E1FD                       	smpsAlterNote       $FD
0008C463 ECF5                       	smpsPSGAlterVol     $F5
0008C465 9206                       	dc.b	nF1, $06
0008C467 EC04                       	smpsPSGAlterVol     $04
0008C469 E701                       	dc.b	smpsNoAttack, $01
0008C46B EC07                       	smpsPSGAlterVol     $07
0008C46D 8003                       	dc.b	nRst, $03
0008C46F ECF5                       	smpsPSGAlterVol     $F5
0008C471 9206                       	dc.b	nF1, $06
0008C473 EC04                       	smpsPSGAlterVol     $04
0008C475 E701                       	dc.b	smpsNoAttack, $01
0008C477 EC07                       	smpsPSGAlterVol     $07
0008C479 8006                       	dc.b	nRst, $06
0008C47B E100                       	smpsAlterNote       $00
0008C47D 01                         	dc.b	$01
0008C47E E104                       	smpsAlterNote       $04
0008C480 01                         	dc.b	$01
0008C481 E100                       	smpsAlterNote       $00
0008C483 01                         	dc.b	$01
0008C484 E1FD                       	smpsAlterNote       $FD
0008C486 01                         	dc.b	$01
0008C487 ECF5                       	smpsPSGAlterVol     $F5
0008C489 9206                       	dc.b	nF1, $06
0008C48B EC04                       	smpsPSGAlterVol     $04
0008C48D E701                       	dc.b	smpsNoAttack, $01
0008C48F EC07                       	smpsPSGAlterVol     $07
0008C491 8003                       	dc.b	nRst, $03
0008C493 ECF5                       	smpsPSGAlterVol     $F5
0008C495 9207                       	dc.b	nF1, $07
0008C497 EC0B                       	smpsPSGAlterVol     $0B
0008C499 8007                       	dc.b	nRst, $07
0008C49B E103                       	smpsAlterNote       $03
0008C49D 0101                       	dc.b	$01, $01
0008C49F E1FD                       	smpsAlterNote       $FD
0008C4A1 01                         	dc.b	$01
0008C4A2 E1FA                       	smpsAlterNote       $FA
0008C4A4 01                         	dc.b	$01
0008C4A5 E1FD                       	smpsAlterNote       $FD
0008C4A7 ECF5                       	smpsPSGAlterVol     $F5
0008C4A9 9206                       	dc.b	nF1, $06
0008C4AB EC0B                       	smpsPSGAlterVol     $0B
0008C4AD 8004                       	dc.b	nRst, $04
0008C4AF ECF5                       	smpsPSGAlterVol     $F5
0008C4B1 9206                       	dc.b	nF1, $06
0008C4B3 EC04                       	smpsPSGAlterVol     $04
0008C4B5 E701                       	dc.b	smpsNoAttack, $01
0008C4B7 EC07                       	smpsPSGAlterVol     $07
0008C4B9 8006                       	dc.b	nRst, $06
0008C4BB E103                       	smpsAlterNote       $03
0008C4BD 01                         	dc.b	$01
0008C4BE E104                       	smpsAlterNote       $04
0008C4C0 01                         	dc.b	$01
0008C4C1 E100                       	smpsAlterNote       $00
0008C4C3 01                         	dc.b	$01
0008C4C4 E1FA                       	smpsAlterNote       $FA
0008C4C6 01                         	dc.b	$01
0008C4C7 E1FD                       	smpsAlterNote       $FD
0008C4C9 ECF5                       	smpsPSGAlterVol     $F5
0008C4CB 9206                       	dc.b	nF1, $06
0008C4CD EC04                       	smpsPSGAlterVol     $04
0008C4CF E701                       	dc.b	smpsNoAttack, $01
0008C4D1 EC07                       	smpsPSGAlterVol     $07
0008C4D3 8003                       	dc.b	nRst, $03
0008C4D5 ECF5                       	smpsPSGAlterVol     $F5
0008C4D7 9206                       	dc.b	nF1, $06
0008C4D9 EC04                       	smpsPSGAlterVol     $04
0008C4DB E701                       	dc.b	smpsNoAttack, $01
0008C4DD EC07                       	smpsPSGAlterVol     $07
0008C4DF 8006                       	dc.b	nRst, $06
0008C4E1 E100                       	smpsAlterNote       $00
0008C4E3 01                         	dc.b	$01
0008C4E4 E104                       	smpsAlterNote       $04
0008C4E6 01                         	dc.b	$01
0008C4E7 E103                       	smpsAlterNote       $03
0008C4E9 01                         	dc.b	$01
0008C4EA E1FD                       	smpsAlterNote       $FD
0008C4EC 01                         	dc.b	$01
0008C4ED ECF5                       	smpsPSGAlterVol     $F5
0008C4EF 9107                       	dc.b	nE1, $07
0008C4F1 EC0B                       	smpsPSGAlterVol     $0B
0008C4F3 8004                       	dc.b	nRst, $04
0008C4F5 ECF5                       	smpsPSGAlterVol     $F5
0008C4F7 9106                       	dc.b	nE1, $06
0008C4F9 EC0B                       	smpsPSGAlterVol     $0B
0008C4FB 8007                       	dc.b	nRst, $07
0008C4FD E103                       	smpsAlterNote       $03
0008C4FF 0101                       	dc.b	$01, $01
0008C501 E100                       	smpsAlterNote       $00
0008C503 01                         	dc.b	$01
0008C504 E1FA                       	smpsAlterNote       $FA
0008C506 01                         	dc.b	$01
0008C507 E1FD                       	smpsAlterNote       $FD
0008C509 ECF5                       	smpsPSGAlterVol     $F5
0008C50B 9106                       	dc.b	nE1, $06
0008C50D EC04                       	smpsPSGAlterVol     $04
0008C50F E701                       	dc.b	smpsNoAttack, $01
0008C511 EC07                       	smpsPSGAlterVol     $07
0008C513 8003                       	dc.b	nRst, $03
0008C515 ECF5                       	smpsPSGAlterVol     $F5
0008C517 9106                       	dc.b	nE1, $06
0008C519 EC04                       	smpsPSGAlterVol     $04
0008C51B E701                       	dc.b	smpsNoAttack, $01
0008C51D EC07                       	smpsPSGAlterVol     $07
0008C51F 8006                       	dc.b	nRst, $06
0008C521 E100                       	smpsAlterNote       $00
0008C523 01                         	dc.b	$01
0008C524 E104                       	smpsAlterNote       $04
0008C526 01                         	dc.b	$01
0008C527 E100                       	smpsAlterNote       $00
0008C529 01                         	dc.b	$01
0008C52A E1FA                       	smpsAlterNote       $FA
0008C52C 01                         	dc.b	$01
0008C52D E1FD                       	smpsAlterNote       $FD
0008C52F ECF5                       	smpsPSGAlterVol     $F5
0008C531 9106                       	dc.b	nE1, $06
0008C533 EC04                       	smpsPSGAlterVol     $04
0008C535 E701                       	dc.b	smpsNoAttack, $01
0008C537 EC07                       	smpsPSGAlterVol     $07
0008C539 8003                       	dc.b	nRst, $03
0008C53B ECF5                       	smpsPSGAlterVol     $F5
0008C53D 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008C541 EC04                       	smpsPSGAlterVol     $04
0008C543 E701                       	dc.b	smpsNoAttack, $01
0008C545 ECFC                       	smpsPSGAlterVol     $FC
0008C547 9103 9103                  	dc.b	nE1, $03, nE1, $03
0008C54B EC04                       	smpsPSGAlterVol     $04
0008C54D E701                       	dc.b	smpsNoAttack, $01
0008C54F ECFC                       	smpsPSGAlterVol     $FC
0008C551 9106                       	dc.b	nE1, $06
0008C553 EC04                       	smpsPSGAlterVol     $04
0008C555 E701                       	dc.b	smpsNoAttack, $01
0008C557 EC07                       	smpsPSGAlterVol     $07
0008C559 8006                       	dc.b	nRst, $06
0008C55B E100                       	smpsAlterNote       $00
0008C55D 01                         	dc.b	$01
0008C55E E104                       	smpsAlterNote       $04
0008C560 01                         	dc.b	$01
0008C561 E100                       	smpsAlterNote       $00
0008C563 01                         	dc.b	$01
0008C564 E1FA                       	smpsAlterNote       $FA
0008C566 01                         	dc.b	$01
0008C567 E1F9                       	smpsAlterNote       $F9
0008C569 01                         	dc.b	$01
0008C56A E1FD                       	smpsAlterNote       $FD
0008C56C 01                         	dc.b	$01
0008C56D E103                       	smpsAlterNote       $03
0008C56F 01                         	dc.b	$01
0008C570 E104                       	smpsAlterNote       $04
0008C572 01                         	dc.b	$01
0008C573 E100                       	smpsAlterNote       $00
0008C575 01                         	dc.b	$01
0008C576 E1FA                       	smpsAlterNote       $FA
0008C578 0101                       	dc.b	$01, $01
0008C57A E1FD                       	smpsAlterNote       $FD
0008C57C ECF5                       	smpsPSGAlterVol     $F5
0008C57E 9206                       	dc.b	nF1, $06
0008C580 EC04                       	smpsPSGAlterVol     $04
0008C582 E701                       	dc.b	smpsNoAttack, $01
0008C584 EC07                       	smpsPSGAlterVol     $07
0008C586 8003                       	dc.b	nRst, $03
0008C588 ECF5                       	smpsPSGAlterVol     $F5
0008C58A 9206                       	dc.b	nF1, $06
0008C58C EC04                       	smpsPSGAlterVol     $04
0008C58E E701                       	dc.b	smpsNoAttack, $01
0008C590 EC07                       	smpsPSGAlterVol     $07
0008C592 8006                       	dc.b	nRst, $06
0008C594 E100                       	smpsAlterNote       $00
0008C596 01                         	dc.b	$01
0008C597 E104                       	smpsAlterNote       $04
0008C599 01                         	dc.b	$01
0008C59A E103                       	smpsAlterNote       $03
0008C59C 01                         	dc.b	$01
0008C59D E1FD                       	smpsAlterNote       $FD
0008C59F 01                         	dc.b	$01
0008C5A0 ECF5                       	smpsPSGAlterVol     $F5
0008C5A2 9407                       	dc.b	nG1, $07
0008C5A4 EC0B                       	smpsPSGAlterVol     $0B
0008C5A6 8004                       	dc.b	nRst, $04
0008C5A8 ECF5                       	smpsPSGAlterVol     $F5
0008C5AA 9406                       	dc.b	nG1, $06
0008C5AC EC0B                       	smpsPSGAlterVol     $0B
0008C5AE 8007                       	dc.b	nRst, $07
0008C5B0 E103                       	smpsAlterNote       $03
0008C5B2 0101                       	dc.b	$01, $01
0008C5B4 E1FD                       	smpsAlterNote       $FD
0008C5B6 01                         	dc.b	$01
0008C5B7 E1F9                       	smpsAlterNote       $F9
0008C5B9 01                         	dc.b	$01
0008C5BA E1FD                       	smpsAlterNote       $FD
0008C5BC ECF5                       	smpsPSGAlterVol     $F5
0008C5BE 9206                       	dc.b	nF1, $06
0008C5C0 EC04                       	smpsPSGAlterVol     $04
0008C5C2 E701                       	dc.b	smpsNoAttack, $01
0008C5C4 EC07                       	smpsPSGAlterVol     $07
0008C5C6 8003                       	dc.b	nRst, $03
0008C5C8 ECF5                       	smpsPSGAlterVol     $F5
0008C5CA 9206                       	dc.b	nF1, $06
0008C5CC EC04                       	smpsPSGAlterVol     $04
0008C5CE E701                       	dc.b	smpsNoAttack, $01
0008C5D0 EC07                       	smpsPSGAlterVol     $07
0008C5D2 8006                       	dc.b	nRst, $06
0008C5D4 E100                       	smpsAlterNote       $00
0008C5D6 01                         	dc.b	$01
0008C5D7 E104                       	smpsAlterNote       $04
0008C5D9 01                         	dc.b	$01
0008C5DA E100                       	smpsAlterNote       $00
0008C5DC 01                         	dc.b	$01
0008C5DD E1FA                       	smpsAlterNote       $FA
0008C5DF 01                         	dc.b	$01
0008C5E0 E1FD                       	smpsAlterNote       $FD
0008C5E2 ECF5                       	smpsPSGAlterVol     $F5
0008C5E4 9206                       	dc.b	nF1, $06
0008C5E6 EC04                       	smpsPSGAlterVol     $04
0008C5E8 E701                       	dc.b	smpsNoAttack, $01
0008C5EA EC07                       	smpsPSGAlterVol     $07
0008C5EC 8003                       	dc.b	nRst, $03
0008C5EE ECF5                       	smpsPSGAlterVol     $F5
0008C5F0 9107                       	dc.b	nE1, $07
0008C5F2 EC0B                       	smpsPSGAlterVol     $0B
0008C5F4 8006                       	dc.b	nRst, $06
0008C5F6 E100                       	smpsAlterNote       $00
0008C5F8 01                         	dc.b	$01
0008C5F9 E103                       	smpsAlterNote       $03
0008C5FB 0101                       	dc.b	$01, $01
0008C5FD E1FD                       	smpsAlterNote       $FD
0008C5FF 01                         	dc.b	$01
0008C600 ECF5                       	smpsPSGAlterVol     $F5
0008C602 9207                       	dc.b	nF1, $07
0008C604 EC0B                       	smpsPSGAlterVol     $0B
0008C606 8004                       	dc.b	nRst, $04
0008C608 ECF5                       	smpsPSGAlterVol     $F5
0008C60A 9206                       	dc.b	nF1, $06
0008C60C EC04                       	smpsPSGAlterVol     $04
0008C60E E701                       	dc.b	smpsNoAttack, $01
0008C610 EC07                       	smpsPSGAlterVol     $07
0008C612 8006                       	dc.b	nRst, $06
0008C614 E103                       	smpsAlterNote       $03
0008C616 01                         	dc.b	$01
0008C617 E104                       	smpsAlterNote       $04
0008C619 01                         	dc.b	$01
0008C61A E100                       	smpsAlterNote       $00
0008C61C 01                         	dc.b	$01
0008C61D E1FB                       	smpsAlterNote       $FB
0008C61F 01                         	dc.b	$01
0008C620 E1FD                       	smpsAlterNote       $FD
0008C622 ECF5                       	smpsPSGAlterVol     $F5
0008C624 9406                       	dc.b	nG1, $06
0008C626 EC04                       	smpsPSGAlterVol     $04
0008C628 E701                       	dc.b	smpsNoAttack, $01
0008C62A EC07                       	smpsPSGAlterVol     $07
0008C62C 8003                       	dc.b	nRst, $03
0008C62E ECF5                       	smpsPSGAlterVol     $F5
0008C630 9406                       	dc.b	nG1, $06
0008C632 EC04                       	smpsPSGAlterVol     $04
0008C634 E701                       	dc.b	smpsNoAttack, $01
0008C636 EC07                       	smpsPSGAlterVol     $07
0008C638 8006                       	dc.b	nRst, $06
0008C63A E100                       	smpsAlterNote       $00
0008C63C 01                         	dc.b	$01
0008C63D E104                       	smpsAlterNote       $04
0008C63F 01                         	dc.b	$01
0008C640 E100                       	smpsAlterNote       $00
0008C642 01                         	dc.b	$01
0008C643 E1FD                       	smpsAlterNote       $FD
0008C645 01                         	dc.b	$01
0008C646 ECF5                       	smpsPSGAlterVol     $F5
0008C648 9206                       	dc.b	nF1, $06
0008C64A EC04                       	smpsPSGAlterVol     $04
0008C64C E701                       	dc.b	smpsNoAttack, $01
0008C64E EC07                       	smpsPSGAlterVol     $07
0008C650 8003                       	dc.b	nRst, $03
0008C652 ECF5                       	smpsPSGAlterVol     $F5
0008C654 9207                       	dc.b	nF1, $07
0008C656 EC0B                       	smpsPSGAlterVol     $0B
0008C658 8007                       	dc.b	nRst, $07
0008C65A E103                       	smpsAlterNote       $03
0008C65C 0101                       	dc.b	$01, $01
0008C65E E1FD                       	smpsAlterNote       $FD
0008C660 01                         	dc.b	$01
0008C661 E1FA                       	smpsAlterNote       $FA
0008C663 01                         	dc.b	$01
0008C664 E1FD                       	smpsAlterNote       $FD
0008C666 ECF5                       	smpsPSGAlterVol     $F5
0008C668 9206                       	dc.b	nF1, $06
0008C66A EC0B                       	smpsPSGAlterVol     $0B
0008C66C 8004                       	dc.b	nRst, $04
0008C66E ECF5                       	smpsPSGAlterVol     $F5
0008C670 9206                       	dc.b	nF1, $06
0008C672 EC04                       	smpsPSGAlterVol     $04
0008C674 E701                       	dc.b	smpsNoAttack, $01
0008C676 EC07                       	smpsPSGAlterVol     $07
0008C678 8006                       	dc.b	nRst, $06
0008C67A E100                       	smpsAlterNote       $00
0008C67C 01                         	dc.b	$01
0008C67D E104                       	smpsAlterNote       $04
0008C67F 01                         	dc.b	$01
0008C680 E100                       	smpsAlterNote       $00
0008C682 01                         	dc.b	$01
0008C683 E1FA                       	smpsAlterNote       $FA
0008C685 01                         	dc.b	$01
0008C686 E1FD                       	smpsAlterNote       $FD
0008C688 ECF5                       	smpsPSGAlterVol     $F5
0008C68A 9206                       	dc.b	nF1, $06
0008C68C EC04                       	smpsPSGAlterVol     $04
0008C68E E704                       	dc.b	smpsNoAttack, $04
0008C690 ECFC                       	smpsPSGAlterVol     $FC
0008C692 9207                       	dc.b	nF1, $07
0008C694 EC0B                       	smpsPSGAlterVol     $0B
0008C696 8006                       	dc.b	nRst, $06
0008C698 E100                       	smpsAlterNote       $00
0008C69A 01                         	dc.b	$01
0008C69B E104                       	smpsAlterNote       $04
0008C69D 01                         	dc.b	$01
0008C69E E103                       	smpsAlterNote       $03
0008C6A0 01                         	dc.b	$01
0008C6A1 E1FD                       	smpsAlterNote       $FD
0008C6A3 01                         	dc.b	$01
0008C6A4 ECF5                       	smpsPSGAlterVol     $F5
0008C6A6 9207                       	dc.b	nF1, $07
0008C6A8 EC0B                       	smpsPSGAlterVol     $0B
0008C6AA 8004                       	dc.b	nRst, $04
0008C6AC ECF5                       	smpsPSGAlterVol     $F5
0008C6AE 9206                       	dc.b	nF1, $06
0008C6B0 EC0B                       	smpsPSGAlterVol     $0B
0008C6B2 8007                       	dc.b	nRst, $07
0008C6B4 E103                       	smpsAlterNote       $03
0008C6B6 0101                       	dc.b	$01, $01
0008C6B8 E100                       	smpsAlterNote       $00
0008C6BA 01                         	dc.b	$01
0008C6BB E1FA                       	smpsAlterNote       $FA
0008C6BD 01                         	dc.b	$01
0008C6BE E1FD                       	smpsAlterNote       $FD
0008C6C0 ECF5                       	smpsPSGAlterVol     $F5
0008C6C2 9206                       	dc.b	nF1, $06
0008C6C4 EC04                       	smpsPSGAlterVol     $04
0008C6C6 E704                       	dc.b	smpsNoAttack, $04
0008C6C8 ECFC                       	smpsPSGAlterVol     $FC
0008C6CA 9206                       	dc.b	nF1, $06
0008C6CC EC04                       	smpsPSGAlterVol     $04
0008C6CE E701                       	dc.b	smpsNoAttack, $01
0008C6D0 EC07                       	smpsPSGAlterVol     $07
0008C6D2 8006                       	dc.b	nRst, $06
0008C6D4 E100                       	smpsAlterNote       $00
0008C6D6 01                         	dc.b	$01
0008C6D7 E104                       	smpsAlterNote       $04
0008C6D9 01                         	dc.b	$01
0008C6DA E100                       	smpsAlterNote       $00
0008C6DC 01                         	dc.b	$01
0008C6DD E1FD                       	smpsAlterNote       $FD
0008C6DF 01                         	dc.b	$01
0008C6E0 ECF5                       	smpsPSGAlterVol     $F5
0008C6E2 9206                       	dc.b	nF1, $06
0008C6E4 EC04                       	smpsPSGAlterVol     $04
0008C6E6 E701                       	dc.b	smpsNoAttack, $01
0008C6E8 EC07                       	smpsPSGAlterVol     $07
0008C6EA 8003                       	dc.b	nRst, $03
0008C6EC ECF5                       	smpsPSGAlterVol     $F5
0008C6EE 9207                       	dc.b	nF1, $07
0008C6F0 EC0B                       	smpsPSGAlterVol     $0B
0008C6F2 8007                       	dc.b	nRst, $07
0008C6F4 E103                       	smpsAlterNote       $03
0008C6F6 0101                       	dc.b	$01, $01
0008C6F8 E1FD                       	smpsAlterNote       $FD
0008C6FA 01                         	dc.b	$01
0008C6FB E1FA                       	smpsAlterNote       $FA
0008C6FD 01                         	dc.b	$01
0008C6FE E1FD                       	smpsAlterNote       $FD
0008C700 ECF5                       	smpsPSGAlterVol     $F5
0008C702 9106                       	dc.b	nE1, $06
0008C704 EC0B                       	smpsPSGAlterVol     $0B
0008C706 8004                       	dc.b	nRst, $04
0008C708 ECF5                       	smpsPSGAlterVol     $F5
0008C70A 9106                       	dc.b	nE1, $06
0008C70C EC04                       	smpsPSGAlterVol     $04
0008C70E E701                       	dc.b	smpsNoAttack, $01
0008C710 EC07                       	smpsPSGAlterVol     $07
0008C712 8006                       	dc.b	nRst, $06
0008C714 E100                       	smpsAlterNote       $00
0008C716 01                         	dc.b	$01
0008C717 E104                       	smpsAlterNote       $04
0008C719 01                         	dc.b	$01
0008C71A E100                       	smpsAlterNote       $00
0008C71C 01                         	dc.b	$01
0008C71D E1FA                       	smpsAlterNote       $FA
0008C71F 01                         	dc.b	$01
0008C720 E1FD                       	smpsAlterNote       $FD
0008C722 ECF5                       	smpsPSGAlterVol     $F5
0008C724 9106                       	dc.b	nE1, $06
0008C726 EC04                       	smpsPSGAlterVol     $04
0008C728 E701                       	dc.b	smpsNoAttack, $01
0008C72A EC07                       	smpsPSGAlterVol     $07
0008C72C 8003                       	dc.b	nRst, $03
0008C72E ECF5                       	smpsPSGAlterVol     $F5
0008C730 9106                       	dc.b	nE1, $06
0008C732 EC04                       	smpsPSGAlterVol     $04
0008C734 E701                       	dc.b	smpsNoAttack, $01
0008C736 EC07                       	smpsPSGAlterVol     $07
0008C738 8006                       	dc.b	nRst, $06
0008C73A E100                       	smpsAlterNote       $00
0008C73C 01                         	dc.b	$01
0008C73D E104                       	smpsAlterNote       $04
0008C73F 01                         	dc.b	$01
0008C740 E103                       	smpsAlterNote       $03
0008C742 01                         	dc.b	$01
0008C743 E1FD                       	smpsAlterNote       $FD
0008C745 01                         	dc.b	$01
0008C746 ECF5                       	smpsPSGAlterVol     $F5
0008C748 9107                       	dc.b	nE1, $07
0008C74A EC0B                       	smpsPSGAlterVol     $0B
0008C74C 8004                       	dc.b	nRst, $04
0008C74E ECF5                       	smpsPSGAlterVol     $F5
0008C750 9106                       	dc.b	nE1, $06
0008C752 EC0B                       	smpsPSGAlterVol     $0B
0008C754 8007                       	dc.b	nRst, $07
0008C756 E103                       	smpsAlterNote       $03
0008C758 0101                       	dc.b	$01, $01
0008C75A E100                       	smpsAlterNote       $00
0008C75C 01                         	dc.b	$01
0008C75D E1FA                       	smpsAlterNote       $FA
0008C75F 01                         	dc.b	$01
0008C760 E1FD                       	smpsAlterNote       $FD
0008C762 ECF5                       	smpsPSGAlterVol     $F5
0008C764 9106                       	dc.b	nE1, $06
0008C766 EC04                       	smpsPSGAlterVol     $04
0008C768 E701                       	dc.b	smpsNoAttack, $01
0008C76A EC07                       	smpsPSGAlterVol     $07
0008C76C 8003                       	dc.b	nRst, $03
0008C76E ECF5                       	smpsPSGAlterVol     $F5
0008C770 9106                       	dc.b	nE1, $06
0008C772 EC04                       	smpsPSGAlterVol     $04
0008C774 E701                       	dc.b	smpsNoAttack, $01
0008C776 EC07                       	smpsPSGAlterVol     $07
0008C778 8003                       	dc.b	nRst, $03
0008C77A ECF5                       	smpsPSGAlterVol     $F5
0008C77C 9207                       	dc.b	nF1, $07
0008C77E EC0B                       	smpsPSGAlterVol     $0B
0008C780 8006                       	dc.b	nRst, $06
0008C782 E100                       	smpsAlterNote       $00
0008C784 01                         	dc.b	$01
0008C785 E104                       	smpsAlterNote       $04
0008C787 01                         	dc.b	$01
0008C788 E103                       	smpsAlterNote       $03
0008C78A 01                         	dc.b	$01
0008C78B E1FD                       	smpsAlterNote       $FD
0008C78D 01                         	dc.b	$01
0008C78E E1F9                       	smpsAlterNote       $F9
0008C790 01                         	dc.b	$01
0008C791 E1FD                       	smpsAlterNote       $FD
0008C793 01                         	dc.b	$01
0008C794 E100                       	smpsAlterNote       $00
0008C796 01                         	dc.b	$01
0008C797 E104                       	smpsAlterNote       $04
0008C799 01                         	dc.b	$01
0008C79A E1FD                       	smpsAlterNote       $FD
0008C79C ECF5                       	smpsPSGAlterVol     $F5
0008C79E 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008C7A2 EC04                       	smpsPSGAlterVol     $04
0008C7A4 E701                       	dc.b	smpsNoAttack, $01
0008C7A6 EC07                       	smpsPSGAlterVol     $07
0008C7A8 8009                       	dc.b	nRst, $09
0008C7AA E100                       	smpsAlterNote       $00
0008C7AC 01                         	dc.b	$01
0008C7AD E104                       	smpsAlterNote       $04
0008C7AF 01                         	dc.b	$01
0008C7B0 E103                       	smpsAlterNote       $03
0008C7B2 01                         	dc.b	$01
0008C7B3 E1FD                       	smpsAlterNote       $FD
0008C7B5 01                         	dc.b	$01
0008C7B6 E1F9                       	smpsAlterNote       $F9
0008C7B8 01                         	dc.b	$01
0008C7B9 E1FD                       	smpsAlterNote       $FD
0008C7BB 01                         	dc.b	$01
0008C7BC E100                       	smpsAlterNote       $00
0008C7BE 01                         	dc.b	$01
0008C7BF E104                       	smpsAlterNote       $04
0008C7C1 01                         	dc.b	$01
0008C7C2 E100                       	smpsAlterNote       $00
0008C7C4 01                         	dc.b	$01
0008C7C5 E1FA                       	smpsAlterNote       $FA
0008C7C7 01                         	dc.b	$01
0008C7C8 E1F9                       	smpsAlterNote       $F9
0008C7CA 01                         	dc.b	$01
0008C7CB E1FD                       	smpsAlterNote       $FD
0008C7CD 01                         	dc.b	$01
0008C7CE E103                       	smpsAlterNote       $03
0008C7D0 0101                       	dc.b	$01, $01
0008C7D2 E100                       	smpsAlterNote       $00
0008C7D4 01                         	dc.b	$01
0008C7D5 E1FD                       	smpsAlterNote       $FD
0008C7D7 ECF5                       	smpsPSGAlterVol     $F5
0008C7D9 9202                       	dc.b	nF1, $02
0008C7DB EC04                       	smpsPSGAlterVol     $04
0008C7DD E701                       	dc.b	smpsNoAttack, $01
0008C7DF ECFC                       	smpsPSGAlterVol     $FC
0008C7E1 9106                       	dc.b	nE1, $06
0008C7E3 EC04                       	smpsPSGAlterVol     $04
0008C7E5 E701                       	dc.b	smpsNoAttack, $01
0008C7E7 EC07                       	smpsPSGAlterVol     $07
0008C7E9 8006                       	dc.b	nRst, $06
0008C7EB E100                       	smpsAlterNote       $00
0008C7ED 01                         	dc.b	$01
0008C7EE E104                       	smpsAlterNote       $04
0008C7F0 01                         	dc.b	$01
0008C7F1 E100                       	smpsAlterNote       $00
0008C7F3 01                         	dc.b	$01
0008C7F4 E1FD                       	smpsAlterNote       $FD
0008C7F6 01                         	dc.b	$01
0008C7F7 E1F9                       	smpsAlterNote       $F9
0008C7F9 01                         	dc.b	$01
0008C7FA E1FD                       	smpsAlterNote       $FD
0008C7FC 01                         	dc.b	$01
0008C7FD E103                       	smpsAlterNote       $03
0008C7FF 01                         	dc.b	$01
0008C800 E104                       	smpsAlterNote       $04
0008C802 01                         	dc.b	$01
0008C803 E1FD                       	smpsAlterNote       $FD
0008C805 ECF5                       	smpsPSGAlterVol     $F5
0008C807 9102                       	dc.b	nE1, $02
0008C809 EC04                       	smpsPSGAlterVol     $04
0008C80B E701                       	dc.b	smpsNoAttack, $01
0008C80D ECFC                       	smpsPSGAlterVol     $FC
0008C80F 920D                       	dc.b	nF1, $0D
0008C811 E100                       	smpsAlterNote       $00
0008C813 E701                       	dc.b	smpsNoAttack, $01
0008C815 E104                       	smpsAlterNote       $04
0008C817 E701                       	dc.b	smpsNoAttack, $01
0008C819 E100                       	smpsAlterNote       $00
0008C81B E701                       	dc.b	smpsNoAttack, $01
0008C81D E1FD                       	smpsAlterNote       $FD
0008C81F E701                       	dc.b	smpsNoAttack, $01
0008C821 E1F9                       	smpsAlterNote       $F9
0008C823 E701                       	dc.b	smpsNoAttack, $01
0008C825 E1FD                       	smpsAlterNote       $FD
0008C827 E701                       	dc.b	smpsNoAttack, $01
0008C829 E103                       	smpsAlterNote       $03
0008C82B E701                       	dc.b	smpsNoAttack, $01
0008C82D E104                       	smpsAlterNote       $04
0008C82F E701                       	dc.b	smpsNoAttack, $01
0008C831 E100                       	smpsAlterNote       $00
0008C833 E701                       	dc.b	smpsNoAttack, $01
0008C835 E1FA                       	smpsAlterNote       $FA
0008C837 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C83B E1FD                       	smpsAlterNote       $FD
0008C83D E701                       	dc.b	smpsNoAttack, $01
0008C83F E103                       	smpsAlterNote       $03
0008C841 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C845 E1FD                       	smpsAlterNote       $FD
0008C847 E701                       	dc.b	smpsNoAttack, $01
0008C849 E1F9                       	smpsAlterNote       $F9
0008C84B E701                       	dc.b	smpsNoAttack, $01
0008C84D E1FA                       	smpsAlterNote       $FA
0008C84F E701                       	dc.b	smpsNoAttack, $01
0008C851 E100                       	smpsAlterNote       $00
0008C853 EC04                       	smpsPSGAlterVol     $04
0008C855 E701                       	dc.b	smpsNoAttack, $01
0008C857 EC07                       	smpsPSGAlterVol     $07
0008C859 E104                       	smpsAlterNote       $04
0008C85B 8001                       	dc.b	nRst, $01
0008C85D E100                       	smpsAlterNote       $00
0008C85F 01                         	dc.b	$01
0008C860 E1FD                       	smpsAlterNote       $FD
0008C862 01                         	dc.b	$01
0008C863 E1F9                       	smpsAlterNote       $F9
0008C865 01                         	dc.b	$01
0008C866 E1FD                       	smpsAlterNote       $FD
0008C868 01                         	dc.b	$01
0008C869 E103                       	smpsAlterNote       $03
0008C86B 01                         	dc.b	$01
0008C86C E104                       	smpsAlterNote       $04
0008C86E 01                         	dc.b	$01
0008C86F E1FD                       	smpsAlterNote       $FD
0008C871 ECF5                       	smpsPSGAlterVol     $F5
0008C873 9106                       	dc.b	nE1, $06
0008C875 EC04                       	smpsPSGAlterVol     $04
0008C877 E701                       	dc.b	smpsNoAttack, $01
0008C879 EC07                       	smpsPSGAlterVol     $07
0008C87B 8003                       	dc.b	nRst, $03
0008C87D ECF5                       	smpsPSGAlterVol     $F5
0008C87F 9106                       	dc.b	nE1, $06
0008C881 EC04                       	smpsPSGAlterVol     $04
0008C883 E701                       	dc.b	smpsNoAttack, $01
0008C885 EC07                       	smpsPSGAlterVol     $07
0008C887 8006                       	dc.b	nRst, $06
0008C889 E100                       	smpsAlterNote       $00
0008C88B 01                         	dc.b	$01
0008C88C E104                       	smpsAlterNote       $04
0008C88E 01                         	dc.b	$01
0008C88F E100                       	smpsAlterNote       $00
0008C891 01                         	dc.b	$01
0008C892 E1FA                       	smpsAlterNote       $FA
0008C894 01                         	dc.b	$01
0008C895 E1FD                       	smpsAlterNote       $FD
0008C897 ECF5                       	smpsPSGAlterVol     $F5
0008C899 9206                       	dc.b	nF1, $06
0008C89B EC04                       	smpsPSGAlterVol     $04
0008C89D E701                       	dc.b	smpsNoAttack, $01
0008C89F EC07                       	smpsPSGAlterVol     $07
0008C8A1 8003                       	dc.b	nRst, $03
0008C8A3 ECF5                       	smpsPSGAlterVol     $F5
0008C8A5 9207                       	dc.b	nF1, $07
0008C8A7 EC0B                       	smpsPSGAlterVol     $0B
0008C8A9 8006                       	dc.b	nRst, $06
0008C8AB E100                       	smpsAlterNote       $00
0008C8AD 01                         	dc.b	$01
0008C8AE E103                       	smpsAlterNote       $03
0008C8B0 0101                       	dc.b	$01, $01
0008C8B2 E1FD                       	smpsAlterNote       $FD
0008C8B4 01                         	dc.b	$01
0008C8B5 ECF5                       	smpsPSGAlterVol     $F5
0008C8B7 9107                       	dc.b	nE1, $07
0008C8B9 EC0B                       	smpsPSGAlterVol     $0B
0008C8BB 8004                       	dc.b	nRst, $04
0008C8BD ECF5                       	smpsPSGAlterVol     $F5
0008C8BF 9106                       	dc.b	nE1, $06
0008C8C1 EC04                       	smpsPSGAlterVol     $04
0008C8C3 E701                       	dc.b	smpsNoAttack, $01
0008C8C5 EC07                       	smpsPSGAlterVol     $07
0008C8C7 8006                       	dc.b	nRst, $06
0008C8C9 E103                       	smpsAlterNote       $03
0008C8CB 01                         	dc.b	$01
0008C8CC E104                       	smpsAlterNote       $04
0008C8CE 01                         	dc.b	$01
0008C8CF E100                       	smpsAlterNote       $00
0008C8D1 01                         	dc.b	$01
0008C8D2 E1FA                       	smpsAlterNote       $FA
0008C8D4 01                         	dc.b	$01
0008C8D5 E1FD                       	smpsAlterNote       $FD
0008C8D7 ECF5                       	smpsPSGAlterVol     $F5
0008C8D9 9106                       	dc.b	nE1, $06
0008C8DB EC04                       	smpsPSGAlterVol     $04
0008C8DD E701                       	dc.b	smpsNoAttack, $01
0008C8DF EC07                       	smpsPSGAlterVol     $07
0008C8E1 8003                       	dc.b	nRst, $03
0008C8E3 ECF5                       	smpsPSGAlterVol     $F5
0008C8E5 9106                       	dc.b	nE1, $06
0008C8E7 EC04                       	smpsPSGAlterVol     $04
0008C8E9 E701                       	dc.b	smpsNoAttack, $01
0008C8EB EC07                       	smpsPSGAlterVol     $07
0008C8ED 8003                       	dc.b	nRst, $03
0008C8EF ECF5                       	smpsPSGAlterVol     $F5
0008C8F1 9207                       	dc.b	nF1, $07
0008C8F3 EC0B                       	smpsPSGAlterVol     $0B
0008C8F5 8006                       	dc.b	nRst, $06
0008C8F7 E100                       	smpsAlterNote       $00
0008C8F9 01                         	dc.b	$01
0008C8FA E103                       	smpsAlterNote       $03
0008C8FC 0101                       	dc.b	$01, $01
0008C8FE E1FD                       	smpsAlterNote       $FD
0008C900 01                         	dc.b	$01
0008C901 E1F9                       	smpsAlterNote       $F9
0008C903 01                         	dc.b	$01
0008C904 E1FA                       	smpsAlterNote       $FA
0008C906 01                         	dc.b	$01
0008C907 E100                       	smpsAlterNote       $00
0008C909 01                         	dc.b	$01
0008C90A E104                       	smpsAlterNote       $04
0008C90C 01                         	dc.b	$01
0008C90D E1FD                       	smpsAlterNote       $FD
0008C90F ECF5                       	smpsPSGAlterVol     $F5
0008C911 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008C915 EC04                       	smpsPSGAlterVol     $04
0008C917 E701                       	dc.b	smpsNoAttack, $01
0008C919 EC07                       	smpsPSGAlterVol     $07
0008C91B 8009                       	dc.b	nRst, $09
0008C91D E100                       	smpsAlterNote       $00
0008C91F 01                         	dc.b	$01
0008C920 E103                       	smpsAlterNote       $03
0008C922 0101                       	dc.b	$01, $01
0008C924 E1FD                       	smpsAlterNote       $FD
0008C926 01                         	dc.b	$01
0008C927 E1F9                       	smpsAlterNote       $F9
0008C929 01                         	dc.b	$01
0008C92A E1FA                       	smpsAlterNote       $FA
0008C92C 01                         	dc.b	$01
0008C92D E100                       	smpsAlterNote       $00
0008C92F 01                         	dc.b	$01
0008C930 E104                       	smpsAlterNote       $04
0008C932 01                         	dc.b	$01
0008C933 E100                       	smpsAlterNote       $00
0008C935 01                         	dc.b	$01
0008C936 E1FD                       	smpsAlterNote       $FD
0008C938 01                         	dc.b	$01
0008C939 E1F9                       	smpsAlterNote       $F9
0008C93B 01                         	dc.b	$01
0008C93C E1FD                       	smpsAlterNote       $FD
0008C93E 01                         	dc.b	$01
0008C93F E103                       	smpsAlterNote       $03
0008C941 01                         	dc.b	$01
0008C942 E104                       	smpsAlterNote       $04
0008C944 01                         	dc.b	$01
0008C945 E100                       	smpsAlterNote       $00
0008C947 01                         	dc.b	$01
0008C948 E1FD                       	smpsAlterNote       $FD
0008C94A ECF5                       	smpsPSGAlterVol     $F5
0008C94C 9203 9106                  	dc.b	nF1, $03, nE1, $06
0008C950 EC04                       	smpsPSGAlterVol     $04
0008C952 E701                       	dc.b	smpsNoAttack, $01
0008C954 EC07                       	smpsPSGAlterVol     $07
0008C956 8006                       	dc.b	nRst, $06
0008C958 E100                       	smpsAlterNote       $00
0008C95A 01                         	dc.b	$01
0008C95B E104                       	smpsAlterNote       $04
0008C95D 01                         	dc.b	$01
0008C95E E103                       	smpsAlterNote       $03
0008C960 01                         	dc.b	$01
0008C961 E1FD                       	smpsAlterNote       $FD
0008C963 01                         	dc.b	$01
0008C964 E1F9                       	smpsAlterNote       $F9
0008C966 01                         	dc.b	$01
0008C967 E1FD                       	smpsAlterNote       $FD
0008C969 01                         	dc.b	$01
0008C96A E100                       	smpsAlterNote       $00
0008C96C 01                         	dc.b	$01
0008C96D E104                       	smpsAlterNote       $04
0008C96F 01                         	dc.b	$01
0008C970 E1FD                       	smpsAlterNote       $FD
0008C972 ECF5                       	smpsPSGAlterVol     $F5
0008C974 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0008C978 E100                       	smpsAlterNote       $00
0008C97A E701                       	dc.b	smpsNoAttack, $01
0008C97C E104                       	smpsAlterNote       $04
0008C97E E701                       	dc.b	smpsNoAttack, $01
0008C980 E100                       	smpsAlterNote       $00
0008C982 E701                       	dc.b	smpsNoAttack, $01
0008C984 E1FD                       	smpsAlterNote       $FD
0008C986 E701                       	dc.b	smpsNoAttack, $01
0008C988 E1F9                       	smpsAlterNote       $F9
0008C98A E701                       	dc.b	smpsNoAttack, $01
0008C98C E1FD                       	smpsAlterNote       $FD
0008C98E E701                       	dc.b	smpsNoAttack, $01
0008C990 E103                       	smpsAlterNote       $03
0008C992 E701                       	dc.b	smpsNoAttack, $01
0008C994 E104                       	smpsAlterNote       $04
0008C996 E701                       	dc.b	smpsNoAttack, $01
0008C998 E100                       	smpsAlterNote       $00
0008C99A E701                       	dc.b	smpsNoAttack, $01
0008C99C E1FA                       	smpsAlterNote       $FA
0008C99E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9A2 E1FD                       	smpsAlterNote       $FD
0008C9A4 E701                       	dc.b	smpsNoAttack, $01
0008C9A6 E103                       	smpsAlterNote       $03
0008C9A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9AC E100                       	smpsAlterNote       $00
0008C9AE E701                       	dc.b	smpsNoAttack, $01
0008C9B0 E1FA                       	smpsAlterNote       $FA
0008C9B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9B6 E100                       	smpsAlterNote       $00
0008C9B8 EC04                       	smpsPSGAlterVol     $04
0008C9BA E701                       	dc.b	smpsNoAttack, $01
0008C9BC EC07                       	smpsPSGAlterVol     $07
0008C9BE E104                       	smpsAlterNote       $04
0008C9C0 8001                       	dc.b	nRst, $01
0008C9C2 E103                       	smpsAlterNote       $03
0008C9C4 01                         	dc.b	$01
0008C9C5 E1FD                       	smpsAlterNote       $FD
0008C9C7 01                         	dc.b	$01
0008C9C8 E1F9                       	smpsAlterNote       $F9
0008C9CA 01                         	dc.b	$01
0008C9CB E1FD                       	smpsAlterNote       $FD
0008C9CD 01                         	dc.b	$01
0008C9CE E100                       	smpsAlterNote       $00
0008C9D0 01                         	dc.b	$01
0008C9D1 E104                       	smpsAlterNote       $04
0008C9D3 01                         	dc.b	$01
0008C9D4 E1FD                       	smpsAlterNote       $FD
0008C9D6 ECF5                       	smpsPSGAlterVol     $F5
0008C9D8 9106                       	dc.b	nE1, $06
0008C9DA EC04                       	smpsPSGAlterVol     $04
0008C9DC E701                       	dc.b	smpsNoAttack, $01
0008C9DE EC07                       	smpsPSGAlterVol     $07
0008C9E0 8003                       	dc.b	nRst, $03
0008C9E2 ECF5                       	smpsPSGAlterVol     $F5
0008C9E4 9106                       	dc.b	nE1, $06
0008C9E6 EC04                       	smpsPSGAlterVol     $04
0008C9E8 E701                       	dc.b	smpsNoAttack, $01
0008C9EA EC07                       	smpsPSGAlterVol     $07
0008C9EC 8006                       	dc.b	nRst, $06
0008C9EE E100                       	smpsAlterNote       $00
0008C9F0 01                         	dc.b	$01
0008C9F1 E104                       	smpsAlterNote       $04
0008C9F3 01                         	dc.b	$01
0008C9F4 E100                       	smpsAlterNote       $00
0008C9F6 01                         	dc.b	$01
0008C9F7 E1FD                       	smpsAlterNote       $FD
0008C9F9 01                         	dc.b	$01
0008C9FA ECF5                       	smpsPSGAlterVol     $F5
0008C9FC 9206                       	dc.b	nF1, $06
0008C9FE EC04                       	smpsPSGAlterVol     $04
0008CA00 E701                       	dc.b	smpsNoAttack, $01
0008CA02 EC07                       	smpsPSGAlterVol     $07
0008CA04 8003                       	dc.b	nRst, $03
0008CA06 ECF5                       	smpsPSGAlterVol     $F5
0008CA08 9207                       	dc.b	nF1, $07
0008CA0A EC0B                       	smpsPSGAlterVol     $0B
0008CA0C 8007                       	dc.b	nRst, $07
0008CA0E E103                       	smpsAlterNote       $03
0008CA10 0101                       	dc.b	$01, $01
0008CA12 E1FD                       	smpsAlterNote       $FD
0008CA14 01                         	dc.b	$01
0008CA15 E1FA                       	smpsAlterNote       $FA
0008CA17 01                         	dc.b	$01
0008CA18 E1FD                       	smpsAlterNote       $FD
0008CA1A ECF5                       	smpsPSGAlterVol     $F5
0008CA1C 9106                       	dc.b	nE1, $06
0008CA1E EC0B                       	smpsPSGAlterVol     $0B
0008CA20 8004                       	dc.b	nRst, $04
0008CA22 ECF5                       	smpsPSGAlterVol     $F5
0008CA24 9106                       	dc.b	nE1, $06
0008CA26 EC04                       	smpsPSGAlterVol     $04
0008CA28 E701                       	dc.b	smpsNoAttack, $01
0008CA2A EC07                       	smpsPSGAlterVol     $07
0008CA2C 8006                       	dc.b	nRst, $06
0008CA2E E100                       	smpsAlterNote       $00
0008CA30 01                         	dc.b	$01
0008CA31 E104                       	smpsAlterNote       $04
0008CA33 01                         	dc.b	$01
0008CA34 E100                       	smpsAlterNote       $00
0008CA36 01                         	dc.b	$01
0008CA37 E1FA                       	smpsAlterNote       $FA
0008CA39 01                         	dc.b	$01
0008CA3A E1FD                       	smpsAlterNote       $FD
0008CA3C ECF5                       	smpsPSGAlterVol     $F5
0008CA3E 9206                       	dc.b	nF1, $06
0008CA40 EC04                       	smpsPSGAlterVol     $04
0008CA42 E701                       	dc.b	smpsNoAttack, $01
0008CA44 EC07                       	smpsPSGAlterVol     $07
0008CA46 8003                       	dc.b	nRst, $03
0008CA48 ECF5                       	smpsPSGAlterVol     $F5
0008CA4A 9206                       	dc.b	nF1, $06
0008CA4C EC04                       	smpsPSGAlterVol     $04
0008CA4E E701                       	dc.b	smpsNoAttack, $01
0008CA50 EC07                       	smpsPSGAlterVol     $07
0008CA52 8006                       	dc.b	nRst, $06
0008CA54 E100                       	smpsAlterNote       $00
0008CA56 01                         	dc.b	$01
0008CA57 E104                       	smpsAlterNote       $04
0008CA59 01                         	dc.b	$01
0008CA5A E103                       	smpsAlterNote       $03
0008CA5C 01                         	dc.b	$01
0008CA5D E1FD                       	smpsAlterNote       $FD
0008CA5F 01                         	dc.b	$01
0008CA60 ECF5                       	smpsPSGAlterVol     $F5
0008CA62 9107                       	dc.b	nE1, $07
0008CA64 EC0B                       	smpsPSGAlterVol     $0B
0008CA66 8004                       	dc.b	nRst, $04
0008CA68 ECF5                       	smpsPSGAlterVol     $F5
0008CA6A 9106                       	dc.b	nE1, $06
0008CA6C EC0B                       	smpsPSGAlterVol     $0B
0008CA6E 8007                       	dc.b	nRst, $07
0008CA70 E103                       	smpsAlterNote       $03
0008CA72 0101                       	dc.b	$01, $01
0008CA74 E100                       	smpsAlterNote       $00
0008CA76 01                         	dc.b	$01
0008CA77 E1FA                       	smpsAlterNote       $FA
0008CA79 01                         	dc.b	$01
0008CA7A E1FD                       	smpsAlterNote       $FD
0008CA7C ECF5                       	smpsPSGAlterVol     $F5
0008CA7E 9206                       	dc.b	nF1, $06
0008CA80 EC04                       	smpsPSGAlterVol     $04
0008CA82 E701                       	dc.b	smpsNoAttack, $01
0008CA84 EC07                       	smpsPSGAlterVol     $07
0008CA86 8003                       	dc.b	nRst, $03
0008CA88 ECF5                       	smpsPSGAlterVol     $F5
0008CA8A 9206                       	dc.b	nF1, $06
0008CA8C EC04                       	smpsPSGAlterVol     $04
0008CA8E E701                       	dc.b	smpsNoAttack, $01
0008CA90 EC07                       	smpsPSGAlterVol     $07
0008CA92 8006                       	dc.b	nRst, $06
0008CA94 E100                       	smpsAlterNote       $00
0008CA96 01                         	dc.b	$01
0008CA97 E104                       	smpsAlterNote       $04
0008CA99 01                         	dc.b	$01
0008CA9A E100                       	smpsAlterNote       $00
0008CA9C 01                         	dc.b	$01
0008CA9D E1FD                       	smpsAlterNote       $FD
0008CA9F 01                         	dc.b	$01
0008CAA0 ECF5                       	smpsPSGAlterVol     $F5
0008CAA2 9106                       	dc.b	nE1, $06
0008CAA4 EC04                       	smpsPSGAlterVol     $04
0008CAA6 E701                       	dc.b	smpsNoAttack, $01
0008CAA8 EC07                       	smpsPSGAlterVol     $07
0008CAAA 8003                       	dc.b	nRst, $03
0008CAAC ECF5                       	smpsPSGAlterVol     $F5
0008CAAE 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008CAB2 EC04                       	smpsPSGAlterVol     $04
0008CAB4 E701                       	dc.b	smpsNoAttack, $01
0008CAB6 ECFC                       	smpsPSGAlterVol     $FC
0008CAB8 9103                       	dc.b	nE1, $03
0008CABA EC04                       	smpsPSGAlterVol     $04
0008CABC E701                       	dc.b	smpsNoAttack, $01
0008CABE ECFC                       	smpsPSGAlterVol     $FC
0008CAC0 9102                       	dc.b	nE1, $02
0008CAC2 EC04                       	smpsPSGAlterVol     $04
0008CAC4 E701                       	dc.b	smpsNoAttack, $01
0008CAC6 ECFC                       	smpsPSGAlterVol     $FC
0008CAC8 9103                       	dc.b	nE1, $03
0008CACA EC0B                       	smpsPSGAlterVol     $0B
0008CACC 800A                       	dc.b	nRst, $0A
0008CACE E100                       	smpsAlterNote       $00
0008CAD0 01                         	dc.b	$01
0008CAD1 E104                       	smpsAlterNote       $04
0008CAD3 01                         	dc.b	$01
0008CAD4 E100                       	smpsAlterNote       $00
0008CAD6 01                         	dc.b	$01
0008CAD7 E1FA                       	smpsAlterNote       $FA
0008CAD9 01                         	dc.b	$01
0008CADA E1F9                       	smpsAlterNote       $F9
0008CADC 01                         	dc.b	$01
0008CADD E1FD                       	smpsAlterNote       $FD
0008CADF 01                         	dc.b	$01
0008CAE0 E103                       	smpsAlterNote       $03
0008CAE2 0101                       	dc.b	$01, $01
0008CAE4 E100                       	smpsAlterNote       $00
0008CAE6 01                         	dc.b	$01
0008CAE7 E1FA                       	smpsAlterNote       $FA
0008CAE9 0101                       	dc.b	$01, $01
0008CAEB E1FD                       	smpsAlterNote       $FD
0008CAED ECF5                       	smpsPSGAlterVol     $F5
0008CAEF 9206                       	dc.b	nF1, $06
0008CAF1 EC04                       	smpsPSGAlterVol     $04
0008CAF3 E704                       	dc.b	smpsNoAttack, $04
0008CAF5 ECFC                       	smpsPSGAlterVol     $FC
0008CAF7 9206                       	dc.b	nF1, $06
0008CAF9 EC04                       	smpsPSGAlterVol     $04
0008CAFB E701                       	dc.b	smpsNoAttack, $01
0008CAFD EC07                       	smpsPSGAlterVol     $07
0008CAFF 8006                       	dc.b	nRst, $06
0008CB01 E100                       	smpsAlterNote       $00
0008CB03 01                         	dc.b	$01
0008CB04 E104                       	smpsAlterNote       $04
0008CB06 01                         	dc.b	$01
0008CB07 E103                       	smpsAlterNote       $03
0008CB09 01                         	dc.b	$01
0008CB0A E1FD                       	smpsAlterNote       $FD
0008CB0C 01                         	dc.b	$01
0008CB0D ECF5                       	smpsPSGAlterVol     $F5
0008CB0F 9407                       	dc.b	nG1, $07
0008CB11 EC0B                       	smpsPSGAlterVol     $0B
0008CB13 8004                       	dc.b	nRst, $04
0008CB15 ECF5                       	smpsPSGAlterVol     $F5
0008CB17 9406                       	dc.b	nG1, $06
0008CB19 EC0B                       	smpsPSGAlterVol     $0B
0008CB1B 8007                       	dc.b	nRst, $07
0008CB1D E103                       	smpsAlterNote       $03
0008CB1F 0101                       	dc.b	$01, $01
0008CB21 E1FD                       	smpsAlterNote       $FD
0008CB23 01                         	dc.b	$01
0008CB24 E1F9                       	smpsAlterNote       $F9
0008CB26 01                         	dc.b	$01
0008CB27 E1FD                       	smpsAlterNote       $FD
0008CB29 ECF5                       	smpsPSGAlterVol     $F5
0008CB2B 9206                       	dc.b	nF1, $06
0008CB2D EC04                       	smpsPSGAlterVol     $04
0008CB2F E701                       	dc.b	smpsNoAttack, $01
0008CB31 EC07                       	smpsPSGAlterVol     $07
0008CB33 8003                       	dc.b	nRst, $03
0008CB35 ECF5                       	smpsPSGAlterVol     $F5
0008CB37 9206                       	dc.b	nF1, $06
0008CB39 EC04                       	smpsPSGAlterVol     $04
0008CB3B E701                       	dc.b	smpsNoAttack, $01
0008CB3D EC07                       	smpsPSGAlterVol     $07
0008CB3F 8006                       	dc.b	nRst, $06
0008CB41 E100                       	smpsAlterNote       $00
0008CB43 01                         	dc.b	$01
0008CB44 E104                       	smpsAlterNote       $04
0008CB46 01                         	dc.b	$01
0008CB47 E100                       	smpsAlterNote       $00
0008CB49 01                         	dc.b	$01
0008CB4A E1FA                       	smpsAlterNote       $FA
0008CB4C 01                         	dc.b	$01
0008CB4D E1FD                       	smpsAlterNote       $FD
0008CB4F ECF5                       	smpsPSGAlterVol     $F5
0008CB51 9206                       	dc.b	nF1, $06
0008CB53 EC04                       	smpsPSGAlterVol     $04
0008CB55 E701                       	dc.b	smpsNoAttack, $01
0008CB57 EC07                       	smpsPSGAlterVol     $07
0008CB59 8003                       	dc.b	nRst, $03
0008CB5B ECF5                       	smpsPSGAlterVol     $F5
0008CB5D 9107                       	dc.b	nE1, $07
0008CB5F EC0B                       	smpsPSGAlterVol     $0B
0008CB61 8006                       	dc.b	nRst, $06
0008CB63 E100                       	smpsAlterNote       $00
0008CB65 01                         	dc.b	$01
0008CB66 E103                       	smpsAlterNote       $03
0008CB68 0101                       	dc.b	$01, $01
0008CB6A E1FD                       	smpsAlterNote       $FD
0008CB6C 01                         	dc.b	$01
0008CB6D ECF5                       	smpsPSGAlterVol     $F5
0008CB6F 9207                       	dc.b	nF1, $07
0008CB71 EC0B                       	smpsPSGAlterVol     $0B
0008CB73 8004                       	dc.b	nRst, $04
0008CB75 ECF5                       	smpsPSGAlterVol     $F5
0008CB77 9206                       	dc.b	nF1, $06
0008CB79 EC04                       	smpsPSGAlterVol     $04
0008CB7B E701                       	dc.b	smpsNoAttack, $01
0008CB7D EC07                       	smpsPSGAlterVol     $07
0008CB7F 8006                       	dc.b	nRst, $06
0008CB81 E103                       	smpsAlterNote       $03
0008CB83 01                         	dc.b	$01
0008CB84 E104                       	smpsAlterNote       $04
0008CB86 01                         	dc.b	$01
0008CB87 E100                       	smpsAlterNote       $00
0008CB89 01                         	dc.b	$01
0008CB8A E1FB                       	smpsAlterNote       $FB
0008CB8C 01                         	dc.b	$01
0008CB8D E1FD                       	smpsAlterNote       $FD
0008CB8F ECF5                       	smpsPSGAlterVol     $F5
0008CB91 9406                       	dc.b	nG1, $06
0008CB93 EC04                       	smpsPSGAlterVol     $04
0008CB95 E701                       	dc.b	smpsNoAttack, $01
0008CB97 EC07                       	smpsPSGAlterVol     $07
0008CB99 8003                       	dc.b	nRst, $03
0008CB9B ECF5                       	smpsPSGAlterVol     $F5
0008CB9D 9406                       	dc.b	nG1, $06
0008CB9F EC04                       	smpsPSGAlterVol     $04
0008CBA1 E701                       	dc.b	smpsNoAttack, $01
0008CBA3 EC07                       	smpsPSGAlterVol     $07
0008CBA5 8006                       	dc.b	nRst, $06
0008CBA7 E100                       	smpsAlterNote       $00
0008CBA9 01                         	dc.b	$01
0008CBAA E104                       	smpsAlterNote       $04
0008CBAC 01                         	dc.b	$01
0008CBAD E100                       	smpsAlterNote       $00
0008CBAF 01                         	dc.b	$01
0008CBB0 E1FD                       	smpsAlterNote       $FD
0008CBB2 01                         	dc.b	$01
0008CBB3 ECF5                       	smpsPSGAlterVol     $F5
0008CBB5 9206                       	dc.b	nF1, $06
0008CBB7 EC04                       	smpsPSGAlterVol     $04
0008CBB9 E701                       	dc.b	smpsNoAttack, $01
0008CBBB EC07                       	smpsPSGAlterVol     $07
0008CBBD 8003                       	dc.b	nRst, $03
0008CBBF ECF5                       	smpsPSGAlterVol     $F5
0008CBC1 9207                       	dc.b	nF1, $07
0008CBC3 EC0B                       	smpsPSGAlterVol     $0B
0008CBC5 8007                       	dc.b	nRst, $07
0008CBC7 E103                       	smpsAlterNote       $03
0008CBC9 0101                       	dc.b	$01, $01
0008CBCB E1FD                       	smpsAlterNote       $FD
0008CBCD 01                         	dc.b	$01
0008CBCE E1FA                       	smpsAlterNote       $FA
0008CBD0 01                         	dc.b	$01
0008CBD1 E1FD                       	smpsAlterNote       $FD
0008CBD3 ECF5                       	smpsPSGAlterVol     $F5
0008CBD5 9206                       	dc.b	nF1, $06
0008CBD7 EC0B                       	smpsPSGAlterVol     $0B
0008CBD9 8004                       	dc.b	nRst, $04
0008CBDB ECF5                       	smpsPSGAlterVol     $F5
0008CBDD 9206                       	dc.b	nF1, $06
0008CBDF EC04                       	smpsPSGAlterVol     $04
0008CBE1 E701                       	dc.b	smpsNoAttack, $01
0008CBE3 EC07                       	smpsPSGAlterVol     $07
0008CBE5 8006                       	dc.b	nRst, $06
0008CBE7 E100                       	smpsAlterNote       $00
0008CBE9 01                         	dc.b	$01
0008CBEA E104                       	smpsAlterNote       $04
0008CBEC 01                         	dc.b	$01
0008CBED E100                       	smpsAlterNote       $00
0008CBEF 01                         	dc.b	$01
0008CBF0 E1FA                       	smpsAlterNote       $FA
0008CBF2 01                         	dc.b	$01
0008CBF3 E1FD                       	smpsAlterNote       $FD
0008CBF5 ECF5                       	smpsPSGAlterVol     $F5
0008CBF7 9206                       	dc.b	nF1, $06
0008CBF9 EC04                       	smpsPSGAlterVol     $04
0008CBFB E701                       	dc.b	smpsNoAttack, $01
0008CBFD EC07                       	smpsPSGAlterVol     $07
0008CBFF 8003                       	dc.b	nRst, $03
0008CC01 ECF5                       	smpsPSGAlterVol     $F5
0008CC03 9207                       	dc.b	nF1, $07
0008CC05 EC0B                       	smpsPSGAlterVol     $0B
0008CC07 8006                       	dc.b	nRst, $06
0008CC09 E100                       	smpsAlterNote       $00
0008CC0B 01                         	dc.b	$01
0008CC0C E103                       	smpsAlterNote       $03
0008CC0E 0101                       	dc.b	$01, $01
0008CC10 E1FD                       	smpsAlterNote       $FD
0008CC12 01                         	dc.b	$01
0008CC13 ECF5                       	smpsPSGAlterVol     $F5
0008CC15 9207                       	dc.b	nF1, $07
0008CC17 EC0B                       	smpsPSGAlterVol     $0B
0008CC19 8004                       	dc.b	nRst, $04
0008CC1B ECF5                       	smpsPSGAlterVol     $F5
0008CC1D 9206                       	dc.b	nF1, $06
0008CC1F EC0B                       	smpsPSGAlterVol     $0B
0008CC21 8007                       	dc.b	nRst, $07
0008CC23 E103                       	smpsAlterNote       $03
0008CC25 0101                       	dc.b	$01, $01
0008CC27 E100                       	smpsAlterNote       $00
0008CC29 01                         	dc.b	$01
0008CC2A E1FA                       	smpsAlterNote       $FA
0008CC2C 01                         	dc.b	$01
0008CC2D E1FD                       	smpsAlterNote       $FD
0008CC2F ECF5                       	smpsPSGAlterVol     $F5
0008CC31 9206                       	dc.b	nF1, $06
0008CC33 EC04                       	smpsPSGAlterVol     $04
0008CC35 E701                       	dc.b	smpsNoAttack, $01
0008CC37 EC07                       	smpsPSGAlterVol     $07
0008CC39 8003                       	dc.b	nRst, $03
0008CC3B ECF5                       	smpsPSGAlterVol     $F5
0008CC3D 9206                       	dc.b	nF1, $06
0008CC3F EC04                       	smpsPSGAlterVol     $04
0008CC41 E701                       	dc.b	smpsNoAttack, $01
0008CC43 EC07                       	smpsPSGAlterVol     $07
0008CC45 8006                       	dc.b	nRst, $06
0008CC47 E100                       	smpsAlterNote       $00
0008CC49 01                         	dc.b	$01
0008CC4A E104                       	smpsAlterNote       $04
0008CC4C 01                         	dc.b	$01
0008CC4D E100                       	smpsAlterNote       $00
0008CC4F 01                         	dc.b	$01
0008CC50 E1FD                       	smpsAlterNote       $FD
0008CC52 01                         	dc.b	$01
0008CC53 ECF5                       	smpsPSGAlterVol     $F5
0008CC55 9206                       	dc.b	nF1, $06
0008CC57 EC04                       	smpsPSGAlterVol     $04
0008CC59 E701                       	dc.b	smpsNoAttack, $01
0008CC5B EC07                       	smpsPSGAlterVol     $07
0008CC5D 8003                       	dc.b	nRst, $03
0008CC5F ECF5                       	smpsPSGAlterVol     $F5
0008CC61 9207                       	dc.b	nF1, $07
0008CC63 EC0B                       	smpsPSGAlterVol     $0B
0008CC65 8007                       	dc.b	nRst, $07
0008CC67 E104                       	smpsAlterNote       $04
0008CC69 0101                       	dc.b	$01, $01
0008CC6B E1FB                       	smpsAlterNote       $FB
0008CC6D 01                         	dc.b	$01
0008CC6E E1F6                       	smpsAlterNote       $F6
0008CC70 0101                       	dc.b	$01, $01
0008CC72 E1FF                       	smpsAlterNote       $FF
0008CC74 01                         	dc.b	$01
0008CC75 E105                       	smpsAlterNote       $05
0008CC77 01                         	dc.b	$01
0008CC78 E104                       	smpsAlterNote       $04
0008CC7A 01                         	dc.b	$01
0008CC7B E1FB                       	smpsAlterNote       $FB
0008CC7D 01                         	dc.b	$01
0008CC7E E1F5                       	smpsAlterNote       $F5
0008CC80 01                         	dc.b	$01
0008CC81 E1FC                       	smpsAlterNote       $FC
0008CC83 ECF5                       	smpsPSGAlterVol     $F5
0008CC85 8B0E                       	dc.b	nBb0, $0E
0008CC87 E102                       	smpsAlterNote       $02
0008CC89 EC0B                       	smpsPSGAlterVol     $0B
0008CC8B 8001                       	dc.b	nRst, $01
0008CC8D E101                       	smpsAlterNote       $01
0008CC8F 01                         	dc.b	$01
0008CC90 E1FC                       	smpsAlterNote       $FC
0008CC92 01                         	dc.b	$01
0008CC93 E1F9                       	smpsAlterNote       $F9
0008CC95 0101                       	dc.b	$01, $01
0008CC97 E1FF                       	smpsAlterNote       $FF
0008CC99 01                         	dc.b	$01
0008CC9A E102                       	smpsAlterNote       $02
0008CC9C 01                         	dc.b	$01
0008CC9D E1FF                       	smpsAlterNote       $FF
0008CC9F 01                         	dc.b	$01
0008CCA0 E1FC                       	smpsAlterNote       $FC
0008CCA2 01                         	dc.b	$01
0008CCA3 E1F8                       	smpsAlterNote       $F8
0008CCA5 01                         	dc.b	$01
0008CCA6 E1FC                       	smpsAlterNote       $FC
0008CCA8 01                         	dc.b	$01
0008CCA9 E101                       	smpsAlterNote       $01
0008CCAB 01                         	dc.b	$01
0008CCAC E102                       	smpsAlterNote       $02
0008CCAE 01                         	dc.b	$01
0008CCAF E1FF                       	smpsAlterNote       $FF
0008CCB1 01                         	dc.b	$01
0008CCB2 E1FB                       	smpsAlterNote       $FB
0008CCB4 ECF5                       	smpsPSGAlterVol     $F5
0008CCB6 8D0D                       	dc.b	nC1, $0D
0008CCB8 E101                       	smpsAlterNote       $01
0008CCBA EC0B                       	smpsPSGAlterVol     $0B
0008CCBC 8001                       	dc.b	nRst, $01
0008CCBE E102                       	smpsAlterNote       $02
0008CCC0 01                         	dc.b	$01
0008CCC1 E1FF                       	smpsAlterNote       $FF
0008CCC3 01                         	dc.b	$01
0008CCC4 E1F9                       	smpsAlterNote       $F9
0008CCC6 0101                       	dc.b	$01, $01
0008CCC8 E1FC                       	smpsAlterNote       $FC
0008CCCA 01                         	dc.b	$01
0008CCCB E101                       	smpsAlterNote       $01
0008CCCD 0101                       	dc.b	$01, $01
0008CCCF E1FC                       	smpsAlterNote       $FC
0008CCD1 01                         	dc.b	$01
0008CCD2 E1F9                       	smpsAlterNote       $F9
0008CCD4 0101                       	dc.b	$01, $01
0008CCD6 E1FF                       	smpsAlterNote       $FF
0008CCD8 01                         	dc.b	$01
0008CCD9 E102                       	smpsAlterNote       $02
0008CCDB 01                         	dc.b	$01
0008CCDC E101                       	smpsAlterNote       $01
0008CCDE 01                         	dc.b	$01
0008CCDF E1FC                       	smpsAlterNote       $FC
0008CCE1 ECF5                       	smpsPSGAlterVol     $F5
0008CCE3 8F0D                       	dc.b	nD1, $0D
0008CCE5 E1FF                       	smpsAlterNote       $FF
0008CCE7 EC04                       	smpsPSGAlterVol     $04
0008CCE9 E701                       	dc.b	smpsNoAttack, $01
0008CCEB EC07                       	smpsPSGAlterVol     $07
0008CCED E103                       	smpsAlterNote       $03
0008CCEF 8001                       	dc.b	nRst, $01
0008CCF1 E102                       	smpsAlterNote       $02
0008CCF3 01                         	dc.b	$01
0008CCF4 E1FD                       	smpsAlterNote       $FD
0008CCF6 01                         	dc.b	$01
0008CCF7 E1F9                       	smpsAlterNote       $F9
0008CCF9 01                         	dc.b	$01
0008CCFA E1FD                       	smpsAlterNote       $FD
0008CCFC 01                         	dc.b	$01
0008CCFD E100                       	smpsAlterNote       $00
0008CCFF 01                         	dc.b	$01
0008CD00 E103                       	smpsAlterNote       $03
0008CD02 01                         	dc.b	$01
0008CD03 E100                       	smpsAlterNote       $00
0008CD05 01                         	dc.b	$01
0008CD06 E1FA                       	smpsAlterNote       $FA
0008CD08 01                         	dc.b	$01
0008CD09 E1F9                       	smpsAlterNote       $F9
0008CD0B 01                         	dc.b	$01
0008CD0C E1FD                       	smpsAlterNote       $FD
0008CD0E 01                         	dc.b	$01
0008CD0F E102                       	smpsAlterNote       $02
0008CD11 0101                       	dc.b	$01, $01
0008CD13 E100                       	smpsAlterNote       $00
0008CD15 01                         	dc.b	$01
0008CD16 E1FD                       	smpsAlterNote       $FD
0008CD18 ECF5                       	smpsPSGAlterVol     $F5
0008CD1A 910D                       	dc.b	nE1, $0D
0008CD1C E103                       	smpsAlterNote       $03
0008CD1E EC0B                       	smpsPSGAlterVol     $0B
0008CD20 8001 01                    	dc.b	nRst, $01, $01
0008CD23 E100                       	smpsAlterNote       $00
0008CD25 01                         	dc.b	$01
0008CD26 E1FA                       	smpsAlterNote       $FA
0008CD28 0101                       	dc.b	$01, $01
0008CD2A E100                       	smpsAlterNote       $00
0008CD2C 01                         	dc.b	$01
0008CD2D E103                       	smpsAlterNote       $03
0008CD2F 01                         	dc.b	$01
0008CD30 E1FD                       	smpsAlterNote       $FD
0008CD32 ECF5                       	smpsPSGAlterVol     $F5
0008CD34 9206                       	dc.b	nF1, $06
0008CD36 EC04                       	smpsPSGAlterVol     $04
0008CD38 E701                       	dc.b	smpsNoAttack, $01
0008CD3A EC07                       	smpsPSGAlterVol     $07
0008CD3C 8003                       	dc.b	nRst, $03
0008CD3E ECF5                       	smpsPSGAlterVol     $F5
0008CD40 9207                       	dc.b	nF1, $07
0008CD42 EC0B                       	smpsPSGAlterVol     $0B
0008CD44 8006                       	dc.b	nRst, $06
0008CD46 E100                       	smpsAlterNote       $00
0008CD48 01                         	dc.b	$01
0008CD49 E103                       	smpsAlterNote       $03
0008CD4B 0101                       	dc.b	$01, $01
0008CD4D E1FD                       	smpsAlterNote       $FD
0008CD4F 01                         	dc.b	$01
0008CD50 ECF5                       	smpsPSGAlterVol     $F5
0008CD52 9407                       	dc.b	nG1, $07
0008CD54 EC0B                       	smpsPSGAlterVol     $0B
0008CD56 8004                       	dc.b	nRst, $04
0008CD58 ECF5                       	smpsPSGAlterVol     $F5
0008CD5A 9406                       	dc.b	nG1, $06
0008CD5C EC04                       	smpsPSGAlterVol     $04
0008CD5E E701                       	dc.b	smpsNoAttack, $01
0008CD60 EC07                       	smpsPSGAlterVol     $07
0008CD62 8006                       	dc.b	nRst, $06
0008CD64 E103                       	smpsAlterNote       $03
0008CD66 01                         	dc.b	$01
0008CD67 E104                       	smpsAlterNote       $04
0008CD69 01                         	dc.b	$01
0008CD6A E100                       	smpsAlterNote       $00
0008CD6C 01                         	dc.b	$01
0008CD6D E1F9                       	smpsAlterNote       $F9
0008CD6F 01                         	dc.b	$01
0008CD70 E1FD                       	smpsAlterNote       $FD
0008CD72 ECF5                       	smpsPSGAlterVol     $F5
0008CD74 9206                       	dc.b	nF1, $06
0008CD76 EC04                       	smpsPSGAlterVol     $04
0008CD78 E701                       	dc.b	smpsNoAttack, $01
0008CD7A EC07                       	smpsPSGAlterVol     $07
0008CD7C 8003                       	dc.b	nRst, $03
0008CD7E ECF5                       	smpsPSGAlterVol     $F5
0008CD80 9206                       	dc.b	nF1, $06
0008CD82 EC04                       	smpsPSGAlterVol     $04
0008CD84 E701                       	dc.b	smpsNoAttack, $01
0008CD86 EC07                       	smpsPSGAlterVol     $07
0008CD88 8006                       	dc.b	nRst, $06
0008CD8A E100                       	smpsAlterNote       $00
0008CD8C 01                         	dc.b	$01
0008CD8D E104                       	smpsAlterNote       $04
0008CD8F 01                         	dc.b	$01
0008CD90 E103                       	smpsAlterNote       $03
0008CD92 01                         	dc.b	$01
0008CD93 E1FD                       	smpsAlterNote       $FD
0008CD95 01                         	dc.b	$01
0008CD96 ECF5                       	smpsPSGAlterVol     $F5
0008CD98 9407                       	dc.b	nG1, $07
0008CD9A EC0B                       	smpsPSGAlterVol     $0B
0008CD9C 8004                       	dc.b	nRst, $04
0008CD9E ECF5                       	smpsPSGAlterVol     $F5
0008CDA0 9406                       	dc.b	nG1, $06
0008CDA2 EC0B                       	smpsPSGAlterVol     $0B
0008CDA4 8007                       	dc.b	nRst, $07
0008CDA6 E103                       	smpsAlterNote       $03
0008CDA8 0101                       	dc.b	$01, $01
0008CDAA E100                       	smpsAlterNote       $00
0008CDAC 01                         	dc.b	$01
0008CDAD E1F9                       	smpsAlterNote       $F9
0008CDAF 01                         	dc.b	$01
0008CDB0 E1FD                       	smpsAlterNote       $FD
0008CDB2 ECF5                       	smpsPSGAlterVol     $F5
0008CDB4 9206                       	dc.b	nF1, $06
0008CDB6 EC04                       	smpsPSGAlterVol     $04
0008CDB8 E701                       	dc.b	smpsNoAttack, $01
0008CDBA EC07                       	smpsPSGAlterVol     $07
0008CDBC 8003                       	dc.b	nRst, $03
0008CDBE ECF5                       	smpsPSGAlterVol     $F5
0008CDC0 9206                       	dc.b	nF1, $06
0008CDC2 EC04                       	smpsPSGAlterVol     $04
0008CDC4 E701                       	dc.b	smpsNoAttack, $01
0008CDC6 EC07                       	smpsPSGAlterVol     $07
0008CDC8 8006                       	dc.b	nRst, $06
0008CDCA E100                       	smpsAlterNote       $00
0008CDCC 01                         	dc.b	$01
0008CDCD E104                       	smpsAlterNote       $04
0008CDCF 01                         	dc.b	$01
0008CDD0 E100                       	smpsAlterNote       $00
0008CDD2 01                         	dc.b	$01
0008CDD3 E1FB                       	smpsAlterNote       $FB
0008CDD5 01                         	dc.b	$01
0008CDD6 E1FD                       	smpsAlterNote       $FD
0008CDD8 ECF5                       	smpsPSGAlterVol     $F5
0008CDDA 9406                       	dc.b	nG1, $06
0008CDDC EC04                       	smpsPSGAlterVol     $04
0008CDDE E701                       	dc.b	smpsNoAttack, $01
0008CDE0 EC07                       	smpsPSGAlterVol     $07
0008CDE2 8003                       	dc.b	nRst, $03
0008CDE4 ECF5                       	smpsPSGAlterVol     $F5
0008CDE6 9407                       	dc.b	nG1, $07
0008CDE8 EC0B                       	smpsPSGAlterVol     $0B
0008CDEA 8006                       	dc.b	nRst, $06
0008CDEC E100                       	smpsAlterNote       $00
0008CDEE 01                         	dc.b	$01
0008CDEF E103                       	smpsAlterNote       $03
0008CDF1 0101                       	dc.b	$01, $01
0008CDF3 E1FD                       	smpsAlterNote       $FD
0008CDF5 01                         	dc.b	$01
0008CDF6 ECF5                       	smpsPSGAlterVol     $F5
0008CDF8 9207                       	dc.b	nF1, $07
0008CDFA EC0B                       	smpsPSGAlterVol     $0B
0008CDFC 8004                       	dc.b	nRst, $04
0008CDFE ECF5                       	smpsPSGAlterVol     $F5
0008CE00 9206                       	dc.b	nF1, $06
0008CE02 EC04                       	smpsPSGAlterVol     $04
0008CE04 E701                       	dc.b	smpsNoAttack, $01
0008CE06 ECFC                       	smpsPSGAlterVol     $FC
0008CE08 E1FC                       	smpsAlterNote       $FC
0008CE0A 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008CE0E EC04                       	smpsPSGAlterVol     $04
0008CE10 E701                       	dc.b	smpsNoAttack, $01
0008CE12 ECFC                       	smpsPSGAlterVol     $FC
0008CE14 9003                       	dc.b	nEb1, $03
0008CE16 E1FD                       	smpsAlterNote       $FD
0008CE18 9403                       	dc.b	nG1, $03
0008CE1A EC04                       	smpsPSGAlterVol     $04
0008CE1C E701                       	dc.b	smpsNoAttack, $01
0008CE1E E1FE                       	smpsAlterNote       $FE
0008CE20 ECFC                       	smpsPSGAlterVol     $FC
0008CE22 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008CE26 EC04                       	smpsPSGAlterVol     $04
0008CE28 E701                       	dc.b	smpsNoAttack, $01
0008CE2A EC07                       	smpsPSGAlterVol     $07
0008CE2C 8009                       	dc.b	nRst, $09
0008CE2E E100                       	smpsAlterNote       $00
0008CE30 01                         	dc.b	$01
0008CE31 F6F5 19                    	smpsJump            music84_Jump07
0008CE34                            
0008CE34                            ; PSG2 Data
0008CE34                            music84_PSG2:
0008CE34 E1FC                       	smpsAlterNote       $FC
0008CE36 EC04                       	smpsPSGAlterVol     $04
0008CE38 8F03                       	dc.b	nD1, $03
0008CE3A E1FD                       	smpsAlterNote       $FD
0008CE3C 9203                       	dc.b	nF1, $03
0008CE3E EC04                       	smpsPSGAlterVol     $04
0008CE40 E701                       	dc.b	smpsNoAttack, $01
0008CE42 E1FE                       	smpsAlterNote       $FE
0008CE44 ECFC                       	smpsPSGAlterVol     $FC
0008CE46 9603                       	dc.b	nA1, $03
0008CE48 E1FD                       	smpsAlterNote       $FD
0008CE4A 9103                       	dc.b	nE1, $03
0008CE4C EC04                       	smpsPSGAlterVol     $04
0008CE4E E701                       	dc.b	smpsNoAttack, $01
0008CE50 ECFC                       	smpsPSGAlterVol     $FC
0008CE52 9403                       	dc.b	nG1, $03
0008CE54 E1FE                       	smpsAlterNote       $FE
0008CE56 9703                       	dc.b	nBb1, $03
0008CE58 EC04                       	smpsPSGAlterVol     $04
0008CE5A E701                       	dc.b	smpsNoAttack, $01
0008CE5C E1FF                       	smpsAlterNote       $FF
0008CE5E ECFC                       	smpsPSGAlterVol     $FC
0008CE60 9B02                       	dc.b	nD2, $02
0008CE62 EC04                       	smpsPSGAlterVol     $04
0008CE64 E701                       	dc.b	smpsNoAttack, $01
0008CE66 ECFC                       	smpsPSGAlterVol     $FC
0008CE68 E1FE                       	smpsAlterNote       $FE
0008CE6A 9A03                       	dc.b	nCs2, $03
0008CE6C EC0B                       	smpsPSGAlterVol     $0B
0008CE6E 800A                       	dc.b	nRst, $0A
0008CE70 E102                       	smpsAlterNote       $02
0008CE72 01                         	dc.b	$01
0008CE73 E10A                       	smpsAlterNote       $0A
0008CE75 01                         	dc.b	$01
0008CE76 E102                       	smpsAlterNote       $02
0008CE78 01                         	dc.b	$01
0008CE79 E1FC                       	smpsAlterNote       $FC
0008CE7B 01                         	dc.b	$01
0008CE7C E10A                       	smpsAlterNote       $0A
0008CE7E 01                         	dc.b	$01
0008CE7F E1FC                       	smpsAlterNote       $FC
0008CE81 01                         	dc.b	$01
0008CE82 E108                       	smpsAlterNote       $08
0008CE84 01                         	dc.b	$01
0008CE85 E10A                       	smpsAlterNote       $0A
0008CE87 01                         	dc.b	$01
0008CE88 E102                       	smpsAlterNote       $02
0008CE8A 01                         	dc.b	$01
0008CE8B E1F7                       	smpsAlterNote       $F7
0008CE8D 0101                       	dc.b	$01, $01
0008CE8F E102                       	smpsAlterNote       $02
0008CE91 01                         	dc.b	$01
0008CE92 E108                       	smpsAlterNote       $08
0008CE94 0101                       	dc.b	$01, $01
0008CE96 E1FC                       	smpsAlterNote       $FC
0008CE98 01                         	dc.b	$01
0008CE99 E10A                       	smpsAlterNote       $0A
0008CE9B 01                         	dc.b	$01
0008CE9C E1F7                       	smpsAlterNote       $F7
0008CE9E 01                         	dc.b	$01
0008CE9F E102                       	smpsAlterNote       $02
0008CEA1 01                         	dc.b	$01
0008CEA2 E10A                       	smpsAlterNote       $0A
0008CEA4 01                         	dc.b	$01
0008CEA5 E102                       	smpsAlterNote       $02
0008CEA7 01                         	dc.b	$01
0008CEA8 E1FC                       	smpsAlterNote       $FC
0008CEAA 01                         	dc.b	$01
0008CEAB                            
0008CEAB                            music84_Jump06:
0008CEAB E10A                       	smpsAlterNote       $0A
0008CEAD 8001                       	dc.b	nRst, $01
0008CEAF E1FC                       	smpsAlterNote       $FC
0008CEB1 01                         	dc.b	$01
0008CEB2 E108                       	smpsAlterNote       $08
0008CEB4 01                         	dc.b	$01
0008CEB5 E10A                       	smpsAlterNote       $0A
0008CEB7 01                         	dc.b	$01
0008CEB8 E1FC                       	smpsAlterNote       $FC
0008CEBA ECF5                       	smpsPSGAlterVol     $F5
0008CEBC 8F06                       	dc.b	nD1, $06
0008CEBE EC04                       	smpsPSGAlterVol     $04
0008CEC0 E701                       	dc.b	smpsNoAttack, $01
0008CEC2 EC07                       	smpsPSGAlterVol     $07
0008CEC4 8003                       	dc.b	nRst, $03
0008CEC6 ECF5                       	smpsPSGAlterVol     $F5
0008CEC8 8F06                       	dc.b	nD1, $06
0008CECA EC04                       	smpsPSGAlterVol     $04
0008CECC E701                       	dc.b	smpsNoAttack, $01
0008CECE EC07                       	smpsPSGAlterVol     $07
0008CED0 8006                       	dc.b	nRst, $06
0008CED2 E1FF                       	smpsAlterNote       $FF
0008CED4 01                         	dc.b	$01
0008CED5 E102                       	smpsAlterNote       $02
0008CED7 01                         	dc.b	$01
0008CED8 E1FF                       	smpsAlterNote       $FF
0008CEDA 01                         	dc.b	$01
0008CEDB E1F9                       	smpsAlterNote       $F9
0008CEDD 01                         	dc.b	$01
0008CEDE E1FC                       	smpsAlterNote       $FC
0008CEE0 ECF5                       	smpsPSGAlterVol     $F5
0008CEE2 9006                       	dc.b	nEb1, $06
0008CEE4 EC04                       	smpsPSGAlterVol     $04
0008CEE6 E701                       	dc.b	smpsNoAttack, $01
0008CEE8 EC07                       	smpsPSGAlterVol     $07
0008CEEA 8003                       	dc.b	nRst, $03
0008CEEC ECF5                       	smpsPSGAlterVol     $F5
0008CEEE 9007                       	dc.b	nEb1, $07
0008CEF0 EC0B                       	smpsPSGAlterVol     $0B
0008CEF2 8006                       	dc.b	nRst, $06
0008CEF4 E1FF                       	smpsAlterNote       $FF
0008CEF6 01                         	dc.b	$01
0008CEF7 E103                       	smpsAlterNote       $03
0008CEF9 0101                       	dc.b	$01, $01
0008CEFB E1FC                       	smpsAlterNote       $FC
0008CEFD 01                         	dc.b	$01
0008CEFE ECF5                       	smpsPSGAlterVol     $F5
0008CF00 8F07                       	dc.b	nD1, $07
0008CF02 EC0B                       	smpsPSGAlterVol     $0B
0008CF04 8004                       	dc.b	nRst, $04
0008CF06 ECF5                       	smpsPSGAlterVol     $F5
0008CF08 8F06                       	dc.b	nD1, $06
0008CF0A EC04                       	smpsPSGAlterVol     $04
0008CF0C E701                       	dc.b	smpsNoAttack, $01
0008CF0E EC07                       	smpsPSGAlterVol     $07
0008CF10 8006                       	dc.b	nRst, $06
0008CF12 E102                       	smpsAlterNote       $02
0008CF14 01                         	dc.b	$01
0008CF15 E103                       	smpsAlterNote       $03
0008CF17 01                         	dc.b	$01
0008CF18 E1FF                       	smpsAlterNote       $FF
0008CF1A 01                         	dc.b	$01
0008CF1B E1F9                       	smpsAlterNote       $F9
0008CF1D 01                         	dc.b	$01
0008CF1E E1FC                       	smpsAlterNote       $FC
0008CF20 ECF5                       	smpsPSGAlterVol     $F5
0008CF22 8F06                       	dc.b	nD1, $06
0008CF24 EC04                       	smpsPSGAlterVol     $04
0008CF26 E701                       	dc.b	smpsNoAttack, $01
0008CF28 EC07                       	smpsPSGAlterVol     $07
0008CF2A 8003                       	dc.b	nRst, $03
0008CF2C ECF5                       	smpsPSGAlterVol     $F5
0008CF2E 8F06                       	dc.b	nD1, $06
0008CF30 EC04                       	smpsPSGAlterVol     $04
0008CF32 E701                       	dc.b	smpsNoAttack, $01
0008CF34 EC07                       	smpsPSGAlterVol     $07
0008CF36 8006                       	dc.b	nRst, $06
0008CF38 E1FF                       	smpsAlterNote       $FF
0008CF3A 01                         	dc.b	$01
0008CF3B E103                       	smpsAlterNote       $03
0008CF3D 01                         	dc.b	$01
0008CF3E E1FF                       	smpsAlterNote       $FF
0008CF40 01                         	dc.b	$01
0008CF41 E1FC                       	smpsAlterNote       $FC
0008CF43 01                         	dc.b	$01
0008CF44 ECF5                       	smpsPSGAlterVol     $F5
0008CF46 8F06                       	dc.b	nD1, $06
0008CF48 EC04                       	smpsPSGAlterVol     $04
0008CF4A E701                       	dc.b	smpsNoAttack, $01
0008CF4C EC07                       	smpsPSGAlterVol     $07
0008CF4E 8003                       	dc.b	nRst, $03
0008CF50 ECF5                       	smpsPSGAlterVol     $F5
0008CF52 8F07                       	dc.b	nD1, $07
0008CF54 EC0B                       	smpsPSGAlterVol     $0B
0008CF56 8007                       	dc.b	nRst, $07
0008CF58 E101                       	smpsAlterNote       $01
0008CF5A 0101                       	dc.b	$01, $01
0008CF5C E1FC                       	smpsAlterNote       $FC
0008CF5E 01                         	dc.b	$01
0008CF5F E1F9                       	smpsAlterNote       $F9
0008CF61 01                         	dc.b	$01
0008CF62 E1FC                       	smpsAlterNote       $FC
0008CF64 ECF5                       	smpsPSGAlterVol     $F5
0008CF66 9006                       	dc.b	nEb1, $06
0008CF68 EC0B                       	smpsPSGAlterVol     $0B
0008CF6A 8004                       	dc.b	nRst, $04
0008CF6C ECF5                       	smpsPSGAlterVol     $F5
0008CF6E 9006                       	dc.b	nEb1, $06
0008CF70 EC04                       	smpsPSGAlterVol     $04
0008CF72 E701                       	dc.b	smpsNoAttack, $01
0008CF74 EC07                       	smpsPSGAlterVol     $07
0008CF76 8006                       	dc.b	nRst, $06
0008CF78 E100                       	smpsAlterNote       $00
0008CF7A 01                         	dc.b	$01
0008CF7B E102                       	smpsAlterNote       $02
0008CF7D 01                         	dc.b	$01
0008CF7E E100                       	smpsAlterNote       $00
0008CF80 01                         	dc.b	$01
0008CF81 E1FD                       	smpsAlterNote       $FD
0008CF83 01                         	dc.b	$01
0008CF84 E1FF                       	smpsAlterNote       $FF
0008CF86 ECF5                       	smpsPSGAlterVol     $F5
0008CF88 9B06                       	dc.b	nD2, $06
0008CF8A EC04                       	smpsPSGAlterVol     $04
0008CF8C E701                       	dc.b	smpsNoAttack, $01
0008CF8E EC07                       	smpsPSGAlterVol     $07
0008CF90 8003                       	dc.b	nRst, $03
0008CF92 ECF5                       	smpsPSGAlterVol     $F5
0008CF94 9B07                       	dc.b	nD2, $07
0008CF96 EC0B                       	smpsPSGAlterVol     $0B
0008CF98 8006                       	dc.b	nRst, $06
0008CF9A E102                       	smpsAlterNote       $02
0008CF9C 01                         	dc.b	$01
0008CF9D E106                       	smpsAlterNote       $06
0008CF9F 01                         	dc.b	$01
0008CFA0 E105                       	smpsAlterNote       $05
0008CFA2 01                         	dc.b	$01
0008CFA3 E1FF                       	smpsAlterNote       $FF
0008CFA5 01                         	dc.b	$01
0008CFA6 ECF5                       	smpsPSGAlterVol     $F5
0008CFA8 9B07                       	dc.b	nD2, $07
0008CFAA EC0B                       	smpsPSGAlterVol     $0B
0008CFAC 8004                       	dc.b	nRst, $04
0008CFAE ECF5                       	smpsPSGAlterVol     $F5
0008CFB0 9B06                       	dc.b	nD2, $06
0008CFB2 EC0B                       	smpsPSGAlterVol     $0B
0008CFB4 8007                       	dc.b	nRst, $07
0008CFB6 E105                       	smpsAlterNote       $05
0008CFB8 0101                       	dc.b	$01, $01
0008CFBA E102                       	smpsAlterNote       $02
0008CFBC 01                         	dc.b	$01
0008CFBD E1FC                       	smpsAlterNote       $FC
0008CFBF 01                         	dc.b	$01
0008CFC0 E1FF                       	smpsAlterNote       $FF
0008CFC2 ECF5                       	smpsPSGAlterVol     $F5
0008CFC4 9B06                       	dc.b	nD2, $06
0008CFC6 EC04                       	smpsPSGAlterVol     $04
0008CFC8 E701                       	dc.b	smpsNoAttack, $01
0008CFCA EC07                       	smpsPSGAlterVol     $07
0008CFCC 8003                       	dc.b	nRst, $03
0008CFCE ECF5                       	smpsPSGAlterVol     $F5
0008CFD0 9B06                       	dc.b	nD2, $06
0008CFD2 EC04                       	smpsPSGAlterVol     $04
0008CFD4 E701                       	dc.b	smpsNoAttack, $01
0008CFD6 EC07                       	smpsPSGAlterVol     $07
0008CFD8 8006                       	dc.b	nRst, $06
0008CFDA E102                       	smpsAlterNote       $02
0008CFDC 01                         	dc.b	$01
0008CFDD E106                       	smpsAlterNote       $06
0008CFDF 01                         	dc.b	$01
0008CFE0 E102                       	smpsAlterNote       $02
0008CFE2 01                         	dc.b	$01
0008CFE3 E1FF                       	smpsAlterNote       $FF
0008CFE5 01                         	dc.b	$01
0008CFE6 ECF5                       	smpsPSGAlterVol     $F5
0008CFE8 9B06                       	dc.b	nD2, $06
0008CFEA EC04                       	smpsPSGAlterVol     $04
0008CFEC E701                       	dc.b	smpsNoAttack, $01
0008CFEE EC07                       	smpsPSGAlterVol     $07
0008CFF0 8003                       	dc.b	nRst, $03
0008CFF2 ECF5                       	smpsPSGAlterVol     $F5
0008CFF4 9B07                       	dc.b	nD2, $07
0008CFF6 EC0B                       	smpsPSGAlterVol     $0B
0008CFF8 8007                       	dc.b	nRst, $07
0008CFFA E105                       	smpsAlterNote       $05
0008CFFC 0101                       	dc.b	$01, $01
0008CFFE E1FF                       	smpsAlterNote       $FF
0008D000 01                         	dc.b	$01
0008D001 E1FC                       	smpsAlterNote       $FC
0008D003 01                         	dc.b	$01
0008D004 E1FF                       	smpsAlterNote       $FF
0008D006 ECF5                       	smpsPSGAlterVol     $F5
0008D008 9B06                       	dc.b	nD2, $06
0008D00A EC0B                       	smpsPSGAlterVol     $0B
0008D00C 8004                       	dc.b	nRst, $04
0008D00E ECF5                       	smpsPSGAlterVol     $F5
0008D010 9B06                       	dc.b	nD2, $06
0008D012 EC04                       	smpsPSGAlterVol     $04
0008D014 E701                       	dc.b	smpsNoAttack, $01
0008D016 EC07                       	smpsPSGAlterVol     $07
0008D018 8006                       	dc.b	nRst, $06
0008D01A E105                       	smpsAlterNote       $05
0008D01C 01                         	dc.b	$01
0008D01D E106                       	smpsAlterNote       $06
0008D01F 01                         	dc.b	$01
0008D020 E102                       	smpsAlterNote       $02
0008D022 01                         	dc.b	$01
0008D023 E1FC                       	smpsAlterNote       $FC
0008D025 01                         	dc.b	$01
0008D026 E1FF                       	smpsAlterNote       $FF
0008D028 ECF5                       	smpsPSGAlterVol     $F5
0008D02A 9B06                       	dc.b	nD2, $06
0008D02C EC04                       	smpsPSGAlterVol     $04
0008D02E E701                       	dc.b	smpsNoAttack, $01
0008D030 EC07                       	smpsPSGAlterVol     $07
0008D032 8003                       	dc.b	nRst, $03
0008D034 ECF5                       	smpsPSGAlterVol     $F5
0008D036 9B06                       	dc.b	nD2, $06
0008D038 EC04                       	smpsPSGAlterVol     $04
0008D03A E701                       	dc.b	smpsNoAttack, $01
0008D03C EC07                       	smpsPSGAlterVol     $07
0008D03E 8006                       	dc.b	nRst, $06
0008D040 E102                       	smpsAlterNote       $02
0008D042 01                         	dc.b	$01
0008D043 E106                       	smpsAlterNote       $06
0008D045 01                         	dc.b	$01
0008D046 E105                       	smpsAlterNote       $05
0008D048 01                         	dc.b	$01
0008D049 E1FF                       	smpsAlterNote       $FF
0008D04B 01                         	dc.b	$01
0008D04C ECF5                       	smpsPSGAlterVol     $F5
0008D04E 9B07                       	dc.b	nD2, $07
0008D050 EC0B                       	smpsPSGAlterVol     $0B
0008D052 8004                       	dc.b	nRst, $04
0008D054 ECF5                       	smpsPSGAlterVol     $F5
0008D056 9B06                       	dc.b	nD2, $06
0008D058 EC0B                       	smpsPSGAlterVol     $0B
0008D05A 8007                       	dc.b	nRst, $07
0008D05C E105                       	smpsAlterNote       $05
0008D05E 0101                       	dc.b	$01, $01
0008D060 E102                       	smpsAlterNote       $02
0008D062 01                         	dc.b	$01
0008D063 E1FC                       	smpsAlterNote       $FC
0008D065 01                         	dc.b	$01
0008D066 E1FF                       	smpsAlterNote       $FF
0008D068 ECF5                       	smpsPSGAlterVol     $F5
0008D06A 9B06                       	dc.b	nD2, $06
0008D06C EC04                       	smpsPSGAlterVol     $04
0008D06E E701                       	dc.b	smpsNoAttack, $01
0008D070 EC07                       	smpsPSGAlterVol     $07
0008D072 8003                       	dc.b	nRst, $03
0008D074 ECF5                       	smpsPSGAlterVol     $F5
0008D076 9B06                       	dc.b	nD2, $06
0008D078 EC04                       	smpsPSGAlterVol     $04
0008D07A E701                       	dc.b	smpsNoAttack, $01
0008D07C EC07                       	smpsPSGAlterVol     $07
0008D07E 8006                       	dc.b	nRst, $06
0008D080 E102                       	smpsAlterNote       $02
0008D082 01                         	dc.b	$01
0008D083 E106                       	smpsAlterNote       $06
0008D085 01                         	dc.b	$01
0008D086 E102                       	smpsAlterNote       $02
0008D088 01                         	dc.b	$01
0008D089 E1FF                       	smpsAlterNote       $FF
0008D08B 01                         	dc.b	$01
0008D08C ECF5                       	smpsPSGAlterVol     $F5
0008D08E 9B06                       	dc.b	nD2, $06
0008D090 EC04                       	smpsPSGAlterVol     $04
0008D092 E701                       	dc.b	smpsNoAttack, $01
0008D094 EC07                       	smpsPSGAlterVol     $07
0008D096 8003                       	dc.b	nRst, $03
0008D098 ECF5                       	smpsPSGAlterVol     $F5
0008D09A 9B07                       	dc.b	nD2, $07
0008D09C E1FE                       	smpsAlterNote       $FE
0008D09E 9706                       	dc.b	nBb1, $06
0008D0A0 EC04                       	smpsPSGAlterVol     $04
0008D0A2 E701                       	dc.b	smpsNoAttack, $01
0008D0A4 ECFC                       	smpsPSGAlterVol     $FC
0008D0A6 9703                       	dc.b	nBb1, $03
0008D0A8 EC04                       	smpsPSGAlterVol     $04
0008D0AA E701                       	dc.b	smpsNoAttack, $01
0008D0AC ECFC                       	smpsPSGAlterVol     $FC
0008D0AE 9702                       	dc.b	nBb1, $02
0008D0B0 EC04                       	smpsPSGAlterVol     $04
0008D0B2 E701                       	dc.b	smpsNoAttack, $01
0008D0B4 ECFC                       	smpsPSGAlterVol     $FC
0008D0B6 9606                       	dc.b	nA1, $06
0008D0B8 EC04                       	smpsPSGAlterVol     $04
0008D0BA E701                       	dc.b	smpsNoAttack, $01
0008D0BC EC07                       	smpsPSGAlterVol     $07
0008D0BE 8006                       	dc.b	nRst, $06
0008D0C0 E101                       	smpsAlterNote       $01
0008D0C2 01                         	dc.b	$01
0008D0C3 E107                       	smpsAlterNote       $07
0008D0C5 01                         	dc.b	$01
0008D0C6 E101                       	smpsAlterNote       $01
0008D0C8 01                         	dc.b	$01
0008D0C9 E1F8                       	smpsAlterNote       $F8
0008D0CB 01                         	dc.b	$01
0008D0CC E1F7                       	smpsAlterNote       $F7
0008D0CE 01                         	dc.b	$01
0008D0CF E1FC                       	smpsAlterNote       $FC
0008D0D1 01                         	dc.b	$01
0008D0D2 E106                       	smpsAlterNote       $06
0008D0D4 01                         	dc.b	$01
0008D0D5 E107                       	smpsAlterNote       $07
0008D0D7 01                         	dc.b	$01
0008D0D8 E101                       	smpsAlterNote       $01
0008D0DA 01                         	dc.b	$01
0008D0DB E1F8                       	smpsAlterNote       $F8
0008D0DD 0101                       	dc.b	$01, $01
0008D0DF E1FC                       	smpsAlterNote       $FC
0008D0E1 ECF5                       	smpsPSGAlterVol     $F5
0008D0E3 8F06                       	dc.b	nD1, $06
0008D0E5 EC04                       	smpsPSGAlterVol     $04
0008D0E7 E701                       	dc.b	smpsNoAttack, $01
0008D0E9 EC07                       	smpsPSGAlterVol     $07
0008D0EB 8003                       	dc.b	nRst, $03
0008D0ED ECF5                       	smpsPSGAlterVol     $F5
0008D0EF 8F06                       	dc.b	nD1, $06
0008D0F1 EC04                       	smpsPSGAlterVol     $04
0008D0F3 E701                       	dc.b	smpsNoAttack, $01
0008D0F5 EC07                       	smpsPSGAlterVol     $07
0008D0F7 8006                       	dc.b	nRst, $06
0008D0F9 E1FF                       	smpsAlterNote       $FF
0008D0FB 01                         	dc.b	$01
0008D0FC E102                       	smpsAlterNote       $02
0008D0FE 01                         	dc.b	$01
0008D0FF E101                       	smpsAlterNote       $01
0008D101 01                         	dc.b	$01
0008D102 E1FC                       	smpsAlterNote       $FC
0008D104 01                         	dc.b	$01
0008D105 ECF5                       	smpsPSGAlterVol     $F5
0008D107 9007                       	dc.b	nEb1, $07
0008D109 EC0B                       	smpsPSGAlterVol     $0B
0008D10B 8004                       	dc.b	nRst, $04
0008D10D ECF5                       	smpsPSGAlterVol     $F5
0008D10F 9006                       	dc.b	nEb1, $06
0008D111 EC0B                       	smpsPSGAlterVol     $0B
0008D113 8007                       	dc.b	nRst, $07
0008D115 E103                       	smpsAlterNote       $03
0008D117 0101                       	dc.b	$01, $01
0008D119 E1FC                       	smpsAlterNote       $FC
0008D11B 01                         	dc.b	$01
0008D11C E1F9                       	smpsAlterNote       $F9
0008D11E 01                         	dc.b	$01
0008D11F E1FC                       	smpsAlterNote       $FC
0008D121 ECF5                       	smpsPSGAlterVol     $F5
0008D123 8F06                       	dc.b	nD1, $06
0008D125 EC04                       	smpsPSGAlterVol     $04
0008D127 E701                       	dc.b	smpsNoAttack, $01
0008D129 EC07                       	smpsPSGAlterVol     $07
0008D12B 8003                       	dc.b	nRst, $03
0008D12D ECF5                       	smpsPSGAlterVol     $F5
0008D12F 8F06                       	dc.b	nD1, $06
0008D131 EC04                       	smpsPSGAlterVol     $04
0008D133 E701                       	dc.b	smpsNoAttack, $01
0008D135 EC07                       	smpsPSGAlterVol     $07
0008D137 8006                       	dc.b	nRst, $06
0008D139 E1FF                       	smpsAlterNote       $FF
0008D13B 01                         	dc.b	$01
0008D13C E103                       	smpsAlterNote       $03
0008D13E 01                         	dc.b	$01
0008D13F E1FF                       	smpsAlterNote       $FF
0008D141 01                         	dc.b	$01
0008D142 E1F9                       	smpsAlterNote       $F9
0008D144 01                         	dc.b	$01
0008D145 E1FC                       	smpsAlterNote       $FC
0008D147 ECF5                       	smpsPSGAlterVol     $F5
0008D149 8F06                       	dc.b	nD1, $06
0008D14B EC04                       	smpsPSGAlterVol     $04
0008D14D E701                       	dc.b	smpsNoAttack, $01
0008D14F EC07                       	smpsPSGAlterVol     $07
0008D151 8003                       	dc.b	nRst, $03
0008D153 ECF5                       	smpsPSGAlterVol     $F5
0008D155 8F07                       	dc.b	nD1, $07
0008D157 EC0B                       	smpsPSGAlterVol     $0B
0008D159 8006                       	dc.b	nRst, $06
0008D15B E1FF                       	smpsAlterNote       $FF
0008D15D 01                         	dc.b	$01
0008D15E E102                       	smpsAlterNote       $02
0008D160 0101                       	dc.b	$01, $01
0008D162 E1FC                       	smpsAlterNote       $FC
0008D164 01                         	dc.b	$01
0008D165 ECF5                       	smpsPSGAlterVol     $F5
0008D167 8F07                       	dc.b	nD1, $07
0008D169 EC0B                       	smpsPSGAlterVol     $0B
0008D16B 8004                       	dc.b	nRst, $04
0008D16D ECF5                       	smpsPSGAlterVol     $F5
0008D16F 8F06                       	dc.b	nD1, $06
0008D171 EC04                       	smpsPSGAlterVol     $04
0008D173 E701                       	dc.b	smpsNoAttack, $01
0008D175 EC07                       	smpsPSGAlterVol     $07
0008D177 8006                       	dc.b	nRst, $06
0008D179 E101                       	smpsAlterNote       $01
0008D17B 01                         	dc.b	$01
0008D17C E102                       	smpsAlterNote       $02
0008D17E 01                         	dc.b	$01
0008D17F E1FF                       	smpsAlterNote       $FF
0008D181 01                         	dc.b	$01
0008D182 E1F9                       	smpsAlterNote       $F9
0008D184 01                         	dc.b	$01
0008D185 E1FC                       	smpsAlterNote       $FC
0008D187 ECF5                       	smpsPSGAlterVol     $F5
0008D189 9006                       	dc.b	nEb1, $06
0008D18B EC04                       	smpsPSGAlterVol     $04
0008D18D E701                       	dc.b	smpsNoAttack, $01
0008D18F EC07                       	smpsPSGAlterVol     $07
0008D191 8003                       	dc.b	nRst, $03
0008D193 ECF5                       	smpsPSGAlterVol     $F5
0008D195 9006                       	dc.b	nEb1, $06
0008D197 EC04                       	smpsPSGAlterVol     $04
0008D199 E701                       	dc.b	smpsNoAttack, $01
0008D19B EC07                       	smpsPSGAlterVol     $07
0008D19D 8006                       	dc.b	nRst, $06
0008D19F E100                       	smpsAlterNote       $00
0008D1A1 01                         	dc.b	$01
0008D1A2 E102                       	smpsAlterNote       $02
0008D1A4 01                         	dc.b	$01
0008D1A5 E100                       	smpsAlterNote       $00
0008D1A7 01                         	dc.b	$01
0008D1A8 E1FF                       	smpsAlterNote       $FF
0008D1AA 01                         	dc.b	$01
0008D1AB ECF5                       	smpsPSGAlterVol     $F5
0008D1AD 9B06                       	dc.b	nD2, $06
0008D1AF EC04                       	smpsPSGAlterVol     $04
0008D1B1 E701                       	dc.b	smpsNoAttack, $01
0008D1B3 EC07                       	smpsPSGAlterVol     $07
0008D1B5 8003                       	dc.b	nRst, $03
0008D1B7 ECF5                       	smpsPSGAlterVol     $F5
0008D1B9 9B07                       	dc.b	nD2, $07
0008D1BB EC0B                       	smpsPSGAlterVol     $0B
0008D1BD 8007                       	dc.b	nRst, $07
0008D1BF E105                       	smpsAlterNote       $05
0008D1C1 0101                       	dc.b	$01, $01
0008D1C3 E1FF                       	smpsAlterNote       $FF
0008D1C5 01                         	dc.b	$01
0008D1C6 E1FC                       	smpsAlterNote       $FC
0008D1C8 01                         	dc.b	$01
0008D1C9 E1FF                       	smpsAlterNote       $FF
0008D1CB ECF5                       	smpsPSGAlterVol     $F5
0008D1CD 9B06                       	dc.b	nD2, $06
0008D1CF EC0B                       	smpsPSGAlterVol     $0B
0008D1D1 8004                       	dc.b	nRst, $04
0008D1D3 ECF5                       	smpsPSGAlterVol     $F5
0008D1D5 9B06                       	dc.b	nD2, $06
0008D1D7 EC04                       	smpsPSGAlterVol     $04
0008D1D9 E701                       	dc.b	smpsNoAttack, $01
0008D1DB EC07                       	smpsPSGAlterVol     $07
0008D1DD 8006                       	dc.b	nRst, $06
0008D1DF E102                       	smpsAlterNote       $02
0008D1E1 01                         	dc.b	$01
0008D1E2 E106                       	smpsAlterNote       $06
0008D1E4 01                         	dc.b	$01
0008D1E5 E102                       	smpsAlterNote       $02
0008D1E7 01                         	dc.b	$01
0008D1E8 E1FC                       	smpsAlterNote       $FC
0008D1EA 01                         	dc.b	$01
0008D1EB E1FF                       	smpsAlterNote       $FF
0008D1ED ECF5                       	smpsPSGAlterVol     $F5
0008D1EF 9B06                       	dc.b	nD2, $06
0008D1F1 EC04                       	smpsPSGAlterVol     $04
0008D1F3 E701                       	dc.b	smpsNoAttack, $01
0008D1F5 EC07                       	smpsPSGAlterVol     $07
0008D1F7 8003                       	dc.b	nRst, $03
0008D1F9 ECF5                       	smpsPSGAlterVol     $F5
0008D1FB 9B07                       	dc.b	nD2, $07
0008D1FD EC0B                       	smpsPSGAlterVol     $0B
0008D1FF 8006                       	dc.b	nRst, $06
0008D201 E102                       	smpsAlterNote       $02
0008D203 01                         	dc.b	$01
0008D204 E105                       	smpsAlterNote       $05
0008D206 0101                       	dc.b	$01, $01
0008D208 E1FF                       	smpsAlterNote       $FF
0008D20A 01                         	dc.b	$01
0008D20B ECF5                       	smpsPSGAlterVol     $F5
0008D20D 9B07                       	dc.b	nD2, $07
0008D20F EC0B                       	smpsPSGAlterVol     $0B
0008D211 8004                       	dc.b	nRst, $04
0008D213 ECF5                       	smpsPSGAlterVol     $F5
0008D215 9B06                       	dc.b	nD2, $06
0008D217 EC0B                       	smpsPSGAlterVol     $0B
0008D219 8007                       	dc.b	nRst, $07
0008D21B E105                       	smpsAlterNote       $05
0008D21D 0101                       	dc.b	$01, $01
0008D21F E102                       	smpsAlterNote       $02
0008D221 01                         	dc.b	$01
0008D222 E1FC                       	smpsAlterNote       $FC
0008D224 01                         	dc.b	$01
0008D225 E1FF                       	smpsAlterNote       $FF
0008D227 ECF5                       	smpsPSGAlterVol     $F5
0008D229 9B06                       	dc.b	nD2, $06
0008D22B EC04                       	smpsPSGAlterVol     $04
0008D22D E701                       	dc.b	smpsNoAttack, $01
0008D22F EC07                       	smpsPSGAlterVol     $07
0008D231 8003                       	dc.b	nRst, $03
0008D233 ECF5                       	smpsPSGAlterVol     $F5
0008D235 9B06                       	dc.b	nD2, $06
0008D237 EC04                       	smpsPSGAlterVol     $04
0008D239 E701                       	dc.b	smpsNoAttack, $01
0008D23B EC07                       	smpsPSGAlterVol     $07
0008D23D 8006                       	dc.b	nRst, $06
0008D23F E102                       	smpsAlterNote       $02
0008D241 01                         	dc.b	$01
0008D242 E106                       	smpsAlterNote       $06
0008D244 01                         	dc.b	$01
0008D245 E102                       	smpsAlterNote       $02
0008D247 01                         	dc.b	$01
0008D248 E1FF                       	smpsAlterNote       $FF
0008D24A 01                         	dc.b	$01
0008D24B ECF5                       	smpsPSGAlterVol     $F5
0008D24D 9B06                       	dc.b	nD2, $06
0008D24F EC04                       	smpsPSGAlterVol     $04
0008D251 E701                       	dc.b	smpsNoAttack, $01
0008D253 EC07                       	smpsPSGAlterVol     $07
0008D255 8003                       	dc.b	nRst, $03
0008D257 ECF5                       	smpsPSGAlterVol     $F5
0008D259 9B07                       	dc.b	nD2, $07
0008D25B EC0B                       	smpsPSGAlterVol     $0B
0008D25D 8007                       	dc.b	nRst, $07
0008D25F E105                       	smpsAlterNote       $05
0008D261 0101                       	dc.b	$01, $01
0008D263 E1FF                       	smpsAlterNote       $FF
0008D265 01                         	dc.b	$01
0008D266 E1FC                       	smpsAlterNote       $FC
0008D268 01                         	dc.b	$01
0008D269 E1FF                       	smpsAlterNote       $FF
0008D26B ECF5                       	smpsPSGAlterVol     $F5
0008D26D 9B06                       	dc.b	nD2, $06
0008D26F EC0B                       	smpsPSGAlterVol     $0B
0008D271 8004                       	dc.b	nRst, $04
0008D273 ECF5                       	smpsPSGAlterVol     $F5
0008D275 9B06                       	dc.b	nD2, $06
0008D277 EC04                       	smpsPSGAlterVol     $04
0008D279 E701                       	dc.b	smpsNoAttack, $01
0008D27B EC07                       	smpsPSGAlterVol     $07
0008D27D 8006                       	dc.b	nRst, $06
0008D27F E102                       	smpsAlterNote       $02
0008D281 01                         	dc.b	$01
0008D282 E106                       	smpsAlterNote       $06
0008D284 01                         	dc.b	$01
0008D285 E102                       	smpsAlterNote       $02
0008D287 01                         	dc.b	$01
0008D288 E1FC                       	smpsAlterNote       $FC
0008D28A 01                         	dc.b	$01
0008D28B E1FF                       	smpsAlterNote       $FF
0008D28D ECF5                       	smpsPSGAlterVol     $F5
0008D28F 9B06                       	dc.b	nD2, $06
0008D291 EC04                       	smpsPSGAlterVol     $04
0008D293 E701                       	dc.b	smpsNoAttack, $01
0008D295 EC07                       	smpsPSGAlterVol     $07
0008D297 8003                       	dc.b	nRst, $03
0008D299 ECF5                       	smpsPSGAlterVol     $F5
0008D29B 9B06                       	dc.b	nD2, $06
0008D29D EC04                       	smpsPSGAlterVol     $04
0008D29F E701                       	dc.b	smpsNoAttack, $01
0008D2A1 EC07                       	smpsPSGAlterVol     $07
0008D2A3 8006                       	dc.b	nRst, $06
0008D2A5 E102                       	smpsAlterNote       $02
0008D2A7 01                         	dc.b	$01
0008D2A8 E106                       	smpsAlterNote       $06
0008D2AA 01                         	dc.b	$01
0008D2AB E105                       	smpsAlterNote       $05
0008D2AD 01                         	dc.b	$01
0008D2AE E1FF                       	smpsAlterNote       $FF
0008D2B0 01                         	dc.b	$01
0008D2B1 ECF5                       	smpsPSGAlterVol     $F5
0008D2B3 9B07                       	dc.b	nD2, $07
0008D2B5 EC0B                       	smpsPSGAlterVol     $0B
0008D2B7 8004                       	dc.b	nRst, $04
0008D2B9 ECF5                       	smpsPSGAlterVol     $F5
0008D2BB 9B06                       	dc.b	nD2, $06
0008D2BD EC0B                       	smpsPSGAlterVol     $0B
0008D2BF 8007                       	dc.b	nRst, $07
0008D2C1 E105                       	smpsAlterNote       $05
0008D2C3 0101                       	dc.b	$01, $01
0008D2C5 E101                       	smpsAlterNote       $01
0008D2C7 01                         	dc.b	$01
0008D2C8 E1FB                       	smpsAlterNote       $FB
0008D2CA 01                         	dc.b	$01
0008D2CB E1FE                       	smpsAlterNote       $FE
0008D2CD ECF5                       	smpsPSGAlterVol     $F5
0008D2CF 9A06                       	dc.b	nCs2, $06
0008D2D1 EC04                       	smpsPSGAlterVol     $04
0008D2D3 E701                       	dc.b	smpsNoAttack, $01
0008D2D5 EC07                       	smpsPSGAlterVol     $07
0008D2D7 8003                       	dc.b	nRst, $03
0008D2D9 ECF5                       	smpsPSGAlterVol     $F5
0008D2DB 9A06                       	dc.b	nCs2, $06
0008D2DD EC04                       	smpsPSGAlterVol     $04
0008D2DF E701                       	dc.b	smpsNoAttack, $01
0008D2E1 EC07                       	smpsPSGAlterVol     $07
0008D2E3 8003                       	dc.b	nRst, $03
0008D2E5 E1FC                       	smpsAlterNote       $FC
0008D2E7 ECF5                       	smpsPSGAlterVol     $F5
0008D2E9 8F07                       	dc.b	nD1, $07
0008D2EB EC0B                       	smpsPSGAlterVol     $0B
0008D2ED 8006                       	dc.b	nRst, $06
0008D2EF E1FF                       	smpsAlterNote       $FF
0008D2F1 01                         	dc.b	$01
0008D2F2 E103                       	smpsAlterNote       $03
0008D2F4 01                         	dc.b	$01
0008D2F5 E102                       	smpsAlterNote       $02
0008D2F7 01                         	dc.b	$01
0008D2F8 E1FC                       	smpsAlterNote       $FC
0008D2FA 01                         	dc.b	$01
0008D2FB E1F8                       	smpsAlterNote       $F8
0008D2FD 01                         	dc.b	$01
0008D2FE E1FC                       	smpsAlterNote       $FC
0008D300 01                         	dc.b	$01
0008D301 E1FF                       	smpsAlterNote       $FF
0008D303 01                         	dc.b	$01
0008D304 E103                       	smpsAlterNote       $03
0008D306 01                         	dc.b	$01
0008D307 E1FC                       	smpsAlterNote       $FC
0008D309 ECF5                       	smpsPSGAlterVol     $F5
0008D30B 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008D30F EC04                       	smpsPSGAlterVol     $04
0008D311 E701                       	dc.b	smpsNoAttack, $01
0008D313 EC07                       	smpsPSGAlterVol     $07
0008D315 8009                       	dc.b	nRst, $09
0008D317 E1FF                       	smpsAlterNote       $FF
0008D319 01                         	dc.b	$01
0008D31A E103                       	smpsAlterNote       $03
0008D31C 01                         	dc.b	$01
0008D31D E102                       	smpsAlterNote       $02
0008D31F 01                         	dc.b	$01
0008D320 E1FC                       	smpsAlterNote       $FC
0008D322 01                         	dc.b	$01
0008D323 E1F8                       	smpsAlterNote       $F8
0008D325 01                         	dc.b	$01
0008D326 E1FC                       	smpsAlterNote       $FC
0008D328 01                         	dc.b	$01
0008D329 E1FF                       	smpsAlterNote       $FF
0008D32B 01                         	dc.b	$01
0008D32C E103                       	smpsAlterNote       $03
0008D32E 01                         	dc.b	$01
0008D32F E1FF                       	smpsAlterNote       $FF
0008D331 01                         	dc.b	$01
0008D332 E1F9                       	smpsAlterNote       $F9
0008D334 01                         	dc.b	$01
0008D335 E1F8                       	smpsAlterNote       $F8
0008D337 01                         	dc.b	$01
0008D338 E1FC                       	smpsAlterNote       $FC
0008D33A 01                         	dc.b	$01
0008D33B E102                       	smpsAlterNote       $02
0008D33D 0101                       	dc.b	$01, $01
0008D33F E1FF                       	smpsAlterNote       $FF
0008D341 01                         	dc.b	$01
0008D342 E1FC                       	smpsAlterNote       $FC
0008D344 ECF5                       	smpsPSGAlterVol     $F5
0008D346 8F02                       	dc.b	nD1, $02
0008D348 EC04                       	smpsPSGAlterVol     $04
0008D34A E701                       	dc.b	smpsNoAttack, $01
0008D34C ECFC                       	smpsPSGAlterVol     $FC
0008D34E E1FB                       	smpsAlterNote       $FB
0008D350 8D06                       	dc.b	nC1, $06
0008D352 EC04                       	smpsPSGAlterVol     $04
0008D354 E701                       	dc.b	smpsNoAttack, $01
0008D356 EC07                       	smpsPSGAlterVol     $07
0008D358 8006                       	dc.b	nRst, $06
0008D35A E1FE                       	smpsAlterNote       $FE
0008D35C 01                         	dc.b	$01
0008D35D E102                       	smpsAlterNote       $02
0008D35F 01                         	dc.b	$01
0008D360 E1FE                       	smpsAlterNote       $FE
0008D362 01                         	dc.b	$01
0008D363 E1FB                       	smpsAlterNote       $FB
0008D365 01                         	dc.b	$01
0008D366 E1F7                       	smpsAlterNote       $F7
0008D368 01                         	dc.b	$01
0008D369 E1FB                       	smpsAlterNote       $FB
0008D36B 01                         	dc.b	$01
0008D36C E101                       	smpsAlterNote       $01
0008D36E 01                         	dc.b	$01
0008D36F E102                       	smpsAlterNote       $02
0008D371 01                         	dc.b	$01
0008D372 E1FB                       	smpsAlterNote       $FB
0008D374 ECF5                       	smpsPSGAlterVol     $F5
0008D376 8D02                       	dc.b	nC1, $02
0008D378 EC04                       	smpsPSGAlterVol     $04
0008D37A E701                       	dc.b	smpsNoAttack, $01
0008D37C E1FC                       	smpsAlterNote       $FC
0008D37E ECFC                       	smpsPSGAlterVol     $FC
0008D380 8F0D                       	dc.b	nD1, $0D
0008D382 E1FF                       	smpsAlterNote       $FF
0008D384 E701                       	dc.b	smpsNoAttack, $01
0008D386 E103                       	smpsAlterNote       $03
0008D388 E701                       	dc.b	smpsNoAttack, $01
0008D38A E1FF                       	smpsAlterNote       $FF
0008D38C E701                       	dc.b	smpsNoAttack, $01
0008D38E E1FC                       	smpsAlterNote       $FC
0008D390 E701                       	dc.b	smpsNoAttack, $01
0008D392 E1F8                       	smpsAlterNote       $F8
0008D394 E701                       	dc.b	smpsNoAttack, $01
0008D396 E1FC                       	smpsAlterNote       $FC
0008D398 E701                       	dc.b	smpsNoAttack, $01
0008D39A E102                       	smpsAlterNote       $02
0008D39C E701                       	dc.b	smpsNoAttack, $01
0008D39E E103                       	smpsAlterNote       $03
0008D3A0 E701                       	dc.b	smpsNoAttack, $01
0008D3A2 E1FF                       	smpsAlterNote       $FF
0008D3A4 E701                       	dc.b	smpsNoAttack, $01
0008D3A6 E1F9                       	smpsAlterNote       $F9
0008D3A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3AC E1FC                       	smpsAlterNote       $FC
0008D3AE E701                       	dc.b	smpsNoAttack, $01
0008D3B0 E102                       	smpsAlterNote       $02
0008D3B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3B6 E1FC                       	smpsAlterNote       $FC
0008D3B8 E701                       	dc.b	smpsNoAttack, $01
0008D3BA E1F9                       	smpsAlterNote       $F9
0008D3BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3C0 E1FF                       	smpsAlterNote       $FF
0008D3C2 EC04                       	smpsPSGAlterVol     $04
0008D3C4 E701                       	dc.b	smpsNoAttack, $01
0008D3C6 EC07                       	smpsPSGAlterVol     $07
0008D3C8 E103                       	smpsAlterNote       $03
0008D3CA 8001                       	dc.b	nRst, $01
0008D3CC E102                       	smpsAlterNote       $02
0008D3CE 01                         	dc.b	$01
0008D3CF E1FB                       	smpsAlterNote       $FB
0008D3D1 01                         	dc.b	$01
0008D3D2 E1F7                       	smpsAlterNote       $F7
0008D3D4 01                         	dc.b	$01
0008D3D5 E1FB                       	smpsAlterNote       $FB
0008D3D7 01                         	dc.b	$01
0008D3D8 E102                       	smpsAlterNote       $02
0008D3DA 01                         	dc.b	$01
0008D3DB E103                       	smpsAlterNote       $03
0008D3DD 01                         	dc.b	$01
0008D3DE E1FB                       	smpsAlterNote       $FB
0008D3E0 ECF5                       	smpsPSGAlterVol     $F5
0008D3E2 8E06                       	dc.b	nCs1, $06
0008D3E4 EC04                       	smpsPSGAlterVol     $04
0008D3E6 E701                       	dc.b	smpsNoAttack, $01
0008D3E8 EC07                       	smpsPSGAlterVol     $07
0008D3EA 8003                       	dc.b	nRst, $03
0008D3EC ECF5                       	smpsPSGAlterVol     $F5
0008D3EE 8E06                       	dc.b	nCs1, $06
0008D3F0 EC04                       	smpsPSGAlterVol     $04
0008D3F2 E701                       	dc.b	smpsNoAttack, $01
0008D3F4 EC07                       	smpsPSGAlterVol     $07
0008D3F6 8006                       	dc.b	nRst, $06
0008D3F8 E1FE                       	smpsAlterNote       $FE
0008D3FA 01                         	dc.b	$01
0008D3FB E102                       	smpsAlterNote       $02
0008D3FD 01                         	dc.b	$01
0008D3FE E1FE                       	smpsAlterNote       $FE
0008D400 01                         	dc.b	$01
0008D401 E1F9                       	smpsAlterNote       $F9
0008D403 01                         	dc.b	$01
0008D404 E1FC                       	smpsAlterNote       $FC
0008D406 ECF5                       	smpsPSGAlterVol     $F5
0008D408 8F06                       	dc.b	nD1, $06
0008D40A EC04                       	smpsPSGAlterVol     $04
0008D40C E701                       	dc.b	smpsNoAttack, $01
0008D40E EC07                       	smpsPSGAlterVol     $07
0008D410 8003                       	dc.b	nRst, $03
0008D412 ECF5                       	smpsPSGAlterVol     $F5
0008D414 8F07                       	dc.b	nD1, $07
0008D416 EC0B                       	smpsPSGAlterVol     $0B
0008D418 8006                       	dc.b	nRst, $06
0008D41A E1FF                       	smpsAlterNote       $FF
0008D41C 01                         	dc.b	$01
0008D41D E102                       	smpsAlterNote       $02
0008D41F 0101                       	dc.b	$01, $01
0008D421 E1FB                       	smpsAlterNote       $FB
0008D423 01                         	dc.b	$01
0008D424 ECF5                       	smpsPSGAlterVol     $F5
0008D426 8E07                       	dc.b	nCs1, $07
0008D428 EC0B                       	smpsPSGAlterVol     $0B
0008D42A 8004                       	dc.b	nRst, $04
0008D42C ECF5                       	smpsPSGAlterVol     $F5
0008D42E 8E06                       	dc.b	nCs1, $06
0008D430 EC04                       	smpsPSGAlterVol     $04
0008D432 E701                       	dc.b	smpsNoAttack, $01
0008D434 EC07                       	smpsPSGAlterVol     $07
0008D436 8006                       	dc.b	nRst, $06
0008D438 E101                       	smpsAlterNote       $01
0008D43A 01                         	dc.b	$01
0008D43B E102                       	smpsAlterNote       $02
0008D43D 01                         	dc.b	$01
0008D43E E1FE                       	smpsAlterNote       $FE
0008D440 01                         	dc.b	$01
0008D441 E1F8                       	smpsAlterNote       $F8
0008D443 01                         	dc.b	$01
0008D444 E1FB                       	smpsAlterNote       $FB
0008D446 ECF5                       	smpsPSGAlterVol     $F5
0008D448 8E06                       	dc.b	nCs1, $06
0008D44A EC04                       	smpsPSGAlterVol     $04
0008D44C E701                       	dc.b	smpsNoAttack, $01
0008D44E EC07                       	smpsPSGAlterVol     $07
0008D450 8003                       	dc.b	nRst, $03
0008D452 ECF5                       	smpsPSGAlterVol     $F5
0008D454 8E06                       	dc.b	nCs1, $06
0008D456 EC04                       	smpsPSGAlterVol     $04
0008D458 E701                       	dc.b	smpsNoAttack, $01
0008D45A EC07                       	smpsPSGAlterVol     $07
0008D45C 8004                       	dc.b	nRst, $04
0008D45E E1FC                       	smpsAlterNote       $FC
0008D460 ECF5                       	smpsPSGAlterVol     $F5
0008D462 8F06                       	dc.b	nD1, $06
0008D464 EC0B                       	smpsPSGAlterVol     $0B
0008D466 8006                       	dc.b	nRst, $06
0008D468 E1FF                       	smpsAlterNote       $FF
0008D46A 01                         	dc.b	$01
0008D46B E102                       	smpsAlterNote       $02
0008D46D 0101                       	dc.b	$01, $01
0008D46F E1FC                       	smpsAlterNote       $FC
0008D471 01                         	dc.b	$01
0008D472 E1F8                       	smpsAlterNote       $F8
0008D474 01                         	dc.b	$01
0008D475 E1F9                       	smpsAlterNote       $F9
0008D477 01                         	dc.b	$01
0008D478 E1FF                       	smpsAlterNote       $FF
0008D47A 01                         	dc.b	$01
0008D47B E103                       	smpsAlterNote       $03
0008D47D 01                         	dc.b	$01
0008D47E E1FC                       	smpsAlterNote       $FC
0008D480 ECF5                       	smpsPSGAlterVol     $F5
0008D482 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008D486 EC04                       	smpsPSGAlterVol     $04
0008D488 E701                       	dc.b	smpsNoAttack, $01
0008D48A EC07                       	smpsPSGAlterVol     $07
0008D48C 8009                       	dc.b	nRst, $09
0008D48E E1FF                       	smpsAlterNote       $FF
0008D490 01                         	dc.b	$01
0008D491 E102                       	smpsAlterNote       $02
0008D493 0101                       	dc.b	$01, $01
0008D495 E1FC                       	smpsAlterNote       $FC
0008D497 01                         	dc.b	$01
0008D498 E1F8                       	smpsAlterNote       $F8
0008D49A 01                         	dc.b	$01
0008D49B E1F9                       	smpsAlterNote       $F9
0008D49D 01                         	dc.b	$01
0008D49E E1FF                       	smpsAlterNote       $FF
0008D4A0 01                         	dc.b	$01
0008D4A1 E103                       	smpsAlterNote       $03
0008D4A3 01                         	dc.b	$01
0008D4A4 E1FF                       	smpsAlterNote       $FF
0008D4A6 01                         	dc.b	$01
0008D4A7 E1FC                       	smpsAlterNote       $FC
0008D4A9 01                         	dc.b	$01
0008D4AA E1F8                       	smpsAlterNote       $F8
0008D4AC 01                         	dc.b	$01
0008D4AD E1FC                       	smpsAlterNote       $FC
0008D4AF 01                         	dc.b	$01
0008D4B0 E102                       	smpsAlterNote       $02
0008D4B2 01                         	dc.b	$01
0008D4B3 E103                       	smpsAlterNote       $03
0008D4B5 01                         	dc.b	$01
0008D4B6 E1FF                       	smpsAlterNote       $FF
0008D4B8 01                         	dc.b	$01
0008D4B9 E1FC                       	smpsAlterNote       $FC
0008D4BB ECF5                       	smpsPSGAlterVol     $F5
0008D4BD 8F03                       	dc.b	nD1, $03
0008D4BF E1FB                       	smpsAlterNote       $FB
0008D4C1 8D06                       	dc.b	nC1, $06
0008D4C3 EC04                       	smpsPSGAlterVol     $04
0008D4C5 E701                       	dc.b	smpsNoAttack, $01
0008D4C7 EC07                       	smpsPSGAlterVol     $07
0008D4C9 8006                       	dc.b	nRst, $06
0008D4CB E1FE                       	smpsAlterNote       $FE
0008D4CD 01                         	dc.b	$01
0008D4CE E102                       	smpsAlterNote       $02
0008D4D0 01                         	dc.b	$01
0008D4D1 E101                       	smpsAlterNote       $01
0008D4D3 01                         	dc.b	$01
0008D4D4 E1FB                       	smpsAlterNote       $FB
0008D4D6 01                         	dc.b	$01
0008D4D7 E1F7                       	smpsAlterNote       $F7
0008D4D9 01                         	dc.b	$01
0008D4DA E1FB                       	smpsAlterNote       $FB
0008D4DC 01                         	dc.b	$01
0008D4DD E1FE                       	smpsAlterNote       $FE
0008D4DF 01                         	dc.b	$01
0008D4E0 E102                       	smpsAlterNote       $02
0008D4E2 01                         	dc.b	$01
0008D4E3 E1FB                       	smpsAlterNote       $FB
0008D4E5 ECF5                       	smpsPSGAlterVol     $F5
0008D4E7 8D03                       	dc.b	nC1, $03
0008D4E9 E1FC                       	smpsAlterNote       $FC
0008D4EB 8F0D                       	dc.b	nD1, $0D
0008D4ED E1FF                       	smpsAlterNote       $FF
0008D4EF E701                       	dc.b	smpsNoAttack, $01
0008D4F1 E103                       	smpsAlterNote       $03
0008D4F3 E701                       	dc.b	smpsNoAttack, $01
0008D4F5 E1FF                       	smpsAlterNote       $FF
0008D4F7 E701                       	dc.b	smpsNoAttack, $01
0008D4F9 E1FC                       	smpsAlterNote       $FC
0008D4FB E701                       	dc.b	smpsNoAttack, $01
0008D4FD E1F8                       	smpsAlterNote       $F8
0008D4FF E701                       	dc.b	smpsNoAttack, $01
0008D501 E1FC                       	smpsAlterNote       $FC
0008D503 E701                       	dc.b	smpsNoAttack, $01
0008D505 E102                       	smpsAlterNote       $02
0008D507 E701                       	dc.b	smpsNoAttack, $01
0008D509 E103                       	smpsAlterNote       $03
0008D50B E701                       	dc.b	smpsNoAttack, $01
0008D50D E1FF                       	smpsAlterNote       $FF
0008D50F E701                       	dc.b	smpsNoAttack, $01
0008D511 E1F9                       	smpsAlterNote       $F9
0008D513 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D517 E1FC                       	smpsAlterNote       $FC
0008D519 E701                       	dc.b	smpsNoAttack, $01
0008D51B E102                       	smpsAlterNote       $02
0008D51D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D521 E1FF                       	smpsAlterNote       $FF
0008D523 E701                       	dc.b	smpsNoAttack, $01
0008D525 E1F9                       	smpsAlterNote       $F9
0008D527 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D52B E1FF                       	smpsAlterNote       $FF
0008D52D EC04                       	smpsPSGAlterVol     $04
0008D52F E701                       	dc.b	smpsNoAttack, $01
0008D531 EC07                       	smpsPSGAlterVol     $07
0008D533 E103                       	smpsAlterNote       $03
0008D535 8001                       	dc.b	nRst, $01
0008D537 E102                       	smpsAlterNote       $02
0008D539 01                         	dc.b	$01
0008D53A E1FB                       	smpsAlterNote       $FB
0008D53C 01                         	dc.b	$01
0008D53D E1F7                       	smpsAlterNote       $F7
0008D53F 01                         	dc.b	$01
0008D540 E1FB                       	smpsAlterNote       $FB
0008D542 01                         	dc.b	$01
0008D543 E1FF                       	smpsAlterNote       $FF
0008D545 01                         	dc.b	$01
0008D546 E103                       	smpsAlterNote       $03
0008D548 01                         	dc.b	$01
0008D549 E1FB                       	smpsAlterNote       $FB
0008D54B ECF5                       	smpsPSGAlterVol     $F5
0008D54D 8E06                       	dc.b	nCs1, $06
0008D54F EC04                       	smpsPSGAlterVol     $04
0008D551 E701                       	dc.b	smpsNoAttack, $01
0008D553 EC07                       	smpsPSGAlterVol     $07
0008D555 8003                       	dc.b	nRst, $03
0008D557 ECF5                       	smpsPSGAlterVol     $F5
0008D559 8E06                       	dc.b	nCs1, $06
0008D55B EC04                       	smpsPSGAlterVol     $04
0008D55D E701                       	dc.b	smpsNoAttack, $01
0008D55F EC07                       	smpsPSGAlterVol     $07
0008D561 8006                       	dc.b	nRst, $06
0008D563 E1FE                       	smpsAlterNote       $FE
0008D565 01                         	dc.b	$01
0008D566 E102                       	smpsAlterNote       $02
0008D568 01                         	dc.b	$01
0008D569 E1FE                       	smpsAlterNote       $FE
0008D56B 01                         	dc.b	$01
0008D56C E1FC                       	smpsAlterNote       $FC
0008D56E 01                         	dc.b	$01
0008D56F ECF5                       	smpsPSGAlterVol     $F5
0008D571 8F06                       	dc.b	nD1, $06
0008D573 EC04                       	smpsPSGAlterVol     $04
0008D575 E701                       	dc.b	smpsNoAttack, $01
0008D577 EC07                       	smpsPSGAlterVol     $07
0008D579 8003                       	dc.b	nRst, $03
0008D57B ECF5                       	smpsPSGAlterVol     $F5
0008D57D 8F07                       	dc.b	nD1, $07
0008D57F EC0B                       	smpsPSGAlterVol     $0B
0008D581 8007                       	dc.b	nRst, $07
0008D583 E102                       	smpsAlterNote       $02
0008D585 0101                       	dc.b	$01, $01
0008D587 E1FB                       	smpsAlterNote       $FB
0008D589 01                         	dc.b	$01
0008D58A E1F8                       	smpsAlterNote       $F8
0008D58C 01                         	dc.b	$01
0008D58D E1FB                       	smpsAlterNote       $FB
0008D58F ECF5                       	smpsPSGAlterVol     $F5
0008D591 8E06                       	dc.b	nCs1, $06
0008D593 EC0B                       	smpsPSGAlterVol     $0B
0008D595 8004                       	dc.b	nRst, $04
0008D597 ECF5                       	smpsPSGAlterVol     $F5
0008D599 8E06                       	dc.b	nCs1, $06
0008D59B EC04                       	smpsPSGAlterVol     $04
0008D59D E701                       	dc.b	smpsNoAttack, $01
0008D59F EC07                       	smpsPSGAlterVol     $07
0008D5A1 8006                       	dc.b	nRst, $06
0008D5A3 E1FE                       	smpsAlterNote       $FE
0008D5A5 01                         	dc.b	$01
0008D5A6 E102                       	smpsAlterNote       $02
0008D5A8 01                         	dc.b	$01
0008D5A9 E1FE                       	smpsAlterNote       $FE
0008D5AB 01                         	dc.b	$01
0008D5AC E1F9                       	smpsAlterNote       $F9
0008D5AE 01                         	dc.b	$01
0008D5AF E1FC                       	smpsAlterNote       $FC
0008D5B1 ECF5                       	smpsPSGAlterVol     $F5
0008D5B3 8F06                       	dc.b	nD1, $06
0008D5B5 EC04                       	smpsPSGAlterVol     $04
0008D5B7 E701                       	dc.b	smpsNoAttack, $01
0008D5B9 EC07                       	smpsPSGAlterVol     $07
0008D5BB 8003                       	dc.b	nRst, $03
0008D5BD ECF5                       	smpsPSGAlterVol     $F5
0008D5BF 8F06                       	dc.b	nD1, $06
0008D5C1 EC04                       	smpsPSGAlterVol     $04
0008D5C3 E701                       	dc.b	smpsNoAttack, $01
0008D5C5 EC07                       	smpsPSGAlterVol     $07
0008D5C7 8006                       	dc.b	nRst, $06
0008D5C9 E1FF                       	smpsAlterNote       $FF
0008D5CB 01                         	dc.b	$01
0008D5CC E103                       	smpsAlterNote       $03
0008D5CE 01                         	dc.b	$01
0008D5CF E102                       	smpsAlterNote       $02
0008D5D1 01                         	dc.b	$01
0008D5D2 E1FB                       	smpsAlterNote       $FB
0008D5D4 01                         	dc.b	$01
0008D5D5 ECF5                       	smpsPSGAlterVol     $F5
0008D5D7 8E07                       	dc.b	nCs1, $07
0008D5D9 EC0B                       	smpsPSGAlterVol     $0B
0008D5DB 8004                       	dc.b	nRst, $04
0008D5DD ECF5                       	smpsPSGAlterVol     $F5
0008D5DF 8E06                       	dc.b	nCs1, $06
0008D5E1 EC0B                       	smpsPSGAlterVol     $0B
0008D5E3 8007                       	dc.b	nRst, $07
0008D5E5 E101                       	smpsAlterNote       $01
0008D5E7 0101                       	dc.b	$01, $01
0008D5E9 E1FE                       	smpsAlterNote       $FE
0008D5EB 01                         	dc.b	$01
0008D5EC E1F9                       	smpsAlterNote       $F9
0008D5EE 01                         	dc.b	$01
0008D5EF E1FC                       	smpsAlterNote       $FC
0008D5F1 ECF5                       	smpsPSGAlterVol     $F5
0008D5F3 8F06                       	dc.b	nD1, $06
0008D5F5 EC04                       	smpsPSGAlterVol     $04
0008D5F7 E701                       	dc.b	smpsNoAttack, $01
0008D5F9 EC07                       	smpsPSGAlterVol     $07
0008D5FB 8003                       	dc.b	nRst, $03
0008D5FD ECF5                       	smpsPSGAlterVol     $F5
0008D5FF 8F06                       	dc.b	nD1, $06
0008D601 EC04                       	smpsPSGAlterVol     $04
0008D603 E701                       	dc.b	smpsNoAttack, $01
0008D605 EC07                       	smpsPSGAlterVol     $07
0008D607 8006                       	dc.b	nRst, $06
0008D609 E1FF                       	smpsAlterNote       $FF
0008D60B 01                         	dc.b	$01
0008D60C E103                       	smpsAlterNote       $03
0008D60E 01                         	dc.b	$01
0008D60F E1FF                       	smpsAlterNote       $FF
0008D611 01                         	dc.b	$01
0008D612 E1FB                       	smpsAlterNote       $FB
0008D614 01                         	dc.b	$01
0008D615 ECF5                       	smpsPSGAlterVol     $F5
0008D617 8E06                       	dc.b	nCs1, $06
0008D619 EC04                       	smpsPSGAlterVol     $04
0008D61B E701                       	dc.b	smpsNoAttack, $01
0008D61D EC07                       	smpsPSGAlterVol     $07
0008D61F 8003                       	dc.b	nRst, $03
0008D621 ECF5                       	smpsPSGAlterVol     $F5
0008D623 8E07                       	dc.b	nCs1, $07
0008D625 E1FF                       	smpsAlterNote       $FF
0008D627 9B06                       	dc.b	nD2, $06
0008D629 EC04                       	smpsPSGAlterVol     $04
0008D62B E701                       	dc.b	smpsNoAttack, $01
0008D62D ECFC                       	smpsPSGAlterVol     $FC
0008D62F 9B03                       	dc.b	nD2, $03
0008D631 EC04                       	smpsPSGAlterVol     $04
0008D633 E701                       	dc.b	smpsNoAttack, $01
0008D635 ECFC                       	smpsPSGAlterVol     $FC
0008D637 9B02                       	dc.b	nD2, $02
0008D639 EC04                       	smpsPSGAlterVol     $04
0008D63B E701                       	dc.b	smpsNoAttack, $01
0008D63D ECFC                       	smpsPSGAlterVol     $FC
0008D63F E1FE                       	smpsAlterNote       $FE
0008D641 9A03                       	dc.b	nCs2, $03
0008D643 EC0B                       	smpsPSGAlterVol     $0B
0008D645 800A                       	dc.b	nRst, $0A
0008D647 E102                       	smpsAlterNote       $02
0008D649 01                         	dc.b	$01
0008D64A E10A                       	smpsAlterNote       $0A
0008D64C 01                         	dc.b	$01
0008D64D E102                       	smpsAlterNote       $02
0008D64F 01                         	dc.b	$01
0008D650 E1F7                       	smpsAlterNote       $F7
0008D652 01                         	dc.b	$01
0008D653 E10A                       	smpsAlterNote       $0A
0008D655 01                         	dc.b	$01
0008D656 E1FC                       	smpsAlterNote       $FC
0008D658 01                         	dc.b	$01
0008D659 E108                       	smpsAlterNote       $08
0008D65B 0101                       	dc.b	$01, $01
0008D65D E102                       	smpsAlterNote       $02
0008D65F 01                         	dc.b	$01
0008D660 E1F7                       	smpsAlterNote       $F7
0008D662 0101                       	dc.b	$01, $01
0008D664 E1FC                       	smpsAlterNote       $FC
0008D666 ECF5                       	smpsPSGAlterVol     $F5
0008D668 8F06                       	dc.b	nD1, $06
0008D66A EC04                       	smpsPSGAlterVol     $04
0008D66C E701                       	dc.b	smpsNoAttack, $01
0008D66E EC07                       	smpsPSGAlterVol     $07
0008D670 8003                       	dc.b	nRst, $03
0008D672 ECF5                       	smpsPSGAlterVol     $F5
0008D674 8F06                       	dc.b	nD1, $06
0008D676 EC04                       	smpsPSGAlterVol     $04
0008D678 E701                       	dc.b	smpsNoAttack, $01
0008D67A EC07                       	smpsPSGAlterVol     $07
0008D67C 8006                       	dc.b	nRst, $06
0008D67E E1FF                       	smpsAlterNote       $FF
0008D680 01                         	dc.b	$01
0008D681 E102                       	smpsAlterNote       $02
0008D683 01                         	dc.b	$01
0008D684 E101                       	smpsAlterNote       $01
0008D686 01                         	dc.b	$01
0008D687 E1FC                       	smpsAlterNote       $FC
0008D689 01                         	dc.b	$01
0008D68A ECF5                       	smpsPSGAlterVol     $F5
0008D68C 9007                       	dc.b	nEb1, $07
0008D68E EC0B                       	smpsPSGAlterVol     $0B
0008D690 8004                       	dc.b	nRst, $04
0008D692 ECF5                       	smpsPSGAlterVol     $F5
0008D694 9006                       	dc.b	nEb1, $06
0008D696 EC0B                       	smpsPSGAlterVol     $0B
0008D698 8007                       	dc.b	nRst, $07
0008D69A E103                       	smpsAlterNote       $03
0008D69C 0101                       	dc.b	$01, $01
0008D69E E1FF                       	smpsAlterNote       $FF
0008D6A0 01                         	dc.b	$01
0008D6A1 E1F9                       	smpsAlterNote       $F9
0008D6A3 01                         	dc.b	$01
0008D6A4 E1FC                       	smpsAlterNote       $FC
0008D6A6 ECF5                       	smpsPSGAlterVol     $F5
0008D6A8 8F06                       	dc.b	nD1, $06
0008D6AA EC04                       	smpsPSGAlterVol     $04
0008D6AC E701                       	dc.b	smpsNoAttack, $01
0008D6AE EC07                       	smpsPSGAlterVol     $07
0008D6B0 8003                       	dc.b	nRst, $03
0008D6B2 ECF5                       	smpsPSGAlterVol     $F5
0008D6B4 8F06                       	dc.b	nD1, $06
0008D6B6 EC04                       	smpsPSGAlterVol     $04
0008D6B8 E701                       	dc.b	smpsNoAttack, $01
0008D6BA EC07                       	smpsPSGAlterVol     $07
0008D6BC 8006                       	dc.b	nRst, $06
0008D6BE E1FF                       	smpsAlterNote       $FF
0008D6C0 01                         	dc.b	$01
0008D6C1 E103                       	smpsAlterNote       $03
0008D6C3 01                         	dc.b	$01
0008D6C4 E1FF                       	smpsAlterNote       $FF
0008D6C6 01                         	dc.b	$01
0008D6C7 E1F9                       	smpsAlterNote       $F9
0008D6C9 01                         	dc.b	$01
0008D6CA E1FC                       	smpsAlterNote       $FC
0008D6CC ECF5                       	smpsPSGAlterVol     $F5
0008D6CE 8F06                       	dc.b	nD1, $06
0008D6D0 EC04                       	smpsPSGAlterVol     $04
0008D6D2 E701                       	dc.b	smpsNoAttack, $01
0008D6D4 EC07                       	smpsPSGAlterVol     $07
0008D6D6 8003                       	dc.b	nRst, $03
0008D6D8 ECF5                       	smpsPSGAlterVol     $F5
0008D6DA 8F07                       	dc.b	nD1, $07
0008D6DC EC0B                       	smpsPSGAlterVol     $0B
0008D6DE 8006                       	dc.b	nRst, $06
0008D6E0 E1FF                       	smpsAlterNote       $FF
0008D6E2 01                         	dc.b	$01
0008D6E3 E102                       	smpsAlterNote       $02
0008D6E5 0101                       	dc.b	$01, $01
0008D6E7 E1FC                       	smpsAlterNote       $FC
0008D6E9 01                         	dc.b	$01
0008D6EA ECF5                       	smpsPSGAlterVol     $F5
0008D6EC 8F07                       	dc.b	nD1, $07
0008D6EE EC0B                       	smpsPSGAlterVol     $0B
0008D6F0 8004                       	dc.b	nRst, $04
0008D6F2 ECF5                       	smpsPSGAlterVol     $F5
0008D6F4 8F06                       	dc.b	nD1, $06
0008D6F6 EC04                       	smpsPSGAlterVol     $04
0008D6F8 E701                       	dc.b	smpsNoAttack, $01
0008D6FA EC07                       	smpsPSGAlterVol     $07
0008D6FC 8006                       	dc.b	nRst, $06
0008D6FE E101                       	smpsAlterNote       $01
0008D700 01                         	dc.b	$01
0008D701 E102                       	smpsAlterNote       $02
0008D703 01                         	dc.b	$01
0008D704 E1FF                       	smpsAlterNote       $FF
0008D706 01                         	dc.b	$01
0008D707 E1F9                       	smpsAlterNote       $F9
0008D709 01                         	dc.b	$01
0008D70A E1FC                       	smpsAlterNote       $FC
0008D70C ECF5                       	smpsPSGAlterVol     $F5
0008D70E 9006                       	dc.b	nEb1, $06
0008D710 EC04                       	smpsPSGAlterVol     $04
0008D712 E701                       	dc.b	smpsNoAttack, $01
0008D714 EC07                       	smpsPSGAlterVol     $07
0008D716 8003                       	dc.b	nRst, $03
0008D718 ECF5                       	smpsPSGAlterVol     $F5
0008D71A 9006                       	dc.b	nEb1, $06
0008D71C EC04                       	smpsPSGAlterVol     $04
0008D71E E701                       	dc.b	smpsNoAttack, $01
0008D720 EC07                       	smpsPSGAlterVol     $07
0008D722 8006                       	dc.b	nRst, $06
0008D724 E100                       	smpsAlterNote       $00
0008D726 01                         	dc.b	$01
0008D727 E102                       	smpsAlterNote       $02
0008D729 01                         	dc.b	$01
0008D72A E100                       	smpsAlterNote       $00
0008D72C 01                         	dc.b	$01
0008D72D E1FF                       	smpsAlterNote       $FF
0008D72F 01                         	dc.b	$01
0008D730 ECF5                       	smpsPSGAlterVol     $F5
0008D732 9B06                       	dc.b	nD2, $06
0008D734 EC04                       	smpsPSGAlterVol     $04
0008D736 E701                       	dc.b	smpsNoAttack, $01
0008D738 EC07                       	smpsPSGAlterVol     $07
0008D73A 8003                       	dc.b	nRst, $03
0008D73C ECF5                       	smpsPSGAlterVol     $F5
0008D73E 9B07                       	dc.b	nD2, $07
0008D740 EC0B                       	smpsPSGAlterVol     $0B
0008D742 8007                       	dc.b	nRst, $07
0008D744 E105                       	smpsAlterNote       $05
0008D746 0101                       	dc.b	$01, $01
0008D748 E1FF                       	smpsAlterNote       $FF
0008D74A 01                         	dc.b	$01
0008D74B E1FC                       	smpsAlterNote       $FC
0008D74D 01                         	dc.b	$01
0008D74E E1FF                       	smpsAlterNote       $FF
0008D750 ECF5                       	smpsPSGAlterVol     $F5
0008D752 9B06                       	dc.b	nD2, $06
0008D754 EC0B                       	smpsPSGAlterVol     $0B
0008D756 8004                       	dc.b	nRst, $04
0008D758 ECF5                       	smpsPSGAlterVol     $F5
0008D75A 9B06                       	dc.b	nD2, $06
0008D75C EC04                       	smpsPSGAlterVol     $04
0008D75E E701                       	dc.b	smpsNoAttack, $01
0008D760 EC07                       	smpsPSGAlterVol     $07
0008D762 8006                       	dc.b	nRst, $06
0008D764 E102                       	smpsAlterNote       $02
0008D766 01                         	dc.b	$01
0008D767 E106                       	smpsAlterNote       $06
0008D769 01                         	dc.b	$01
0008D76A E102                       	smpsAlterNote       $02
0008D76C 01                         	dc.b	$01
0008D76D E1FC                       	smpsAlterNote       $FC
0008D76F 01                         	dc.b	$01
0008D770 E1FF                       	smpsAlterNote       $FF
0008D772 ECF5                       	smpsPSGAlterVol     $F5
0008D774 9B06                       	dc.b	nD2, $06
0008D776 EC04                       	smpsPSGAlterVol     $04
0008D778 E701                       	dc.b	smpsNoAttack, $01
0008D77A EC07                       	smpsPSGAlterVol     $07
0008D77C 8003                       	dc.b	nRst, $03
0008D77E ECF5                       	smpsPSGAlterVol     $F5
0008D780 9B07                       	dc.b	nD2, $07
0008D782 EC0B                       	smpsPSGAlterVol     $0B
0008D784 8006                       	dc.b	nRst, $06
0008D786 E102                       	smpsAlterNote       $02
0008D788 01                         	dc.b	$01
0008D789 E105                       	smpsAlterNote       $05
0008D78B 0101                       	dc.b	$01, $01
0008D78D E1FF                       	smpsAlterNote       $FF
0008D78F 01                         	dc.b	$01
0008D790 ECF5                       	smpsPSGAlterVol     $F5
0008D792 9B07                       	dc.b	nD2, $07
0008D794 EC0B                       	smpsPSGAlterVol     $0B
0008D796 8004                       	dc.b	nRst, $04
0008D798 ECF5                       	smpsPSGAlterVol     $F5
0008D79A 9B06                       	dc.b	nD2, $06
0008D79C EC04                       	smpsPSGAlterVol     $04
0008D79E E701                       	dc.b	smpsNoAttack, $01
0008D7A0 EC07                       	smpsPSGAlterVol     $07
0008D7A2 8006                       	dc.b	nRst, $06
0008D7A4 E105                       	smpsAlterNote       $05
0008D7A6 0101                       	dc.b	$01, $01
0008D7A8 E102                       	smpsAlterNote       $02
0008D7AA 01                         	dc.b	$01
0008D7AB E1FC                       	smpsAlterNote       $FC
0008D7AD 01                         	dc.b	$01
0008D7AE E1FF                       	smpsAlterNote       $FF
0008D7B0 ECF5                       	smpsPSGAlterVol     $F5
0008D7B2 9B06                       	dc.b	nD2, $06
0008D7B4 EC04                       	smpsPSGAlterVol     $04
0008D7B6 E701                       	dc.b	smpsNoAttack, $01
0008D7B8 EC07                       	smpsPSGAlterVol     $07
0008D7BA 8003                       	dc.b	nRst, $03
0008D7BC ECF5                       	smpsPSGAlterVol     $F5
0008D7BE 9B06                       	dc.b	nD2, $06
0008D7C0 EC04                       	smpsPSGAlterVol     $04
0008D7C2 E701                       	dc.b	smpsNoAttack, $01
0008D7C4 EC07                       	smpsPSGAlterVol     $07
0008D7C6 8006                       	dc.b	nRst, $06
0008D7C8 E102                       	smpsAlterNote       $02
0008D7CA 01                         	dc.b	$01
0008D7CB E106                       	smpsAlterNote       $06
0008D7CD 01                         	dc.b	$01
0008D7CE E102                       	smpsAlterNote       $02
0008D7D0 01                         	dc.b	$01
0008D7D1 E1FF                       	smpsAlterNote       $FF
0008D7D3 01                         	dc.b	$01
0008D7D4 ECF5                       	smpsPSGAlterVol     $F5
0008D7D6 9B06                       	dc.b	nD2, $06
0008D7D8 EC04                       	smpsPSGAlterVol     $04
0008D7DA E701                       	dc.b	smpsNoAttack, $01
0008D7DC EC07                       	smpsPSGAlterVol     $07
0008D7DE 8003                       	dc.b	nRst, $03
0008D7E0 ECF5                       	smpsPSGAlterVol     $F5
0008D7E2 9B07                       	dc.b	nD2, $07
0008D7E4 EC0B                       	smpsPSGAlterVol     $0B
0008D7E6 8007                       	dc.b	nRst, $07
0008D7E8 E107                       	smpsAlterNote       $07
0008D7EA 0101                       	dc.b	$01, $01
0008D7EC E1FE                       	smpsAlterNote       $FE
0008D7EE 01                         	dc.b	$01
0008D7EF E1FA                       	smpsAlterNote       $FA
0008D7F1 0101                       	dc.b	$01, $01
0008D7F3 E103                       	smpsAlterNote       $03
0008D7F5 01                         	dc.b	$01
0008D7F6 E109                       	smpsAlterNote       $09
0008D7F8 01                         	dc.b	$01
0008D7F9 E107                       	smpsAlterNote       $07
0008D7FB 01                         	dc.b	$01
0008D7FC E1FE                       	smpsAlterNote       $FE
0008D7FE 01                         	dc.b	$01
0008D7FF E108                       	smpsAlterNote       $08
0008D801 01                         	dc.b	$01
0008D802 E1FD                       	smpsAlterNote       $FD
0008D804 ECF5                       	smpsPSGAlterVol     $F5
0008D806 940E                       	dc.b	nG1, $0E
0008D808 E103                       	smpsAlterNote       $03
0008D80A EC0B                       	smpsPSGAlterVol     $0B
0008D80C 8001 01                    	dc.b	nRst, $01, $01
0008D80F E1FD                       	smpsAlterNote       $FD
0008D811 01                         	dc.b	$01
0008D812 E1FB                       	smpsAlterNote       $FB
0008D814 0101                       	dc.b	$01, $01
0008D816 E100                       	smpsAlterNote       $00
0008D818 01                         	dc.b	$01
0008D819 E103                       	smpsAlterNote       $03
0008D81B 01                         	dc.b	$01
0008D81C E100                       	smpsAlterNote       $00
0008D81E 01                         	dc.b	$01
0008D81F E1FD                       	smpsAlterNote       $FD
0008D821 01                         	dc.b	$01
0008D822 E1FA                       	smpsAlterNote       $FA
0008D824 01                         	dc.b	$01
0008D825 E1FD                       	smpsAlterNote       $FD
0008D827 01                         	dc.b	$01
0008D828 E103                       	smpsAlterNote       $03
0008D82A 0101                       	dc.b	$01, $01
0008D82C E100                       	smpsAlterNote       $00
0008D82E 01                         	dc.b	$01
0008D82F E1FE                       	smpsAlterNote       $FE
0008D831 ECF5                       	smpsPSGAlterVol     $F5
0008D833 960D                       	dc.b	nA1, $0D
0008D835 E104                       	smpsAlterNote       $04
0008D837 EC0B                       	smpsPSGAlterVol     $0B
0008D839 8001 01                    	dc.b	nRst, $01, $01
0008D83C E101                       	smpsAlterNote       $01
0008D83E 01                         	dc.b	$01
0008D83F E1FB                       	smpsAlterNote       $FB
0008D841 0101                       	dc.b	$01, $01
0008D843 E1FE                       	smpsAlterNote       $FE
0008D845 01                         	dc.b	$01
0008D846 E104                       	smpsAlterNote       $04
0008D848 0101                       	dc.b	$01, $01
0008D84A E1FE                       	smpsAlterNote       $FE
0008D84C 01                         	dc.b	$01
0008D84D E1FB                       	smpsAlterNote       $FB
0008D84F 0101                       	dc.b	$01, $01
0008D851 E101                       	smpsAlterNote       $01
0008D853 01                         	dc.b	$01
0008D854 E104                       	smpsAlterNote       $04
0008D856 0101                       	dc.b	$01, $01
0008D858 E1FE                       	smpsAlterNote       $FE
0008D85A ECF5                       	smpsPSGAlterVol     $F5
0008D85C 970D                       	dc.b	nBb1, $0D
0008D85E E101                       	smpsAlterNote       $01
0008D860 EC04                       	smpsPSGAlterVol     $04
0008D862 E701                       	dc.b	smpsNoAttack, $01
0008D864 EC07                       	smpsPSGAlterVol     $07
0008D866 E104                       	smpsAlterNote       $04
0008D868 8001                       	dc.b	nRst, $01
0008D86A E103                       	smpsAlterNote       $03
0008D86C 01                         	dc.b	$01
0008D86D E1FE                       	smpsAlterNote       $FE
0008D86F 01                         	dc.b	$01
0008D870 E1FA                       	smpsAlterNote       $FA
0008D872 01                         	dc.b	$01
0008D873 E1FE                       	smpsAlterNote       $FE
0008D875 01                         	dc.b	$01
0008D876 E101                       	smpsAlterNote       $01
0008D878 01                         	dc.b	$01
0008D879 E104                       	smpsAlterNote       $04
0008D87B 01                         	dc.b	$01
0008D87C E101                       	smpsAlterNote       $01
0008D87E 01                         	dc.b	$01
0008D87F E1FB                       	smpsAlterNote       $FB
0008D881 01                         	dc.b	$01
0008D882 E1FA                       	smpsAlterNote       $FA
0008D884 01                         	dc.b	$01
0008D885 E1FE                       	smpsAlterNote       $FE
0008D887 01                         	dc.b	$01
0008D888 E103                       	smpsAlterNote       $03
0008D88A 0101                       	dc.b	$01, $01
0008D88C E101                       	smpsAlterNote       $01
0008D88E 01                         	dc.b	$01
0008D88F E1FE                       	smpsAlterNote       $FE
0008D891 ECF5                       	smpsPSGAlterVol     $F5
0008D893 990D                       	dc.b	nC2, $0D
0008D895 E104                       	smpsAlterNote       $04
0008D897 EC0B                       	smpsPSGAlterVol     $0B
0008D899 8001 01                    	dc.b	nRst, $01, $01
0008D89C E102                       	smpsAlterNote       $02
0008D89E 01                         	dc.b	$01
0008D89F E1FC                       	smpsAlterNote       $FC
0008D8A1 0101                       	dc.b	$01, $01
0008D8A3 E102                       	smpsAlterNote       $02
0008D8A5 01                         	dc.b	$01
0008D8A6 E104                       	smpsAlterNote       $04
0008D8A8 01                         	dc.b	$01
0008D8A9 E1FF                       	smpsAlterNote       $FF
0008D8AB ECF5                       	smpsPSGAlterVol     $F5
0008D8AD 9B06                       	dc.b	nD2, $06
0008D8AF EC04                       	smpsPSGAlterVol     $04
0008D8B1 E701                       	dc.b	smpsNoAttack, $01
0008D8B3 EC07                       	smpsPSGAlterVol     $07
0008D8B5 8003                       	dc.b	nRst, $03
0008D8B7 ECF5                       	smpsPSGAlterVol     $F5
0008D8B9 9B07                       	dc.b	nD2, $07
0008D8BB EC0B                       	smpsPSGAlterVol     $0B
0008D8BD 8006                       	dc.b	nRst, $06
0008D8BF E101                       	smpsAlterNote       $01
0008D8C1 01                         	dc.b	$01
0008D8C2 E104                       	smpsAlterNote       $04
0008D8C4 0101                       	dc.b	$01, $01
0008D8C6 E1FE                       	smpsAlterNote       $FE
0008D8C8 01                         	dc.b	$01
0008D8C9 E1FC                       	smpsAlterNote       $FC
0008D8CB 01                         	dc.b	$01
0008D8CC E1FE                       	smpsAlterNote       $FE
0008D8CE ECF5                       	smpsPSGAlterVol     $F5
0008D8D0 9C06                       	dc.b	nEb2, $06
0008D8D2 EC0B                       	smpsPSGAlterVol     $0B
0008D8D4 8004                       	dc.b	nRst, $04
0008D8D6 ECF5                       	smpsPSGAlterVol     $F5
0008D8D8 9C06                       	dc.b	nEb2, $06
0008D8DA EC04                       	smpsPSGAlterVol     $04
0008D8DC E701                       	dc.b	smpsNoAttack, $01
0008D8DE EC07                       	smpsPSGAlterVol     $07
0008D8E0 8006                       	dc.b	nRst, $06
0008D8E2 E105                       	smpsAlterNote       $05
0008D8E4 01                         	dc.b	$01
0008D8E5 E106                       	smpsAlterNote       $06
0008D8E7 01                         	dc.b	$01
0008D8E8 E102                       	smpsAlterNote       $02
0008D8EA 01                         	dc.b	$01
0008D8EB E1FB                       	smpsAlterNote       $FB
0008D8ED 01                         	dc.b	$01
0008D8EE E1FF                       	smpsAlterNote       $FF
0008D8F0 ECF5                       	smpsPSGAlterVol     $F5
0008D8F2 9B06                       	dc.b	nD2, $06
0008D8F4 EC04                       	smpsPSGAlterVol     $04
0008D8F6 E701                       	dc.b	smpsNoAttack, $01
0008D8F8 EC07                       	smpsPSGAlterVol     $07
0008D8FA 8003                       	dc.b	nRst, $03
0008D8FC ECF5                       	smpsPSGAlterVol     $F5
0008D8FE 9B06                       	dc.b	nD2, $06
0008D900 EC04                       	smpsPSGAlterVol     $04
0008D902 E701                       	dc.b	smpsNoAttack, $01
0008D904 EC07                       	smpsPSGAlterVol     $07
0008D906 8006                       	dc.b	nRst, $06
0008D908 E101                       	smpsAlterNote       $01
0008D90A 01                         	dc.b	$01
0008D90B E105                       	smpsAlterNote       $05
0008D90D 01                         	dc.b	$01
0008D90E E104                       	smpsAlterNote       $04
0008D910 01                         	dc.b	$01
0008D911 E1FE                       	smpsAlterNote       $FE
0008D913 01                         	dc.b	$01
0008D914 ECF5                       	smpsPSGAlterVol     $F5
0008D916 9C07                       	dc.b	nEb2, $07
0008D918 EC0B                       	smpsPSGAlterVol     $0B
0008D91A 8004                       	dc.b	nRst, $04
0008D91C ECF5                       	smpsPSGAlterVol     $F5
0008D91E 9C06                       	dc.b	nEb2, $06
0008D920 EC0B                       	smpsPSGAlterVol     $0B
0008D922 8007                       	dc.b	nRst, $07
0008D924 E105                       	smpsAlterNote       $05
0008D926 0101                       	dc.b	$01, $01
0008D928 E102                       	smpsAlterNote       $02
0008D92A 01                         	dc.b	$01
0008D92B E1FB                       	smpsAlterNote       $FB
0008D92D 01                         	dc.b	$01
0008D92E E1FF                       	smpsAlterNote       $FF
0008D930 ECF5                       	smpsPSGAlterVol     $F5
0008D932 9B06                       	dc.b	nD2, $06
0008D934 EC04                       	smpsPSGAlterVol     $04
0008D936 E701                       	dc.b	smpsNoAttack, $01
0008D938 EC07                       	smpsPSGAlterVol     $07
0008D93A 8003                       	dc.b	nRst, $03
0008D93C ECF5                       	smpsPSGAlterVol     $F5
0008D93E 9B06                       	dc.b	nD2, $06
0008D940 EC04                       	smpsPSGAlterVol     $04
0008D942 E701                       	dc.b	smpsNoAttack, $01
0008D944 EC07                       	smpsPSGAlterVol     $07
0008D946 8006                       	dc.b	nRst, $06
0008D948 E101                       	smpsAlterNote       $01
0008D94A 01                         	dc.b	$01
0008D94B E105                       	smpsAlterNote       $05
0008D94D 01                         	dc.b	$01
0008D94E E101                       	smpsAlterNote       $01
0008D950 01                         	dc.b	$01
0008D951 E1FC                       	smpsAlterNote       $FC
0008D953 01                         	dc.b	$01
0008D954 E1FE                       	smpsAlterNote       $FE
0008D956 ECF5                       	smpsPSGAlterVol     $F5
0008D958 9C06                       	dc.b	nEb2, $06
0008D95A EC04                       	smpsPSGAlterVol     $04
0008D95C E701                       	dc.b	smpsNoAttack, $01
0008D95E EC07                       	smpsPSGAlterVol     $07
0008D960 8003                       	dc.b	nRst, $03
0008D962 ECF5                       	smpsPSGAlterVol     $F5
0008D964 9C07                       	dc.b	nEb2, $07
0008D966 EC0B                       	smpsPSGAlterVol     $0B
0008D968 8006                       	dc.b	nRst, $06
0008D96A E102                       	smpsAlterNote       $02
0008D96C 01                         	dc.b	$01
0008D96D E105                       	smpsAlterNote       $05
0008D96F 0101                       	dc.b	$01, $01
0008D971 E1FF                       	smpsAlterNote       $FF
0008D973 01                         	dc.b	$01
0008D974 ECF5                       	smpsPSGAlterVol     $F5
0008D976 9B07                       	dc.b	nD2, $07
0008D978 EC0B                       	smpsPSGAlterVol     $0B
0008D97A 8004                       	dc.b	nRst, $04
0008D97C ECF5                       	smpsPSGAlterVol     $F5
0008D97E 9B06                       	dc.b	nD2, $06
0008D980 EC04                       	smpsPSGAlterVol     $04
0008D982 E701                       	dc.b	smpsNoAttack, $01
0008D984 EC07                       	smpsPSGAlterVol     $07
0008D986 8002                       	dc.b	nRst, $02
0008D988 E1FC                       	smpsAlterNote       $FC
0008D98A ECF5                       	smpsPSGAlterVol     $F5
0008D98C 9006                       	dc.b	nEb1, $06
0008D98E EC04                       	smpsPSGAlterVol     $04
0008D990 E701                       	dc.b	smpsNoAttack, $01
0008D992 ECFC                       	smpsPSGAlterVol     $FC
0008D994 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0008D998 EC04                       	smpsPSGAlterVol     $04
0008D99A E701                       	dc.b	smpsNoAttack, $01
0008D99C E1FD                       	smpsAlterNote       $FD
0008D99E ECFC                       	smpsPSGAlterVol     $FC
0008D9A0 9402                       	dc.b	nG1, $02
0008D9A2 EC04                       	smpsPSGAlterVol     $04
0008D9A4 E701                       	dc.b	smpsNoAttack, $01
0008D9A6 E1FE                       	smpsAlterNote       $FE
0008D9A8 ECFC                       	smpsPSGAlterVol     $FC
0008D9AA 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008D9AE EC04                       	smpsPSGAlterVol     $04
0008D9B0 E701                       	dc.b	smpsNoAttack, $01
0008D9B2 EC07                       	smpsPSGAlterVol     $07
0008D9B4 8008                       	dc.b	nRst, $08
0008D9B6 F6F4 F3                    	smpsJump            music84_Jump06
0008D9B9                            
0008D9B9                            ; PSG3 Data
0008D9B9                            music84_PSG3:
0008D9B9 F500                       	smpsPSGvoice        $00
0008D9BB E1FF                       	smpsAlterNote       $FF
0008D9BD EC0F                       	smpsPSGAlterVol     $0F
0008D9BF 803A                       	dc.b	nRst, $3A
0008D9C1                            
0008D9C1                            music84_Jump05:
0008D9C1 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008D9CD 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0008D9D7 F6FF E8                    	smpsJump            music84_Jump05
0008D9DA                            
0008D9DA                            ; DAC Data
0008D9DA                            music84_DAC:
0008D9DA E0C0                       	smpsPan             panCenter, $00
0008D9DC 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0008D9E8 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0008D9F4 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008DA00 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008DA0C 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008DA18 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0008DA24 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008DA30 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008DA3C 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008DA48 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008DA54 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008DA60 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0008DA6C 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008DA78 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008DA84 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0008DA90 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008DA9C 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008DAA8 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0008DAB4 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008DAC0 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008DACC 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DAD8 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008DAE4 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008DAF0 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008DAFC 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0008DB08 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008DB14 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008DB20 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DB2C 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008DB38 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008DB44 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DB50 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008DB5C 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008DB68 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008DB74 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0008DB80 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DB8C 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008DB98 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008DBA4 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008DBB0 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008DBBC 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0008DBC8 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0008DBD4 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DBE0 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008DBEC 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008DBF8 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DC04 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008DC10 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008DC1C 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008DC28 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008DC34 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008DC40 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008DC4C 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008DC58 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008DC64 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DC70 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0008DC7C 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008DC88 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008DC94 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008DCA0 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DCAC 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0008DCB8 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0008DCC4 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008DCD0 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008DCDC 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0008DCE8 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0008DCF4 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008DD00 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008DD0C 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008DD18 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008DD24 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008DD30 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DD3C 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008DD48 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008DD54 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0008DD60 E0C0                       	smpsPan             panCenter, $00
0008DD62 F2                         	smpsStop
0008DD63                            
0008DD63                            music84_Voices:
0008DD63                            ;	Voice $00
0008DD63                            ;	$3D
0008DD63                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0008DD63                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0008DD63                            	smpsVcAlgorithm     $05
0008DD63                            	smpsVcFeedback      $07
0008DD63                            	smpsVcUnusedBits    $00
0008DD63                            	smpsVcDetune        $05, $04, $03, $04
0008DD63                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008DD63                            	smpsVcRateScale     $00, $00, $00, $00
0008DD63                            	smpsVcAttackRate    $11, $11, $11, $11
0008DD63                            	smpsVcAmpMod        $00, $00, $00, $00
0008DD63                            	smpsVcDecayRate1    $00, $00, $00, $0A
0008DD63                            	smpsVcDecayRate2    $00, $00, $00, $0B
0008DD63                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008DD63                            	smpsVcReleaseRate   $08, $08, $08, $07
0008DD63 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0008DD7C                            
0008DD7C                            ;	Voice $01
0008DD7C                            ;	$04
0008DD7C                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0008DD7C                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0008DD7C                            	smpsVcAlgorithm     $04
0008DD7C                            	smpsVcFeedback      $00
0008DD7C                            	smpsVcUnusedBits    $00
0008DD7C                            	smpsVcDetune        $04, $03, $04, $05
0008DD7C                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0008DD7C                            	smpsVcRateScale     $00, $01, $00, $01
0008DD7C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0008DD7C                            	smpsVcAmpMod        $00, $00, $00, $00
0008DD7C                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0008DD7C                            	smpsVcDecayRate2    $05, $00, $05, $00
0008DD7C                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0008DD7C                            	smpsVcReleaseRate   $06, $06, $06, $06
0008DD7C 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008DD95                            
0008DD95                            ;	Voice $02
0008DD95                            ;	$30
0008DD95                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008DD95                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008DD95                            	smpsVcAlgorithm     $00
0008DD95                            	smpsVcFeedback      $06
0008DD95                            	smpsVcUnusedBits    $00
0008DD95                            	smpsVcDetune        $04, $02, $00, $06
0008DD95                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008DD95                            	smpsVcRateScale     $00, $00, $00, $00
0008DD95                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008DD95                            	smpsVcAmpMod        $00, $00, $00, $00
0008DD95                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008DD95                            	smpsVcDecayRate2    $01, $01, $01, $01
0008DD95                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008DD95                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008DD95 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008DDAE                            
0008DDAE                            ;	Voice $03
0008DDAE                            ;	$3A
0008DDAE                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008DDAE                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008DDAE                            	smpsVcAlgorithm     $02
0008DDAE                            	smpsVcFeedback      $07
0008DDAE                            	smpsVcUnusedBits    $00
0008DDAE                            	smpsVcDetune        $04, $06, $02, $00
0008DDAE                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008DDAE                            	smpsVcRateScale     $00, $00, $00, $00
0008DDAE                            	smpsVcAttackRate    $18, $19, $14, $14
0008DDAE                            	smpsVcAmpMod        $00, $00, $00, $00
0008DDAE                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008DDAE                            	smpsVcDecayRate2    $00, $00, $00, $00
0008DDAE                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008DDAE                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008DDAE 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008DDC7                            
0008DDC7                            ;	Voice $04
0008DDC7                            ;	$3C
0008DDC7                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008DDC7                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008DDC7                            	smpsVcAlgorithm     $04
0008DDC7                            	smpsVcFeedback      $07
0008DDC7                            	smpsVcUnusedBits    $00
0008DDC7                            	smpsVcDetune        $07, $00, $00, $03
0008DDC7                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008DDC7                            	smpsVcRateScale     $00, $00, $00, $00
0008DDC7                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008DDC7                            	smpsVcAmpMod        $00, $00, $00, $00
0008DDC7                            	smpsVcDecayRate1    $00, $00, $00, $00
0008DDC7                            	smpsVcDecayRate2    $00, $00, $00, $00
0008DDC7                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008DDC7                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008DDC7 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008DDE0                            
0008DDE0                            ;	Voice $05
0008DDE0                            ;	$38
0008DDE0                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008DDE0                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008DDE0                            	smpsVcAlgorithm     $00
0008DDE0                            	smpsVcFeedback      $07
0008DDE0                            	smpsVcUnusedBits    $00
0008DDE0                            	smpsVcDetune        $04, $06, $02, $00
0008DDE0                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008DDE0                            	smpsVcRateScale     $00, $00, $00, $00
0008DDE0                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008DDE0                            	smpsVcAmpMod        $00, $00, $00, $00
0008DDE0                            	smpsVcDecayRate1    $00, $03, $00, $17
0008DDE0                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008DDE0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008DDE0                            	smpsVcReleaseRate   $08, $05, $05, $05
0008DDE0 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008DDF9                            
0008DDF9                            
0008DDFA 00                         		even
0008DDFA                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009200A                            		even
0009200A                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00095B62 00                         		even
00095B62                            Music87:	include	sound\music87.asm; Invincibility
00095B62                            triple_Header:
00095B62 =00000001                  smpsHeaderStartSong = 1
00095B62 0000                       	smpsHeaderVoice     triple_Voices
00095B64 0501                       	smpsHeaderChan      $05, $01
00095B66 0200                       	smpsHeaderTempo     $02, $00
00095B68                            
00095B6C 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00095B70 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00095B74 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00095B78 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00095B7C 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00095B82                            
00095B82                            ; DAC Data
00095B82                            triple_DAC:
00095B82 E0C0                       	smpsPan             panCenter, $00
00095B84 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00095B8A                            
00095B8A                            triple_Loop01:
00095B8A 8282 82                    	dc.b	dSnare, dSnare, dSnare
00095B8D                            
00095B8D                            triple_Loop00:
00095B8D 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00095B99 06                         	dc.b	$06
00095B9A F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00095B9F 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00095BAB 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00095BB2 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00095BB7 0303 1B                    	dc.b	$03, $03, $1B
00095BBA E0C0                       	smpsPan             panCenter, $00
00095BBC F6FF C4                    	smpsJump triple_DAC
00095BBF                            
00095BBF                            ; FM1 Data
00095BBF                            triple_FM1:
00095BBF E0C0                       	smpsPan             panCenter, $00
00095BC3 8018                       	dc.b	nRst, $18
00095BC5                            
00095BC5                            triple_Loop0B:
00095BC5 AC06 B8                    	dc.b	nG3, $06, nG4
00095BC8 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00095BCD                            
00095BCD                            triple_Loop0C:
00095BCD A7B3                       	dc.b	nD3, nD4
00095BCF F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00095BD4                            
00095BD4                            triple_Loop0D:
00095BD4 A9B5                       	dc.b	nE3, nE4
00095BD6 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00095BDB A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00095BE3 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00095BE8 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00095BF4 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00095C00 AD                         	dc.b	nAb3
00095C01 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00095C06 8018                       	dc.b	nRst, $18
00095C08 E0C0                       	smpsPan             panCenter, $00
00095C0C F6FF B1                    	smpsJump triple_FM1
00095C0F                            
00095C0F                            ; FM2 Data
00095C0F                            triple_FM2:
00095C0F E0C0                       	smpsPan             panCenter, $00
00095C13 8018                       	dc.b	nRst, $18
00095C15                            
00095C15                            triple_Loop07:
00095C15 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095C21 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095C2D F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00095C32 8003                       	dc.b	nRst, $03
00095C34                            
00095C34                            triple_Loop08:
00095C34 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095C3A F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00095C3F B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00095C45                            
00095C45                            triple_Loop09:
00095C45 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095C51 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095C5D F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00095C62 8003                       	dc.b	nRst, $03
00095C64                            
00095C64                            triple_Loop0A:
00095C64 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095C6A F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00095C6F B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00095C75 E0C0                       	smpsPan             panCenter, $00
00095C79 F6FF 94                    	smpsJump triple_FM2
00095C7C                            
00095C7C                            ; FM3 Data
00095C7C                            triple_FM3:
00095C7C E0C0                       	smpsPan             panCenter, $00
00095C80 8018                       	dc.b	nRst, $18
00095C82                            
00095C82                            triple_Loop06:
00095C82 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00095C89 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00095C8E 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00095C9A BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00095CA6 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00095CA9 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00095CAE 8018                       	dc.b	nRst, $18
00095CB0 E0C0                       	smpsPan             panCenter, $00
00095CB4 F6FF C6                    	smpsJump triple_FM3
00095CB7                            
00095CB7                            ; FM4 Data
00095CB7                            triple_FM4:
00095CB7 E103                       	smpsAlterNote       $03
00095CBB E0C0                       	smpsPan             panCenter, $00
00095CBD 8018                       	dc.b	nRst, $18
00095CBF                            
00095CBF                            triple_Loop02:
00095CBF C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095CCB C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095CD7 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00095CDC 8003                       	dc.b	nRst, $03
00095CDE                            
00095CDE                            triple_Loop03:
00095CDE B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095CE4 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00095CE9 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00095CEF                            
00095CEF                            triple_Loop04:
00095CEF C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095CFB C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095D07 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00095D0C 8003                       	dc.b	nRst, $03
00095D0E                            
00095D0E                            triple_Loop05:
00095D0E B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095D14 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00095D19 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00095D1F E0C0                       	smpsPan             panCenter, $00
00095D21 F6FF 94                    	smpsJump triple_FM4
00095D24                            
00095D24                            ; PSG1 Data
00095D24                            triple_PSG1:
00095D24 8018                       	dc.b	nRst, $18
00095D26                            
00095D26                            triple_Loop0E:
00095D26 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095D32 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095D3E 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095D4A 9402 8004                  	dc.b	nG1, $02, nRst, $04
00095D4E F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00095D53 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095D5F 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095D6B 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095D77 9402 8007                  	dc.b	nG1, $02, nRst, $07
00095D7B                            
00095D7B                            triple_Loop0F:
00095D7B 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00095D81 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00095D86 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
00095D8C                            
00095D8C                            triple_Loop10:
00095D8C A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095D98 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095DA4 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095DB0 9402 8004                  	dc.b	nG1, $02, nRst, $04
00095DB4 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00095DB9 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095DC5 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095DD1 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095DDD 9402 8007                  	dc.b	nG1, $02, nRst, $07
00095DE1                            
00095DE1                            triple_Loop11:
00095DE1 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00095DE7 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00095DEC 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00095DF2 F500                       	smpsPSGvoice        $00
00095DF4 F6FF 2E                    	smpsJump triple_PSG1
00095DF7                            
00095DF7                            triple_Voices:
00095DF7                            ;	Voice $00
00095DF7                            ;	$3A
00095DF7                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00095DF7                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00095DF7                            	smpsVcAlgorithm     $02
00095DF7                            	smpsVcFeedback      $07
00095DF7                            	smpsVcUnusedBits    $00
00095DF7                            	smpsVcDetune        $00, $00, $00, $00
00095DF7                            	smpsVcCoarseFreq    $01, $01, $07, $01
00095DF7                            	smpsVcRateScale     $01, $02, $02, $02
00095DF7                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00095DF7                            	smpsVcAmpMod        $00, $00, $00, $00
00095DF7                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00095DF7                            	smpsVcDecayRate2    $00, $00, $00, $00
00095DF7                            	smpsVcDecayLevel    $00, $01, $0F, $01
00095DF7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00095DF7 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00095E10                            
00095E10                            ;	Voice $01
00095E10                            ;	$20
00095E10                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00095E10                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00095E10                            	smpsVcAlgorithm     $00
00095E10                            	smpsVcFeedback      $04
00095E10                            	smpsVcUnusedBits    $00
00095E10                            	smpsVcDetune        $00, $00, $03, $07
00095E10                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00095E10                            	smpsVcRateScale     $03, $03, $03, $02
00095E10                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00095E10                            	smpsVcAmpMod        $00, $00, $00, $00
00095E10                            	smpsVcDecayRate1    $04, $04, $0A, $10
00095E10                            	smpsVcDecayRate2    $08, $08, $08, $0F
00095E10                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00095E10                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00095E10 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00095E10 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00095E2A 00                         		even
00095E2A                            Music88:	incbin	sound\music88.bin; Extra Life
00095F18                            		even
00095F18                            Music89:	incbin	sound\music89.bin; Special Stage
00099DE0 00                         		even
00099DE0                            Music8A:	incbin	sound\music8A.bin; Title Screen
00099FAA                            		even
00099FAA                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009A244                            		even
0009A244                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009D0D8 00                         		even
0009D0D8                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009D2F4                            		even
0009D2F4                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009D762 00                         		even
0009D762                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009DDA2 00                         		even
0009DDA2                            Music90:	incbin	sound\music90.bin ; Continue
0009E13C 00                         		even
0009E13C                            Music91:	incbin	sound\music91.bin ; Credits
0009F40A                            		even
0009F40A                            Music92:	incbin	sound\music92.bin ; Drowning
0009F74C 00                         		even
0009F74C                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
0009F81C                            		even
0009F81C                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
0009F856 00                         		even
0009F856                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
0009F890 00                         		even
0009F890                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
0009F8CA 00                         		even
0009F8CA                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
0009F904 00                         		even
0009F904                            Music98:	incbin	sound\music98.bin ; Marble Act 2
0009F93E 00                         		even
0009F93E                            Music99:	incbin	sound\music99.bin ; Marble Act 3
0009F978 00                         		even
0009F978                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
0009F9B2 00                         		even
0009F9B2                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
0009F9EC 00                         		even
0009F9EC                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
0009FA26 00                         		even
0009FA26                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
0009FA60 00                         		even
0009FA60                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
0009FF50                            		even
0009FF50                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
0009FF50                            GentleBreeze_Header:
0009FF50 =00000001                  smpsHeaderStartSong = 1
0009FF50 0000                       	smpsHeaderVoice     GentleBreeze_Voices
0009FF52 0603                       	smpsHeaderChan      $06, $03
0009FF54 0100                       	smpsHeaderTempo     $01, $00
0009FF56                            
0009FF5A 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
0009FF5E 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
0009FF62 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
0009FF66 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
0009FF6A 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
0009FF6E 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
0009FF74 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
0009FF7A 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
0009FF80                            
0009FF80                            ; PSG3 Data
0009FF80                            GentleBreeze_PSG3:
0009FF80 F2                         	smpsStop
0009FF81                            
0009FF81                            ; FM1 Data
0009FF81                            GentleBreeze_FM1:
0009FF83 E0C0                       	smpsPan             panCenter, $00
0009FF85 E1FF                       	smpsAlterNote       $FF
0009FF87 C410                       	dc.b	nG5, $10
0009FF89 E60F                       	smpsAlterVol        $0F
0009FF8B C4                         	dc.b	nG5
0009FF8C E6F1                       	smpsAlterVol        $F1
0009FF8E E100                       	smpsAlterNote       $00
0009FF90 C2                         	dc.b	nF5
0009FF91 E60F                       	smpsAlterVol        $0F
0009FF93 08                         	dc.b	$08
0009FF94 E6F1                       	smpsAlterVol        $F1
0009FF96 C010                       	dc.b	nEb5, $10
0009FF98 E60F                       	smpsAlterVol        $0F
0009FF9A C0                         	dc.b	nEb5
0009FF9B E6F1                       	smpsAlterVol        $F1
0009FF9D BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
0009FFA3 E60F                       	smpsAlterVol        $0F
0009FFA5 C9                         	dc.b	nC6
0009FFA6 E6F1                       	smpsAlterVol        $F1
0009FFA8 C5                         	dc.b	nAb5
0009FFA9 E60F                       	smpsAlterVol        $0F
0009FFAB 08                         	dc.b	$08
0009FFAC E6F1                       	smpsAlterVol        $F1
0009FFAE C010                       	dc.b	nEb5, $10
0009FFB0 E60F                       	smpsAlterVol        $0F
0009FFB2 C0                         	dc.b	nEb5
0009FFB3 E6F1                       	smpsAlterVol        $F1
0009FFB5 C208                       	dc.b	nF5, $08
0009FFB7 E1FF                       	smpsAlterNote       $FF
0009FFB9 C410                       	dc.b	nG5, $10
0009FFBB E100                       	smpsAlterNote       $00
0009FFBD C5C7                       	dc.b	nAb5, nBb5
0009FFBF E60F                       	smpsAlterVol        $0F
0009FFC1 C7                         	dc.b	nBb5
0009FFC2 E6F1                       	smpsAlterVol        $F1
0009FFC4 C5                         	dc.b	nAb5
0009FFC5 E60F                       	smpsAlterVol        $0F
0009FFC7 08                         	dc.b	$08
0009FFC8 E6F1                       	smpsAlterVol        $F1
0009FFCA E1FF                       	smpsAlterNote       $FF
0009FFCC C410                       	dc.b	nG5, $10
0009FFCE E60F                       	smpsAlterVol        $0F
0009FFD0 C4                         	dc.b	nG5
0009FFD1 E6F1                       	smpsAlterVol        $F1
0009FFD3 C4                         	dc.b	nG5
0009FFD4 E100                       	smpsAlterNote       $00
0009FFD6 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
0009FFDB E60F                       	smpsAlterVol        $0F
0009FFDD C2                         	dc.b	nF5
0009FFDE E6F1                       	smpsAlterVol        $F1
0009FFE0 E1FF                       	smpsAlterNote       $FF
0009FFE2 C4                         	dc.b	nG5
0009FFE3 E60F                       	smpsAlterVol        $0F
0009FFE5 08                         	dc.b	$08
0009FFE6 E6F1                       	smpsAlterVol        $F1
0009FFE8 10                         	dc.b	$10
0009FFE9 E60F                       	smpsAlterVol        $0F
0009FFEB 38                         	dc.b	$38
0009FFEC E6F1                       	smpsAlterVol        $F1
0009FFEE 10                         	dc.b	$10
0009FFEF E60F                       	smpsAlterVol        $0F
0009FFF1 C4                         	dc.b	nG5
0009FFF2 E6F1                       	smpsAlterVol        $F1
0009FFF4 E100                       	smpsAlterNote       $00
0009FFF6 C2                         	dc.b	nF5
0009FFF7 E60F                       	smpsAlterVol        $0F
0009FFF9 08                         	dc.b	$08
0009FFFA E6F1                       	smpsAlterVol        $F1
0009FFFC C010                       	dc.b	nEb5, $10
0009FFFE E60F                       	smpsAlterVol        $0F
000A0000 C0                         	dc.b	nEb5
000A0001 E6F1                       	smpsAlterVol        $F1
000A0003 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A0009 E60F                       	smpsAlterVol        $0F
000A000B C9                         	dc.b	nC6
000A000C E6F1                       	smpsAlterVol        $F1
000A000E C5                         	dc.b	nAb5
000A000F E60F                       	smpsAlterVol        $0F
000A0011 08                         	dc.b	$08
000A0012 E6F1                       	smpsAlterVol        $F1
000A0014 C010                       	dc.b	nEb5, $10
000A0016 E60F                       	smpsAlterVol        $0F
000A0018 C0                         	dc.b	nEb5
000A0019 E6F1                       	smpsAlterVol        $F1
000A001B C208                       	dc.b	nF5, $08
000A001D E1FF                       	smpsAlterNote       $FF
000A001F C410                       	dc.b	nG5, $10
000A0021 E100                       	smpsAlterNote       $00
000A0023 C5C7                       	dc.b	nAb5, nBb5
000A0025 E60F                       	smpsAlterVol        $0F
000A0027 C7                         	dc.b	nBb5
000A0028 E6F1                       	smpsAlterVol        $F1
000A002A C5                         	dc.b	nAb5
000A002B E60F                       	smpsAlterVol        $0F
000A002D 08                         	dc.b	$08
000A002E E6F1                       	smpsAlterVol        $F1
000A0030 E1FF                       	smpsAlterNote       $FF
000A0032 C410                       	dc.b	nG5, $10
000A0034 E60F                       	smpsAlterVol        $0F
000A0036 C4                         	dc.b	nG5
000A0037 E6F1                       	smpsAlterVol        $F1
000A0039 C4                         	dc.b	nG5
000A003A E100                       	smpsAlterNote       $00
000A003C C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A0041 E60F                       	smpsAlterVol        $0F
000A0043 28                         	dc.b	$28
000A0044 E6F1                       	smpsAlterVol        $F1
000A0046 C008 10                    	dc.b	nEb5, $08, $10
000A0049 E60F                       	smpsAlterVol        $0F
000A004B 21                         	dc.b	$21
000A004C                            
000A004C                            GentleBreeze_Loop12:
000A004C E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A004F F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A0054 E717                       	dc.b	smpsNoAttack, $17
000A0056 E6F1                       	smpsAlterVol        $F1
000A0058 E1FF                       	smpsAlterNote       $FF
000A005A C410                       	dc.b	nG5, $10
000A005C E60F                       	smpsAlterVol        $0F
000A005E C4                         	dc.b	nG5
000A005F E6F1                       	smpsAlterVol        $F1
000A0061 E100                       	smpsAlterNote       $00
000A0063 C2                         	dc.b	nF5
000A0064 E60F                       	smpsAlterVol        $0F
000A0066 08                         	dc.b	$08
000A0067 E6F1                       	smpsAlterVol        $F1
000A0069 C010                       	dc.b	nEb5, $10
000A006B E60F                       	smpsAlterVol        $0F
000A006D C0                         	dc.b	nEb5
000A006E E6F1                       	smpsAlterVol        $F1
000A0070 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A0076 E60F                       	smpsAlterVol        $0F
000A0078 C9                         	dc.b	nC6
000A0079 E6F1                       	smpsAlterVol        $F1
000A007B C5                         	dc.b	nAb5
000A007C E60F                       	smpsAlterVol        $0F
000A007E 08                         	dc.b	$08
000A007F E6F1                       	smpsAlterVol        $F1
000A0081 C010                       	dc.b	nEb5, $10
000A0083 E60F                       	smpsAlterVol        $0F
000A0085 C0                         	dc.b	nEb5
000A0086 E6F1                       	smpsAlterVol        $F1
000A0088 C208                       	dc.b	nF5, $08
000A008A E1FF                       	smpsAlterNote       $FF
000A008C C410                       	dc.b	nG5, $10
000A008E E100                       	smpsAlterNote       $00
000A0090 C5C7                       	dc.b	nAb5, nBb5
000A0092 E60F                       	smpsAlterVol        $0F
000A0094 C7                         	dc.b	nBb5
000A0095 E6F1                       	smpsAlterVol        $F1
000A0097 C5                         	dc.b	nAb5
000A0098 E60F                       	smpsAlterVol        $0F
000A009A 08                         	dc.b	$08
000A009B E6F1                       	smpsAlterVol        $F1
000A009D E1FF                       	smpsAlterNote       $FF
000A009F C410                       	dc.b	nG5, $10
000A00A1 E60F                       	smpsAlterVol        $0F
000A00A3 C4                         	dc.b	nG5
000A00A4 E6F1                       	smpsAlterVol        $F1
000A00A6 C4                         	dc.b	nG5
000A00A7 E100                       	smpsAlterNote       $00
000A00A9 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A00AE E60F                       	smpsAlterVol        $0F
000A00B0 C2                         	dc.b	nF5
000A00B1 E6F1                       	smpsAlterVol        $F1
000A00B3 E1FF                       	smpsAlterNote       $FF
000A00B5 C4                         	dc.b	nG5
000A00B6 E60F                       	smpsAlterVol        $0F
000A00B8 08                         	dc.b	$08
000A00B9 E6F1                       	smpsAlterVol        $F1
000A00BB 10                         	dc.b	$10
000A00BC E60F                       	smpsAlterVol        $0F
000A00BE 38                         	dc.b	$38
000A00BF E6F1                       	smpsAlterVol        $F1
000A00C1 10                         	dc.b	$10
000A00C2 E60F                       	smpsAlterVol        $0F
000A00C4 C4                         	dc.b	nG5
000A00C5 E6F1                       	smpsAlterVol        $F1
000A00C7 E100                       	smpsAlterNote       $00
000A00C9 C2                         	dc.b	nF5
000A00CA E60F                       	smpsAlterVol        $0F
000A00CC 08                         	dc.b	$08
000A00CD E6F1                       	smpsAlterVol        $F1
000A00CF C010                       	dc.b	nEb5, $10
000A00D1 E60F                       	smpsAlterVol        $0F
000A00D3 C0                         	dc.b	nEb5
000A00D4 E6F1                       	smpsAlterVol        $F1
000A00D6 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A00DC E60F                       	smpsAlterVol        $0F
000A00DE C9                         	dc.b	nC6
000A00DF E6F1                       	smpsAlterVol        $F1
000A00E1 C5                         	dc.b	nAb5
000A00E2 E60F                       	smpsAlterVol        $0F
000A00E4 08                         	dc.b	$08
000A00E5 E6F1                       	smpsAlterVol        $F1
000A00E7 C010                       	dc.b	nEb5, $10
000A00E9 E60F                       	smpsAlterVol        $0F
000A00EB C0                         	dc.b	nEb5
000A00EC E6F1                       	smpsAlterVol        $F1
000A00EE C208                       	dc.b	nF5, $08
000A00F0 E1FF                       	smpsAlterNote       $FF
000A00F2 C410                       	dc.b	nG5, $10
000A00F4 E100                       	smpsAlterNote       $00
000A00F6 C5C7                       	dc.b	nAb5, nBb5
000A00F8 E60F                       	smpsAlterVol        $0F
000A00FA C7                         	dc.b	nBb5
000A00FB E6F1                       	smpsAlterVol        $F1
000A00FD C5                         	dc.b	nAb5
000A00FE E60F                       	smpsAlterVol        $0F
000A0100 08                         	dc.b	$08
000A0101 E6F1                       	smpsAlterVol        $F1
000A0103 E1FF                       	smpsAlterNote       $FF
000A0105 C410                       	dc.b	nG5, $10
000A0107 E60F                       	smpsAlterVol        $0F
000A0109 C4                         	dc.b	nG5
000A010A E6F1                       	smpsAlterVol        $F1
000A010C C4                         	dc.b	nG5
000A010D E100                       	smpsAlterNote       $00
000A010F C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A0114 E60F                       	smpsAlterVol        $0F
000A0116 28                         	dc.b	$28
000A0117 E6F1                       	smpsAlterVol        $F1
000A0119 C008 10                    	dc.b	nEb5, $08, $10
000A011C E60F                       	smpsAlterVol        $0F
000A011E 21                         	dc.b	$21
000A011F E0C0                       	smpsPan             panCenter, $00
000A0121 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A0124                            
000A0124                            ; FM2 Data
000A0124                            GentleBreeze_FM2:
000A0126 E60C                       	smpsAlterVol        $0C
000A0128 E0C0                       	smpsPan             panCenter, $00
000A012A 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A0136 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A0142 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A014E 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A015A 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A0166 A039                       	dc.b	nG2, $39
000A0168                            
000A0168                            GentleBreeze_Jump04:
000A0168 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A016B                            
000A016B                            GentleBreeze_Loop11:
000A016B A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A0177 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A0183 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A018F 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A019B A3                         	dc.b	nBb2
000A019C F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A01A1 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A01AD A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A01B9 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A01C5 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A01D1 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A01DD A039                       	dc.b	nG2, $39
000A01DF E0C0                       	smpsPan             panCenter, $00
000A01E1 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A01E4                            
000A01E4                            ; FM3 Data
000A01E4                            GentleBreeze_FM3:
000A01E6 E0C0                       	smpsPan             panCenter, $00
000A01E8 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A01F0 E616                       	smpsAlterVol        $16
000A01F2 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A01F7                            
000A01F7                            GentleBreeze_Loop0F:
000A01F7 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A01FB E1FF                       	smpsAlterNote       $FF
000A01FD C4                         	dc.b	nG5
000A01FE E100                       	smpsAlterNote       $00
000A0200 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A0205 E608                       	smpsAlterVol        $08
000A0207 C080 08                    	dc.b	nEb5, nRst, $08
000A020A E6F8                       	smpsAlterVol        $F8
000A020C C7                         	dc.b	nBb5
000A020D E1FF                       	smpsAlterNote       $FF
000A020F C4                         	dc.b	nG5
000A0210 E100                       	smpsAlterNote       $00
000A0212 C0BB                       	dc.b	nEb5, nBb4
000A0214 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A0219 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A021C E1FF                       	smpsAlterNote       $FF
000A021E C4                         	dc.b	nG5
000A021F E100                       	smpsAlterNote       $00
000A0221 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A0226 E608                       	smpsAlterVol        $08
000A0228 C080 08                    	dc.b	nEb5, nRst, $08
000A022B E6F8                       	smpsAlterVol        $F8
000A022D E1FF                       	smpsAlterNote       $FF
000A022F C4                         	dc.b	nG5
000A0230 E100                       	smpsAlterNote       $00
000A0232 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A0239 E1FF                       	smpsAlterNote       $FF
000A023B C4                         	dc.b	nG5
000A023C E100                       	smpsAlterNote       $00
000A023E C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A0243 E1FF                       	smpsAlterNote       $FF
000A0245 C4                         	dc.b	nG5
000A0246 E100                       	smpsAlterNote       $00
000A0248 C7                         	dc.b	nBb5
000A0249 E1FF                       	smpsAlterNote       $FF
000A024B C4                         	dc.b	nG5
000A024C E100                       	smpsAlterNote       $00
000A024E C2C0 01                    	dc.b	nF5, nEb5, $01
000A0251                            
000A0251                            GentleBreeze_Jump03:
000A0251 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A0258 E6FA                       	smpsAlterVol        $FA
000A025A F4                         	smpsModOff
000A025B E1FF                       	smpsAlterNote       $FF
000A025D B850                       	dc.b	nG4, $50
000A025F E100                       	smpsAlterNote       $00
000A0261 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A026D E1FF                       	smpsAlterNote       $FF
000A026F B810                       	dc.b	nG4, $10
000A0271 E100                       	smpsAlterNote       $00
000A0273 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A0278 E1FF                       	smpsAlterNote       $FF
000A027A B8                         	dc.b	nG4
000A027B E100                       	smpsAlterNote       $00
000A027D B610                       	dc.b	nF4, $10
000A027F E1FF                       	smpsAlterNote       $FF
000A0281 B850                       	dc.b	nG4, $50
000A0283 E100                       	smpsAlterNote       $00
000A0285 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A028D E1FF                       	smpsAlterNote       $FF
000A028F AC08                       	dc.b	nG3, $08
000A0291 E100                       	smpsAlterNote       $00
000A0293 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A0298 E1FF                       	smpsAlterNote       $FF
000A029A B850                       	dc.b	nG4, $50
000A029C E100                       	smpsAlterNote       $00
000A029E BB08                       	dc.b	nBb4, $08
000A02A0 E1FF                       	smpsAlterNote       $FF
000A02A2 B8                         	dc.b	nG4
000A02A3 E100                       	smpsAlterNote       $00
000A02A5 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A02A8 E1FF                       	smpsAlterNote       $FF
000A02AA B810 08                    	dc.b	nG4, $10, $08
000A02AD E100                       	smpsAlterNote       $00
000A02AF B6                         	dc.b	nF4
000A02B0 E1FF                       	smpsAlterNote       $FF
000A02B2 B880                       	dc.b	nG4, nRst
000A02B4 E100                       	smpsAlterNote       $00
000A02B6 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A02B9 E1FF                       	smpsAlterNote       $FF
000A02BB B810                       	dc.b	nG4, $10
000A02BD E100                       	smpsAlterNote       $00
000A02BF B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A02C6 E1FF                       	smpsAlterNote       $FF
000A02C8 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A02D6 E606                       	smpsAlterVol        $06
000A02D8 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A02DD E100                       	smpsAlterNote       $00
000A02DF                            
000A02DF                            GentleBreeze_Loop10:
000A02DF C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A02E3 E1FF                       	smpsAlterNote       $FF
000A02E5 C4                         	dc.b	nG5
000A02E6 E100                       	smpsAlterNote       $00
000A02E8 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A02ED E608                       	smpsAlterVol        $08
000A02EF C080 08                    	dc.b	nEb5, nRst, $08
000A02F2 E6F8                       	smpsAlterVol        $F8
000A02F4 C7                         	dc.b	nBb5
000A02F5 E1FF                       	smpsAlterNote       $FF
000A02F7 C4                         	dc.b	nG5
000A02F8 E100                       	smpsAlterNote       $00
000A02FA C0BB                       	dc.b	nEb5, nBb4
000A02FC F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A0301 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A0304 E1FF                       	smpsAlterNote       $FF
000A0306 C4                         	dc.b	nG5
000A0307 E100                       	smpsAlterNote       $00
000A0309 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A030E E608                       	smpsAlterVol        $08
000A0310 C080 08                    	dc.b	nEb5, nRst, $08
000A0313 E6F8                       	smpsAlterVol        $F8
000A0315 E1FF                       	smpsAlterNote       $FF
000A0317 C4                         	dc.b	nG5
000A0318 E100                       	smpsAlterNote       $00
000A031A C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A0321 E1FF                       	smpsAlterNote       $FF
000A0323 C4                         	dc.b	nG5
000A0324 E100                       	smpsAlterNote       $00
000A0326 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A032B E1FF                       	smpsAlterNote       $FF
000A032D C4                         	dc.b	nG5
000A032E E100                       	smpsAlterNote       $00
000A0330 C7                         	dc.b	nBb5
000A0331 E1FF                       	smpsAlterNote       $FF
000A0333 C4                         	dc.b	nG5
000A0334 E100                       	smpsAlterNote       $00
000A0336 C2C0 01                    	dc.b	nF5, nEb5, $01
000A0339 E0C0                       	smpsPan             panCenter, $00
000A033B F1                         	smpsModOn
000A033C F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A033F                            
000A033F                            ; FM4 Data
000A033F                            GentleBreeze_FM4:
000A0341 E0C0                       	smpsPan             panCenter, $00
000A0343 80                         	dc.b	nRst
000A0344                            
000A0344                            GentleBreeze_Loop0D:
000A0344 7F                         	dc.b	$7F
000A0345 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A034A 77                         	dc.b	$77
000A034D E609                       	smpsAlterVol        $09
000A034F C001                       	dc.b	nEb5, $01
000A0351                            
000A0351                            GentleBreeze_Jump02:
000A0351 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A0356 E607                       	smpsAlterVol        $07
000A0358 E1FF                       	smpsAlterNote       $FF
000A035A C450                       	dc.b	nG5, $50
000A035C E100                       	smpsAlterNote       $00
000A035E C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A036A E1FF                       	smpsAlterNote       $FF
000A036C C410                       	dc.b	nG5, $10
000A036E E100                       	smpsAlterNote       $00
000A0370 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A0375 E1FF                       	smpsAlterNote       $FF
000A0377 C4                         	dc.b	nG5
000A0378 E100                       	smpsAlterNote       $00
000A037A C210                       	dc.b	nF5, $10
000A037C E1FF                       	smpsAlterNote       $FF
000A037E C450                       	dc.b	nG5, $50
000A0380 E100                       	smpsAlterNote       $00
000A0382 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A038A E1FF                       	smpsAlterNote       $FF
000A038C B808                       	dc.b	nG4, $08
000A038E E100                       	smpsAlterNote       $00
000A0390 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A0395 E1FF                       	smpsAlterNote       $FF
000A0397 C450                       	dc.b	nG5, $50
000A0399 E100                       	smpsAlterNote       $00
000A039B C708                       	dc.b	nBb5, $08
000A039D E1FF                       	smpsAlterNote       $FF
000A039F C4                         	dc.b	nG5
000A03A0 E100                       	smpsAlterNote       $00
000A03A2 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A03A5 E1FF                       	smpsAlterNote       $FF
000A03A7 C410 08                    	dc.b	nG5, $10, $08
000A03AA E100                       	smpsAlterNote       $00
000A03AC C2                         	dc.b	nF5
000A03AD E1FF                       	smpsAlterNote       $FF
000A03AF C480                       	dc.b	nG5, nRst
000A03B1 E100                       	smpsAlterNote       $00
000A03B3 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A03B6 E1FF                       	smpsAlterNote       $FF
000A03B8 C410                       	dc.b	nG5, $10
000A03BA E100                       	smpsAlterNote       $00
000A03BC BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A03C3 E1FF                       	smpsAlterNote       $FF
000A03C5 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A03CD                            
000A03CD                            GentleBreeze_Loop0E:
000A03CD 7F                         	dc.b	$7F
000A03CE F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A03D3 77                         	dc.b	$77
000A03D4 E100                       	smpsAlterNote       $00
000A03D6 C001                       	dc.b	nEb5, $01
000A03D8 E6F9                       	smpsAlterVol        $F9
000A03DA E0C0                       	smpsPan             panCenter, $00
000A03DC E100                       	smpsAlterNote       $00
000A03DE F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A03E1                            
000A03E1                            ; FM5 Data
000A03E1                            GentleBreeze_FM5:
000A03E3 E0C0                       	smpsPan             panCenter, $00
000A03E5 A5                         	dc.b	nC3
000A03E6                            
000A03E6                            GentleBreeze_Loop06:
000A03E6 10                         	dc.b	$10
000A03E7 E607                       	smpsAlterVol        $07
000A03E9 A5                         	dc.b	nC3
000A03EA E6F9                       	smpsAlterVol        $F9
000A03EC 08                         	dc.b	$08
000A03ED E607                       	smpsAlterVol        $07
000A03EF A5                         	dc.b	nC3
000A03F0 E608                       	smpsAlterVol        $08
000A03F2 A5                         	dc.b	nC3
000A03F3 E6F1                       	smpsAlterVol        $F1
000A03F5 18                         	dc.b	$18
000A03F6 E607                       	smpsAlterVol        $07
000A03F8 10                         	dc.b	$10
000A03F9 E608                       	smpsAlterVol        $08
000A03FB A5                         	dc.b	nC3
000A03FC E6F1                       	smpsAlterVol        $F1
000A03FE A5                         	dc.b	nC3
000A03FF F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A0404 A5                         	dc.b	nC3
000A0405                            
000A0405                            GentleBreeze_Loop07:
000A0405 E607                       	smpsAlterVol        $07
000A0407 A5                         	dc.b	nC3
000A0408 E6F9                       	smpsAlterVol        $F9
000A040A 08                         	dc.b	$08
000A040B E607                       	smpsAlterVol        $07
000A040D A5                         	dc.b	nC3
000A040E E608                       	smpsAlterVol        $08
000A0410 A5                         	dc.b	nC3
000A0411 E6F1                       	smpsAlterVol        $F1
000A0413 10                         	dc.b	$10
000A0414 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A0419                            
000A0419                            GentleBreeze_Loop08:
000A0419 A5                         	dc.b	nC3
000A041A E607                       	smpsAlterVol        $07
000A041C A5                         	dc.b	nC3
000A041D E6F9                       	smpsAlterVol        $F9
000A041F 08                         	dc.b	$08
000A0420 E607                       	smpsAlterVol        $07
000A0422 A5                         	dc.b	nC3
000A0423 E608                       	smpsAlterVol        $08
000A0425 A5                         	dc.b	nC3
000A0426 E6F1                       	smpsAlterVol        $F1
000A0428 18                         	dc.b	$18
000A0429 E607                       	smpsAlterVol        $07
000A042B 10                         	dc.b	$10
000A042C E608                       	smpsAlterVol        $08
000A042E A5                         	dc.b	nC3
000A042F E6F1                       	smpsAlterVol        $F1
000A0431 A5                         	dc.b	nC3
000A0432 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A0437 A5                         	dc.b	nC3
000A0438 E607                       	smpsAlterVol        $07
000A043A A5                         	dc.b	nC3
000A043B E6F9                       	smpsAlterVol        $F9
000A043D 08                         	dc.b	$08
000A043E E607                       	smpsAlterVol        $07
000A0440 A5                         	dc.b	nC3
000A0441 E608                       	smpsAlterVol        $08
000A0443 A5                         	dc.b	nC3
000A0444 E6F1                       	smpsAlterVol        $F1
000A0446 10                         	dc.b	$10
000A0447 E607                       	smpsAlterVol        $07
000A0449 A5                         	dc.b	nC3
000A044A E6F9                       	smpsAlterVol        $F9
000A044C 08                         	dc.b	$08
000A044D E607                       	smpsAlterVol        $07
000A044F A5                         	dc.b	nC3
000A0450 E608                       	smpsAlterVol        $08
000A0452 A5                         	dc.b	nC3
000A0453 E6F1                       	smpsAlterVol        $F1
000A0455 01                         	dc.b	$01
000A0456                            
000A0456                            GentleBreeze_Jump01:
000A0456 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A0459 E607                       	smpsAlterVol        $07
000A045B                            
000A045B                            GentleBreeze_Loop09:
000A045B 10                         	dc.b	$10
000A045C E608                       	smpsAlterVol        $08
000A045E A5                         	dc.b	nC3
000A045F E6F1                       	smpsAlterVol        $F1
000A0461 08                         	dc.b	$08
000A0462 E60F                       	smpsAlterVol        $0F
000A0464 18                         	dc.b	$18
000A0465 E6F8                       	smpsAlterVol        $F8
000A0467 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A046C 10                         	dc.b	$10
000A046D E608                       	smpsAlterVol        $08
000A046F A5                         	dc.b	nC3
000A0470 E6F1                       	smpsAlterVol        $F1
000A0472 08                         	dc.b	$08
000A0473 E60F                       	smpsAlterVol        $0F
000A0475 18                         	dc.b	$18
000A0476 E6F1                       	smpsAlterVol        $F1
000A0478                            
000A0478                            GentleBreeze_Loop0A:
000A0478 10                         	dc.b	$10
000A0479 E607                       	smpsAlterVol        $07
000A047B A5                         	dc.b	nC3
000A047C E6F9                       	smpsAlterVol        $F9
000A047E 08                         	dc.b	$08
000A047F E607                       	smpsAlterVol        $07
000A0481 A5                         	dc.b	nC3
000A0482 E608                       	smpsAlterVol        $08
000A0484 A5                         	dc.b	nC3
000A0485 E6F1                       	smpsAlterVol        $F1
000A0487 18                         	dc.b	$18
000A0488 E607                       	smpsAlterVol        $07
000A048A 10                         	dc.b	$10
000A048B E608                       	smpsAlterVol        $08
000A048D A5                         	dc.b	nC3
000A048E E6F1                       	smpsAlterVol        $F1
000A0490 A5                         	dc.b	nC3
000A0491 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A0496 A5                         	dc.b	nC3
000A0497                            
000A0497                            GentleBreeze_Loop0B:
000A0497 E607                       	smpsAlterVol        $07
000A0499 A5                         	dc.b	nC3
000A049A E6F9                       	smpsAlterVol        $F9
000A049C 08                         	dc.b	$08
000A049D E607                       	smpsAlterVol        $07
000A049F A5                         	dc.b	nC3
000A04A0 E608                       	smpsAlterVol        $08
000A04A2 A5                         	dc.b	nC3
000A04A3 E6F1                       	smpsAlterVol        $F1
000A04A5 10                         	dc.b	$10
000A04A6 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A04AB                            
000A04AB                            GentleBreeze_Loop0C:
000A04AB A5                         	dc.b	nC3
000A04AC E607                       	smpsAlterVol        $07
000A04AE A5                         	dc.b	nC3
000A04AF E6F9                       	smpsAlterVol        $F9
000A04B1 08                         	dc.b	$08
000A04B2 E607                       	smpsAlterVol        $07
000A04B4 A5                         	dc.b	nC3
000A04B5 E608                       	smpsAlterVol        $08
000A04B7 A5                         	dc.b	nC3
000A04B8 E6F1                       	smpsAlterVol        $F1
000A04BA 18                         	dc.b	$18
000A04BB E607                       	smpsAlterVol        $07
000A04BD 10                         	dc.b	$10
000A04BE E608                       	smpsAlterVol        $08
000A04C0 A5                         	dc.b	nC3
000A04C1 E6F1                       	smpsAlterVol        $F1
000A04C3 A5                         	dc.b	nC3
000A04C4 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A04C9 A5                         	dc.b	nC3
000A04CA E607                       	smpsAlterVol        $07
000A04CC A5                         	dc.b	nC3
000A04CD E6F9                       	smpsAlterVol        $F9
000A04CF 08                         	dc.b	$08
000A04D0 E607                       	smpsAlterVol        $07
000A04D2 A5                         	dc.b	nC3
000A04D3 E608                       	smpsAlterVol        $08
000A04D5 A5                         	dc.b	nC3
000A04D6 E6F1                       	smpsAlterVol        $F1
000A04D8 10                         	dc.b	$10
000A04D9 E607                       	smpsAlterVol        $07
000A04DB A5                         	dc.b	nC3
000A04DC E6F9                       	smpsAlterVol        $F9
000A04DE 08                         	dc.b	$08
000A04DF E607                       	smpsAlterVol        $07
000A04E1 A5                         	dc.b	nC3
000A04E2 E608                       	smpsAlterVol        $08
000A04E4 A5                         	dc.b	nC3
000A04E5 E6F1                       	smpsAlterVol        $F1
000A04E7 01                         	dc.b	$01
000A04E8 E0C0                       	smpsPan             panCenter, $00
000A04EA F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A04ED                            
000A04ED                            ; DAC Data
000A04ED                            GentleBreeze_DAC:
000A04ED 81                         	dc.b	dKick
000A04EE                            
000A04EE                            GentleBreeze_Loop00:
000A04EE 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A04F4 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A04F9 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A0504                            
000A0504                            GentleBreeze_Loop01:
000A0504 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A050A F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A050F 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A0519                            
000A0519                            GentleBreeze_Jump00:
000A0519 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A051D                            
000A051D                            GentleBreeze_Loop02:
000A051D 81                         	dc.b	dKick
000A051E                            
000A051E                            GentleBreeze_Loop03:
000A051E 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A052A 088A                       	dc.b	$08, dLowTimpani
000A052C F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A0531 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A053D 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A0542 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A0547                            
000A0547                            GentleBreeze_Loop04:
000A0547 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A054D F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A0552 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A055D                            
000A055D                            GentleBreeze_Loop05:
000A055D 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A0563 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A0568 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A0572 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A0575                            
000A0575                            ; PSG 1 Data
000A0575                            GentleBreeze_PSG1:
000A0575 80                         	dc.b	nRst
000A0576                            
000A0576                            GentleBreeze_LoopPSG02:
000A0576 7F                         	dc.b	$7F
000A0577 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A057C 08                         	dc.b	$08
000A057D EC04                       	smpsPSGAlterVol     $04
000A057F                            
000A057F                            GentleBreeze_JumpPSG01:
000A057F A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A058B A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A0593                            
000A0593                            GentleBreeze_LoopPSG03:
000A0593 7F                         	dc.b	$7F
000A0594 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A0599 08A3 01                    	dc.b	$08, nBb2, $01
000A059C F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A059F                            
000A059F                            ; PSG2 Data
000A059F                            GentleBreeze_PSG2:
000A059F 80                         	dc.b	nRst
000A05A0                            
000A05A0                            GentleBreeze_LoopPSG00:
000A05A0 7F                         	dc.b	$7F
000A05A1 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A05A6 08                         	dc.b	$08
000A05A7 EC04                       	smpsPSGAlterVol     $04
000A05A9                            
000A05A9                            GentleBreeze_JumpPSG00:
000A05A9 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A05B5 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A05BD                            
000A05BD                            GentleBreeze_LoopPSG01:
000A05BD 7F                         	dc.b	$7F
000A05BE F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A05C3 08A8 01                    	dc.b	$08, nEb3, $01
000A05C6 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A05C9                            
000A05C9                            GentleBreeze_Voices:
000A05C9                            ;	Voice $00
000A05C9                            ;	$0C
000A05C9                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A05C9                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A05C9                            	smpsVcAlgorithm     $04
000A05C9                            	smpsVcFeedback      $01
000A05C9                            	smpsVcUnusedBits    $00
000A05C9                            	smpsVcDetune        $07, $02, $07, $02
000A05C9                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A05C9                            	smpsVcRateScale     $00, $00, $00, $00
000A05C9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A05C9                            	smpsVcAmpMod        $00, $00, $00, $00
000A05C9                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A05C9                            	smpsVcDecayRate2    $01, $00, $00, $00
000A05C9                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A05C9                            	smpsVcReleaseRate   $09, $01, $04, $03
000A05C9 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A05E2                            
000A05E2                            ;	Voice $01
000A05E2                            ;	$38
000A05E2                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A05E2                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A05E2                            	smpsVcAlgorithm     $00
000A05E2                            	smpsVcFeedback      $07
000A05E2                            	smpsVcUnusedBits    $00
000A05E2                            	smpsVcDetune        $03, $07, $01, $05
000A05E2                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A05E2                            	smpsVcRateScale     $00, $02, $00, $02
000A05E2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A05E2                            	smpsVcAmpMod        $00, $00, $00, $00
000A05E2                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A05E2                            	smpsVcDecayRate2    $00, $00, $10, $00
000A05E2                            	smpsVcDecayLevel    $00, $00, $00, $00
000A05E2                            	smpsVcReleaseRate   $08, $05, $05, $05
000A05E2 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A05FB                            
000A05FB                            ;	Voice $02
000A05FB                            ;	$00
000A05FB                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A05FB                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A05FB                            	smpsVcAlgorithm     $00
000A05FB                            	smpsVcFeedback      $00
000A05FB                            	smpsVcUnusedBits    $00
000A05FB                            	smpsVcDetune        $00, $00, $00, $00
000A05FB                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A05FB                            	smpsVcRateScale     $00, $00, $00, $00
000A05FB                            	smpsVcAttackRate    $00, $00, $00, $00
000A05FB                            	smpsVcAmpMod        $00, $00, $00, $00
000A05FB                            	smpsVcDecayRate1    $00, $00, $00, $00
000A05FB                            	smpsVcDecayRate2    $00, $00, $00, $00
000A05FB                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A05FB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A05FB 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A0614                            
000A0614                            ;	Voice $03
000A0614                            ;	$36
000A0614                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A0614                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A0614                            	smpsVcAlgorithm     $06
000A0614                            	smpsVcFeedback      $06
000A0614                            	smpsVcUnusedBits    $00
000A0614                            	smpsVcDetune        $00, $00, $00, $00
000A0614                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A0614                            	smpsVcRateScale     $00, $00, $00, $00
000A0614                            	smpsVcAttackRate    $1F, $00, $18, $16
000A0614                            	smpsVcAmpMod        $00, $00, $00, $00
000A0614                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A0614                            	smpsVcDecayRate2    $00, $00, $12, $00
000A0614                            	smpsVcDecayLevel    $04, $04, $02, $00
000A0614                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A0614 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A062D                            
000A062D                            ;	Voice $04
000A062D                            ;	$07
000A062D                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A062D                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A062D                            	smpsVcAlgorithm     $07
000A062D                            	smpsVcFeedback      $00
000A062D                            	smpsVcUnusedBits    $00
000A062D                            	smpsVcDetune        $07, $06, $05, $00
000A062D                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A062D                            	smpsVcRateScale     $00, $01, $01, $01
000A062D                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A062D                            	smpsVcAmpMod        $00, $00, $00, $00
000A062D                            	smpsVcDecayRate1    $17, $17, $17, $17
000A062D                            	smpsVcDecayRate2    $00, $00, $00, $00
000A062D                            	smpsVcDecayLevel    $02, $02, $02, $02
000A062D                            	smpsVcReleaseRate   $06, $06, $06, $06
000A062D 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A0646                            
000A0646                            ;	Voice $05
000A0646                            ;	$3C
000A0646                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A0646                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A0646                            	smpsVcAlgorithm     $04
000A0646                            	smpsVcFeedback      $07
000A0646                            	smpsVcUnusedBits    $00
000A0646                            	smpsVcDetune        $06, $06, $02, $02
000A0646                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A0646                            	smpsVcRateScale     $00, $00, $00, $00
000A0646                            	smpsVcAttackRate    $0E, $14, $10, $13
000A0646                            	smpsVcAmpMod        $00, $00, $00, $00
000A0646                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A0646                            	smpsVcDecayRate2    $04, $04, $04, $04
000A0646                            	smpsVcDecayLevel    $02, $01, $01, $01
000A0646                            	smpsVcReleaseRate   $07, $07, $07, $07
000A0646 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A065F                            
000A065F                            
000A0660 00                         		even
000A0660                            ; ---------------------------------------------------------------------------
000A0660                            ; Sound	effect pointers
000A0660                            ; ---------------------------------------------------------------------------
000A0660 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A066C 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A0678 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A0684 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A0690 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A069C 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A06A8 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A06B4 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A06C0 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A06CC 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A06D8 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A06E4 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A06F0 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A06FC 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A0708 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A0714 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A0720 0000 0000                  SoundD0Index:	dc.l SoundD0
000A0724                            SoundA0:	incbin	sound\soundA0.bin
000A073A                            		even
000A073A                            SoundA1:	incbin	sound\soundA1.bin
000A0764                            		even
000A0764                            SoundA2:	incbin	sound\soundA2.bin
000A0784                            		even
000A0784                            SoundA3:	incbin	sound\soundA3.bin
000A07B6                            		even
000A07B6                            SoundA4:	incbin	sound\soundA4.bin
000A07EC                            		even
000A07EC                            SoundA5:	include	sound\fart.asm
000A07EC                            Fart_Header:
000A07EC =00000001                  smpsHeaderStartSong = 1
000A07EC 0000                       	smpsHeaderVoice     Fart_Voices
000A07EE 01                         	smpsHeaderTempoSFX  $01
000A07EF 04                         	smpsHeaderChanSFX   $04
000A07F0                            
000A0808                            
000A0808                            Fart_FM3:
000A080A E607                       	smpsAlterVol        $07
000A080C E0C0                       	smpsPan             panCenter, $00
000A080E F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A0813 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A0816 E1FE                       	smpsAlterNote       $FE
000A0818 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A081B E100                       	smpsAlterNote       $00
000A081D A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A0822 F2                         	smpsStop
000A0823                            
000A0823                            ; FM4 Data
000A0823                            Fart_FM4:
000A0825 E0C0                       	smpsPan             panCenter, $00
000A0827 8006                       	dc.b	nRst, $06
000A082B E616                       	smpsAlterVol        $16
000A082D E080                       	smpsPan             panLeft, $00
000A082F F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A0834 A212                       	dc.b	nA2, $12
000A0836 E60A                       	smpsAlterVol        $0A
000A0838 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A083B E603                       	smpsAlterVol        $03
000A083D E7A2                       	dc.b	smpsNoAttack, nA2
000A083F E603                       	smpsAlterVol        $03
000A0841 E7A2                       	dc.b	smpsNoAttack, nA2
000A0843 E604                       	smpsAlterVol        $04
000A0845 E7A2                       	dc.b	smpsNoAttack, nA2
000A0847 E606                       	smpsAlterVol        $06
000A0849 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A084C E610                       	smpsAlterVol        $10
000A084E E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A0851 E610                       	smpsAlterVol        $10
000A0853 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A0858 F2                         	smpsStop
000A0859                            
000A0859                            ; FM5 Data
000A0859                            Fart_FM5:
000A085B E0C0                       	smpsPan             panCenter, $00
000A085D 8009                       	dc.b	nRst, $09
000A0861 E616                       	smpsAlterVol        $16
000A0863 E040                       	smpsPan             panRight, $00
000A0865 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A086A A215                       	dc.b	nA2, $15
000A086C E60A                       	smpsAlterVol        $0A
000A086E E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A0871 E603                       	smpsAlterVol        $03
000A0873 E7A2                       	dc.b	smpsNoAttack, nA2
000A0875 E603                       	smpsAlterVol        $03
000A0877 E7A2                       	dc.b	smpsNoAttack, nA2
000A0879 E604                       	smpsAlterVol        $04
000A087B E7A2                       	dc.b	smpsNoAttack, nA2
000A087D E606                       	smpsAlterVol        $06
000A087F E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A0882 E610                       	smpsAlterVol        $10
000A0884 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A0887 E610                       	smpsAlterVol        $10
000A0889 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A088E F2                         	smpsStop
000A088F                            
000A088F                            ; PSG3 Data
000A088F                            Fart_PSG3:
000A088F F2                         	smpsStop
000A0890                            
000A0890                            ; FM Voices
000A0890                            Fart_Voices:
000A0890                            ;	Voice $00
000A0890                            ;	$39
000A0890                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A0890                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A0890                            	smpsVcAlgorithm     $01
000A0890                            	smpsVcFeedback      $07
000A0890                            	smpsVcUnusedBits    $00
000A0890                            	smpsVcDetune        $00, $07, $03, $07
000A0890                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A0890                            	smpsVcRateScale     $00, $03, $03, $03
000A0890                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A0890                            	smpsVcAmpMod        $00, $00, $00, $00
000A0890                            	smpsVcDecayRate1    $00, $00, $00, $04
000A0890                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A0890                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A0890                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A0890 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A08A9                            
000A08A9                            ;	Voice $01
000A08A9                            ;	$00
000A08A9                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A08A9                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A08A9                            	smpsVcAlgorithm     $00
000A08A9                            	smpsVcFeedback      $00
000A08A9                            	smpsVcUnusedBits    $00
000A08A9                            	smpsVcDetune        $00, $00, $00, $00
000A08A9                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A08A9                            	smpsVcRateScale     $00, $00, $00, $00
000A08A9                            	smpsVcAttackRate    $00, $00, $00, $00
000A08A9                            	smpsVcAmpMod        $00, $00, $00, $00
000A08A9                            	smpsVcDecayRate1    $00, $00, $00, $00
000A08A9                            	smpsVcDecayRate2    $00, $00, $00, $00
000A08A9                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A08A9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A08A9 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A08A9 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A08C2                            		even
000A08C2                            SoundA6:	incbin	sound\soundA6.bin
000A08F2                            		even
000A08F2                            SoundA7:	incbin	sound\soundA7.bin
000A0922                            		even
000A0922                            SoundA8:	incbin	sound\soundA8.bin
000A0956                            		even
000A0956                            SoundA9:	incbin	sound\soundA9.bin
000A0968                            		even
000A0968                            SoundAA:	incbin	sound\soundAA.bin
000A09AA                            		even
000A09AA                            SoundAB:	incbin	sound\soundAB.bin
000A09CA                            		even
000A09CA                            SoundAC:	incbin	sound\soundAC.bin
000A09FE                            		even
000A09FE                            SoundAD:	incbin	sound\soundAD.bin
000A0A34                            		even
000A0A34                            SoundAE:	incbin	sound\soundAE.bin
000A0A7E                            		even
000A0A7E                            SoundAF:	incbin	sound\soundAF.bin
000A0AAC                            		even
000A0AAC                            SoundB0:	incbin	sound\soundB0.bin
000A0ADE                            		even
000A0ADE                            SoundB1:	incbin	sound\soundB1.bin
000A0B0A                            		even
000A0B0A                            SoundB2:	incbin	sound\soundB2.bin
000A0B5A                            		even
000A0B5A                            SoundB3:	incbin	sound\soundB3.bin
000A0BA4                            		even
000A0BA4                            SoundB4:	include	sound\soundB4.asm
000A0BA4                            SndB4_Bumper_Header:
000A0BA4 =00000001                  smpsHeaderStartSong = 1
000A0BA4 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A0BA6 01                         	smpsHeaderTempoSFX  $01
000A0BA7 03                         	smpsHeaderChanSFX   $03
000A0BA8                            
000A0BBA                            
000A0BBA                            ; FM5 Data
000A0BBA                            SndB4_Bumper_FM5:
000A0BBC F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A0BBF                            
000A0BBF                            ; FM4 Data
000A0BBF                            SndB4_Bumper_FM4:
000A0BBF F2                         	smpsStop
000A0BC0                            
000A0BC0                            SndB4_Bumper_Jump00:
000A0BC0 A020                       	dc.b	nG2, $20
000A0BC2 F2                         	smpsStop
000A0BC3                            
000A0BC3                            ; FM3 Data
000A0BC3                            SndB4_Bumper_FM3:
000A0BC3 F2                         	smpsStop
000A0BC4                            
000A0BC4                            SndB4_Bumper_Voices:
000A0BC4                            ;	Voice $00
000A0BC4                            ;	$32
000A0BC4                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A0BC4                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A0BC4                            	smpsVcAlgorithm     $02
000A0BC4                            	smpsVcFeedback      $06
000A0BC4                            	smpsVcUnusedBits    $00
000A0BC4                            	smpsVcDetune        $07, $07, $02, $00
000A0BC4                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A0BC4                            	smpsVcRateScale     $00, $00, $00, $00
000A0BC4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A0BC4                            	smpsVcAmpMod        $00, $00, $00, $00
000A0BC4                            	smpsVcDecayRate1    $08, $00, $00, $09
000A0BC4                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A0BC4                            	smpsVcDecayLevel    $00, $00, $00, $00
000A0BC4                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A0BC4 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A0BC4 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A0BDE 00                         		even
000A0BDE                            SoundB5:	incbin	sound\soundB5.bin
000A0BFC 00                         		even
000A0BFC                            SoundB6:	incbin	sound\soundB6.bin
000A0C1A                            		even
000A0C1A                            SoundB7:	incbin	sound\soundB7.bin
000A0C56                            		even
000A0C56                            SoundB8:	incbin	sound\soundB8.bin
000A0C74                            		even
000A0C74                            SoundB9:	incbin	sound\soundB9.bin
000A0CD8                            		even
000A0CD8                            SoundBA:	incbin	sound\soundBA.bin
000A0D00                            		even
000A0D00                            SoundBB:	incbin	sound\soundBB.bin
000A0D2C                            		even
000A0D2C                            SoundBC:	incbin	sound\soundBC.bin
000A0D6E                            		even
000A0D6E                            SoundBD:	incbin	sound\soundBD.bin
000A0DC2                            		even
000A0DC2                            SoundBE:	incbin	sound\soundBE.bin
000A0DFC                            		even
000A0DFC                            SoundBF:	incbin	sound\soundBF.bin
000A0E6E                            		even
000A0E6E                            SoundC0:	incbin	sound\soundC0.bin
000A0E9C                            		even
000A0E9C                            SoundC1:	incbin	sound\soundC1.bin
000A0EF6                            		even
000A0EF6                            SoundC2:	incbin	sound\soundC2.bin
000A0F20                            		even
000A0F20                            SoundC3:	incbin	sound\soundC3.bin
000A0F9A                            		even
000A0F9A                            SoundC4:	incbin	sound\soundC4.bin
000A1098                            		even
000A1098                            SoundC5:	incbin	sound\soundC5.bin
000A1100                            		even
000A1100                            SoundC6:	incbin	sound\soundC6.bin
000A1142                            		even
000A1142                            SoundC7:	incbin	sound\soundC7.bin
000A1170                            		even
000A1170                            SoundC8:	incbin	sound\soundC8.bin
000A1182                            		even
000A1182                            SoundC9:	incbin	sound\soundC9.bin
000A11B0                            		even
000A11B0                            SoundCA:	incbin	sound\soundCA.bin
000A11DE                            		even
000A11DE                            SoundCB:	incbin	sound\soundCB.bin
000A122A                            		even
000A122A                            SoundCC:	incbin	sound\C9.ssf
000A1258                            		even
000A1258                            SoundCD:	incbin	sound\soundCD.bin
000A1284                            		even
000A1284                            SoundCE:	incbin	sound\soundCE.bin
000A12A2 00                         		even
000A12A2                            SoundCF:	incbin	sound\soundCF.bin
000A12DA                            		even
000A12DA                            SoundD0:	incbin	sound\soundD0.bin
000A1314                            		even
000A1314                            SegaPCM:	incbin	sound\segapcm.bin
000BB46A                            SegaPCM_end:	even
000BB46A                            
000BB46A                            IdiotPCM:	incbin	sound\youare.bin
000C553C 00                         IdiotPCM_end:	even
000C553C                            
000C553C                            Minecraft:	include	minecraft\code\main.asm
000C553C                            ; Minecraft: Very Legacy Console Edition
000C553C                            ; Main file
000C553C                            
000C553C                            	include	minecraft\code\variables.asm
000C553C                            ; Minecraft: Very Legacy Console Edition
000C553C                            ; Variable Definitions
000C553C                            
000C553C =00000040                  MAP_HEIGHT	equ	64
000C553C =00000100                  MAP_WIDTH	equ	256
000C553C                            
000C553C                            		rsset	$FF0000
000C553C =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000C553C =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000C553C                            
000C553C                            		rsset	$FFFF8000
000C553C =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000C553C                            
000C553C =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000C553C =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000C553C =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000C553C =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C553C =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C553C                            
000C553C                            MC_Init:
000C553C 007C 0700                  		ori	#$700,sr		; disables CPU interrupts
000C5540 4DF9 00C0 0004             		lea	($C00004).l,a6	;	; load the address of the VDP control port into a6
000C5546                            
000C5546 3CBC 8134                  		move.w	#$8134,(a6)		; disable display
000C554A 6100 0000                  		bsr.w	MC_ClearScreen		; clear VRAM, CRAM, and VSRAM
000C554E 6100 0000                  		bsr.w	MC_LoadPalette		; load in the palette
000C5552 3CBC 8174                  		move.w	#$8174,(a6)		; enable display
000C5556                            
000C5556                            
000C5556                            
000C5556 6000 FFFE                  		bra.w	*			; spin infinitely
000C555A                            
000C555A                            ; ===========================================================================
000C555A                            ; ---------------------------------------------------------------------------
000C555A                            ; Clear The Screen
000C555A                            ; ---------------------------------------------------------------------------
000C555A                            MC_ClearScreen:
000C555A 3CBC 8F01                  		move.w	#$8F01,(a6)		; set auto-incremement size to byte
000C555E                            
000C555E 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)		; clear the VRAM
000C5564 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C5568 2CBC 4000 0080             		move.l	#$40000080,(a6)		; ^
000C556E 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C5574                            
000C5574 44D6                       .waitVRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C5576 69FC                       		bvs.s	.waitVRAMClr		; if so, loop until DMA is complete
000C5578                            
000C5578 2CBC 9400 937F             		move.l	#$9400937F,(a6)		; clear the CRAM
000C557E 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C5582 2CBC C000 0080             		move.l	#$C0000080,(a6)		; ^
000C5588 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C558E                            
000C558E 44D6                       .waitCRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C5590 69FC                       		bvs.s	.waitCRAMClr		; if so, loop until DMA is complete
000C5592                            
000C5592 2CBC 9400 935F             		move.l	#$9400935F,(a6)		; clear the VSRAM
000C5598 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C559C 2CBC 4000 0090             		move.l	#$40000090,(a6)		; ^
000C55A2 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C55A8                            
000C55A8 44D6                       .waitVSRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C55AA 69FC                       		bvs.s	.waitVSRAMClr		; if so, loop until DMA is complete
000C55AC                            
000C55AC 3CBC 8F02                  		move.w	#$8F02,(a6)		; set auto-incremement size to word
000C55B0 4E75                       		rts				; return
000C55B2                            ; ---------------------------------------------------------------------------
000C55B2                            
000C55B2                            ; ===========================================================================
000C55B2                            ; ---------------------------------------------------------------------------
000C55B2                            ; Load The Palette
000C55B2                            ; ---------------------------------------------------------------------------
000C55B2                            MC_LoadPalette:
000C55B2 44D6                       		move.w	(a6),ccr		; is v-blank active?
000C55B4 6AFC                       		bpl.s	MC_LoadPalette		; if not, wait for it to start
000C55B6                            
000C55B6                            .updatePalette:
000C55B6 2CBC 9400 9340             		move.l	#$94009340,(a6)		; set the DMA transfer size (64 colors)
000C55BC                            		
000C55BC 4BFA 0000                  		lea	MC_Palette(pc),a5	; load the base address of the palette data (pc relative)
000C55C0 200D                       		move.l	a5,d0			; move the address to a data register so we can modify it
000C55C2 E288                       		lsr.l	#1,d0			; divide by two
000C55C4                            
000C55C4 323C 9500                  		move.w	#$9500,d1		; set the low byte of the transfer source address
000C55C8 1200                       		move.b	d0,d1			; ^
000C55CA 3C81                       		move.w	d1,(a6)			; ^
000C55CC                            
000C55CC E088                       		lsr.l	#8,d0			; set the middle byte of the transfer source address
000C55CE 323C 9600                  		move.w	#$9600,d1		; ^
000C55D2 1200                       		move.b	d0,d1			; ^
000C55D4 3C81                       		move.w	d1,(a6)			; ^
000C55D6                            
000C55D6 E088                       		lsr.l	#8,d0			; set the high byte of the transfer source address
000C55D8 323C 9700                  		move.w	#$9700,d1		; ^
000C55DC 1200                       		move.b	d0,d1			; ^
000C55DE 3C81                       		move.w	d1,(a6)			; ^
000C55E0                            
000C55E0 2CBC C000 0080             		move.l	#$C0000080,(a6)		; set the destination palette index and begin the transfer
000C55E6                            
000C55E6                            .waitForScan:
000C55E6                            	;	move.w	(a6),ccr		; is v-blank still active?
000C55E6                            	;	bmi.s	.waitForScan		; if so, wait for active scan before returning
000C55E6 4E75                       		rts				; return
000C55E8                            ; ---------------------------------------------------------------------------
000C55E8                            
000C55E8                            MC_Palette:
000C55E8 0E86 08AE 068E 046C 0246+  	dc.w	$E86, $8AE, $68E, $46C, $246, $024, $CC0, $AA0, $C46, $824, $EEE, $444, $222, $000, $000, $000
000C5608 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4EE, $6AE, $48C, $26A, $048, $026, $4E6, $2C4, $080
000C5628 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C5648 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C5648 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C5668                            ; end of 'ROM'
000C5668                            EndOfRom:
000C5668                            
000C5668                            
